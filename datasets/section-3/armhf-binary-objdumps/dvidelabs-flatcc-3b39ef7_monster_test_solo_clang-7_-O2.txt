
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r9, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #102400	; 0x19000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #102400	; 0x19000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <memcmp@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #102400	; 0x19000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <realloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #102400	; 0x19000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <malloc@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #102400	; 0x19000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__libc_start_main@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #102400	; 0x19000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <__gmon_start__@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #102400	; 0x19000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #102400	; 0x19000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #102400	; 0x19000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #102400	; 0x19000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #102400	; 0x19000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #102400	; 0x19000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #102400	; 0x19000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #102400	; 0x19000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	12748 <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r9, r1, r4, lsr pc
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12754 <__gmon_start__@plt>
   1280c:	andeq	r9, r1, r0, lsl #16
   12810:	andeq	r0, r0, r8, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	ip, r2, ip, asr r0
   12838:	andeq	ip, r2, ip, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	ip, r2, ip, asr r0
   12870:	andeq	ip, r2, ip, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	ip, r2, ip, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	13544 <flatcc_builder_init@@Base>
   128bc:	ldr	r1, [pc, #228]	; 129a8 <main@@Base+0x104>
   128c0:	mov	r0, r4
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	add	r1, pc, r1
   128d0:	bl	142e8 <flatcc_builder_start_buffer@@Base>
   128d4:	cmp	r0, #0
   128d8:	bne	128e8 <main@@Base+0x44>
   128dc:	add	r0, sp, #4
   128e0:	mov	r1, #36	; 0x24
   128e4:	bl	158c0 <flatcc_builder_start_table@@Base>
   128e8:	ldr	r1, [pc, #188]	; 129ac <main@@Base+0x108>
   128ec:	add	r0, sp, #4
   128f0:	add	r1, pc, r1
   128f4:	bl	17b48 <flatcc_builder_create_string_str@@Base>
   128f8:	cmp	r0, #0
   128fc:	beq	12918 <main@@Base+0x74>
   12900:	mov	r4, r0
   12904:	add	r0, sp, #4
   12908:	mov	r1, #3
   1290c:	bl	16bb0 <flatcc_builder_table_add_offset@@Base>
   12910:	cmp	r0, #0
   12914:	strne	r4, [r0]
   12918:	ldr	r1, [pc, #144]	; 129b0 <main@@Base+0x10c>
   1291c:	add	r0, sp, #4
   12920:	mov	r2, #1
   12924:	add	r1, pc, r1
   12928:	bl	16254 <flatcc_builder_check_required@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12988 <main@@Base+0xe4>
   12934:	add	r4, sp, #4
   12938:	mov	r0, r4
   1293c:	bl	162f0 <flatcc_builder_end_table@@Base>
   12940:	mov	r1, r0
   12944:	mov	r0, r4
   12948:	bl	144e8 <flatcc_builder_end_buffer@@Base>
   1294c:	sub	r1, fp, #20
   12950:	mov	r0, r4
   12954:	bl	17e60 <flatcc_builder_get_direct_buffer@@Base>
   12958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1295c:	ldr	r2, [pc, #80]	; 129b4 <main@@Base+0x110>
   12960:	ldr	r3, [pc, #80]	; 129b8 <main@@Base+0x114>
   12964:	add	r2, pc, r2
   12968:	add	r3, pc, r3
   1296c:	bl	19320 <flatcc_verify_table_as_root@@Base>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	138ac <flatcc_builder_clear@@Base>
   1297c:	mov	r0, r5
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, r7, fp, pc}
   12988:	ldr	r0, [pc, #44]	; 129bc <main@@Base+0x118>
   1298c:	ldr	r1, [pc, #44]	; 129c0 <main@@Base+0x11c>
   12990:	ldr	r3, [pc, #44]	; 129c4 <main@@Base+0x120>
   12994:	movw	r2, #2398	; 0x95e
   12998:	add	r0, pc, r0
   1299c:	add	r1, pc, r1
   129a0:	add	r3, pc, r3
   129a4:	bl	127a8 <__assert_fail@plt>
   129a8:	ldrdeq	r7, [r0], -sl
   129ac:	andeq	r7, r0, ip, lsr #13
   129b0:	strdeq	r7, [r0], -r2
   129b4:	andeq	r7, r0, r2, asr #12
   129b8:	andeq	r0, r0, r8, asr r0
   129bc:	andeq	r7, r0, r3, lsl r6
   129c0:			; <UNDEFINED> instruction: 0x000076b1
   129c4:	andeq	r7, r0, r4, lsr #14
   129c8:	push	{r4, r5, r6, r7, fp, lr}
   129cc:	add	fp, sp, #16
   129d0:	sub	sp, sp, #8
   129d4:	mov	r1, #0
   129d8:	mov	r2, #32
   129dc:	mov	r3, #16
   129e0:	mov	r4, r0
   129e4:	bl	186dc <flatcc_verify_field@@Base>
   129e8:	cmp	r0, #0
   129ec:	bne	12df4 <main@@Base+0x550>
   129f0:	mov	r0, r4
   129f4:	mov	r1, #2
   129f8:	mov	r2, #2
   129fc:	mov	r3, #2
   12a00:	bl	186dc <flatcc_verify_field@@Base>
   12a04:	cmp	r0, #0
   12a08:	bne	12df4 <main@@Base+0x550>
   12a0c:	mov	r0, r4
   12a10:	mov	r1, #1
   12a14:	mov	r2, #2
   12a18:	mov	r3, #2
   12a1c:	bl	186dc <flatcc_verify_field@@Base>
   12a20:	cmp	r0, #0
   12a24:	bne	12df4 <main@@Base+0x550>
   12a28:	mov	r0, r4
   12a2c:	mov	r1, #3
   12a30:	mov	r2, #1
   12a34:	bl	18760 <flatcc_verify_string_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12df4 <main@@Base+0x550>
   12a40:	mov	r0, r4
   12a44:	mov	r1, #6
   12a48:	mov	r2, #1
   12a4c:	mov	r3, #1
   12a50:	mov	r5, #1
   12a54:	bl	186dc <flatcc_verify_field@@Base>
   12a58:	cmp	r0, #0
   12a5c:	bne	12df4 <main@@Base+0x550>
   12a60:	mvn	r0, #0
   12a64:	mov	r1, #5
   12a68:	mov	r2, #0
   12a6c:	mov	r3, #1
   12a70:	str	r5, [sp]
   12a74:	str	r0, [sp, #4]
   12a78:	mov	r0, r4
   12a7c:	bl	18844 <flatcc_verify_vector_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	12df4 <main@@Base+0x550>
   12a88:	ldr	r3, [pc, #908]	; 12e1c <main@@Base+0x578>
   12a8c:	mov	r0, r4
   12a90:	mov	r1, #11
   12a94:	mov	r2, #0
   12a98:	add	r3, pc, r3
   12a9c:	bl	18c34 <flatcc_verify_table_vector_field@@Base>
   12aa0:	cmp	r0, #0
   12aa4:	bne	12df4 <main@@Base+0x550>
   12aa8:	mov	r0, r4
   12aac:	mov	r1, #10
   12ab0:	mov	r2, #0
   12ab4:	bl	1893c <flatcc_verify_string_vector_field@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	12df4 <main@@Base+0x550>
   12ac0:	mov	r0, r4
   12ac4:	mov	r1, #28
   12ac8:	mov	r2, #0
   12acc:	bl	1893c <flatcc_verify_string_vector_field@@Base>
   12ad0:	cmp	r0, #0
   12ad4:	bne	12df4 <main@@Base+0x550>
   12ad8:	mvn	r0, #0
   12adc:	mov	r1, #1
   12ae0:	mov	r2, #0
   12ae4:	mov	r3, #1
   12ae8:	str	r1, [sp]
   12aec:	str	r0, [sp, #4]
   12af0:	mov	r0, r4
   12af4:	mov	r1, #24
   12af8:	bl	18844 <flatcc_verify_vector_field@@Base>
   12afc:	cmp	r0, #0
   12b00:	bne	12df4 <main@@Base+0x550>
   12b04:	mvn	r0, #-536870912	; 0xe0000000
   12b08:	mov	r1, #4
   12b0c:	mov	r2, #0
   12b10:	mov	r3, #8
   12b14:	str	r1, [sp]
   12b18:	str	r0, [sp, #4]
   12b1c:	mov	r0, r4
   12b20:	mov	r1, #29
   12b24:	bl	18844 <flatcc_verify_vector_field@@Base>
   12b28:	cmp	r0, #0
   12b2c:	bne	12df4 <main@@Base+0x550>
   12b30:	ldr	r5, [pc, #744]	; 12e20 <main@@Base+0x57c>
   12b34:	mov	r0, r4
   12b38:	mov	r1, #12
   12b3c:	mov	r2, #0
   12b40:	add	r5, pc, r5
   12b44:	mov	r3, r5
   12b48:	bl	18ae0 <flatcc_verify_table_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12df4 <main@@Base+0x550>
   12b54:	ldr	r3, [pc, #712]	; 12e24 <main@@Base+0x580>
   12b58:	mov	r0, r4
   12b5c:	mov	r1, #8
   12b60:	mov	r2, #0
   12b64:	add	r3, pc, r3
   12b68:	bl	19a64 <flatcc_verify_union_field@@Base>
   12b6c:	cmp	r0, #0
   12b70:	bne	12df4 <main@@Base+0x550>
   12b74:	mvn	r6, #-1073741824	; 0xc0000000
   12b78:	mov	r7, #2
   12b7c:	mov	r0, r4
   12b80:	mov	r1, #9
   12b84:	mov	r2, #0
   12b88:	mov	r3, #4
   12b8c:	str	r7, [sp]
   12b90:	str	r6, [sp, #4]
   12b94:	bl	18844 <flatcc_verify_vector_field@@Base>
   12b98:	cmp	r0, #0
   12b9c:	bne	12df4 <main@@Base+0x550>
   12ba0:	mov	r0, r4
   12ba4:	mov	r1, #31
   12ba8:	mov	r2, #0
   12bac:	mov	r3, #4
   12bb0:	str	r7, [sp]
   12bb4:	str	r6, [sp, #4]
   12bb8:	bl	18844 <flatcc_verify_vector_field@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12df4 <main@@Base+0x550>
   12bc4:	mov	r0, #1
   12bc8:	mov	r1, #13
   12bcc:	mov	r2, #0
   12bd0:	mov	r3, #0
   12bd4:	stm	sp, {r0, r5}
   12bd8:	mov	r0, r4
   12bdc:	bl	19754 <flatcc_verify_table_as_nested_root@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12df4 <main@@Base+0x550>
   12be8:	ldr	r3, [pc, #568]	; 12e28 <main@@Base+0x584>
   12bec:	mov	r0, r4
   12bf0:	mov	r1, #14
   12bf4:	mov	r2, #0
   12bf8:	add	r3, pc, r3
   12bfc:	bl	18ae0 <flatcc_verify_table_field@@Base>
   12c00:	cmp	r0, #0
   12c04:	bne	12df4 <main@@Base+0x550>
   12c08:	mov	r0, r4
   12c0c:	mov	r1, #15
   12c10:	mov	r2, #1
   12c14:	mov	r3, #1
   12c18:	bl	186dc <flatcc_verify_field@@Base>
   12c1c:	cmp	r0, #0
   12c20:	bne	12df4 <main@@Base+0x550>
   12c24:	mov	r0, r4
   12c28:	mov	r1, #16
   12c2c:	mov	r2, #4
   12c30:	mov	r3, #4
   12c34:	bl	186dc <flatcc_verify_field@@Base>
   12c38:	cmp	r0, #0
   12c3c:	bne	12df4 <main@@Base+0x550>
   12c40:	mov	r0, r4
   12c44:	mov	r1, #17
   12c48:	mov	r2, #4
   12c4c:	mov	r3, #4
   12c50:	bl	186dc <flatcc_verify_field@@Base>
   12c54:	cmp	r0, #0
   12c58:	bne	12df4 <main@@Base+0x550>
   12c5c:	mov	r0, r4
   12c60:	mov	r1, #18
   12c64:	mov	r2, #8
   12c68:	mov	r3, #8
   12c6c:	bl	186dc <flatcc_verify_field@@Base>
   12c70:	cmp	r0, #0
   12c74:	bne	12df4 <main@@Base+0x550>
   12c78:	mov	r0, r4
   12c7c:	mov	r1, #19
   12c80:	mov	r2, #8
   12c84:	mov	r3, #8
   12c88:	bl	186dc <flatcc_verify_field@@Base>
   12c8c:	cmp	r0, #0
   12c90:	bne	12df4 <main@@Base+0x550>
   12c94:	mov	r0, r4
   12c98:	mov	r1, #20
   12c9c:	mov	r2, #4
   12ca0:	mov	r3, #4
   12ca4:	bl	186dc <flatcc_verify_field@@Base>
   12ca8:	cmp	r0, #0
   12cac:	bne	12df4 <main@@Base+0x550>
   12cb0:	mov	r0, r4
   12cb4:	mov	r1, #21
   12cb8:	mov	r2, #4
   12cbc:	mov	r3, #4
   12cc0:	bl	186dc <flatcc_verify_field@@Base>
   12cc4:	cmp	r0, #0
   12cc8:	bne	12df4 <main@@Base+0x550>
   12ccc:	mov	r0, r4
   12cd0:	mov	r1, #22
   12cd4:	mov	r2, #8
   12cd8:	mov	r3, #8
   12cdc:	bl	186dc <flatcc_verify_field@@Base>
   12ce0:	cmp	r0, #0
   12ce4:	bne	12df4 <main@@Base+0x550>
   12ce8:	mov	r0, r4
   12cec:	mov	r1, #23
   12cf0:	mov	r2, #8
   12cf4:	mov	r3, #8
   12cf8:	bl	186dc <flatcc_verify_field@@Base>
   12cfc:	cmp	r0, #0
   12d00:	bne	12df4 <main@@Base+0x550>
   12d04:	mov	r0, r4
   12d08:	mov	r1, #25
   12d0c:	mov	r2, #4
   12d10:	mov	r3, #4
   12d14:	bl	186dc <flatcc_verify_field@@Base>
   12d18:	cmp	r0, #0
   12d1c:	bne	12df4 <main@@Base+0x550>
   12d20:	mov	r0, r4
   12d24:	mov	r1, #26
   12d28:	mov	r2, #4
   12d2c:	mov	r3, #4
   12d30:	bl	186dc <flatcc_verify_field@@Base>
   12d34:	cmp	r0, #0
   12d38:	bne	12df4 <main@@Base+0x550>
   12d3c:	mov	r0, r4
   12d40:	mov	r1, #27
   12d44:	mov	r2, #4
   12d48:	mov	r3, #4
   12d4c:	bl	186dc <flatcc_verify_field@@Base>
   12d50:	cmp	r0, #0
   12d54:	bne	12df4 <main@@Base+0x550>
   12d58:	mvn	r0, #0
   12d5c:	mov	r1, #1
   12d60:	mov	r2, #0
   12d64:	mov	r3, #1
   12d68:	str	r1, [sp]
   12d6c:	str	r0, [sp, #4]
   12d70:	mov	r0, r4
   12d74:	mov	r1, #30
   12d78:	bl	18844 <flatcc_verify_vector_field@@Base>
   12d7c:	cmp	r0, #0
   12d80:	bne	12df4 <main@@Base+0x550>
   12d84:	mvn	r5, #-536870912	; 0xe0000000
   12d88:	mov	r6, #8
   12d8c:	mov	r0, r4
   12d90:	mov	r1, #32
   12d94:	mov	r2, #0
   12d98:	mov	r3, #8
   12d9c:	str	r6, [sp]
   12da0:	str	r5, [sp, #4]
   12da4:	bl	18844 <flatcc_verify_vector_field@@Base>
   12da8:	cmp	r0, #0
   12dac:	bne	12df4 <main@@Base+0x550>
   12db0:	mov	r0, r4
   12db4:	mov	r1, #33	; 0x21
   12db8:	mov	r2, #0
   12dbc:	mov	r3, #8
   12dc0:	str	r6, [sp]
   12dc4:	str	r5, [sp, #4]
   12dc8:	bl	18844 <flatcc_verify_vector_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12df4 <main@@Base+0x550>
   12dd4:	ldr	r3, [pc, #80]	; 12e2c <main@@Base+0x588>
   12dd8:	mov	r0, r4
   12ddc:	mov	r1, #34	; 0x22
   12de0:	mov	r2, #0
   12de4:	add	r3, pc, r3
   12de8:	bl	18ae0 <flatcc_verify_table_field@@Base>
   12dec:	cmp	r0, #0
   12df0:	beq	12dfc <main@@Base+0x558>
   12df4:	sub	sp, fp, #16
   12df8:	pop	{r4, r5, r6, r7, fp, pc}
   12dfc:	ldr	r3, [pc, #44]	; 12e30 <main@@Base+0x58c>
   12e00:	mov	r0, r4
   12e04:	mov	r1, #35	; 0x23
   12e08:	mov	r2, #0
   12e0c:	add	r3, pc, r3
   12e10:	sub	sp, fp, #16
   12e14:	pop	{r4, r5, r6, r7, fp, lr}
   12e18:	b	18ae0 <flatcc_verify_table_field@@Base>
   12e1c:			; <UNDEFINED> instruction: 0xffffff28
   12e20:			; <UNDEFINED> instruction: 0xfffffe80
   12e24:	andeq	r0, r0, r8, asr #5
   12e28:	andeq	r0, r0, r4, ror #4
   12e2c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12e30:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12e34:	ldrb	r1, [r0, #12]
   12e38:	sub	r1, r1, #1
   12e3c:	uxtb	r2, r1
   12e40:	cmp	r2, #3
   12e44:	movhi	r0, #0
   12e48:	bxhi	lr
   12e4c:	ldr	r2, [pc, #12]	; 12e60 <main@@Base+0x5bc>
   12e50:	sxtb	r1, r1
   12e54:	add	r2, pc, r2
   12e58:	ldr	r1, [r2, r1, lsl #2]
   12e5c:	b	18f2c <flatcc_verify_union_table@@Base>
   12e60:	andeq	r9, r1, r4
   12e64:	push	{r4, sl, fp, lr}
   12e68:	add	fp, sp, #8
   12e6c:	mov	r1, #0
   12e70:	mov	r2, #0
   12e74:	mov	r4, r0
   12e78:	bl	18760 <flatcc_verify_string_field@@Base>
   12e7c:	cmp	r0, #0
   12e80:	popne	{r4, sl, fp, pc}
   12e84:	mov	r0, r4
   12e88:	mov	r1, #1
   12e8c:	mov	r2, #8
   12e90:	mov	r3, #8
   12e94:	bl	186dc <flatcc_verify_field@@Base>
   12e98:	cmp	r0, #0
   12e9c:	beq	12ea4 <main@@Base+0x600>
   12ea0:	pop	{r4, sl, fp, pc}
   12ea4:	mov	r0, r4
   12ea8:	mov	r1, #2
   12eac:	mov	r2, #2
   12eb0:	mov	r3, #2
   12eb4:	pop	{r4, sl, fp, lr}
   12eb8:	b	186dc <flatcc_verify_field@@Base>
   12ebc:	mov	r0, #0
   12ec0:	bx	lr
   12ec4:	push	{r4, r5, r6, sl, fp, lr}
   12ec8:	add	fp, sp, #16
   12ecc:	sub	sp, sp, #8
   12ed0:	mvn	r5, #0
   12ed4:	mov	r6, #1
   12ed8:	mov	r1, #0
   12edc:	mov	r2, #0
   12ee0:	mov	r3, #1
   12ee4:	mov	r4, r0
   12ee8:	str	r6, [sp]
   12eec:	str	r5, [sp, #4]
   12ef0:	bl	18844 <flatcc_verify_vector_field@@Base>
   12ef4:	cmp	r0, #0
   12ef8:	bne	12f20 <main@@Base+0x67c>
   12efc:	mov	r0, r4
   12f00:	mov	r1, #1
   12f04:	mov	r2, #0
   12f08:	mov	r3, #1
   12f0c:	str	r6, [sp]
   12f10:	str	r5, [sp, #4]
   12f14:	bl	18844 <flatcc_verify_vector_field@@Base>
   12f18:	cmp	r0, #0
   12f1c:	beq	12f28 <main@@Base+0x684>
   12f20:	sub	sp, fp, #16
   12f24:	pop	{r4, r5, r6, sl, fp, pc}
   12f28:	ldr	r0, [pc, #40]	; 12f58 <main@@Base+0x6b4>
   12f2c:	mov	r1, #1
   12f30:	mov	r2, #0
   12f34:	mov	r3, #0
   12f38:	str	r1, [sp]
   12f3c:	mov	r1, #2
   12f40:	add	r0, pc, r0
   12f44:	str	r0, [sp, #4]
   12f48:	mov	r0, r4
   12f4c:	bl	19754 <flatcc_verify_table_as_nested_root@@Base>
   12f50:	sub	sp, fp, #16
   12f54:	pop	{r4, r5, r6, sl, fp, pc}
   12f58:			; <UNDEFINED> instruction: 0xfffffa80
   12f5c:	push	{r4, sl, fp, lr}
   12f60:	add	fp, sp, #8
   12f64:	mov	r1, #0
   12f68:	mov	r2, #1
   12f6c:	mov	r3, #1
   12f70:	mov	r4, r0
   12f74:	bl	186dc <flatcc_verify_field@@Base>
   12f78:	cmp	r0, #0
   12f7c:	bne	12fb8 <main@@Base+0x714>
   12f80:	mov	r0, r4
   12f84:	mov	r1, #1
   12f88:	mov	r2, #1
   12f8c:	mov	r3, #1
   12f90:	bl	186dc <flatcc_verify_field@@Base>
   12f94:	cmp	r0, #0
   12f98:	popne	{r4, sl, fp, pc}
   12f9c:	mov	r0, r4
   12fa0:	mov	r1, #2
   12fa4:	mov	r2, #1
   12fa8:	mov	r3, #1
   12fac:	bl	186dc <flatcc_verify_field@@Base>
   12fb0:	cmp	r0, #0
   12fb4:	beq	12fbc <main@@Base+0x718>
   12fb8:	pop	{r4, sl, fp, pc}
   12fbc:	mov	r0, r4
   12fc0:	mov	r1, #3
   12fc4:	mov	r2, #1
   12fc8:	mov	r3, #1
   12fcc:	pop	{r4, sl, fp, lr}
   12fd0:	b	186dc <flatcc_verify_field@@Base>
   12fd4:	mov	r0, #0
   12fd8:	bx	lr
   12fdc:	push	{r4, sl, fp, lr}
   12fe0:	add	fp, sp, #8
   12fe4:	ldr	r3, [pc, #88]	; 13044 <main@@Base+0x7a0>
   12fe8:	mov	r1, #0
   12fec:	mov	r2, #0
   12ff0:	mov	r4, r0
   12ff4:	add	r3, pc, r3
   12ff8:	bl	18ae0 <flatcc_verify_table_field@@Base>
   12ffc:	cmp	r0, #0
   13000:	popne	{r4, sl, fp, pc}
   13004:	ldr	r3, [pc, #60]	; 13048 <main@@Base+0x7a4>
   13008:	mov	r0, r4
   1300c:	mov	r1, #1
   13010:	mov	r2, #0
   13014:	add	r3, pc, r3
   13018:	bl	18ae0 <flatcc_verify_table_field@@Base>
   1301c:	cmp	r0, #0
   13020:	beq	13028 <main@@Base+0x784>
   13024:	pop	{r4, sl, fp, pc}
   13028:	ldr	r3, [pc, #28]	; 1304c <main@@Base+0x7a8>
   1302c:	mov	r0, r4
   13030:	mov	r1, #3
   13034:	mov	r2, #0
   13038:	add	r3, pc, r3
   1303c:	pop	{r4, sl, fp, lr}
   13040:	b	19bc8 <flatcc_verify_union_vector_field@@Base>
   13044:	andeq	r0, r0, r4, asr r0
   13048:	andeq	r0, r0, r8, lsr #1
   1304c:			; <UNDEFINED> instruction: 0xfffffdf4
   13050:	push	{r4, sl, fp, lr}
   13054:	add	fp, sp, #8
   13058:	ldr	r3, [pc, #88]	; 130b8 <main@@Base+0x814>
   1305c:	mov	r1, #0
   13060:	mov	r2, #0
   13064:	mov	r4, r0
   13068:	add	r3, pc, r3
   1306c:	bl	18ae0 <flatcc_verify_table_field@@Base>
   13070:	cmp	r0, #0
   13074:	popne	{r4, sl, fp, pc}
   13078:	ldr	r3, [pc, #60]	; 130bc <main@@Base+0x818>
   1307c:	mov	r0, r4
   13080:	mov	r1, #1
   13084:	mov	r2, #0
   13088:	add	r3, pc, r3
   1308c:	bl	18ae0 <flatcc_verify_table_field@@Base>
   13090:	cmp	r0, #0
   13094:	beq	1309c <main@@Base+0x7f8>
   13098:	pop	{r4, sl, fp, pc}
   1309c:	ldr	r3, [pc, #28]	; 130c0 <main@@Base+0x81c>
   130a0:	mov	r0, r4
   130a4:	mov	r1, #2
   130a8:	mov	r2, #0
   130ac:	add	r3, pc, r3
   130b0:	pop	{r4, sl, fp, lr}
   130b4:	b	18ae0 <flatcc_verify_table_field@@Base>
   130b8:	andeq	r0, r0, r0, lsl r1
   130bc:	andeq	r0, r0, r8, ror #3
   130c0:	andeq	r0, r0, r0, lsl #4
   130c4:	push	{r4, sl, fp, lr}
   130c8:	add	fp, sp, #8
   130cc:	ldr	r3, [pc, #152]	; 1316c <main@@Base+0x8c8>
   130d0:	mov	r1, #1
   130d4:	mov	r2, #0
   130d8:	mov	r4, r0
   130dc:	add	r3, pc, r3
   130e0:	bl	19a64 <flatcc_verify_union_field@@Base>
   130e4:	cmp	r0, #0
   130e8:	bne	1314c <main@@Base+0x8a8>
   130ec:	ldr	r3, [pc, #124]	; 13170 <main@@Base+0x8cc>
   130f0:	mov	r0, r4
   130f4:	mov	r1, #3
   130f8:	mov	r2, #0
   130fc:	add	r3, pc, r3
   13100:	bl	19a64 <flatcc_verify_union_field@@Base>
   13104:	cmp	r0, #0
   13108:	bne	1314c <main@@Base+0x8a8>
   1310c:	ldr	r3, [pc, #96]	; 13174 <main@@Base+0x8d0>
   13110:	mov	r0, r4
   13114:	mov	r1, #5
   13118:	mov	r2, #0
   1311c:	add	r3, pc, r3
   13120:	bl	19a64 <flatcc_verify_union_field@@Base>
   13124:	cmp	r0, #0
   13128:	popne	{r4, sl, fp, pc}
   1312c:	ldr	r3, [pc, #68]	; 13178 <main@@Base+0x8d4>
   13130:	mov	r0, r4
   13134:	mov	r1, #7
   13138:	mov	r2, #0
   1313c:	add	r3, pc, r3
   13140:	bl	19a64 <flatcc_verify_union_field@@Base>
   13144:	cmp	r0, #0
   13148:	beq	13150 <main@@Base+0x8ac>
   1314c:	pop	{r4, sl, fp, pc}
   13150:	ldr	r3, [pc, #36]	; 1317c <main@@Base+0x8d8>
   13154:	mov	r0, r4
   13158:	mov	r1, #9
   1315c:	mov	r2, #0
   13160:	add	r3, pc, r3
   13164:	pop	{r4, sl, fp, lr}
   13168:	b	19bc8 <flatcc_verify_union_vector_field@@Base>
   1316c:	andeq	r0, r0, ip, lsl #4
   13170:	andeq	r0, r0, ip, ror #3
   13174:	andeq	r0, r0, ip, asr #3
   13178:	andeq	r0, r0, ip, lsr #3
   1317c:	andeq	r0, r0, r8, lsl #3
   13180:	push	{r4, sl, fp, lr}
   13184:	add	fp, sp, #8
   13188:	mov	r1, #0
   1318c:	mov	r2, #0
   13190:	mov	r4, r0
   13194:	bl	18760 <flatcc_verify_string_field@@Base>
   13198:	cmp	r0, #0
   1319c:	bne	1325c <main@@Base+0x9b8>
   131a0:	mov	r0, r4
   131a4:	mov	r1, #1
   131a8:	mov	r2, #4
   131ac:	mov	r3, #4
   131b0:	bl	186dc <flatcc_verify_field@@Base>
   131b4:	cmp	r0, #0
   131b8:	bne	1325c <main@@Base+0x9b8>
   131bc:	mov	r0, r4
   131c0:	mov	r1, #2
   131c4:	mov	r2, #0
   131c8:	bl	18760 <flatcc_verify_string_field@@Base>
   131cc:	cmp	r0, #0
   131d0:	bne	1325c <main@@Base+0x9b8>
   131d4:	mov	r0, r4
   131d8:	mov	r1, #3
   131dc:	mov	r2, #8
   131e0:	mov	r3, #8
   131e4:	bl	186dc <flatcc_verify_field@@Base>
   131e8:	cmp	r0, #0
   131ec:	bne	1325c <main@@Base+0x9b8>
   131f0:	mov	r0, r4
   131f4:	mov	r1, #4
   131f8:	mov	r2, #0
   131fc:	bl	18760 <flatcc_verify_string_field@@Base>
   13200:	cmp	r0, #0
   13204:	bne	1325c <main@@Base+0x9b8>
   13208:	mov	r0, r4
   1320c:	mov	r1, #5
   13210:	mov	r2, #8
   13214:	mov	r3, #8
   13218:	bl	186dc <flatcc_verify_field@@Base>
   1321c:	cmp	r0, #0
   13220:	bne	1325c <main@@Base+0x9b8>
   13224:	mov	r0, r4
   13228:	mov	r1, #6
   1322c:	mov	r2, #4
   13230:	mov	r3, #4
   13234:	bl	186dc <flatcc_verify_field@@Base>
   13238:	cmp	r0, #0
   1323c:	popne	{r4, sl, fp, pc}
   13240:	mov	r0, r4
   13244:	mov	r1, #7
   13248:	mov	r2, #8
   1324c:	mov	r3, #8
   13250:	bl	186dc <flatcc_verify_field@@Base>
   13254:	cmp	r0, #0
   13258:	beq	13260 <main@@Base+0x9bc>
   1325c:	pop	{r4, sl, fp, pc}
   13260:	mov	r0, r4
   13264:	mov	r1, #8
   13268:	mov	r2, #4
   1326c:	mov	r3, #4
   13270:	pop	{r4, sl, fp, lr}
   13274:	b	186dc <flatcc_verify_field@@Base>
   13278:	push	{r4, sl, fp, lr}
   1327c:	add	fp, sp, #8
   13280:	mov	r1, #0
   13284:	mov	r2, #8
   13288:	mov	r3, #8
   1328c:	mov	r4, r0
   13290:	bl	186dc <flatcc_verify_field@@Base>
   13294:	cmp	r0, #0
   13298:	popne	{r4, sl, fp, pc}
   1329c:	mov	r0, r4
   132a0:	mov	r1, #1
   132a4:	mov	r2, #4
   132a8:	mov	r3, #4
   132ac:	pop	{r4, sl, fp, lr}
   132b0:	b	186dc <flatcc_verify_field@@Base>
   132b4:	push	{r4, sl, fp, lr}
   132b8:	add	fp, sp, #8
   132bc:	mov	r1, #0
   132c0:	mov	r2, #8
   132c4:	mov	r3, #8
   132c8:	mov	r4, r0
   132cc:	bl	186dc <flatcc_verify_field@@Base>
   132d0:	cmp	r0, #0
   132d4:	popne	{r4, sl, fp, pc}
   132d8:	mov	r0, r4
   132dc:	mov	r1, #1
   132e0:	mov	r2, #4
   132e4:	mov	r3, #4
   132e8:	pop	{r4, sl, fp, lr}
   132ec:	b	186dc <flatcc_verify_field@@Base>
   132f0:	ldrb	r2, [r0, #12]
   132f4:	sub	r1, r2, #2
   132f8:	cmp	r1, #9
   132fc:	bhi	13340 <main@@Base+0xa9c>
   13300:	add	r2, pc, #4
   13304:	ldr	r1, [r2, r1, lsl #2]
   13308:	add	pc, r2, r1
   1330c:	andeq	r0, r0, r8, asr #32
   13310:	andeq	r0, r0, r0, asr #32
   13314:	andeq	r0, r0, r0, asr #32
   13318:	andeq	r0, r0, r0, asr #32
   1331c:	andeq	r0, r0, r0, asr #32
   13320:	andeq	r0, r0, r0, asr #32
   13324:	andeq	r0, r0, r4, asr r0
   13328:	andeq	r0, r0, r8, lsr #32
   1332c:	andeq	r0, r0, r8, lsr #32
   13330:	andeq	r0, r0, ip, lsr r0
   13334:	mov	r1, #4
   13338:	mov	r2, #4
   1333c:	b	19014 <flatcc_verify_union_struct@@Base>
   13340:	cmp	r2, #255	; 0xff
   13344:	bne	1334c <main@@Base+0xaa8>
   13348:	b	1906c <flatcc_verify_union_string@@Base>
   1334c:	mov	r0, #0
   13350:	bx	lr
   13354:	ldr	r1, [pc, #16]	; 1336c <main@@Base+0xac8>
   13358:	add	r1, pc, r1
   1335c:	b	18f2c <flatcc_verify_union_table@@Base>
   13360:	mov	r1, #2
   13364:	mov	r2, #2
   13368:	b	19014 <flatcc_verify_union_struct@@Base>
   1336c:	andeq	r0, r0, r0, lsl r0
   13370:	mov	r1, #0
   13374:	mov	r2, #4
   13378:	mov	r3, #4
   1337c:	b	186dc <flatcc_verify_field@@Base>

00013380 <flatcc_builder_default_alloc@@Base>:
   13380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13384:	add	fp, sp, #24
   13388:	mov	r4, r1
   1338c:	cmp	r2, #0
   13390:	beq	133dc <flatcc_builder_default_alloc@@Base+0x5c>
   13394:	ldr	r0, [fp, #8]
   13398:	mov	r8, r3
   1339c:	sub	r1, r0, #1
   133a0:	cmp	r1, #6
   133a4:	bhi	13408 <flatcc_builder_default_alloc@@Base+0x88>
   133a8:	add	r3, pc, #8
   133ac:	mov	r0, #256	; 0x100
   133b0:	ldr	r1, [r3, r1, lsl #2]
   133b4:	add	pc, r3, r1
   133b8:	andeq	r0, r0, r4, rrx
   133bc:	andeq	r0, r0, r0, asr r0
   133c0:	andeq	r0, r0, r0, asr r0
   133c4:	andeq	r0, r0, ip, lsl r0
   133c8:	andeq	r0, r0, r8, asr r0
   133cc:	andeq	r0, r0, r0, asr r0
   133d0:	andeq	r0, r0, r0, rrx
   133d4:	mov	r0, #288	; 0x120
   133d8:	b	1341c <flatcc_builder_default_alloc@@Base+0x9c>
   133dc:	ldr	r0, [r4]
   133e0:	cmp	r0, #0
   133e4:	moveq	r6, #0
   133e8:	moveq	r0, r6
   133ec:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   133f0:	bl	1270c <free@plt>
   133f4:	mov	r6, #0
   133f8:	mov	r0, r6
   133fc:	str	r6, [r4]
   13400:	str	r6, [r4, #4]
   13404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13408:	mov	r0, #32
   1340c:	b	1341c <flatcc_builder_default_alloc@@Base+0x9c>
   13410:	mov	r0, r2
   13414:	b	1341c <flatcc_builder_default_alloc@@Base+0x9c>
   13418:	mov	r0, #64	; 0x40
   1341c:	mov	r7, r0
   13420:	lsl	r0, r0, #1
   13424:	cmp	r7, r2
   13428:	bcc	1341c <flatcc_builder_default_alloc@@Base+0x9c>
   1342c:	ldr	r0, [r4, #4]
   13430:	mov	r6, #0
   13434:	cmp	r0, r2
   13438:	lsrcs	r0, r0, #1
   1343c:	cmpcs	r0, r7
   13440:	bcs	13478 <flatcc_builder_default_alloc@@Base+0xf8>
   13444:	ldr	r0, [r4]
   13448:	mov	r1, r7
   1344c:	bl	12730 <realloc@plt>
   13450:	cmp	r0, #0
   13454:	mvneq	r6, #0
   13458:	moveq	r0, r6
   1345c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13460:	cmp	r8, #0
   13464:	mov	r5, r0
   13468:	ldrne	r1, [r4, #4]
   1346c:	cmpne	r7, r1
   13470:	bhi	13480 <flatcc_builder_default_alloc@@Base+0x100>
   13474:	stm	r4, {r5, r7}
   13478:	mov	r0, r6
   1347c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13480:	add	r0, r5, r1
   13484:	sub	r2, r7, r1
   13488:	mov	r1, #0
   1348c:	bl	12778 <memset@plt>
   13490:	b	13474 <flatcc_builder_default_alloc@@Base+0xf4>

00013494 <flatcc_builder_flush_vtable_cache@@Base>:
   13494:	push	{r4, r5, fp, lr}
   13498:	add	fp, sp, #8
   1349c:	mov	r4, r0
   134a0:	ldr	r0, [r0, #116]	; 0x74
   134a4:	cmp	r0, #0
   134a8:	popeq	{r4, r5, fp, pc}
   134ac:	ldr	r0, [r4, #92]	; 0x5c
   134b0:	ldr	r2, [r4, #96]	; 0x60
   134b4:	mov	r1, #0
   134b8:	mov	r5, #0
   134bc:	bl	12778 <memset@plt>
   134c0:	mov	r0, #16
   134c4:	str	r5, [r4, #120]	; 0x78
   134c8:	str	r0, [r4, #124]	; 0x7c
   134cc:	pop	{r4, r5, fp, pc}

000134d0 <flatcc_builder_custom_init@@Base>:
   134d0:	push	{r4, r5, r6, r7, fp, lr}
   134d4:	add	fp, sp, #16
   134d8:	mov	r6, r2
   134dc:	mov	r7, r1
   134e0:	mov	r1, #0
   134e4:	mov	r2, #232	; 0xe8
   134e8:	mov	r5, r3
   134ec:	mov	r4, r0
   134f0:	bl	12778 <memset@plt>
   134f4:	ldr	r0, [fp, #8]
   134f8:	cmp	r7, #0
   134fc:	bne	13514 <flatcc_builder_custom_init@@Base+0x44>
   13500:	mov	r1, #1
   13504:	add	r6, r4, #188	; 0xbc
   13508:	str	r1, [r4, #184]	; 0xb8
   1350c:	ldr	r7, [pc, #40]	; 1353c <flatcc_builder_custom_init@@Base+0x6c>
   13510:	ldr	r7, [pc, r7]
   13514:	ldr	r1, [pc, #36]	; 13540 <flatcc_builder_custom_init@@Base+0x70>
   13518:	cmp	r5, #0
   1351c:	ldr	r1, [pc, r1]
   13520:	str	r6, [r4, #36]	; 0x24
   13524:	str	r0, [r4, #40]	; 0x28
   13528:	mov	r0, #0
   1352c:	str	r7, [r4, #44]	; 0x2c
   13530:	movne	r1, r5
   13534:	str	r1, [r4, #48]	; 0x30
   13538:	pop	{r4, r5, r6, r7, fp, pc}
   1353c:	andeq	r8, r1, r8, lsr fp
   13540:	andeq	r8, r1, r8, lsr #22

00013544 <flatcc_builder_init@@Base>:
   13544:	push	{r4, r5, fp, lr}
   13548:	add	fp, sp, #8
   1354c:	mov	r1, #0
   13550:	mov	r2, #232	; 0xe8
   13554:	mov	r4, r0
   13558:	mov	r5, #0
   1355c:	bl	12778 <memset@plt>
   13560:	mov	r0, #1
   13564:	str	r0, [r4, #184]	; 0xb8
   13568:	add	r0, r4, #188	; 0xbc
   1356c:	ldr	r1, [pc, #32]	; 13594 <flatcc_builder_init@@Base+0x50>
   13570:	ldr	r1, [pc, r1]
   13574:	ldr	r2, [pc, #28]	; 13598 <flatcc_builder_init@@Base+0x54>
   13578:	ldr	r2, [pc, r2]
   1357c:	str	r0, [r4, #36]	; 0x24
   13580:	mov	r0, #0
   13584:	str	r5, [r4, #40]	; 0x28
   13588:	str	r2, [r4, #44]	; 0x2c
   1358c:	str	r1, [r4, #48]	; 0x30
   13590:	pop	{r4, r5, fp, pc}
   13594:	ldrdeq	r8, [r1], -r4
   13598:	ldrdeq	r8, [r1], -r0

0001359c <flatcc_builder_custom_reset@@Base>:
   1359c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135a0:	add	fp, sp, #24
   135a4:	sub	sp, sp, #8
   135a8:	mov	r9, r2
   135ac:	mov	r8, r1
   135b0:	mov	r4, r0
   135b4:	add	r7, r0, #52	; 0x34
   135b8:	mov	r5, #0
   135bc:	ldr	r0, [r7]
   135c0:	cmp	r0, #0
   135c4:	beq	1360c <flatcc_builder_custom_reset@@Base+0x70>
   135c8:	cmp	r9, #0
   135cc:	cmpne	r5, #5
   135d0:	beq	135fc <flatcc_builder_custom_reset@@Base+0x60>
   135d4:	ldr	r0, [r4, #40]	; 0x28
   135d8:	ldr	r6, [r4, #48]	; 0x30
   135dc:	mov	r1, r7
   135e0:	mov	r2, #1
   135e4:	mov	r3, #1
   135e8:	str	r5, [sp]
   135ec:	blx	r6
   135f0:	cmp	r0, #0
   135f4:	bne	136ac <flatcc_builder_custom_reset@@Base+0x110>
   135f8:	ldr	r0, [r7]
   135fc:	ldr	r2, [r7, #4]
   13600:	mov	r1, #0
   13604:	bl	12778 <memset@plt>
   13608:	b	13618 <flatcc_builder_custom_reset@@Base+0x7c>
   1360c:	ldr	r0, [r7, #4]
   13610:	cmp	r0, #0
   13614:	bne	136bc <flatcc_builder_custom_reset@@Base+0x120>
   13618:	add	r5, r5, #1
   1361c:	add	r7, r7, #8
   13620:	cmp	r5, #8
   13624:	bcc	135bc <flatcc_builder_custom_reset@@Base+0x20>
   13628:	mov	r0, #0
   1362c:	vmov.i32	q8, #0	; 0x00000000
   13630:	mov	r5, #0
   13634:	str	r0, [r4, #120]	; 0x78
   13638:	ldr	r1, [r4, #124]	; 0x7c
   1363c:	cmp	r1, #0
   13640:	movne	r1, #16
   13644:	strne	r1, [r4, #124]	; 0x7c
   13648:	add	r1, r4, #148	; 0x94
   1364c:	strh	r0, [r4, #128]	; 0x80
   13650:	str	r0, [r4, #136]	; 0x88
   13654:	str	r0, [r4, #140]	; 0x8c
   13658:	str	r0, [r4, #32]
   1365c:	cmp	r8, #0
   13660:	vst1.32	{d16-d17}, [r1]
   13664:	ldr	r2, [r4, #60]	; 0x3c
   13668:	ldr	r1, [r4, #52]	; 0x34
   1366c:	ldr	r3, [r4, #76]	; 0x4c
   13670:	str	r2, [r4, #16]
   13674:	str	r0, [r4, #20]
   13678:	str	r0, [r4, #24]
   1367c:	movne	r0, #0
   13680:	str	r3, [r4]
   13684:	str	r1, [r4, #4]
   13688:	strne	r0, [r4, #172]	; 0xac
   1368c:	strne	r0, [r4, #176]	; 0xb0
   13690:	strne	r0, [r4, #180]	; 0xb4
   13694:	ldr	r0, [r4, #184]	; 0xb8
   13698:	cmp	r0, #0
   1369c:	beq	136b0 <flatcc_builder_custom_reset@@Base+0x114>
   136a0:	add	r0, r4, #188	; 0xbc
   136a4:	bl	18180 <flatcc_emitter_reset@@Base>
   136a8:	b	136b0 <flatcc_builder_custom_reset@@Base+0x114>
   136ac:	mvn	r5, #0
   136b0:	mov	r0, r5
   136b4:	sub	sp, fp, #24
   136b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   136bc:	ldr	r0, [pc, #24]	; 136dc <flatcc_builder_custom_reset@@Base+0x140>
   136c0:	ldr	r1, [pc, #24]	; 136e0 <flatcc_builder_custom_reset@@Base+0x144>
   136c4:	ldr	r3, [pc, #24]	; 136e4 <flatcc_builder_custom_reset@@Base+0x148>
   136c8:	movw	r2, #434	; 0x1b2
   136cc:	add	r0, pc, r0
   136d0:	add	r1, pc, r1
   136d4:	add	r3, pc, r3
   136d8:	bl	127a8 <__assert_fail@plt>
   136dc:	andeq	r6, r0, lr, asr #24
   136e0:	andeq	r6, r0, ip, asr ip
   136e4:			; <UNDEFINED> instruction: 0x00006cb5

000136e8 <flatcc_builder_reset@@Base>:
   136e8:	push	{r4, sl, fp, lr}
   136ec:	add	fp, sp, #8
   136f0:	mov	r4, r0
   136f4:	ldr	r0, [r0, #52]	; 0x34
   136f8:	ldr	r2, [r4, #56]	; 0x38
   136fc:	cmp	r0, #0
   13700:	beq	13710 <flatcc_builder_reset@@Base+0x28>
   13704:	mov	r1, #0
   13708:	bl	12778 <memset@plt>
   1370c:	b	13718 <flatcc_builder_reset@@Base+0x30>
   13710:	cmp	r2, #0
   13714:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   13718:	ldr	r0, [r4, #60]	; 0x3c
   1371c:	ldr	r2, [r4, #64]	; 0x40
   13720:	cmp	r0, #0
   13724:	beq	13734 <flatcc_builder_reset@@Base+0x4c>
   13728:	mov	r1, #0
   1372c:	bl	12778 <memset@plt>
   13730:	b	1373c <flatcc_builder_reset@@Base+0x54>
   13734:	cmp	r2, #0
   13738:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   1373c:	ldr	r0, [r4, #68]	; 0x44
   13740:	ldr	r2, [r4, #72]	; 0x48
   13744:	cmp	r0, #0
   13748:	beq	13758 <flatcc_builder_reset@@Base+0x70>
   1374c:	mov	r1, #0
   13750:	bl	12778 <memset@plt>
   13754:	b	13760 <flatcc_builder_reset@@Base+0x78>
   13758:	cmp	r2, #0
   1375c:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   13760:	ldr	r0, [r4, #76]	; 0x4c
   13764:	ldr	r2, [r4, #80]	; 0x50
   13768:	cmp	r0, #0
   1376c:	beq	1377c <flatcc_builder_reset@@Base+0x94>
   13770:	mov	r1, #0
   13774:	bl	12778 <memset@plt>
   13778:	b	13784 <flatcc_builder_reset@@Base+0x9c>
   1377c:	cmp	r2, #0
   13780:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   13784:	ldr	r0, [r4, #84]	; 0x54
   13788:	ldr	r2, [r4, #88]	; 0x58
   1378c:	cmp	r0, #0
   13790:	beq	137a0 <flatcc_builder_reset@@Base+0xb8>
   13794:	mov	r1, #0
   13798:	bl	12778 <memset@plt>
   1379c:	b	137a8 <flatcc_builder_reset@@Base+0xc0>
   137a0:	cmp	r2, #0
   137a4:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   137a8:	ldr	r0, [r4, #92]	; 0x5c
   137ac:	ldr	r2, [r4, #96]	; 0x60
   137b0:	cmp	r0, #0
   137b4:	beq	137c4 <flatcc_builder_reset@@Base+0xdc>
   137b8:	mov	r1, #0
   137bc:	bl	12778 <memset@plt>
   137c0:	b	137cc <flatcc_builder_reset@@Base+0xe4>
   137c4:	cmp	r2, #0
   137c8:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   137cc:	ldr	r0, [r4, #100]	; 0x64
   137d0:	ldr	r2, [r4, #104]	; 0x68
   137d4:	cmp	r0, #0
   137d8:	beq	137e8 <flatcc_builder_reset@@Base+0x100>
   137dc:	mov	r1, #0
   137e0:	bl	12778 <memset@plt>
   137e4:	b	137f0 <flatcc_builder_reset@@Base+0x108>
   137e8:	cmp	r2, #0
   137ec:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   137f0:	ldr	r0, [r4, #108]	; 0x6c
   137f4:	ldr	r2, [r4, #112]	; 0x70
   137f8:	cmp	r0, #0
   137fc:	beq	1380c <flatcc_builder_reset@@Base+0x124>
   13800:	mov	r1, #0
   13804:	bl	12778 <memset@plt>
   13808:	b	13814 <flatcc_builder_reset@@Base+0x12c>
   1380c:	cmp	r2, #0
   13810:	bne	13880 <flatcc_builder_reset@@Base+0x198>
   13814:	mov	r0, #0
   13818:	str	r0, [r4, #120]	; 0x78
   1381c:	ldr	r1, [r4, #124]	; 0x7c
   13820:	cmp	r1, #0
   13824:	movne	r1, #16
   13828:	strne	r1, [r4, #124]	; 0x7c
   1382c:	vmov.i32	q8, #0	; 0x00000000
   13830:	add	r1, r4, #148	; 0x94
   13834:	strh	r0, [r4, #128]	; 0x80
   13838:	str	r0, [r4, #136]	; 0x88
   1383c:	str	r0, [r4, #140]	; 0x8c
   13840:	str	r0, [r4, #32]
   13844:	vst1.32	{d16-d17}, [r1]
   13848:	ldr	r1, [r4, #184]	; 0xb8
   1384c:	ldr	ip, [r4, #52]	; 0x34
   13850:	ldr	r2, [r4, #60]	; 0x3c
   13854:	ldr	r3, [r4, #76]	; 0x4c
   13858:	cmp	r1, #0
   1385c:	str	r2, [r4, #16]
   13860:	str	r0, [r4, #20]
   13864:	str	r0, [r4, #24]
   13868:	stm	r4, {r3, ip}
   1386c:	beq	13878 <flatcc_builder_reset@@Base+0x190>
   13870:	add	r0, r4, #188	; 0xbc
   13874:	bl	18180 <flatcc_emitter_reset@@Base>
   13878:	mov	r0, #0
   1387c:	pop	{r4, sl, fp, pc}
   13880:	ldr	r0, [pc, #24]	; 138a0 <flatcc_builder_reset@@Base+0x1b8>
   13884:	ldr	r1, [pc, #24]	; 138a4 <flatcc_builder_reset@@Base+0x1bc>
   13888:	ldr	r3, [pc, #24]	; 138a8 <flatcc_builder_reset@@Base+0x1c0>
   1388c:	movw	r2, #434	; 0x1b2
   13890:	add	r0, pc, r0
   13894:	add	r1, pc, r1
   13898:	add	r3, pc, r3
   1389c:	bl	127a8 <__assert_fail@plt>
   138a0:	andeq	r6, r0, sl, lsl #21
   138a4:	muleq	r0, r8, sl
   138a8:	strdeq	r6, [r0], -r1

000138ac <flatcc_builder_clear@@Base>:
   138ac:	push	{r4, sl, fp, lr}
   138b0:	add	fp, sp, #8
   138b4:	sub	sp, sp, #8
   138b8:	mov	r4, r0
   138bc:	ldr	r0, [r0, #40]	; 0x28
   138c0:	mov	r1, #0
   138c4:	mov	r2, #0
   138c8:	mov	r3, #0
   138cc:	ldr	ip, [r4, #48]	; 0x30
   138d0:	str	r1, [sp]
   138d4:	add	r1, r4, #52	; 0x34
   138d8:	blx	ip
   138dc:	ldr	r0, [r4, #40]	; 0x28
   138e0:	ldr	ip, [r4, #48]	; 0x30
   138e4:	mov	r1, #1
   138e8:	mov	r2, #0
   138ec:	mov	r3, #0
   138f0:	str	r1, [sp]
   138f4:	add	r1, r4, #60	; 0x3c
   138f8:	blx	ip
   138fc:	ldr	r0, [r4, #40]	; 0x28
   13900:	ldr	ip, [r4, #48]	; 0x30
   13904:	mov	r1, #2
   13908:	mov	r2, #0
   1390c:	mov	r3, #0
   13910:	str	r1, [sp]
   13914:	add	r1, r4, #68	; 0x44
   13918:	blx	ip
   1391c:	ldr	r0, [r4, #40]	; 0x28
   13920:	ldr	ip, [r4, #48]	; 0x30
   13924:	mov	r1, #3
   13928:	mov	r2, #0
   1392c:	mov	r3, #0
   13930:	str	r1, [sp]
   13934:	add	r1, r4, #76	; 0x4c
   13938:	blx	ip
   1393c:	ldr	r0, [r4, #40]	; 0x28
   13940:	ldr	ip, [r4, #48]	; 0x30
   13944:	mov	r1, #4
   13948:	mov	r2, #0
   1394c:	mov	r3, #0
   13950:	str	r1, [sp]
   13954:	add	r1, r4, #84	; 0x54
   13958:	blx	ip
   1395c:	ldr	r0, [r4, #40]	; 0x28
   13960:	ldr	ip, [r4, #48]	; 0x30
   13964:	mov	r1, #5
   13968:	mov	r2, #0
   1396c:	mov	r3, #0
   13970:	str	r1, [sp]
   13974:	add	r1, r4, #92	; 0x5c
   13978:	blx	ip
   1397c:	ldr	r0, [r4, #40]	; 0x28
   13980:	ldr	ip, [r4, #48]	; 0x30
   13984:	mov	r1, #6
   13988:	mov	r2, #0
   1398c:	mov	r3, #0
   13990:	str	r1, [sp]
   13994:	add	r1, r4, #100	; 0x64
   13998:	blx	ip
   1399c:	ldr	r0, [r4, #40]	; 0x28
   139a0:	ldr	ip, [r4, #48]	; 0x30
   139a4:	mov	r1, #7
   139a8:	mov	r2, #0
   139ac:	mov	r3, #0
   139b0:	str	r1, [sp]
   139b4:	add	r1, r4, #108	; 0x6c
   139b8:	blx	ip
   139bc:	ldr	r0, [r4, #184]	; 0xb8
   139c0:	cmp	r0, #0
   139c4:	beq	139d0 <flatcc_builder_clear@@Base+0x124>
   139c8:	add	r0, r4, #188	; 0xbc
   139cc:	bl	1824c <flatcc_emitter_clear@@Base>
   139d0:	mov	r0, r4
   139d4:	mov	r1, #0
   139d8:	mov	r2, #232	; 0xe8
   139dc:	sub	sp, fp, #8
   139e0:	pop	{r4, sl, fp, lr}
   139e4:	b	12778 <memset@plt>

000139e8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   139e8:	push	{r4, r5, r6, r7, fp, lr}
   139ec:	add	fp, sp, #16
   139f0:	sub	sp, sp, #8
   139f4:	mov	r4, r0
   139f8:	ldr	r0, [r0, #112]	; 0x70
   139fc:	add	r1, r1, #7
   13a00:	ldr	r7, [r4, #228]	; 0xe4
   13a04:	bic	r5, r1, #3
   13a08:	add	r6, r4, #108	; 0x6c
   13a0c:	add	r2, r7, r5
   13a10:	cmp	r2, r0
   13a14:	bls	13a3c <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13a18:	ldr	r0, [r4, #40]	; 0x28
   13a1c:	ldr	ip, [r4, #48]	; 0x30
   13a20:	mov	r1, #7
   13a24:	mov	r3, #0
   13a28:	str	r1, [sp]
   13a2c:	mov	r1, r6
   13a30:	blx	ip
   13a34:	cmp	r0, #0
   13a38:	bne	13a88 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13a3c:	ldr	r0, [r6]
   13a40:	adds	r6, r0, r7
   13a44:	beq	13a78 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13a48:	mov	r0, r6
   13a4c:	mov	r1, #0
   13a50:	mov	r2, r5
   13a54:	bl	12778 <memset@plt>
   13a58:	ldr	r0, [r4, #224]	; 0xe0
   13a5c:	str	r0, [r6], #4
   13a60:	ldr	r0, [r4, #228]	; 0xe4
   13a64:	add	r1, r0, #4
   13a68:	add	r0, r0, r5
   13a6c:	str	r1, [r4, #224]	; 0xe0
   13a70:	str	r0, [r4, #228]	; 0xe4
   13a74:	b	13a7c <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13a78:	mov	r6, #0
   13a7c:	mov	r0, r6
   13a80:	sub	sp, fp, #16
   13a84:	pop	{r4, r5, r6, r7, fp, pc}
   13a88:	ldr	r0, [pc, #24]	; 13aa8 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   13a8c:	ldr	r1, [pc, #24]	; 13aac <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13a90:	ldr	r3, [pc, #24]	; 13ab0 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   13a94:	mov	r2, #308	; 0x134
   13a98:	add	r0, pc, r0
   13a9c:	add	r1, pc, r1
   13aa0:	add	r3, pc, r3
   13aa4:	bl	127a8 <__assert_fail@plt>
   13aa8:	andeq	r7, r0, r1, asr sl
   13aac:	muleq	r0, r0, r8
   13ab0:	andeq	r7, r0, r3, lsl #17

00013ab4 <flatcc_builder_enter_user_frame@@Base>:
   13ab4:	push	{r4, r5, r6, r7, fp, lr}
   13ab8:	add	fp, sp, #16
   13abc:	sub	sp, sp, #8
   13ac0:	mov	r4, r0
   13ac4:	ldr	r0, [r0, #112]	; 0x70
   13ac8:	add	r1, r1, #7
   13acc:	ldr	r7, [r4, #228]	; 0xe4
   13ad0:	bic	r5, r1, #3
   13ad4:	add	r6, r4, #108	; 0x6c
   13ad8:	add	r2, r7, r5
   13adc:	cmp	r2, r0
   13ae0:	bls	13b08 <flatcc_builder_enter_user_frame@@Base+0x54>
   13ae4:	ldr	r0, [r4, #40]	; 0x28
   13ae8:	ldr	ip, [r4, #48]	; 0x30
   13aec:	mov	r1, #7
   13af0:	mov	r3, #0
   13af4:	str	r1, [sp]
   13af8:	mov	r1, r6
   13afc:	blx	ip
   13b00:	cmp	r0, #0
   13b04:	bne	13b50 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13b08:	ldr	r0, [r6]
   13b0c:	adds	r6, r0, r7
   13b10:	moveq	r0, #0
   13b14:	subeq	sp, fp, #16
   13b18:	popeq	{r4, r5, r6, r7, fp, pc}
   13b1c:	mov	r0, r6
   13b20:	mov	r1, #0
   13b24:	mov	r2, r5
   13b28:	bl	12778 <memset@plt>
   13b2c:	ldr	r0, [r4, #224]	; 0xe0
   13b30:	str	r0, [r6]
   13b34:	ldr	r1, [r4, #228]	; 0xe4
   13b38:	add	r0, r1, #4
   13b3c:	add	r1, r1, r5
   13b40:	str	r0, [r4, #224]	; 0xe0
   13b44:	str	r1, [r4, #228]	; 0xe4
   13b48:	sub	sp, fp, #16
   13b4c:	pop	{r4, r5, r6, r7, fp, pc}
   13b50:	ldr	r0, [pc, #24]	; 13b70 <flatcc_builder_enter_user_frame@@Base+0xbc>
   13b54:	ldr	r1, [pc, #24]	; 13b74 <flatcc_builder_enter_user_frame@@Base+0xc0>
   13b58:	ldr	r3, [pc, #24]	; 13b78 <flatcc_builder_enter_user_frame@@Base+0xc4>
   13b5c:	mov	r2, #308	; 0x134
   13b60:	add	r0, pc, r0
   13b64:	add	r1, pc, r1
   13b68:	add	r3, pc, r3
   13b6c:	bl	127a8 <__assert_fail@plt>
   13b70:	andeq	r7, r0, r9, lsl #19
   13b74:	andeq	r6, r0, r8, asr #15
   13b78:			; <UNDEFINED> instruction: 0x000077bb

00013b7c <flatcc_builder_exit_user_frame@@Base>:
   13b7c:	ldr	r1, [r0, #224]	; 0xe0
   13b80:	cmp	r1, #0
   13b84:	subne	r2, r1, #4
   13b88:	strne	r2, [r0, #228]	; 0xe4
   13b8c:	ldrne	r2, [r0, #108]	; 0x6c
   13b90:	addne	r1, r2, r1
   13b94:	ldrne	r1, [r1, #-4]
   13b98:	strne	r1, [r0, #224]	; 0xe0
   13b9c:	movne	r0, r1
   13ba0:	bxne	lr
   13ba4:	push	{fp, lr}
   13ba8:	mov	fp, sp
   13bac:	ldr	r0, [pc, #24]	; 13bcc <flatcc_builder_exit_user_frame@@Base+0x50>
   13bb0:	ldr	r1, [pc, #24]	; 13bd0 <flatcc_builder_exit_user_frame@@Base+0x54>
   13bb4:	ldr	r3, [pc, #24]	; 13bd4 <flatcc_builder_exit_user_frame@@Base+0x58>
   13bb8:	movw	r2, #542	; 0x21e
   13bbc:	add	r0, pc, r0
   13bc0:	add	r1, pc, r1
   13bc4:	add	r3, pc, r3
   13bc8:	bl	127a8 <__assert_fail@plt>
   13bcc:	andeq	r6, r0, fp, lsl #16
   13bd0:	andeq	r6, r0, ip, ror #14
   13bd4:	andeq	r6, r0, ip, lsl r8

00013bd8 <flatcc_builder_exit_user_frame_at@@Base>:
   13bd8:	push	{fp, lr}
   13bdc:	mov	fp, sp
   13be0:	ldr	r2, [r0, #224]	; 0xe0
   13be4:	cmp	r2, r1
   13be8:	bcc	13c34 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13bec:	cmp	r1, #0
   13bf0:	str	r1, [r0, #224]	; 0xe0
   13bf4:	subne	r2, r1, #4
   13bf8:	strne	r2, [r0, #228]	; 0xe4
   13bfc:	ldrne	r2, [r0, #108]	; 0x6c
   13c00:	addne	r1, r2, r1
   13c04:	ldrne	r1, [r1, #-4]
   13c08:	strne	r1, [r0, #224]	; 0xe0
   13c0c:	movne	r0, r1
   13c10:	popne	{fp, pc}
   13c14:	ldr	r0, [pc, #68]	; 13c60 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   13c18:	ldr	r1, [pc, #68]	; 13c64 <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13c1c:	ldr	r3, [pc, #68]	; 13c68 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13c20:	movw	r2, #542	; 0x21e
   13c24:	add	r0, pc, r0
   13c28:	add	r1, pc, r1
   13c2c:	add	r3, pc, r3
   13c30:	bl	127a8 <__assert_fail@plt>
   13c34:	ldr	r0, [pc, #24]	; 13c54 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   13c38:	ldr	r1, [pc, #24]	; 13c58 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   13c3c:	ldr	r3, [pc, #24]	; 13c5c <flatcc_builder_exit_user_frame_at@@Base+0x84>
   13c40:	movw	r2, #551	; 0x227
   13c44:	add	r0, pc, r0
   13c48:	add	r1, pc, r1
   13c4c:	add	r3, pc, r3
   13c50:	bl	127a8 <__assert_fail@plt>
   13c54:	ldrdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   13c58:	andeq	r6, r0, r4, ror #13
   13c5c:	andeq	r6, r0, sp, ror #15
   13c60:	andeq	r6, r0, r3, lsr #15
   13c64:	andeq	r6, r0, r4, lsl #14
   13c68:			; <UNDEFINED> instruction: 0x000067b4

00013c6c <flatcc_builder_get_current_user_frame@@Base>:
   13c6c:	ldr	r0, [r0, #224]	; 0xe0
   13c70:	bx	lr

00013c74 <flatcc_builder_get_user_frame_ptr@@Base>:
   13c74:	ldr	r0, [r0, #108]	; 0x6c
   13c78:	add	r0, r0, r1
   13c7c:	bx	lr

00013c80 <flatcc_builder_embed_buffer@@Base>:
   13c80:	push	{r4, r5, r6, r7, fp, lr}
   13c84:	add	fp, sp, #16
   13c88:	sub	sp, sp, #88	; 0x58
   13c8c:	mov	r4, r0
   13c90:	ldr	r0, [fp, #8]
   13c94:	mov	r5, r3
   13c98:	mov	r7, r2
   13c9c:	mov	r2, r1
   13ca0:	sub	r1, fp, #18
   13ca4:	strh	r0, [fp, #-18]	; 0xffffffee
   13ca8:	mov	r0, r4
   13cac:	ldr	r3, [r4, #152]	; 0x98
   13cb0:	cmp	r3, #0
   13cb4:	movwne	r3, #1
   13cb8:	bl	13e0c <flatcc_builder_embed_buffer@@Base+0x18c>
   13cbc:	ldr	r1, [fp, #12]
   13cc0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13cc4:	ldr	r0, [r4, #136]	; 0x88
   13cc8:	mov	r2, #0
   13ccc:	str	r2, [sp, #8]
   13cd0:	str	r2, [sp, #12]
   13cd4:	and	r1, r1, #2
   13cd8:	sub	r3, r3, #1
   13cdc:	add	r1, r5, r1, lsl #1
   13ce0:	sub	r1, r0, r1
   13ce4:	and	r3, r1, r3
   13ce8:	add	r1, r3, r5
   13cec:	str	r1, [fp, #-24]	; 0xffffffe8
   13cf0:	ldr	r1, [r4, #152]	; 0x98
   13cf4:	cmp	r1, #0
   13cf8:	mov	r1, #0
   13cfc:	beq	13d1c <flatcc_builder_embed_buffer@@Base+0x9c>
   13d00:	sub	r1, fp, #24
   13d04:	mov	r2, #1
   13d08:	str	r1, [sp, #16]
   13d0c:	mov	r1, #4
   13d10:	str	r1, [sp, #8]
   13d14:	str	r1, [sp, #20]
   13d18:	str	r2, [sp, #12]
   13d1c:	cmp	r5, #0
   13d20:	beq	13d44 <flatcc_builder_embed_buffer@@Base+0xc4>
   13d24:	add	r6, sp, #8
   13d28:	add	r1, r1, r5
   13d2c:	add	r6, r6, r2, lsl #3
   13d30:	add	r2, r2, #1
   13d34:	str	r1, [sp, #8]
   13d38:	str	r7, [r6, #8]
   13d3c:	str	r5, [r6, #12]
   13d40:	str	r2, [sp, #12]
   13d44:	cmp	r3, #0
   13d48:	beq	13d74 <flatcc_builder_embed_buffer@@Base+0xf4>
   13d4c:	add	r1, r1, r3
   13d50:	add	r7, sp, #8
   13d54:	str	r1, [sp, #8]
   13d58:	add	r7, r7, r2, lsl #3
   13d5c:	add	r2, r2, #1
   13d60:	ldr	r6, [pc, #136]	; 13df0 <flatcc_builder_embed_buffer@@Base+0x170>
   13d64:	ldr	r6, [pc, r6]
   13d68:	str	r6, [r7, #8]
   13d6c:	str	r3, [r7, #12]
   13d70:	str	r2, [sp, #12]
   13d74:	cmp	r1, #0
   13d78:	ble	13dd0 <flatcc_builder_embed_buffer@@Base+0x150>
   13d7c:	sub	r5, r0, r1
   13d80:	ldr	r0, [r4, #36]	; 0x24
   13d84:	ldr	r7, [r4, #44]	; 0x2c
   13d88:	str	r1, [sp]
   13d8c:	add	r1, sp, #8
   13d90:	add	r1, r1, #8
   13d94:	mov	r3, r5
   13d98:	blx	r7
   13d9c:	cmp	r0, #0
   13da0:	streq	r5, [r4, #136]	; 0x88
   13da4:	moveq	r0, r5
   13da8:	subeq	sp, fp, #16
   13dac:	popeq	{r4, r5, r6, r7, fp, pc}
   13db0:	ldr	r0, [pc, #72]	; 13e00 <flatcc_builder_embed_buffer@@Base+0x180>
   13db4:	ldr	r1, [pc, #72]	; 13e04 <flatcc_builder_embed_buffer@@Base+0x184>
   13db8:	ldr	r3, [pc, #72]	; 13e08 <flatcc_builder_embed_buffer@@Base+0x188>
   13dbc:	movw	r2, #651	; 0x28b
   13dc0:	add	r0, pc, r0
   13dc4:	add	r1, pc, r1
   13dc8:	add	r3, pc, r3
   13dcc:	bl	127a8 <__assert_fail@plt>
   13dd0:	ldr	r0, [pc, #28]	; 13df4 <flatcc_builder_embed_buffer@@Base+0x174>
   13dd4:	ldr	r1, [pc, #28]	; 13df8 <flatcc_builder_embed_buffer@@Base+0x178>
   13dd8:	ldr	r3, [pc, #28]	; 13dfc <flatcc_builder_embed_buffer@@Base+0x17c>
   13ddc:	movw	r2, #647	; 0x287
   13de0:	add	r0, pc, r0
   13de4:	add	r1, pc, r1
   13de8:	add	r3, pc, r3
   13dec:	bl	127a8 <__assert_fail@plt>
   13df0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   13df4:	andeq	r7, r0, r9, lsl #14
   13df8:	andeq	r6, r0, r8, asr #10
   13dfc:	andeq	r7, r0, r0, asr #11
   13e00:	andeq	r7, r0, r9, lsr #14
   13e04:	andeq	r6, r0, r8, ror #10
   13e08:	andeq	r7, r0, r0, ror #11
   13e0c:	push	{r4, sl, fp, lr}
   13e10:	add	fp, sp, #8
   13e14:	sub	sp, sp, #80	; 0x50
   13e18:	cmp	r2, #0
   13e1c:	bne	13e2c <flatcc_builder_embed_buffer@@Base+0x1ac>
   13e20:	ldrh	r2, [r0, #132]	; 0x84
   13e24:	cmp	r2, #0
   13e28:	movweq	r2, #1
   13e2c:	ldrh	r4, [r1]
   13e30:	cmp	r4, #4
   13e34:	movwcc	r4, #4
   13e38:	cmpcs	r4, r2
   13e3c:	bcs	13e4c <flatcc_builder_embed_buffer@@Base+0x1cc>
   13e40:	cmp	r4, r2
   13e44:	movcc	r4, r2
   13e48:	strh	r4, [r1]
   13e4c:	cmp	r3, #0
   13e50:	bne	13ec4 <flatcc_builder_embed_buffer@@Base+0x244>
   13e54:	ldr	r4, [r0, #140]	; 0x8c
   13e58:	sub	r1, r2, #1
   13e5c:	ands	r1, r4, r1
   13e60:	beq	13ec4 <flatcc_builder_embed_buffer@@Base+0x244>
   13e64:	mov	r2, #1
   13e68:	str	r1, [sp, #8]
   13e6c:	str	r1, [sp, #20]
   13e70:	cmn	r1, #1
   13e74:	str	r2, [sp, #12]
   13e78:	ldr	r2, [pc, #172]	; 13f2c <flatcc_builder_embed_buffer@@Base+0x2ac>
   13e7c:	ldr	r2, [pc, r2]
   13e80:	str	r2, [sp, #16]
   13e84:	add	r2, r1, r4
   13e88:	str	r2, [r0, #140]	; 0x8c
   13e8c:	ble	13ecc <flatcc_builder_embed_buffer@@Base+0x24c>
   13e90:	ldr	r2, [r0, #36]	; 0x24
   13e94:	ldr	ip, [r0, #44]	; 0x2c
   13e98:	add	r0, sp, #8
   13e9c:	str	r1, [sp]
   13ea0:	mov	r3, r4
   13ea4:	add	r1, r0, #8
   13ea8:	mov	r0, r2
   13eac:	mov	r2, #1
   13eb0:	blx	ip
   13eb4:	cmp	r0, #0
   13eb8:	bne	13eec <flatcc_builder_embed_buffer@@Base+0x26c>
   13ebc:	cmn	r4, #1
   13ec0:	beq	13f0c <flatcc_builder_embed_buffer@@Base+0x28c>
   13ec4:	sub	sp, fp, #8
   13ec8:	pop	{r4, sl, fp, pc}
   13ecc:	ldr	r0, [pc, #92]	; 13f30 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13ed0:	ldr	r1, [pc, #92]	; 13f34 <flatcc_builder_embed_buffer@@Base+0x2b4>
   13ed4:	ldr	r3, [pc, #92]	; 13f38 <flatcc_builder_embed_buffer@@Base+0x2b8>
   13ed8:	movw	r2, #673	; 0x2a1
   13edc:	add	r0, pc, r0
   13ee0:	add	r1, pc, r1
   13ee4:	add	r3, pc, r3
   13ee8:	bl	127a8 <__assert_fail@plt>
   13eec:	ldr	r0, [pc, #72]	; 13f3c <flatcc_builder_embed_buffer@@Base+0x2bc>
   13ef0:	ldr	r1, [pc, #72]	; 13f40 <flatcc_builder_embed_buffer@@Base+0x2c0>
   13ef4:	ldr	r3, [pc, #72]	; 13f44 <flatcc_builder_embed_buffer@@Base+0x2c4>
   13ef8:	movw	r2, #677	; 0x2a5
   13efc:	add	r0, pc, r0
   13f00:	add	r1, pc, r1
   13f04:	add	r3, pc, r3
   13f08:	bl	127a8 <__assert_fail@plt>
   13f0c:	ldr	r0, [pc, #52]	; 13f48 <flatcc_builder_embed_buffer@@Base+0x2c8>
   13f10:	ldr	r1, [pc, #52]	; 13f4c <flatcc_builder_embed_buffer@@Base+0x2cc>
   13f14:	ldr	r3, [pc, #52]	; 13f50 <flatcc_builder_embed_buffer@@Base+0x2d0>
   13f18:	movw	r2, #702	; 0x2be
   13f1c:	add	r0, pc, r0
   13f20:	add	r1, pc, r1
   13f24:	add	r3, pc, r3
   13f28:	bl	127a8 <__assert_fail@plt>
   13f2c:	andeq	r8, r1, r0, asr #3
   13f30:	andeq	r7, r0, sp, lsl #12
   13f34:	andeq	r6, r0, ip, asr #8
   13f38:	andeq	r7, r0, r0, lsl #11
   13f3c:	andeq	r7, r0, sp, ror #11
   13f40:	andeq	r6, r0, ip, lsr #8
   13f44:	andeq	r7, r0, r0, ror #10
   13f48:	andeq	r7, r0, sp, asr #11
   13f4c:	andeq	r6, r0, ip, lsl #8
   13f50:	andeq	r7, r0, r2, asr #8

00013f54 <flatcc_builder_create_buffer@@Base>:
   13f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f58:	add	fp, sp, #28
   13f5c:	sub	sp, sp, #100	; 0x64
   13f60:	ldr	r8, [fp, #12]
   13f64:	mov	r4, r0
   13f68:	ldr	r0, [fp, #8]
   13f6c:	mov	r7, r1
   13f70:	mov	r5, #0
   13f74:	mov	r9, r3
   13f78:	sub	r1, fp, #30
   13f7c:	str	r5, [sp, #12]
   13f80:	and	r6, r8, #1
   13f84:	strh	r0, [fp, #-30]	; 0xffffffe2
   13f88:	mov	r0, r4
   13f8c:	mov	r3, r6
   13f90:	bl	13e0c <flatcc_builder_embed_buffer@@Base+0x18c>
   13f94:	ldrh	r0, [r4, #128]	; 0x80
   13f98:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13f9c:	cmp	r0, r1
   13fa0:	strhcc	r1, [r4, #128]	; 0x80
   13fa4:	cmp	r7, #0
   13fa8:	stmib	sp, {r6, r9}
   13fac:	beq	13fc8 <flatcc_builder_create_buffer@@Base+0x74>
   13fb0:	ldr	r5, [r7]
   13fb4:	cmp	r5, #0
   13fb8:	str	r5, [sp, #12]
   13fbc:	movwne	r5, #1
   13fc0:	lsl	r7, r5, #2
   13fc4:	b	13fcc <flatcc_builder_create_buffer@@Base+0x78>
   13fc8:	mov	r7, #0
   13fcc:	ldr	r9, [r4, #136]	; 0x88
   13fd0:	mov	sl, #4
   13fd4:	mvn	r6, #3
   13fd8:	mov	r3, #0
   13fdc:	ands	ip, r8, #3
   13fe0:	and	r2, sl, r8, lsl #1
   13fe4:	str	r3, [sp, #20]
   13fe8:	str	r3, [sp, #16]
   13fec:	sub	r2, r6, r2
   13ff0:	sub	r6, r1, #1
   13ff4:	mov	r1, #4
   13ff8:	add	r2, r2, r9
   13ffc:	sub	r2, r2, r7
   14000:	beq	14024 <flatcc_builder_create_buffer@@Base+0xd0>
   14004:	sub	r1, fp, #40	; 0x28
   14008:	mov	r3, #1
   1400c:	str	r1, [sp, #24]
   14010:	mov	r1, #4
   14014:	str	r1, [sp, #16]
   14018:	str	r1, [sp, #28]
   1401c:	mov	r1, #8
   14020:	str	r3, [sp, #20]
   14024:	add	lr, sp, #16
   14028:	and	r6, r2, r6
   1402c:	sub	r0, fp, #36	; 0x24
   14030:	str	r1, [sp, #16]
   14034:	cmp	r5, #0
   14038:	add	r2, lr, r3, lsl #3
   1403c:	str	r0, [r2, #8]
   14040:	str	sl, [r2, #12]
   14044:	add	r2, r3, #1
   14048:	str	r2, [sp, #20]
   1404c:	beq	14070 <flatcc_builder_create_buffer@@Base+0x11c>
   14050:	add	r1, r1, r7
   14054:	add	r0, lr, r2, lsl #3
   14058:	add	r2, sp, #12
   1405c:	str	r1, [sp, #16]
   14060:	str	r2, [r0, #8]
   14064:	orr	r2, r3, #2
   14068:	str	r7, [r0, #12]
   1406c:	str	r2, [sp, #20]
   14070:	cmp	r6, #0
   14074:	beq	1409c <flatcc_builder_create_buffer@@Base+0x148>
   14078:	add	r1, r1, r6
   1407c:	add	r0, lr, r2, lsl #3
   14080:	add	r2, r2, #1
   14084:	str	r1, [sp, #16]
   14088:	ldr	r3, [pc, #224]	; 14170 <flatcc_builder_create_buffer@@Base+0x21c>
   1408c:	ldr	r3, [pc, r3]
   14090:	str	r3, [r0, #8]
   14094:	str	r6, [r0, #12]
   14098:	str	r2, [sp, #20]
   1409c:	ldr	r5, [sp, #4]
   140a0:	sub	r7, r9, r1
   140a4:	cmp	ip, #0
   140a8:	mov	r6, #144	; 0x90
   140ac:	ldr	r3, [sp, #8]
   140b0:	mov	r0, r7
   140b4:	addne	r0, r0, #4
   140b8:	cmp	r5, #0
   140bc:	sub	r3, r3, r0
   140c0:	movweq	r6, #140	; 0x8c
   140c4:	cmp	r1, #0
   140c8:	ldr	r6, [r4, r6]
   140cc:	str	r3, [fp, #-36]	; 0xffffffdc
   140d0:	sub	r0, r6, r0
   140d4:	str	r0, [fp, #-40]	; 0xffffffd8
   140d8:	ble	14130 <flatcc_builder_create_buffer@@Base+0x1dc>
   140dc:	ldr	r0, [r4, #36]	; 0x24
   140e0:	ldr	r6, [r4, #44]	; 0x2c
   140e4:	str	r1, [sp]
   140e8:	add	r1, lr, #8
   140ec:	mov	r3, r7
   140f0:	blx	r6
   140f4:	cmp	r0, #0
   140f8:	bne	14150 <flatcc_builder_create_buffer@@Base+0x1fc>
   140fc:	cmp	r7, #0
   14100:	str	r7, [r4, #136]	; 0x88
   14104:	movne	r0, r7
   14108:	subne	sp, fp, #28
   1410c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14110:	ldr	r0, [pc, #116]	; 1418c <flatcc_builder_create_buffer@@Base+0x238>
   14114:	ldr	r1, [pc, #116]	; 14190 <flatcc_builder_create_buffer@@Base+0x23c>
   14118:	ldr	r3, [pc, #116]	; 14194 <flatcc_builder_create_buffer@@Base+0x240>
   1411c:	mov	r2, #772	; 0x304
   14120:	add	r0, pc, r0
   14124:	add	r1, pc, r1
   14128:	add	r3, pc, r3
   1412c:	bl	127a8 <__assert_fail@plt>
   14130:	ldr	r0, [pc, #60]	; 14174 <flatcc_builder_create_buffer@@Base+0x220>
   14134:	ldr	r1, [pc, #60]	; 14178 <flatcc_builder_create_buffer@@Base+0x224>
   14138:	ldr	r3, [pc, #60]	; 1417c <flatcc_builder_create_buffer@@Base+0x228>
   1413c:	movw	r2, #647	; 0x287
   14140:	add	r0, pc, r0
   14144:	add	r1, pc, r1
   14148:	add	r3, pc, r3
   1414c:	bl	127a8 <__assert_fail@plt>
   14150:	ldr	r0, [pc, #40]	; 14180 <flatcc_builder_create_buffer@@Base+0x22c>
   14154:	ldr	r1, [pc, #40]	; 14184 <flatcc_builder_create_buffer@@Base+0x230>
   14158:	ldr	r3, [pc, #40]	; 14188 <flatcc_builder_create_buffer@@Base+0x234>
   1415c:	movw	r2, #651	; 0x28b
   14160:	add	r0, pc, r0
   14164:	add	r1, pc, r1
   14168:	add	r3, pc, r3
   1416c:	bl	127a8 <__assert_fail@plt>
   14170:			; <UNDEFINED> instruction: 0x00017fb0
   14174:	andeq	r7, r0, r9, lsr #7
   14178:	andeq	r6, r0, r8, ror #3
   1417c:	andeq	r7, r0, r0, ror #4
   14180:	andeq	r7, r0, r9, lsl #7
   14184:	andeq	r6, r0, r8, asr #3
   14188:	andeq	r7, r0, r0, asr #4
   1418c:	andeq	r7, r0, r9, asr #7
   14190:	andeq	r6, r0, r8, lsl #4
   14194:	andeq	r6, r0, r6, asr r3

00014198 <flatcc_builder_create_struct@@Base>:
   14198:	push	{r4, r5, r6, sl, fp, lr}
   1419c:	add	fp, sp, #16
   141a0:	sub	sp, sp, #80	; 0x50
   141a4:	cmp	r3, #0
   141a8:	beq	14280 <flatcc_builder_create_struct@@Base+0xe8>
   141ac:	mov	r5, r0
   141b0:	ldrh	r0, [r0, #128]	; 0x80
   141b4:	mov	r4, #0
   141b8:	cmp	r0, r3
   141bc:	strhcc	r3, [r5, #128]	; 0x80
   141c0:	sub	r3, r3, #1
   141c4:	cmp	r2, #0
   141c8:	ldr	r0, [r5, #136]	; 0x88
   141cc:	str	r4, [sp, #12]
   141d0:	str	r4, [sp, #8]
   141d4:	movne	r4, #1
   141d8:	strne	r1, [sp, #16]
   141dc:	strne	r2, [sp, #8]
   141e0:	strne	r2, [sp, #20]
   141e4:	strne	r4, [sp, #12]
   141e8:	sub	r6, r0, r2
   141ec:	and	r3, r6, r3
   141f0:	cmp	r3, #0
   141f4:	beq	14220 <flatcc_builder_create_struct@@Base+0x88>
   141f8:	add	r2, r3, r2
   141fc:	add	r1, sp, #8
   14200:	str	r2, [sp, #8]
   14204:	add	r1, r1, r4, lsl #3
   14208:	add	r4, r4, #1
   1420c:	ldr	r6, [pc, #172]	; 142c0 <flatcc_builder_create_struct@@Base+0x128>
   14210:	ldr	r6, [pc, r6]
   14214:	str	r6, [r1, #8]
   14218:	str	r3, [r1, #12]
   1421c:	str	r4, [sp, #12]
   14220:	cmp	r2, #0
   14224:	ble	142a0 <flatcc_builder_create_struct@@Base+0x108>
   14228:	sub	r6, r0, r2
   1422c:	ldr	r0, [r5, #36]	; 0x24
   14230:	ldr	ip, [r5, #44]	; 0x2c
   14234:	add	r1, sp, #8
   14238:	str	r2, [sp]
   1423c:	mov	r2, r4
   14240:	add	r1, r1, #8
   14244:	mov	r3, r6
   14248:	blx	ip
   1424c:	cmp	r0, #0
   14250:	streq	r6, [r5, #136]	; 0x88
   14254:	moveq	r0, r6
   14258:	subeq	sp, fp, #16
   1425c:	popeq	{r4, r5, r6, sl, fp, pc}
   14260:	ldr	r0, [pc, #116]	; 142dc <flatcc_builder_create_struct@@Base+0x144>
   14264:	ldr	r1, [pc, #116]	; 142e0 <flatcc_builder_create_struct@@Base+0x148>
   14268:	ldr	r3, [pc, #116]	; 142e4 <flatcc_builder_create_struct@@Base+0x14c>
   1426c:	movw	r2, #651	; 0x28b
   14270:	add	r0, pc, r0
   14274:	add	r1, pc, r1
   14278:	add	r3, pc, r3
   1427c:	bl	127a8 <__assert_fail@plt>
   14280:	ldr	r0, [pc, #60]	; 142c4 <flatcc_builder_create_struct@@Base+0x12c>
   14284:	ldr	r1, [pc, #60]	; 142c8 <flatcc_builder_create_struct@@Base+0x130>
   14288:	ldr	r3, [pc, #60]	; 142cc <flatcc_builder_create_struct@@Base+0x134>
   1428c:	movw	r2, #783	; 0x30f
   14290:	add	r0, pc, r0
   14294:	add	r1, pc, r1
   14298:	add	r3, pc, r3
   1429c:	bl	127a8 <__assert_fail@plt>
   142a0:	ldr	r0, [pc, #40]	; 142d0 <flatcc_builder_create_struct@@Base+0x138>
   142a4:	ldr	r1, [pc, #40]	; 142d4 <flatcc_builder_create_struct@@Base+0x13c>
   142a8:	ldr	r3, [pc, #40]	; 142d8 <flatcc_builder_create_struct@@Base+0x140>
   142ac:	movw	r2, #647	; 0x287
   142b0:	add	r0, pc, r0
   142b4:	add	r1, pc, r1
   142b8:	add	r3, pc, r3
   142bc:	bl	127a8 <__assert_fail@plt>
   142c0:	andeq	r7, r1, ip, lsr #28
   142c4:	andeq	r6, r0, r1, ror r2
   142c8:	muleq	r0, r8, r0
   142cc:	andeq	r6, r0, r4, ror r2
   142d0:	andeq	r7, r0, r9, lsr r2
   142d4:	andeq	r6, r0, r8, ror r0
   142d8:	strdeq	r7, [r0], -r0
   142dc:	andeq	r7, r0, r9, ror r2
   142e0:	strheq	r6, [r0], -r8
   142e4:	andeq	r7, r0, r0, lsr r1

000142e8 <flatcc_builder_start_buffer@@Base>:
   142e8:	push	{r4, r5, r6, r7, fp, lr}
   142ec:	add	fp, sp, #16
   142f0:	mov	r5, r1
   142f4:	ldrh	r1, [r0, #128]	; 0x80
   142f8:	mov	r6, r3
   142fc:	mov	r7, r2
   14300:	mov	r4, r0
   14304:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   14308:	mov	r1, r0
   1430c:	mvn	r0, #0
   14310:	cmp	r1, #0
   14314:	popne	{r4, r5, r6, r7, fp, pc}
   14318:	mov	r0, #1
   1431c:	cmp	r5, #0
   14320:	strh	r0, [r4, #128]	; 0x80
   14324:	ldrh	r1, [r4, #132]	; 0x84
   14328:	ldr	r2, [r4, #32]
   1432c:	strh	r1, [r2, #34]	; 0x22
   14330:	strh	r7, [r4, #132]	; 0x84
   14334:	ldrh	r1, [r4, #164]	; 0xa4
   14338:	ldr	r2, [r4, #32]
   1433c:	strh	r1, [r2, #32]
   14340:	strh	r6, [r4, #164]	; 0xa4
   14344:	ldr	r1, [r4, #32]
   14348:	ldr	r2, [r4, #144]	; 0x90
   1434c:	str	r2, [r1, #20]
   14350:	ldr	r1, [r4, #32]
   14354:	ldr	r2, [r4, #152]	; 0x98
   14358:	str	r2, [r1, #28]
   1435c:	ldr	r3, [r4, #148]	; 0x94
   14360:	ldr	r1, [r4, #32]
   14364:	ldr	r2, [r4, #136]	; 0x88
   14368:	ldr	r7, [r4, #168]	; 0xa8
   1436c:	add	r6, r3, #1
   14370:	str	r2, [r4, #144]	; 0x90
   14374:	str	r6, [r4, #148]	; 0x94
   14378:	str	r3, [r4, #152]	; 0x98
   1437c:	str	r7, [r1, #16]
   14380:	ldr	r1, [pc, #28]	; 143a4 <flatcc_builder_start_buffer@@Base+0xbc>
   14384:	ldr	r1, [pc, r1]
   14388:	movne	r1, r5
   1438c:	ldr	r1, [r1]
   14390:	str	r1, [r4, #168]	; 0xa8
   14394:	ldr	r1, [r4, #32]
   14398:	strh	r0, [r1, #14]
   1439c:	mov	r0, #0
   143a0:	pop	{r4, r5, r6, r7, fp, pc}
   143a4:			; <UNDEFINED> instruction: 0x00017cb8
   143a8:	push	{r4, r5, r6, r7, fp, lr}
   143ac:	add	fp, sp, #16
   143b0:	sub	sp, sp, #8
   143b4:	mov	r5, r1
   143b8:	ldr	r1, [r0, #156]	; 0x9c
   143bc:	ldr	r2, [r0, #160]	; 0xa0
   143c0:	mov	r4, r0
   143c4:	add	r0, r1, #1
   143c8:	cmp	r1, r2
   143cc:	str	r0, [r4, #156]	; 0x9c
   143d0:	bge	143e4 <flatcc_builder_start_buffer@@Base+0xfc>
   143d4:	ldr	r0, [r4, #32]
   143d8:	add	r0, r0, #36	; 0x24
   143dc:	str	r0, [r4, #32]
   143e0:	b	14478 <flatcc_builder_start_buffer@@Base+0x190>
   143e4:	ldr	r2, [r4, #176]	; 0xb0
   143e8:	mvn	r6, #0
   143ec:	cmp	r2, #1
   143f0:	cmpge	r1, r2
   143f4:	bge	144b0 <flatcc_builder_start_buffer@@Base+0x1c8>
   143f8:	add	r7, r0, r0, lsl #3
   143fc:	ldr	r0, [r4, #88]	; 0x58
   14400:	lsl	r2, r7, #2
   14404:	cmp	r2, r0
   14408:	bls	14430 <flatcc_builder_start_buffer@@Base+0x148>
   1440c:	ldr	r0, [r4, #40]	; 0x28
   14410:	ldr	ip, [r4, #48]	; 0x30
   14414:	mov	r3, #4
   14418:	add	r1, r4, #84	; 0x54
   1441c:	str	r3, [sp]
   14420:	mov	r3, #0
   14424:	blx	ip
   14428:	cmp	r0, #0
   1442c:	bne	144bc <flatcc_builder_start_buffer@@Base+0x1d4>
   14430:	ldr	r1, [r4, #84]	; 0x54
   14434:	mvn	r0, #35	; 0x23
   14438:	add	r0, r0, r7, lsl #2
   1443c:	adds	r0, r0, r1
   14440:	str	r0, [r4, #32]
   14444:	beq	144b0 <flatcc_builder_start_buffer@@Base+0x1c8>
   14448:	ldr	r1, [r4, #88]	; 0x58
   1444c:	movw	r3, #36409	; 0x8e39
   14450:	ldr	r2, [r4, #176]	; 0xb0
   14454:	movt	r3, #14563	; 0x38e3
   14458:	umull	r1, r3, r1, r3
   1445c:	lsr	r1, r3, #3
   14460:	cmp	r2, r3, lsr #3
   14464:	mov	r3, r1
   14468:	movlt	r3, r2
   1446c:	cmp	r2, #0
   14470:	movle	r3, r1
   14474:	str	r3, [r4, #160]	; 0xa0
   14478:	ldr	r1, [r4, #20]
   1447c:	mvn	r3, #3
   14480:	mov	r6, #0
   14484:	str	r1, [r0, #8]
   14488:	ldrh	r2, [r4, #130]	; 0x82
   1448c:	strh	r2, [r0, #12]
   14490:	strh	r5, [r4, #130]	; 0x82
   14494:	ldr	r2, [r4, #28]
   14498:	stm	r0, {r2, r3}
   1449c:	add	r0, r1, r2
   144a0:	str	r6, [r4, #20]
   144a4:	add	r0, r0, #7
   144a8:	bic	r0, r0, #7
   144ac:	str	r0, [r4, #28]
   144b0:	mov	r0, r6
   144b4:	sub	sp, fp, #16
   144b8:	pop	{r4, r5, r6, r7, fp, pc}
   144bc:	ldr	r0, [pc, #24]	; 144dc <flatcc_builder_start_buffer@@Base+0x1f4>
   144c0:	ldr	r1, [pc, #24]	; 144e0 <flatcc_builder_start_buffer@@Base+0x1f8>
   144c4:	ldr	r3, [pc, #24]	; 144e4 <flatcc_builder_start_buffer@@Base+0x1fc>
   144c8:	mov	r2, #308	; 0x134
   144cc:	add	r0, pc, r0
   144d0:	add	r1, pc, r1
   144d4:	add	r3, pc, r3
   144d8:	bl	127a8 <__assert_fail@plt>
   144dc:	andeq	r7, r0, sp, lsl r0
   144e0:	andeq	r5, r0, ip, asr lr
   144e4:	andeq	r6, r0, pc, asr #28

000144e8 <flatcc_builder_end_buffer@@Base>:
   144e8:	push	{r4, r5, r6, sl, fp, lr}
   144ec:	add	fp, sp, #16
   144f0:	sub	sp, sp, #8
   144f4:	mov	r4, r0
   144f8:	ldr	r0, [r0, #32]
   144fc:	ldrh	r0, [r0, #14]
   14500:	cmp	r0, #1
   14504:	bne	145f8 <flatcc_builder_end_buffer@@Base+0x110>
   14508:	mov	r3, r1
   1450c:	ldr	r1, [r4, #152]	; 0x98
   14510:	ldrh	r0, [r4, #164]	; 0xa4
   14514:	ldrh	r2, [r4, #132]	; 0x84
   14518:	cmp	r1, #0
   1451c:	ldrh	r1, [r4, #128]	; 0x80
   14520:	and	r0, r0, #2
   14524:	orrne	r0, r0, #1
   14528:	cmp	r1, r2
   1452c:	movcc	r1, r2
   14530:	strhcc	r2, [r4, #128]	; 0x80
   14534:	str	r0, [sp, #4]
   14538:	mov	r0, r4
   1453c:	str	r1, [sp]
   14540:	add	r1, r4, #168	; 0xa8
   14544:	bl	13f54 <flatcc_builder_create_buffer@@Base>
   14548:	mov	r6, r0
   1454c:	cmp	r0, #0
   14550:	beq	145ec <flatcc_builder_end_buffer@@Base+0x104>
   14554:	ldr	r1, [r4, #32]
   14558:	ldr	r0, [r4, #16]
   1455c:	ldr	r2, [r4, #20]
   14560:	ldr	r3, [r1, #20]
   14564:	str	r3, [r4, #144]	; 0x90
   14568:	ldr	r3, [r1, #28]
   1456c:	str	r3, [r4, #152]	; 0x98
   14570:	ldr	r3, [r1, #16]
   14574:	str	r3, [r4, #168]	; 0xa8
   14578:	ldrh	r1, [r1, #32]
   1457c:	strh	r1, [r4, #164]	; 0xa4
   14580:	mov	r1, #0
   14584:	bl	12778 <memset@plt>
   14588:	ldr	r0, [r4, #32]
   1458c:	ldr	r1, [r4, #60]	; 0x3c
   14590:	ldr	r2, [r4, #64]	; 0x40
   14594:	ldr	r3, [r0, #8]
   14598:	str	r3, [r4, #20]
   1459c:	ldr	r3, [r0]
   145a0:	str	r3, [r4, #28]
   145a4:	add	r1, r1, r3
   145a8:	ldr	r5, [r0, #4]
   145ac:	str	r1, [r4, #16]
   145b0:	sub	r1, r2, r3
   145b4:	cmp	r1, r5
   145b8:	movhi	r1, r5
   145bc:	str	r1, [r4, #24]
   145c0:	ldrh	r1, [r4, #130]	; 0x82
   145c4:	ldrh	r2, [r4, #128]	; 0x80
   145c8:	cmp	r2, r1
   145cc:	strhcc	r1, [r4, #128]	; 0x80
   145d0:	ldrh	r1, [r0, #12]
   145d4:	sub	r0, r0, #36	; 0x24
   145d8:	str	r0, [r4, #32]
   145dc:	strh	r1, [r4, #130]	; 0x82
   145e0:	ldr	r0, [r4, #156]	; 0x9c
   145e4:	sub	r0, r0, #1
   145e8:	str	r0, [r4, #156]	; 0x9c
   145ec:	mov	r0, r6
   145f0:	sub	sp, fp, #16
   145f4:	pop	{r4, r5, r6, sl, fp, pc}
   145f8:	ldr	r0, [pc, #24]	; 14618 <flatcc_builder_end_buffer@@Base+0x130>
   145fc:	ldr	r1, [pc, #24]	; 1461c <flatcc_builder_end_buffer@@Base+0x134>
   14600:	ldr	r3, [pc, #24]	; 14620 <flatcc_builder_end_buffer@@Base+0x138>
   14604:	movw	r2, #838	; 0x346
   14608:	add	r0, pc, r0
   1460c:	add	r1, pc, r1
   14610:	add	r3, pc, r3
   14614:	bl	127a8 <__assert_fail@plt>
   14618:	andeq	r5, r0, sl, ror #30
   1461c:	andeq	r5, r0, r0, lsr #26
   14620:	andeq	r5, r0, lr, lsl #31

00014624 <flatcc_builder_start_struct@@Base>:
   14624:	push	{r4, r5, r6, r7, fp, lr}
   14628:	add	fp, sp, #16
   1462c:	sub	sp, sp, #8
   14630:	mov	r6, r1
   14634:	mov	r1, r2
   14638:	mov	r4, r0
   1463c:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   14640:	mov	r5, #0
   14644:	cmp	r0, #0
   14648:	bne	146f8 <flatcc_builder_start_struct@@Base+0xd4>
   1464c:	ldr	r2, [r4, #32]
   14650:	mov	r0, #2
   14654:	mvn	r7, #3
   14658:	strh	r0, [r2, #14]
   1465c:	ldr	r1, [r4, #28]
   14660:	ldr	r3, [r4, #64]	; 0x40
   14664:	ldr	r0, [r4, #60]	; 0x3c
   14668:	sub	r3, r3, r1
   1466c:	add	r0, r0, r1
   14670:	cmn	r3, #4
   14674:	str	r0, [r4, #16]
   14678:	movcs	r3, r7
   1467c:	str	r3, [r4, #24]
   14680:	str	r7, [r2, #4]
   14684:	ldr	r7, [r4, #20]
   14688:	add	r2, r7, r6
   1468c:	cmp	r2, r3
   14690:	str	r2, [r4, #20]
   14694:	bcc	146f4 <flatcc_builder_start_struct@@Base+0xd0>
   14698:	ldr	r0, [r4, #40]	; 0x28
   1469c:	ldr	r6, [r4, #48]	; 0x30
   146a0:	add	r1, r1, r2
   146a4:	mov	r3, #1
   146a8:	str	r3, [sp]
   146ac:	add	r2, r1, #1
   146b0:	add	r1, r4, #60	; 0x3c
   146b4:	mov	r3, #1
   146b8:	blx	r6
   146bc:	cmp	r0, #0
   146c0:	bne	146f8 <flatcc_builder_start_struct@@Base+0xd4>
   146c4:	ldr	r1, [r4, #28]
   146c8:	ldr	r0, [r4, #60]	; 0x3c
   146cc:	ldr	r3, [r4, #64]	; 0x40
   146d0:	ldr	r2, [r4, #32]
   146d4:	add	r0, r0, r1
   146d8:	sub	r1, r3, r1
   146dc:	mvn	r3, #3
   146e0:	cmn	r1, #4
   146e4:	str	r0, [r4, #16]
   146e8:	movcs	r1, r3
   146ec:	str	r1, [r4, #24]
   146f0:	str	r3, [r2, #4]
   146f4:	add	r5, r0, r7
   146f8:	mov	r0, r5
   146fc:	sub	sp, fp, #16
   14700:	pop	{r4, r5, r6, r7, fp, pc}

00014704 <flatcc_builder_struct_edit@@Base>:
   14704:	ldr	r0, [r0, #16]
   14708:	bx	lr

0001470c <flatcc_builder_end_struct@@Base>:
   1470c:	push	{r4, r5, fp, lr}
   14710:	add	fp, sp, #8
   14714:	mov	r4, r0
   14718:	ldr	r0, [r0, #32]
   1471c:	ldrh	r0, [r0, #14]
   14720:	cmp	r0, #2
   14724:	bne	147c4 <flatcc_builder_end_struct@@Base+0xb8>
   14728:	ldrh	r3, [r4, #130]	; 0x82
   1472c:	ldr	r1, [r4, #16]
   14730:	ldr	r2, [r4, #20]
   14734:	mov	r0, r4
   14738:	bl	14198 <flatcc_builder_create_struct@@Base>
   1473c:	mov	r5, r0
   14740:	cmp	r0, #0
   14744:	beq	147bc <flatcc_builder_end_struct@@Base+0xb0>
   14748:	ldr	r0, [r4, #16]
   1474c:	ldr	r2, [r4, #20]
   14750:	mov	r1, #0
   14754:	bl	12778 <memset@plt>
   14758:	ldr	r0, [r4, #32]
   1475c:	ldr	r1, [r4, #60]	; 0x3c
   14760:	ldr	ip, [r4, #64]	; 0x40
   14764:	ldr	r3, [r0, #8]
   14768:	str	r3, [r4, #20]
   1476c:	ldr	r3, [r0]
   14770:	str	r3, [r4, #28]
   14774:	add	r1, r1, r3
   14778:	ldr	r2, [r0, #4]
   1477c:	str	r1, [r4, #16]
   14780:	sub	r1, ip, r3
   14784:	cmp	r1, r2
   14788:	movhi	r1, r2
   1478c:	str	r1, [r4, #24]
   14790:	ldrh	r1, [r4, #130]	; 0x82
   14794:	ldrh	r2, [r4, #128]	; 0x80
   14798:	cmp	r2, r1
   1479c:	strhcc	r1, [r4, #128]	; 0x80
   147a0:	ldrh	r1, [r0, #12]
   147a4:	sub	r0, r0, #36	; 0x24
   147a8:	str	r0, [r4, #32]
   147ac:	strh	r1, [r4, #130]	; 0x82
   147b0:	ldr	r0, [r4, #156]	; 0x9c
   147b4:	sub	r0, r0, #1
   147b8:	str	r0, [r4, #156]	; 0x9c
   147bc:	mov	r0, r5
   147c0:	pop	{r4, r5, fp, pc}
   147c4:	ldr	r0, [pc, #24]	; 147e4 <flatcc_builder_end_struct@@Base+0xd8>
   147c8:	ldr	r1, [pc, #24]	; 147e8 <flatcc_builder_end_struct@@Base+0xdc>
   147cc:	ldr	r3, [pc, #24]	; 147ec <flatcc_builder_end_struct@@Base+0xe0>
   147d0:	mov	r2, #872	; 0x368
   147d4:	add	r0, pc, r0
   147d8:	add	r1, pc, r1
   147dc:	add	r3, pc, r3
   147e0:	bl	127a8 <__assert_fail@plt>
   147e4:	andeq	r5, r0, r3, lsr #28
   147e8:	andeq	r5, r0, r4, asr fp
   147ec:	andeq	r5, r0, r7, asr #28

000147f0 <flatcc_builder_extend_vector@@Base>:
   147f0:	push	{r4, r5, fp, lr}
   147f4:	add	fp, sp, #8
   147f8:	sub	sp, sp, #8
   147fc:	mov	r4, r0
   14800:	ldr	r0, [r0, #32]
   14804:	ldr	r2, [r0, #20]
   14808:	adds	r2, r2, r1
   1480c:	bcs	148c4 <flatcc_builder_extend_vector@@Base+0xd4>
   14810:	ldr	r3, [r0, #24]
   14814:	cmp	r2, r3
   14818:	bhi	148c4 <flatcc_builder_extend_vector@@Base+0xd4>
   1481c:	str	r2, [r0, #20]
   14820:	ldr	r2, [r4, #32]
   14824:	ldr	r5, [r4, #20]
   14828:	ldr	r0, [r4, #24]
   1482c:	ldr	r2, [r2, #16]
   14830:	mla	r1, r2, r1, r5
   14834:	cmp	r1, r0
   14838:	str	r1, [r4, #20]
   1483c:	bcs	14848 <flatcc_builder_extend_vector@@Base+0x58>
   14840:	ldr	r0, [r4, #16]
   14844:	b	148b8 <flatcc_builder_extend_vector@@Base+0xc8>
   14848:	ldr	r2, [r4, #28]
   1484c:	ldr	r0, [r4, #40]	; 0x28
   14850:	ldr	ip, [r4, #48]	; 0x30
   14854:	mov	r3, #1
   14858:	str	r3, [sp]
   1485c:	mov	r3, #1
   14860:	add	r1, r1, r2
   14864:	add	r2, r1, #1
   14868:	add	r1, r4, #60	; 0x3c
   1486c:	blx	ip
   14870:	mov	r1, r0
   14874:	mov	r0, #0
   14878:	cmp	r1, #0
   1487c:	beq	14888 <flatcc_builder_extend_vector@@Base+0x98>
   14880:	sub	sp, fp, #8
   14884:	pop	{r4, r5, fp, pc}
   14888:	ldr	r1, [r4, #28]
   1488c:	ldr	r0, [r4, #60]	; 0x3c
   14890:	ldr	r3, [r4, #64]	; 0x40
   14894:	ldr	r2, [r4, #32]
   14898:	add	r0, r0, r1
   1489c:	sub	r1, r3, r1
   148a0:	mvn	r3, #3
   148a4:	cmn	r1, #4
   148a8:	str	r0, [r4, #16]
   148ac:	movcs	r1, r3
   148b0:	str	r1, [r4, #24]
   148b4:	str	r3, [r2, #4]
   148b8:	add	r0, r0, r5
   148bc:	sub	sp, fp, #8
   148c0:	pop	{r4, r5, fp, pc}
   148c4:	ldr	r0, [pc, #24]	; 148e4 <flatcc_builder_extend_vector@@Base+0xf4>
   148c8:	ldr	r1, [pc, #24]	; 148e8 <flatcc_builder_extend_vector@@Base+0xf8>
   148cc:	ldr	r3, [pc, #24]	; 148ec <flatcc_builder_extend_vector@@Base+0xfc>
   148d0:	mov	r2, #892	; 0x37c
   148d4:	add	r0, pc, r0
   148d8:	add	r1, pc, r1
   148dc:	add	r3, pc, r3
   148e0:	bl	127a8 <__assert_fail@plt>
   148e4:	andeq	r6, r0, lr, lsl fp
   148e8:	andeq	r5, r0, r4, asr sl
   148ec:	andeq	r6, r0, r1, lsr fp

000148f0 <flatcc_builder_vector_push@@Base>:
   148f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148f4:	add	fp, sp, #24
   148f8:	sub	sp, sp, #8
   148fc:	mov	r5, r0
   14900:	ldr	r0, [r0, #32]
   14904:	mov	r8, r1
   14908:	ldrh	r1, [r0, #14]
   1490c:	cmp	r1, #4
   14910:	bne	149e8 <flatcc_builder_vector_push@@Base+0xf8>
   14914:	ldr	r1, [r0, #20]
   14918:	ldr	r2, [r0, #24]
   1491c:	cmp	r1, r2
   14920:	bhi	14a08 <flatcc_builder_vector_push@@Base+0x118>
   14924:	add	r1, r1, #1
   14928:	str	r1, [r0, #20]
   1492c:	ldr	r1, [r5, #32]
   14930:	ldr	r4, [r5, #20]
   14934:	ldr	r0, [r5, #24]
   14938:	ldr	r6, [r1, #16]
   1493c:	add	r1, r4, r6
   14940:	cmp	r1, r0
   14944:	str	r1, [r5, #20]
   14948:	bcs	1496c <flatcc_builder_vector_push@@Base+0x7c>
   1494c:	ldr	r0, [r5, #16]
   14950:	adds	r7, r0, r4
   14954:	beq	149d8 <flatcc_builder_vector_push@@Base+0xe8>
   14958:	mov	r0, r7
   1495c:	mov	r1, r8
   14960:	mov	r2, r6
   14964:	bl	12718 <memcpy@plt>
   14968:	b	149dc <flatcc_builder_vector_push@@Base+0xec>
   1496c:	ldr	r2, [r5, #28]
   14970:	ldr	r0, [r5, #40]	; 0x28
   14974:	ldr	r7, [r5, #48]	; 0x30
   14978:	mov	r3, #1
   1497c:	str	r3, [sp]
   14980:	mov	r3, #1
   14984:	add	r1, r1, r2
   14988:	add	r2, r1, #1
   1498c:	add	r1, r5, #60	; 0x3c
   14990:	blx	r7
   14994:	mov	r7, #0
   14998:	cmp	r0, #0
   1499c:	bne	149dc <flatcc_builder_vector_push@@Base+0xec>
   149a0:	ldr	r1, [r5, #28]
   149a4:	ldr	r0, [r5, #60]	; 0x3c
   149a8:	ldr	r3, [r5, #64]	; 0x40
   149ac:	ldr	r2, [r5, #32]
   149b0:	add	r0, r0, r1
   149b4:	sub	r1, r3, r1
   149b8:	mvn	r3, #3
   149bc:	cmn	r1, #4
   149c0:	str	r0, [r5, #16]
   149c4:	movcs	r1, r3
   149c8:	str	r1, [r5, #24]
   149cc:	str	r3, [r2, #4]
   149d0:	adds	r7, r0, r4
   149d4:	bne	14958 <flatcc_builder_vector_push@@Base+0x68>
   149d8:	mov	r7, #0
   149dc:	mov	r0, r7
   149e0:	sub	sp, fp, #24
   149e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149e8:	ldr	r0, [pc, #56]	; 14a28 <flatcc_builder_vector_push@@Base+0x138>
   149ec:	ldr	r1, [pc, #56]	; 14a2c <flatcc_builder_vector_push@@Base+0x13c>
   149f0:	ldr	r3, [pc, #56]	; 14a30 <flatcc_builder_vector_push@@Base+0x140>
   149f4:	movw	r2, #907	; 0x38b
   149f8:	add	r0, pc, r0
   149fc:	add	r1, pc, r1
   14a00:	add	r3, pc, r3
   14a04:	bl	127a8 <__assert_fail@plt>
   14a08:	ldr	r0, [pc, #36]	; 14a34 <flatcc_builder_vector_push@@Base+0x144>
   14a0c:	ldr	r1, [pc, #36]	; 14a38 <flatcc_builder_vector_push@@Base+0x148>
   14a10:	ldr	r3, [pc, #36]	; 14a3c <flatcc_builder_vector_push@@Base+0x14c>
   14a14:	mov	r2, #908	; 0x38c
   14a18:	add	r0, pc, r0
   14a1c:	add	r1, pc, r1
   14a20:	add	r3, pc, r3
   14a24:	bl	127a8 <__assert_fail@plt>
   14a28:	andeq	r5, r0, lr, ror #24
   14a2c:	andeq	r5, r0, r0, lsr r9
   14a30:	muleq	r0, r2, ip
   14a34:			; <UNDEFINED> instruction: 0x00005cbd
   14a38:	andeq	r5, r0, r0, lsl r9
   14a3c:	andeq	r5, r0, r2, ror ip

00014a40 <flatcc_builder_append_vector@@Base>:
   14a40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a44:	add	fp, sp, #24
   14a48:	sub	sp, sp, #8
   14a4c:	mov	r6, r0
   14a50:	ldr	r0, [r0, #32]
   14a54:	mov	r8, r1
   14a58:	ldrh	r1, [r0, #14]
   14a5c:	cmp	r1, #4
   14a60:	bne	14b60 <flatcc_builder_append_vector@@Base+0x120>
   14a64:	ldr	r1, [r0, #20]
   14a68:	mov	r5, r2
   14a6c:	adds	r1, r1, r2
   14a70:	bcs	14b40 <flatcc_builder_append_vector@@Base+0x100>
   14a74:	ldr	r2, [r0, #24]
   14a78:	cmp	r1, r2
   14a7c:	bhi	14b40 <flatcc_builder_append_vector@@Base+0x100>
   14a80:	str	r1, [r0, #20]
   14a84:	ldr	r1, [r6, #32]
   14a88:	ldr	r4, [r6, #20]
   14a8c:	ldr	r0, [r6, #24]
   14a90:	ldr	r9, [r1, #16]
   14a94:	mla	r1, r9, r5, r4
   14a98:	cmp	r1, r0
   14a9c:	str	r1, [r6, #20]
   14aa0:	bcs	14ac4 <flatcc_builder_append_vector@@Base+0x84>
   14aa4:	ldr	r0, [r6, #16]
   14aa8:	adds	r7, r0, r4
   14aac:	beq	14b30 <flatcc_builder_append_vector@@Base+0xf0>
   14ab0:	mul	r2, r9, r5
   14ab4:	mov	r0, r7
   14ab8:	mov	r1, r8
   14abc:	bl	12718 <memcpy@plt>
   14ac0:	b	14b34 <flatcc_builder_append_vector@@Base+0xf4>
   14ac4:	ldr	r2, [r6, #28]
   14ac8:	ldr	r0, [r6, #40]	; 0x28
   14acc:	ldr	r7, [r6, #48]	; 0x30
   14ad0:	mov	r3, #1
   14ad4:	str	r3, [sp]
   14ad8:	mov	r3, #1
   14adc:	add	r1, r1, r2
   14ae0:	add	r2, r1, #1
   14ae4:	add	r1, r6, #60	; 0x3c
   14ae8:	blx	r7
   14aec:	mov	r7, #0
   14af0:	cmp	r0, #0
   14af4:	bne	14b34 <flatcc_builder_append_vector@@Base+0xf4>
   14af8:	ldr	r1, [r6, #28]
   14afc:	ldr	r0, [r6, #60]	; 0x3c
   14b00:	ldr	r3, [r6, #64]	; 0x40
   14b04:	ldr	r2, [r6, #32]
   14b08:	add	r0, r0, r1
   14b0c:	sub	r1, r3, r1
   14b10:	mvn	r3, #3
   14b14:	cmn	r1, #4
   14b18:	str	r0, [r6, #16]
   14b1c:	movcs	r1, r3
   14b20:	str	r1, [r6, #24]
   14b24:	str	r3, [r2, #4]
   14b28:	adds	r7, r0, r4
   14b2c:	bne	14ab0 <flatcc_builder_append_vector@@Base+0x70>
   14b30:	mov	r7, #0
   14b34:	mov	r0, r7
   14b38:	sub	sp, fp, #24
   14b3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14b40:	ldr	r0, [pc, #68]	; 14b8c <flatcc_builder_append_vector@@Base+0x14c>
   14b44:	ldr	r1, [pc, #68]	; 14b90 <flatcc_builder_append_vector@@Base+0x150>
   14b48:	ldr	r3, [pc, #68]	; 14b94 <flatcc_builder_append_vector@@Base+0x154>
   14b4c:	mov	r2, #892	; 0x37c
   14b50:	add	r0, pc, r0
   14b54:	add	r1, pc, r1
   14b58:	add	r3, pc, r3
   14b5c:	bl	127a8 <__assert_fail@plt>
   14b60:	ldr	r0, [pc, #24]	; 14b80 <flatcc_builder_append_vector@@Base+0x140>
   14b64:	ldr	r1, [pc, #24]	; 14b84 <flatcc_builder_append_vector@@Base+0x144>
   14b68:	ldr	r3, [pc, #24]	; 14b88 <flatcc_builder_append_vector@@Base+0x148>
   14b6c:	movw	r2, #915	; 0x393
   14b70:	add	r0, pc, r0
   14b74:	add	r1, pc, r1
   14b78:	add	r3, pc, r3
   14b7c:	bl	127a8 <__assert_fail@plt>
   14b80:	strdeq	r5, [r0], -r6
   14b84:			; <UNDEFINED> instruction: 0x000057b8
   14b88:	muleq	r0, sl, fp
   14b8c:	andeq	r6, r0, r2, lsr #17
   14b90:	ldrdeq	r5, [r0], -r8
   14b94:			; <UNDEFINED> instruction: 0x000068b5

00014b98 <flatcc_builder_extend_offset_vector@@Base>:
   14b98:	push	{r4, r5, fp, lr}
   14b9c:	add	fp, sp, #8
   14ba0:	sub	sp, sp, #8
   14ba4:	mov	r4, r0
   14ba8:	ldr	r0, [r0, #32]
   14bac:	ldr	r2, [r0, #20]
   14bb0:	adds	r2, r2, r1
   14bb4:	cmpcc	r2, #1073741824	; 0x40000000
   14bb8:	bcc	14bdc <flatcc_builder_extend_offset_vector@@Base+0x44>
   14bbc:	ldr	r0, [pc, #184]	; 14c7c <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14bc0:	ldr	r1, [pc, #184]	; 14c80 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14bc4:	ldr	r3, [pc, #184]	; 14c84 <flatcc_builder_extend_offset_vector@@Base+0xec>
   14bc8:	mov	r2, #892	; 0x37c
   14bcc:	add	r0, pc, r0
   14bd0:	add	r1, pc, r1
   14bd4:	add	r3, pc, r3
   14bd8:	bl	127a8 <__assert_fail@plt>
   14bdc:	str	r2, [r0, #20]
   14be0:	ldr	r5, [r4, #20]
   14be4:	ldr	r0, [r4, #24]
   14be8:	add	r1, r5, r1, lsl #2
   14bec:	cmp	r1, r0
   14bf0:	str	r1, [r4, #20]
   14bf4:	bcs	14c00 <flatcc_builder_extend_offset_vector@@Base+0x68>
   14bf8:	ldr	r0, [r4, #16]
   14bfc:	b	14c70 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14c00:	ldr	r2, [r4, #28]
   14c04:	ldr	r0, [r4, #40]	; 0x28
   14c08:	ldr	ip, [r4, #48]	; 0x30
   14c0c:	mov	r3, #1
   14c10:	str	r3, [sp]
   14c14:	mov	r3, #1
   14c18:	add	r1, r1, r2
   14c1c:	add	r2, r1, #1
   14c20:	add	r1, r4, #60	; 0x3c
   14c24:	blx	ip
   14c28:	mov	r1, r0
   14c2c:	mov	r0, #0
   14c30:	cmp	r1, #0
   14c34:	beq	14c40 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14c38:	sub	sp, fp, #8
   14c3c:	pop	{r4, r5, fp, pc}
   14c40:	ldr	r1, [r4, #28]
   14c44:	ldr	r0, [r4, #60]	; 0x3c
   14c48:	ldr	r3, [r4, #64]	; 0x40
   14c4c:	ldr	r2, [r4, #32]
   14c50:	add	r0, r0, r1
   14c54:	sub	r1, r3, r1
   14c58:	mvn	r3, #3
   14c5c:	cmn	r1, #4
   14c60:	str	r0, [r4, #16]
   14c64:	movcs	r1, r3
   14c68:	str	r1, [r4, #24]
   14c6c:	str	r3, [r2, #4]
   14c70:	add	r0, r0, r5
   14c74:	sub	sp, fp, #8
   14c78:	pop	{r4, r5, fp, pc}
   14c7c:	andeq	r6, r0, r6, lsr #16
   14c80:	andeq	r5, r0, ip, asr r7
   14c84:	andeq	r6, r0, r9, lsr r8

00014c88 <flatcc_builder_offset_vector_push@@Base>:
   14c88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c8c:	add	fp, sp, #24
   14c90:	sub	sp, sp, #8
   14c94:	mov	r6, r0
   14c98:	ldr	r0, [r0, #32]
   14c9c:	mov	r8, r1
   14ca0:	ldrh	r1, [r0, #14]
   14ca4:	cmp	r1, #5
   14ca8:	bne	14d5c <flatcc_builder_offset_vector_push@@Base+0xd4>
   14cac:	ldr	r1, [r0, #20]
   14cb0:	mov	r5, #0
   14cb4:	cmn	r1, #-1073741823	; 0xc0000001
   14cb8:	beq	14d50 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14cbc:	add	r1, r1, #1
   14cc0:	str	r1, [r0, #20]
   14cc4:	ldr	r7, [r6, #20]
   14cc8:	ldr	r0, [r6, #24]
   14ccc:	add	r1, r7, #4
   14cd0:	cmp	r1, r0
   14cd4:	str	r1, [r6, #20]
   14cd8:	bcs	14ce4 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14cdc:	ldr	r0, [r6, #16]
   14ce0:	b	14d44 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14ce4:	ldr	r1, [r6, #28]
   14ce8:	ldr	r0, [r6, #40]	; 0x28
   14cec:	ldr	r4, [r6, #48]	; 0x30
   14cf0:	mov	r2, #1
   14cf4:	mov	r3, #1
   14cf8:	str	r2, [sp]
   14cfc:	add	r1, r7, r1
   14d00:	add	r2, r1, #5
   14d04:	add	r1, r6, #60	; 0x3c
   14d08:	blx	r4
   14d0c:	cmp	r0, #0
   14d10:	bne	14d50 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14d14:	ldr	r1, [r6, #28]
   14d18:	ldr	r0, [r6, #60]	; 0x3c
   14d1c:	ldr	r3, [r6, #64]	; 0x40
   14d20:	ldr	r2, [r6, #32]
   14d24:	add	r0, r0, r1
   14d28:	sub	r1, r3, r1
   14d2c:	mvn	r3, #3
   14d30:	cmn	r1, #4
   14d34:	str	r0, [r6, #16]
   14d38:	movcs	r1, r3
   14d3c:	str	r1, [r6, #24]
   14d40:	str	r3, [r2, #4]
   14d44:	adds	r0, r0, r7
   14d48:	movne	r5, r0
   14d4c:	strne	r8, [r0]
   14d50:	mov	r0, r5
   14d54:	sub	sp, fp, #24
   14d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d5c:	ldr	r0, [pc, #24]	; 14d7c <flatcc_builder_offset_vector_push@@Base+0xf4>
   14d60:	ldr	r1, [pc, #24]	; 14d80 <flatcc_builder_offset_vector_push@@Base+0xf8>
   14d64:	ldr	r3, [pc, #24]	; 14d84 <flatcc_builder_offset_vector_push@@Base+0xfc>
   14d68:	movw	r2, #934	; 0x3a6
   14d6c:	add	r0, pc, r0
   14d70:	add	r1, pc, r1
   14d74:	add	r3, pc, r3
   14d78:	bl	127a8 <__assert_fail@plt>
   14d7c:	strdeq	r5, [r0], -r3
   14d80:			; <UNDEFINED> instruction: 0x000055bc
   14d84:	andeq	r5, r0, lr, lsl sl

00014d88 <flatcc_builder_append_offset_vector@@Base>:
   14d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d8c:	add	fp, sp, #24
   14d90:	sub	sp, sp, #8
   14d94:	mov	r6, r0
   14d98:	ldr	r0, [r0, #32]
   14d9c:	mov	r8, r1
   14da0:	ldrh	r1, [r0, #14]
   14da4:	cmp	r1, #5
   14da8:	bne	14e98 <flatcc_builder_append_offset_vector@@Base+0x110>
   14dac:	ldr	r1, [r0, #20]
   14db0:	mov	r5, r2
   14db4:	adds	r1, r1, r2
   14db8:	cmpcc	r1, #1073741824	; 0x40000000
   14dbc:	bcc	14de0 <flatcc_builder_append_offset_vector@@Base+0x58>
   14dc0:	ldr	r0, [pc, #252]	; 14ec4 <flatcc_builder_append_offset_vector@@Base+0x13c>
   14dc4:	ldr	r1, [pc, #252]	; 14ec8 <flatcc_builder_append_offset_vector@@Base+0x140>
   14dc8:	ldr	r3, [pc, #252]	; 14ecc <flatcc_builder_append_offset_vector@@Base+0x144>
   14dcc:	mov	r2, #892	; 0x37c
   14dd0:	add	r0, pc, r0
   14dd4:	add	r1, pc, r1
   14dd8:	add	r3, pc, r3
   14ddc:	bl	127a8 <__assert_fail@plt>
   14de0:	str	r1, [r0, #20]
   14de4:	ldr	r4, [r6, #20]
   14de8:	ldr	r0, [r6, #24]
   14dec:	add	r1, r4, r5, lsl #2
   14df0:	cmp	r1, r0
   14df4:	str	r1, [r6, #20]
   14df8:	bcs	14e1c <flatcc_builder_append_offset_vector@@Base+0x94>
   14dfc:	ldr	r0, [r6, #16]
   14e00:	adds	r7, r0, r4
   14e04:	beq	14e88 <flatcc_builder_append_offset_vector@@Base+0x100>
   14e08:	lsl	r2, r5, #2
   14e0c:	mov	r0, r7
   14e10:	mov	r1, r8
   14e14:	bl	12718 <memcpy@plt>
   14e18:	b	14e8c <flatcc_builder_append_offset_vector@@Base+0x104>
   14e1c:	ldr	r2, [r6, #28]
   14e20:	ldr	r0, [r6, #40]	; 0x28
   14e24:	ldr	r7, [r6, #48]	; 0x30
   14e28:	mov	r3, #1
   14e2c:	str	r3, [sp]
   14e30:	mov	r3, #1
   14e34:	add	r1, r1, r2
   14e38:	add	r2, r1, #1
   14e3c:	add	r1, r6, #60	; 0x3c
   14e40:	blx	r7
   14e44:	mov	r7, #0
   14e48:	cmp	r0, #0
   14e4c:	bne	14e8c <flatcc_builder_append_offset_vector@@Base+0x104>
   14e50:	ldr	r1, [r6, #28]
   14e54:	ldr	r0, [r6, #60]	; 0x3c
   14e58:	ldr	r3, [r6, #64]	; 0x40
   14e5c:	ldr	r2, [r6, #32]
   14e60:	add	r0, r0, r1
   14e64:	sub	r1, r3, r1
   14e68:	mvn	r3, #3
   14e6c:	cmn	r1, #4
   14e70:	str	r0, [r6, #16]
   14e74:	movcs	r1, r3
   14e78:	str	r1, [r6, #24]
   14e7c:	str	r3, [r2, #4]
   14e80:	adds	r7, r0, r4
   14e84:	bne	14e08 <flatcc_builder_append_offset_vector@@Base+0x80>
   14e88:	mov	r7, #0
   14e8c:	mov	r0, r7
   14e90:	sub	sp, fp, #24
   14e94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e98:	ldr	r0, [pc, #24]	; 14eb8 <flatcc_builder_append_offset_vector@@Base+0x130>
   14e9c:	ldr	r1, [pc, #24]	; 14ebc <flatcc_builder_append_offset_vector@@Base+0x134>
   14ea0:	ldr	r3, [pc, #24]	; 14ec0 <flatcc_builder_append_offset_vector@@Base+0x138>
   14ea4:	mov	r2, #948	; 0x3b4
   14ea8:	add	r0, pc, r0
   14eac:	add	r1, pc, r1
   14eb0:	add	r3, pc, r3
   14eb4:	bl	127a8 <__assert_fail@plt>
   14eb8:			; <UNDEFINED> instruction: 0x000058b7
   14ebc:	andeq	r5, r0, r0, lsl #9
   14ec0:	andeq	r5, r0, r4, asr #18
   14ec4:	andeq	r6, r0, r2, lsr #12
   14ec8:	andeq	r5, r0, r8, asr r5
   14ecc:	andeq	r6, r0, r5, lsr r6

00014ed0 <flatcc_builder_extend_string@@Base>:
   14ed0:	push	{r4, r5, fp, lr}
   14ed4:	add	fp, sp, #8
   14ed8:	sub	sp, sp, #8
   14edc:	mov	r4, r0
   14ee0:	ldr	r0, [r0, #32]
   14ee4:	ldrh	r2, [r0, #14]
   14ee8:	cmp	r2, #6
   14eec:	bne	14f9c <flatcc_builder_extend_string@@Base+0xcc>
   14ef0:	ldr	r2, [r0, #20]
   14ef4:	adds	r2, r2, r1
   14ef8:	bcs	14fbc <flatcc_builder_extend_string@@Base+0xec>
   14efc:	str	r2, [r0, #20]
   14f00:	ldr	r5, [r4, #20]
   14f04:	ldr	r0, [r4, #24]
   14f08:	add	r1, r5, r1
   14f0c:	cmp	r1, r0
   14f10:	str	r1, [r4, #20]
   14f14:	bcs	14f20 <flatcc_builder_extend_string@@Base+0x50>
   14f18:	ldr	r0, [r4, #16]
   14f1c:	b	14f90 <flatcc_builder_extend_string@@Base+0xc0>
   14f20:	ldr	r2, [r4, #28]
   14f24:	ldr	r0, [r4, #40]	; 0x28
   14f28:	ldr	ip, [r4, #48]	; 0x30
   14f2c:	mov	r3, #1
   14f30:	str	r3, [sp]
   14f34:	mov	r3, #1
   14f38:	add	r1, r1, r2
   14f3c:	add	r2, r1, #1
   14f40:	add	r1, r4, #60	; 0x3c
   14f44:	blx	ip
   14f48:	mov	r1, r0
   14f4c:	mov	r0, #0
   14f50:	cmp	r1, #0
   14f54:	beq	14f60 <flatcc_builder_extend_string@@Base+0x90>
   14f58:	sub	sp, fp, #8
   14f5c:	pop	{r4, r5, fp, pc}
   14f60:	ldr	r1, [r4, #28]
   14f64:	ldr	r0, [r4, #60]	; 0x3c
   14f68:	ldr	r3, [r4, #64]	; 0x40
   14f6c:	ldr	r2, [r4, #32]
   14f70:	add	r0, r0, r1
   14f74:	sub	r1, r3, r1
   14f78:	mvn	r3, #3
   14f7c:	cmn	r1, #4
   14f80:	str	r0, [r4, #16]
   14f84:	movcs	r1, r3
   14f88:	str	r1, [r4, #24]
   14f8c:	str	r3, [r2, #4]
   14f90:	add	r0, r0, r5
   14f94:	sub	sp, fp, #8
   14f98:	pop	{r4, r5, fp, pc}
   14f9c:	ldr	r0, [pc, #56]	; 14fdc <flatcc_builder_extend_string@@Base+0x10c>
   14fa0:	ldr	r1, [pc, #56]	; 14fe0 <flatcc_builder_extend_string@@Base+0x110>
   14fa4:	ldr	r3, [pc, #56]	; 14fe4 <flatcc_builder_extend_string@@Base+0x114>
   14fa8:	movw	r2, #957	; 0x3bd
   14fac:	add	r0, pc, r0
   14fb0:	add	r1, pc, r1
   14fb4:	add	r3, pc, r3
   14fb8:	bl	127a8 <__assert_fail@plt>
   14fbc:	ldr	r0, [pc, #36]	; 14fe8 <flatcc_builder_extend_string@@Base+0x118>
   14fc0:	ldr	r1, [pc, #36]	; 14fec <flatcc_builder_extend_string@@Base+0x11c>
   14fc4:	ldr	r3, [pc, #36]	; 14ff0 <flatcc_builder_extend_string@@Base+0x120>
   14fc8:	mov	r2, #892	; 0x37c
   14fcc:	add	r0, pc, r0
   14fd0:	add	r1, pc, r1
   14fd4:	add	r3, pc, r3
   14fd8:	bl	127a8 <__assert_fail@plt>
   14fdc:			; <UNDEFINED> instruction: 0x000058bc
   14fe0:	andeq	r5, r0, ip, ror r3
   14fe4:	andeq	r5, r0, r0, ror #17
   14fe8:	andeq	r6, r0, r6, lsr #8
   14fec:	andeq	r5, r0, ip, asr r3
   14ff0:	andeq	r6, r0, r9, lsr r4

00014ff4 <flatcc_builder_append_string@@Base>:
   14ff4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ff8:	add	fp, sp, #24
   14ffc:	sub	sp, sp, #8
   15000:	mov	r6, r0
   15004:	ldr	r0, [r0, #32]
   15008:	mov	r8, r1
   1500c:	ldrh	r1, [r0, #14]
   15010:	cmp	r1, #6
   15014:	bne	150e0 <flatcc_builder_append_string@@Base+0xec>
   15018:	ldr	r1, [r0, #20]
   1501c:	mov	r4, r2
   15020:	adds	r1, r1, r2
   15024:	bcs	15100 <flatcc_builder_append_string@@Base+0x10c>
   15028:	str	r1, [r0, #20]
   1502c:	ldr	r5, [r6, #20]
   15030:	ldr	r0, [r6, #24]
   15034:	add	r1, r5, r4
   15038:	cmp	r1, r0
   1503c:	str	r1, [r6, #20]
   15040:	bcs	15064 <flatcc_builder_append_string@@Base+0x70>
   15044:	ldr	r0, [r6, #16]
   15048:	adds	r7, r0, r5
   1504c:	beq	150d0 <flatcc_builder_append_string@@Base+0xdc>
   15050:	mov	r0, r7
   15054:	mov	r1, r8
   15058:	mov	r2, r4
   1505c:	bl	12718 <memcpy@plt>
   15060:	b	150d4 <flatcc_builder_append_string@@Base+0xe0>
   15064:	ldr	r2, [r6, #28]
   15068:	ldr	r0, [r6, #40]	; 0x28
   1506c:	ldr	r7, [r6, #48]	; 0x30
   15070:	mov	r3, #1
   15074:	str	r3, [sp]
   15078:	mov	r3, #1
   1507c:	add	r1, r1, r2
   15080:	add	r2, r1, #1
   15084:	add	r1, r6, #60	; 0x3c
   15088:	blx	r7
   1508c:	mov	r7, #0
   15090:	cmp	r0, #0
   15094:	bne	150d4 <flatcc_builder_append_string@@Base+0xe0>
   15098:	ldr	r1, [r6, #28]
   1509c:	ldr	r0, [r6, #60]	; 0x3c
   150a0:	ldr	r3, [r6, #64]	; 0x40
   150a4:	ldr	r2, [r6, #32]
   150a8:	add	r0, r0, r1
   150ac:	sub	r1, r3, r1
   150b0:	mvn	r3, #3
   150b4:	cmn	r1, #4
   150b8:	str	r0, [r6, #16]
   150bc:	movcs	r1, r3
   150c0:	str	r1, [r6, #24]
   150c4:	str	r3, [r2, #4]
   150c8:	adds	r7, r0, r5
   150cc:	bne	15050 <flatcc_builder_append_string@@Base+0x5c>
   150d0:	mov	r7, #0
   150d4:	mov	r0, r7
   150d8:	sub	sp, fp, #24
   150dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150e0:	ldr	r0, [pc, #56]	; 15120 <flatcc_builder_append_string@@Base+0x12c>
   150e4:	ldr	r1, [pc, #56]	; 15124 <flatcc_builder_append_string@@Base+0x130>
   150e8:	ldr	r3, [pc, #56]	; 15128 <flatcc_builder_append_string@@Base+0x134>
   150ec:	movw	r2, #966	; 0x3c6
   150f0:	add	r0, pc, r0
   150f4:	add	r1, pc, r1
   150f8:	add	r3, pc, r3
   150fc:	bl	127a8 <__assert_fail@plt>
   15100:	ldr	r0, [pc, #36]	; 1512c <flatcc_builder_append_string@@Base+0x138>
   15104:	ldr	r1, [pc, #36]	; 15130 <flatcc_builder_append_string@@Base+0x13c>
   15108:	ldr	r3, [pc, #36]	; 15134 <flatcc_builder_append_string@@Base+0x140>
   1510c:	mov	r2, #892	; 0x37c
   15110:	add	r0, pc, r0
   15114:	add	r1, pc, r1
   15118:	add	r3, pc, r3
   1511c:	bl	127a8 <__assert_fail@plt>
   15120:	andeq	r5, r0, r8, ror r7
   15124:	andeq	r5, r0, r8, lsr r2
   15128:	ldrdeq	r5, [r0], -fp
   1512c:	andeq	r6, r0, r2, ror #5
   15130:	andeq	r5, r0, r8, lsl r2
   15134:	strdeq	r6, [r0], -r5

00015138 <flatcc_builder_append_string_str@@Base>:
   15138:	push	{r4, r5, fp, lr}
   1513c:	add	fp, sp, #8
   15140:	mov	r5, r0
   15144:	mov	r0, r1
   15148:	mov	r4, r1
   1514c:	bl	12760 <strlen@plt>
   15150:	mov	r2, r0
   15154:	mov	r0, r5
   15158:	mov	r1, r4
   1515c:	pop	{r4, r5, fp, lr}
   15160:	b	14ff4 <flatcc_builder_append_string@@Base>

00015164 <flatcc_builder_append_string_strn@@Base>:
   15164:	push	{r4, r5, r6, sl, fp, lr}
   15168:	add	fp, sp, #16
   1516c:	mov	r6, r0
   15170:	mov	r5, r1
   15174:	mov	r0, r1
   15178:	mov	r1, #0
   1517c:	mov	r4, r2
   15180:	bl	12790 <memchr@plt>
   15184:	cmp	r0, #0
   15188:	mov	r1, r5
   1518c:	subne	r4, r0, r5
   15190:	mov	r0, r6
   15194:	mov	r2, r4
   15198:	pop	{r4, r5, r6, sl, fp, lr}
   1519c:	b	14ff4 <flatcc_builder_append_string@@Base>

000151a0 <flatcc_builder_truncate_vector@@Base>:
   151a0:	push	{fp, lr}
   151a4:	mov	fp, sp
   151a8:	ldr	r2, [r0, #32]
   151ac:	ldrh	r3, [r2, #14]
   151b0:	cmp	r3, #4
   151b4:	bne	151fc <flatcc_builder_truncate_vector@@Base+0x5c>
   151b8:	ldr	r3, [r2, #20]
   151bc:	cmp	r3, r1
   151c0:	bcc	1521c <flatcc_builder_truncate_vector@@Base+0x7c>
   151c4:	sub	r3, r3, r1
   151c8:	str	r3, [r2, #20]
   151cc:	ldr	r2, [r0, #32]
   151d0:	ldr	r3, [r0, #20]
   151d4:	ldr	ip, [r0, #16]
   151d8:	ldr	r2, [r2, #16]
   151dc:	mls	r3, r2, r1, r3
   151e0:	mul	r2, r2, r1
   151e4:	mov	r1, #0
   151e8:	str	r3, [r0, #20]
   151ec:	add	r0, ip, r3
   151f0:	bl	12778 <memset@plt>
   151f4:	mov	r0, #0
   151f8:	pop	{fp, pc}
   151fc:	ldr	r0, [pc, #56]	; 1523c <flatcc_builder_truncate_vector@@Base+0x9c>
   15200:	ldr	r1, [pc, #56]	; 15240 <flatcc_builder_truncate_vector@@Base+0xa0>
   15204:	ldr	r3, [pc, #56]	; 15244 <flatcc_builder_truncate_vector@@Base+0xa4>
   15208:	movw	r2, #985	; 0x3d9
   1520c:	add	r0, pc, r0
   15210:	add	r1, pc, r1
   15214:	add	r3, pc, r3
   15218:	bl	127a8 <__assert_fail@plt>
   1521c:	ldr	r0, [pc, #36]	; 15248 <flatcc_builder_truncate_vector@@Base+0xa8>
   15220:	ldr	r1, [pc, #36]	; 1524c <flatcc_builder_truncate_vector@@Base+0xac>
   15224:	ldr	r3, [pc, #36]	; 15250 <flatcc_builder_truncate_vector@@Base+0xb0>
   15228:	movw	r2, #986	; 0x3da
   1522c:	add	r0, pc, r0
   15230:	add	r1, pc, r1
   15234:	add	r3, pc, r3
   15238:	bl	127a8 <__assert_fail@plt>
   1523c:	andeq	r5, r0, sl, asr r4
   15240:	andeq	r5, r0, ip, lsl r1
   15244:	andeq	r5, r0, ip, lsl #14
   15248:	andeq	r5, r0, r3, lsr r7
   1524c:	strdeq	r5, [r0], -ip
   15250:	andeq	r5, r0, ip, ror #13

00015254 <flatcc_builder_truncate_offset_vector@@Base>:
   15254:	push	{fp, lr}
   15258:	mov	fp, sp
   1525c:	ldr	r2, [r0, #32]
   15260:	ldrh	r3, [r2, #14]
   15264:	cmp	r3, #5
   15268:	bne	152b0 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   1526c:	ldr	r3, [r2, #20]
   15270:	cmp	r3, r1
   15274:	bcc	152d0 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15278:	sub	r3, r3, r1
   1527c:	str	r3, [r2, #20]
   15280:	ldr	r2, [r0, #32]
   15284:	ldr	r3, [r0, #20]
   15288:	ldr	ip, [r0, #16]
   1528c:	ldr	r2, [r2, #16]
   15290:	mls	r3, r2, r1, r3
   15294:	mul	r2, r2, r1
   15298:	mov	r1, #0
   1529c:	str	r3, [r0, #20]
   152a0:	add	r0, ip, r3
   152a4:	bl	12778 <memset@plt>
   152a8:	mov	r0, #0
   152ac:	pop	{fp, pc}
   152b0:	ldr	r0, [pc, #56]	; 152f0 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   152b4:	ldr	r1, [pc, #56]	; 152f4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   152b8:	ldr	r3, [pc, #56]	; 152f8 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   152bc:	movw	r2, #994	; 0x3e2
   152c0:	add	r0, pc, r0
   152c4:	add	r1, pc, r1
   152c8:	add	r3, pc, r3
   152cc:	bl	127a8 <__assert_fail@plt>
   152d0:	ldr	r0, [pc, #36]	; 152fc <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   152d4:	ldr	r1, [pc, #36]	; 15300 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   152d8:	ldr	r3, [pc, #36]	; 15304 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   152dc:	movw	r2, #995	; 0x3e3
   152e0:	add	r0, pc, r0
   152e4:	add	r1, pc, r1
   152e8:	add	r3, pc, r3
   152ec:	bl	127a8 <__assert_fail@plt>
   152f0:	muleq	r0, pc, r4	; <UNPREDICTABLE>
   152f4:	andeq	r5, r0, r8, rrx
   152f8:			; <UNDEFINED> instruction: 0x000056bb
   152fc:	andeq	r5, r0, r9, ror #13
   15300:	andeq	r5, r0, r8, asr #32
   15304:	muleq	r0, fp, r6

00015308 <flatcc_builder_truncate_string@@Base>:
   15308:	push	{fp, lr}
   1530c:	mov	fp, sp
   15310:	mov	r2, r1
   15314:	ldr	r1, [r0, #32]
   15318:	ldrh	r3, [r1, #14]
   1531c:	cmp	r3, #6
   15320:	bne	1535c <flatcc_builder_truncate_string@@Base+0x54>
   15324:	ldr	r3, [r1, #20]
   15328:	cmp	r3, r2
   1532c:	bcc	1537c <flatcc_builder_truncate_string@@Base+0x74>
   15330:	sub	r3, r3, r2
   15334:	str	r3, [r1, #20]
   15338:	ldr	r3, [r0, #20]
   1533c:	ldr	r1, [r0, #16]
   15340:	sub	r3, r3, r2
   15344:	str	r3, [r0, #20]
   15348:	add	r0, r1, r3
   1534c:	mov	r1, #0
   15350:	bl	12778 <memset@plt>
   15354:	mov	r0, #0
   15358:	pop	{fp, pc}
   1535c:	ldr	r0, [pc, #56]	; 1539c <flatcc_builder_truncate_string@@Base+0x94>
   15360:	ldr	r1, [pc, #56]	; 153a0 <flatcc_builder_truncate_string@@Base+0x98>
   15364:	ldr	r3, [pc, #56]	; 153a4 <flatcc_builder_truncate_string@@Base+0x9c>
   15368:	movw	r2, #1003	; 0x3eb
   1536c:	add	r0, pc, r0
   15370:	add	r1, pc, r1
   15374:	add	r3, pc, r3
   15378:	bl	127a8 <__assert_fail@plt>
   1537c:	ldr	r0, [pc, #36]	; 153a8 <flatcc_builder_truncate_string@@Base+0xa0>
   15380:	ldr	r1, [pc, #36]	; 153ac <flatcc_builder_truncate_string@@Base+0xa4>
   15384:	ldr	r3, [pc, #36]	; 153b0 <flatcc_builder_truncate_string@@Base+0xa8>
   15388:	mov	r2, #1004	; 0x3ec
   1538c:	add	r0, pc, r0
   15390:	add	r1, pc, r1
   15394:	add	r3, pc, r3
   15398:	bl	127a8 <__assert_fail@plt>
   1539c:	strdeq	r5, [r0], -ip
   153a0:			; <UNDEFINED> instruction: 0x00004fbc
   153a4:	muleq	r0, r0, r6
   153a8:			; <UNDEFINED> instruction: 0x000056b7
   153ac:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   153b0:	andeq	r5, r0, r0, ror r6

000153b4 <flatcc_builder_start_vector@@Base>:
   153b4:	push	{r4, r5, r6, r7, fp, lr}
   153b8:	add	fp, sp, #16
   153bc:	mov	r7, #4
   153c0:	cmp	r2, #4
   153c4:	mov	r6, r1
   153c8:	mov	r5, r3
   153cc:	mov	r4, r0
   153d0:	movls	r2, r7
   153d4:	mov	r1, r2
   153d8:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   153dc:	mov	r1, r0
   153e0:	mvn	r0, #0
   153e4:	cmp	r1, #0
   153e8:	popne	{r4, r5, r6, r7, fp, pc}
   153ec:	ldr	r0, [r4, #32]
   153f0:	str	r6, [r0, #16]
   153f4:	mov	r0, #0
   153f8:	ldr	r1, [r4, #32]
   153fc:	str	r0, [r1, #20]
   15400:	ldr	r1, [r4, #32]
   15404:	str	r5, [r1, #24]
   15408:	ldr	r1, [r4, #32]
   1540c:	strh	r7, [r1, #14]
   15410:	ldr	r2, [r4, #28]
   15414:	ldr	r3, [r4, #60]	; 0x3c
   15418:	ldr	r7, [r4, #64]	; 0x40
   1541c:	add	r3, r3, r2
   15420:	sub	r2, r7, r2
   15424:	str	r3, [r4, #16]
   15428:	mvn	r3, #3
   1542c:	cmn	r2, #4
   15430:	movcs	r2, r3
   15434:	str	r2, [r4, #24]
   15438:	str	r3, [r1, #4]
   1543c:	pop	{r4, r5, r6, r7, fp, pc}

00015440 <flatcc_builder_start_offset_vector@@Base>:
   15440:	push	{r4, r5, fp, lr}
   15444:	add	fp, sp, #8
   15448:	mov	r1, #4
   1544c:	mov	r4, r0
   15450:	mov	r5, #4
   15454:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   15458:	mov	r1, r0
   1545c:	mvn	r0, #0
   15460:	cmp	r1, #0
   15464:	popne	{r4, r5, fp, pc}
   15468:	ldr	r0, [r4, #32]
   1546c:	mov	r2, #5
   15470:	str	r5, [r0, #16]
   15474:	mov	r0, #0
   15478:	ldr	r1, [r4, #32]
   1547c:	str	r0, [r1, #20]
   15480:	ldr	r1, [r4, #32]
   15484:	strh	r2, [r1, #14]
   15488:	ldr	r2, [r4, #28]
   1548c:	ldr	r3, [r4, #60]	; 0x3c
   15490:	ldr	r5, [r4, #64]	; 0x40
   15494:	add	r3, r3, r2
   15498:	sub	r2, r5, r2
   1549c:	str	r3, [r4, #16]
   154a0:	mvn	r3, #3
   154a4:	cmn	r2, #4
   154a8:	movcs	r2, r3
   154ac:	str	r2, [r4, #24]
   154b0:	str	r3, [r1, #4]
   154b4:	pop	{r4, r5, fp, pc}

000154b8 <flatcc_builder_create_offset_vector@@Base>:
   154b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154bc:	add	fp, sp, #24
   154c0:	sub	sp, sp, #8
   154c4:	mov	r8, r1
   154c8:	mov	r1, #4
   154cc:	mov	r6, r2
   154d0:	mov	r4, r0
   154d4:	mov	r7, #4
   154d8:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   154dc:	cmp	r0, #0
   154e0:	beq	154f0 <flatcc_builder_create_offset_vector@@Base+0x38>
   154e4:	mov	r0, #0
   154e8:	sub	sp, fp, #24
   154ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154f0:	ldr	r0, [r4, #32]
   154f4:	mov	r1, #0
   154f8:	str	r7, [r0, #16]
   154fc:	ldr	r0, [r4, #32]
   15500:	str	r1, [r0, #20]
   15504:	mov	r1, #5
   15508:	ldr	r0, [r4, #32]
   1550c:	strh	r1, [r0, #14]
   15510:	ldr	r1, [r4, #28]
   15514:	ldr	r2, [r4, #60]	; 0x3c
   15518:	ldr	r3, [r4, #64]	; 0x40
   1551c:	add	r2, r2, r1
   15520:	sub	r1, r3, r1
   15524:	str	r2, [r4, #16]
   15528:	mvn	r2, #3
   1552c:	cmn	r1, #4
   15530:	movcs	r1, r2
   15534:	str	r1, [r4, #24]
   15538:	str	r2, [r0, #4]
   1553c:	ldr	r1, [r0, #20]
   15540:	adds	r1, r1, r6
   15544:	cmpcc	r1, #1073741824	; 0x40000000
   15548:	bcc	1556c <flatcc_builder_create_offset_vector@@Base+0xb4>
   1554c:	ldr	r0, [pc, #200]	; 1561c <flatcc_builder_create_offset_vector@@Base+0x164>
   15550:	ldr	r1, [pc, #200]	; 15620 <flatcc_builder_create_offset_vector@@Base+0x168>
   15554:	ldr	r3, [pc, #200]	; 15624 <flatcc_builder_create_offset_vector@@Base+0x16c>
   15558:	mov	r2, #892	; 0x37c
   1555c:	add	r0, pc, r0
   15560:	add	r1, pc, r1
   15564:	add	r3, pc, r3
   15568:	bl	127a8 <__assert_fail@plt>
   1556c:	str	r1, [r0, #20]
   15570:	ldr	r7, [r4, #20]
   15574:	ldr	r0, [r4, #24]
   15578:	add	r1, r7, r6, lsl #2
   1557c:	cmp	r1, r0
   15580:	str	r1, [r4, #20]
   15584:	bcs	15598 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15588:	ldr	r0, [r4, #16]
   1558c:	adds	r0, r0, r7
   15590:	bne	15600 <flatcc_builder_create_offset_vector@@Base+0x148>
   15594:	b	154e4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   15598:	ldr	r2, [r4, #28]
   1559c:	ldr	r0, [r4, #40]	; 0x28
   155a0:	ldr	r5, [r4, #48]	; 0x30
   155a4:	mov	r3, #1
   155a8:	str	r3, [sp]
   155ac:	mov	r3, #1
   155b0:	add	r1, r1, r2
   155b4:	add	r2, r1, #1
   155b8:	add	r1, r4, #60	; 0x3c
   155bc:	blx	r5
   155c0:	cmp	r0, #0
   155c4:	bne	154e4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   155c8:	ldr	r1, [r4, #28]
   155cc:	ldr	r0, [r4, #60]	; 0x3c
   155d0:	ldr	r3, [r4, #64]	; 0x40
   155d4:	ldr	r2, [r4, #32]
   155d8:	add	r0, r0, r1
   155dc:	sub	r1, r3, r1
   155e0:	mvn	r3, #3
   155e4:	cmn	r1, #4
   155e8:	str	r0, [r4, #16]
   155ec:	movcs	r1, r3
   155f0:	str	r1, [r4, #24]
   155f4:	str	r3, [r2, #4]
   155f8:	adds	r0, r0, r7
   155fc:	beq	154e4 <flatcc_builder_create_offset_vector@@Base+0x2c>
   15600:	lsl	r2, r6, #2
   15604:	mov	r1, r8
   15608:	bl	12718 <memcpy@plt>
   1560c:	mov	r0, r4
   15610:	sub	sp, fp, #24
   15614:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15618:	b	15628 <flatcc_builder_end_offset_vector@@Base>
   1561c:	muleq	r0, r6, lr
   15620:	andeq	r4, r0, ip, asr #27
   15624:	andeq	r5, r0, r9, lsr #29

00015628 <flatcc_builder_end_offset_vector@@Base>:
   15628:	push	{r4, r5, fp, lr}
   1562c:	add	fp, sp, #8
   15630:	mov	r4, r0
   15634:	ldr	r0, [r0, #32]
   15638:	ldrh	r1, [r0, #14]
   1563c:	cmp	r1, #5
   15640:	bne	156e0 <flatcc_builder_end_offset_vector@@Base+0xb8>
   15644:	ldr	r2, [r0, #20]
   15648:	ldr	r1, [r4, #16]
   1564c:	mov	r0, r4
   15650:	mov	r3, #0
   15654:	bl	1674c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15658:	mov	r5, r0
   1565c:	cmp	r0, #0
   15660:	beq	156d8 <flatcc_builder_end_offset_vector@@Base+0xb0>
   15664:	ldr	r0, [r4, #16]
   15668:	ldr	r2, [r4, #20]
   1566c:	mov	r1, #0
   15670:	bl	12778 <memset@plt>
   15674:	ldr	r0, [r4, #32]
   15678:	ldr	r1, [r4, #60]	; 0x3c
   1567c:	ldr	ip, [r4, #64]	; 0x40
   15680:	ldr	r3, [r0, #8]
   15684:	str	r3, [r4, #20]
   15688:	ldr	r3, [r0]
   1568c:	str	r3, [r4, #28]
   15690:	add	r1, r1, r3
   15694:	ldr	r2, [r0, #4]
   15698:	str	r1, [r4, #16]
   1569c:	sub	r1, ip, r3
   156a0:	cmp	r1, r2
   156a4:	movhi	r1, r2
   156a8:	str	r1, [r4, #24]
   156ac:	ldrh	r1, [r4, #130]	; 0x82
   156b0:	ldrh	r2, [r4, #128]	; 0x80
   156b4:	cmp	r2, r1
   156b8:	strhcc	r1, [r4, #128]	; 0x80
   156bc:	ldrh	r1, [r0, #12]
   156c0:	sub	r0, r0, #36	; 0x24
   156c4:	str	r0, [r4, #32]
   156c8:	strh	r1, [r4, #130]	; 0x82
   156cc:	ldr	r0, [r4, #156]	; 0x9c
   156d0:	sub	r0, r0, #1
   156d4:	str	r0, [r4, #156]	; 0x9c
   156d8:	mov	r0, r5
   156dc:	pop	{r4, r5, fp, pc}
   156e0:	ldr	r0, [pc, #24]	; 15700 <flatcc_builder_end_offset_vector@@Base+0xd8>
   156e4:	ldr	r1, [pc, #24]	; 15704 <flatcc_builder_end_offset_vector@@Base+0xdc>
   156e8:	ldr	r3, [pc, #24]	; 15708 <flatcc_builder_end_offset_vector@@Base+0xe0>
   156ec:	movw	r2, #1480	; 0x5c8
   156f0:	add	r0, pc, r0
   156f4:	add	r1, pc, r1
   156f8:	add	r3, pc, r3
   156fc:	bl	127a8 <__assert_fail@plt>
   15700:	andeq	r5, r0, pc, rrx
   15704:	andeq	r4, r0, r8, lsr ip
   15708:	muleq	r0, r6, r6

0001570c <flatcc_builder_start_string@@Base>:
   1570c:	push	{r4, r5, fp, lr}
   15710:	add	fp, sp, #8
   15714:	mov	r1, #1
   15718:	mov	r4, r0
   1571c:	mov	r5, #1
   15720:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   15724:	mov	r1, r0
   15728:	mvn	r0, #0
   1572c:	cmp	r1, #0
   15730:	popne	{r4, r5, fp, pc}
   15734:	ldr	r0, [r4, #32]
   15738:	mov	r2, #6
   1573c:	str	r5, [r0, #16]
   15740:	mov	r0, #0
   15744:	ldr	r1, [r4, #32]
   15748:	str	r0, [r1, #20]
   1574c:	ldr	r1, [r4, #32]
   15750:	strh	r2, [r1, #14]
   15754:	ldr	r2, [r4, #28]
   15758:	ldr	r3, [r4, #60]	; 0x3c
   1575c:	ldr	r5, [r4, #64]	; 0x40
   15760:	add	r3, r3, r2
   15764:	sub	r2, r5, r2
   15768:	str	r3, [r4, #16]
   1576c:	mvn	r3, #3
   15770:	cmn	r2, #4
   15774:	movcs	r2, r3
   15778:	str	r2, [r4, #24]
   1577c:	str	r3, [r1, #4]
   15780:	pop	{r4, r5, fp, pc}

00015784 <flatcc_builder_reserve_table@@Base>:
   15784:	push	{r4, r5, r6, sl, fp, lr}
   15788:	add	fp, sp, #16
   1578c:	sub	sp, sp, #8
   15790:	cmn	r1, #1
   15794:	ble	15868 <flatcc_builder_reserve_table@@Base+0xe4>
   15798:	mov	r4, r0
   1579c:	ldr	r0, [r0, #32]
   157a0:	mov	r5, r1
   157a4:	ldr	r1, [r4, #56]	; 0x38
   157a8:	ldrh	r2, [r0, #28]
   157ac:	ldr	r0, [r0, #16]
   157b0:	add	r6, r0, r2, lsl #1
   157b4:	add	r0, r6, r5, lsl #1
   157b8:	add	r2, r0, #4
   157bc:	cmp	r2, r1
   157c0:	bls	157e8 <flatcc_builder_reserve_table@@Base+0x64>
   157c4:	ldr	r0, [r4, #40]	; 0x28
   157c8:	ldr	ip, [r4, #48]	; 0x30
   157cc:	mov	r3, #0
   157d0:	add	r1, r4, #52	; 0x34
   157d4:	str	r3, [sp]
   157d8:	mov	r3, #1
   157dc:	blx	ip
   157e0:	cmp	r0, #0
   157e4:	bne	15888 <flatcc_builder_reserve_table@@Base+0x104>
   157e8:	ldr	r0, [r4, #52]	; 0x34
   157ec:	adds	r0, r0, r6
   157f0:	str	r0, [r4, #4]
   157f4:	mvneq	r0, #0
   157f8:	subeq	sp, fp, #16
   157fc:	popeq	{r4, r5, r6, sl, fp, pc}
   15800:	add	r0, r0, #4
   15804:	lsl	r1, r5, #1
   15808:	str	r0, [r4, #4]
   1580c:	ldr	r0, [r4, #32]
   15810:	ldr	r3, [r4, #80]	; 0x50
   15814:	ldr	r5, [r0, #20]
   15818:	orr	r0, r1, #1
   1581c:	add	r2, r5, r0
   15820:	cmp	r2, r3
   15824:	bls	1584c <flatcc_builder_reserve_table@@Base+0xc8>
   15828:	ldr	r0, [r4, #40]	; 0x28
   1582c:	ldr	r6, [r4, #48]	; 0x30
   15830:	mov	r3, #3
   15834:	add	r1, r4, #76	; 0x4c
   15838:	str	r3, [sp]
   1583c:	mov	r3, #0
   15840:	blx	r6
   15844:	cmp	r0, #0
   15848:	bne	15888 <flatcc_builder_reserve_table@@Base+0x104>
   1584c:	ldr	r0, [r4, #76]	; 0x4c
   15850:	adds	r0, r0, r5
   15854:	str	r0, [r4]
   15858:	mov	r0, #0
   1585c:	mvneq	r0, #0
   15860:	sub	sp, fp, #16
   15864:	pop	{r4, r5, r6, sl, fp, pc}
   15868:	ldr	r0, [pc, #56]	; 158a8 <flatcc_builder_reserve_table@@Base+0x124>
   1586c:	ldr	r1, [pc, #56]	; 158ac <flatcc_builder_reserve_table@@Base+0x128>
   15870:	ldr	r3, [pc, #56]	; 158b0 <flatcc_builder_reserve_table@@Base+0x12c>
   15874:	movw	r2, #1065	; 0x429
   15878:	add	r0, pc, r0
   1587c:	add	r1, pc, r1
   15880:	add	r3, pc, r3
   15884:	bl	127a8 <__assert_fail@plt>
   15888:	ldr	r0, [pc, #36]	; 158b4 <flatcc_builder_reserve_table@@Base+0x130>
   1588c:	ldr	r1, [pc, #36]	; 158b8 <flatcc_builder_reserve_table@@Base+0x134>
   15890:	ldr	r3, [pc, #36]	; 158bc <flatcc_builder_reserve_table@@Base+0x138>
   15894:	mov	r2, #308	; 0x134
   15898:	add	r0, pc, r0
   1589c:	add	r1, pc, r1
   158a0:	add	r3, pc, r3
   158a4:	bl	127a8 <__assert_fail@plt>
   158a8:	andeq	r5, r0, lr, lsr #4
   158ac:			; <UNDEFINED> instruction: 0x00004ab0
   158b0:	andeq	r5, r0, r5, ror #3
   158b4:	andeq	r5, r0, r1, asr ip
   158b8:	muleq	r0, r0, sl
   158bc:	andeq	r5, r0, r3, lsl #21

000158c0 <flatcc_builder_start_table@@Base>:
   158c0:	push	{r4, r5, r6, r7, fp, lr}
   158c4:	add	fp, sp, #16
   158c8:	sub	sp, sp, #8
   158cc:	mov	r6, r1
   158d0:	mov	r1, #4
   158d4:	mov	r4, r0
   158d8:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   158dc:	mvn	r5, #0
   158e0:	cmp	r0, #0
   158e4:	beq	158f4 <flatcc_builder_start_table@@Base+0x34>
   158e8:	mov	r0, r5
   158ec:	sub	sp, fp, #16
   158f0:	pop	{r4, r5, r6, r7, fp, pc}
   158f4:	mov	r1, r4
   158f8:	ldr	r2, [r4, #4]
   158fc:	ldr	r3, [r4, #32]
   15900:	ldr	r0, [r1, #52]!	; 0x34
   15904:	sub	r0, r2, r0
   15908:	str	r0, [r3, #16]
   1590c:	ldr	r0, [r4]
   15910:	ldr	r3, [r4, #76]	; 0x4c
   15914:	ldr	r2, [r4, #32]
   15918:	sub	r0, r0, r3
   1591c:	mov	r3, #0
   15920:	str	r0, [r2, #20]
   15924:	ldr	r0, [r4, #12]
   15928:	ldr	r2, [r4, #32]
   1592c:	str	r0, [r2, #24]
   15930:	ldr	r0, [r4, #32]
   15934:	ldrh	r2, [r4, #8]
   15938:	strh	r2, [r0, #28]
   1593c:	movw	r0, #15186	; 0x3b52
   15940:	strh	r3, [r4, #8]
   15944:	mov	r2, #3
   15948:	movt	r0, #12137	; 0x2f69
   1594c:	str	r0, [r4, #12]
   15950:	ldr	r0, [r4, #32]
   15954:	strh	r2, [r0, #14]
   15958:	ldrh	r2, [r0, #28]
   1595c:	ldr	r0, [r0, #16]
   15960:	add	r7, r0, r2, lsl #1
   15964:	add	r0, r7, r6, lsl #1
   15968:	add	r2, r0, #4
   1596c:	ldr	r0, [r4, #56]	; 0x38
   15970:	cmp	r2, r0
   15974:	bls	15994 <flatcc_builder_start_table@@Base+0xd4>
   15978:	ldr	r0, [r4, #40]	; 0x28
   1597c:	ldr	ip, [r4, #48]	; 0x30
   15980:	str	r3, [sp]
   15984:	mov	r3, #1
   15988:	blx	ip
   1598c:	cmp	r0, #0
   15990:	bne	15a38 <flatcc_builder_start_table@@Base+0x178>
   15994:	ldr	r0, [r4, #52]	; 0x34
   15998:	adds	r0, r0, r7
   1599c:	str	r0, [r4, #4]
   159a0:	beq	158e8 <flatcc_builder_start_table@@Base+0x28>
   159a4:	add	r0, r0, #4
   159a8:	lsl	r1, r6, #1
   159ac:	str	r0, [r4, #4]
   159b0:	ldr	r0, [r4, #32]
   159b4:	ldr	r3, [r4, #80]	; 0x50
   159b8:	ldr	r6, [r0, #20]
   159bc:	orr	r0, r1, #1
   159c0:	add	r2, r6, r0
   159c4:	cmp	r2, r3
   159c8:	bls	159f0 <flatcc_builder_start_table@@Base+0x130>
   159cc:	ldr	r0, [r4, #40]	; 0x28
   159d0:	ldr	r7, [r4, #48]	; 0x30
   159d4:	mov	r3, #3
   159d8:	add	r1, r4, #76	; 0x4c
   159dc:	str	r3, [sp]
   159e0:	mov	r3, #0
   159e4:	blx	r7
   159e8:	cmp	r0, #0
   159ec:	bne	15a38 <flatcc_builder_start_table@@Base+0x178>
   159f0:	ldr	r0, [r4, #76]	; 0x4c
   159f4:	adds	r0, r0, r6
   159f8:	str	r0, [r4]
   159fc:	beq	158e8 <flatcc_builder_start_table@@Base+0x28>
   15a00:	ldr	r0, [r4, #28]
   15a04:	ldr	r2, [r4, #60]	; 0x3c
   15a08:	ldr	r3, [r4, #64]	; 0x40
   15a0c:	ldr	r1, [r4, #32]
   15a10:	mov	r5, #0
   15a14:	add	r2, r2, r0
   15a18:	sub	r0, r3, r0
   15a1c:	str	r2, [r4, #16]
   15a20:	movw	r2, #65532	; 0xfffc
   15a24:	cmp	r0, r2
   15a28:	movcs	r0, r2
   15a2c:	str	r0, [r4, #24]
   15a30:	str	r2, [r1, #4]
   15a34:	b	158e8 <flatcc_builder_start_table@@Base+0x28>
   15a38:	ldr	r0, [pc, #24]	; 15a58 <flatcc_builder_start_table@@Base+0x198>
   15a3c:	ldr	r1, [pc, #24]	; 15a5c <flatcc_builder_start_table@@Base+0x19c>
   15a40:	ldr	r3, [pc, #24]	; 15a60 <flatcc_builder_start_table@@Base+0x1a0>
   15a44:	mov	r2, #308	; 0x134
   15a48:	add	r0, pc, r0
   15a4c:	add	r1, pc, r1
   15a50:	add	r3, pc, r3
   15a54:	bl	127a8 <__assert_fail@plt>
   15a58:	andeq	r5, r0, r1, lsr #21
   15a5c:	andeq	r4, r0, r0, ror #17
   15a60:	ldrdeq	r5, [r0], -r3

00015a64 <flatcc_builder_create_vtable@@Base>:
   15a64:	push	{r4, r5, fp, lr}
   15a68:	add	fp, sp, #8
   15a6c:	sub	sp, sp, #80	; 0x50
   15a70:	mov	r3, r2
   15a74:	mov	r2, #0
   15a78:	mov	r4, r0
   15a7c:	cmp	r3, #0
   15a80:	str	r2, [sp, #12]
   15a84:	str	r2, [sp, #8]
   15a88:	movne	r2, #1
   15a8c:	strne	r1, [sp, #16]
   15a90:	strne	r3, [sp, #8]
   15a94:	strne	r3, [sp, #20]
   15a98:	strne	r2, [sp, #12]
   15a9c:	ldr	r0, [r4, #152]	; 0x98
   15aa0:	cmp	r0, #0
   15aa4:	bne	15ab4 <flatcc_builder_create_vtable@@Base+0x50>
   15aa8:	ldr	r0, [r4, #180]	; 0xb4
   15aac:	cmp	r0, #0
   15ab0:	beq	15b00 <flatcc_builder_create_vtable@@Base+0x9c>
   15ab4:	cmp	r3, #0
   15ab8:	beq	15b44 <flatcc_builder_create_vtable@@Base+0xe0>
   15abc:	ldr	r0, [r4, #136]	; 0x88
   15ac0:	ldr	ip, [r4, #44]	; 0x2c
   15ac4:	add	r1, sp, #8
   15ac8:	add	r1, r1, #8
   15acc:	sub	r5, r0, r3
   15ad0:	ldr	r0, [r4, #36]	; 0x24
   15ad4:	str	r3, [sp]
   15ad8:	mov	r3, r5
   15adc:	blx	ip
   15ae0:	cmp	r0, #0
   15ae4:	bne	15b64 <flatcc_builder_create_vtable@@Base+0x100>
   15ae8:	cmp	r5, #0
   15aec:	str	r5, [r4, #136]	; 0x88
   15af0:	beq	15b38 <flatcc_builder_create_vtable@@Base+0xd4>
   15af4:	add	r0, r5, #1
   15af8:	sub	sp, fp, #8
   15afc:	pop	{r4, r5, fp, pc}
   15b00:	ldr	r5, [r4, #140]	; 0x8c
   15b04:	ldr	r0, [r4, #36]	; 0x24
   15b08:	ldr	ip, [r4, #44]	; 0x2c
   15b0c:	add	r1, r5, r3
   15b10:	str	r1, [r4, #140]	; 0x8c
   15b14:	add	r1, sp, #8
   15b18:	str	r3, [sp]
   15b1c:	mov	r3, r5
   15b20:	add	r1, r1, #8
   15b24:	blx	ip
   15b28:	cmp	r0, #0
   15b2c:	bne	15b84 <flatcc_builder_create_vtable@@Base+0x120>
   15b30:	adds	r0, r5, #1
   15b34:	bne	15af8 <flatcc_builder_create_vtable@@Base+0x94>
   15b38:	mov	r0, #0
   15b3c:	sub	sp, fp, #8
   15b40:	pop	{r4, r5, fp, pc}
   15b44:	ldr	r0, [pc, #100]	; 15bb0 <flatcc_builder_create_vtable@@Base+0x14c>
   15b48:	ldr	r1, [pc, #100]	; 15bb4 <flatcc_builder_create_vtable@@Base+0x150>
   15b4c:	ldr	r3, [pc, #100]	; 15bb8 <flatcc_builder_create_vtable@@Base+0x154>
   15b50:	movw	r2, #647	; 0x287
   15b54:	add	r0, pc, r0
   15b58:	add	r1, pc, r1
   15b5c:	add	r3, pc, r3
   15b60:	bl	127a8 <__assert_fail@plt>
   15b64:	ldr	r0, [pc, #80]	; 15bbc <flatcc_builder_create_vtable@@Base+0x158>
   15b68:	ldr	r1, [pc, #80]	; 15bc0 <flatcc_builder_create_vtable@@Base+0x15c>
   15b6c:	ldr	r3, [pc, #80]	; 15bc4 <flatcc_builder_create_vtable@@Base+0x160>
   15b70:	movw	r2, #651	; 0x28b
   15b74:	add	r0, pc, r0
   15b78:	add	r1, pc, r1
   15b7c:	add	r3, pc, r3
   15b80:	bl	127a8 <__assert_fail@plt>
   15b84:	ldr	r0, [pc, #24]	; 15ba4 <flatcc_builder_create_vtable@@Base+0x140>
   15b88:	ldr	r1, [pc, #24]	; 15ba8 <flatcc_builder_create_vtable@@Base+0x144>
   15b8c:	ldr	r3, [pc, #24]	; 15bac <flatcc_builder_create_vtable@@Base+0x148>
   15b90:	movw	r2, #677	; 0x2a5
   15b94:	add	r0, pc, r0
   15b98:	add	r1, pc, r1
   15b9c:	add	r3, pc, r3
   15ba0:	bl	127a8 <__assert_fail@plt>
   15ba4:	andeq	r5, r0, r5, asr r9
   15ba8:	muleq	r0, r4, r7
   15bac:	andeq	r5, r0, r8, asr #17
   15bb0:	muleq	r0, r5, r9
   15bb4:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   15bb8:	andeq	r5, r0, ip, asr #16
   15bbc:	andeq	r5, r0, r5, ror r9
   15bc0:			; <UNDEFINED> instruction: 0x000047b4
   15bc4:	andeq	r5, r0, ip, lsr #16

00015bc8 <flatcc_builder_create_cached_vtable@@Base>:
   15bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bcc:	add	fp, sp, #28
   15bd0:	sub	sp, sp, #20
   15bd4:	mov	sl, r0
   15bd8:	ldr	r0, [r0, #116]	; 0x74
   15bdc:	mov	r8, r3
   15be0:	mov	r5, r2
   15be4:	str	r1, [sp, #16]
   15be8:	cmp	r0, #0
   15bec:	beq	15c90 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15bf0:	ldr	r1, [sl, #92]	; 0x5c
   15bf4:	rsb	r0, r0, #32
   15bf8:	lsr	r0, r8, r0
   15bfc:	add	r6, r1, r0, lsl #2
   15c00:	cmp	r6, #0
   15c04:	beq	15d54 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15c08:	ldr	r7, [r6]
   15c0c:	str	r6, [sp, #12]
   15c10:	cmp	r7, #0
   15c14:	beq	15d5c <flatcc_builder_create_cached_vtable@@Base+0x194>
   15c18:	ldr	r4, [sl, #68]	; 0x44
   15c1c:	ldr	r8, [sl, #100]	; 0x64
   15c20:	mov	r0, #0
   15c24:	str	r0, [sp, #8]
   15c28:	add	r9, r8, r7
   15c2c:	mov	r1, r4
   15c30:	ldr	r0, [r9, #8]
   15c34:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15c38:	cmp	r0, r5
   15c3c:	bne	15c54 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15c40:	ldr	r0, [sp, #16]
   15c44:	mov	r2, r5
   15c48:	bl	12724 <memcmp@plt>
   15c4c:	cmp	r0, #0
   15c50:	beq	15c68 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15c54:	ldr	r7, [r9, #12]!
   15c58:	cmp	r7, #0
   15c5c:	mov	r6, r9
   15c60:	bne	15c28 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15c64:	b	15d4c <flatcc_builder_create_cached_vtable@@Base+0x184>
   15c68:	ldr	r0, [sl, #152]	; 0x98
   15c6c:	ldr	r1, [r9, #4]
   15c70:	cmp	r1, r0
   15c74:	beq	15ec0 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15c78:	mov	r6, r9
   15c7c:	mov	r0, r9
   15c80:	ldr	r7, [r6, #12]!
   15c84:	cmp	r7, #0
   15c88:	bne	15c24 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15c8c:	b	15d60 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15c90:	ldr	r0, [sl, #124]	; 0x7c
   15c94:	cmp	r0, #0
   15c98:	bne	15f0c <flatcc_builder_create_cached_vtable@@Base+0x344>
   15c9c:	ldr	r0, [sl, #104]	; 0x68
   15ca0:	add	r7, sl, #100	; 0x64
   15ca4:	cmp	r0, #15
   15ca8:	bhi	15cd4 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15cac:	ldr	r0, [sl, #40]	; 0x28
   15cb0:	ldr	r6, [sl, #48]	; 0x30
   15cb4:	mov	r1, #6
   15cb8:	mov	r2, #16
   15cbc:	mov	r3, #0
   15cc0:	str	r1, [sp]
   15cc4:	mov	r1, r7
   15cc8:	blx	r6
   15ccc:	cmp	r0, #0
   15cd0:	bne	15eec <flatcc_builder_create_cached_vtable@@Base+0x324>
   15cd4:	ldr	r0, [r7]
   15cd8:	mov	r7, #0
   15cdc:	cmp	r0, #0
   15ce0:	beq	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ce4:	mov	r0, #16
   15ce8:	mov	r2, #5
   15cec:	add	r1, sl, #92	; 0x5c
   15cf0:	mov	r3, #1
   15cf4:	mov	r4, #256	; 0x100
   15cf8:	str	r0, [sl, #124]	; 0x7c
   15cfc:	ldr	r0, [sl, #40]	; 0x28
   15d00:	ldr	r6, [sl, #48]	; 0x30
   15d04:	str	r2, [sp]
   15d08:	mov	r2, #256	; 0x100
   15d0c:	blx	r6
   15d10:	cmp	r0, #0
   15d14:	bne	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15d18:	ldr	r0, [sl, #96]	; 0x60
   15d1c:	mov	r1, r4
   15d20:	lsl	r4, r4, #1
   15d24:	cmp	r0, r1, lsl #1
   15d28:	bcs	15d1c <flatcc_builder_create_cached_vtable@@Base+0x154>
   15d2c:	lsr	r1, r1, #2
   15d30:	mvn	r0, #0
   15d34:	mov	r2, #1
   15d38:	add	r0, r0, #1
   15d3c:	cmp	r1, r2, lsl r0
   15d40:	bhi	15d38 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15d44:	str	r0, [sl, #116]	; 0x74
   15d48:	b	15bf0 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15d4c:	ldr	r9, [sp, #8]
   15d50:	b	15d60 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15d54:	mov	r7, #0
   15d58:	b	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15d5c:	mov	r9, #0
   15d60:	ldr	r4, [sl, #124]	; 0x7c
   15d64:	ldr	r0, [sl, #104]	; 0x68
   15d68:	add	r7, sl, #100	; 0x64
   15d6c:	add	r2, r4, #16
   15d70:	cmp	r2, r0
   15d74:	bls	15d9c <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15d78:	ldr	r0, [sl, #40]	; 0x28
   15d7c:	ldr	r6, [sl, #48]	; 0x30
   15d80:	mov	r1, #6
   15d84:	mov	r3, #0
   15d88:	str	r1, [sp]
   15d8c:	mov	r1, r7
   15d90:	blx	r6
   15d94:	cmp	r0, #0
   15d98:	bne	15eec <flatcc_builder_create_cached_vtable@@Base+0x324>
   15d9c:	ldr	r0, [r7]
   15da0:	mov	r7, #0
   15da4:	adds	r4, r0, r4
   15da8:	beq	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15dac:	ldr	r0, [sl, #124]	; 0x7c
   15db0:	ldr	r1, [sl, #152]	; 0x98
   15db4:	add	r2, r0, #16
   15db8:	str	r2, [sl, #124]	; 0x7c
   15dbc:	ldr	r2, [sp, #12]
   15dc0:	str	r1, [r4, #4]
   15dc4:	ldr	r1, [r2]
   15dc8:	str	r1, [r4, #12]
   15dcc:	ldr	r1, [sp, #16]
   15dd0:	str	r0, [r2]
   15dd4:	mov	r0, sl
   15dd8:	mov	r2, r5
   15ddc:	bl	15a64 <flatcc_builder_create_vtable@@Base>
   15de0:	cmp	r0, #0
   15de4:	str	r0, [r4]
   15de8:	beq	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15dec:	cmp	r9, #0
   15df0:	beq	15e0c <flatcc_builder_create_cached_vtable@@Base+0x244>
   15df4:	ldr	r0, [r9, #8]
   15df8:	str	r0, [r4, #8]
   15dfc:	ldr	r7, [r4]
   15e00:	mov	r0, r7
   15e04:	sub	sp, fp, #28
   15e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e0c:	ldr	r6, [sl, #120]	; 0x78
   15e10:	ldr	r0, [sl, #172]	; 0xac
   15e14:	add	r2, r6, r5
   15e18:	cmp	r0, #0
   15e1c:	beq	15e58 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15e20:	cmp	r0, r2
   15e24:	bcs	15e58 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15e28:	ldr	r0, [sl, #116]	; 0x74
   15e2c:	cmp	r0, #0
   15e30:	beq	15dfc <flatcc_builder_create_cached_vtable@@Base+0x234>
   15e34:	ldr	r0, [sl, #92]	; 0x5c
   15e38:	ldr	r2, [sl, #96]	; 0x60
   15e3c:	mov	r1, #0
   15e40:	mov	r5, #0
   15e44:	bl	12778 <memset@plt>
   15e48:	mov	r0, #16
   15e4c:	str	r5, [sl, #120]	; 0x78
   15e50:	str	r0, [sl, #124]	; 0x7c
   15e54:	b	15dfc <flatcc_builder_create_cached_vtable@@Base+0x234>
   15e58:	ldr	r0, [sl, #72]	; 0x48
   15e5c:	add	r7, sl, #68	; 0x44
   15e60:	cmp	r2, r0
   15e64:	bls	15e8c <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15e68:	ldr	r0, [sl, #40]	; 0x28
   15e6c:	ldr	ip, [sl, #48]	; 0x30
   15e70:	mov	r1, #2
   15e74:	mov	r3, #0
   15e78:	str	r1, [sp]
   15e7c:	mov	r1, r7
   15e80:	blx	ip
   15e84:	cmp	r0, #0
   15e88:	bne	15eec <flatcc_builder_create_cached_vtable@@Base+0x324>
   15e8c:	ldr	r0, [r7]
   15e90:	adds	r0, r0, r6
   15e94:	beq	15eb8 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15e98:	ldr	r1, [sl, #120]	; 0x78
   15e9c:	mov	r2, r5
   15ea0:	str	r1, [r4, #8]
   15ea4:	add	r1, r1, r5
   15ea8:	str	r1, [sl, #120]	; 0x78
   15eac:	ldr	r1, [sp, #16]
   15eb0:	bl	12718 <memcpy@plt>
   15eb4:	b	15dfc <flatcc_builder_create_cached_vtable@@Base+0x234>
   15eb8:	mvn	r7, #0
   15ebc:	b	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15ec0:	ldr	r0, [sp, #12]
   15ec4:	cmp	r6, r0
   15ec8:	beq	15ee4 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15ecc:	mov	r1, r0
   15ed0:	ldr	r0, [r9, #12]
   15ed4:	str	r0, [r6]
   15ed8:	ldr	r0, [r1]
   15edc:	str	r0, [r9, #12]
   15ee0:	str	r7, [r1]
   15ee4:	ldr	r7, [r9]
   15ee8:	b	15e00 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15eec:	ldr	r0, [pc, #68]	; 15f38 <flatcc_builder_create_cached_vtable@@Base+0x370>
   15ef0:	ldr	r1, [pc, #68]	; 15f3c <flatcc_builder_create_cached_vtable@@Base+0x374>
   15ef4:	ldr	r3, [pc, #68]	; 15f40 <flatcc_builder_create_cached_vtable@@Base+0x378>
   15ef8:	mov	r2, #308	; 0x134
   15efc:	add	r0, pc, r0
   15f00:	add	r1, pc, r1
   15f04:	add	r3, pc, r3
   15f08:	bl	127a8 <__assert_fail@plt>
   15f0c:	ldr	r0, [pc, #24]	; 15f2c <flatcc_builder_create_cached_vtable@@Base+0x364>
   15f10:	ldr	r1, [pc, #24]	; 15f30 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15f14:	ldr	r3, [pc, #24]	; 15f34 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   15f18:	movw	r2, #342	; 0x156
   15f1c:	add	r0, pc, r0
   15f20:	add	r1, pc, r1
   15f24:	add	r3, pc, r3
   15f28:	bl	127a8 <__assert_fail@plt>
   15f2c:	muleq	r0, r1, r5
   15f30:	andeq	r4, r0, ip, lsl #8
   15f34:	muleq	r0, r8, r5
   15f38:	andeq	r5, r0, sp, ror #11
   15f3c:	andeq	r4, r0, ip, lsr #8
   15f40:	andeq	r5, r0, pc, lsl r4

00015f44 <flatcc_builder_create_table@@Base>:
   15f44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f48:	add	fp, sp, #24
   15f4c:	sub	sp, sp, #80	; 0x50
   15f50:	ldr	r5, [fp, #12]
   15f54:	cmn	r5, #1
   15f58:	ble	160ac <flatcc_builder_create_table@@Base+0x168>
   15f5c:	ldr	ip, [fp, #16]
   15f60:	tst	ip, #1
   15f64:	beq	160cc <flatcc_builder_create_table@@Base+0x188>
   15f68:	mov	r8, r0
   15f6c:	ldrh	r0, [r0, #128]	; 0x80
   15f70:	cmp	r3, #4
   15f74:	movls	r3, #4
   15f78:	cmp	r0, r3
   15f7c:	strhcc	r3, [r8, #128]	; 0x80
   15f80:	sub	r3, r3, #1
   15f84:	cmp	r5, #1
   15f88:	ldr	r4, [r8, #136]	; 0x88
   15f8c:	sub	r0, r4, r2
   15f90:	and	r0, r0, r3
   15f94:	add	r3, ip, r0
   15f98:	mvn	ip, #3
   15f9c:	sub	r6, ip, r2
   15fa0:	add	r4, r6, r4
   15fa4:	add	r6, r4, #1
   15fa8:	sub	r3, r6, r3
   15fac:	str	r3, [fp, #-28]	; 0xffffffe4
   15fb0:	blt	15fdc <flatcc_builder_create_table@@Base+0x98>
   15fb4:	ldr	r3, [fp, #8]
   15fb8:	sub	r6, r4, r0
   15fbc:	sub	r4, ip, r6
   15fc0:	ldrh	r6, [r3], #2
   15fc4:	subs	r5, r5, #1
   15fc8:	ldr	r7, [r6, r1]
   15fcc:	add	r7, r4, r7
   15fd0:	sub	r7, r7, r6
   15fd4:	str	r7, [r6, r1]
   15fd8:	bne	15fc0 <flatcc_builder_create_table@@Base+0x7c>
   15fdc:	sub	r3, fp, #28
   15fe0:	mov	r4, #4
   15fe4:	cmp	r2, #0
   15fe8:	str	r3, [sp, #12]
   15fec:	mov	r3, #1
   15ff0:	str	r4, [sp, #4]
   15ff4:	str	r4, [sp, #16]
   15ff8:	str	r3, [sp, #8]
   15ffc:	beq	16018 <flatcc_builder_create_table@@Base+0xd4>
   16000:	mov	r3, #2
   16004:	add	r4, r2, #4
   16008:	str	r1, [sp, #20]
   1600c:	str	r2, [sp, #24]
   16010:	str	r3, [sp, #8]
   16014:	str	r4, [sp, #4]
   16018:	cmp	r0, #0
   1601c:	beq	16048 <flatcc_builder_create_table@@Base+0x104>
   16020:	add	r4, r4, r0
   16024:	add	r1, sp, #4
   16028:	str	r4, [sp, #4]
   1602c:	add	r1, r1, r3, lsl #3
   16030:	add	r3, r3, #1
   16034:	ldr	r2, [pc, #208]	; 1610c <flatcc_builder_create_table@@Base+0x1c8>
   16038:	ldr	r2, [pc, r2]
   1603c:	str	r2, [r1, #8]
   16040:	str	r0, [r1, #12]
   16044:	str	r3, [sp, #8]
   16048:	cmp	r4, #0
   1604c:	ble	160ec <flatcc_builder_create_table@@Base+0x1a8>
   16050:	ldr	r0, [r8, #136]	; 0x88
   16054:	ldr	r7, [r8, #44]	; 0x2c
   16058:	add	r1, sp, #4
   1605c:	mov	r2, r3
   16060:	add	r1, r1, #8
   16064:	sub	r5, r0, r4
   16068:	ldr	r0, [r8, #36]	; 0x24
   1606c:	str	r4, [sp]
   16070:	mov	r3, r5
   16074:	blx	r7
   16078:	cmp	r0, #0
   1607c:	streq	r5, [r8, #136]	; 0x88
   16080:	moveq	r0, r5
   16084:	subeq	sp, fp, #24
   16088:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1608c:	ldr	r0, [pc, #160]	; 16134 <flatcc_builder_create_table@@Base+0x1f0>
   16090:	ldr	r1, [pc, #160]	; 16138 <flatcc_builder_create_table@@Base+0x1f4>
   16094:	ldr	r3, [pc, #160]	; 1613c <flatcc_builder_create_table@@Base+0x1f8>
   16098:	movw	r2, #651	; 0x28b
   1609c:	add	r0, pc, r0
   160a0:	add	r1, pc, r1
   160a4:	add	r3, pc, r3
   160a8:	bl	127a8 <__assert_fail@plt>
   160ac:	ldr	r0, [pc, #92]	; 16110 <flatcc_builder_create_table@@Base+0x1cc>
   160b0:	ldr	r1, [pc, #92]	; 16114 <flatcc_builder_create_table@@Base+0x1d0>
   160b4:	ldr	r3, [pc, #92]	; 16118 <flatcc_builder_create_table@@Base+0x1d4>
   160b8:	movw	r2, #1237	; 0x4d5
   160bc:	add	r0, pc, r0
   160c0:	add	r1, pc, r1
   160c4:	add	r3, pc, r3
   160c8:	bl	127a8 <__assert_fail@plt>
   160cc:	ldr	r0, [pc, #72]	; 1611c <flatcc_builder_create_table@@Base+0x1d8>
   160d0:	ldr	r1, [pc, #72]	; 16120 <flatcc_builder_create_table@@Base+0x1dc>
   160d4:	ldr	r3, [pc, #72]	; 16124 <flatcc_builder_create_table@@Base+0x1e0>
   160d8:	movw	r2, #1243	; 0x4db
   160dc:	add	r0, pc, r0
   160e0:	add	r1, pc, r1
   160e4:	add	r3, pc, r3
   160e8:	bl	127a8 <__assert_fail@plt>
   160ec:	ldr	r0, [pc, #52]	; 16128 <flatcc_builder_create_table@@Base+0x1e4>
   160f0:	ldr	r1, [pc, #52]	; 1612c <flatcc_builder_create_table@@Base+0x1e8>
   160f4:	ldr	r3, [pc, #52]	; 16130 <flatcc_builder_create_table@@Base+0x1ec>
   160f8:	movw	r2, #647	; 0x287
   160fc:	add	r0, pc, r0
   16100:	add	r1, pc, r1
   16104:	add	r3, pc, r3
   16108:	bl	127a8 <__assert_fail@plt>
   1610c:	andeq	r6, r1, r4
   16110:	andeq	r4, r0, r3, ror #19
   16114:	andeq	r4, r0, ip, ror #4
   16118:	andeq	r4, r0, sp, ror #19
   1611c:	andeq	r4, r0, r1, ror sl
   16120:	andeq	r4, r0, ip, asr #4
   16124:	andeq	r4, r0, sp, asr #19
   16128:	andeq	r5, r0, sp, ror #7
   1612c:	andeq	r4, r0, ip, lsr #4
   16130:	andeq	r5, r0, r4, lsr #5
   16134:	andeq	r5, r0, sp, asr #8
   16138:	andeq	r4, r0, ip, lsl #5
   1613c:	andeq	r5, r0, r4, lsl #6

00016140 <flatcc_builder_check_required_field@@Base>:
   16140:	ldr	r2, [r0, #32]
   16144:	ldrh	r2, [r2, #14]
   16148:	cmp	r2, #3
   1614c:	bne	1617c <flatcc_builder_check_required_field@@Base+0x3c>
   16150:	ldrh	r3, [r0, #8]
   16154:	mov	r2, #0
   16158:	cmp	r3, r1
   1615c:	bls	16174 <flatcc_builder_check_required_field@@Base+0x34>
   16160:	ldr	r0, [r0, #4]
   16164:	add	r0, r0, r1, lsl #1
   16168:	ldrh	r2, [r0]
   1616c:	cmp	r2, #0
   16170:	movwne	r2, #1
   16174:	mov	r0, r2
   16178:	bx	lr
   1617c:	push	{fp, lr}
   16180:	mov	fp, sp
   16184:	ldr	r0, [pc, #24]	; 161a4 <flatcc_builder_check_required_field@@Base+0x64>
   16188:	ldr	r1, [pc, #24]	; 161a8 <flatcc_builder_check_required_field@@Base+0x68>
   1618c:	ldr	r3, [pc, #24]	; 161ac <flatcc_builder_check_required_field@@Base+0x6c>
   16190:	movw	r2, #1272	; 0x4f8
   16194:	add	r0, pc, r0
   16198:	add	r1, pc, r1
   1619c:	add	r3, pc, r3
   161a0:	bl	127a8 <__assert_fail@plt>
   161a4:	andeq	r4, r0, r4, asr #19
   161a8:	muleq	r0, r4, r1
   161ac:	andeq	r4, r0, r7, ror #19

000161b0 <flatcc_builder_check_union_field@@Base>:
   161b0:	mov	r2, r0
   161b4:	ldr	r0, [r0, #32]
   161b8:	ldrh	r0, [r0, #14]
   161bc:	cmp	r0, #3
   161c0:	bne	16220 <flatcc_builder_check_union_field@@Base+0x70>
   161c4:	cmp	r1, #0
   161c8:	mov	r0, #0
   161cc:	ldrhne	r3, [r2, #8]
   161d0:	cmpne	r3, r1
   161d4:	bhi	161dc <flatcc_builder_check_union_field@@Base+0x2c>
   161d8:	bx	lr
   161dc:	ldr	r0, [r2, #4]
   161e0:	add	r0, r0, r1, lsl #1
   161e4:	ldrh	r1, [r0, #-2]
   161e8:	cmp	r1, #0
   161ec:	beq	16210 <flatcc_builder_check_union_field@@Base+0x60>
   161f0:	ldr	r2, [r2, #16]
   161f4:	ldrh	r0, [r0]
   161f8:	ldrb	r1, [r2, r1]
   161fc:	cmp	r1, #0
   16200:	beq	16214 <flatcc_builder_check_union_field@@Base+0x64>
   16204:	cmp	r0, #0
   16208:	movwne	r0, #1
   1620c:	bx	lr
   16210:	ldrh	r0, [r0]
   16214:	clz	r0, r0
   16218:	lsr	r0, r0, #5
   1621c:	bx	lr
   16220:	push	{fp, lr}
   16224:	mov	fp, sp
   16228:	ldr	r0, [pc, #24]	; 16248 <flatcc_builder_check_union_field@@Base+0x98>
   1622c:	ldr	r1, [pc, #24]	; 1624c <flatcc_builder_check_union_field@@Base+0x9c>
   16230:	ldr	r3, [pc, #24]	; 16250 <flatcc_builder_check_union_field@@Base+0xa0>
   16234:	movw	r2, #1279	; 0x4ff
   16238:	add	r0, pc, r0
   1623c:	add	r1, pc, r1
   16240:	add	r3, pc, r3
   16244:	bl	127a8 <__assert_fail@plt>
   16248:	andeq	r4, r0, r0, lsr #18
   1624c:	strdeq	r4, [r0], -r0
   16250:	muleq	r0, r6, r9

00016254 <flatcc_builder_check_required@@Base>:
   16254:	push	{fp, lr}
   16258:	mov	fp, sp
   1625c:	mov	r3, r0
   16260:	ldr	r0, [r0, #32]
   16264:	ldrh	r0, [r0, #14]
   16268:	cmp	r0, #3
   1626c:	bne	162c4 <flatcc_builder_check_required@@Base+0x70>
   16270:	ldrh	ip, [r3, #8]
   16274:	mov	r0, #0
   16278:	cmp	ip, r2
   1627c:	movge	r0, #1
   16280:	cmpge	r2, #1
   16284:	bge	1628c <flatcc_builder_check_required@@Base+0x38>
   16288:	pop	{fp, pc}
   1628c:	ldr	ip, [r3, #4]
   16290:	mov	lr, #0
   16294:	b	162a8 <flatcc_builder_check_required@@Base+0x54>
   16298:	add	lr, lr, #1
   1629c:	add	r1, r1, #2
   162a0:	cmp	lr, r2
   162a4:	popge	{fp, pc}
   162a8:	ldrh	r3, [r1]
   162ac:	add	r3, ip, r3, lsl #1
   162b0:	ldrh	r3, [r3]
   162b4:	cmp	r3, #0
   162b8:	bne	16298 <flatcc_builder_check_required@@Base+0x44>
   162bc:	mov	r0, #0
   162c0:	pop	{fp, pc}
   162c4:	ldr	r0, [pc, #24]	; 162e4 <flatcc_builder_check_required@@Base+0x90>
   162c8:	ldr	r1, [pc, #24]	; 162e8 <flatcc_builder_check_required@@Base+0x94>
   162cc:	ldr	r3, [pc, #24]	; 162ec <flatcc_builder_check_required@@Base+0x98>
   162d0:	movw	r2, #1297	; 0x511
   162d4:	add	r0, pc, r0
   162d8:	add	r1, pc, r1
   162dc:	add	r3, pc, r3
   162e0:	bl	127a8 <__assert_fail@plt>
   162e4:	andeq	r4, r0, r4, lsl #17
   162e8:	andeq	r4, r0, r4, asr r0
   162ec:	andeq	r4, r0, sl, asr #18

000162f0 <flatcc_builder_end_table@@Base>:
   162f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   162f4:	add	fp, sp, #24
   162f8:	sub	sp, sp, #16
   162fc:	mov	r4, r0
   16300:	ldr	r0, [r0, #32]
   16304:	ldrh	r0, [r0, #14]
   16308:	cmp	r0, #3
   1630c:	bne	16488 <flatcc_builder_end_table@@Base+0x198>
   16310:	ldrh	r0, [r4, #8]
   16314:	ldr	r5, [r4, #4]
   16318:	mov	r1, #4
   1631c:	movw	r2, #31153	; 0x79b1
   16320:	movt	r2, #40503	; 0x9e37
   16324:	add	r0, r1, r0, lsl #1
   16328:	strh	r0, [r5, #-4]!
   1632c:	ldrh	r1, [r4, #20]
   16330:	uxth	r6, r0
   16334:	add	r1, r1, #4
   16338:	strh	r1, [r5, #2]
   1633c:	uxth	r1, r1
   16340:	ldr	r0, [r4, #12]
   16344:	eor	r0, r0, r6
   16348:	mul	r0, r0, r2
   1634c:	eor	r0, r0, r1
   16350:	mov	r1, r5
   16354:	mul	r3, r0, r2
   16358:	mov	r0, r4
   1635c:	mov	r2, r6
   16360:	str	r3, [r4, #12]
   16364:	bl	15bc8 <flatcc_builder_create_cached_vtable@@Base>
   16368:	cmp	r0, #0
   1636c:	beq	16478 <flatcc_builder_end_table@@Base+0x188>
   16370:	mov	r7, r0
   16374:	mov	r0, r5
   16378:	mov	r1, #0
   1637c:	mov	r2, r6
   16380:	mov	r8, #0
   16384:	bl	12778 <memset@plt>
   16388:	ldr	r5, [r4, #32]
   1638c:	ldr	r0, [r4, #76]	; 0x4c
   16390:	ldr	r6, [r4]
   16394:	ldrh	r3, [r4, #130]	; 0x82
   16398:	ldr	r1, [r4, #16]
   1639c:	ldr	r2, [r4, #20]
   163a0:	ldr	r5, [r5, #20]
   163a4:	add	r0, r0, r5
   163a8:	sub	r6, r6, r0
   163ac:	asr	r6, r6, #1
   163b0:	stm	sp, {r0, r6, r7}
   163b4:	mov	r0, r4
   163b8:	bl	15f44 <flatcc_builder_create_table@@Base>
   163bc:	cmp	r0, #0
   163c0:	beq	1647c <flatcc_builder_end_table@@Base+0x18c>
   163c4:	ldr	r1, [r4, #32]
   163c8:	mov	r5, r0
   163cc:	ldr	r0, [r4, #16]
   163d0:	ldr	r2, [r4, #20]
   163d4:	ldr	r3, [r4, #52]	; 0x34
   163d8:	ldr	r7, [r1, #24]
   163dc:	str	r7, [r4, #12]
   163e0:	ldrh	r7, [r1, #28]
   163e4:	strh	r7, [r4, #8]
   163e8:	ldr	r7, [r1, #16]
   163ec:	add	r3, r3, r7
   163f0:	str	r3, [r4, #4]
   163f4:	ldr	r3, [r4, #76]	; 0x4c
   163f8:	ldr	r1, [r1, #20]
   163fc:	add	r1, r3, r1
   16400:	str	r1, [r4]
   16404:	mov	r1, #0
   16408:	bl	12778 <memset@plt>
   1640c:	ldr	r0, [r4, #32]
   16410:	ldr	r1, [r4, #60]	; 0x3c
   16414:	ldr	r2, [r4, #64]	; 0x40
   16418:	mov	r8, r5
   1641c:	ldr	r3, [r0, #8]
   16420:	str	r3, [r4, #20]
   16424:	ldr	r3, [r0]
   16428:	str	r3, [r4, #28]
   1642c:	add	r1, r1, r3
   16430:	ldr	r7, [r0, #4]
   16434:	str	r1, [r4, #16]
   16438:	sub	r1, r2, r3
   1643c:	cmp	r1, r7
   16440:	movhi	r1, r7
   16444:	str	r1, [r4, #24]
   16448:	ldrh	r1, [r4, #130]	; 0x82
   1644c:	ldrh	r2, [r4, #128]	; 0x80
   16450:	cmp	r2, r1
   16454:	strhcc	r1, [r4, #128]	; 0x80
   16458:	ldrh	r1, [r0, #12]
   1645c:	sub	r0, r0, #36	; 0x24
   16460:	str	r0, [r4, #32]
   16464:	strh	r1, [r4, #130]	; 0x82
   16468:	ldr	r0, [r4, #156]	; 0x9c
   1646c:	sub	r0, r0, #1
   16470:	str	r0, [r4, #156]	; 0x9c
   16474:	b	1647c <flatcc_builder_end_table@@Base+0x18c>
   16478:	mov	r8, #0
   1647c:	mov	r0, r8
   16480:	sub	sp, fp, #24
   16484:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16488:	ldr	r0, [pc, #24]	; 164a8 <flatcc_builder_end_table@@Base+0x1b8>
   1648c:	ldr	r1, [pc, #24]	; 164ac <flatcc_builder_end_table@@Base+0x1bc>
   16490:	ldr	r3, [pc, #24]	; 164b0 <flatcc_builder_end_table@@Base+0x1c0>
   16494:	movw	r2, #1317	; 0x525
   16498:	add	r0, pc, r0
   1649c:	add	r1, pc, r1
   164a0:	add	r3, pc, r3
   164a4:	bl	127a8 <__assert_fail@plt>
   164a8:	andeq	r4, r0, r0, asr #13
   164ac:	muleq	r0, r0, lr
   164b0:	andeq	r4, r0, r0, ror #15

000164b4 <flatcc_builder_create_vector@@Base>:
   164b4:	push	{r4, r5, r6, r7, fp, lr}
   164b8:	add	fp, sp, #16
   164bc:	sub	sp, sp, #80	; 0x50
   164c0:	mov	r7, r0
   164c4:	ldr	r0, [fp, #12]
   164c8:	cmp	r2, r0
   164cc:	bhi	165cc <flatcc_builder_create_vector@@Base+0x118>
   164d0:	ldr	r0, [fp, #8]
   164d4:	mov	r4, r2
   164d8:	ldrh	r2, [r7, #128]	; 0x80
   164dc:	mov	r5, #4
   164e0:	cmp	r0, #4
   164e4:	movls	r0, r5
   164e8:	cmp	r2, r0
   164ec:	sub	r2, fp, #20
   164f0:	strhcc	r0, [r7, #128]	; 0x80
   164f4:	str	r4, [fp, #-20]	; 0xffffffec
   164f8:	sub	r0, r0, #1
   164fc:	ldr	ip, [r7, #136]	; 0x88
   16500:	str	r2, [sp, #12]
   16504:	mov	r2, #1
   16508:	str	r5, [sp, #4]
   1650c:	str	r5, [sp, #16]
   16510:	str	r2, [sp, #8]
   16514:	mls	r6, r3, r4, ip
   16518:	mul	r3, r3, r4
   1651c:	and	r0, r6, r0
   16520:	cmp	r3, #0
   16524:	beq	16540 <flatcc_builder_create_vector@@Base+0x8c>
   16528:	mov	r2, #2
   1652c:	add	r5, r3, #4
   16530:	str	r1, [sp, #20]
   16534:	str	r3, [sp, #24]
   16538:	str	r2, [sp, #8]
   1653c:	str	r5, [sp, #4]
   16540:	cmp	r0, #0
   16544:	beq	16570 <flatcc_builder_create_vector@@Base+0xbc>
   16548:	add	r5, r5, r0
   1654c:	add	r1, sp, #4
   16550:	str	r5, [sp, #4]
   16554:	add	r1, r1, r2, lsl #3
   16558:	add	r2, r2, #1
   1655c:	ldr	r3, [pc, #168]	; 1660c <flatcc_builder_create_vector@@Base+0x158>
   16560:	ldr	r3, [pc, r3]
   16564:	str	r3, [r1, #8]
   16568:	str	r0, [r1, #12]
   1656c:	str	r2, [sp, #8]
   16570:	cmp	r5, #0
   16574:	ble	165ec <flatcc_builder_create_vector@@Base+0x138>
   16578:	ldr	r0, [r7, #36]	; 0x24
   1657c:	ldr	r6, [r7, #44]	; 0x2c
   16580:	add	r1, sp, #4
   16584:	sub	r4, ip, r5
   16588:	str	r5, [sp]
   1658c:	add	r1, r1, #8
   16590:	mov	r3, r4
   16594:	blx	r6
   16598:	cmp	r0, #0
   1659c:	streq	r4, [r7, #136]	; 0x88
   165a0:	moveq	r0, r4
   165a4:	subeq	sp, fp, #16
   165a8:	popeq	{r4, r5, r6, r7, fp, pc}
   165ac:	ldr	r0, [pc, #116]	; 16628 <flatcc_builder_create_vector@@Base+0x174>
   165b0:	ldr	r1, [pc, #116]	; 1662c <flatcc_builder_create_vector@@Base+0x178>
   165b4:	ldr	r3, [pc, #116]	; 16630 <flatcc_builder_create_vector@@Base+0x17c>
   165b8:	movw	r2, #651	; 0x28b
   165bc:	add	r0, pc, r0
   165c0:	add	r1, pc, r1
   165c4:	add	r3, pc, r3
   165c8:	bl	127a8 <__assert_fail@plt>
   165cc:	ldr	r0, [pc, #60]	; 16610 <flatcc_builder_create_vector@@Base+0x15c>
   165d0:	ldr	r1, [pc, #60]	; 16614 <flatcc_builder_create_vector@@Base+0x160>
   165d4:	ldr	r3, [pc, #60]	; 16618 <flatcc_builder_create_vector@@Base+0x164>
   165d8:	movw	r2, #1365	; 0x555
   165dc:	add	r0, pc, r0
   165e0:	add	r1, pc, r1
   165e4:	add	r3, pc, r3
   165e8:	bl	127a8 <__assert_fail@plt>
   165ec:	ldr	r0, [pc, #40]	; 1661c <flatcc_builder_create_vector@@Base+0x168>
   165f0:	ldr	r1, [pc, #40]	; 16620 <flatcc_builder_create_vector@@Base+0x16c>
   165f4:	ldr	r3, [pc, #40]	; 16624 <flatcc_builder_create_vector@@Base+0x170>
   165f8:	movw	r2, #647	; 0x287
   165fc:	add	r0, pc, r0
   16600:	add	r1, pc, r1
   16604:	add	r3, pc, r3
   16608:	bl	127a8 <__assert_fail@plt>
   1660c:	ldrdeq	r5, [r1], -ip
   16610:	andeq	r4, r0, r6, ror #13
   16614:	andeq	r3, r0, ip, asr #26
   16618:	strdeq	r4, [r0], -r1
   1661c:	andeq	r4, r0, sp, ror #29
   16620:	andeq	r3, r0, ip, lsr #26
   16624:	andeq	r4, r0, r4, lsr #27
   16628:	andeq	r4, r0, sp, lsr #30
   1662c:	andeq	r3, r0, ip, ror #26
   16630:	andeq	r4, r0, r4, ror #27

00016634 <flatcc_builder_end_vector@@Base>:
   16634:	push	{r4, r5, fp, lr}
   16638:	add	fp, sp, #8
   1663c:	sub	sp, sp, #8
   16640:	mov	r4, r0
   16644:	ldr	r0, [r0, #32]
   16648:	ldrh	r1, [r0, #14]
   1664c:	cmp	r1, #4
   16650:	bne	16704 <flatcc_builder_end_vector@@Base+0xd0>
   16654:	ldr	r3, [r0, #16]
   16658:	ldr	r2, [r0, #20]
   1665c:	ldr	r0, [r0, #24]
   16660:	ldr	r1, [r4, #16]
   16664:	ldrh	r5, [r4, #130]	; 0x82
   16668:	str	r0, [sp, #4]
   1666c:	mov	r0, r4
   16670:	str	r5, [sp]
   16674:	bl	164b4 <flatcc_builder_create_vector@@Base>
   16678:	mov	r5, r0
   1667c:	cmp	r0, #0
   16680:	beq	166f8 <flatcc_builder_end_vector@@Base+0xc4>
   16684:	ldr	r0, [r4, #16]
   16688:	ldr	r2, [r4, #20]
   1668c:	mov	r1, #0
   16690:	bl	12778 <memset@plt>
   16694:	ldr	r0, [r4, #32]
   16698:	ldr	r1, [r4, #60]	; 0x3c
   1669c:	ldr	ip, [r4, #64]	; 0x40
   166a0:	ldr	r3, [r0, #8]
   166a4:	str	r3, [r4, #20]
   166a8:	ldr	r3, [r0]
   166ac:	str	r3, [r4, #28]
   166b0:	add	r1, r1, r3
   166b4:	ldr	r2, [r0, #4]
   166b8:	str	r1, [r4, #16]
   166bc:	sub	r1, ip, r3
   166c0:	cmp	r1, r2
   166c4:	movhi	r1, r2
   166c8:	str	r1, [r4, #24]
   166cc:	ldrh	r1, [r4, #130]	; 0x82
   166d0:	ldrh	r2, [r4, #128]	; 0x80
   166d4:	cmp	r2, r1
   166d8:	strhcc	r1, [r4, #128]	; 0x80
   166dc:	ldrh	r1, [r0, #12]
   166e0:	sub	r0, r0, #36	; 0x24
   166e4:	str	r0, [r4, #32]
   166e8:	strh	r1, [r4, #130]	; 0x82
   166ec:	ldr	r0, [r4, #156]	; 0x9c
   166f0:	sub	r0, r0, #1
   166f4:	str	r0, [r4, #156]	; 0x9c
   166f8:	mov	r0, r5
   166fc:	sub	sp, fp, #8
   16700:	pop	{r4, r5, fp, pc}
   16704:	ldr	r0, [pc, #24]	; 16724 <flatcc_builder_end_vector@@Base+0xf0>
   16708:	ldr	r1, [pc, #24]	; 16728 <flatcc_builder_end_vector@@Base+0xf4>
   1670c:	ldr	r3, [pc, #24]	; 1672c <flatcc_builder_end_vector@@Base+0xf8>
   16710:	movw	r2, #1400	; 0x578
   16714:	add	r0, pc, r0
   16718:	add	r1, pc, r1
   1671c:	add	r3, pc, r3
   16720:	bl	127a8 <__assert_fail@plt>
   16724:	andeq	r3, r0, r2, asr pc
   16728:	andeq	r3, r0, r4, lsl ip
   1672c:	andeq	r4, r0, pc, lsr #12

00016730 <flatcc_builder_vector_count@@Base>:
   16730:	ldr	r0, [r0, #32]
   16734:	ldr	r0, [r0, #20]
   16738:	bx	lr

0001673c <flatcc_builder_vector_edit@@Base>:
   1673c:	ldr	r0, [r0, #16]
   16740:	bx	lr

00016744 <flatcc_builder_create_offset_vector_direct@@Base>:
   16744:	mov	r3, #0
   16748:	b	1674c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1674c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16750:	add	fp, sp, #24
   16754:	sub	sp, sp, #80	; 0x50
   16758:	mov	r6, #0
   1675c:	cmn	r2, #-1073741823	; 0xc0000001
   16760:	bhi	1689c <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   16764:	mov	r8, r0
   16768:	ldrh	r0, [r0, #128]	; 0x80
   1676c:	sub	r7, fp, #28
   16770:	mov	r5, #4
   16774:	mov	r4, #1
   16778:	cmp	r0, #3
   1677c:	movls	r0, #4
   16780:	strhls	r0, [r8, #128]	; 0x80
   16784:	str	r2, [fp, #-28]	; 0xffffffe4
   16788:	ldr	ip, [r8, #136]	; 0x88
   1678c:	str	r7, [sp, #12]
   16790:	mov	r7, #0
   16794:	str	r5, [sp, #4]
   16798:	str	r5, [sp, #16]
   1679c:	str	r4, [sp, #8]
   167a0:	cmp	r7, r2, lsl #2
   167a4:	and	r6, ip, #3
   167a8:	beq	167c8 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   167ac:	lsl	r7, r2, #2
   167b0:	mov	r4, #2
   167b4:	str	r1, [sp, #20]
   167b8:	add	r5, r7, #4
   167bc:	str	r7, [sp, #24]
   167c0:	str	r4, [sp, #8]
   167c4:	str	r5, [sp, #4]
   167c8:	cmp	r6, #0
   167cc:	beq	167f8 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   167d0:	add	r5, r5, r6
   167d4:	add	r7, sp, #4
   167d8:	str	r5, [sp, #4]
   167dc:	add	r7, r7, r4, lsl #3
   167e0:	add	r4, r4, #1
   167e4:	ldr	r0, [pc, #348]	; 16948 <flatcc_builder_create_offset_vector_direct@@Base+0x204>
   167e8:	ldr	r0, [pc, r0]
   167ec:	str	r0, [r7, #8]
   167f0:	str	r6, [r7, #12]
   167f4:	str	r4, [sp, #8]
   167f8:	cmp	r2, #0
   167fc:	beq	16864 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   16800:	mvn	r0, #3
   16804:	mov	r6, #0
   16808:	sub	r0, r0, ip
   1680c:	add	r0, r0, r5
   16810:	ldr	r7, [r1, r6, lsl #2]
   16814:	cmp	r7, #0
   16818:	beq	1683c <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   1681c:	add	r7, r0, r7
   16820:	cmp	r3, #0
   16824:	str	r7, [r1, r6, lsl #2]
   16828:	beq	16850 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   1682c:	ldrb	r7, [r3, r6]
   16830:	cmp	r7, #0
   16834:	bne	16850 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16838:	b	168a8 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   1683c:	cmp	r3, #0
   16840:	beq	168e8 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   16844:	ldrb	r7, [r3, r6]
   16848:	cmp	r7, #0
   1684c:	bne	168c8 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   16850:	add	r6, r6, #1
   16854:	sub	r0, r0, #4
   16858:	cmp	r6, r2
   1685c:	bcc	16810 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   16860:	ldr	ip, [r8, #136]	; 0x88
   16864:	cmp	r5, #0
   16868:	ble	16908 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   1686c:	ldr	r0, [r8, #36]	; 0x24
   16870:	ldr	r7, [r8, #44]	; 0x2c
   16874:	add	r1, sp, #4
   16878:	sub	r6, ip, r5
   1687c:	mov	r2, r4
   16880:	str	r5, [sp]
   16884:	add	r1, r1, #8
   16888:	mov	r3, r6
   1688c:	blx	r7
   16890:	cmp	r0, #0
   16894:	bne	16928 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   16898:	str	r6, [r8, #136]	; 0x88
   1689c:	mov	r0, r6
   168a0:	sub	sp, fp, #24
   168a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168a8:	ldr	r0, [pc, #156]	; 1694c <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   168ac:	ldr	r1, [pc, #156]	; 16950 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   168b0:	ldr	r3, [pc, #156]	; 16954 <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   168b4:	movw	r2, #1457	; 0x5b1
   168b8:	add	r0, pc, r0
   168bc:	add	r1, pc, r1
   168c0:	add	r3, pc, r3
   168c4:	bl	127a8 <__assert_fail@plt>
   168c8:	ldr	r0, [pc, #136]	; 16958 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   168cc:	ldr	r1, [pc, #136]	; 1695c <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   168d0:	ldr	r3, [pc, #136]	; 16960 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   168d4:	movw	r2, #1461	; 0x5b5
   168d8:	add	r0, pc, r0
   168dc:	add	r1, pc, r1
   168e0:	add	r3, pc, r3
   168e4:	bl	127a8 <__assert_fail@plt>
   168e8:	ldr	r0, [pc, #116]	; 16964 <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   168ec:	ldr	r1, [pc, #116]	; 16968 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   168f0:	ldr	r3, [pc, #116]	; 1696c <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   168f4:	movw	r2, #1463	; 0x5b7
   168f8:	add	r0, pc, r0
   168fc:	add	r1, pc, r1
   16900:	add	r3, pc, r3
   16904:	bl	127a8 <__assert_fail@plt>
   16908:	ldr	r0, [pc, #96]	; 16970 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   1690c:	ldr	r1, [pc, #96]	; 16974 <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16910:	ldr	r3, [pc, #96]	; 16978 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   16914:	movw	r2, #647	; 0x287
   16918:	add	r0, pc, r0
   1691c:	add	r1, pc, r1
   16920:	add	r3, pc, r3
   16924:	bl	127a8 <__assert_fail@plt>
   16928:	ldr	r0, [pc, #76]	; 1697c <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   1692c:	ldr	r1, [pc, #76]	; 16980 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16930:	ldr	r3, [pc, #76]	; 16984 <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   16934:	movw	r2, #651	; 0x28b
   16938:	add	r0, pc, r0
   1693c:	add	r1, pc, r1
   16940:	add	r3, pc, r3
   16944:	bl	127a8 <__assert_fail@plt>
   16948:	andeq	r5, r1, r4, asr r8
   1694c:	andeq	r4, r0, r5, lsr #24
   16950:	andeq	r3, r0, r0, ror sl
   16954:	andeq	r4, r0, fp, lsr #24
   16958:	muleq	r0, r6, ip
   1695c:	andeq	r3, r0, r0, asr sl
   16960:	andeq	r4, r0, fp, lsl #24
   16964:	strdeq	r4, [r0], -r1
   16968:	andeq	r3, r0, r0, lsr sl
   1696c:	andeq	r4, r0, fp, ror #23
   16970:	ldrdeq	r4, [r0], -r1
   16974:	andeq	r3, r0, r0, lsl sl
   16978:	andeq	r4, r0, r8, lsl #21
   1697c:			; <UNDEFINED> instruction: 0x00004bb1
   16980:	strdeq	r3, [r0], -r0
   16984:	andeq	r4, r0, r8, ror #20

00016988 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16988:	push	{r4, r5, fp, lr}
   1698c:	add	fp, sp, #8
   16990:	mov	r4, r0
   16994:	ldr	r0, [r0, #32]
   16998:	mov	r3, r1
   1699c:	ldrh	r1, [r0, #14]
   169a0:	cmp	r1, #5
   169a4:	bne	16a40 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   169a8:	ldr	r2, [r0, #20]
   169ac:	ldr	r1, [r4, #16]
   169b0:	mov	r0, r4
   169b4:	bl	1674c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   169b8:	mov	r5, r0
   169bc:	cmp	r0, #0
   169c0:	beq	16a38 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   169c4:	ldr	r0, [r4, #16]
   169c8:	ldr	r2, [r4, #20]
   169cc:	mov	r1, #0
   169d0:	bl	12778 <memset@plt>
   169d4:	ldr	r0, [r4, #32]
   169d8:	ldr	r1, [r4, #60]	; 0x3c
   169dc:	ldr	ip, [r4, #64]	; 0x40
   169e0:	ldr	r3, [r0, #8]
   169e4:	str	r3, [r4, #20]
   169e8:	ldr	r3, [r0]
   169ec:	str	r3, [r4, #28]
   169f0:	add	r1, r1, r3
   169f4:	ldr	r2, [r0, #4]
   169f8:	str	r1, [r4, #16]
   169fc:	sub	r1, ip, r3
   16a00:	cmp	r1, r2
   16a04:	movhi	r1, r2
   16a08:	str	r1, [r4, #24]
   16a0c:	ldrh	r1, [r4, #130]	; 0x82
   16a10:	ldrh	r2, [r4, #128]	; 0x80
   16a14:	cmp	r2, r1
   16a18:	strhcc	r1, [r4, #128]	; 0x80
   16a1c:	ldrh	r1, [r0, #12]
   16a20:	sub	r0, r0, #36	; 0x24
   16a24:	str	r0, [r4, #32]
   16a28:	strh	r1, [r4, #130]	; 0x82
   16a2c:	ldr	r0, [r4, #156]	; 0x9c
   16a30:	sub	r0, r0, #1
   16a34:	str	r0, [r4, #156]	; 0x9c
   16a38:	mov	r0, r5
   16a3c:	pop	{r4, r5, fp, pc}
   16a40:	ldr	r0, [pc, #24]	; 16a60 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16a44:	ldr	r1, [pc, #24]	; 16a64 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16a48:	ldr	r3, [pc, #24]	; 16a68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16a4c:	movw	r2, #1493	; 0x5d5
   16a50:	add	r0, pc, r0
   16a54:	add	r1, pc, r1
   16a58:	add	r3, pc, r3
   16a5c:	bl	127a8 <__assert_fail@plt>
   16a60:	andeq	r3, r0, pc, lsl #26
   16a64:	ldrdeq	r3, [r0], -r8
   16a68:	andeq	r4, r0, r0, lsl #7

00016a6c <flatcc_builder_offset_vector_edit@@Base>:
   16a6c:	ldr	r0, [r0, #16]
   16a70:	bx	lr

00016a74 <flatcc_builder_offset_vector_count@@Base>:
   16a74:	ldr	r0, [r0, #32]
   16a78:	ldr	r0, [r0, #20]
   16a7c:	bx	lr

00016a80 <flatcc_builder_table_add_union@@Base>:
   16a80:	push	{r4, r5, r6, r7, fp, lr}
   16a84:	add	fp, sp, #16
   16a88:	mov	r5, r0
   16a8c:	ldr	r0, [r0, #32]
   16a90:	ldrh	r0, [r0, #14]
   16a94:	cmp	r0, #3
   16a98:	bne	16b20 <flatcc_builder_table_add_union@@Base+0xa0>
   16a9c:	mov	r7, r3
   16aa0:	mov	r4, r2
   16aa4:	mov	r6, r1
   16aa8:	cmp	r3, #0
   16aac:	beq	16abc <flatcc_builder_table_add_union@@Base+0x3c>
   16ab0:	uxtb	r0, r4
   16ab4:	cmp	r0, #0
   16ab8:	beq	16b40 <flatcc_builder_table_add_union@@Base+0xc0>
   16abc:	cmp	r7, #0
   16ac0:	beq	16adc <flatcc_builder_table_add_union@@Base+0x5c>
   16ac4:	mov	r0, r5
   16ac8:	mov	r1, r6
   16acc:	bl	16bb0 <flatcc_builder_table_add_offset@@Base>
   16ad0:	cmp	r0, #0
   16ad4:	beq	16b60 <flatcc_builder_table_add_union@@Base+0xe0>
   16ad8:	str	r7, [r0]
   16adc:	sub	r1, r6, #1
   16ae0:	mov	r0, r5
   16ae4:	mov	r2, #1
   16ae8:	mov	r3, #1
   16aec:	bl	16d64 <flatcc_builder_table_add@@Base>
   16af0:	cmp	r0, #0
   16af4:	strbne	r4, [r0]
   16af8:	movne	r0, #0
   16afc:	popne	{r4, r5, r6, r7, fp, pc}
   16b00:	ldr	r0, [pc, #156]	; 16ba4 <flatcc_builder_table_add_union@@Base+0x124>
   16b04:	ldr	r1, [pc, #156]	; 16ba8 <flatcc_builder_table_add_union@@Base+0x128>
   16b08:	ldr	r3, [pc, #156]	; 16bac <flatcc_builder_table_add_union@@Base+0x12c>
   16b0c:	movw	r2, #1526	; 0x5f6
   16b10:	add	r0, pc, r0
   16b14:	add	r1, pc, r1
   16b18:	add	r3, pc, r3
   16b1c:	bl	127a8 <__assert_fail@plt>
   16b20:	ldr	r0, [pc, #88]	; 16b80 <flatcc_builder_table_add_union@@Base+0x100>
   16b24:	ldr	r1, [pc, #88]	; 16b84 <flatcc_builder_table_add_union@@Base+0x104>
   16b28:	ldr	r3, [pc, #88]	; 16b88 <flatcc_builder_table_add_union@@Base+0x108>
   16b2c:	movw	r2, #1518	; 0x5ee
   16b30:	add	r0, pc, r0
   16b34:	add	r1, pc, r1
   16b38:	add	r3, pc, r3
   16b3c:	bl	127a8 <__assert_fail@plt>
   16b40:	ldr	r0, [pc, #68]	; 16b8c <flatcc_builder_table_add_union@@Base+0x10c>
   16b44:	ldr	r1, [pc, #68]	; 16b90 <flatcc_builder_table_add_union@@Base+0x110>
   16b48:	ldr	r3, [pc, #68]	; 16b94 <flatcc_builder_table_add_union@@Base+0x114>
   16b4c:	movw	r2, #1519	; 0x5ef
   16b50:	add	r0, pc, r0
   16b54:	add	r1, pc, r1
   16b58:	add	r3, pc, r3
   16b5c:	bl	127a8 <__assert_fail@plt>
   16b60:	ldr	r0, [pc, #48]	; 16b98 <flatcc_builder_table_add_union@@Base+0x118>
   16b64:	ldr	r1, [pc, #48]	; 16b9c <flatcc_builder_table_add_union@@Base+0x11c>
   16b68:	ldr	r3, [pc, #48]	; 16ba0 <flatcc_builder_table_add_union@@Base+0x120>
   16b6c:	movw	r2, #1522	; 0x5f2
   16b70:	add	r0, pc, r0
   16b74:	add	r1, pc, r1
   16b78:	add	r3, pc, r3
   16b7c:	bl	127a8 <__assert_fail@plt>
   16b80:	andeq	r4, r0, r8, lsr #32
   16b84:	strdeq	r3, [r0], -r8
   16b88:	andeq	r4, r0, r2, lsl r3
   16b8c:	andeq	r4, r0, r2, asr r3
   16b90:	ldrdeq	r3, [r0], -r8
   16b94:	strdeq	r4, [r0], -r2
   16b98:	andeq	r4, r0, r4, asr r3
   16b9c:			; <UNDEFINED> instruction: 0x000037b8
   16ba0:	ldrdeq	r4, [r0], -r2
   16ba4:			; <UNDEFINED> instruction: 0x000043be
   16ba8:	andeq	r3, r0, r8, lsl r8
   16bac:	andeq	r4, r0, r2, lsr r3

00016bb0 <flatcc_builder_table_add_offset@@Base>:
   16bb0:	push	{r4, r5, r6, r7, fp, lr}
   16bb4:	add	fp, sp, #16
   16bb8:	sub	sp, sp, #8
   16bbc:	mov	r4, r0
   16bc0:	ldr	r0, [r0, #32]
   16bc4:	ldrh	r0, [r0, #14]
   16bc8:	cmp	r0, #3
   16bcc:	bne	16ce0 <flatcc_builder_table_add_offset@@Base+0x130>
   16bd0:	movw	r0, #32765	; 0x7ffd
   16bd4:	mov	r5, r1
   16bd8:	cmp	r1, r0
   16bdc:	bcs	16d00 <flatcc_builder_table_add_offset@@Base+0x150>
   16be0:	ldr	r0, [r4, #4]
   16be4:	add	r1, r0, r5, lsl #1
   16be8:	ldrh	r1, [r1]
   16bec:	cmp	r1, #0
   16bf0:	bne	16d20 <flatcc_builder_table_add_offset@@Base+0x170>
   16bf4:	ldr	r2, [r4, #20]
   16bf8:	ldr	r1, [r4, #12]
   16bfc:	ldr	r3, [r4, #24]
   16c00:	add	r2, r2, #3
   16c04:	eor	r1, r1, r5
   16c08:	bic	r6, r2, #3
   16c0c:	movw	r2, #31153	; 0x79b1
   16c10:	movt	r2, #40503	; 0x9e37
   16c14:	add	r7, r6, #4
   16c18:	mul	r1, r1, r2
   16c1c:	cmp	r7, r3
   16c20:	str	r7, [r4, #20]
   16c24:	eor	r1, r1, #4
   16c28:	mul	r1, r1, r2
   16c2c:	str	r1, [r4, #12]
   16c30:	bls	16ca4 <flatcc_builder_table_add_offset@@Base+0xf4>
   16c34:	ldr	r1, [r4, #28]
   16c38:	ldr	r0, [r4, #40]	; 0x28
   16c3c:	ldr	ip, [r4, #48]	; 0x30
   16c40:	mov	r2, #1
   16c44:	mov	r3, #1
   16c48:	str	r2, [sp]
   16c4c:	add	r2, r1, r7
   16c50:	add	r1, r4, #60	; 0x3c
   16c54:	blx	ip
   16c58:	mov	r1, r0
   16c5c:	mov	r0, #0
   16c60:	cmp	r1, #0
   16c64:	beq	16c70 <flatcc_builder_table_add_offset@@Base+0xc0>
   16c68:	sub	sp, fp, #16
   16c6c:	pop	{r4, r5, r6, r7, fp, pc}
   16c70:	ldr	r0, [r4, #28]
   16c74:	ldr	r2, [r4, #60]	; 0x3c
   16c78:	ldr	r3, [r4, #64]	; 0x40
   16c7c:	ldr	r1, [r4, #32]
   16c80:	add	r2, r2, r0
   16c84:	sub	r0, r3, r0
   16c88:	str	r2, [r4, #16]
   16c8c:	movw	r2, #65532	; 0xfffc
   16c90:	cmp	r0, r2
   16c94:	movcs	r0, r2
   16c98:	str	r0, [r4, #24]
   16c9c:	str	r2, [r1, #4]
   16ca0:	ldr	r0, [r4, #4]
   16ca4:	uxth	r1, r5
   16ca8:	add	r0, r0, r1, lsl #1
   16cac:	strh	r7, [r0]
   16cb0:	ldrh	r0, [r4, #8]
   16cb4:	cmp	r0, r1
   16cb8:	addls	r0, r5, #1
   16cbc:	strhls	r0, [r4, #8]
   16cc0:	ldr	r0, [r4]
   16cc4:	add	r1, r0, #2
   16cc8:	str	r1, [r4]
   16ccc:	strh	r6, [r0]
   16cd0:	ldr	r0, [r4, #16]
   16cd4:	add	r0, r0, r6
   16cd8:	sub	sp, fp, #16
   16cdc:	pop	{r4, r5, r6, r7, fp, pc}
   16ce0:	ldr	r0, [pc, #88]	; 16d40 <flatcc_builder_table_add_offset@@Base+0x190>
   16ce4:	ldr	r1, [pc, #88]	; 16d44 <flatcc_builder_table_add_offset@@Base+0x194>
   16ce8:	ldr	r3, [pc, #88]	; 16d48 <flatcc_builder_table_add_offset@@Base+0x198>
   16cec:	movw	r2, #1811	; 0x713
   16cf0:	add	r0, pc, r0
   16cf4:	add	r1, pc, r1
   16cf8:	add	r3, pc, r3
   16cfc:	bl	127a8 <__assert_fail@plt>
   16d00:	ldr	r0, [pc, #68]	; 16d4c <flatcc_builder_table_add_offset@@Base+0x19c>
   16d04:	ldr	r1, [pc, #68]	; 16d50 <flatcc_builder_table_add_offset@@Base+0x1a0>
   16d08:	ldr	r3, [pc, #68]	; 16d54 <flatcc_builder_table_add_offset@@Base+0x1a4>
   16d0c:	movw	r2, #1812	; 0x714
   16d10:	add	r0, pc, r0
   16d14:	add	r1, pc, r1
   16d18:	add	r3, pc, r3
   16d1c:	bl	127a8 <__assert_fail@plt>
   16d20:	ldr	r0, [pc, #48]	; 16d58 <flatcc_builder_table_add_offset@@Base+0x1a8>
   16d24:	ldr	r1, [pc, #48]	; 16d5c <flatcc_builder_table_add_offset@@Base+0x1ac>
   16d28:	ldr	r3, [pc, #48]	; 16d60 <flatcc_builder_table_add_offset@@Base+0x1b0>
   16d2c:	movw	r2, #1819	; 0x71b
   16d30:	add	r0, pc, r0
   16d34:	add	r1, pc, r1
   16d38:	add	r3, pc, r3
   16d3c:	bl	127a8 <__assert_fail@plt>
   16d40:	andeq	r3, r0, r8, ror #28
   16d44:	andeq	r3, r0, r8, lsr r6
   16d48:	andeq	r4, r0, r4, asr r5
   16d4c:			; <UNDEFINED> instruction: 0x000044bc
   16d50:	andeq	r3, r0, r8, lsl r6
   16d54:	andeq	r4, r0, r4, lsr r5
   16d58:			; <UNDEFINED> instruction: 0x000047b9
   16d5c:	strdeq	r3, [r0], -r8
   16d60:	andeq	r4, r0, r4, lsl r5

00016d64 <flatcc_builder_table_add@@Base>:
   16d64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d68:	add	fp, sp, #24
   16d6c:	sub	sp, sp, #8
   16d70:	mov	r4, r0
   16d74:	ldr	r0, [r0, #32]
   16d78:	ldrh	r0, [r0, #14]
   16d7c:	cmp	r0, #3
   16d80:	bne	16ea0 <flatcc_builder_table_add@@Base+0x13c>
   16d84:	movw	r0, #32765	; 0x7ffd
   16d88:	mov	r8, r1
   16d8c:	cmp	r1, r0
   16d90:	bcs	16ec0 <flatcc_builder_table_add@@Base+0x15c>
   16d94:	ldrh	r0, [r4, #130]	; 0x82
   16d98:	cmp	r0, r3
   16d9c:	strhcc	r3, [r4, #130]	; 0x82
   16da0:	ldr	r0, [r4, #4]
   16da4:	add	r1, r0, r8, lsl #1
   16da8:	ldrh	r1, [r1]
   16dac:	cmp	r1, #0
   16db0:	bne	16ee0 <flatcc_builder_table_add@@Base+0x17c>
   16db4:	ldr	r1, [r4, #12]
   16db8:	movw	r7, #31153	; 0x79b1
   16dbc:	ldr	r6, [r4, #20]
   16dc0:	ldr	r5, [r4, #24]
   16dc4:	movt	r7, #40503	; 0x9e37
   16dc8:	eor	r1, r1, r8
   16dcc:	mul	r1, r1, r7
   16dd0:	eor	r1, r1, r2
   16dd4:	mul	r1, r1, r7
   16dd8:	str	r1, [r4, #12]
   16ddc:	add	r1, r3, r6
   16de0:	rsb	r3, r3, #0
   16de4:	sub	r1, r1, #1
   16de8:	and	r6, r1, r3
   16dec:	add	r1, r6, r2
   16df0:	cmp	r1, r5
   16df4:	str	r1, [r4, #20]
   16df8:	bcc	16e70 <flatcc_builder_table_add@@Base+0x10c>
   16dfc:	ldr	r2, [r4, #28]
   16e00:	ldr	r0, [r4, #40]	; 0x28
   16e04:	ldr	r7, [r4, #48]	; 0x30
   16e08:	mov	r3, #1
   16e0c:	str	r3, [sp]
   16e10:	mov	r3, #1
   16e14:	add	r1, r1, r2
   16e18:	add	r2, r1, #1
   16e1c:	add	r1, r4, #60	; 0x3c
   16e20:	blx	r7
   16e24:	mov	r1, r0
   16e28:	mov	r0, #0
   16e2c:	cmp	r1, #0
   16e30:	beq	16e3c <flatcc_builder_table_add@@Base+0xd8>
   16e34:	sub	sp, fp, #24
   16e38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e3c:	ldr	r0, [r4, #28]
   16e40:	ldr	r2, [r4, #60]	; 0x3c
   16e44:	ldr	r3, [r4, #64]	; 0x40
   16e48:	ldr	r1, [r4, #32]
   16e4c:	add	r2, r2, r0
   16e50:	sub	r0, r3, r0
   16e54:	str	r2, [r4, #16]
   16e58:	movw	r2, #65532	; 0xfffc
   16e5c:	cmp	r0, r2
   16e60:	movcs	r0, r2
   16e64:	str	r0, [r4, #24]
   16e68:	str	r2, [r1, #4]
   16e6c:	ldr	r0, [r4, #4]
   16e70:	uxth	r1, r8
   16e74:	add	r2, r6, #4
   16e78:	add	r0, r0, r1, lsl #1
   16e7c:	strh	r2, [r0]
   16e80:	ldrh	r0, [r4, #8]
   16e84:	cmp	r0, r1
   16e88:	addls	r0, r8, #1
   16e8c:	strhls	r0, [r4, #8]
   16e90:	ldr	r0, [r4, #16]
   16e94:	add	r0, r0, r6
   16e98:	sub	sp, fp, #24
   16e9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ea0:	ldr	r0, [pc, #88]	; 16f00 <flatcc_builder_table_add@@Base+0x19c>
   16ea4:	ldr	r1, [pc, #88]	; 16f04 <flatcc_builder_table_add@@Base+0x1a0>
   16ea8:	ldr	r3, [pc, #88]	; 16f08 <flatcc_builder_table_add@@Base+0x1a4>
   16eac:	movw	r2, #1773	; 0x6ed
   16eb0:	add	r0, pc, r0
   16eb4:	add	r1, pc, r1
   16eb8:	add	r3, pc, r3
   16ebc:	bl	127a8 <__assert_fail@plt>
   16ec0:	ldr	r0, [pc, #68]	; 16f0c <flatcc_builder_table_add@@Base+0x1a8>
   16ec4:	ldr	r1, [pc, #68]	; 16f10 <flatcc_builder_table_add@@Base+0x1ac>
   16ec8:	ldr	r3, [pc, #68]	; 16f14 <flatcc_builder_table_add@@Base+0x1b0>
   16ecc:	movw	r2, #1774	; 0x6ee
   16ed0:	add	r0, pc, r0
   16ed4:	add	r1, pc, r1
   16ed8:	add	r3, pc, r3
   16edc:	bl	127a8 <__assert_fail@plt>
   16ee0:	ldr	r0, [pc, #48]	; 16f18 <flatcc_builder_table_add@@Base+0x1b4>
   16ee4:	ldr	r1, [pc, #48]	; 16f1c <flatcc_builder_table_add@@Base+0x1b8>
   16ee8:	ldr	r3, [pc, #48]	; 16f20 <flatcc_builder_table_add@@Base+0x1bc>
   16eec:	movw	r2, #1784	; 0x6f8
   16ef0:	add	r0, pc, r0
   16ef4:	add	r1, pc, r1
   16ef8:	add	r3, pc, r3
   16efc:	bl	127a8 <__assert_fail@plt>
   16f00:	andeq	r3, r0, r8, lsr #25
   16f04:	andeq	r3, r0, r8, ror r4
   16f08:	andeq	r4, r0, sl, asr #5
   16f0c:	strdeq	r4, [r0], -ip
   16f10:	andeq	r3, r0, r8, asr r4
   16f14:	andeq	r4, r0, sl, lsr #5
   16f18:	strdeq	r4, [r0], -r9
   16f1c:	andeq	r3, r0, r8, lsr r4
   16f20:	andeq	r4, r0, sl, lsl #5

00016f24 <flatcc_builder_table_add_union_vector@@Base>:
   16f24:	push	{r4, r5, r6, r7, fp, lr}
   16f28:	add	fp, sp, #16
   16f2c:	mov	r6, r0
   16f30:	ldr	r0, [r0, #32]
   16f34:	ldrh	r0, [r0, #14]
   16f38:	cmp	r0, #3
   16f3c:	bne	16fa4 <flatcc_builder_table_add_union_vector@@Base+0x80>
   16f40:	clz	r0, r3
   16f44:	mov	r5, r1
   16f48:	clz	r1, r2
   16f4c:	mov	r4, r3
   16f50:	mov	r7, r2
   16f54:	lsr	r0, r0, #5
   16f58:	lsr	r1, r1, #5
   16f5c:	cmp	r1, r0
   16f60:	bne	16fc4 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16f64:	cmp	r7, #0
   16f68:	beq	16f9c <flatcc_builder_table_add_union_vector@@Base+0x78>
   16f6c:	sub	r1, r5, #1
   16f70:	mov	r0, r6
   16f74:	bl	16bb0 <flatcc_builder_table_add_offset@@Base>
   16f78:	cmp	r0, #0
   16f7c:	beq	16fe4 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16f80:	str	r7, [r0]
   16f84:	mov	r0, r6
   16f88:	mov	r1, r5
   16f8c:	bl	16bb0 <flatcc_builder_table_add_offset@@Base>
   16f90:	cmp	r0, #0
   16f94:	beq	17004 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16f98:	str	r4, [r0]
   16f9c:	mov	r0, #0
   16fa0:	pop	{r4, r5, r6, r7, fp, pc}
   16fa4:	ldr	r0, [pc, #120]	; 17024 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16fa8:	ldr	r1, [pc, #120]	; 17028 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16fac:	ldr	r3, [pc, #120]	; 1702c <flatcc_builder_table_add_union_vector@@Base+0x108>
   16fb0:	mov	r2, #1536	; 0x600
   16fb4:	add	r0, pc, r0
   16fb8:	add	r1, pc, r1
   16fbc:	add	r3, pc, r3
   16fc0:	bl	127a8 <__assert_fail@plt>
   16fc4:	ldr	r0, [pc, #100]	; 17030 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16fc8:	ldr	r1, [pc, #100]	; 17034 <flatcc_builder_table_add_union_vector@@Base+0x110>
   16fcc:	ldr	r3, [pc, #100]	; 17038 <flatcc_builder_table_add_union_vector@@Base+0x114>
   16fd0:	movw	r2, #1537	; 0x601
   16fd4:	add	r0, pc, r0
   16fd8:	add	r1, pc, r1
   16fdc:	add	r3, pc, r3
   16fe0:	bl	127a8 <__assert_fail@plt>
   16fe4:	ldr	r0, [pc, #80]	; 1703c <flatcc_builder_table_add_union_vector@@Base+0x118>
   16fe8:	ldr	r1, [pc, #80]	; 17040 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   16fec:	ldr	r3, [pc, #80]	; 17044 <flatcc_builder_table_add_union_vector@@Base+0x120>
   16ff0:	movw	r2, #1540	; 0x604
   16ff4:	add	r0, pc, r0
   16ff8:	add	r1, pc, r1
   16ffc:	add	r3, pc, r3
   17000:	bl	127a8 <__assert_fail@plt>
   17004:	ldr	r0, [pc, #60]	; 17048 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17008:	ldr	r1, [pc, #60]	; 1704c <flatcc_builder_table_add_union_vector@@Base+0x128>
   1700c:	ldr	r3, [pc, #60]	; 17050 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   17010:	movw	r2, #1544	; 0x608
   17014:	add	r0, pc, r0
   17018:	add	r1, pc, r1
   1701c:	add	r3, pc, r3
   17020:	bl	127a8 <__assert_fail@plt>
   17024:	andeq	r3, r0, r4, lsr #23
   17028:	andeq	r3, r0, r4, ror r3
   1702c:	andeq	r3, r0, lr, lsl pc
   17030:	andeq	r3, r0, r9, ror #30
   17034:	andeq	r3, r0, r4, asr r3
   17038:	strdeq	r3, [r0], -lr
   1703c:	ldrdeq	r3, [r0], -r0
   17040:	andeq	r3, r0, r4, lsr r3
   17044:	ldrdeq	r3, [r0], -lr
   17048:			; <UNDEFINED> instruction: 0x00003eb0
   1704c:	andeq	r3, r0, r4, lsl r3
   17050:			; <UNDEFINED> instruction: 0x00003ebe

00017054 <flatcc_builder_create_union_vector@@Base>:
   17054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17058:	add	fp, sp, #28
   1705c:	sub	sp, sp, #12
   17060:	mov	r7, #0
   17064:	mov	r4, r1
   17068:	mov	r5, r0
   1706c:	mov	sl, r3
   17070:	mov	r9, r2
   17074:	mov	r6, #4
   17078:	str	r7, [r0]
   1707c:	str	r7, [r0, #4]
   17080:	mov	r0, r1
   17084:	mov	r1, #4
   17088:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   1708c:	cmp	r0, #0
   17090:	beq	1709c <flatcc_builder_create_union_vector@@Base+0x48>
   17094:	sub	sp, fp, #28
   17098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1709c:	ldr	r0, [r4, #32]
   170a0:	mov	r1, #5
   170a4:	str	r6, [r0, #16]
   170a8:	ldr	r0, [r4, #32]
   170ac:	str	r7, [r0, #20]
   170b0:	ldr	r0, [r4, #32]
   170b4:	strh	r1, [r0, #14]
   170b8:	ldr	r1, [r4, #28]
   170bc:	ldr	r2, [r4, #60]	; 0x3c
   170c0:	ldr	r3, [r4, #64]	; 0x40
   170c4:	add	r2, r2, r1
   170c8:	sub	r1, r3, r1
   170cc:	str	r2, [r4, #16]
   170d0:	mvn	r2, #3
   170d4:	cmn	r1, #4
   170d8:	movcs	r1, r2
   170dc:	str	r1, [r4, #24]
   170e0:	str	r2, [r0, #4]
   170e4:	ldr	r1, [r0, #20]
   170e8:	adds	r1, r1, sl
   170ec:	cmpcc	r1, #1073741824	; 0x40000000
   170f0:	bcc	17114 <flatcc_builder_create_union_vector@@Base+0xc0>
   170f4:	ldr	r0, [pc, #556]	; 17328 <flatcc_builder_create_union_vector@@Base+0x2d4>
   170f8:	ldr	r1, [pc, #556]	; 1732c <flatcc_builder_create_union_vector@@Base+0x2d8>
   170fc:	ldr	r3, [pc, #556]	; 17330 <flatcc_builder_create_union_vector@@Base+0x2dc>
   17100:	mov	r2, #892	; 0x37c
   17104:	add	r0, pc, r0
   17108:	add	r1, pc, r1
   1710c:	add	r3, pc, r3
   17110:	bl	127a8 <__assert_fail@plt>
   17114:	str	r1, [r0, #20]
   17118:	ldr	r7, [r4, #20]
   1711c:	ldr	r0, [r4, #24]
   17120:	add	r1, r7, sl, lsl #2
   17124:	cmp	r1, r0
   17128:	str	r1, [r4, #20]
   1712c:	bcs	17140 <flatcc_builder_create_union_vector@@Base+0xec>
   17130:	ldr	r1, [r4, #16]
   17134:	adds	r2, r1, r7
   17138:	bne	171a8 <flatcc_builder_create_union_vector@@Base+0x154>
   1713c:	b	17094 <flatcc_builder_create_union_vector@@Base+0x40>
   17140:	ldr	r2, [r4, #28]
   17144:	ldr	r0, [r4, #40]	; 0x28
   17148:	ldr	r6, [r4, #48]	; 0x30
   1714c:	mov	r3, #1
   17150:	str	r3, [sp]
   17154:	mov	r3, #1
   17158:	add	r1, r1, r2
   1715c:	add	r2, r1, #1
   17160:	add	r1, r4, #60	; 0x3c
   17164:	blx	r6
   17168:	cmp	r0, #0
   1716c:	bne	17094 <flatcc_builder_create_union_vector@@Base+0x40>
   17170:	ldr	r0, [r4, #28]
   17174:	ldr	r1, [r4, #60]	; 0x3c
   17178:	ldr	r3, [r4, #64]	; 0x40
   1717c:	ldr	r2, [r4, #32]
   17180:	add	r1, r1, r0
   17184:	sub	r0, r3, r0
   17188:	mvn	r3, #3
   1718c:	cmn	r0, #4
   17190:	str	r1, [r4, #16]
   17194:	movcs	r0, r3
   17198:	str	r0, [r4, #24]
   1719c:	str	r3, [r2, #4]
   171a0:	adds	r2, r1, r7
   171a4:	beq	17094 <flatcc_builder_create_union_vector@@Base+0x40>
   171a8:	ldr	r7, [r4, #20]
   171ac:	add	r2, r7, sl
   171b0:	cmp	r2, r0
   171b4:	str	r2, [r4, #20]
   171b8:	bcc	1721c <flatcc_builder_create_union_vector@@Base+0x1c8>
   171bc:	ldr	r1, [r4, #28]
   171c0:	ldr	r0, [r4, #40]	; 0x28
   171c4:	ldr	r6, [r4, #48]	; 0x30
   171c8:	mov	r3, #1
   171cc:	str	r3, [sp]
   171d0:	mov	r3, #1
   171d4:	add	r1, r2, r1
   171d8:	add	r2, r1, #1
   171dc:	add	r1, r4, #60	; 0x3c
   171e0:	blx	r6
   171e4:	cmp	r0, #0
   171e8:	bne	17094 <flatcc_builder_create_union_vector@@Base+0x40>
   171ec:	ldr	r0, [r4, #28]
   171f0:	ldr	r1, [r4, #60]	; 0x3c
   171f4:	ldr	r3, [r4, #64]	; 0x40
   171f8:	ldr	r2, [r4, #32]
   171fc:	add	r1, r1, r0
   17200:	sub	r0, r3, r0
   17204:	mvn	r3, #3
   17208:	cmn	r0, #4
   1720c:	str	r1, [r4, #16]
   17210:	movcs	r0, r3
   17214:	str	r0, [r4, #24]
   17218:	str	r3, [r2, #4]
   1721c:	adds	r8, r1, r7
   17220:	beq	17094 <flatcc_builder_create_union_vector@@Base+0x40>
   17224:	cmp	sl, #0
   17228:	beq	17258 <flatcc_builder_create_union_vector@@Base+0x204>
   1722c:	add	r0, r9, #4
   17230:	mov	r2, sl
   17234:	mov	r3, r1
   17238:	mov	r7, r8
   1723c:	ldrb	r6, [r0, #-4]
   17240:	subs	r2, r2, #1
   17244:	strb	r6, [r7], #1
   17248:	ldr	r6, [r0]
   1724c:	add	r0, r0, #8
   17250:	str	r6, [r3], #4
   17254:	bne	1723c <flatcc_builder_create_union_vector@@Base+0x1e8>
   17258:	mov	r0, r4
   1725c:	mov	r2, sl
   17260:	mov	r3, r8
   17264:	bl	1674c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17268:	mov	r7, r0
   1726c:	mov	r9, #0
   17270:	cmp	r0, #0
   17274:	beq	172a0 <flatcc_builder_create_union_vector@@Base+0x24c>
   17278:	mvn	r0, #0
   1727c:	mov	r1, #1
   17280:	mov	r2, sl
   17284:	mov	r3, #1
   17288:	str	r1, [sp]
   1728c:	str	r0, [sp, #4]
   17290:	mov	r0, r4
   17294:	mov	r1, r8
   17298:	bl	164b4 <flatcc_builder_create_vector@@Base>
   1729c:	b	172a4 <flatcc_builder_create_union_vector@@Base+0x250>
   172a0:	mov	r0, #0
   172a4:	orr	r1, r9, r7
   172a8:	stm	r5, {r0, r1}
   172ac:	mov	r1, #0
   172b0:	ldr	r0, [r4, #16]
   172b4:	ldr	r2, [r4, #20]
   172b8:	bl	12778 <memset@plt>
   172bc:	ldr	r0, [r4, #32]
   172c0:	ldr	r1, [r4, #60]	; 0x3c
   172c4:	ldr	r2, [r4, #64]	; 0x40
   172c8:	ldr	r3, [r0, #8]
   172cc:	str	r3, [r4, #20]
   172d0:	ldr	r3, [r0]
   172d4:	str	r3, [r4, #28]
   172d8:	add	r1, r1, r3
   172dc:	ldr	r7, [r0, #4]
   172e0:	str	r1, [r4, #16]
   172e4:	sub	r1, r2, r3
   172e8:	cmp	r1, r7
   172ec:	movhi	r1, r7
   172f0:	str	r1, [r4, #24]
   172f4:	ldrh	r1, [r4, #130]	; 0x82
   172f8:	ldrh	r2, [r4, #128]	; 0x80
   172fc:	cmp	r2, r1
   17300:	strhcc	r1, [r4, #128]	; 0x80
   17304:	ldrh	r1, [r0, #12]
   17308:	sub	r0, r0, #36	; 0x24
   1730c:	str	r0, [r4, #32]
   17310:	strh	r1, [r4, #130]	; 0x82
   17314:	ldr	r0, [r4, #156]	; 0x9c
   17318:	sub	r0, r0, #1
   1731c:	str	r0, [r4, #156]	; 0x9c
   17320:	sub	sp, fp, #28
   17324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17328:	andeq	r4, r0, lr, ror #5
   1732c:	andeq	r3, r0, r4, lsr #4
   17330:	andeq	r4, r0, r1, lsl #6

00017334 <flatcc_builder_create_union_vector_direct@@Base>:
   17334:	push	{r4, r5, r6, r7, fp, lr}
   17338:	add	fp, sp, #16
   1733c:	sub	sp, sp, #8
   17340:	ldr	r7, [fp, #8]
   17344:	mov	r5, r2
   17348:	mov	r4, r0
   1734c:	mov	r0, #0
   17350:	mov	r6, r1
   17354:	str	r0, [r4]
   17358:	str	r0, [r4, #4]
   1735c:	mov	r0, r1
   17360:	mov	r1, r3
   17364:	mov	r3, r5
   17368:	mov	r2, r7
   1736c:	bl	1674c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17370:	cmp	r0, #0
   17374:	str	r0, [r4, #4]
   17378:	beq	173a4 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   1737c:	mvn	r0, #0
   17380:	mov	r1, #1
   17384:	mov	r2, r7
   17388:	mov	r3, #1
   1738c:	str	r1, [sp]
   17390:	str	r0, [sp, #4]
   17394:	mov	r0, r6
   17398:	mov	r1, r5
   1739c:	bl	164b4 <flatcc_builder_create_vector@@Base>
   173a0:	str	r0, [r4]
   173a4:	sub	sp, fp, #16
   173a8:	pop	{r4, r5, r6, r7, fp, pc}

000173ac <flatcc_builder_start_union_vector@@Base>:
   173ac:	push	{r4, sl, fp, lr}
   173b0:	add	fp, sp, #8
   173b4:	mov	r1, #4
   173b8:	mov	r4, r0
   173bc:	bl	143a8 <flatcc_builder_start_buffer@@Base+0xc0>
   173c0:	mov	r1, r0
   173c4:	mvn	r0, #0
   173c8:	cmp	r1, #0
   173cc:	popne	{r4, sl, fp, pc}
   173d0:	ldr	r0, [r4, #32]
   173d4:	mov	r1, #8
   173d8:	mov	r2, #7
   173dc:	str	r1, [r0, #16]
   173e0:	mov	r0, #0
   173e4:	ldr	r1, [r4, #32]
   173e8:	str	r0, [r1, #20]
   173ec:	ldr	r1, [r4, #32]
   173f0:	strh	r2, [r1, #14]
   173f4:	ldr	r2, [r4, #28]
   173f8:	ldr	r3, [r4, #60]	; 0x3c
   173fc:	ldr	ip, [r4, #64]	; 0x40
   17400:	add	r3, r3, r2
   17404:	sub	r2, ip, r2
   17408:	str	r3, [r4, #16]
   1740c:	mvn	r3, #3
   17410:	cmn	r2, #4
   17414:	movcs	r2, r3
   17418:	str	r2, [r4, #24]
   1741c:	str	r3, [r1, #4]
   17420:	pop	{r4, sl, fp, pc}

00017424 <flatcc_builder_end_union_vector@@Base>:
   17424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17428:	add	fp, sp, #28
   1742c:	sub	sp, sp, #12
   17430:	mov	sl, r0
   17434:	mov	r0, #0
   17438:	mov	r4, r1
   1743c:	str	r0, [sl]
   17440:	str	r0, [sl, #4]
   17444:	ldr	r0, [r1, #32]
   17448:	ldrh	r1, [r0, #14]
   1744c:	cmp	r1, #7
   17450:	bne	175f4 <flatcc_builder_end_union_vector@@Base+0x1d0>
   17454:	ldr	r6, [r0, #20]
   17458:	ldr	r7, [r4, #20]
   1745c:	ldr	r2, [r4, #24]
   17460:	add	r0, r6, r6, lsl #2
   17464:	add	r1, r7, r0
   17468:	cmp	r1, r2
   1746c:	str	r1, [r4, #20]
   17470:	bcs	17484 <flatcc_builder_end_union_vector@@Base+0x60>
   17474:	ldr	r0, [r4, #16]
   17478:	adds	r1, r0, r7
   1747c:	bne	174ec <flatcc_builder_end_union_vector@@Base+0xc8>
   17480:	b	175ec <flatcc_builder_end_union_vector@@Base+0x1c8>
   17484:	ldr	r2, [r4, #28]
   17488:	ldr	r0, [r4, #40]	; 0x28
   1748c:	ldr	r5, [r4, #48]	; 0x30
   17490:	mov	r3, #1
   17494:	str	r3, [sp]
   17498:	mov	r3, #1
   1749c:	add	r1, r1, r2
   174a0:	add	r2, r1, #1
   174a4:	add	r1, r4, #60	; 0x3c
   174a8:	blx	r5
   174ac:	cmp	r0, #0
   174b0:	bne	175ec <flatcc_builder_end_union_vector@@Base+0x1c8>
   174b4:	ldr	r1, [r4, #28]
   174b8:	ldr	r0, [r4, #60]	; 0x3c
   174bc:	ldr	r3, [r4, #64]	; 0x40
   174c0:	ldr	r2, [r4, #32]
   174c4:	add	r0, r0, r1
   174c8:	sub	r1, r3, r1
   174cc:	mvn	r3, #3
   174d0:	cmn	r1, #4
   174d4:	str	r0, [r4, #16]
   174d8:	movcs	r1, r3
   174dc:	str	r1, [r4, #24]
   174e0:	str	r3, [r2, #4]
   174e4:	adds	r1, r0, r7
   174e8:	beq	175ec <flatcc_builder_end_union_vector@@Base+0x1c8>
   174ec:	add	r8, r1, r6, lsl #2
   174f0:	cmp	r6, #0
   174f4:	beq	17524 <flatcc_builder_end_union_vector@@Base+0x100>
   174f8:	add	r0, r0, #4
   174fc:	mov	r2, r6
   17500:	mov	r3, r1
   17504:	mov	r7, r8
   17508:	ldrb	r5, [r0, #-4]
   1750c:	subs	r2, r2, #1
   17510:	strb	r5, [r7], #1
   17514:	ldr	r5, [r0]
   17518:	add	r0, r0, #8
   1751c:	str	r5, [r3], #4
   17520:	bne	17508 <flatcc_builder_end_union_vector@@Base+0xe4>
   17524:	mov	r0, r4
   17528:	mov	r2, r6
   1752c:	mov	r3, r8
   17530:	bl	1674c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17534:	mov	r7, r0
   17538:	mov	r9, #0
   1753c:	cmp	r0, #0
   17540:	beq	1756c <flatcc_builder_end_union_vector@@Base+0x148>
   17544:	mvn	r0, #0
   17548:	mov	r1, #1
   1754c:	mov	r2, r6
   17550:	mov	r3, #1
   17554:	str	r1, [sp]
   17558:	str	r0, [sp, #4]
   1755c:	mov	r0, r4
   17560:	mov	r1, r8
   17564:	bl	164b4 <flatcc_builder_create_vector@@Base>
   17568:	b	17570 <flatcc_builder_end_union_vector@@Base+0x14c>
   1756c:	mov	r0, #0
   17570:	orr	r1, r9, r7
   17574:	stm	sl, {r0, r1}
   17578:	mov	r1, #0
   1757c:	ldr	r0, [r4, #16]
   17580:	ldr	r2, [r4, #20]
   17584:	bl	12778 <memset@plt>
   17588:	ldr	r0, [r4, #32]
   1758c:	ldr	r1, [r4, #60]	; 0x3c
   17590:	ldr	r2, [r4, #64]	; 0x40
   17594:	ldr	r3, [r0, #8]
   17598:	str	r3, [r4, #20]
   1759c:	ldr	r3, [r0]
   175a0:	str	r3, [r4, #28]
   175a4:	add	r1, r1, r3
   175a8:	ldr	r7, [r0, #4]
   175ac:	str	r1, [r4, #16]
   175b0:	sub	r1, r2, r3
   175b4:	cmp	r1, r7
   175b8:	movhi	r1, r7
   175bc:	str	r1, [r4, #24]
   175c0:	ldrh	r1, [r4, #130]	; 0x82
   175c4:	ldrh	r2, [r4, #128]	; 0x80
   175c8:	cmp	r2, r1
   175cc:	strhcc	r1, [r4, #128]	; 0x80
   175d0:	ldrh	r1, [r0, #12]
   175d4:	sub	r0, r0, #36	; 0x24
   175d8:	str	r0, [r4, #32]
   175dc:	strh	r1, [r4, #130]	; 0x82
   175e0:	ldr	r0, [r4, #156]	; 0x9c
   175e4:	sub	r0, r0, #1
   175e8:	str	r0, [r4, #156]	; 0x9c
   175ec:	sub	sp, fp, #28
   175f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f4:	ldr	r0, [pc, #24]	; 17614 <flatcc_builder_end_union_vector@@Base+0x1f0>
   175f8:	ldr	r1, [pc, #24]	; 17618 <flatcc_builder_end_union_vector@@Base+0x1f4>
   175fc:	ldr	r3, [pc, #24]	; 1761c <flatcc_builder_end_union_vector@@Base+0x1f8>
   17600:	movw	r2, #1617	; 0x651
   17604:	add	r0, pc, r0
   17608:	add	r1, pc, r1
   1760c:	add	r3, pc, r3
   17610:	bl	127a8 <__assert_fail@plt>
   17614:	andeq	r3, r0, r1, ror #18
   17618:	andeq	r2, r0, r4, lsr #26
   1761c:	andeq	r3, r0, fp, lsl #19

00017620 <flatcc_builder_union_vector_count@@Base>:
   17620:	ldr	r0, [r0, #32]
   17624:	ldr	r0, [r0, #20]
   17628:	bx	lr

0001762c <flatcc_builder_union_vector_edit@@Base>:
   1762c:	ldr	r0, [r0, #16]
   17630:	bx	lr

00017634 <flatcc_builder_extend_union_vector@@Base>:
   17634:	push	{r4, r5, fp, lr}
   17638:	add	fp, sp, #8
   1763c:	sub	sp, sp, #8
   17640:	mov	r4, r0
   17644:	ldr	r0, [r0, #32]
   17648:	ldr	r2, [r0, #20]
   1764c:	adds	r2, r2, r1
   17650:	cmpcc	r2, #536870912	; 0x20000000
   17654:	bcc	17678 <flatcc_builder_extend_union_vector@@Base+0x44>
   17658:	ldr	r0, [pc, #184]	; 17718 <flatcc_builder_extend_union_vector@@Base+0xe4>
   1765c:	ldr	r1, [pc, #184]	; 1771c <flatcc_builder_extend_union_vector@@Base+0xe8>
   17660:	ldr	r3, [pc, #184]	; 17720 <flatcc_builder_extend_union_vector@@Base+0xec>
   17664:	mov	r2, #892	; 0x37c
   17668:	add	r0, pc, r0
   1766c:	add	r1, pc, r1
   17670:	add	r3, pc, r3
   17674:	bl	127a8 <__assert_fail@plt>
   17678:	str	r2, [r0, #20]
   1767c:	ldr	r5, [r4, #20]
   17680:	ldr	r0, [r4, #24]
   17684:	add	r1, r5, r1, lsl #3
   17688:	cmp	r1, r0
   1768c:	str	r1, [r4, #20]
   17690:	bcs	1769c <flatcc_builder_extend_union_vector@@Base+0x68>
   17694:	ldr	r0, [r4, #16]
   17698:	b	1770c <flatcc_builder_extend_union_vector@@Base+0xd8>
   1769c:	ldr	r2, [r4, #28]
   176a0:	ldr	r0, [r4, #40]	; 0x28
   176a4:	ldr	ip, [r4, #48]	; 0x30
   176a8:	mov	r3, #1
   176ac:	str	r3, [sp]
   176b0:	mov	r3, #1
   176b4:	add	r1, r1, r2
   176b8:	add	r2, r1, #1
   176bc:	add	r1, r4, #60	; 0x3c
   176c0:	blx	ip
   176c4:	mov	r1, r0
   176c8:	mov	r0, #0
   176cc:	cmp	r1, #0
   176d0:	beq	176dc <flatcc_builder_extend_union_vector@@Base+0xa8>
   176d4:	sub	sp, fp, #8
   176d8:	pop	{r4, r5, fp, pc}
   176dc:	ldr	r1, [r4, #28]
   176e0:	ldr	r0, [r4, #60]	; 0x3c
   176e4:	ldr	r3, [r4, #64]	; 0x40
   176e8:	ldr	r2, [r4, #32]
   176ec:	add	r0, r0, r1
   176f0:	sub	r1, r3, r1
   176f4:	mvn	r3, #3
   176f8:	cmn	r1, #4
   176fc:	str	r0, [r4, #16]
   17700:	movcs	r1, r3
   17704:	str	r1, [r4, #24]
   17708:	str	r3, [r2, #4]
   1770c:	add	r0, r0, r5
   17710:	sub	sp, fp, #8
   17714:	pop	{r4, r5, fp, pc}
   17718:	andeq	r3, r0, sl, lsl #27
   1771c:	andeq	r2, r0, r0, asr #25
   17720:	muleq	r0, sp, sp

00017724 <flatcc_builder_truncate_union_vector@@Base>:
   17724:	push	{fp, lr}
   17728:	mov	fp, sp
   1772c:	ldr	r2, [r0, #32]
   17730:	ldrh	r3, [r2, #14]
   17734:	cmp	r3, #7
   17738:	bne	17780 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   1773c:	ldr	r3, [r2, #20]
   17740:	cmp	r3, r1
   17744:	bcc	177a0 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17748:	sub	r3, r3, r1
   1774c:	str	r3, [r2, #20]
   17750:	ldr	r2, [r0, #32]
   17754:	ldr	r3, [r0, #20]
   17758:	ldr	ip, [r0, #16]
   1775c:	ldr	r2, [r2, #16]
   17760:	mls	r3, r2, r1, r3
   17764:	mul	r2, r2, r1
   17768:	mov	r1, #0
   1776c:	str	r3, [r0, #20]
   17770:	add	r0, ip, r3
   17774:	bl	12778 <memset@plt>
   17778:	mov	r0, #0
   1777c:	pop	{fp, pc}
   17780:	ldr	r0, [pc, #56]	; 177c0 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17784:	ldr	r1, [pc, #56]	; 177c4 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   17788:	ldr	r3, [pc, #56]	; 177c8 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   1778c:	movw	r2, #1665	; 0x681
   17790:	add	r0, pc, r0
   17794:	add	r1, pc, r1
   17798:	add	r3, pc, r3
   1779c:	bl	127a8 <__assert_fail@plt>
   177a0:	ldr	r0, [pc, #36]	; 177cc <flatcc_builder_truncate_union_vector@@Base+0xa8>
   177a4:	ldr	r1, [pc, #36]	; 177d0 <flatcc_builder_truncate_union_vector@@Base+0xac>
   177a8:	ldr	r3, [pc, #36]	; 177d4 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   177ac:	movw	r2, #1666	; 0x682
   177b0:	add	r0, pc, r0
   177b4:	add	r1, pc, r1
   177b8:	add	r3, pc, r3
   177bc:	bl	127a8 <__assert_fail@plt>
   177c0:	ldrdeq	r3, [r0], -r5
   177c4:	muleq	r0, r8, fp
   177c8:	andeq	r3, r0, r2, asr r8
   177cc:	andeq	r3, r0, r9, lsl r2
   177d0:	andeq	r2, r0, r8, ror fp
   177d4:	andeq	r3, r0, r2, lsr r8

000177d8 <flatcc_builder_union_vector_push@@Base>:
   177d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   177dc:	add	fp, sp, #24
   177e0:	sub	sp, sp, #8
   177e4:	mov	r7, r0
   177e8:	ldr	r0, [r0, #32]
   177ec:	mov	r9, r1
   177f0:	ldrh	r1, [r0, #14]
   177f4:	cmp	r1, #7
   177f8:	bne	178b4 <flatcc_builder_union_vector_push@@Base+0xdc>
   177fc:	ldr	r1, [r0, #20]
   17800:	mov	r6, #0
   17804:	cmn	r1, #-536870911	; 0xe0000001
   17808:	beq	178a8 <flatcc_builder_union_vector_push@@Base+0xd0>
   1780c:	add	r1, r1, #1
   17810:	mov	r8, r2
   17814:	str	r1, [r0, #20]
   17818:	ldr	r4, [r7, #20]
   1781c:	ldr	r0, [r7, #24]
   17820:	add	r1, r4, #8
   17824:	cmp	r1, r0
   17828:	str	r1, [r7, #20]
   1782c:	bcs	17838 <flatcc_builder_union_vector_push@@Base+0x60>
   17830:	ldr	r0, [r7, #16]
   17834:	b	17898 <flatcc_builder_union_vector_push@@Base+0xc0>
   17838:	ldr	r1, [r7, #28]
   1783c:	ldr	r0, [r7, #40]	; 0x28
   17840:	ldr	r5, [r7, #48]	; 0x30
   17844:	mov	r2, #1
   17848:	mov	r3, #1
   1784c:	str	r2, [sp]
   17850:	add	r1, r4, r1
   17854:	add	r2, r1, #9
   17858:	add	r1, r7, #60	; 0x3c
   1785c:	blx	r5
   17860:	cmp	r0, #0
   17864:	bne	178a8 <flatcc_builder_union_vector_push@@Base+0xd0>
   17868:	ldr	r1, [r7, #28]
   1786c:	ldr	r0, [r7, #60]	; 0x3c
   17870:	ldr	r3, [r7, #64]	; 0x40
   17874:	ldr	r2, [r7, #32]
   17878:	add	r0, r0, r1
   1787c:	sub	r1, r3, r1
   17880:	mvn	r3, #3
   17884:	cmn	r1, #4
   17888:	str	r0, [r7, #16]
   1788c:	movcs	r1, r3
   17890:	str	r1, [r7, #24]
   17894:	str	r3, [r2, #4]
   17898:	adds	r0, r0, r4
   1789c:	movne	r6, r0
   178a0:	strne	r9, [r0]
   178a4:	strne	r8, [r0, #4]
   178a8:	mov	r0, r6
   178ac:	sub	sp, fp, #24
   178b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   178b4:	ldr	r0, [pc, #24]	; 178d4 <flatcc_builder_union_vector_push@@Base+0xfc>
   178b8:	ldr	r1, [pc, #24]	; 178d8 <flatcc_builder_union_vector_push@@Base+0x100>
   178bc:	ldr	r3, [pc, #24]	; 178dc <flatcc_builder_union_vector_push@@Base+0x104>
   178c0:	movw	r2, #1677	; 0x68d
   178c4:	add	r0, pc, r0
   178c8:	add	r1, pc, r1
   178cc:	add	r3, pc, r3
   178d0:	bl	127a8 <__assert_fail@plt>
   178d4:	andeq	r3, r0, r1, lsr #13
   178d8:	andeq	r2, r0, r4, ror #20
   178dc:	andeq	r3, r0, r3, ror #14

000178e0 <flatcc_builder_append_union_vector@@Base>:
   178e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178e4:	add	fp, sp, #24
   178e8:	sub	sp, sp, #8
   178ec:	mov	r6, r0
   178f0:	ldr	r0, [r0, #32]
   178f4:	mov	r8, r1
   178f8:	ldrh	r1, [r0, #14]
   178fc:	cmp	r1, #7
   17900:	bne	179f0 <flatcc_builder_append_union_vector@@Base+0x110>
   17904:	ldr	r1, [r0, #20]
   17908:	mov	r5, r2
   1790c:	adds	r1, r1, r2
   17910:	cmpcc	r1, #536870912	; 0x20000000
   17914:	bcc	17938 <flatcc_builder_append_union_vector@@Base+0x58>
   17918:	ldr	r0, [pc, #252]	; 17a1c <flatcc_builder_append_union_vector@@Base+0x13c>
   1791c:	ldr	r1, [pc, #252]	; 17a20 <flatcc_builder_append_union_vector@@Base+0x140>
   17920:	ldr	r3, [pc, #252]	; 17a24 <flatcc_builder_append_union_vector@@Base+0x144>
   17924:	mov	r2, #892	; 0x37c
   17928:	add	r0, pc, r0
   1792c:	add	r1, pc, r1
   17930:	add	r3, pc, r3
   17934:	bl	127a8 <__assert_fail@plt>
   17938:	str	r1, [r0, #20]
   1793c:	ldr	r4, [r6, #20]
   17940:	ldr	r0, [r6, #24]
   17944:	add	r1, r4, r5, lsl #3
   17948:	cmp	r1, r0
   1794c:	str	r1, [r6, #20]
   17950:	bcs	17974 <flatcc_builder_append_union_vector@@Base+0x94>
   17954:	ldr	r0, [r6, #16]
   17958:	adds	r7, r0, r4
   1795c:	beq	179e0 <flatcc_builder_append_union_vector@@Base+0x100>
   17960:	lsl	r2, r5, #3
   17964:	mov	r0, r7
   17968:	mov	r1, r8
   1796c:	bl	12718 <memcpy@plt>
   17970:	b	179e4 <flatcc_builder_append_union_vector@@Base+0x104>
   17974:	ldr	r2, [r6, #28]
   17978:	ldr	r0, [r6, #40]	; 0x28
   1797c:	ldr	r7, [r6, #48]	; 0x30
   17980:	mov	r3, #1
   17984:	str	r3, [sp]
   17988:	mov	r3, #1
   1798c:	add	r1, r1, r2
   17990:	add	r2, r1, #1
   17994:	add	r1, r6, #60	; 0x3c
   17998:	blx	r7
   1799c:	mov	r7, #0
   179a0:	cmp	r0, #0
   179a4:	bne	179e4 <flatcc_builder_append_union_vector@@Base+0x104>
   179a8:	ldr	r1, [r6, #28]
   179ac:	ldr	r0, [r6, #60]	; 0x3c
   179b0:	ldr	r3, [r6, #64]	; 0x40
   179b4:	ldr	r2, [r6, #32]
   179b8:	add	r0, r0, r1
   179bc:	sub	r1, r3, r1
   179c0:	mvn	r3, #3
   179c4:	cmn	r1, #4
   179c8:	str	r0, [r6, #16]
   179cc:	movcs	r1, r3
   179d0:	str	r1, [r6, #24]
   179d4:	str	r3, [r2, #4]
   179d8:	adds	r7, r0, r4
   179dc:	bne	17960 <flatcc_builder_append_union_vector@@Base+0x80>
   179e0:	mov	r7, #0
   179e4:	mov	r0, r7
   179e8:	sub	sp, fp, #24
   179ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179f0:	ldr	r0, [pc, #24]	; 17a10 <flatcc_builder_append_union_vector@@Base+0x130>
   179f4:	ldr	r1, [pc, #24]	; 17a14 <flatcc_builder_append_union_vector@@Base+0x134>
   179f8:	ldr	r3, [pc, #24]	; 17a18 <flatcc_builder_append_union_vector@@Base+0x138>
   179fc:	movw	r2, #1692	; 0x69c
   17a00:	add	r0, pc, r0
   17a04:	add	r1, pc, r1
   17a08:	add	r3, pc, r3
   17a0c:	bl	127a8 <__assert_fail@plt>
   17a10:	andeq	r3, r0, r5, ror #10
   17a14:	andeq	r2, r0, r8, lsr #18
   17a18:	muleq	r0, r4, r6
   17a1c:	andeq	r3, r0, sl, asr #21
   17a20:	andeq	r2, r0, r0, lsl #20
   17a24:	ldrdeq	r3, [r0], -sp

00017a28 <flatcc_builder_create_string@@Base>:
   17a28:	push	{r4, r5, r6, sl, fp, lr}
   17a2c:	add	fp, sp, #16
   17a30:	sub	sp, sp, #80	; 0x50
   17a34:	str	r2, [fp, #-20]	; 0xffffffec
   17a38:	mvn	r5, r2
   17a3c:	mov	r6, r0
   17a40:	mov	r3, #1
   17a44:	cmp	r2, #0
   17a48:	ldr	ip, [r0, #136]	; 0x88
   17a4c:	sub	r0, fp, #20
   17a50:	str	r0, [sp, #12]
   17a54:	mov	r0, #4
   17a58:	str	r0, [sp, #4]
   17a5c:	str	r0, [sp, #16]
   17a60:	str	r3, [sp, #8]
   17a64:	add	r5, ip, r5
   17a68:	and	r5, r5, #3
   17a6c:	add	r5, r5, #1
   17a70:	beq	17a8c <flatcc_builder_create_string@@Base+0x64>
   17a74:	mov	r3, #2
   17a78:	add	r0, r2, #4
   17a7c:	str	r1, [sp, #20]
   17a80:	str	r2, [sp, #24]
   17a84:	str	r3, [sp, #8]
   17a88:	str	r0, [sp, #4]
   17a8c:	add	r1, r0, r5
   17a90:	add	lr, sp, #4
   17a94:	str	r1, [sp, #4]
   17a98:	add	r0, lr, r3, lsl #3
   17a9c:	cmp	r1, #0
   17aa0:	ldr	r2, [pc, #132]	; 17b2c <flatcc_builder_create_string@@Base+0x104>
   17aa4:	ldr	r2, [pc, r2]
   17aa8:	str	r2, [r0, #8]
   17aac:	add	r2, r3, #1
   17ab0:	str	r5, [r0, #12]
   17ab4:	str	r2, [sp, #8]
   17ab8:	ble	17b0c <flatcc_builder_create_string@@Base+0xe4>
   17abc:	ldr	r0, [r6, #36]	; 0x24
   17ac0:	ldr	r4, [r6, #44]	; 0x2c
   17ac4:	sub	r5, ip, r1
   17ac8:	str	r1, [sp]
   17acc:	add	r1, lr, #8
   17ad0:	mov	r3, r5
   17ad4:	blx	r4
   17ad8:	cmp	r0, #0
   17adc:	streq	r5, [r6, #136]	; 0x88
   17ae0:	moveq	r0, r5
   17ae4:	subeq	sp, fp, #16
   17ae8:	popeq	{r4, r5, r6, sl, fp, pc}
   17aec:	ldr	r0, [pc, #72]	; 17b3c <flatcc_builder_create_string@@Base+0x114>
   17af0:	ldr	r1, [pc, #72]	; 17b40 <flatcc_builder_create_string@@Base+0x118>
   17af4:	ldr	r3, [pc, #72]	; 17b44 <flatcc_builder_create_string@@Base+0x11c>
   17af8:	movw	r2, #651	; 0x28b
   17afc:	add	r0, pc, r0
   17b00:	add	r1, pc, r1
   17b04:	add	r3, pc, r3
   17b08:	bl	127a8 <__assert_fail@plt>
   17b0c:	ldr	r0, [pc, #28]	; 17b30 <flatcc_builder_create_string@@Base+0x108>
   17b10:	ldr	r1, [pc, #28]	; 17b34 <flatcc_builder_create_string@@Base+0x10c>
   17b14:	ldr	r3, [pc, #28]	; 17b38 <flatcc_builder_create_string@@Base+0x110>
   17b18:	movw	r2, #647	; 0x287
   17b1c:	add	r0, pc, r0
   17b20:	add	r1, pc, r1
   17b24:	add	r3, pc, r3
   17b28:	bl	127a8 <__assert_fail@plt>
   17b2c:	muleq	r1, r8, r5
   17b30:	andeq	r3, r0, sp, asr #19
   17b34:	andeq	r2, r0, ip, lsl #16
   17b38:	andeq	r3, r0, r4, lsl #17
   17b3c:	andeq	r3, r0, sp, ror #19
   17b40:	andeq	r2, r0, ip, lsr #16
   17b44:	andeq	r3, r0, r4, lsr #17

00017b48 <flatcc_builder_create_string_str@@Base>:
   17b48:	push	{r4, r5, fp, lr}
   17b4c:	add	fp, sp, #8
   17b50:	mov	r5, r0
   17b54:	mov	r0, r1
   17b58:	mov	r4, r1
   17b5c:	bl	12760 <strlen@plt>
   17b60:	mov	r2, r0
   17b64:	mov	r0, r5
   17b68:	mov	r1, r4
   17b6c:	pop	{r4, r5, fp, lr}
   17b70:	b	17a28 <flatcc_builder_create_string@@Base>

00017b74 <flatcc_builder_create_string_strn@@Base>:
   17b74:	push	{r4, r5, r6, sl, fp, lr}
   17b78:	add	fp, sp, #16
   17b7c:	mov	r6, r0
   17b80:	mov	r5, r1
   17b84:	mov	r0, r1
   17b88:	mov	r1, #0
   17b8c:	mov	r4, r2
   17b90:	bl	12790 <memchr@plt>
   17b94:	cmp	r0, #0
   17b98:	mov	r1, r5
   17b9c:	subne	r4, r0, r5
   17ba0:	mov	r0, r6
   17ba4:	mov	r2, r4
   17ba8:	pop	{r4, r5, r6, sl, fp, lr}
   17bac:	b	17a28 <flatcc_builder_create_string@@Base>

00017bb0 <flatcc_builder_end_string@@Base>:
   17bb0:	push	{r4, r5, fp, lr}
   17bb4:	add	fp, sp, #8
   17bb8:	mov	r4, r0
   17bbc:	ldr	r0, [r0, #32]
   17bc0:	ldrh	r1, [r0, #14]
   17bc4:	cmp	r1, #6
   17bc8:	bne	17c70 <flatcc_builder_end_string@@Base+0xc0>
   17bcc:	ldr	r2, [r0, #20]
   17bd0:	ldr	r0, [r4, #20]
   17bd4:	cmp	r2, r0
   17bd8:	bne	17c90 <flatcc_builder_end_string@@Base+0xe0>
   17bdc:	ldr	r1, [r4, #16]
   17be0:	mov	r0, r4
   17be4:	bl	17a28 <flatcc_builder_create_string@@Base>
   17be8:	mov	r5, r0
   17bec:	cmp	r0, #0
   17bf0:	beq	17c68 <flatcc_builder_end_string@@Base+0xb8>
   17bf4:	ldr	r0, [r4, #16]
   17bf8:	ldr	r2, [r4, #20]
   17bfc:	mov	r1, #0
   17c00:	bl	12778 <memset@plt>
   17c04:	ldr	r0, [r4, #32]
   17c08:	ldr	r1, [r4, #60]	; 0x3c
   17c0c:	ldr	ip, [r4, #64]	; 0x40
   17c10:	ldr	r3, [r0, #8]
   17c14:	str	r3, [r4, #20]
   17c18:	ldr	r3, [r0]
   17c1c:	str	r3, [r4, #28]
   17c20:	add	r1, r1, r3
   17c24:	ldr	r2, [r0, #4]
   17c28:	str	r1, [r4, #16]
   17c2c:	sub	r1, ip, r3
   17c30:	cmp	r1, r2
   17c34:	movhi	r1, r2
   17c38:	str	r1, [r4, #24]
   17c3c:	ldrh	r1, [r4, #130]	; 0x82
   17c40:	ldrh	r2, [r4, #128]	; 0x80
   17c44:	cmp	r2, r1
   17c48:	strhcc	r1, [r4, #128]	; 0x80
   17c4c:	ldrh	r1, [r0, #12]
   17c50:	sub	r0, r0, #36	; 0x24
   17c54:	str	r0, [r4, #32]
   17c58:	strh	r1, [r4, #130]	; 0x82
   17c5c:	ldr	r0, [r4, #156]	; 0x9c
   17c60:	sub	r0, r0, #1
   17c64:	str	r0, [r4, #156]	; 0x9c
   17c68:	mov	r0, r5
   17c6c:	pop	{r4, r5, fp, pc}
   17c70:	ldr	r0, [pc, #56]	; 17cb0 <flatcc_builder_end_string@@Base+0x100>
   17c74:	ldr	r1, [pc, #56]	; 17cb4 <flatcc_builder_end_string@@Base+0x104>
   17c78:	ldr	r3, [pc, #56]	; 17cb8 <flatcc_builder_end_string@@Base+0x108>
   17c7c:	movw	r2, #1732	; 0x6c4
   17c80:	add	r0, pc, r0
   17c84:	add	r1, pc, r1
   17c88:	add	r3, pc, r3
   17c8c:	bl	127a8 <__assert_fail@plt>
   17c90:	ldr	r0, [pc, #36]	; 17cbc <flatcc_builder_end_string@@Base+0x10c>
   17c94:	ldr	r1, [pc, #36]	; 17cc0 <flatcc_builder_end_string@@Base+0x110>
   17c98:	ldr	r3, [pc, #36]	; 17cc4 <flatcc_builder_end_string@@Base+0x114>
   17c9c:	movw	r2, #1733	; 0x6c5
   17ca0:	add	r0, pc, r0
   17ca4:	add	r1, pc, r1
   17ca8:	add	r3, pc, r3
   17cac:	bl	127a8 <__assert_fail@plt>
   17cb0:	andeq	r2, r0, r8, ror #23
   17cb4:	andeq	r2, r0, r8, lsr #13
   17cb8:	muleq	r0, r3, r4
   17cbc:			; <UNDEFINED> instruction: 0x000034be
   17cc0:	andeq	r2, r0, r8, lsl #13
   17cc4:	andeq	r3, r0, r3, ror r4

00017cc8 <flatcc_builder_string_edit@@Base>:
   17cc8:	ldr	r0, [r0, #16]
   17ccc:	bx	lr

00017cd0 <flatcc_builder_string_len@@Base>:
   17cd0:	ldr	r0, [r0, #32]
   17cd4:	ldr	r0, [r0, #20]
   17cd8:	bx	lr

00017cdc <flatcc_builder_table_edit@@Base>:
   17cdc:	ldr	r2, [r0, #32]
   17ce0:	ldrh	r2, [r2, #14]
   17ce4:	cmp	r2, #3
   17ce8:	ldreq	r2, [r0, #16]
   17cec:	ldreq	r0, [r0, #20]
   17cf0:	addeq	r0, r2, r0
   17cf4:	subeq	r0, r0, r1
   17cf8:	bxeq	lr
   17cfc:	push	{fp, lr}
   17d00:	mov	fp, sp
   17d04:	ldr	r0, [pc, #24]	; 17d24 <flatcc_builder_table_edit@@Base+0x48>
   17d08:	ldr	r1, [pc, #24]	; 17d28 <flatcc_builder_table_edit@@Base+0x4c>
   17d0c:	ldr	r3, [pc, #24]	; 17d2c <flatcc_builder_table_edit@@Base+0x50>
   17d10:	movw	r2, #1794	; 0x702
   17d14:	add	r0, pc, r0
   17d18:	add	r1, pc, r1
   17d1c:	add	r3, pc, r3
   17d20:	bl	127a8 <__assert_fail@plt>
   17d24:	andeq	r2, r0, r4, asr #28
   17d28:	andeq	r2, r0, r4, lsl r6
   17d2c:	strdeq	r3, [r0], -r4

00017d30 <flatcc_builder_table_add_copy@@Base>:
   17d30:	push	{r4, r5, r6, sl, fp, lr}
   17d34:	add	fp, sp, #16
   17d38:	mov	r4, r3
   17d3c:	ldr	r3, [fp, #8]
   17d40:	mov	r5, r2
   17d44:	mov	r2, r4
   17d48:	bl	16d64 <flatcc_builder_table_add@@Base>
   17d4c:	mov	r6, r0
   17d50:	cmp	r0, #0
   17d54:	beq	17d68 <flatcc_builder_table_add_copy@@Base+0x38>
   17d58:	mov	r0, r6
   17d5c:	mov	r1, r5
   17d60:	mov	r2, r4
   17d64:	bl	12718 <memcpy@plt>
   17d68:	mov	r0, r6
   17d6c:	pop	{r4, r5, r6, sl, fp, pc}

00017d70 <flatcc_builder_push_buffer_alignment@@Base>:
   17d70:	ldrh	r1, [r0, #128]	; 0x80
   17d74:	mov	r2, #4
   17d78:	strh	r2, [r0, #128]	; 0x80
   17d7c:	mov	r0, r1
   17d80:	bx	lr

00017d84 <flatcc_builder_pop_buffer_alignment@@Base>:
   17d84:	ldrh	r2, [r0, #128]	; 0x80
   17d88:	cmp	r2, r1
   17d8c:	strhcc	r1, [r0, #128]	; 0x80
   17d90:	bx	lr

00017d94 <flatcc_builder_get_buffer_alignment@@Base>:
   17d94:	ldrh	r0, [r0, #128]	; 0x80
   17d98:	bx	lr

00017d9c <flatcc_builder_set_vtable_clustering@@Base>:
   17d9c:	clz	r1, r1
   17da0:	lsr	r1, r1, #5
   17da4:	str	r1, [r0, #180]	; 0xb4
   17da8:	bx	lr

00017dac <flatcc_builder_set_block_align@@Base>:
   17dac:	strh	r1, [r0, #132]	; 0x84
   17db0:	bx	lr

00017db4 <flatcc_builder_get_level@@Base>:
   17db4:	ldr	r0, [r0, #156]	; 0x9c
   17db8:	bx	lr

00017dbc <flatcc_builder_set_max_level@@Base>:
   17dbc:	str	r1, [r0, #176]	; 0xb0
   17dc0:	ldr	r2, [r0, #160]	; 0xa0
   17dc4:	cmp	r2, r1
   17dc8:	strlt	r1, [r0, #160]	; 0xa0
   17dcc:	bx	lr

00017dd0 <flatcc_builder_get_buffer_size@@Base>:
   17dd0:	ldr	r1, [r0, #136]	; 0x88
   17dd4:	ldr	r0, [r0, #140]	; 0x8c
   17dd8:	sub	r0, r0, r1
   17ddc:	bx	lr

00017de0 <flatcc_builder_get_buffer_start@@Base>:
   17de0:	ldr	r0, [r0, #136]	; 0x88
   17de4:	bx	lr

00017de8 <flatcc_builder_get_buffer_end@@Base>:
   17de8:	ldr	r0, [r0, #140]	; 0x8c
   17dec:	bx	lr

00017df0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17df0:	str	r1, [r0, #172]	; 0xac
   17df4:	bx	lr

00017df8 <flatcc_builder_set_identifier@@Base>:
   17df8:	ldr	r2, [pc, #20]	; 17e14 <flatcc_builder_set_identifier@@Base+0x1c>
   17dfc:	cmp	r1, #0
   17e00:	ldr	r2, [pc, r2]
   17e04:	movne	r2, r1
   17e08:	ldr	r1, [r2]
   17e0c:	str	r1, [r0, #168]	; 0xa8
   17e10:	bx	lr
   17e14:	andeq	r4, r1, ip, lsr r2

00017e18 <flatcc_builder_get_type@@Base>:
   17e18:	ldr	r0, [r0, #32]
   17e1c:	cmp	r0, #0
   17e20:	ldrhne	r0, [r0, #14]
   17e24:	moveq	r0, #0
   17e28:	bx	lr

00017e2c <flatcc_builder_get_type_at@@Base>:
   17e2c:	mov	r2, r0
   17e30:	cmp	r1, #1
   17e34:	mov	r0, #0
   17e38:	ldrge	r3, [r2, #156]	; 0x9c
   17e3c:	cmpge	r3, r1
   17e40:	bge	17e48 <flatcc_builder_get_type_at@@Base+0x1c>
   17e44:	bx	lr
   17e48:	sub	r0, r1, r3
   17e4c:	ldr	r1, [r2, #32]
   17e50:	add	r0, r0, r0, lsl #3
   17e54:	add	r0, r1, r0, lsl #2
   17e58:	ldrh	r0, [r0, #14]
   17e5c:	bx	lr

00017e60 <flatcc_builder_get_direct_buffer@@Base>:
   17e60:	ldr	r2, [r0, #184]	; 0xb8
   17e64:	cmp	r2, #0
   17e68:	beq	17e7c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17e6c:	ldr	r2, [r0, #188]	; 0xbc
   17e70:	ldr	r3, [r0, #192]	; 0xc0
   17e74:	cmp	r2, r3
   17e78:	beq	17e94 <flatcc_builder_get_direct_buffer@@Base+0x34>
   17e7c:	cmp	r1, #0
   17e80:	moveq	r0, #0
   17e84:	bxeq	lr
   17e88:	mov	r0, #0
   17e8c:	str	r0, [r1]
   17e90:	bx	lr
   17e94:	cmp	r1, #0
   17e98:	ldrne	r2, [r0, #212]	; 0xd4
   17e9c:	strne	r2, [r1]
   17ea0:	ldr	r0, [r0, #196]	; 0xc4
   17ea4:	bx	lr

00017ea8 <flatcc_builder_copy_buffer@@Base>:
   17ea8:	push	{fp, lr}
   17eac:	mov	fp, sp
   17eb0:	ldr	r3, [r0, #184]	; 0xb8
   17eb4:	cmp	r3, #0
   17eb8:	beq	17eec <flatcc_builder_copy_buffer@@Base+0x44>
   17ebc:	add	r0, r0, #188	; 0xbc
   17ec0:	bl	185f8 <flatcc_emitter_copy_buffer@@Base>
   17ec4:	cmp	r0, #0
   17ec8:	popne	{fp, pc}
   17ecc:	ldr	r0, [pc, #32]	; 17ef4 <flatcc_builder_copy_buffer@@Base+0x4c>
   17ed0:	ldr	r1, [pc, #32]	; 17ef8 <flatcc_builder_copy_buffer@@Base+0x50>
   17ed4:	ldr	r3, [pc, #32]	; 17efc <flatcc_builder_copy_buffer@@Base+0x54>
   17ed8:	movw	r2, #1926	; 0x786
   17edc:	add	r0, pc, r0
   17ee0:	add	r1, pc, r1
   17ee4:	add	r3, pc, r3
   17ee8:	bl	127a8 <__assert_fail@plt>
   17eec:	mov	r0, #0
   17ef0:	pop	{fp, pc}
   17ef4:			; <UNDEFINED> instruction: 0x000026bb
   17ef8:	andeq	r2, r0, ip, asr #8
   17efc:			; <UNDEFINED> instruction: 0x000033b7

00017f00 <flatcc_builder_finalize_buffer@@Base>:
   17f00:	push	{r4, r5, r6, sl, fp, lr}
   17f04:	add	fp, sp, #16
   17f08:	mov	r5, r0
   17f0c:	ldr	r0, [r0, #136]	; 0x88
   17f10:	cmp	r1, #0
   17f14:	ldr	r2, [r5, #140]	; 0x8c
   17f18:	sub	r4, r2, r0
   17f1c:	mov	r0, r4
   17f20:	strne	r4, [r1]
   17f24:	bl	1273c <malloc@plt>
   17f28:	cmp	r0, #0
   17f2c:	beq	17f7c <flatcc_builder_finalize_buffer@@Base+0x7c>
   17f30:	mov	r6, r0
   17f34:	ldr	r0, [r5, #184]	; 0xb8
   17f38:	cmp	r0, #0
   17f3c:	beq	17f9c <flatcc_builder_finalize_buffer@@Base+0x9c>
   17f40:	add	r0, r5, #188	; 0xbc
   17f44:	mov	r1, r6
   17f48:	mov	r2, r4
   17f4c:	bl	185f8 <flatcc_emitter_copy_buffer@@Base>
   17f50:	cmp	r0, #0
   17f54:	movne	r0, r6
   17f58:	popne	{r4, r5, r6, sl, fp, pc}
   17f5c:	ldr	r0, [pc, #88]	; 17fbc <flatcc_builder_finalize_buffer@@Base+0xbc>
   17f60:	ldr	r1, [pc, #88]	; 17fc0 <flatcc_builder_finalize_buffer@@Base+0xc0>
   17f64:	ldr	r3, [pc, #88]	; 17fc4 <flatcc_builder_finalize_buffer@@Base+0xc4>
   17f68:	movw	r2, #1926	; 0x786
   17f6c:	add	r0, pc, r0
   17f70:	add	r1, pc, r1
   17f74:	add	r3, pc, r3
   17f78:	bl	127a8 <__assert_fail@plt>
   17f7c:	ldr	r0, [pc, #80]	; 17fd4 <flatcc_builder_finalize_buffer@@Base+0xd4>
   17f80:	ldr	r1, [pc, #80]	; 17fd8 <flatcc_builder_finalize_buffer@@Base+0xd8>
   17f84:	ldr	r3, [pc, #80]	; 17fdc <flatcc_builder_finalize_buffer@@Base+0xdc>
   17f88:	movw	r2, #1944	; 0x798
   17f8c:	add	r0, pc, r0
   17f90:	add	r1, pc, r1
   17f94:	add	r3, pc, r3
   17f98:	bl	127a8 <__assert_fail@plt>
   17f9c:	ldr	r0, [pc, #36]	; 17fc8 <flatcc_builder_finalize_buffer@@Base+0xc8>
   17fa0:	ldr	r1, [pc, #36]	; 17fcc <flatcc_builder_finalize_buffer@@Base+0xcc>
   17fa4:	ldr	r3, [pc, #36]	; 17fd0 <flatcc_builder_finalize_buffer@@Base+0xd0>
   17fa8:	movw	r2, #1948	; 0x79c
   17fac:	add	r0, pc, r0
   17fb0:	add	r1, pc, r1
   17fb4:	add	r3, pc, r3
   17fb8:	bl	127a8 <__assert_fail@plt>
   17fbc:	andeq	r2, r0, fp, lsr #12
   17fc0:			; <UNDEFINED> instruction: 0x000023bc
   17fc4:	andeq	r3, r0, r7, lsr #6
   17fc8:	andeq	r3, r0, sp, lsr r5
   17fcc:	andeq	r2, r0, ip, ror r3
   17fd0:	andeq	r3, r0, ip, lsr #6
   17fd4:	andeq	r3, r0, sp, asr r5
   17fd8:	muleq	r0, ip, r3
   17fdc:	andeq	r3, r0, ip, asr #6

00017fe0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17fe0:	push	{r4, r5, r6, r7, fp, lr}
   17fe4:	add	fp, sp, #16
   17fe8:	sub	sp, sp, #8
   17fec:	mov	r5, r0
   17ff0:	mov	r4, r1
   17ff4:	ldr	r0, [r0, #136]	; 0x88
   17ff8:	ldr	r1, [r5, #140]	; 0x8c
   17ffc:	cmp	r4, #0
   18000:	sub	r0, r1, r0
   18004:	mov	r1, #0
   18008:	strne	r0, [r4]
   1800c:	ldrh	r2, [r5, #128]	; 0x80
   18010:	str	r1, [sp, #4]
   18014:	add	r0, r0, r2
   18018:	cmp	r2, #4
   1801c:	mov	r1, r2
   18020:	rsb	r2, r2, #0
   18024:	sub	r0, r0, #1
   18028:	movls	r1, #4
   1802c:	and	r7, r0, r2
   18030:	add	r0, sp, #4
   18034:	mov	r2, r7
   18038:	bl	1276c <posix_memalign@plt>
   1803c:	ldr	r6, [sp, #4]
   18040:	cmp	r0, #0
   18044:	cmpne	r6, #0
   18048:	bne	18098 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1804c:	cmp	r6, #0
   18050:	beq	180a0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   18054:	ldr	r0, [r5, #184]	; 0xb8
   18058:	cmp	r0, #0
   1805c:	beq	18098 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18060:	add	r0, r5, #188	; 0xbc
   18064:	mov	r1, r6
   18068:	mov	r2, r7
   1806c:	bl	185f8 <flatcc_emitter_copy_buffer@@Base>
   18070:	cmp	r0, #0
   18074:	bne	180ac <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18078:	ldr	r0, [pc, #56]	; 180b8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   1807c:	ldr	r1, [pc, #56]	; 180bc <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   18080:	ldr	r3, [pc, #56]	; 180c0 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   18084:	movw	r2, #1926	; 0x786
   18088:	add	r0, pc, r0
   1808c:	add	r1, pc, r1
   18090:	add	r3, pc, r3
   18094:	bl	127a8 <__assert_fail@plt>
   18098:	mov	r0, r6
   1809c:	bl	1270c <free@plt>
   180a0:	mov	r6, #0
   180a4:	cmp	r4, #0
   180a8:	strne	r6, [r4]
   180ac:	mov	r0, r6
   180b0:	sub	sp, fp, #16
   180b4:	pop	{r4, r5, r6, r7, fp, pc}
   180b8:	andeq	r2, r0, pc, lsl #10
   180bc:	andeq	r2, r0, r0, lsr #5
   180c0:	andeq	r3, r0, fp, lsl #4

000180c4 <flatcc_builder_aligned_alloc@@Base>:
   180c4:	push	{fp, lr}
   180c8:	mov	fp, sp
   180cc:	sub	sp, sp, #8
   180d0:	mov	r2, r1
   180d4:	mov	r1, r0
   180d8:	mov	r0, #0
   180dc:	cmp	r1, #4
   180e0:	str	r0, [sp, #4]
   180e4:	add	r0, sp, #4
   180e8:	movls	r1, #4
   180ec:	bl	1276c <posix_memalign@plt>
   180f0:	mov	r1, r0
   180f4:	ldr	r0, [sp, #4]
   180f8:	cmp	r1, #0
   180fc:	cmpne	r0, #0
   18100:	bne	1810c <flatcc_builder_aligned_alloc@@Base+0x48>
   18104:	mov	sp, fp
   18108:	pop	{fp, pc}
   1810c:	bl	1270c <free@plt>
   18110:	mov	r0, #0
   18114:	str	r0, [sp, #4]
   18118:	mov	sp, fp
   1811c:	pop	{fp, pc}

00018120 <flatcc_builder_aligned_free@@Base>:
   18120:	b	1270c <free@plt>

00018124 <flatcc_builder_get_emit_context@@Base>:
   18124:	ldr	r0, [r0, #36]	; 0x24
   18128:	bx	lr

0001812c <flatcc_emitter_recycle_page@@Base>:
   1812c:	ldr	r3, [r0]
   18130:	mov	r2, r0
   18134:	mvn	r0, #0
   18138:	cmp	r3, r1
   1813c:	ldrne	r2, [r2, #4]
   18140:	cmpne	r2, r1
   18144:	bne	1814c <flatcc_emitter_recycle_page@@Base+0x20>
   18148:	bx	lr
   1814c:	ldr	r0, [r1, #2944]	; 0xb80
   18150:	ldr	r2, [r1, #2948]	; 0xb84
   18154:	str	r2, [r0, #2948]	; 0xb84
   18158:	ldr	r2, [r1, #2948]	; 0xb84
   1815c:	str	r0, [r2, #2944]	; 0xb80
   18160:	ldr	r0, [r3, #2948]	; 0xb84
   18164:	str	r3, [r1, #2944]	; 0xb80
   18168:	str	r0, [r1, #2948]	; 0xb84
   1816c:	str	r1, [r0, #2944]	; 0xb80
   18170:	ldr	r0, [r1, #2944]	; 0xb80
   18174:	str	r1, [r0, #2948]	; 0xb84
   18178:	mov	r0, #0
   1817c:	bx	lr

00018180 <flatcc_emitter_reset@@Base>:
   18180:	push	{r4, sl, fp, lr}
   18184:	add	fp, sp, #8
   18188:	ldr	r1, [r0]
   1818c:	cmp	r1, #0
   18190:	beq	18248 <flatcc_emitter_reset@@Base+0xc8>
   18194:	mov	r4, r0
   18198:	add	r2, r1, #1472	; 0x5c0
   1819c:	mov	r0, #1472	; 0x5c0
   181a0:	mov	r3, #0
   181a4:	stmib	r4, {r1, r2}
   181a8:	str	r0, [r4, #12]
   181ac:	str	r2, [r4, #16]
   181b0:	str	r0, [r4, #20]
   181b4:	movw	r0, #64064	; 0xfa40
   181b8:	movt	r0, #65535	; 0xffff
   181bc:	str	r0, [r1, #2952]	; 0xb88
   181c0:	ldr	r2, [r4, #32]
   181c4:	ldr	r0, [r4, #24]
   181c8:	cmp	r2, #0
   181cc:	moveq	r2, r0
   181d0:	streq	r0, [r4, #32]
   181d4:	str	r3, [r4, #24]
   181d8:	add	r2, r2, r2, lsl #1
   181dc:	lsr	r2, r2, #2
   181e0:	add	r0, r2, r0, lsr #2
   181e4:	str	r0, [r4, #32]
   181e8:	ldr	r2, [r4, #28]
   181ec:	cmp	r2, r0, lsl #1
   181f0:	bls	18248 <flatcc_emitter_reset@@Base+0xc8>
   181f4:	mov	r2, r1
   181f8:	ldr	r0, [r2, #2944]!	; 0xb80
   181fc:	cmp	r0, r1
   18200:	beq	18248 <flatcc_emitter_reset@@Base+0xc8>
   18204:	ldr	r3, [r0, #2944]	; 0xb80
   18208:	str	r3, [r2]
   1820c:	ldr	r2, [r0, #2944]	; 0xb80
   18210:	str	r1, [r2, #2948]	; 0xb84
   18214:	bl	1270c <free@plt>
   18218:	ldr	r0, [r4, #28]
   1821c:	ldr	r1, [r4, #32]
   18220:	sub	r0, r0, #2944	; 0xb80
   18224:	cmp	r0, r1, lsl #1
   18228:	str	r0, [r4, #28]
   1822c:	popls	{r4, sl, fp, pc}
   18230:	ldr	r1, [r4, #4]
   18234:	ldr	r3, [r4]
   18238:	mov	r2, r1
   1823c:	ldr	r0, [r2, #2944]!	; 0xb80
   18240:	cmp	r0, r3
   18244:	bne	18204 <flatcc_emitter_reset@@Base+0x84>
   18248:	pop	{r4, sl, fp, pc}

0001824c <flatcc_emitter_clear@@Base>:
   1824c:	push	{r4, r5, r6, sl, fp, lr}
   18250:	add	fp, sp, #16
   18254:	ldr	r5, [r0]
   18258:	cmp	r5, #0
   1825c:	popeq	{r4, r5, r6, sl, fp, pc}
   18260:	mov	r4, r0
   18264:	ldr	r0, [r5, #2948]	; 0xb84
   18268:	mov	r6, #0
   1826c:	str	r6, [r0, #2944]	; 0xb80
   18270:	b	18280 <flatcc_emitter_clear@@Base+0x34>
   18274:	mov	r5, r0
   18278:	ldr	r0, [r0, #2948]	; 0xb84
   1827c:	bl	1270c <free@plt>
   18280:	ldr	r0, [r5, #2944]	; 0xb80
   18284:	cmp	r0, #0
   18288:	bne	18274 <flatcc_emitter_clear@@Base+0x28>
   1828c:	mov	r0, r5
   18290:	bl	1270c <free@plt>
   18294:	vmov.i32	q8, #0	; 0x00000000
   18298:	add	r0, r4, #16
   1829c:	vst1.32	{d16-d17}, [r0]
   182a0:	mov	r0, #32
   182a4:	vst1.32	{d16-d17}, [r4], r0
   182a8:	str	r6, [r4]
   182ac:	pop	{r4, r5, r6, sl, fp, pc}

000182b0 <flatcc_emitter@@Base>:
   182b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182b4:	add	fp, sp, #28
   182b8:	sub	sp, sp, #4
   182bc:	mov	r6, r0
   182c0:	mov	r7, r1
   182c4:	ldr	r0, [r0, #24]
   182c8:	ldr	r1, [fp, #8]
   182cc:	mov	r4, r2
   182d0:	cmn	r3, #1
   182d4:	mov	r9, r6
   182d8:	add	r0, r0, r1
   182dc:	str	r0, [r6, #24]
   182e0:	ble	18420 <flatcc_emitter@@Base+0x170>
   182e4:	ldr	r0, [r9, #20]!
   182e8:	cmp	r0, r1
   182ec:	bcs	18594 <flatcc_emitter@@Base+0x2e4>
   182f0:	mov	r8, #0
   182f4:	cmp	r4, #0
   182f8:	beq	185ec <flatcc_emitter@@Base+0x33c>
   182fc:	movw	sl, #64064	; 0xfa40
   18300:	movt	sl, #65535	; 0xffff
   18304:	ldr	r8, [r7, #4]
   18308:	cmp	r8, #0
   1830c:	beq	18410 <flatcc_emitter@@Base+0x160>
   18310:	ldr	r9, [r7]
   18314:	cmp	r8, r0
   18318:	mov	r5, r8
   1831c:	bls	183dc <flatcc_emitter@@Base+0x12c>
   18320:	mov	r5, r0
   18324:	cmp	r5, #0
   18328:	bne	183dc <flatcc_emitter@@Base+0x12c>
   1832c:	ldr	r5, [r6, #4]
   18330:	cmp	r5, #0
   18334:	beq	18348 <flatcc_emitter@@Base+0x98>
   18338:	ldr	r0, [r5, #2944]	; 0xb80
   1833c:	ldr	r1, [r6]
   18340:	cmp	r0, r1
   18344:	bne	18380 <flatcc_emitter@@Base+0xd0>
   18348:	movw	r0, #2956	; 0xb8c
   1834c:	bl	1273c <malloc@plt>
   18350:	cmp	r0, #0
   18354:	beq	185a4 <flatcc_emitter@@Base+0x2f4>
   18358:	ldr	r1, [r6, #28]
   1835c:	cmp	r5, #0
   18360:	add	r1, r1, #2944	; 0xb80
   18364:	str	r1, [r6, #28]
   18368:	beq	183ac <flatcc_emitter@@Base+0xfc>
   1836c:	ldr	r1, [r6]
   18370:	str	r1, [r0, #2944]	; 0xb80
   18374:	str	r5, [r0, #2948]	; 0xb84
   18378:	str	r0, [r1, #2948]	; 0xb84
   1837c:	str	r0, [r5, #2944]	; 0xb80
   18380:	mov	r5, #2944	; 0xb80
   18384:	str	r0, [r6, #4]
   18388:	str	r0, [r6, #16]
   1838c:	str	r5, [r6, #20]
   18390:	ldr	r1, [r0, #2948]	; 0xb84
   18394:	ldr	r1, [r1, #2952]	; 0xb88
   18398:	add	r1, r1, #2944	; 0xb80
   1839c:	str	r1, [r0, #2952]	; 0xb88
   183a0:	cmp	r8, r5
   183a4:	bhi	18324 <flatcc_emitter@@Base+0x74>
   183a8:	b	183d8 <flatcc_emitter@@Base+0x128>
   183ac:	add	r1, r0, #1472	; 0x5c0
   183b0:	mov	r5, #1472	; 0x5c0
   183b4:	str	r0, [r6]
   183b8:	stmib	r6, {r0, r1, r5}
   183bc:	str	r1, [r6, #16]
   183c0:	str	r5, [r6, #20]
   183c4:	str	r0, [r0, #2944]	; 0xb80
   183c8:	str	r0, [r0, #2948]	; 0xb84
   183cc:	str	sl, [r0, #2952]	; 0xb88
   183d0:	cmp	r8, r5
   183d4:	bhi	18324 <flatcc_emitter@@Base+0x74>
   183d8:	mov	r5, r8
   183dc:	ldr	r0, [r6, #16]
   183e0:	mov	r1, r9
   183e4:	mov	r2, r5
   183e8:	bl	12718 <memcpy@plt>
   183ec:	ldr	r0, [r6, #16]
   183f0:	ldr	r1, [r6, #20]
   183f4:	add	r9, r9, r5
   183f8:	subs	r8, r8, r5
   183fc:	add	r2, r0, r5
   18400:	sub	r0, r1, r5
   18404:	str	r2, [r6, #16]
   18408:	str	r0, [r6, #20]
   1840c:	bne	18314 <flatcc_emitter@@Base+0x64>
   18410:	subs	r4, r4, #1
   18414:	add	r7, r7, #8
   18418:	bne	18304 <flatcc_emitter@@Base+0x54>
   1841c:	b	1858c <flatcc_emitter@@Base+0x2dc>
   18420:	ldr	r0, [r9, #12]!
   18424:	cmp	r0, r1
   18428:	bcs	185ac <flatcc_emitter@@Base+0x2fc>
   1842c:	mov	r8, #0
   18430:	cmp	r4, #0
   18434:	beq	185ec <flatcc_emitter@@Base+0x33c>
   18438:	add	r0, r7, r4, lsl #3
   1843c:	movw	sl, #2952	; 0xb88
   18440:	ldr	r8, [r0, #-4]
   18444:	sub	r1, r0, #8
   18448:	str	r1, [sp]
   1844c:	cmp	r8, #0
   18450:	beq	18580 <flatcc_emitter@@Base+0x2d0>
   18454:	ldr	r0, [sp]
   18458:	ldr	r0, [r0]
   1845c:	add	r7, r0, r8
   18460:	ldr	r1, [r9]
   18464:	cmp	r8, r1
   18468:	bls	18550 <flatcc_emitter@@Base+0x2a0>
   1846c:	cmp	r1, #0
   18470:	mov	r5, r1
   18474:	bne	18554 <flatcc_emitter@@Base+0x2a4>
   18478:	ldr	r5, [r6]
   1847c:	cmp	r5, #0
   18480:	beq	184ac <flatcc_emitter@@Base+0x1fc>
   18484:	ldr	r0, [r5, #2948]	; 0xb84
   18488:	ldr	r1, [r6, #4]
   1848c:	cmp	r0, r1
   18490:	beq	184ac <flatcc_emitter@@Base+0x1fc>
   18494:	ldr	r1, [r5, #2952]	; 0xb88
   18498:	mov	r2, r0
   1849c:	sub	r1, r1, #2944	; 0xb80
   184a0:	str	r1, [r2, #2952]!	; 0xb88
   184a4:	str	r0, [r6]
   184a8:	b	184ec <flatcc_emitter@@Base+0x23c>
   184ac:	movw	r0, #2956	; 0xb8c
   184b0:	bl	1273c <malloc@plt>
   184b4:	cmp	r0, #0
   184b8:	beq	185a4 <flatcc_emitter@@Base+0x2f4>
   184bc:	ldr	r1, [r6, #28]
   184c0:	cmp	r5, #0
   184c4:	add	r1, r1, #2944	; 0xb80
   184c8:	str	r1, [r6, #28]
   184cc:	beq	18518 <flatcc_emitter@@Base+0x268>
   184d0:	ldr	r1, [r6, #4]
   184d4:	add	r2, r0, sl
   184d8:	str	r5, [r0, #2944]	; 0xb80
   184dc:	str	r1, [r0, #2948]	; 0xb84
   184e0:	str	r0, [r5, #2948]	; 0xb84
   184e4:	str	r0, [r1, #2944]	; 0xb80
   184e8:	str	r0, [r6]
   184ec:	add	r3, r0, #2944	; 0xb80
   184f0:	mov	r1, #2944	; 0xb80
   184f4:	str	r3, [r6, #8]
   184f8:	str	r1, [r6, #12]
   184fc:	ldr	r0, [r0, #2944]	; 0xb80
   18500:	ldr	r0, [r0, #2952]	; 0xb88
   18504:	sub	r0, r0, #2944	; 0xb80
   18508:	str	r0, [r2]
   1850c:	cmp	r8, r1
   18510:	bhi	1846c <flatcc_emitter@@Base+0x1bc>
   18514:	b	18550 <flatcc_emitter@@Base+0x2a0>
   18518:	add	r2, r0, #1472	; 0x5c0
   1851c:	mov	r1, #1472	; 0x5c0
   18520:	str	r0, [r6]
   18524:	stmib	r6, {r0, r2}
   18528:	str	r1, [r6, #12]
   1852c:	str	r2, [r6, #16]
   18530:	movw	r2, #64064	; 0xfa40
   18534:	str	r1, [r6, #20]
   18538:	str	r0, [r0, #2944]	; 0xb80
   1853c:	str	r0, [r0, #2948]	; 0xb84
   18540:	movt	r2, #65535	; 0xffff
   18544:	str	r2, [r0, #2952]	; 0xb88
   18548:	cmp	r8, r1
   1854c:	bhi	1846c <flatcc_emitter@@Base+0x1bc>
   18550:	mov	r5, r8
   18554:	sub	r0, r1, r5
   18558:	sub	r7, r7, r5
   1855c:	mov	r2, r5
   18560:	str	r0, [r6, #12]
   18564:	mov	r1, r7
   18568:	ldr	r0, [r6, #8]
   1856c:	sub	r0, r0, r5
   18570:	str	r0, [r6, #8]
   18574:	bl	12718 <memcpy@plt>
   18578:	subs	r8, r8, r5
   1857c:	bne	18460 <flatcc_emitter@@Base+0x1b0>
   18580:	ldr	r0, [sp]
   18584:	subs	r4, r4, #1
   18588:	bne	18440 <flatcc_emitter@@Base+0x190>
   1858c:	mov	r8, #0
   18590:	b	185ec <flatcc_emitter@@Base+0x33c>
   18594:	ldr	r5, [r6, #16]
   18598:	add	r2, r5, r1
   1859c:	str	r2, [r6, #16]
   185a0:	b	185b8 <flatcc_emitter@@Base+0x308>
   185a4:	mvn	r8, #0
   185a8:	b	185ec <flatcc_emitter@@Base+0x33c>
   185ac:	ldr	r2, [r6, #8]
   185b0:	sub	r5, r2, r1
   185b4:	str	r5, [r6, #8]
   185b8:	sub	r0, r0, r1
   185bc:	mov	r8, #0
   185c0:	cmp	r4, #0
   185c4:	str	r0, [r9]
   185c8:	beq	185ec <flatcc_emitter@@Base+0x33c>
   185cc:	ldm	r7, {r1, r2}
   185d0:	mov	r0, r5
   185d4:	bl	12718 <memcpy@plt>
   185d8:	ldr	r0, [r7, #4]
   185dc:	add	r7, r7, #8
   185e0:	subs	r4, r4, #1
   185e4:	add	r5, r5, r0
   185e8:	bne	185cc <flatcc_emitter@@Base+0x31c>
   185ec:	mov	r0, r8
   185f0:	sub	sp, fp, #28
   185f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000185f8 <flatcc_emitter_copy_buffer@@Base>:
   185f8:	push	{r4, r5, r6, sl, fp, lr}
   185fc:	add	fp, sp, #16
   18600:	mov	r3, r2
   18604:	ldr	r2, [r0, #24]
   18608:	mov	r5, #0
   1860c:	cmp	r2, r3
   18610:	bhi	18698 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18614:	mov	r4, r0
   18618:	ldr	r0, [r0]
   1861c:	cmp	r0, #0
   18620:	beq	18698 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18624:	mov	r6, r1
   18628:	ldr	r1, [r4, #4]
   1862c:	cmp	r0, r1
   18630:	beq	186a0 <flatcc_emitter_copy_buffer@@Base+0xa8>
   18634:	ldr	r0, [r4, #12]
   18638:	ldr	r1, [r4, #8]
   1863c:	rsb	r5, r0, #2944	; 0xb80
   18640:	mov	r0, r6
   18644:	mov	r2, r5
   18648:	bl	12718 <memcpy@plt>
   1864c:	ldm	r4, {r0, r1}
   18650:	add	r5, r6, r5
   18654:	ldr	r6, [r0, #2944]	; 0xb80
   18658:	cmp	r6, r1
   1865c:	beq	18684 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18660:	mov	r0, r5
   18664:	mov	r1, r6
   18668:	mov	r2, #2944	; 0xb80
   1866c:	bl	12718 <memcpy@plt>
   18670:	ldr	r6, [r6, #2944]	; 0xb80
   18674:	ldr	r0, [r4, #4]
   18678:	add	r5, r5, #2944	; 0xb80
   1867c:	cmp	r6, r0
   18680:	bne	18660 <flatcc_emitter_copy_buffer@@Base+0x68>
   18684:	ldr	r0, [r4, #20]
   18688:	mov	r1, r6
   1868c:	rsb	r2, r0, #2944	; 0xb80
   18690:	mov	r0, r5
   18694:	bl	12718 <memcpy@plt>
   18698:	mov	r0, r5
   1869c:	pop	{r4, r5, r6, sl, fp, pc}
   186a0:	ldr	r1, [r4, #8]
   186a4:	mov	r0, r6
   186a8:	bl	12718 <memcpy@plt>
   186ac:	mov	r0, r6
   186b0:	pop	{r4, r5, r6, sl, fp, pc}

000186b4 <flatcc_verify_error_string@@Base>:
   186b4:	cmp	r0, #36	; 0x24
   186b8:	ldrhi	r0, [pc, #24]	; 186d8 <flatcc_verify_error_string@@Base+0x24>
   186bc:	addhi	r0, pc, r0
   186c0:	bxhi	lr
   186c4:	ldr	r1, [pc, #8]	; 186d4 <flatcc_verify_error_string@@Base+0x20>
   186c8:	add	r1, pc, r1
   186cc:	ldr	r0, [r1, r0, lsl #2]
   186d0:	bx	lr
   186d4:	andeq	r3, r1, r0, lsr #15
   186d8:	andeq	r3, r0, fp, ror #5

000186dc <flatcc_verify_field@@Base>:
   186dc:	push	{r4, sl, fp, lr}
   186e0:	add	fp, sp, #8
   186e4:	ldrh	r4, [r0, #22]
   186e8:	mov	ip, #4
   186ec:	mov	lr, #0
   186f0:	add	r1, ip, r1, lsl #1
   186f4:	uxth	ip, r1
   186f8:	cmp	ip, r4
   186fc:	bcs	18758 <flatcc_verify_field@@Base+0x7c>
   18700:	ldr	r4, [r0, #12]
   18704:	uxtah	r1, r4, r1
   18708:	ldrh	ip, [r1]
   1870c:	cmp	ip, #0
   18710:	beq	18758 <flatcc_verify_field@@Base+0x7c>
   18714:	add	r1, ip, r2
   18718:	ldrh	r2, [r0, #20]
   1871c:	mov	lr, #13
   18720:	cmp	r1, r2
   18724:	bhi	18758 <flatcc_verify_field@@Base+0x7c>
   18728:	ldr	r1, [r0]
   1872c:	mov	lr, #0
   18730:	add	r2, r1, ip
   18734:	ldr	r1, [r0, #16]
   18738:	add	r4, r2, r1
   1873c:	sub	r1, r3, #1
   18740:	tst	r4, r1
   18744:	beq	18758 <flatcc_verify_field@@Base+0x7c>
   18748:	ldr	r0, [r0, #16]
   1874c:	add	r0, r2, r0
   18750:	ands	lr, r0, r1
   18754:	movwne	lr, #12
   18758:	mov	r0, lr
   1875c:	pop	{r4, sl, fp, pc}

00018760 <flatcc_verify_string_field@@Base>:
   18760:	push	{fp, lr}
   18764:	mov	fp, sp
   18768:	mov	lr, r2
   1876c:	ldrh	r2, [r0, #22]
   18770:	mov	r3, #4
   18774:	add	r1, r3, r1, lsl #1
   18778:	uxth	r3, r1
   1877c:	cmp	r3, r2
   18780:	bcs	1881c <flatcc_verify_string_field@@Base+0xbc>
   18784:	ldr	r2, [r0, #12]
   18788:	uxtah	r1, r2, r1
   1878c:	ldrh	r1, [r1]
   18790:	cmp	r1, #0
   18794:	beq	1881c <flatcc_verify_string_field@@Base+0xbc>
   18798:	ldrh	r2, [r0, #20]
   1879c:	add	r3, r1, #4
   187a0:	mov	lr, #13
   187a4:	cmp	r3, r2
   187a8:	bhi	18814 <flatcc_verify_string_field@@Base+0xb4>
   187ac:	ldr	r2, [r0, #16]
   187b0:	mov	lr, #12
   187b4:	add	r3, r2, r1
   187b8:	tst	r3, #3
   187bc:	bne	18814 <flatcc_verify_string_field@@Base+0xb4>
   187c0:	cmp	r3, #0
   187c4:	moveq	lr, #0
   187c8:	moveq	r0, lr
   187cc:	popeq	{fp, pc}
   187d0:	ldr	ip, [r0]
   187d4:	mov	lr, #17
   187d8:	ldr	r1, [ip, r3]
   187dc:	add	r1, r1, r3
   187e0:	tst	r1, #3
   187e4:	bne	18814 <flatcc_verify_string_field@@Base+0xb4>
   187e8:	cmp	r1, r3
   187ec:	bls	18814 <flatcc_verify_string_field@@Base+0xb4>
   187f0:	ldr	r3, [r0, #4]
   187f4:	add	r0, r1, #4
   187f8:	cmp	r3, r0
   187fc:	ldrcs	r1, [ip, r1]
   18800:	subcs	r2, r3, r0
   18804:	movcs	lr, #8
   18808:	addcs	r3, r1, #1
   1880c:	cmpcs	r2, r3
   18810:	bcs	1882c <flatcc_verify_string_field@@Base+0xcc>
   18814:	mov	r0, lr
   18818:	pop	{fp, pc}
   1881c:	cmp	lr, #0
   18820:	movwne	lr, #4
   18824:	mov	r0, lr
   18828:	pop	{fp, pc}
   1882c:	add	r0, ip, r0
   18830:	ldrb	lr, [r0, r1]
   18834:	cmp	lr, #0
   18838:	movwne	lr, #7
   1883c:	mov	r0, lr
   18840:	pop	{fp, pc}

00018844 <flatcc_verify_vector_field@@Base>:
   18844:	push	{r4, r5, fp, lr}
   18848:	add	fp, sp, #8
   1884c:	mov	r5, r2
   18850:	ldrh	r2, [r0, #22]
   18854:	mov	r4, #4
   18858:	add	r1, r4, r1, lsl #1
   1885c:	uxth	r4, r1
   18860:	cmp	r4, r2
   18864:	bcs	1892c <flatcc_verify_vector_field@@Base+0xe8>
   18868:	ldr	r2, [r0, #12]
   1886c:	uxtah	r1, r2, r1
   18870:	ldrh	r1, [r1]
   18874:	cmp	r1, #0
   18878:	beq	1892c <flatcc_verify_vector_field@@Base+0xe8>
   1887c:	ldrh	r2, [r0, #20]
   18880:	add	r4, r1, #4
   18884:	mov	r5, #13
   18888:	cmp	r4, r2
   1888c:	bhi	18924 <flatcc_verify_vector_field@@Base+0xe0>
   18890:	ldr	r2, [r0, #16]
   18894:	mov	r5, #12
   18898:	add	r1, r2, r1
   1889c:	tst	r1, #3
   188a0:	bne	18924 <flatcc_verify_vector_field@@Base+0xe0>
   188a4:	cmp	r1, #0
   188a8:	moveq	r5, #0
   188ac:	moveq	r0, r5
   188b0:	popeq	{r4, r5, fp, pc}
   188b4:	ldr	ip, [r0]
   188b8:	ldr	r4, [fp, #8]
   188bc:	mov	r5, #16
   188c0:	ldr	r2, [ip, r1]
   188c4:	cmp	r4, #4
   188c8:	movls	r4, #4
   188cc:	add	lr, r2, r1
   188d0:	cmp	lr, r1
   188d4:	bls	18924 <flatcc_verify_vector_field@@Base+0xe0>
   188d8:	ldr	r0, [r0, #4]
   188dc:	add	r1, lr, #4
   188e0:	cmp	r1, r0
   188e4:	bhi	18924 <flatcc_verify_vector_field@@Base+0xe0>
   188e8:	sub	r2, r4, #1
   188ec:	orr	r2, r2, #3
   188f0:	tst	r1, r2
   188f4:	bne	18924 <flatcc_verify_vector_field@@Base+0xe0>
   188f8:	ldr	r2, [fp, #12]
   188fc:	ldr	r1, [ip, lr]
   18900:	mov	r5, #25
   18904:	cmp	r1, r2
   18908:	bhi	18924 <flatcc_verify_vector_field@@Base+0xe0>
   1890c:	sub	r0, r0, #4
   18910:	mul	r1, r1, r3
   18914:	mov	r5, #0
   18918:	sub	r0, r0, lr
   1891c:	cmp	r0, r1
   18920:	movwcc	r5, #26
   18924:	mov	r0, r5
   18928:	pop	{r4, r5, fp, pc}
   1892c:	cmp	r5, #0
   18930:	movwne	r5, #4
   18934:	mov	r0, r5
   18938:	pop	{r4, r5, fp, pc}

0001893c <flatcc_verify_string_vector_field@@Base>:
   1893c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18940:	add	fp, sp, #24
   18944:	ldrh	r7, [r0, #22]
   18948:	mov	r3, #4
   1894c:	add	r1, r3, r1, lsl #1
   18950:	uxth	r3, r1
   18954:	cmp	r3, r7
   18958:	bcs	189a0 <flatcc_verify_string_vector_field@@Base+0x64>
   1895c:	ldr	r3, [r0, #12]
   18960:	uxtah	r1, r3, r1
   18964:	ldrh	r1, [r1]
   18968:	cmp	r1, #0
   1896c:	beq	189a0 <flatcc_verify_string_vector_field@@Base+0x64>
   18970:	ldrh	r3, [r0, #20]
   18974:	add	r7, r1, #4
   18978:	mov	r2, #13
   1897c:	cmp	r7, r3
   18980:	bhi	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18984:	ldr	r4, [r0, #16]
   18988:	mov	r2, #12
   1898c:	add	r6, r4, r1
   18990:	tst	r6, #3
   18994:	beq	189b0 <flatcc_verify_string_vector_field@@Base+0x74>
   18998:	mov	r0, r2
   1899c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   189a0:	cmp	r2, #0
   189a4:	movwne	r2, #4
   189a8:	mov	r0, r2
   189ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   189b0:	mov	r2, #0
   189b4:	cmp	r6, #0
   189b8:	beq	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   189bc:	ldr	r5, [r0]
   189c0:	mov	r2, #16
   189c4:	ldr	r7, [r5, r6]
   189c8:	add	r3, r7, r6
   189cc:	cmp	r3, r6
   189d0:	bls	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   189d4:	ldr	lr, [r0, #4]
   189d8:	add	r0, r3, #4
   189dc:	cmp	r0, lr
   189e0:	bhi	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   189e4:	ands	r0, r0, #3
   189e8:	bne	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   189ec:	ldr	ip, [r5, r3]
   189f0:	mov	r2, #25
   189f4:	cmn	ip, #-1073741823	; 0xc0000001
   189f8:	bhi	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   189fc:	sub	r0, lr, #4
   18a00:	mov	r2, #26
   18a04:	sub	r0, r0, r3
   18a08:	cmp	r0, ip, lsl #2
   18a0c:	bcc	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18a10:	cmp	ip, #0
   18a14:	mov	r2, #0
   18a18:	beq	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18a1c:	sub	r0, lr, #8
   18a20:	add	r9, r7, r4
   18a24:	sub	r0, r0, r1
   18a28:	sub	r0, r0, r7
   18a2c:	sub	r8, r0, r4
   18a30:	add	r0, r5, r9
   18a34:	mov	r5, #0
   18a38:	rsb	r4, r0, #0
   18a3c:	sub	r0, r1, r4
   18a40:	add	r3, r1, r9
   18a44:	mov	r2, #17
   18a48:	ldr	r6, [r0, #4]
   18a4c:	add	r7, r3, r6
   18a50:	add	r0, r7, #4
   18a54:	tst	r0, #3
   18a58:	bne	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18a5c:	add	r3, r3, #4
   18a60:	cmp	r0, r3
   18a64:	bls	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18a68:	add	r0, r7, #8
   18a6c:	cmp	lr, r0
   18a70:	bcc	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18a74:	add	r0, r1, r6
   18a78:	sub	r2, r8, r6
   18a7c:	sub	r0, r0, r4
   18a80:	ldr	r0, [r0, #4]
   18a84:	add	r3, r0, #1
   18a88:	cmp	r2, r3
   18a8c:	bcc	18ac8 <flatcc_verify_string_vector_field@@Base+0x18c>
   18a90:	add	r0, r6, r0
   18a94:	add	r0, r1, r0
   18a98:	sub	r0, r0, r4
   18a9c:	ldrb	r0, [r0, #8]
   18aa0:	cmp	r0, #0
   18aa4:	bne	18ad4 <flatcc_verify_string_vector_field@@Base+0x198>
   18aa8:	add	r5, r5, #1
   18aac:	sub	r8, r8, #4
   18ab0:	add	r9, r9, #4
   18ab4:	sub	r4, r4, #4
   18ab8:	mov	r2, #0
   18abc:	cmp	r5, ip
   18ac0:	bcc	18a3c <flatcc_verify_string_vector_field@@Base+0x100>
   18ac4:	b	18998 <flatcc_verify_string_vector_field@@Base+0x5c>
   18ac8:	mov	r2, #8
   18acc:	mov	r0, r2
   18ad0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18ad4:	mov	r2, #7
   18ad8:	mov	r0, r2
   18adc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00018ae0 <flatcc_verify_table_field@@Base>:
   18ae0:	push	{r4, r5, r6, sl, fp, lr}
   18ae4:	add	fp, sp, #16
   18ae8:	sub	sp, sp, #24
   18aec:	ldrh	r5, [r0, #22]
   18af0:	mov	r6, #4
   18af4:	add	r1, r6, r1, lsl #1
   18af8:	uxth	r6, r1
   18afc:	cmp	r6, r5
   18b00:	bcs	18c10 <flatcc_verify_table_field@@Base+0x130>
   18b04:	ldr	r6, [r0, #12]
   18b08:	uxtah	r1, r6, r1
   18b0c:	ldrh	r1, [r1]
   18b10:	cmp	r1, #0
   18b14:	beq	18c10 <flatcc_verify_table_field@@Base+0x130>
   18b18:	ldrh	r6, [r0, #20]
   18b1c:	add	r5, r1, #4
   18b20:	mov	r2, #13
   18b24:	cmp	r5, r6
   18b28:	bhi	18c18 <flatcc_verify_table_field@@Base+0x138>
   18b2c:	ldr	r2, [r0, #16]
   18b30:	add	r4, r2, r1
   18b34:	mov	r2, #12
   18b38:	tst	r4, #3
   18b3c:	bne	18c18 <flatcc_verify_table_field@@Base+0x138>
   18b40:	cmp	r4, #0
   18b44:	beq	18c24 <flatcc_verify_table_field@@Base+0x144>
   18b48:	ldm	r0, {r1, ip}
   18b4c:	ldr	r2, [r0, #8]
   18b50:	ldr	r0, [r1, r4]
   18b54:	subs	r2, r2, #1
   18b58:	str	r2, [sp, #8]
   18b5c:	beq	18c2c <flatcc_verify_table_field@@Base+0x14c>
   18b60:	add	r0, r0, r4
   18b64:	mov	r2, #15
   18b68:	tst	r0, #3
   18b6c:	bne	18c18 <flatcc_verify_table_field@@Base+0x138>
   18b70:	cmp	r0, r4
   18b74:	bls	18c18 <flatcc_verify_table_field@@Base+0x138>
   18b78:	add	r6, r0, #4
   18b7c:	cmp	r6, ip
   18b80:	bhi	18c18 <flatcc_verify_table_field@@Base+0x138>
   18b84:	str	r0, [sp, #16]
   18b88:	ldr	r2, [r1, r0]
   18b8c:	sub	r5, r0, r2
   18b90:	mov	r2, #29
   18b94:	tst	r5, #-2147483647	; 0x80000001
   18b98:	bne	18c18 <flatcc_verify_table_field@@Base+0x138>
   18b9c:	add	r4, r5, #2
   18ba0:	mov	r2, #27
   18ba4:	cmp	r4, ip
   18ba8:	bhi	18c18 <flatcc_verify_table_field@@Base+0x138>
   18bac:	mov	lr, r1
   18bb0:	mov	r2, #30
   18bb4:	ldrh	r6, [lr, r5]!
   18bb8:	tst	r6, #1
   18bbc:	strh	r6, [sp, #22]
   18bc0:	bne	18c18 <flatcc_verify_table_field@@Base+0x138>
   18bc4:	add	r5, r5, r6
   18bc8:	cmp	r5, ip
   18bcc:	bhi	18c18 <flatcc_verify_table_field@@Base+0x138>
   18bd0:	mov	r2, #28
   18bd4:	cmp	r6, #4
   18bd8:	bcc	18c18 <flatcc_verify_table_field@@Base+0x138>
   18bdc:	add	r2, r1, r4
   18be0:	sub	r0, ip, r0
   18be4:	ldrh	r4, [r2]
   18be8:	mov	r2, #20
   18bec:	cmp	r0, r4
   18bf0:	strh	r4, [sp, #20]
   18bf4:	bcc	18c18 <flatcc_verify_table_field@@Base+0x138>
   18bf8:	mov	r0, sp
   18bfc:	str	lr, [sp, #12]
   18c00:	stm	sp, {r1, ip}
   18c04:	blx	r3
   18c08:	mov	r2, r0
   18c0c:	b	18c18 <flatcc_verify_table_field@@Base+0x138>
   18c10:	cmp	r2, #0
   18c14:	movwne	r2, #4
   18c18:	mov	r0, r2
   18c1c:	sub	sp, fp, #16
   18c20:	pop	{r4, r5, r6, sl, fp, pc}
   18c24:	mov	r2, #0
   18c28:	b	18c18 <flatcc_verify_table_field@@Base+0x138>
   18c2c:	mov	r2, #3
   18c30:	b	18c18 <flatcc_verify_table_field@@Base+0x138>

00018c34 <flatcc_verify_table_vector_field@@Base>:
   18c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c38:	add	fp, sp, #28
   18c3c:	sub	sp, sp, #36	; 0x24
   18c40:	ldrh	r7, [r0, #22]
   18c44:	mov	r4, r3
   18c48:	mov	r3, #4
   18c4c:	add	r1, r3, r1, lsl #1
   18c50:	uxth	r3, r1
   18c54:	cmp	r3, r7
   18c58:	bcs	18e2c <flatcc_verify_table_vector_field@@Base+0x1f8>
   18c5c:	ldr	r3, [r0, #12]
   18c60:	uxtah	r1, r3, r1
   18c64:	ldrh	r1, [r1]
   18c68:	cmp	r1, #0
   18c6c:	beq	18e2c <flatcc_verify_table_vector_field@@Base+0x1f8>
   18c70:	ldrh	r3, [r0, #20]
   18c74:	add	r7, r1, #4
   18c78:	mov	r2, #13
   18c7c:	cmp	r7, r3
   18c80:	bhi	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18c84:	ldr	r3, [r0, #16]
   18c88:	mov	r2, #12
   18c8c:	add	r5, r3, r1
   18c90:	tst	r5, #3
   18c94:	bne	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18c98:	mov	r2, #0
   18c9c:	cmp	r5, #0
   18ca0:	beq	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18ca4:	ldr	r7, [r0, #8]
   18ca8:	cmp	r7, #1
   18cac:	blt	18e40 <flatcc_verify_table_vector_field@@Base+0x20c>
   18cb0:	ldr	sl, [r0]
   18cb4:	mov	r2, #16
   18cb8:	ldr	ip, [sl, r5]
   18cbc:	add	r6, ip, r5
   18cc0:	cmp	r6, r5
   18cc4:	bls	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18cc8:	ldr	lr, [r0, #4]
   18ccc:	add	r0, r6, #4
   18cd0:	cmp	r0, lr
   18cd4:	bhi	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18cd8:	ands	r0, r0, #3
   18cdc:	bne	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18ce0:	ldr	r9, [sl, r6]
   18ce4:	mov	r2, #25
   18ce8:	cmn	r9, #-1073741823	; 0xc0000001
   18cec:	bhi	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18cf0:	sub	r0, lr, #4
   18cf4:	mov	r2, #26
   18cf8:	sub	r6, r0, r6
   18cfc:	cmp	r6, r9, lsl #2
   18d00:	bcc	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18d04:	cmp	r9, #0
   18d08:	mov	r2, #0
   18d0c:	beq	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18d10:	sub	r0, r0, r1
   18d14:	str	r9, [sp]
   18d18:	sub	r0, r0, ip
   18d1c:	ldr	r9, [sp]
   18d20:	sub	r8, r0, r3
   18d24:	add	r0, ip, r3
   18d28:	add	r0, r0, r1
   18d2c:	mov	r1, #0
   18d30:	add	r5, r0, #4
   18d34:	sub	r0, r7, #2
   18d38:	str	r0, [sp, #4]
   18d3c:	ldr	r0, [sp, #4]
   18d40:	ldr	r2, [sl, r5]
   18d44:	cmp	r0, #0
   18d48:	str	r0, [sp, #20]
   18d4c:	beq	18f00 <flatcc_verify_table_vector_field@@Base+0x2cc>
   18d50:	add	r0, r5, r2
   18d54:	str	r1, [sp, #8]
   18d58:	add	ip, r0, #4
   18d5c:	tst	r0, #3
   18d60:	bne	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18d64:	cmp	r0, r5
   18d68:	bls	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18d6c:	cmp	ip, lr
   18d70:	bhi	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18d74:	str	r0, [sp, #28]
   18d78:	add	r3, sl, r2
   18d7c:	ldr	r7, [r3, r5]
   18d80:	sub	r6, r2, r7
   18d84:	add	r3, r5, r6
   18d88:	tst	r3, #-2147483647	; 0x80000001
   18d8c:	bne	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18d90:	add	r1, r3, #2
   18d94:	cmp	r1, lr
   18d98:	bhi	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18d9c:	add	r1, sl, r6
   18da0:	add	r1, r1, r5
   18da4:	ldrh	r6, [r1]
   18da8:	cmp	r6, #4
   18dac:	strh	r6, [sp, #34]	; 0x22
   18db0:	bcc	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18db4:	ands	r1, r6, #1
   18db8:	bne	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18dbc:	add	r1, r2, r6
   18dc0:	sub	r1, r1, r7
   18dc4:	add	r1, r5, r1
   18dc8:	cmp	r1, lr
   18dcc:	bhi	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18dd0:	add	r3, sl, r3
   18dd4:	sub	r2, r8, r2
   18dd8:	ldrh	r1, [r3, #2]
   18ddc:	cmp	r2, r1
   18de0:	strh	r1, [sp, #32]
   18de4:	bcc	18e48 <flatcc_verify_table_vector_field@@Base+0x214>
   18de8:	add	r0, sp, #12
   18dec:	str	sl, [sp, #12]
   18df0:	str	r3, [sp, #24]
   18df4:	mov	r6, lr
   18df8:	str	lr, [sp, #16]
   18dfc:	blx	r4
   18e00:	cmp	r0, #0
   18e04:	bne	18f10 <flatcc_verify_table_vector_field@@Base+0x2dc>
   18e08:	ldr	r1, [sp, #8]
   18e0c:	sub	r8, r8, #4
   18e10:	add	r5, r5, #4
   18e14:	mov	r2, #0
   18e18:	mov	lr, r6
   18e1c:	add	r1, r1, #1
   18e20:	cmp	r1, r9
   18e24:	bcc	18d3c <flatcc_verify_table_vector_field@@Base+0x108>
   18e28:	b	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e2c:	cmp	r2, #0
   18e30:	movwne	r2, #4
   18e34:	mov	r0, r2
   18e38:	sub	sp, fp, #28
   18e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e40:	mov	r2, #3
   18e44:	b	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e48:	ldr	r1, [sp, #4]
   18e4c:	str	r1, [sp, #20]
   18e50:	mov	r2, #15
   18e54:	tst	r0, #3
   18e58:	bne	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e5c:	cmp	r0, r5
   18e60:	bls	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e64:	cmp	ip, lr
   18e68:	bhi	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e6c:	str	r0, [sp, #28]
   18e70:	mov	r2, #29
   18e74:	ldr	r1, [sl, r0]
   18e78:	sub	r7, r0, r1
   18e7c:	tst	r7, #-2147483647	; 0x80000001
   18e80:	bne	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e84:	add	r3, r7, #2
   18e88:	mov	r2, #27
   18e8c:	cmp	r3, lr
   18e90:	bhi	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18e94:	mov	r1, sl
   18e98:	mov	r2, #30
   18e9c:	ldrh	r6, [r1, r7]!
   18ea0:	tst	r6, #1
   18ea4:	strh	r6, [sp, #34]	; 0x22
   18ea8:	bne	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18eac:	add	r7, r7, r6
   18eb0:	cmp	r7, lr
   18eb4:	bhi	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18eb8:	mov	r2, #28
   18ebc:	cmp	r6, #4
   18ec0:	bcc	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18ec4:	add	r2, sl, r3
   18ec8:	sub	r0, lr, r0
   18ecc:	mov	r5, lr
   18ed0:	ldrh	r3, [r2]
   18ed4:	mov	r2, #20
   18ed8:	cmp	r0, r3
   18edc:	strh	r3, [sp, #32]
   18ee0:	bcc	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18ee4:	add	r0, sp, #12
   18ee8:	str	sl, [sp, #12]
   18eec:	str	r1, [sp, #24]
   18ef0:	str	r5, [sp, #16]
   18ef4:	blx	r4
   18ef8:	mov	r2, r0
   18efc:	b	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18f00:	mov	r0, #0
   18f04:	mov	r2, #3
   18f08:	str	r0, [sp, #20]
   18f0c:	b	18e34 <flatcc_verify_table_vector_field@@Base+0x200>
   18f10:	ldr	r0, [sl, r5]
   18f14:	ldr	r1, [sp, #4]
   18f18:	mov	lr, r6
   18f1c:	add	r0, r0, r5
   18f20:	str	r1, [sp, #20]
   18f24:	add	ip, r0, #4
   18f28:	b	18e50 <flatcc_verify_table_vector_field@@Base+0x21c>

00018f2c <flatcc_verify_union_table@@Base>:
   18f2c:	push	{r4, r5, r6, sl, fp, lr}
   18f30:	add	fp, sp, #16
   18f34:	sub	sp, sp, #24
   18f38:	ldr	r5, [r0, #16]
   18f3c:	ldr	r3, [r0, #20]
   18f40:	ldr	ip, [r0]
   18f44:	ldr	r2, [r0, #4]
   18f48:	ldr	r0, [r0, #8]
   18f4c:	subs	r0, r0, #1
   18f50:	str	r0, [sp, #8]
   18f54:	moveq	r0, #3
   18f58:	subeq	sp, fp, #16
   18f5c:	popeq	{r4, r5, r6, sl, fp, pc}
   18f60:	add	r3, r3, r5
   18f64:	mov	r0, #15
   18f68:	tst	r3, #3
   18f6c:	bne	1900c <flatcc_verify_union_table@@Base+0xe0>
   18f70:	cmp	r3, r5
   18f74:	bls	1900c <flatcc_verify_union_table@@Base+0xe0>
   18f78:	add	r6, r3, #4
   18f7c:	cmp	r6, r2
   18f80:	bhi	1900c <flatcc_verify_union_table@@Base+0xe0>
   18f84:	str	r3, [sp, #16]
   18f88:	ldr	r0, [ip, r3]
   18f8c:	sub	r5, r3, r0
   18f90:	mov	r0, #29
   18f94:	tst	r5, #-2147483647	; 0x80000001
   18f98:	bne	1900c <flatcc_verify_union_table@@Base+0xe0>
   18f9c:	add	r4, r5, #2
   18fa0:	mov	r0, #27
   18fa4:	cmp	r4, r2
   18fa8:	bhi	1900c <flatcc_verify_union_table@@Base+0xe0>
   18fac:	mov	lr, ip
   18fb0:	mov	r0, #30
   18fb4:	ldrh	r6, [lr, r5]!
   18fb8:	tst	r6, #1
   18fbc:	strh	r6, [sp, #22]
   18fc0:	bne	1900c <flatcc_verify_union_table@@Base+0xe0>
   18fc4:	add	r5, r5, r6
   18fc8:	cmp	r5, r2
   18fcc:	bhi	1900c <flatcc_verify_union_table@@Base+0xe0>
   18fd0:	mov	r0, #28
   18fd4:	cmp	r6, #4
   18fd8:	bcc	1900c <flatcc_verify_union_table@@Base+0xe0>
   18fdc:	add	r0, ip, r4
   18fe0:	sub	r3, r2, r3
   18fe4:	ldrh	r4, [r0]
   18fe8:	mov	r0, #20
   18fec:	cmp	r3, r4
   18ff0:	strh	r4, [sp, #20]
   18ff4:	bcc	1900c <flatcc_verify_union_table@@Base+0xe0>
   18ff8:	mov	r0, sp
   18ffc:	str	ip, [sp]
   19000:	str	lr, [sp, #12]
   19004:	str	r2, [sp, #4]
   19008:	blx	r1
   1900c:	sub	sp, fp, #16
   19010:	pop	{r4, r5, r6, sl, fp, pc}

00019014 <flatcc_verify_union_struct@@Base>:
   19014:	push	{fp, lr}
   19018:	mov	fp, sp
   1901c:	ldr	lr, [r0, #20]
   19020:	mov	r3, r0
   19024:	mov	r0, #18
   19028:	cmp	lr, #0
   1902c:	beq	19068 <flatcc_verify_union_struct@@Base+0x54>
   19030:	ldr	ip, [r3, #4]
   19034:	ldr	r3, [r3, #16]
   19038:	add	r3, r3, lr
   1903c:	cmp	r3, ip
   19040:	bhi	19068 <flatcc_verify_union_struct@@Base+0x54>
   19044:	adds	r1, r3, r1
   19048:	mov	r0, #10
   1904c:	bcs	19068 <flatcc_verify_union_struct@@Base+0x54>
   19050:	mov	r0, #9
   19054:	cmp	r1, ip
   19058:	pophi	{fp, pc}
   1905c:	sub	r0, r2, #1
   19060:	ands	r0, r3, r0
   19064:	movwne	r0, #11
   19068:	pop	{fp, pc}

0001906c <flatcc_verify_union_string@@Base>:
   1906c:	mov	r1, r0
   19070:	ldr	r3, [r0, #16]
   19074:	ldr	r0, [r0, #20]
   19078:	add	r2, r0, r3
   1907c:	mov	r0, #17
   19080:	tst	r2, #3
   19084:	bne	190d8 <flatcc_verify_union_string@@Base+0x6c>
   19088:	cmp	r2, r3
   1908c:	bls	190d8 <flatcc_verify_union_string@@Base+0x6c>
   19090:	ldr	r3, [r1, #4]
   19094:	add	ip, r2, #4
   19098:	cmp	r3, ip
   1909c:	bcc	190d8 <flatcc_verify_union_string@@Base+0x6c>
   190a0:	push	{fp, lr}
   190a4:	mov	fp, sp
   190a8:	ldr	r1, [r1]
   190ac:	sub	lr, r3, ip
   190b0:	mov	r0, #8
   190b4:	ldr	r2, [r1, r2]
   190b8:	add	r3, r2, #1
   190bc:	cmp	lr, r3
   190c0:	pop	{fp, lr}
   190c4:	bxcc	lr
   190c8:	add	r0, r1, ip
   190cc:	ldrb	r0, [r0, r2]
   190d0:	cmp	r0, #0
   190d4:	movwne	r0, #7
   190d8:	bx	lr

000190dc <flatcc_verify_buffer_header@@Base>:
   190dc:	push	{r4, sl, fp, lr}
   190e0:	add	fp, sp, #8
   190e4:	sub	sp, sp, #8
   190e8:	mov	r4, r0
   190ec:	mov	r0, #5
   190f0:	tst	r4, #3
   190f4:	bne	19148 <flatcc_verify_buffer_header@@Base+0x6c>
   190f8:	mov	r0, #6
   190fc:	cmn	r1, #9
   19100:	bhi	19148 <flatcc_verify_buffer_header@@Base+0x6c>
   19104:	mov	r0, #1
   19108:	cmp	r1, #8
   1910c:	bcc	19148 <flatcc_verify_buffer_header@@Base+0x6c>
   19110:	cmp	r2, #0
   19114:	beq	19150 <flatcc_verify_buffer_header@@Base+0x74>
   19118:	mov	r0, #0
   1911c:	mov	r1, r2
   19120:	mov	r2, #4
   19124:	str	r0, [sp, #4]
   19128:	add	r0, sp, #4
   1912c:	bl	12784 <strncpy@plt>
   19130:	ldr	r1, [sp, #4]
   19134:	cmp	r1, #0
   19138:	ldrne	r2, [r4, #4]
   1913c:	movne	r0, #2
   19140:	cmpne	r2, r1
   19144:	moveq	r0, #0
   19148:	sub	sp, fp, #8
   1914c:	pop	{r4, sl, fp, pc}
   19150:	mov	r0, #0
   19154:	sub	sp, fp, #8
   19158:	pop	{r4, sl, fp, pc}

0001915c <flatcc_verify_typed_buffer_header@@Base>:
   1915c:	mov	r3, r0
   19160:	mov	r0, #5
   19164:	tst	r3, #3
   19168:	bne	1919c <flatcc_verify_typed_buffer_header@@Base+0x40>
   1916c:	mov	r0, #6
   19170:	cmn	r1, #9
   19174:	bhi	1919c <flatcc_verify_typed_buffer_header@@Base+0x40>
   19178:	mov	r0, #1
   1917c:	cmp	r1, #8
   19180:	bxcc	lr
   19184:	cmp	r2, #0
   19188:	beq	191a0 <flatcc_verify_typed_buffer_header@@Base+0x44>
   1918c:	ldr	r1, [r3, #4]
   19190:	mov	r0, #2
   19194:	cmp	r1, r2
   19198:	moveq	r0, #0
   1919c:	bx	lr
   191a0:	mov	r0, #0
   191a4:	bx	lr

000191a8 <flatcc_verify_struct_as_root@@Base>:
   191a8:	push	{r4, r5, r6, r7, fp, lr}
   191ac:	add	fp, sp, #16
   191b0:	sub	sp, sp, #8
   191b4:	mov	r5, r0
   191b8:	mov	r0, #5
   191bc:	tst	r5, #3
   191c0:	bne	19258 <flatcc_verify_struct_as_root@@Base+0xb0>
   191c4:	mov	r4, r1
   191c8:	mov	r0, #6
   191cc:	cmn	r1, #9
   191d0:	bhi	19258 <flatcc_verify_struct_as_root@@Base+0xb0>
   191d4:	mov	r0, #1
   191d8:	cmp	r4, #8
   191dc:	bcc	19258 <flatcc_verify_struct_as_root@@Base+0xb0>
   191e0:	mov	r6, r3
   191e4:	mov	r7, r2
   191e8:	cmp	r2, #0
   191ec:	beq	1921c <flatcc_verify_struct_as_root@@Base+0x74>
   191f0:	mov	r0, #0
   191f4:	mov	r1, r7
   191f8:	mov	r2, #4
   191fc:	str	r0, [sp]
   19200:	mov	r0, sp
   19204:	bl	12784 <strncpy@plt>
   19208:	ldr	r0, [sp]
   1920c:	cmp	r0, #0
   19210:	ldrne	r1, [r5, #4]
   19214:	cmpne	r1, r0
   19218:	bne	19260 <flatcc_verify_struct_as_root@@Base+0xb8>
   1921c:	ldr	r1, [r5]
   19220:	mov	r0, #18
   19224:	sub	r2, r1, #1
   19228:	cmp	r2, r4
   1922c:	bcs	19258 <flatcc_verify_struct_as_root@@Base+0xb0>
   19230:	adds	r2, r1, r6
   19234:	mov	r0, #10
   19238:	bcs	19258 <flatcc_verify_struct_as_root@@Base+0xb0>
   1923c:	mov	r0, #9
   19240:	cmp	r2, r4
   19244:	bhi	19258 <flatcc_verify_struct_as_root@@Base+0xb0>
   19248:	ldr	r0, [fp, #8]
   1924c:	sub	r0, r0, #1
   19250:	ands	r0, r1, r0
   19254:	movwne	r0, #11
   19258:	sub	sp, fp, #16
   1925c:	pop	{r4, r5, r6, r7, fp, pc}
   19260:	mov	r0, #0
   19264:	mov	r1, r7
   19268:	mov	r2, #4
   1926c:	str	r0, [sp, #4]
   19270:	add	r0, sp, #4
   19274:	bl	12784 <strncpy@plt>
   19278:	ldr	r1, [sp, #4]
   1927c:	ldr	r0, [r5, #4]
   19280:	subs	r0, r0, r1
   19284:	movwne	r0, #2
   19288:	cmp	r1, #0
   1928c:	moveq	r0, r1
   19290:	sub	sp, fp, #16
   19294:	pop	{r4, r5, r6, r7, fp, pc}

00019298 <flatcc_verify_struct_as_typed_root@@Base>:
   19298:	push	{fp, lr}
   1929c:	mov	fp, sp
   192a0:	mov	ip, r0
   192a4:	mov	r0, #5
   192a8:	tst	ip, #3
   192ac:	bne	1931c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   192b0:	mov	r0, #6
   192b4:	cmn	r1, #9
   192b8:	bhi	1931c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   192bc:	mov	r0, #1
   192c0:	cmp	r1, #8
   192c4:	bcc	1931c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   192c8:	cmp	r2, #0
   192cc:	beq	192e0 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   192d0:	ldr	lr, [ip, #4]
   192d4:	mov	r0, #2
   192d8:	cmp	lr, r2
   192dc:	bne	1931c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   192e0:	ldr	ip, [ip]
   192e4:	mov	r0, #18
   192e8:	sub	r2, ip, #1
   192ec:	cmp	r2, r1
   192f0:	bcs	1931c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   192f4:	adds	r3, ip, r3
   192f8:	mov	r0, #10
   192fc:	bcs	1931c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19300:	mov	r0, #9
   19304:	cmp	r3, r1
   19308:	pophi	{fp, pc}
   1930c:	ldr	r0, [fp, #8]
   19310:	sub	r0, r0, #1
   19314:	ands	r0, ip, r0
   19318:	movwne	r0, #11
   1931c:	pop	{fp, pc}

00019320 <flatcc_verify_table_as_root@@Base>:
   19320:	push	{r4, r5, r6, r7, fp, lr}
   19324:	add	fp, sp, #16
   19328:	sub	sp, sp, #24
   1932c:	mov	r4, r0
   19330:	mov	r0, #5
   19334:	tst	r4, #3
   19338:	bne	19444 <flatcc_verify_table_as_root@@Base+0x124>
   1933c:	mov	r6, r1
   19340:	mov	r0, #6
   19344:	cmn	r1, #9
   19348:	bhi	19444 <flatcc_verify_table_as_root@@Base+0x124>
   1934c:	mov	r0, #1
   19350:	cmp	r6, #8
   19354:	bcc	19444 <flatcc_verify_table_as_root@@Base+0x124>
   19358:	mov	r5, r3
   1935c:	mov	r7, r2
   19360:	cmp	r2, #0
   19364:	beq	19394 <flatcc_verify_table_as_root@@Base+0x74>
   19368:	mov	r0, #0
   1936c:	mov	r1, r7
   19370:	mov	r2, #4
   19374:	str	r0, [sp]
   19378:	mov	r0, sp
   1937c:	bl	12784 <strncpy@plt>
   19380:	ldr	r0, [sp]
   19384:	cmp	r0, #0
   19388:	ldrne	r1, [r4, #4]
   1938c:	cmpne	r1, r0
   19390:	bne	1944c <flatcc_verify_table_as_root@@Base+0x12c>
   19394:	ldr	r1, [r4]
   19398:	mov	r0, #99	; 0x63
   1939c:	str	r0, [sp, #8]
   193a0:	mov	r0, #15
   193a4:	tst	r1, #3
   193a8:	bne	19444 <flatcc_verify_table_as_root@@Base+0x124>
   193ac:	cmp	r1, #0
   193b0:	beq	19444 <flatcc_verify_table_as_root@@Base+0x124>
   193b4:	add	r2, r1, #4
   193b8:	cmp	r2, r6
   193bc:	bhi	19444 <flatcc_verify_table_as_root@@Base+0x124>
   193c0:	str	r1, [sp, #16]
   193c4:	ldr	r0, [r4, r1]
   193c8:	sub	r7, r1, r0
   193cc:	mov	r0, #29
   193d0:	tst	r7, #-2147483647	; 0x80000001
   193d4:	bne	19444 <flatcc_verify_table_as_root@@Base+0x124>
   193d8:	add	r3, r7, #2
   193dc:	mov	r0, #27
   193e0:	cmp	r3, r6
   193e4:	bhi	19444 <flatcc_verify_table_as_root@@Base+0x124>
   193e8:	mov	ip, r4
   193ec:	mov	r0, #30
   193f0:	ldrh	r2, [ip, r7]!
   193f4:	tst	r2, #1
   193f8:	strh	r2, [sp, #22]
   193fc:	bne	19444 <flatcc_verify_table_as_root@@Base+0x124>
   19400:	add	r7, r7, r2
   19404:	cmp	r7, r6
   19408:	bhi	19444 <flatcc_verify_table_as_root@@Base+0x124>
   1940c:	mov	r0, #28
   19410:	cmp	r2, #4
   19414:	bcc	19444 <flatcc_verify_table_as_root@@Base+0x124>
   19418:	add	r0, r4, r3
   1941c:	sub	r1, r6, r1
   19420:	ldrh	r2, [r0]
   19424:	mov	r0, #20
   19428:	cmp	r1, r2
   1942c:	strh	r2, [sp, #20]
   19430:	bcc	19444 <flatcc_verify_table_as_root@@Base+0x124>
   19434:	mov	r0, sp
   19438:	str	ip, [sp, #12]
   1943c:	stm	sp, {r4, r6}
   19440:	blx	r5
   19444:	sub	sp, fp, #16
   19448:	pop	{r4, r5, r6, r7, fp, pc}
   1944c:	mov	r0, #0
   19450:	mov	r1, r7
   19454:	mov	r2, #4
   19458:	str	r0, [sp]
   1945c:	mov	r0, sp
   19460:	bl	12784 <strncpy@plt>
   19464:	ldr	r1, [sp]
   19468:	ldr	r0, [r4, #4]
   1946c:	subs	r0, r0, r1
   19470:	movwne	r0, #2
   19474:	cmp	r1, #0
   19478:	moveq	r0, r1
   1947c:	sub	sp, fp, #16
   19480:	pop	{r4, r5, r6, r7, fp, pc}

00019484 <flatcc_verify_table_as_typed_root@@Base>:
   19484:	push	{r4, r5, r6, sl, fp, lr}
   19488:	add	fp, sp, #16
   1948c:	sub	sp, sp, #24
   19490:	mov	ip, #5
   19494:	tst	r0, #3
   19498:	bne	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1949c:	mov	ip, #6
   194a0:	cmn	r1, #9
   194a4:	bhi	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194a8:	mov	ip, #1
   194ac:	cmp	r1, #8
   194b0:	bcc	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194b4:	cmp	r2, #0
   194b8:	beq	194cc <flatcc_verify_table_as_typed_root@@Base+0x48>
   194bc:	ldr	r6, [r0, #4]
   194c0:	mov	ip, #2
   194c4:	cmp	r6, r2
   194c8:	bne	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194cc:	ldr	r2, [r0]
   194d0:	mov	r6, #99	; 0x63
   194d4:	mov	ip, #15
   194d8:	str	r6, [sp, #8]
   194dc:	tst	r2, #3
   194e0:	bne	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194e4:	cmp	r2, #0
   194e8:	beq	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194ec:	add	r6, r2, #4
   194f0:	cmp	r6, r1
   194f4:	bhi	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194f8:	str	r2, [sp, #16]
   194fc:	mov	ip, #29
   19500:	ldr	r6, [r0, r2]
   19504:	sub	r5, r2, r6
   19508:	tst	r5, #-2147483647	; 0x80000001
   1950c:	bne	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19510:	add	r4, r5, #2
   19514:	mov	ip, #27
   19518:	cmp	r4, r1
   1951c:	bhi	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19520:	mov	lr, r0
   19524:	mov	ip, #30
   19528:	ldrh	r6, [lr, r5]!
   1952c:	tst	r6, #1
   19530:	strh	r6, [sp, #22]
   19534:	bne	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19538:	add	r5, r5, r6
   1953c:	cmp	r5, r1
   19540:	bhi	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19544:	mov	ip, #28
   19548:	cmp	r6, #4
   1954c:	bcc	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19550:	add	r6, r0, r4
   19554:	sub	r2, r1, r2
   19558:	mov	ip, #20
   1955c:	ldrh	r4, [r6]
   19560:	cmp	r2, r4
   19564:	strh	r4, [sp, #20]
   19568:	bcc	19580 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1956c:	str	lr, [sp, #12]
   19570:	stm	sp, {r0, r1}
   19574:	mov	r0, sp
   19578:	blx	r3
   1957c:	mov	ip, r0
   19580:	mov	r0, ip
   19584:	sub	sp, fp, #16
   19588:	pop	{r4, r5, r6, sl, fp, pc}

0001958c <flatcc_verify_struct_as_nested_root@@Base>:
   1958c:	push	{r4, r5, r6, sl, fp, lr}
   19590:	add	fp, sp, #16
   19594:	sub	sp, sp, #8
   19598:	ldrh	r5, [r0, #22]
   1959c:	mov	r6, #4
   195a0:	ldr	lr, [fp, #12]
   195a4:	add	r1, r6, r1, lsl #1
   195a8:	uxth	r4, r1
   195ac:	cmp	r4, r5
   195b0:	bcs	19634 <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   195b4:	ldr	ip, [r0, #12]
   195b8:	ldrh	r6, [ip, r4]!
   195bc:	cmp	r6, #0
   195c0:	beq	19634 <flatcc_verify_struct_as_nested_root@@Base+0xa8>
   195c4:	ldrh	r1, [r0, #20]
   195c8:	add	r4, r6, #4
   195cc:	cmp	r4, r1
   195d0:	bhi	1964c <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   195d4:	ldr	r1, [r0, #16]
   195d8:	add	r5, r1, r6
   195dc:	tst	r5, #3
   195e0:	bne	1964c <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   195e4:	cmp	r5, #0
   195e8:	beq	196f8 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   195ec:	ldr	r1, [r0]
   195f0:	ldr	r4, [r1, r5]
   195f4:	add	r4, r4, r5
   195f8:	cmp	r4, r5
   195fc:	bls	1964c <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   19600:	ldr	r5, [r0, #4]
   19604:	add	r6, r4, #4
   19608:	cmp	r6, r5
   1960c:	bhi	1964c <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   19610:	ands	r6, r6, #3
   19614:	bne	1964c <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   19618:	ldr	r1, [r1, r4]
   1961c:	sub	r5, r5, #4
   19620:	sub	r5, r5, r4
   19624:	mul	r1, r1, lr
   19628:	cmp	r5, r1
   1962c:	bcc	1964c <flatcc_verify_struct_as_nested_root@@Base+0xc0>
   19630:	b	196f8 <flatcc_verify_struct_as_nested_root@@Base+0x16c>
   19634:	cmp	r2, #0
   19638:	beq	196e4 <flatcc_verify_struct_as_nested_root@@Base+0x158>
   1963c:	cmp	r4, r5
   19640:	bcs	196d8 <flatcc_verify_struct_as_nested_root@@Base+0x14c>
   19644:	ldr	r3, [r0, #12]
   19648:	uxtah	ip, r3, r1
   1964c:	ldrh	r1, [ip]
   19650:	cmp	r1, #0
   19654:	beq	196d8 <flatcc_verify_struct_as_nested_root@@Base+0x14c>
   19658:	ldrh	r3, [r0, #20]
   1965c:	add	r6, r1, #4
   19660:	mov	r2, #13
   19664:	cmp	r6, r3
   19668:	bhi	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   1966c:	ldr	r2, [r0, #16]
   19670:	add	r6, r2, r1
   19674:	mov	r2, #12
   19678:	tst	r6, #3
   1967c:	bne	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   19680:	cmp	r6, #0
   19684:	beq	1974c <flatcc_verify_struct_as_nested_root@@Base+0x1c0>
   19688:	ldr	r1, [r0]
   1968c:	ldr	r2, [r1, r6]
   19690:	add	r3, r2, r6
   19694:	mov	r2, #16
   19698:	cmp	r3, r6
   1969c:	bls	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   196a0:	ldr	r0, [r0, #4]
   196a4:	add	r6, r3, #4
   196a8:	cmp	r6, r0
   196ac:	bhi	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   196b0:	ands	r6, r6, #3
   196b4:	bne	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   196b8:	ldr	r1, [r1, r3]
   196bc:	sub	r0, r0, #4
   196c0:	mov	r2, #0
   196c4:	sub	r0, r0, r3
   196c8:	mul	r1, r1, lr
   196cc:	cmp	r0, r1
   196d0:	movwcc	r2, #26
   196d4:	b	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   196d8:	cmp	r2, #0
   196dc:	movwne	r2, #4
   196e0:	b	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   196e4:	mov	r2, #0
   196e8:	cmp	r4, r5
   196ec:	bcs	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   196f0:	ldr	r2, [r0, #12]
   196f4:	uxtah	ip, r2, r1
   196f8:	ldrh	r1, [ip]
   196fc:	mov	r2, #0
   19700:	cmp	r1, #0
   19704:	ldrne	r6, [r0]
   19708:	ldrne	r0, [r0, #16]
   1970c:	addne	r0, r6, r0
   19710:	addsne	r0, r0, r1
   19714:	bne	19724 <flatcc_verify_struct_as_nested_root@@Base+0x198>
   19718:	mov	r0, r2
   1971c:	sub	sp, fp, #16
   19720:	pop	{r4, r5, r6, sl, fp, pc}
   19724:	ldr	r2, [r0]
   19728:	ldr	ip, [fp, #8]
   1972c:	ldr	r1, [r2, r0]!
   19730:	str	lr, [sp]
   19734:	add	r0, r2, #4
   19738:	mov	r2, r3
   1973c:	mov	r3, ip
   19740:	bl	191a8 <flatcc_verify_struct_as_root@@Base>
   19744:	sub	sp, fp, #16
   19748:	pop	{r4, r5, r6, sl, fp, pc}
   1974c:	mov	r2, #0
   19750:	b	19718 <flatcc_verify_struct_as_nested_root@@Base+0x18c>

00019754 <flatcc_verify_table_as_nested_root@@Base>:
   19754:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19758:	add	fp, sp, #24
   1975c:	sub	sp, sp, #24
   19760:	mov	r4, r0
   19764:	mov	r0, #4
   19768:	ldr	ip, [fp, #8]
   1976c:	mov	r5, r3
   19770:	ldrh	r6, [r4, #22]
   19774:	add	r3, r0, r1, lsl #1
   19778:	uxth	r7, r3
   1977c:	cmp	r7, r6
   19780:	bcs	19804 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   19784:	ldr	r1, [r4, #12]
   19788:	ldrh	r0, [r1, r7]!
   1978c:	cmp	r0, #0
   19790:	beq	19804 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   19794:	ldrh	r3, [r4, #20]
   19798:	add	r7, r0, #4
   1979c:	cmp	r7, r3
   197a0:	bhi	1981c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197a4:	ldr	r3, [r4, #16]
   197a8:	add	r0, r3, r0
   197ac:	tst	r0, #3
   197b0:	bne	1981c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197b4:	cmp	r0, #0
   197b8:	beq	198c8 <flatcc_verify_table_as_nested_root@@Base+0x174>
   197bc:	ldr	r3, [r4]
   197c0:	ldr	r7, [r3, r0]
   197c4:	add	r7, r7, r0
   197c8:	cmp	r7, r0
   197cc:	bls	1981c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197d0:	ldr	r0, [r4, #4]
   197d4:	add	r6, r7, #4
   197d8:	cmp	r6, r0
   197dc:	bhi	1981c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197e0:	ands	r6, r6, #3
   197e4:	bne	1981c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   197e8:	ldr	r3, [r3, r7]
   197ec:	sub	r0, r0, #4
   197f0:	sub	r0, r0, r7
   197f4:	mul	r3, r3, ip
   197f8:	cmp	r0, r3
   197fc:	bcc	1981c <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19800:	b	198c8 <flatcc_verify_table_as_nested_root@@Base+0x174>
   19804:	cmp	r2, #0
   19808:	beq	198b4 <flatcc_verify_table_as_nested_root@@Base+0x160>
   1980c:	cmp	r7, r6
   19810:	bcs	198a8 <flatcc_verify_table_as_nested_root@@Base+0x154>
   19814:	ldr	r0, [r4, #12]
   19818:	uxtah	r1, r0, r3
   1981c:	ldrh	r0, [r1]
   19820:	cmp	r0, #0
   19824:	beq	198a8 <flatcc_verify_table_as_nested_root@@Base+0x154>
   19828:	ldrh	r1, [r4, #20]
   1982c:	add	r3, r0, #4
   19830:	mov	r2, #13
   19834:	cmp	r3, r1
   19838:	bhi	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1983c:	ldr	r1, [r4, #16]
   19840:	mov	r2, #12
   19844:	add	r0, r1, r0
   19848:	tst	r0, #3
   1984c:	bne	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19850:	cmp	r0, #0
   19854:	beq	19a1c <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19858:	ldr	r1, [r4]
   1985c:	ldr	r2, [r1, r0]
   19860:	add	r3, r2, r0
   19864:	mov	r2, #16
   19868:	cmp	r3, r0
   1986c:	bls	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19870:	ldr	r0, [r4, #4]
   19874:	add	r7, r3, #4
   19878:	cmp	r7, r0
   1987c:	bhi	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19880:	ands	r7, r7, #3
   19884:	bne	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19888:	ldr	r1, [r1, r3]
   1988c:	sub	r0, r0, #4
   19890:	mov	r2, #0
   19894:	sub	r0, r0, r3
   19898:	mul	r1, r1, ip
   1989c:	cmp	r0, r1
   198a0:	movwcc	r2, #26
   198a4:	b	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   198a8:	cmp	r2, #0
   198ac:	movwne	r2, #4
   198b0:	b	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   198b4:	mov	r2, #0
   198b8:	cmp	r7, r6
   198bc:	bcs	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   198c0:	ldr	r0, [r4, #12]
   198c4:	uxtah	r1, r0, r3
   198c8:	ldrh	r0, [r1]
   198cc:	mov	r2, #0
   198d0:	cmp	r0, #0
   198d4:	ldrne	r1, [r4]
   198d8:	ldrne	r3, [r4, #16]
   198dc:	addne	r1, r1, r3
   198e0:	addsne	r0, r1, r0
   198e4:	bne	198f4 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   198e8:	mov	r0, r2
   198ec:	sub	sp, fp, #24
   198f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   198f4:	ldr	r6, [r0]
   198f8:	mov	r2, #5
   198fc:	ldr	r8, [r6, r0]!
   19900:	add	r7, r6, #4
   19904:	tst	r7, #3
   19908:	bne	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1990c:	mov	r2, #6
   19910:	cmn	r8, #9
   19914:	bhi	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19918:	mov	r2, #1
   1991c:	cmp	r8, #8
   19920:	bcc	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19924:	cmp	r5, #0
   19928:	beq	19958 <flatcc_verify_table_as_nested_root@@Base+0x204>
   1992c:	mov	r0, #0
   19930:	mov	r1, r5
   19934:	mov	r2, #4
   19938:	str	r0, [sp]
   1993c:	mov	r0, sp
   19940:	bl	12784 <strncpy@plt>
   19944:	ldr	r0, [sp]
   19948:	cmp	r0, #0
   1994c:	ldrne	r1, [r6, #8]
   19950:	cmpne	r1, r0
   19954:	bne	19a24 <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   19958:	ldr	r1, [r4, #8]
   1995c:	ldr	r0, [r7]
   19960:	subs	r1, r1, #1
   19964:	str	r1, [sp, #8]
   19968:	beq	19a5c <flatcc_verify_table_as_nested_root@@Base+0x308>
   1996c:	mov	r2, #15
   19970:	tst	r0, #3
   19974:	bne	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19978:	cmp	r0, #0
   1997c:	beq	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19980:	add	r1, r0, #4
   19984:	cmp	r1, r8
   19988:	bhi	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   1998c:	str	r0, [sp, #16]
   19990:	mov	r2, #29
   19994:	ldr	r1, [r7, r0]
   19998:	sub	r6, r0, r1
   1999c:	tst	r6, #-2147483647	; 0x80000001
   199a0:	bne	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   199a4:	add	r3, r6, #2
   199a8:	mov	r2, #27
   199ac:	cmp	r3, r8
   199b0:	bhi	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   199b4:	mov	r1, r7
   199b8:	mov	r2, #30
   199bc:	ldrh	r5, [r1, r6]!
   199c0:	tst	r5, #1
   199c4:	strh	r5, [sp, #22]
   199c8:	bne	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   199cc:	add	r6, r6, r5
   199d0:	cmp	r6, r8
   199d4:	bhi	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   199d8:	mov	r2, #28
   199dc:	cmp	r5, #4
   199e0:	bcc	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   199e4:	add	r2, r7, r3
   199e8:	sub	r0, r8, r0
   199ec:	ldrh	r3, [r2]
   199f0:	mov	r2, #20
   199f4:	cmp	r0, r3
   199f8:	strh	r3, [sp, #20]
   199fc:	bcc	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19a00:	ldr	r2, [fp, #12]
   19a04:	mov	r0, sp
   19a08:	str	r1, [sp, #12]
   19a0c:	stm	sp, {r7, r8}
   19a10:	blx	r2
   19a14:	mov	r2, r0
   19a18:	b	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19a1c:	mov	r2, #0
   19a20:	b	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>
   19a24:	mov	r0, #0
   19a28:	mov	r1, r5
   19a2c:	mov	r2, #4
   19a30:	str	r0, [sp]
   19a34:	mov	r0, sp
   19a38:	bl	12784 <strncpy@plt>
   19a3c:	ldr	r1, [sp]
   19a40:	ldr	r0, [r6, #8]
   19a44:	subs	r0, r0, r1
   19a48:	movwne	r0, #2
   19a4c:	cmp	r1, #0
   19a50:	moveq	r0, r1
   19a54:	sub	sp, fp, #24
   19a58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a5c:	mov	r2, #3
   19a60:	b	198e8 <flatcc_verify_table_as_nested_root@@Base+0x194>

00019a64 <flatcc_verify_union_field@@Base>:
   19a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a68:	add	fp, sp, #28
   19a6c:	sub	sp, sp, #28
   19a70:	ldrh	r4, [r0, #22]
   19a74:	mov	r7, #2
   19a78:	lsl	r5, r1, #1
   19a7c:	add	r7, r7, r1, lsl #1
   19a80:	uxth	r6, r7
   19a84:	cmp	r6, r4
   19a88:	bcs	19b7c <flatcc_verify_union_field@@Base+0x118>
   19a8c:	ldr	r6, [r0, #12]
   19a90:	uxtah	r1, r6, r7
   19a94:	ldrh	ip, [r1]
   19a98:	cmp	ip, #0
   19a9c:	beq	19b7c <flatcc_verify_union_field@@Base+0x118>
   19aa0:	ldrh	r7, [r0, #20]
   19aa4:	mov	r1, #13
   19aa8:	cmp	ip, r7
   19aac:	bcs	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19ab0:	add	r7, r5, #4
   19ab4:	ldr	lr, [r0]
   19ab8:	ldr	r9, [r0, #16]
   19abc:	mov	r1, #1
   19ac0:	uxth	sl, r7
   19ac4:	cmp	sl, r4
   19ac8:	uxtahcc	r1, r6, r7
   19acc:	ldrhcc	r1, [r1]
   19ad0:	add	r8, lr, r9
   19ad4:	ldrb	r5, [r8, ip]
   19ad8:	clzcc	r1, r1
   19adc:	lsrcc	r1, r1, #5
   19ae0:	cmp	r1, #0
   19ae4:	moveq	r1, #24
   19ae8:	cmpeq	r5, #0
   19aec:	beq	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19af0:	mov	r1, #0
   19af4:	cmp	r5, #0
   19af8:	beq	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19afc:	cmp	sl, r4
   19b00:	bcs	19bbc <flatcc_verify_union_field@@Base+0x158>
   19b04:	uxtah	r1, r6, r7
   19b08:	ldrh	r4, [r1]
   19b0c:	cmp	r4, #0
   19b10:	beq	19bbc <flatcc_verify_union_field@@Base+0x158>
   19b14:	ldrh	r1, [r0, #20]
   19b18:	add	r2, r4, #4
   19b1c:	cmp	r2, r1
   19b20:	mov	r1, #13
   19b24:	bhi	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19b28:	add	r2, r9, r4
   19b2c:	mov	r1, #12
   19b30:	tst	r2, #3
   19b34:	bne	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19b38:	cmp	r2, #0
   19b3c:	mov	r1, #0
   19b40:	beq	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19b44:	str	lr, [sp, #4]
   19b48:	ldr	r1, [r0, #4]
   19b4c:	ldr	r0, [r0, #8]
   19b50:	str	r1, [sp, #8]
   19b54:	str	r2, [sp, #20]
   19b58:	str	r0, [sp, #12]
   19b5c:	ldr	r0, [lr, r2]
   19b60:	str	r0, [sp, #24]
   19b64:	ldrb	r0, [r8, ip]
   19b68:	strb	r0, [sp, #16]
   19b6c:	add	r0, sp, #4
   19b70:	blx	r3
   19b74:	mov	r1, r0
   19b78:	b	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19b7c:	add	r1, r5, #4
   19b80:	uxth	r3, r1
   19b84:	cmp	r3, r4
   19b88:	bcs	19ba4 <flatcc_verify_union_field@@Base+0x140>
   19b8c:	ldr	r0, [r0, #12]
   19b90:	uxtah	r0, r0, r1
   19b94:	mov	r1, #23
   19b98:	ldrh	r0, [r0]
   19b9c:	cmp	r0, #0
   19ba0:	bne	19bb0 <flatcc_verify_union_field@@Base+0x14c>
   19ba4:	cmp	r2, #0
   19ba8:	movwne	r2, #21
   19bac:	mov	r1, r2
   19bb0:	mov	r0, r1
   19bb4:	sub	sp, fp, #28
   19bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bbc:	cmp	r2, #0
   19bc0:	movwne	r2, #4
   19bc4:	b	19bac <flatcc_verify_union_field@@Base+0x148>

00019bc8 <flatcc_verify_union_vector_field@@Base>:
   19bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bcc:	add	fp, sp, #28
   19bd0:	sub	sp, sp, #28
   19bd4:	mov	r9, r3
   19bd8:	mov	r3, #2
   19bdc:	lsl	lr, r1, #1
   19be0:	add	r6, r3, r1, lsl #1
   19be4:	ldrh	r3, [r0, #22]
   19be8:	uxth	r4, r6
   19bec:	cmp	r4, r3
   19bf0:	bcs	19c08 <flatcc_verify_union_vector_field@@Base+0x40>
   19bf4:	ldr	r7, [r0, #12]
   19bf8:	mov	r1, r7
   19bfc:	ldrh	r5, [r1, r4]!
   19c00:	cmp	r5, #0
   19c04:	bne	19c54 <flatcc_verify_union_vector_field@@Base+0x8c>
   19c08:	add	r1, lr, #4
   19c0c:	uxth	r7, r1
   19c10:	cmp	r7, r3
   19c14:	bcs	19cc0 <flatcc_verify_union_vector_field@@Base+0xf8>
   19c18:	cmp	r2, #0
   19c1c:	beq	19c38 <flatcc_verify_union_vector_field@@Base+0x70>
   19c20:	ldr	r7, [r0, #12]
   19c24:	uxtah	r1, r7, r1
   19c28:	ldrh	r7, [r1]
   19c2c:	mov	r1, #22
   19c30:	cmp	r7, #0
   19c34:	beq	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19c38:	cmp	r4, r3
   19c3c:	bcs	19cd0 <flatcc_verify_union_vector_field@@Base+0x108>
   19c40:	ldr	r7, [r0, #12]
   19c44:	mov	r1, r7
   19c48:	ldrh	r5, [r1, r4]!
   19c4c:	cmp	r5, #0
   19c50:	beq	19cd0 <flatcc_verify_union_vector_field@@Base+0x108>
   19c54:	ldrh	r6, [r0, #20]
   19c58:	add	r4, r5, #4
   19c5c:	cmp	r4, r6
   19c60:	bhi	19ce8 <flatcc_verify_union_vector_field@@Base+0x120>
   19c64:	ldr	r6, [r0, #16]
   19c68:	add	r4, r6, r5
   19c6c:	tst	r4, #3
   19c70:	bne	19ce8 <flatcc_verify_union_vector_field@@Base+0x120>
   19c74:	cmp	r4, #0
   19c78:	beq	19d84 <flatcc_verify_union_vector_field@@Base+0x1bc>
   19c7c:	ldr	r6, [r0]
   19c80:	ldr	r5, [r6, r4]
   19c84:	add	r5, r5, r4
   19c88:	cmp	r5, r4
   19c8c:	bls	19ce8 <flatcc_verify_union_vector_field@@Base+0x120>
   19c90:	ldr	ip, [r0, #4]
   19c94:	add	r4, r5, #4
   19c98:	cmp	r4, ip
   19c9c:	bhi	19ce8 <flatcc_verify_union_vector_field@@Base+0x120>
   19ca0:	ands	r4, r4, #3
   19ca4:	bne	19ce8 <flatcc_verify_union_vector_field@@Base+0x120>
   19ca8:	ldr	r4, [r6, r5]
   19cac:	sub	r6, ip, #4
   19cb0:	sub	r6, r6, r5
   19cb4:	cmp	r6, r4
   19cb8:	bcc	19ce8 <flatcc_verify_union_vector_field@@Base+0x120>
   19cbc:	b	19d84 <flatcc_verify_union_vector_field@@Base+0x1bc>
   19cc0:	mov	r1, #22
   19cc4:	cmp	r2, #0
   19cc8:	bne	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19ccc:	b	19c38 <flatcc_verify_union_vector_field@@Base+0x70>
   19cd0:	cmp	r2, #0
   19cd4:	beq	19d70 <flatcc_verify_union_vector_field@@Base+0x1a8>
   19cd8:	cmp	r4, r3
   19cdc:	bcs	19eec <flatcc_verify_union_vector_field@@Base+0x324>
   19ce0:	ldr	r1, [r0, #12]
   19ce4:	uxtah	r1, r1, r6
   19ce8:	ldrh	r3, [r1]
   19cec:	cmp	r3, #0
   19cf0:	beq	19eec <flatcc_verify_union_vector_field@@Base+0x324>
   19cf4:	ldrh	r2, [r0, #20]
   19cf8:	add	r7, r3, #4
   19cfc:	mov	r1, #13
   19d00:	cmp	r7, r2
   19d04:	bhi	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d08:	ldr	r1, [r0, #16]
   19d0c:	add	r7, r1, r3
   19d10:	mov	r1, #12
   19d14:	tst	r7, #3
   19d18:	bne	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d1c:	cmp	r7, #0
   19d20:	beq	19f04 <flatcc_verify_union_vector_field@@Base+0x33c>
   19d24:	ldr	r2, [r0]
   19d28:	ldr	r1, [r2, r7]
   19d2c:	add	r3, r1, r7
   19d30:	mov	r1, #16
   19d34:	cmp	r3, r7
   19d38:	bls	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d3c:	ldr	r0, [r0, #4]
   19d40:	add	r7, r3, #4
   19d44:	cmp	r7, r0
   19d48:	bhi	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d4c:	ands	r7, r7, #3
   19d50:	bne	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d54:	ldr	r2, [r2, r3]
   19d58:	sub	r0, r0, #4
   19d5c:	mov	r1, #0
   19d60:	sub	r0, r0, r3
   19d64:	cmp	r0, r2
   19d68:	movwcc	r1, #26
   19d6c:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d70:	mov	r1, #0
   19d74:	cmp	r4, r3
   19d78:	bcs	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19d7c:	ldr	r7, [r0, #12]
   19d80:	uxtah	r1, r7, r6
   19d84:	ldrh	r5, [r1]
   19d88:	mov	r1, #0
   19d8c:	cmp	r5, #0
   19d90:	ldrne	r8, [r0]
   19d94:	ldrne	r6, [r0, #16]
   19d98:	addne	r4, r8, r6
   19d9c:	addsne	ip, r4, r5
   19da0:	beq	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19da4:	add	r1, lr, #4
   19da8:	uxth	r5, r1
   19dac:	cmp	r5, r3
   19db0:	bcs	19eec <flatcc_verify_union_vector_field@@Base+0x324>
   19db4:	uxtah	r1, r7, r1
   19db8:	ldrh	r3, [r1]
   19dbc:	cmp	r3, #0
   19dc0:	beq	19eec <flatcc_verify_union_vector_field@@Base+0x324>
   19dc4:	ldrh	r2, [r0, #20]
   19dc8:	add	r7, r3, #4
   19dcc:	mov	r1, #13
   19dd0:	cmp	r7, r2
   19dd4:	bhi	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19dd8:	add	r4, r6, r3
   19ddc:	mov	r1, #12
   19de0:	tst	r4, #3
   19de4:	bne	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19de8:	cmp	r4, #0
   19dec:	mov	r1, #0
   19df0:	beq	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19df4:	ldr	r7, [r0, #8]
   19df8:	cmp	r7, #1
   19dfc:	blt	19f0c <flatcc_verify_union_vector_field@@Base+0x344>
   19e00:	ldr	r2, [r8, r4]
   19e04:	mov	r1, #16
   19e08:	add	r5, r2, r4
   19e0c:	cmp	r5, r4
   19e10:	bls	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19e14:	ldr	r0, [r0, #4]
   19e18:	add	r4, r5, #4
   19e1c:	cmp	r4, r0
   19e20:	bhi	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19e24:	ands	r4, r4, #3
   19e28:	bne	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19e2c:	ldr	r4, [r8, r5]
   19e30:	mov	r1, #25
   19e34:	cmn	r4, #-1073741823	; 0xc0000001
   19e38:	bhi	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19e3c:	sub	r1, r0, #4
   19e40:	sub	r5, r1, r5
   19e44:	mov	r1, #26
   19e48:	cmp	r5, r4, lsl #2
   19e4c:	bcc	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19e50:	ldr	r5, [ip]
   19e54:	mov	r1, #34	; 0x22
   19e58:	ldr	sl, [r5, ip]!
   19e5c:	cmp	r4, sl
   19e60:	bne	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19e64:	cmp	sl, #0
   19e68:	sub	r1, r7, #1
   19e6c:	str	r0, [sp, #8]
   19e70:	str	r8, [sp, #4]
   19e74:	str	r1, [sp, #12]
   19e78:	beq	19f04 <flatcc_verify_union_vector_field@@Base+0x33c>
   19e7c:	add	r0, r2, r6
   19e80:	add	r7, r5, #4
   19e84:	mov	r5, #0
   19e88:	add	r4, sp, #4
   19e8c:	add	r0, r0, r3
   19e90:	add	r6, r0, #4
   19e94:	ldr	r1, [r8, r6]
   19e98:	ldrb	r0, [r7, r5]
   19e9c:	cmp	r1, #0
   19ea0:	beq	19ecc <flatcc_verify_union_vector_field@@Base+0x304>
   19ea4:	cmp	r0, #0
   19ea8:	beq	19f14 <flatcc_verify_union_vector_field@@Base+0x34c>
   19eac:	str	r6, [sp, #20]
   19eb0:	strb	r0, [sp, #16]
   19eb4:	mov	r0, r4
   19eb8:	str	r1, [sp, #24]
   19ebc:	blx	r9
   19ec0:	cmp	r0, #0
   19ec4:	beq	19ed4 <flatcc_verify_union_vector_field@@Base+0x30c>
   19ec8:	b	19f1c <flatcc_verify_union_vector_field@@Base+0x354>
   19ecc:	cmp	r0, #0
   19ed0:	bne	19f2c <flatcc_verify_union_vector_field@@Base+0x364>
   19ed4:	add	r5, r5, #1
   19ed8:	add	r6, r6, #4
   19edc:	mov	r1, #0
   19ee0:	cmp	r5, sl
   19ee4:	bcc	19e94 <flatcc_verify_union_vector_field@@Base+0x2cc>
   19ee8:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19eec:	cmp	r2, #0
   19ef0:	movwne	r2, #4
   19ef4:	mov	r1, r2
   19ef8:	mov	r0, r1
   19efc:	sub	sp, fp, #28
   19f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f04:	mov	r1, #0
   19f08:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19f0c:	mov	r1, #3
   19f10:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19f14:	mov	r1, #33	; 0x21
   19f18:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19f1c:	add	r0, sp, #4
   19f20:	blx	r9
   19f24:	mov	r1, r0
   19f28:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>
   19f2c:	mov	r1, #32
   19f30:	b	19ef8 <flatcc_verify_union_vector_field@@Base+0x330>

00019f34 <__libc_csu_init@@Base>:
   19f34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19f38:	mov	r7, r0
   19f3c:	ldr	r6, [pc, #72]	; 19f8c <__libc_csu_init@@Base+0x58>
   19f40:	ldr	r5, [pc, #72]	; 19f90 <__libc_csu_init@@Base+0x5c>
   19f44:	add	r6, pc, r6
   19f48:	add	r5, pc, r5
   19f4c:	sub	r6, r6, r5
   19f50:	mov	r8, r1
   19f54:	mov	r9, r2
   19f58:	bl	126ec <free@plt-0x20>
   19f5c:	asrs	r6, r6, #2
   19f60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f64:	mov	r4, #0
   19f68:	add	r4, r4, #1
   19f6c:	ldr	r3, [r5], #4
   19f70:	mov	r2, r9
   19f74:	mov	r1, r8
   19f78:	mov	r0, r7
   19f7c:	blx	r3
   19f80:	cmp	r6, r4
   19f84:	bne	19f68 <__libc_csu_init@@Base+0x34>
   19f88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f8c:	andeq	r1, r1, r0, lsl pc
   19f90:	andeq	r1, r1, r8, lsl #30

00019f94 <__libc_csu_fini@@Base>:
   19f94:	bx	lr

Disassembly of section .fini:

00019f98 <.fini>:
   19f98:	push	{r3, lr}
   19f9c:	pop	{r3, pc}
