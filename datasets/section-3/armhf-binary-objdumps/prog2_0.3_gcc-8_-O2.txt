
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105c8 <.init>:
   105c8:	push	{r3, lr}
   105cc:	bl	10790 <_start@@Base+0x3c>
   105d0:	pop	{r3, pc}

Disassembly of section .plt:

000105d4 <printf@plt-0x14>:
   105d4:	push	{lr}		; (str lr, [sp, #-4]!)
   105d8:	ldr	lr, [pc, #4]	; 105e4 <printf@plt-0x4>
   105dc:	add	lr, pc, lr
   105e0:	ldr	pc, [lr, #8]!
   105e4:	andeq	r0, r1, ip, lsl sl

000105e8 <printf@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2588]!	; 0xa1c

000105f4 <__libc_start_main@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2580]!	; 0xa14

00010600 <__gmon_start__@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2572]!	; 0xa0c

0001060c <putchar@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2564]!	; 0xa04

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2556]!	; 0x9fc

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00010630 <main@@Base>:
   10630:	strd	r4, [sp, #-28]!	; 0xffffffe4
   10634:	mov	r4, #0
   10638:	strd	r6, [sp, #8]
   1063c:	ldr	r7, [pc, #244]	; 10738 <main@@Base+0x108>
   10640:	strd	r8, [sp, #16]
   10644:	ldr	r8, [pc, #240]	; 1073c <main@@Base+0x10c>
   10648:	str	lr, [sp, #24]
   1064c:	sub	sp, sp, #44	; 0x2c
   10650:	mov	r9, sp
   10654:	mov	r5, r9
   10658:	mov	r6, r9
   1065c:	add	r7, pc, r7
   10660:	add	r8, pc, r8
   10664:	add	r4, r4, #1
   10668:	mov	r0, r8
   1066c:	mov	r1, r4
   10670:	bl	105e8 <printf@plt>
   10674:	mov	r1, r6
   10678:	mov	r0, r7
   1067c:	bl	10618 <__isoc99_scanf@plt>
   10680:	cmp	r4, #10
   10684:	add	r6, r6, #4
   10688:	bne	10664 <main@@Base+0x34>
   1068c:	mov	r0, r9
   10690:	ldr	r6, [pc, #168]	; 10740 <main@@Base+0x110>
   10694:	add	r4, sp, #40	; 0x28
   10698:	bl	10844 <avg@@Base>
   1069c:	vcvt.f64.f32	d7, s0
   106a0:	ldr	r0, [pc, #156]	; 10744 <main@@Base+0x114>
   106a4:	add	r6, pc, r6
   106a8:	add	r0, pc, r0
   106ac:	vmov	r2, r3, d7
   106b0:	bl	105e8 <printf@plt>
   106b4:	mov	r0, r9
   106b8:	bl	10870 <max@@Base>
   106bc:	vcvt.f64.f32	d7, s0
   106c0:	ldr	r0, [pc, #128]	; 10748 <main@@Base+0x118>
   106c4:	add	r0, pc, r0
   106c8:	vmov	r2, r3, d7
   106cc:	bl	105e8 <printf@plt>
   106d0:	mov	r0, r9
   106d4:	bl	10894 <min@@Base>
   106d8:	vcvt.f64.f32	d7, s0
   106dc:	ldr	r0, [pc, #104]	; 1074c <main@@Base+0x11c>
   106e0:	add	r0, pc, r0
   106e4:	vmov	r2, r3, d7
   106e8:	bl	105e8 <printf@plt>
   106ec:	ldr	r0, [pc, #92]	; 10750 <main@@Base+0x120>
   106f0:	add	r0, pc, r0
   106f4:	bl	105e8 <printf@plt>
   106f8:	vldmia	r5!, {s15}
   106fc:	mov	r0, r6
   10700:	vcvt.f64.f32	d7, s15
   10704:	vmov	r2, r3, d7
   10708:	bl	105e8 <printf@plt>
   1070c:	cmp	r5, r4
   10710:	bne	106f8 <main@@Base+0xc8>
   10714:	mov	r0, #10
   10718:	bl	1060c <putchar@plt>
   1071c:	mov	r0, #0
   10720:	add	sp, sp, #44	; 0x2c
   10724:	ldrd	r4, [sp]
   10728:	ldrd	r6, [sp, #8]
   1072c:	ldrd	r8, [sp, #16]
   10730:	add	sp, sp, #24
   10734:	pop	{pc}		; (ldr pc, [sp], #4)
   10738:	ldrdeq	r0, [r0], -ip
   1073c:	andeq	r0, r0, r0, asr #5
   10740:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10744:	muleq	r0, r4, r2
   10748:	andeq	r0, r0, r8, lsl #5
   1074c:	andeq	r0, r0, ip, ror r2
   10750:	andeq	r0, r0, ip, ror r2

00010754 <_start@@Base>:
   10754:	mov	fp, #0
   10758:	mov	lr, #0
   1075c:	pop	{r1}		; (ldr r1, [sp], #4)
   10760:	mov	r2, sp
   10764:	push	{r2}		; (str r2, [sp, #-4]!)
   10768:	push	{r0}		; (str r0, [sp, #-4]!)
   1076c:	ldr	ip, [pc, #16]	; 10784 <_start@@Base+0x30>
   10770:	push	{ip}		; (str ip, [sp, #-4]!)
   10774:	ldr	r0, [pc, #12]	; 10788 <_start@@Base+0x34>
   10778:	ldr	r3, [pc, #12]	; 1078c <_start@@Base+0x38>
   1077c:	bl	105f4 <__libc_start_main@plt>
   10780:	bl	10624 <abort@plt>
   10784:	andeq	r0, r1, r8, lsl r9
   10788:	andeq	r0, r1, r0, lsr r6
   1078c:			; <UNDEFINED> instruction: 0x000108b8
   10790:	ldr	r3, [pc, #20]	; 107ac <_start@@Base+0x58>
   10794:	ldr	r2, [pc, #20]	; 107b0 <_start@@Base+0x5c>
   10798:	add	r3, pc, r3
   1079c:	ldr	r2, [r3, r2]
   107a0:	cmp	r2, #0
   107a4:	bxeq	lr
   107a8:	b	10600 <__gmon_start__@plt>
   107ac:	andeq	r0, r1, r0, ror #16
   107b0:	andeq	r0, r0, r4, lsr #32
   107b4:	ldr	r0, [pc, #24]	; 107d4 <_start@@Base+0x80>
   107b8:	ldr	r3, [pc, #24]	; 107d8 <_start@@Base+0x84>
   107bc:	cmp	r3, r0
   107c0:	bxeq	lr
   107c4:	ldr	r3, [pc, #16]	; 107dc <_start@@Base+0x88>
   107c8:	cmp	r3, #0
   107cc:	bxeq	lr
   107d0:	bx	r3
   107d4:	andeq	r1, r2, r0, lsr r0
   107d8:	andeq	r1, r2, r0, lsr r0
   107dc:	andeq	r0, r0, r0
   107e0:	ldr	r0, [pc, #36]	; 1080c <_start@@Base+0xb8>
   107e4:	ldr	r1, [pc, #36]	; 10810 <_start@@Base+0xbc>
   107e8:	sub	r1, r1, r0
   107ec:	asr	r1, r1, #2
   107f0:	add	r1, r1, r1, lsr #31
   107f4:	asrs	r1, r1, #1
   107f8:	bxeq	lr
   107fc:	ldr	r3, [pc, #16]	; 10814 <_start@@Base+0xc0>
   10800:	cmp	r3, #0
   10804:	bxeq	lr
   10808:	bx	r3
   1080c:	andeq	r1, r2, r0, lsr r0
   10810:	andeq	r1, r2, r0, lsr r0
   10814:	andeq	r0, r0, r0
   10818:	push	{r4, lr}
   1081c:	ldr	r4, [pc, #24]	; 1083c <_start@@Base+0xe8>
   10820:	ldrb	r3, [r4]
   10824:	cmp	r3, #0
   10828:	popne	{r4, pc}
   1082c:	bl	107b4 <_start@@Base+0x60>
   10830:	mov	r3, #1
   10834:	strb	r3, [r4]
   10838:	pop	{r4, pc}
   1083c:	andeq	r1, r2, r0, lsr r0
   10840:	b	107e0 <_start@@Base+0x8c>

00010844 <avg@@Base>:
   10844:	vldr	s15, [pc, #28]	; 10868 <avg@@Base+0x24>
   10848:	add	r3, r0, #40	; 0x28
   1084c:	vldmia	r0!, {s14}
   10850:	cmp	r0, r3
   10854:	vadd.f32	s15, s15, s14
   10858:	bne	1084c <avg@@Base+0x8>
   1085c:	vldr	s0, [pc, #8]	; 1086c <avg@@Base+0x28>
   10860:	vdiv.f32	s0, s15, s0
   10864:	bx	lr
   10868:	andeq	r0, r0, r0
   1086c:			; <UNDEFINED> instruction: 0x41200000

00010870 <max@@Base>:
   10870:	add	r3, r0, #40	; 0x28
   10874:	vldmia	r0!, {s0}
   10878:	vldmia	r0!, {s15}
   1087c:	vcmp.f32	s15, s0
   10880:	vmrs	APSR_nzcv, fpscr
   10884:	vmovgt.f32	s0, s15
   10888:	cmp	r0, r3
   1088c:	bne	10878 <max@@Base+0x8>
   10890:	bx	lr

00010894 <min@@Base>:
   10894:	add	r3, r0, #40	; 0x28
   10898:	vldmia	r0!, {s0}
   1089c:	vldmia	r0!, {s15}
   108a0:	vcmp.f32	s15, s0
   108a4:	vmrs	APSR_nzcv, fpscr
   108a8:	vmovmi.f32	s0, s15
   108ac:	cmp	r0, r3
   108b0:	bne	1089c <min@@Base+0x8>
   108b4:	bx	lr

000108b8 <__libc_csu_init@@Base>:
   108b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108bc:	mov	r7, r0
   108c0:	ldr	r6, [pc, #72]	; 10910 <__libc_csu_init@@Base+0x58>
   108c4:	ldr	r5, [pc, #72]	; 10914 <__libc_csu_init@@Base+0x5c>
   108c8:	add	r6, pc, r6
   108cc:	add	r5, pc, r5
   108d0:	sub	r6, r6, r5
   108d4:	mov	r8, r1
   108d8:	mov	r9, r2
   108dc:	bl	105c8 <printf@plt-0x20>
   108e0:	asrs	r6, r6, #2
   108e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e8:	mov	r4, #0
   108ec:	add	r4, r4, #1
   108f0:	ldr	r3, [r5], #4
   108f4:	mov	r2, r9
   108f8:	mov	r1, r8
   108fc:	mov	r0, r7
   10900:	blx	r3
   10904:	cmp	r6, r4
   10908:	bne	108ec <__libc_csu_init@@Base+0x34>
   1090c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10910:	andeq	r0, r1, r4, asr #12
   10914:	andeq	r0, r1, ip, lsr r6

00010918 <__libc_csu_fini@@Base>:
   10918:	bx	lr

Disassembly of section .fini:

0001091c <.fini>:
   1091c:	push	{r3, lr}
   10920:	pop	{r3, pc}
