
../repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010574 <.init>:
   10574:	push	{r3, lr}
   10578:	bl	106c8 <_start@@Base+0x3c>
   1057c:	pop	{r3, pc}

Disassembly of section .plt:

00010580 <printf@plt-0x14>:
   10580:	push	{lr}		; (str lr, [sp, #-4]!)
   10584:	ldr	lr, [pc, #4]	; 10590 <printf@plt-0x4>
   10588:	add	lr, pc, lr
   1058c:	ldr	pc, [lr, #8]!
   10590:	andeq	r0, r1, r0, ror sl

00010594 <printf@plt>:
   10594:	add	ip, pc, #0, 12
   10598:	add	ip, ip, #16, 20	; 0x10000
   1059c:	ldr	pc, [ip, #2672]!	; 0xa70

000105a0 <__libc_start_main@plt>:
   105a0:	add	ip, pc, #0, 12
   105a4:	add	ip, ip, #16, 20	; 0x10000
   105a8:	ldr	pc, [ip, #2664]!	; 0xa68

000105ac <__gmon_start__@plt>:
   105ac:	add	ip, pc, #0, 12
   105b0:	add	ip, ip, #16, 20	; 0x10000
   105b4:	ldr	pc, [ip, #2656]!	; 0xa60

000105b8 <__isoc99_scanf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2648]!	; 0xa58

000105c4 <abort@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000105d0 <main@@Base>:
   105d0:	ldr	r0, [pc, #168]	; 10680 <main@@Base+0xb0>
   105d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   105d8:	strd	r6, [sp, #8]
   105dc:	strd	r8, [sp, #16]
   105e0:	str	lr, [sp, #24]
   105e4:	sub	sp, sp, #20
   105e8:	add	r0, pc, r0
   105ec:	add	r1, sp, #4
   105f0:	bl	105b8 <__isoc99_scanf@plt>
   105f4:	ldr	r3, [sp, #4]
   105f8:	cmp	r3, #0
   105fc:	ble	10664 <main@@Base+0x94>
   10600:	ldr	r9, [pc, #124]	; 10684 <main@@Base+0xb4>
   10604:	mov	r4, #0
   10608:	add	r8, sp, #12
   1060c:	add	r7, sp, #8
   10610:	ldr	r6, [pc, #112]	; 10688 <main@@Base+0xb8>
   10614:	add	r9, pc, r9
   10618:	add	r6, pc, r6
   1061c:	mov	r2, r8
   10620:	mov	r1, r7
   10624:	mov	r0, r9
   10628:	add	r4, r4, #1
   1062c:	bl	105b8 <__isoc99_scanf@plt>
   10630:	ldr	r0, [sp, #8]
   10634:	bl	1077c <invert@@Base>
   10638:	mov	r5, r0
   1063c:	ldr	r0, [sp, #12]
   10640:	bl	1077c <invert@@Base>
   10644:	add	r0, r5, r0
   10648:	bl	1077c <invert@@Base>
   1064c:	mov	r1, r0
   10650:	mov	r0, r6
   10654:	bl	10594 <printf@plt>
   10658:	ldr	r3, [sp, #4]
   1065c:	cmp	r3, r4
   10660:	bgt	1061c <main@@Base+0x4c>
   10664:	mov	r0, #0
   10668:	add	sp, sp, #20
   1066c:	ldrd	r4, [sp]
   10670:	ldrd	r6, [sp, #8]
   10674:	ldrd	r8, [sp, #16]
   10678:	add	sp, sp, #24
   1067c:	pop	{pc}		; (ldr pc, [sp], #4)
   10680:	andeq	r0, r0, r0, asr #4
   10684:	andeq	r0, r0, r8, lsl r2
   10688:	andeq	r0, r0, ip, lsl r2

0001068c <_start@@Base>:
   1068c:	mov	fp, #0
   10690:	mov	lr, #0
   10694:	pop	{r1}		; (ldr r1, [sp], #4)
   10698:	mov	r2, sp
   1069c:	push	{r2}		; (str r2, [sp, #-4]!)
   106a0:	push	{r0}		; (str r0, [sp, #-4]!)
   106a4:	ldr	ip, [pc, #16]	; 106bc <_start@@Base+0x30>
   106a8:	push	{ip}		; (str ip, [sp, #-4]!)
   106ac:	ldr	r0, [pc, #12]	; 106c0 <_start@@Base+0x34>
   106b0:	ldr	r3, [pc, #12]	; 106c4 <_start@@Base+0x38>
   106b4:	bl	105a0 <__libc_start_main@plt>
   106b8:	bl	105c4 <abort@plt>
   106bc:	andeq	r0, r1, r0, lsr #16
   106c0:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   106c4:	andeq	r0, r1, r0, asr #15
   106c8:	ldr	r3, [pc, #20]	; 106e4 <_start@@Base+0x58>
   106cc:	ldr	r2, [pc, #20]	; 106e8 <_start@@Base+0x5c>
   106d0:	add	r3, pc, r3
   106d4:	ldr	r2, [r3, r2]
   106d8:	cmp	r2, #0
   106dc:	bxeq	lr
   106e0:	b	105ac <__gmon_start__@plt>
   106e4:	andeq	r0, r1, r8, lsr #18
   106e8:	andeq	r0, r0, r0, lsr #32
   106ec:	ldr	r0, [pc, #24]	; 1070c <_start@@Base+0x80>
   106f0:	ldr	r3, [pc, #24]	; 10710 <_start@@Base+0x84>
   106f4:	cmp	r3, r0
   106f8:	bxeq	lr
   106fc:	ldr	r3, [pc, #16]	; 10714 <_start@@Base+0x88>
   10700:	cmp	r3, #0
   10704:	bxeq	lr
   10708:	bx	r3
   1070c:	andeq	r1, r2, ip, lsr #32
   10710:	andeq	r1, r2, ip, lsr #32
   10714:	andeq	r0, r0, r0
   10718:	ldr	r0, [pc, #36]	; 10744 <_start@@Base+0xb8>
   1071c:	ldr	r1, [pc, #36]	; 10748 <_start@@Base+0xbc>
   10720:	sub	r1, r1, r0
   10724:	asr	r1, r1, #2
   10728:	add	r1, r1, r1, lsr #31
   1072c:	asrs	r1, r1, #1
   10730:	bxeq	lr
   10734:	ldr	r3, [pc, #16]	; 1074c <_start@@Base+0xc0>
   10738:	cmp	r3, #0
   1073c:	bxeq	lr
   10740:	bx	r3
   10744:	andeq	r1, r2, ip, lsr #32
   10748:	andeq	r1, r2, ip, lsr #32
   1074c:	andeq	r0, r0, r0
   10750:	push	{r4, lr}
   10754:	ldr	r4, [pc, #24]	; 10774 <_start@@Base+0xe8>
   10758:	ldrb	r3, [r4]
   1075c:	cmp	r3, #0
   10760:	popne	{r4, pc}
   10764:	bl	106ec <_start@@Base+0x60>
   10768:	mov	r3, #1
   1076c:	strb	r3, [r4]
   10770:	pop	{r4, pc}
   10774:	andeq	r1, r2, ip, lsr #32
   10778:	b	10718 <_start@@Base+0x8c>

0001077c <invert@@Base>:
   1077c:	subs	r2, r0, #0
   10780:	beq	107b8 <invert@@Base+0x3c>
   10784:	movw	ip, #26215	; 0x6667
   10788:	movt	ip, #26214	; 0x6666
   1078c:	mov	r0, #0
   10790:	smull	r3, r1, ip, r2
   10794:	asr	r3, r2, #31
   10798:	add	r0, r0, r0, lsl #2
   1079c:	rsb	r3, r3, r1, asr #2
   107a0:	add	r1, r3, r3, lsl #2
   107a4:	sub	r1, r2, r1, lsl #1
   107a8:	subs	r2, r3, #0
   107ac:	add	r0, r1, r0, lsl #1
   107b0:	bne	10790 <invert@@Base+0x14>
   107b4:	bx	lr
   107b8:	mov	r0, r2
   107bc:	bx	lr

000107c0 <__libc_csu_init@@Base>:
   107c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107c4:	mov	r7, r0
   107c8:	ldr	r6, [pc, #72]	; 10818 <__libc_csu_init@@Base+0x58>
   107cc:	ldr	r5, [pc, #72]	; 1081c <__libc_csu_init@@Base+0x5c>
   107d0:	add	r6, pc, r6
   107d4:	add	r5, pc, r5
   107d8:	sub	r6, r6, r5
   107dc:	mov	r8, r1
   107e0:	mov	r9, r2
   107e4:	bl	10574 <printf@plt-0x20>
   107e8:	asrs	r6, r6, #2
   107ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107f0:	mov	r4, #0
   107f4:	add	r4, r4, #1
   107f8:	ldr	r3, [r5], #4
   107fc:	mov	r2, r9
   10800:	mov	r1, r8
   10804:	mov	r0, r7
   10808:	blx	r3
   1080c:	cmp	r6, r4
   10810:	bne	107f4 <__libc_csu_init@@Base+0x34>
   10814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10818:	andeq	r0, r1, ip, lsr r7
   1081c:	andeq	r0, r1, r4, lsr r7

00010820 <__libc_csu_fini@@Base>:
   10820:	bx	lr

Disassembly of section .fini:

00010824 <.fini>:
   10824:	push	{r3, lr}
   10828:	pop	{r3, pc}
