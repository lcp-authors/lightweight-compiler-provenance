
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bd4 <.init>:
   10bd4:	push	{r3, lr}
   10bd8:	bl	10da4 <_start@@Base+0x3c>
   10bdc:	pop	{r3, pc}

Disassembly of section .plt:

00010be0 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10be0:	push	{lr}		; (str lr, [sp, #-4]!)
   10be4:	ldr	lr, [pc, #4]	; 10bf0 <coda_set_option_perform_boundary_checks@plt-0x4>
   10be8:	add	lr, pc, lr
   10bec:	ldr	pc, [lr, #8]!
   10bf0:	andeq	r2, r1, r0, lsl r4

00010bf4 <coda_set_option_perform_boundary_checks@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #73728	; 0x12000
   10bfc:	ldr	pc, [ip, #1040]!	; 0x410

00010c00 <strcmp@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #73728	; 0x12000
   10c08:	ldr	pc, [ip, #1032]!	; 0x408

00010c0c <printf@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #73728	; 0x12000
   10c14:	ldr	pc, [ip, #1024]!	; 0x400

00010c18 <coda_set_error@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #73728	; 0x12000
   10c20:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c24 <coda_open@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #73728	; 0x12000
   10c2c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c30 <fflush@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #73728	; 0x12000
   10c38:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c3c <coda_set_option_use_mmap@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #73728	; 0x12000
   10c44:	ldr	pc, [ip, #992]!	; 0x3e0

00010c48 <coda_cursor_print_path@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #73728	; 0x12000
   10c50:	ldr	pc, [ip, #984]!	; 0x3d8

00010c54 <coda_set_definition_path_conditional@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #73728	; 0x12000
   10c5c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c60 <getchar@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #73728	; 0x12000
   10c68:	ldr	pc, [ip, #968]!	; 0x3c8

00010c6c <coda_set_definition_path@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #73728	; 0x12000
   10c74:	ldr	pc, [ip, #960]!	; 0x3c0

00010c78 <coda_recognize_file@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #73728	; 0x12000
   10c80:	ldr	pc, [ip, #952]!	; 0x3b8

00010c84 <fwrite@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #73728	; 0x12000
   10c8c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c90 <coda_type_get_format_name@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #73728	; 0x12000
   10c98:	ldr	pc, [ip, #936]!	; 0x3a8

00010c9c <coda_done@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #73728	; 0x12000
   10ca4:	ldr	pc, [ip, #928]!	; 0x3a0

00010ca8 <puts@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #73728	; 0x12000
   10cb0:	ldr	pc, [ip, #920]!	; 0x398

00010cb4 <coda_product_check@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #73728	; 0x12000
   10cbc:	ldr	pc, [ip, #912]!	; 0x390

00010cc0 <__libc_start_main@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #73728	; 0x12000
   10cc8:	ldr	pc, [ip, #904]!	; 0x388

00010ccc <__gmon_start__@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #73728	; 0x12000
   10cd4:	ldr	pc, [ip, #896]!	; 0x380

00010cd8 <exit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #73728	; 0x12000
   10ce0:	ldr	pc, [ip, #888]!	; 0x378

00010ce4 <fprintf@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #73728	; 0x12000
   10cec:	ldr	pc, [ip, #880]!	; 0x370

00010cf0 <coda_init@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #73728	; 0x12000
   10cf8:	ldr	pc, [ip, #872]!	; 0x368

00010cfc <ungetc@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #73728	; 0x12000
   10d04:	ldr	pc, [ip, #864]!	; 0x360

00010d08 <coda_set_option_perform_conversions@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #73728	; 0x12000
   10d10:	ldr	pc, [ip, #856]!	; 0x358

00010d14 <putchar@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #73728	; 0x12000
   10d1c:	ldr	pc, [ip, #848]!	; 0x350

00010d20 <coda_close@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #840]!	; 0x348

00010d2c <coda_errno_to_string@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #832]!	; 0x340

00010d38 <coda_get_libcoda_version@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #824]!	; 0x338

00010d44 <coda_get_errno@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #816]!	; 0x330

00010d50 <abort@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #808]!	; 0x328

00010d5c <__assert_fail@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #800]!	; 0x320

Disassembly of section .text:

00010d68 <_start@@Base>:
   10d68:	mov	fp, #0
   10d6c:	mov	lr, #0
   10d70:	pop	{r1}		; (ldr r1, [sp], #4)
   10d74:	mov	r2, sp
   10d78:	push	{r2}		; (str r2, [sp, #-4]!)
   10d7c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d80:	ldr	ip, [pc, #16]	; 10d98 <_start@@Base+0x30>
   10d84:	push	{ip}		; (str ip, [sp, #-4]!)
   10d88:	ldr	r0, [pc, #12]	; 10d9c <_start@@Base+0x34>
   10d8c:	ldr	r3, [pc, #12]	; 10da0 <_start@@Base+0x38>
   10d90:	bl	10cc0 <__libc_start_main@plt>
   10d94:	bl	10d50 <abort@plt>
   10d98:	andeq	r1, r1, r8, ror #24
   10d9c:	andeq	r1, r1, ip, lsl #10
   10da0:	andeq	r1, r1, r8, lsl #24
   10da4:	ldr	r3, [pc, #20]	; 10dc0 <_start@@Base+0x58>
   10da8:	ldr	r2, [pc, #20]	; 10dc4 <_start@@Base+0x5c>
   10dac:	add	r3, pc, r3
   10db0:	ldr	r2, [r3, r2]
   10db4:	cmp	r2, #0
   10db8:	bxeq	lr
   10dbc:	b	10ccc <__gmon_start__@plt>
   10dc0:	andeq	r2, r1, ip, asr #4
   10dc4:	muleq	r0, ip, r0
   10dc8:	ldr	r3, [pc, #28]	; 10dec <_start@@Base+0x84>
   10dcc:	ldr	r0, [pc, #28]	; 10df0 <_start@@Base+0x88>
   10dd0:	sub	r3, r3, r0
   10dd4:	cmp	r3, #6
   10dd8:	bxls	lr
   10ddc:	ldr	r3, [pc, #16]	; 10df4 <_start@@Base+0x8c>
   10de0:	cmp	r3, #0
   10de4:	bxeq	lr
   10de8:	bx	r3
   10dec:	strheq	r3, [r2], -r3	; <UNPREDICTABLE>
   10df0:	strheq	r3, [r2], -r0
   10df4:	andeq	r0, r0, r0
   10df8:	ldr	r1, [pc, #36]	; 10e24 <_start@@Base+0xbc>
   10dfc:	ldr	r0, [pc, #36]	; 10e28 <_start@@Base+0xc0>
   10e00:	sub	r1, r1, r0
   10e04:	asr	r1, r1, #2
   10e08:	add	r1, r1, r1, lsr #31
   10e0c:	asrs	r1, r1, #1
   10e10:	bxeq	lr
   10e14:	ldr	r3, [pc, #16]	; 10e2c <_start@@Base+0xc4>
   10e18:	cmp	r3, #0
   10e1c:	bxeq	lr
   10e20:	bx	r3
   10e24:	strheq	r3, [r2], -r0
   10e28:	strheq	r3, [r2], -r0
   10e2c:	andeq	r0, r0, r0
   10e30:	push	{r4, lr}
   10e34:	ldr	r4, [pc, #24]	; 10e54 <_start@@Base+0xec>
   10e38:	ldrb	r3, [r4]
   10e3c:	cmp	r3, #0
   10e40:	popne	{r4, pc}
   10e44:	bl	10dc8 <_start@@Base+0x60>
   10e48:	mov	r3, #1
   10e4c:	strb	r3, [r4]
   10e50:	pop	{r4, pc}
   10e54:	strheq	r3, [r2], -r0
   10e58:	ldr	r0, [pc, #40]	; 10e88 <_start@@Base+0x120>
   10e5c:	ldr	r3, [r0]
   10e60:	cmp	r3, #0
   10e64:	bne	10e6c <_start@@Base+0x104>
   10e68:	b	10df8 <_start@@Base+0x90>
   10e6c:	ldr	r3, [pc, #24]	; 10e8c <_start@@Base+0x124>
   10e70:	cmp	r3, #0
   10e74:	beq	10e68 <_start@@Base+0x100>
   10e78:	push	{r4, lr}
   10e7c:	blx	r3
   10e80:	pop	{r4, lr}
   10e84:	b	10df8 <_start@@Base+0x90>
   10e88:	strdeq	r2, [r2], -ip
   10e8c:	andeq	r0, r0, r0
   10e90:	push	{fp, lr}
   10e94:	add	fp, sp, #4
   10e98:	bl	10d38 <coda_get_libcoda_version@plt>
   10e9c:	mov	r3, r0
   10ea0:	mov	r1, r3
   10ea4:	ldr	r3, [pc, #40]	; 10ed4 <_start@@Base+0x16c>
   10ea8:	add	r3, pc, r3
   10eac:	mov	r0, r3
   10eb0:	bl	10c0c <printf@plt>
   10eb4:	ldr	r3, [pc, #28]	; 10ed8 <_start@@Base+0x170>
   10eb8:	add	r3, pc, r3
   10ebc:	mov	r0, r3
   10ec0:	bl	10ca8 <puts@plt>
   10ec4:	mov	r0, #10
   10ec8:	bl	10d14 <putchar@plt>
   10ecc:	nop			; (mov r0, r0)
   10ed0:	pop	{fp, pc}
   10ed4:	andeq	r0, r0, r8, asr #27
   10ed8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10edc:	push	{fp, lr}
   10ee0:	add	fp, sp, #4
   10ee4:	ldr	r3, [pc, #488]	; 110d4 <_start@@Base+0x36c>
   10ee8:	add	r3, pc, r3
   10eec:	mov	r0, r3
   10ef0:	bl	10ca8 <puts@plt>
   10ef4:	ldr	r3, [pc, #476]	; 110d8 <_start@@Base+0x370>
   10ef8:	add	r3, pc, r3
   10efc:	mov	r0, r3
   10f00:	bl	10ca8 <puts@plt>
   10f04:	ldr	r3, [pc, #464]	; 110dc <_start@@Base+0x374>
   10f08:	add	r3, pc, r3
   10f0c:	mov	r0, r3
   10f10:	bl	10ca8 <puts@plt>
   10f14:	ldr	r3, [pc, #452]	; 110e0 <_start@@Base+0x378>
   10f18:	add	r3, pc, r3
   10f1c:	mov	r0, r3
   10f20:	bl	10ca8 <puts@plt>
   10f24:	ldr	r3, [pc, #440]	; 110e4 <_start@@Base+0x37c>
   10f28:	add	r3, pc, r3
   10f2c:	mov	r0, r3
   10f30:	bl	10ca8 <puts@plt>
   10f34:	ldr	r3, [pc, #428]	; 110e8 <_start@@Base+0x380>
   10f38:	add	r3, pc, r3
   10f3c:	mov	r0, r3
   10f40:	bl	10ca8 <puts@plt>
   10f44:	ldr	r3, [pc, #416]	; 110ec <_start@@Base+0x384>
   10f48:	add	r3, pc, r3
   10f4c:	mov	r0, r3
   10f50:	bl	10ca8 <puts@plt>
   10f54:	ldr	r3, [pc, #404]	; 110f0 <_start@@Base+0x388>
   10f58:	add	r3, pc, r3
   10f5c:	mov	r0, r3
   10f60:	bl	10ca8 <puts@plt>
   10f64:	ldr	r3, [pc, #392]	; 110f4 <_start@@Base+0x38c>
   10f68:	add	r3, pc, r3
   10f6c:	mov	r0, r3
   10f70:	bl	10ca8 <puts@plt>
   10f74:	ldr	r3, [pc, #380]	; 110f8 <_start@@Base+0x390>
   10f78:	add	r3, pc, r3
   10f7c:	mov	r0, r3
   10f80:	bl	10ca8 <puts@plt>
   10f84:	ldr	r3, [pc, #368]	; 110fc <_start@@Base+0x394>
   10f88:	add	r3, pc, r3
   10f8c:	mov	r0, r3
   10f90:	bl	10ca8 <puts@plt>
   10f94:	ldr	r3, [pc, #356]	; 11100 <_start@@Base+0x398>
   10f98:	add	r3, pc, r3
   10f9c:	mov	r0, r3
   10fa0:	bl	10ca8 <puts@plt>
   10fa4:	ldr	r3, [pc, #344]	; 11104 <_start@@Base+0x39c>
   10fa8:	add	r3, pc, r3
   10fac:	mov	r0, r3
   10fb0:	bl	10ca8 <puts@plt>
   10fb4:	ldr	r3, [pc, #332]	; 11108 <_start@@Base+0x3a0>
   10fb8:	add	r3, pc, r3
   10fbc:	mov	r0, r3
   10fc0:	bl	10ca8 <puts@plt>
   10fc4:	ldr	r3, [pc, #320]	; 1110c <_start@@Base+0x3a4>
   10fc8:	add	r3, pc, r3
   10fcc:	mov	r0, r3
   10fd0:	bl	10ca8 <puts@plt>
   10fd4:	mov	r0, #10
   10fd8:	bl	10d14 <putchar@plt>
   10fdc:	ldr	r3, [pc, #300]	; 11110 <_start@@Base+0x3a8>
   10fe0:	add	r3, pc, r3
   10fe4:	mov	r0, r3
   10fe8:	bl	10ca8 <puts@plt>
   10fec:	ldr	r3, [pc, #288]	; 11114 <_start@@Base+0x3ac>
   10ff0:	add	r3, pc, r3
   10ff4:	mov	r0, r3
   10ff8:	bl	10ca8 <puts@plt>
   10ffc:	mov	r0, #10
   11000:	bl	10d14 <putchar@plt>
   11004:	ldr	r3, [pc, #268]	; 11118 <_start@@Base+0x3b0>
   11008:	add	r3, pc, r3
   1100c:	mov	r0, r3
   11010:	bl	10ca8 <puts@plt>
   11014:	ldr	r3, [pc, #256]	; 1111c <_start@@Base+0x3b4>
   11018:	add	r3, pc, r3
   1101c:	mov	r0, r3
   11020:	bl	10ca8 <puts@plt>
   11024:	mov	r0, #10
   11028:	bl	10d14 <putchar@plt>
   1102c:	ldr	r3, [pc, #236]	; 11120 <_start@@Base+0x3b8>
   11030:	add	r3, pc, r3
   11034:	mov	r0, r3
   11038:	bl	10ca8 <puts@plt>
   1103c:	ldr	r3, [pc, #224]	; 11124 <_start@@Base+0x3bc>
   11040:	add	r3, pc, r3
   11044:	mov	r0, r3
   11048:	bl	10ca8 <puts@plt>
   1104c:	mov	r0, #10
   11050:	bl	10d14 <putchar@plt>
   11054:	ldr	r3, [pc, #204]	; 11128 <_start@@Base+0x3c0>
   11058:	add	r3, pc, r3
   1105c:	mov	r0, r3
   11060:	bl	10ca8 <puts@plt>
   11064:	ldr	r3, [pc, #192]	; 1112c <_start@@Base+0x3c4>
   11068:	add	r3, pc, r3
   1106c:	mov	r0, r3
   11070:	bl	10ca8 <puts@plt>
   11074:	ldr	r3, [pc, #180]	; 11130 <_start@@Base+0x3c8>
   11078:	add	r3, pc, r3
   1107c:	mov	r0, r3
   11080:	bl	10ca8 <puts@plt>
   11084:	ldr	r3, [pc, #168]	; 11134 <_start@@Base+0x3cc>
   11088:	add	r3, pc, r3
   1108c:	mov	r0, r3
   11090:	bl	10ca8 <puts@plt>
   11094:	ldr	r3, [pc, #156]	; 11138 <_start@@Base+0x3d0>
   11098:	add	r3, pc, r3
   1109c:	mov	r0, r3
   110a0:	bl	10ca8 <puts@plt>
   110a4:	ldr	r3, [pc, #144]	; 1113c <_start@@Base+0x3d4>
   110a8:	add	r3, pc, r3
   110ac:	mov	r0, r3
   110b0:	bl	10ca8 <puts@plt>
   110b4:	ldr	r3, [pc, #132]	; 11140 <_start@@Base+0x3d8>
   110b8:	add	r3, pc, r3
   110bc:	mov	r0, r3
   110c0:	bl	10ca8 <puts@plt>
   110c4:	mov	r0, #10
   110c8:	bl	10d14 <putchar@plt>
   110cc:	nop			; (mov r0, r0)
   110d0:	pop	{fp, pc}
   110d4:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   110d8:	andeq	r0, r0, r8, asr #27
   110dc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   110e0:	andeq	r0, r0, r8, lsr #28
   110e4:	andeq	r0, r0, ip, lsr #28
   110e8:	andeq	r0, r0, ip, lsr lr
   110ec:	andeq	r0, r0, ip, ror lr
   110f0:			; <UNDEFINED> instruction: 0x00000eb4
   110f4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   110f8:	strdeq	r0, [r0], -r8
   110fc:	andeq	r0, r0, r8, lsr #30
   11100:	andeq	r0, r0, r0, asr pc
   11104:	andeq	r0, r0, ip, asr pc
   11108:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1110c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   11110:	andeq	r0, r0, r4, asr #31
   11114:	andeq	r1, r0, r4
   11118:	andeq	r1, r0, r8
   1111c:	andeq	r1, r0, r4, lsl r0
   11120:	andeq	r1, r0, ip, lsl r0
   11124:	andeq	r1, r0, r8, lsr #32
   11128:	andeq	r1, r0, r4, asr #32
   1112c:	andeq	r1, r0, r4, lsl #1
   11130:	andeq	r1, r0, r0, asr #1
   11134:	ldrdeq	r1, [r0], -ip
   11138:	andeq	r1, r0, r8, lsl r1
   1113c:	andeq	r1, r0, r0, asr r1
   11140:	andeq	r1, r0, r0, lsl #3
   11144:	push	{r4, fp, lr}
   11148:	add	fp, sp, #8
   1114c:	sub	sp, sp, #20
   11150:	str	r0, [fp, #-16]
   11154:	str	r1, [fp, #-20]	; 0xffffffec
   11158:	str	r2, [fp, #-24]	; 0xffffffe8
   1115c:	ldr	r4, [pc, #104]	; 111cc <_start@@Base+0x464>
   11160:	add	r4, pc, r4
   11164:	ldr	r1, [fp, #-20]	; 0xffffffec
   11168:	ldr	r3, [pc, #96]	; 111d0 <_start@@Base+0x468>
   1116c:	add	r3, pc, r3
   11170:	mov	r0, r3
   11174:	bl	10c0c <printf@plt>
   11178:	ldr	r3, [fp, #-16]
   1117c:	cmp	r3, #0
   11180:	beq	111a8 <_start@@Base+0x440>
   11184:	ldr	r3, [pc, #72]	; 111d4 <_start@@Base+0x46c>
   11188:	add	r3, pc, r3
   1118c:	mov	r0, r3
   11190:	bl	10c0c <printf@plt>
   11194:	ldr	r3, [pc, #60]	; 111d8 <_start@@Base+0x470>
   11198:	ldr	r3, [r4, r3]
   1119c:	mov	r1, r3
   111a0:	ldr	r0, [fp, #-16]
   111a4:	bl	10c48 <coda_cursor_print_path@plt>
   111a8:	mov	r0, #10
   111ac:	bl	10d14 <putchar@plt>
   111b0:	ldr	r3, [pc, #36]	; 111dc <_start@@Base+0x474>
   111b4:	ldr	r3, [r4, r3]
   111b8:	mov	r2, #1
   111bc:	str	r2, [r3]
   111c0:	nop			; (mov r0, r0)
   111c4:	sub	sp, fp, #8
   111c8:	pop	{r4, fp, pc}
   111cc:	muleq	r1, r8, lr
   111d0:	andeq	r1, r0, ip, lsl #2
   111d4:	strdeq	r1, [r0], -ip
   111d8:	andeq	r0, r0, r8, lsl #1
   111dc:	muleq	r0, r0, r0
   111e0:	push	{r4, fp, lr}
   111e4:	add	fp, sp, #8
   111e8:	sub	sp, sp, #60	; 0x3c
   111ec:	str	r0, [fp, #-56]	; 0xffffffc8
   111f0:	ldr	r4, [pc, #736]	; 114d8 <_start@@Base+0x770>
   111f4:	add	r4, pc, r4
   111f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   111fc:	bl	10ca8 <puts@plt>
   11200:	sub	r0, fp, #40	; 0x28
   11204:	sub	r2, fp, #24
   11208:	sub	r1, fp, #36	; 0x24
   1120c:	sub	r3, fp, #48	; 0x30
   11210:	str	r3, [sp, #4]
   11214:	sub	r3, fp, #44	; 0x2c
   11218:	str	r3, [sp]
   1121c:	mov	r3, r0
   11220:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11224:	bl	10c78 <coda_recognize_file@plt>
   11228:	mov	r3, r0
   1122c:	cmp	r3, #0
   11230:	beq	11280 <_start@@Base+0x518>
   11234:	bl	10d44 <coda_get_errno@plt>
   11238:	mov	r3, r0
   1123c:	ldr	r3, [r3]
   11240:	mov	r0, r3
   11244:	bl	10d2c <coda_errno_to_string@plt>
   11248:	mov	r3, r0
   1124c:	mov	r1, r3
   11250:	ldr	r3, [pc, #644]	; 114dc <_start@@Base+0x774>
   11254:	add	r3, pc, r3
   11258:	mov	r0, r3
   1125c:	bl	10c0c <printf@plt>
   11260:	mov	r1, #0
   11264:	mov	r0, #0
   11268:	bl	10c18 <coda_set_error@plt>
   1126c:	ldr	r3, [pc, #620]	; 114e0 <_start@@Base+0x778>
   11270:	ldr	r3, [r4, r3]
   11274:	mov	r2, #1
   11278:	str	r2, [r3]
   1127c:	b	114d0 <_start@@Base+0x768>
   11280:	ldr	r3, [pc, #604]	; 114e4 <_start@@Base+0x77c>
   11284:	ldr	r3, [r4, r3]
   11288:	ldr	r3, [r3]
   1128c:	cmp	r3, #0
   11290:	beq	112d0 <_start@@Base+0x568>
   11294:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11298:	cmp	r3, #0
   1129c:	beq	112ac <_start@@Base+0x544>
   112a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   112a4:	cmp	r3, #0
   112a8:	bne	112d0 <_start@@Base+0x568>
   112ac:	ldr	r3, [pc, #564]	; 114e8 <_start@@Base+0x780>
   112b0:	add	r3, pc, r3
   112b4:	mov	r0, r3
   112b8:	bl	10ca8 <puts@plt>
   112bc:	ldr	r3, [pc, #540]	; 114e0 <_start@@Base+0x778>
   112c0:	ldr	r3, [r4, r3]
   112c4:	mov	r2, #1
   112c8:	str	r2, [r3]
   112cc:	b	114d0 <_start@@Base+0x768>
   112d0:	ldr	r3, [pc, #532]	; 114ec <_start@@Base+0x784>
   112d4:	ldr	r3, [r4, r3]
   112d8:	ldr	r3, [r3]
   112dc:	cmp	r3, #0
   112e0:	beq	11340 <_start@@Base+0x5d8>
   112e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   112e8:	mov	r0, r3
   112ec:	bl	10c90 <coda_type_get_format_name@plt>
   112f0:	mov	r3, r0
   112f4:	mov	r1, r3
   112f8:	ldr	r3, [pc, #496]	; 114f0 <_start@@Base+0x788>
   112fc:	add	r3, pc, r3
   11300:	mov	r0, r3
   11304:	bl	10c0c <printf@plt>
   11308:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1130c:	cmp	r3, #0
   11310:	beq	11338 <_start@@Base+0x5d0>
   11314:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11318:	cmp	r3, #0
   1131c:	beq	11338 <_start@@Base+0x5d0>
   11320:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11324:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11328:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1132c:	ldr	r0, [pc, #448]	; 114f4 <_start@@Base+0x78c>
   11330:	add	r0, pc, r0
   11334:	bl	10c0c <printf@plt>
   11338:	mov	r0, #10
   1133c:	bl	10d14 <putchar@plt>
   11340:	sub	r3, fp, #20
   11344:	mov	r1, r3
   11348:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1134c:	bl	10c24 <coda_open@plt>
   11350:	str	r0, [fp, #-16]
   11354:	ldr	r3, [fp, #-16]
   11358:	cmp	r3, #0
   1135c:	beq	11398 <_start@@Base+0x630>
   11360:	bl	10d44 <coda_get_errno@plt>
   11364:	mov	r3, r0
   11368:	ldr	r3, [r3]
   1136c:	cmn	r3, #21
   11370:	bne	11398 <_start@@Base+0x630>
   11374:	mov	r0, #0
   11378:	bl	10c3c <coda_set_option_use_mmap@plt>
   1137c:	sub	r3, fp, #20
   11380:	mov	r1, r3
   11384:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11388:	bl	10c24 <coda_open@plt>
   1138c:	str	r0, [fp, #-16]
   11390:	mov	r0, #1
   11394:	bl	10c3c <coda_set_option_use_mmap@plt>
   11398:	ldr	r3, [fp, #-16]
   1139c:	cmp	r3, #0
   113a0:	beq	113e4 <_start@@Base+0x67c>
   113a4:	bl	10d44 <coda_get_errno@plt>
   113a8:	mov	r3, r0
   113ac:	ldr	r3, [r3]
   113b0:	mov	r0, r3
   113b4:	bl	10d2c <coda_errno_to_string@plt>
   113b8:	mov	r3, r0
   113bc:	mov	r1, r3
   113c0:	ldr	r3, [pc, #304]	; 114f8 <_start@@Base+0x790>
   113c4:	add	r3, pc, r3
   113c8:	mov	r0, r3
   113cc:	bl	10c0c <printf@plt>
   113d0:	ldr	r3, [pc, #264]	; 114e0 <_start@@Base+0x778>
   113d4:	ldr	r3, [r4, r3]
   113d8:	mov	r2, #1
   113dc:	str	r2, [r3]
   113e0:	b	114d0 <_start@@Base+0x768>
   113e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   113e8:	ldr	r3, [pc, #268]	; 114fc <_start@@Base+0x794>
   113ec:	ldr	r3, [r4, r3]
   113f0:	ldr	r3, [r3]
   113f4:	cmp	r3, #0
   113f8:	moveq	r3, #1
   113fc:	movne	r3, #0
   11400:	uxtb	r3, r3
   11404:	mov	r1, r3
   11408:	mov	r3, #0
   1140c:	ldr	r2, [pc, #236]	; 11500 <_start@@Base+0x798>
   11410:	add	r2, pc, r2
   11414:	bl	10cb4 <coda_product_check@plt>
   11418:	mov	r3, r0
   1141c:	cmp	r3, #0
   11420:	beq	11470 <_start@@Base+0x708>
   11424:	bl	10d44 <coda_get_errno@plt>
   11428:	mov	r3, r0
   1142c:	ldr	r3, [r3]
   11430:	mov	r0, r3
   11434:	bl	10d2c <coda_errno_to_string@plt>
   11438:	mov	r3, r0
   1143c:	mov	r1, r3
   11440:	ldr	r3, [pc, #188]	; 11504 <_start@@Base+0x79c>
   11444:	add	r3, pc, r3
   11448:	mov	r0, r3
   1144c:	bl	10c0c <printf@plt>
   11450:	ldr	r3, [pc, #136]	; 114e0 <_start@@Base+0x778>
   11454:	ldr	r3, [r4, r3]
   11458:	mov	r2, #1
   1145c:	str	r2, [r3]
   11460:	ldr	r3, [fp, #-20]	; 0xffffffec
   11464:	mov	r0, r3
   11468:	bl	10d20 <coda_close@plt>
   1146c:	b	114d0 <_start@@Base+0x768>
   11470:	ldr	r3, [fp, #-20]	; 0xffffffec
   11474:	mov	r0, r3
   11478:	bl	10d20 <coda_close@plt>
   1147c:	mov	r3, r0
   11480:	cmp	r3, #0
   11484:	beq	114c8 <_start@@Base+0x760>
   11488:	bl	10d44 <coda_get_errno@plt>
   1148c:	mov	r3, r0
   11490:	ldr	r3, [r3]
   11494:	mov	r0, r3
   11498:	bl	10d2c <coda_errno_to_string@plt>
   1149c:	mov	r3, r0
   114a0:	mov	r1, r3
   114a4:	ldr	r3, [pc, #92]	; 11508 <_start@@Base+0x7a0>
   114a8:	add	r3, pc, r3
   114ac:	mov	r0, r3
   114b0:	bl	10c0c <printf@plt>
   114b4:	ldr	r3, [pc, #36]	; 114e0 <_start@@Base+0x778>
   114b8:	ldr	r3, [r4, r3]
   114bc:	mov	r2, #1
   114c0:	str	r2, [r3]
   114c4:	b	114d0 <_start@@Base+0x768>
   114c8:	mov	r0, #10
   114cc:	bl	10d14 <putchar@plt>
   114d0:	sub	sp, fp, #8
   114d4:	pop	{r4, fp, pc}
   114d8:	andeq	r1, r1, r4, lsl #28
   114dc:	andeq	r1, r0, r8, lsr r0
   114e0:	muleq	r0, r0, r0
   114e4:	andeq	r0, r0, ip, lsl #1
   114e8:	andeq	r0, r0, ip, ror #31
   114ec:	muleq	r0, r4, r0
   114f0:	andeq	r0, r0, ip, asr #31
   114f4:			; <UNDEFINED> instruction: 0x00000fb0
   114f8:	andeq	r0, r0, r8, asr #29
   114fc:	andeq	r0, r0, r4, lsr #1
   11500:			; <UNDEFINED> instruction: 0xfffffd2c
   11504:	andeq	r0, r0, r8, asr #28
   11508:	andeq	r0, r0, r4, asr #28

0001150c <main@@Base>:
   1150c:	push	{r4, fp, lr}
   11510:	add	fp, sp, #8
   11514:	sub	sp, sp, #1024	; 0x400
   11518:	sub	sp, sp, #12
   1151c:	str	r0, [fp, #-1040]	; 0xfffffbf0
   11520:	str	r1, [fp, #-1044]	; 0xfffffbec
   11524:	ldr	r4, [pc, #1648]	; 11b9c <main@@Base+0x690>
   11528:	add	r4, pc, r4
   1152c:	mov	r3, #0
   11530:	str	r3, [fp, #-16]
   11534:	ldr	r3, [pc, #1636]	; 11ba0 <main@@Base+0x694>
   11538:	ldr	r3, [r4, r3]
   1153c:	mov	r2, #0
   11540:	str	r2, [r3]
   11544:	ldr	r3, [pc, #1624]	; 11ba4 <main@@Base+0x698>
   11548:	ldr	r3, [r4, r3]
   1154c:	mov	r2, #0
   11550:	str	r2, [r3]
   11554:	mov	r3, #1
   11558:	str	r3, [fp, #-20]	; 0xffffffec
   1155c:	ldr	r3, [pc, #1604]	; 11ba8 <main@@Base+0x69c>
   11560:	ldr	r3, [r4, r3]
   11564:	mov	r2, #0
   11568:	str	r2, [r3]
   1156c:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11570:	cmp	r3, #1
   11574:	beq	115d0 <main@@Base+0xc4>
   11578:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   1157c:	add	r3, r3, #4
   11580:	ldr	r3, [r3]
   11584:	ldr	r2, [pc, #1568]	; 11bac <main@@Base+0x6a0>
   11588:	add	r2, pc, r2
   1158c:	mov	r1, r2
   11590:	mov	r0, r3
   11594:	bl	10c00 <strcmp@plt>
   11598:	mov	r3, r0
   1159c:	cmp	r3, #0
   115a0:	beq	115d0 <main@@Base+0xc4>
   115a4:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   115a8:	add	r3, r3, #4
   115ac:	ldr	r3, [r3]
   115b0:	ldr	r2, [pc, #1528]	; 11bb0 <main@@Base+0x6a4>
   115b4:	add	r2, pc, r2
   115b8:	mov	r1, r2
   115bc:	mov	r0, r3
   115c0:	bl	10c00 <strcmp@plt>
   115c4:	mov	r3, r0
   115c8:	cmp	r3, #0
   115cc:	bne	115dc <main@@Base+0xd0>
   115d0:	bl	10edc <_start@@Base+0x174>
   115d4:	mov	r0, #0
   115d8:	bl	10cd8 <exit@plt>
   115dc:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   115e0:	add	r3, r3, #4
   115e4:	ldr	r3, [r3]
   115e8:	ldr	r2, [pc, #1476]	; 11bb4 <main@@Base+0x6a8>
   115ec:	add	r2, pc, r2
   115f0:	mov	r1, r2
   115f4:	mov	r0, r3
   115f8:	bl	10c00 <strcmp@plt>
   115fc:	mov	r3, r0
   11600:	cmp	r3, #0
   11604:	beq	11634 <main@@Base+0x128>
   11608:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   1160c:	add	r3, r3, #4
   11610:	ldr	r3, [r3]
   11614:	ldr	r2, [pc, #1436]	; 11bb8 <main@@Base+0x6ac>
   11618:	add	r2, pc, r2
   1161c:	mov	r1, r2
   11620:	mov	r0, r3
   11624:	bl	10c00 <strcmp@plt>
   11628:	mov	r3, r0
   1162c:	cmp	r3, #0
   11630:	bne	11640 <main@@Base+0x134>
   11634:	bl	10e90 <_start@@Base+0x128>
   11638:	mov	r0, #0
   1163c:	bl	10cd8 <exit@plt>
   11640:	mov	r3, #1
   11644:	str	r3, [fp, #-24]	; 0xffffffe8
   11648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1164c:	add	r2, r3, #1
   11650:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11654:	cmp	r2, r3
   11658:	bge	116c0 <main@@Base+0x1b4>
   1165c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11660:	lsl	r3, r3, #2
   11664:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11668:	add	r3, r2, r3
   1166c:	ldr	r3, [r3]
   11670:	ldr	r2, [pc, #1348]	; 11bbc <main@@Base+0x6b0>
   11674:	add	r2, pc, r2
   11678:	mov	r1, r2
   1167c:	mov	r0, r3
   11680:	bl	10c00 <strcmp@plt>
   11684:	mov	r3, r0
   11688:	cmp	r3, #0
   1168c:	bne	116c0 <main@@Base+0x1b4>
   11690:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11694:	add	r3, r3, #1
   11698:	lsl	r3, r3, #2
   1169c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   116a0:	add	r3, r2, r3
   116a4:	ldr	r3, [r3]
   116a8:	mov	r0, r3
   116ac:	bl	10c6c <coda_set_definition_path@plt>
   116b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116b4:	add	r3, r3, #2
   116b8:	str	r3, [fp, #-24]	; 0xffffffe8
   116bc:	b	11734 <main@@Base+0x228>
   116c0:	ldr	r3, [pc, #1272]	; 11bc0 <main@@Base+0x6b4>
   116c4:	add	r3, pc, r3
   116c8:	str	r3, [fp, #-32]	; 0xffffffe0
   116cc:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   116d0:	ldr	r3, [r3]
   116d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   116d8:	mov	r1, #0
   116dc:	mov	r0, r3
   116e0:	bl	10c54 <coda_set_definition_path_conditional@plt>
   116e4:	mov	r3, r0
   116e8:	cmp	r3, #0
   116ec:	beq	11998 <main@@Base+0x48c>
   116f0:	ldr	r3, [pc, #1228]	; 11bc4 <main@@Base+0x6b8>
   116f4:	ldr	r3, [r4, r3]
   116f8:	ldr	r4, [r3]
   116fc:	bl	10d44 <coda_get_errno@plt>
   11700:	mov	r3, r0
   11704:	ldr	r3, [r3]
   11708:	mov	r0, r3
   1170c:	bl	10d2c <coda_errno_to_string@plt>
   11710:	mov	r3, r0
   11714:	mov	r2, r3
   11718:	ldr	r3, [pc, #1192]	; 11bc8 <main@@Base+0x6bc>
   1171c:	add	r3, pc, r3
   11720:	mov	r1, r3
   11724:	mov	r0, r4
   11728:	bl	10ce4 <fprintf@plt>
   1172c:	mov	r0, #1
   11730:	bl	10cd8 <exit@plt>
   11734:	b	11998 <main@@Base+0x48c>
   11738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1173c:	lsl	r3, r3, #2
   11740:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11744:	add	r3, r2, r3
   11748:	ldr	r3, [r3]
   1174c:	ldr	r2, [pc, #1144]	; 11bcc <main@@Base+0x6c0>
   11750:	add	r2, pc, r2
   11754:	mov	r1, r2
   11758:	mov	r0, r3
   1175c:	bl	10c00 <strcmp@plt>
   11760:	mov	r3, r0
   11764:	cmp	r3, #0
   11768:	beq	117a0 <main@@Base+0x294>
   1176c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11770:	lsl	r3, r3, #2
   11774:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11778:	add	r3, r2, r3
   1177c:	ldr	r3, [r3]
   11780:	ldr	r2, [pc, #1096]	; 11bd0 <main@@Base+0x6c4>
   11784:	add	r2, pc, r2
   11788:	mov	r1, r2
   1178c:	mov	r0, r3
   11790:	bl	10c00 <strcmp@plt>
   11794:	mov	r3, r0
   11798:	cmp	r3, #0
   1179c:	bne	117b4 <main@@Base+0x2a8>
   117a0:	ldr	r3, [pc, #1016]	; 11ba0 <main@@Base+0x694>
   117a4:	ldr	r3, [r4, r3]
   117a8:	mov	r2, #1
   117ac:	str	r2, [r3]
   117b0:	b	1198c <main@@Base+0x480>
   117b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117b8:	lsl	r3, r3, #2
   117bc:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   117c0:	add	r3, r2, r3
   117c4:	ldr	r3, [r3]
   117c8:	ldr	r2, [pc, #1028]	; 11bd4 <main@@Base+0x6c8>
   117cc:	add	r2, pc, r2
   117d0:	mov	r1, r2
   117d4:	mov	r0, r3
   117d8:	bl	10c00 <strcmp@plt>
   117dc:	mov	r3, r0
   117e0:	cmp	r3, #0
   117e4:	beq	1181c <main@@Base+0x310>
   117e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117ec:	lsl	r3, r3, #2
   117f0:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   117f4:	add	r3, r2, r3
   117f8:	ldr	r3, [r3]
   117fc:	ldr	r2, [pc, #980]	; 11bd8 <main@@Base+0x6cc>
   11800:	add	r2, pc, r2
   11804:	mov	r1, r2
   11808:	mov	r0, r3
   1180c:	bl	10c00 <strcmp@plt>
   11810:	mov	r3, r0
   11814:	cmp	r3, #0
   11818:	bne	11830 <main@@Base+0x324>
   1181c:	ldr	r3, [pc, #896]	; 11ba4 <main@@Base+0x698>
   11820:	ldr	r3, [r4, r3]
   11824:	mov	r2, #1
   11828:	str	r2, [r3]
   1182c:	b	1198c <main@@Base+0x480>
   11830:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11834:	lsl	r3, r3, #2
   11838:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   1183c:	add	r3, r2, r3
   11840:	ldr	r3, [r3]
   11844:	ldr	r2, [pc, #912]	; 11bdc <main@@Base+0x6d0>
   11848:	add	r2, pc, r2
   1184c:	mov	r1, r2
   11850:	mov	r0, r3
   11854:	bl	10c00 <strcmp@plt>
   11858:	mov	r3, r0
   1185c:	cmp	r3, #0
   11860:	beq	11898 <main@@Base+0x38c>
   11864:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11868:	lsl	r3, r3, #2
   1186c:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11870:	add	r3, r2, r3
   11874:	ldr	r3, [r3]
   11878:	ldr	r2, [pc, #864]	; 11be0 <main@@Base+0x6d4>
   1187c:	add	r2, pc, r2
   11880:	mov	r1, r2
   11884:	mov	r0, r3
   11888:	bl	10c00 <strcmp@plt>
   1188c:	mov	r3, r0
   11890:	cmp	r3, #0
   11894:	bne	118ac <main@@Base+0x3a0>
   11898:	ldr	r3, [pc, #776]	; 11ba8 <main@@Base+0x69c>
   1189c:	ldr	r3, [r4, r3]
   118a0:	mov	r2, #1
   118a4:	str	r2, [r3]
   118a8:	b	1198c <main@@Base+0x480>
   118ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118b0:	lsl	r3, r3, #2
   118b4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   118b8:	add	r3, r2, r3
   118bc:	ldr	r3, [r3]
   118c0:	ldr	r2, [pc, #796]	; 11be4 <main@@Base+0x6d8>
   118c4:	add	r2, pc, r2
   118c8:	mov	r1, r2
   118cc:	mov	r0, r3
   118d0:	bl	10c00 <strcmp@plt>
   118d4:	mov	r3, r0
   118d8:	cmp	r3, #0
   118dc:	bne	118ec <main@@Base+0x3e0>
   118e0:	mov	r3, #0
   118e4:	str	r3, [fp, #-20]	; 0xffffffec
   118e8:	b	1198c <main@@Base+0x480>
   118ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118f0:	lsl	r3, r3, #2
   118f4:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   118f8:	add	r3, r2, r3
   118fc:	ldr	r3, [r3]
   11900:	ldr	r2, [pc, #736]	; 11be8 <main@@Base+0x6dc>
   11904:	add	r2, pc, r2
   11908:	mov	r1, r2
   1190c:	mov	r0, r3
   11910:	bl	10c00 <strcmp@plt>
   11914:	mov	r3, r0
   11918:	cmp	r3, #0
   1191c:	bne	11940 <main@@Base+0x434>
   11920:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11924:	sub	r2, r3, #1
   11928:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1192c:	cmp	r2, r3
   11930:	bne	11940 <main@@Base+0x434>
   11934:	mov	r3, #1
   11938:	str	r3, [fp, #-16]
   1193c:	b	119b0 <main@@Base+0x4a4>
   11940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11944:	lsl	r3, r3, #2
   11948:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   1194c:	add	r3, r2, r3
   11950:	ldr	r3, [r3]
   11954:	ldrb	r3, [r3]
   11958:	cmp	r3, #45	; 0x2d
   1195c:	bne	119ac <main@@Base+0x4a0>
   11960:	ldr	r3, [pc, #604]	; 11bc4 <main@@Base+0x6b8>
   11964:	ldr	r3, [r4, r3]
   11968:	ldr	r3, [r3]
   1196c:	mov	r2, #25
   11970:	mov	r1, #1
   11974:	ldr	r0, [pc, #624]	; 11bec <main@@Base+0x6e0>
   11978:	add	r0, pc, r0
   1197c:	bl	10c84 <fwrite@plt>
   11980:	bl	10edc <_start@@Base+0x174>
   11984:	mov	r0, #1
   11988:	bl	10cd8 <exit@plt>
   1198c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11990:	add	r3, r3, #1
   11994:	str	r3, [fp, #-24]	; 0xffffffe8
   11998:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1199c:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   119a0:	cmp	r2, r3
   119a4:	blt	11738 <main@@Base+0x22c>
   119a8:	b	119b0 <main@@Base+0x4a4>
   119ac:	nop			; (mov r0, r0)
   119b0:	bl	10cf0 <coda_init@plt>
   119b4:	mov	r3, r0
   119b8:	cmp	r3, #0
   119bc:	beq	11a04 <main@@Base+0x4f8>
   119c0:	ldr	r3, [pc, #508]	; 11bc4 <main@@Base+0x6b8>
   119c4:	ldr	r3, [r4, r3]
   119c8:	ldr	r4, [r3]
   119cc:	bl	10d44 <coda_get_errno@plt>
   119d0:	mov	r3, r0
   119d4:	ldr	r3, [r3]
   119d8:	mov	r0, r3
   119dc:	bl	10d2c <coda_errno_to_string@plt>
   119e0:	mov	r3, r0
   119e4:	mov	r2, r3
   119e8:	ldr	r3, [pc, #512]	; 11bf0 <main@@Base+0x6e4>
   119ec:	add	r3, pc, r3
   119f0:	mov	r1, r3
   119f4:	mov	r0, r4
   119f8:	bl	10ce4 <fprintf@plt>
   119fc:	mov	r0, #1
   11a00:	bl	10cd8 <exit@plt>
   11a04:	mov	r0, #0
   11a08:	bl	10bf4 <coda_set_option_perform_boundary_checks@plt>
   11a0c:	mov	r0, #0
   11a10:	bl	10d08 <coda_set_option_perform_conversions@plt>
   11a14:	ldr	r0, [fp, #-20]	; 0xffffffec
   11a18:	bl	10c3c <coda_set_option_use_mmap@plt>
   11a1c:	ldr	r3, [fp, #-16]
   11a20:	cmp	r3, #0
   11a24:	beq	11b5c <main@@Base+0x650>
   11a28:	mov	r3, #0
   11a2c:	str	r3, [fp, #-28]	; 0xffffffe4
   11a30:	bl	10c60 <getchar@plt>
   11a34:	mov	r3, r0
   11a38:	strb	r3, [fp, #-33]	; 0xffffffdf
   11a3c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11a40:	cmp	r3, #13
   11a44:	bne	11a7c <main@@Base+0x570>
   11a48:	bl	10c60 <getchar@plt>
   11a4c:	mov	r3, r0
   11a50:	strb	r3, [fp, #-34]	; 0xffffffde
   11a54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   11a58:	cmp	r3, #10
   11a5c:	beq	11a7c <main@@Base+0x570>
   11a60:	ldrb	r2, [fp, #-34]	; 0xffffffde
   11a64:	ldr	r3, [pc, #392]	; 11bf4 <main@@Base+0x6e8>
   11a68:	ldr	r3, [r4, r3]
   11a6c:	ldr	r3, [r3]
   11a70:	mov	r1, r3
   11a74:	mov	r0, r2
   11a78:	bl	10cfc <ungetc@plt>
   11a7c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11a80:	cmp	r3, #10
   11a84:	beq	11a94 <main@@Base+0x588>
   11a88:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   11a8c:	cmp	r3, #13
   11a90:	bne	11ac0 <main@@Base+0x5b4>
   11a94:	sub	r2, fp, #1024	; 0x400
   11a98:	sub	r2, r2, #12
   11a9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11aa0:	add	r3, r2, r3
   11aa4:	mov	r2, #0
   11aa8:	strb	r2, [r3]
   11aac:	nop			; (mov r0, r0)
   11ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ab4:	cmp	r3, #0
   11ab8:	ble	11a28 <main@@Base+0x51c>
   11abc:	b	11b10 <main@@Base+0x604>
   11ac0:	sub	r2, fp, #1024	; 0x400
   11ac4:	sub	r2, r2, #12
   11ac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11acc:	add	r3, r2, r3
   11ad0:	ldrb	r2, [fp, #-33]	; 0xffffffdf
   11ad4:	strb	r2, [r3]
   11ad8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11adc:	add	r3, r3, #1
   11ae0:	str	r3, [fp, #-28]	; 0xffffffe4
   11ae4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ae8:	cmp	r3, #1000	; 0x3e8
   11aec:	blt	11a30 <main@@Base+0x524>
   11af0:	ldr	r3, [pc, #256]	; 11bf8 <main@@Base+0x6ec>
   11af4:	add	r3, pc, r3
   11af8:	mov	r2, #316	; 0x13c
   11afc:	ldr	r1, [pc, #248]	; 11bfc <main@@Base+0x6f0>
   11b00:	add	r1, pc, r1
   11b04:	ldr	r0, [pc, #244]	; 11c00 <main@@Base+0x6f4>
   11b08:	add	r0, pc, r0
   11b0c:	bl	10d5c <__assert_fail@plt>
   11b10:	sub	r3, fp, #1024	; 0x400
   11b14:	sub	r3, r3, #12
   11b18:	mov	r0, r3
   11b1c:	bl	111e0 <_start@@Base+0x478>
   11b20:	mov	r0, #0
   11b24:	bl	10c30 <fflush@plt>
   11b28:	b	11a28 <main@@Base+0x51c>
   11b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b30:	lsl	r3, r3, #2
   11b34:	ldr	r2, [fp, #-1044]	; 0xfffffbec
   11b38:	add	r3, r2, r3
   11b3c:	ldr	r3, [r3]
   11b40:	mov	r0, r3
   11b44:	bl	111e0 <_start@@Base+0x478>
   11b48:	mov	r0, #0
   11b4c:	bl	10c30 <fflush@plt>
   11b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b54:	add	r3, r3, #1
   11b58:	str	r3, [fp, #-24]	; 0xffffffe8
   11b5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11b60:	ldr	r3, [fp, #-1040]	; 0xfffffbf0
   11b64:	cmp	r2, r3
   11b68:	blt	11b2c <main@@Base+0x620>
   11b6c:	bl	10c9c <coda_done@plt>
   11b70:	ldr	r3, [pc, #140]	; 11c04 <main@@Base+0x6f8>
   11b74:	ldr	r3, [r4, r3]
   11b78:	ldr	r3, [r3]
   11b7c:	cmp	r3, #0
   11b80:	beq	11b8c <main@@Base+0x680>
   11b84:	mov	r0, #1
   11b88:	bl	10cd8 <exit@plt>
   11b8c:	mov	r3, #0
   11b90:	mov	r0, r3
   11b94:	sub	sp, fp, #8
   11b98:	pop	{r4, fp, pc}
   11b9c:	ldrdeq	r1, [r1], -r0
   11ba0:	muleq	r0, r4, r0
   11ba4:	andeq	r0, r0, r4, lsr #1
   11ba8:	andeq	r0, r0, ip, lsl #1
   11bac:	andeq	r0, r0, r4, ror sp
   11bb0:	andeq	r0, r0, ip, asr #26
   11bb4:	andeq	r0, r0, ip, lsl sp
   11bb8:	strdeq	r0, [r0], -r4
   11bbc:	andeq	r0, r0, r4, lsr #25
   11bc0:	andeq	r0, r0, r8, asr ip
   11bc4:	muleq	r0, r8, r0
   11bc8:	andeq	r0, r0, ip, lsl ip
   11bcc:	strdeq	r0, [r0], -r4
   11bd0:	andeq	r0, r0, r4, asr #23
   11bd4:	andeq	r0, r0, r8, lsl #23
   11bd8:	andeq	r0, r0, r8, asr fp
   11bdc:	andeq	r0, r0, r8, lsl fp
   11be0:	andeq	r0, r0, r8, ror #21
   11be4:			; <UNDEFINED> instruction: 0x00000ab0
   11be8:	andeq	r0, r0, ip, ror sl
   11bec:	andeq	r0, r0, ip, lsl #20
   11bf0:	andeq	r0, r0, ip, asr #18
   11bf4:	andeq	r0, r0, r0, lsr #1
   11bf8:	andeq	r0, r0, r8, lsl r9
   11bfc:	andeq	r0, r0, r0, lsr #17
   11c00:	strdeq	r0, [r0], -r8
   11c04:	muleq	r0, r0, r0

00011c08 <__libc_csu_init@@Base>:
   11c08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c0c:	mov	r7, r0
   11c10:	ldr	r6, [pc, #72]	; 11c60 <__libc_csu_init@@Base+0x58>
   11c14:	ldr	r5, [pc, #72]	; 11c64 <__libc_csu_init@@Base+0x5c>
   11c18:	add	r6, pc, r6
   11c1c:	add	r5, pc, r5
   11c20:	sub	r6, r6, r5
   11c24:	mov	r8, r1
   11c28:	mov	r9, r2
   11c2c:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt-0x20>
   11c30:	asrs	r6, r6, #2
   11c34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c38:	mov	r4, #0
   11c3c:	add	r4, r4, #1
   11c40:	ldr	r3, [r5], #4
   11c44:	mov	r2, r9
   11c48:	mov	r1, r8
   11c4c:	mov	r0, r7
   11c50:	blx	r3
   11c54:	cmp	r6, r4
   11c58:	bne	11c3c <__libc_csu_init@@Base+0x34>
   11c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c60:	ldrdeq	r1, [r1], -r8
   11c64:	ldrdeq	r1, [r1], -r0

00011c68 <__libc_csu_fini@@Base>:
   11c68:	bx	lr

Disassembly of section .fini:

00011c6c <.fini>:
   11c6c:	push	{r3, lr}
   11c70:	pop	{r3, pc}
