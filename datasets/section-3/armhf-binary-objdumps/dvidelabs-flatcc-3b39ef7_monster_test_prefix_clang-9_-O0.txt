
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	ip, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #28, 20	; 0x1c000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #28, 20	; 0x1c000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <memcmp@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #28, 20	; 0x1c000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <realloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #28, 20	; 0x1c000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <malloc@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #28, 20	; 0x1c000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__libc_start_main@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #28, 20	; 0x1c000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <__gmon_start__@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #28, 20	; 0x1c000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #28, 20	; 0x1c000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #28, 20	; 0x1c000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #28, 20	; 0x1c000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #28, 20	; 0x1c000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #28, 20	; 0x1c000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #28, 20	; 0x1c000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #28, 20	; 0x1c000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	12748 <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	sp, r1, r8, ror #8
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	sp, r1, r8, lsl #8
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12754 <__gmon_start__@plt>
   1280c:	andeq	ip, r1, r0, lsl #16
   12810:	andeq	r0, r0, r8, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	pc, r2, ip, asr r0	; <UNPREDICTABLE>
   12838:	andeq	pc, r2, ip, asr r0	; <UNPREDICTABLE>
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	pc, r2, ip, asr r0	; <UNPREDICTABLE>
   12870:	andeq	pc, r2, ip, asr r0	; <UNPREDICTABLE>
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	pc, r2, ip, asr r0	; <UNPREDICTABLE>
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, fp, lr}
   128a8:	add	fp, sp, #8
   128ac:	sub	sp, sp, #280	; 0x118
   128b0:	movw	r2, #0
   128b4:	str	r2, [fp, #-12]
   128b8:	str	r0, [fp, #-16]
   128bc:	str	r1, [fp, #-20]	; 0xffffffec
   128c0:	add	r0, sp, #24
   128c4:	str	r0, [sp, #20]
   128c8:	ldr	r0, [sp, #20]
   128cc:	bl	141ec <flatcc_builder_init@@Base>
   128d0:	ldr	r1, [sp, #20]
   128d4:	str	r0, [sp, #16]
   128d8:	mov	r0, r1
   128dc:	bl	12954 <main@@Base+0xb0>
   128e0:	ldr	r1, [pc, #104]	; 12950 <main@@Base+0xac>
   128e4:	add	r1, pc, r1
   128e8:	ldr	r2, [sp, #20]
   128ec:	str	r0, [sp, #12]
   128f0:	mov	r0, r2
   128f4:	bl	129a4 <main@@Base+0x100>
   128f8:	ldr	r1, [sp, #20]
   128fc:	str	r0, [sp, #8]
   12900:	mov	r0, r1
   12904:	bl	129f0 <main@@Base+0x14c>
   12908:	ldr	r1, [sp, #20]
   1290c:	str	r0, [sp, #4]
   12910:	mov	r0, r1
   12914:	sub	r1, fp, #32
   12918:	bl	19640 <flatcc_builder_get_direct_buffer@@Base>
   1291c:	ldr	r1, [pc, #40]	; 1294c <main@@Base+0xa8>
   12920:	add	r2, pc, r1
   12924:	str	r0, [fp, #-28]	; 0xffffffe4
   12928:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1292c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12930:	bl	12a30 <main@@Base+0x18c>
   12934:	str	r0, [fp, #-24]	; 0xffffffe8
   12938:	ldr	r0, [sp, #20]
   1293c:	bl	14498 <flatcc_builder_clear@@Base>
   12940:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12944:	sub	sp, fp, #8
   12948:	pop	{r4, r5, fp, pc}
   1294c:	andeq	sl, r0, sl, asr fp
   12950:	andeq	sl, r0, ip, lsl #23
   12954:	push	{fp, lr}
   12958:	mov	fp, sp
   1295c:	sub	sp, sp, #8
   12960:	ldr	r1, [pc, #56]	; 129a0 <main@@Base+0xfc>
   12964:	add	r1, pc, r1
   12968:	str	r0, [sp, #4]
   1296c:	ldr	r0, [sp, #4]
   12970:	bl	12a6c <main@@Base+0x1c8>
   12974:	cmp	r0, #0
   12978:	beq	12988 <main@@Base+0xe4>
   1297c:	mvn	r0, #0
   12980:	str	r0, [sp]
   12984:	b	12994 <main@@Base+0xf0>
   12988:	ldr	r0, [sp, #4]
   1298c:	bl	12aa0 <main@@Base+0x1fc>
   12990:	str	r0, [sp]
   12994:	ldr	r0, [sp]
   12998:	mov	sp, fp
   1299c:	pop	{fp, pc}
   129a0:	andeq	sl, r0, r6, lsl fp
   129a4:	push	{fp, lr}
   129a8:	mov	fp, sp
   129ac:	sub	sp, sp, #16
   129b0:	str	r0, [fp, #-4]
   129b4:	str	r1, [sp, #8]
   129b8:	ldr	r0, [fp, #-4]
   129bc:	ldr	r1, [fp, #-4]
   129c0:	ldr	r2, [sp, #8]
   129c4:	str	r0, [sp, #4]
   129c8:	mov	r0, r1
   129cc:	mov	r1, r2
   129d0:	bl	18ed0 <flatcc_builder_create_string_str@@Base>
   129d4:	ldr	r1, [sp, #4]
   129d8:	str	r0, [sp]
   129dc:	mov	r0, r1
   129e0:	ldr	r1, [sp]
   129e4:	bl	12ac4 <main@@Base+0x220>
   129e8:	mov	sp, fp
   129ec:	pop	{fp, pc}
   129f0:	push	{fp, lr}
   129f4:	mov	fp, sp
   129f8:	sub	sp, sp, #16
   129fc:	str	r0, [fp, #-4]
   12a00:	ldr	r0, [fp, #-4]
   12a04:	ldr	r1, [fp, #-4]
   12a08:	str	r0, [sp, #8]
   12a0c:	mov	r0, r1
   12a10:	bl	12b58 <main@@Base+0x2b4>
   12a14:	ldr	r1, [sp, #8]
   12a18:	str	r0, [sp, #4]
   12a1c:	mov	r0, r1
   12a20:	ldr	r1, [sp, #4]
   12a24:	bl	12b30 <main@@Base+0x28c>
   12a28:	mov	sp, fp
   12a2c:	pop	{fp, pc}
   12a30:	push	{fp, lr}
   12a34:	mov	fp, sp
   12a38:	sub	sp, sp, #16
   12a3c:	ldr	r3, [pc, #36]	; 12a68 <main@@Base+0x1c4>
   12a40:	add	r3, pc, r3
   12a44:	str	r0, [fp, #-4]
   12a48:	str	r1, [sp, #8]
   12a4c:	str	r2, [sp, #4]
   12a50:	ldr	r0, [fp, #-4]
   12a54:	ldr	r1, [sp, #8]
   12a58:	ldr	r2, [sp, #4]
   12a5c:	bl	1c4c4 <flatcc_verify_table_as_root@@Base>
   12a60:	mov	sp, fp
   12a64:	pop	{fp, pc}
   12a68:	andeq	r0, r0, r0, lsl #3
   12a6c:	push	{fp, lr}
   12a70:	mov	fp, sp
   12a74:	sub	sp, sp, #8
   12a78:	str	r0, [sp, #4]
   12a7c:	str	r1, [sp]
   12a80:	ldr	r0, [sp, #4]
   12a84:	ldr	r1, [sp]
   12a88:	movw	r2, #0
   12a8c:	uxth	r2, r2
   12a90:	movw	r3, #0
   12a94:	bl	15328 <flatcc_builder_start_buffer@@Base>
   12a98:	mov	sp, fp
   12a9c:	pop	{fp, pc}
   12aa0:	push	{fp, lr}
   12aa4:	mov	fp, sp
   12aa8:	sub	sp, sp, #8
   12aac:	str	r0, [sp, #4]
   12ab0:	ldr	r0, [sp, #4]
   12ab4:	movw	r1, #36	; 0x24
   12ab8:	bl	16a50 <flatcc_builder_start_table@@Base>
   12abc:	mov	sp, fp
   12ac0:	pop	{fp, pc}
   12ac4:	push	{fp, lr}
   12ac8:	mov	fp, sp
   12acc:	sub	sp, sp, #16
   12ad0:	str	r0, [fp, #-4]
   12ad4:	str	r1, [sp, #8]
   12ad8:	ldr	r0, [sp, #8]
   12adc:	cmp	r0, #0
   12ae0:	beq	12b18 <main@@Base+0x274>
   12ae4:	ldr	r0, [fp, #-4]
   12ae8:	movw	r1, #3
   12aec:	bl	181c4 <flatcc_builder_table_add_offset@@Base>
   12af0:	str	r0, [sp, #4]
   12af4:	movw	r1, #0
   12af8:	cmp	r0, r1
   12afc:	beq	12b18 <main@@Base+0x274>
   12b00:	ldr	r0, [sp, #8]
   12b04:	ldr	r1, [sp, #4]
   12b08:	str	r0, [r1]
   12b0c:	movw	r0, #0
   12b10:	str	r0, [sp]
   12b14:	b	12b24 <main@@Base+0x280>
   12b18:	mvn	r0, #0
   12b1c:	str	r0, [sp]
   12b20:	b	12b24 <main@@Base+0x280>
   12b24:	ldr	r0, [sp]
   12b28:	mov	sp, fp
   12b2c:	pop	{fp, pc}
   12b30:	push	{fp, lr}
   12b34:	mov	fp, sp
   12b38:	sub	sp, sp, #8
   12b3c:	str	r0, [sp, #4]
   12b40:	str	r1, [sp]
   12b44:	ldr	r0, [sp, #4]
   12b48:	ldr	r1, [sp]
   12b4c:	bl	1566c <flatcc_builder_end_buffer@@Base>
   12b50:	mov	sp, fp
   12b54:	pop	{fp, pc}
   12b58:	push	{fp, lr}
   12b5c:	mov	fp, sp
   12b60:	sub	sp, sp, #8
   12b64:	ldr	r1, [pc, #76]	; 12bb8 <main@@Base+0x314>
   12b68:	add	r1, pc, r1
   12b6c:	str	r0, [sp, #4]
   12b70:	ldr	r0, [sp, #4]
   12b74:	movw	r2, #1
   12b78:	bl	175c8 <flatcc_builder_check_required@@Base>
   12b7c:	cmp	r0, #0
   12b80:	beq	12b88 <main@@Base+0x2e4>
   12b84:	b	12ba8 <main@@Base+0x304>
   12b88:	ldr	r0, [pc, #44]	; 12bbc <main@@Base+0x318>
   12b8c:	add	r0, pc, r0
   12b90:	ldr	r1, [pc, #40]	; 12bc0 <main@@Base+0x31c>
   12b94:	add	r1, pc, r1
   12b98:	ldr	r2, [pc, #36]	; 12bc4 <main@@Base+0x320>
   12b9c:	add	r3, pc, r2
   12ba0:	movw	r2, #2398	; 0x95e
   12ba4:	bl	127a8 <__assert_fail@plt>
   12ba8:	ldr	r0, [sp, #4]
   12bac:	bl	176b8 <flatcc_builder_end_table@@Base>
   12bb0:	mov	sp, fp
   12bb4:	pop	{fp, pc}
   12bb8:	muleq	r0, ip, sl
   12bbc:	strdeq	sl, [r0], -r3
   12bc0:	muleq	r0, r9, r9
   12bc4:	andeq	sl, r0, lr, lsl #20
   12bc8:	push	{fp, lr}
   12bcc:	mov	fp, sp
   12bd0:	sub	sp, sp, #56	; 0x38
   12bd4:	str	r0, [fp, #-8]
   12bd8:	ldr	r0, [fp, #-8]
   12bdc:	movw	r1, #0
   12be0:	uxth	r1, r1
   12be4:	movw	r2, #32
   12be8:	movw	r3, #16
   12bec:	uxth	r3, r3
   12bf0:	bl	1ad08 <flatcc_verify_field@@Base>
   12bf4:	str	r0, [fp, #-12]
   12bf8:	cmp	r0, #0
   12bfc:	beq	12c0c <main@@Base+0x368>
   12c00:	ldr	r0, [fp, #-12]
   12c04:	str	r0, [fp, #-4]
   12c08:	b	13398 <main@@Base+0xaf4>
   12c0c:	ldr	r0, [fp, #-8]
   12c10:	movw	r1, #2
   12c14:	uxth	r2, r1
   12c18:	str	r1, [fp, #-16]
   12c1c:	mov	r1, r2
   12c20:	movw	r2, #2
   12c24:	ldr	r3, [fp, #-16]
   12c28:	uxth	r3, r3
   12c2c:	bl	1ad08 <flatcc_verify_field@@Base>
   12c30:	str	r0, [fp, #-12]
   12c34:	cmp	r0, #0
   12c38:	beq	12c48 <main@@Base+0x3a4>
   12c3c:	ldr	r0, [fp, #-12]
   12c40:	str	r0, [fp, #-4]
   12c44:	b	13398 <main@@Base+0xaf4>
   12c48:	ldr	r0, [fp, #-8]
   12c4c:	movw	r1, #1
   12c50:	uxth	r1, r1
   12c54:	movw	r2, #2
   12c58:	movw	r3, #2
   12c5c:	uxth	r3, r3
   12c60:	bl	1ad08 <flatcc_verify_field@@Base>
   12c64:	str	r0, [fp, #-12]
   12c68:	cmp	r0, #0
   12c6c:	beq	12c7c <main@@Base+0x3d8>
   12c70:	ldr	r0, [fp, #-12]
   12c74:	str	r0, [fp, #-4]
   12c78:	b	13398 <main@@Base+0xaf4>
   12c7c:	ldr	r0, [fp, #-8]
   12c80:	movw	r1, #3
   12c84:	uxth	r1, r1
   12c88:	movw	r2, #1
   12c8c:	bl	1af14 <flatcc_verify_string_field@@Base>
   12c90:	str	r0, [fp, #-12]
   12c94:	cmp	r0, #0
   12c98:	beq	12ca8 <main@@Base+0x404>
   12c9c:	ldr	r0, [fp, #-12]
   12ca0:	str	r0, [fp, #-4]
   12ca4:	b	13398 <main@@Base+0xaf4>
   12ca8:	ldr	r0, [fp, #-8]
   12cac:	movw	r1, #6
   12cb0:	uxth	r1, r1
   12cb4:	movw	r2, #1
   12cb8:	movw	r3, #1
   12cbc:	uxth	r3, r3
   12cc0:	bl	1ad08 <flatcc_verify_field@@Base>
   12cc4:	str	r0, [fp, #-12]
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cdc <main@@Base+0x438>
   12cd0:	ldr	r0, [fp, #-12]
   12cd4:	str	r0, [fp, #-4]
   12cd8:	b	13398 <main@@Base+0xaf4>
   12cdc:	ldr	r0, [fp, #-8]
   12ce0:	movw	r1, #5
   12ce4:	uxth	r1, r1
   12ce8:	movw	r2, #0
   12cec:	movw	r3, #1
   12cf0:	movw	ip, #1
   12cf4:	uxth	ip, ip
   12cf8:	str	ip, [sp]
   12cfc:	mvn	ip, #0
   12d00:	str	ip, [sp, #4]
   12d04:	bl	1b270 <flatcc_verify_vector_field@@Base>
   12d08:	str	r0, [fp, #-12]
   12d0c:	cmp	r0, #0
   12d10:	beq	12d20 <main@@Base+0x47c>
   12d14:	ldr	r0, [fp, #-12]
   12d18:	str	r0, [fp, #-4]
   12d1c:	b	13398 <main@@Base+0xaf4>
   12d20:	ldr	r0, [pc, #1660]	; 133a4 <main@@Base+0xb00>
   12d24:	add	r3, pc, r0
   12d28:	ldr	r0, [fp, #-8]
   12d2c:	movw	r1, #11
   12d30:	uxth	r1, r1
   12d34:	movw	r2, #0
   12d38:	bl	1bae8 <flatcc_verify_table_vector_field@@Base>
   12d3c:	str	r0, [fp, #-12]
   12d40:	cmp	r0, #0
   12d44:	beq	12d54 <main@@Base+0x4b0>
   12d48:	ldr	r0, [fp, #-12]
   12d4c:	str	r0, [fp, #-4]
   12d50:	b	13398 <main@@Base+0xaf4>
   12d54:	ldr	r0, [fp, #-8]
   12d58:	movw	r1, #10
   12d5c:	uxth	r1, r1
   12d60:	movw	r2, #0
   12d64:	bl	1b4a4 <flatcc_verify_string_vector_field@@Base>
   12d68:	str	r0, [fp, #-12]
   12d6c:	cmp	r0, #0
   12d70:	beq	12d80 <main@@Base+0x4dc>
   12d74:	ldr	r0, [fp, #-12]
   12d78:	str	r0, [fp, #-4]
   12d7c:	b	13398 <main@@Base+0xaf4>
   12d80:	ldr	r0, [fp, #-8]
   12d84:	movw	r1, #28
   12d88:	uxth	r1, r1
   12d8c:	movw	r2, #0
   12d90:	bl	1b4a4 <flatcc_verify_string_vector_field@@Base>
   12d94:	str	r0, [fp, #-12]
   12d98:	cmp	r0, #0
   12d9c:	beq	12dac <main@@Base+0x508>
   12da0:	ldr	r0, [fp, #-12]
   12da4:	str	r0, [fp, #-4]
   12da8:	b	13398 <main@@Base+0xaf4>
   12dac:	ldr	r0, [fp, #-8]
   12db0:	movw	r1, #24
   12db4:	uxth	r1, r1
   12db8:	movw	r2, #0
   12dbc:	movw	r3, #1
   12dc0:	movw	ip, #1
   12dc4:	uxth	ip, ip
   12dc8:	str	ip, [sp]
   12dcc:	mvn	ip, #0
   12dd0:	str	ip, [sp, #4]
   12dd4:	bl	1b270 <flatcc_verify_vector_field@@Base>
   12dd8:	str	r0, [fp, #-12]
   12ddc:	cmp	r0, #0
   12de0:	beq	12df0 <main@@Base+0x54c>
   12de4:	ldr	r0, [fp, #-12]
   12de8:	str	r0, [fp, #-4]
   12dec:	b	13398 <main@@Base+0xaf4>
   12df0:	ldr	r0, [pc, #1456]	; 133a8 <main@@Base+0xb04>
   12df4:	ldr	r1, [fp, #-8]
   12df8:	str	r0, [fp, #-20]	; 0xffffffec
   12dfc:	mov	r0, r1
   12e00:	movw	r1, #29
   12e04:	uxth	r1, r1
   12e08:	movw	r2, #0
   12e0c:	movw	r3, #8
   12e10:	movw	ip, #4
   12e14:	uxth	ip, ip
   12e18:	str	ip, [sp]
   12e1c:	ldr	ip, [fp, #-20]	; 0xffffffec
   12e20:	str	ip, [sp, #4]
   12e24:	bl	1b270 <flatcc_verify_vector_field@@Base>
   12e28:	str	r0, [fp, #-12]
   12e2c:	cmp	r0, #0
   12e30:	beq	12e40 <main@@Base+0x59c>
   12e34:	ldr	r0, [fp, #-12]
   12e38:	str	r0, [fp, #-4]
   12e3c:	b	13398 <main@@Base+0xaf4>
   12e40:	ldr	r0, [pc, #1380]	; 133ac <main@@Base+0xb08>
   12e44:	add	r3, pc, r0
   12e48:	ldr	r0, [fp, #-8]
   12e4c:	movw	r1, #12
   12e50:	uxth	r1, r1
   12e54:	movw	r2, #0
   12e58:	bl	1b724 <flatcc_verify_table_field@@Base>
   12e5c:	str	r0, [fp, #-12]
   12e60:	cmp	r0, #0
   12e64:	beq	12e74 <main@@Base+0x5d0>
   12e68:	ldr	r0, [fp, #-12]
   12e6c:	str	r0, [fp, #-4]
   12e70:	b	13398 <main@@Base+0xaf4>
   12e74:	ldr	r0, [pc, #1332]	; 133b0 <main@@Base+0xb0c>
   12e78:	add	r3, pc, r0
   12e7c:	ldr	r0, [fp, #-8]
   12e80:	movw	r1, #8
   12e84:	uxth	r1, r1
   12e88:	movw	r2, #0
   12e8c:	bl	1c970 <flatcc_verify_union_field@@Base>
   12e90:	str	r0, [fp, #-12]
   12e94:	cmp	r0, #0
   12e98:	beq	12ea8 <main@@Base+0x604>
   12e9c:	ldr	r0, [fp, #-12]
   12ea0:	str	r0, [fp, #-4]
   12ea4:	b	13398 <main@@Base+0xaf4>
   12ea8:	ldr	r0, [pc, #1284]	; 133b4 <main@@Base+0xb10>
   12eac:	ldr	r1, [fp, #-8]
   12eb0:	str	r0, [fp, #-24]	; 0xffffffe8
   12eb4:	mov	r0, r1
   12eb8:	movw	r1, #9
   12ebc:	uxth	r1, r1
   12ec0:	movw	r2, #0
   12ec4:	movw	r3, #4
   12ec8:	movw	ip, #2
   12ecc:	uxth	ip, ip
   12ed0:	str	ip, [sp]
   12ed4:	ldr	ip, [fp, #-24]	; 0xffffffe8
   12ed8:	str	ip, [sp, #4]
   12edc:	bl	1b270 <flatcc_verify_vector_field@@Base>
   12ee0:	str	r0, [fp, #-12]
   12ee4:	cmp	r0, #0
   12ee8:	beq	12ef8 <main@@Base+0x654>
   12eec:	ldr	r0, [fp, #-12]
   12ef0:	str	r0, [fp, #-4]
   12ef4:	b	13398 <main@@Base+0xaf4>
   12ef8:	ldr	r0, [pc, #1204]	; 133b4 <main@@Base+0xb10>
   12efc:	ldr	r1, [fp, #-8]
   12f00:	str	r0, [sp, #28]
   12f04:	mov	r0, r1
   12f08:	movw	r1, #31
   12f0c:	uxth	r1, r1
   12f10:	movw	r2, #0
   12f14:	movw	r3, #4
   12f18:	movw	ip, #2
   12f1c:	uxth	ip, ip
   12f20:	str	ip, [sp]
   12f24:	ldr	ip, [sp, #28]
   12f28:	str	ip, [sp, #4]
   12f2c:	bl	1b270 <flatcc_verify_vector_field@@Base>
   12f30:	str	r0, [fp, #-12]
   12f34:	cmp	r0, #0
   12f38:	beq	12f48 <main@@Base+0x6a4>
   12f3c:	ldr	r0, [fp, #-12]
   12f40:	str	r0, [fp, #-4]
   12f44:	b	13398 <main@@Base+0xaf4>
   12f48:	ldr	r0, [pc, #1128]	; 133b8 <main@@Base+0xb14>
   12f4c:	add	r0, pc, r0
   12f50:	ldr	r1, [fp, #-8]
   12f54:	str	r0, [sp, #24]
   12f58:	mov	r0, r1
   12f5c:	movw	r1, #13
   12f60:	uxth	r1, r1
   12f64:	movw	r2, #0
   12f68:	str	r2, [sp, #20]
   12f6c:	ldr	r3, [sp, #20]
   12f70:	movw	ip, #1
   12f74:	uxth	ip, ip
   12f78:	str	ip, [sp]
   12f7c:	ldr	ip, [sp, #24]
   12f80:	str	ip, [sp, #4]
   12f84:	bl	1c7c8 <flatcc_verify_table_as_nested_root@@Base>
   12f88:	str	r0, [fp, #-12]
   12f8c:	cmp	r0, #0
   12f90:	beq	12fa0 <main@@Base+0x6fc>
   12f94:	ldr	r0, [fp, #-12]
   12f98:	str	r0, [fp, #-4]
   12f9c:	b	13398 <main@@Base+0xaf4>
   12fa0:	ldr	r0, [pc, #1044]	; 133bc <main@@Base+0xb18>
   12fa4:	add	r3, pc, r0
   12fa8:	ldr	r0, [fp, #-8]
   12fac:	movw	r1, #14
   12fb0:	uxth	r1, r1
   12fb4:	movw	r2, #0
   12fb8:	bl	1b724 <flatcc_verify_table_field@@Base>
   12fbc:	str	r0, [fp, #-12]
   12fc0:	cmp	r0, #0
   12fc4:	beq	12fd4 <main@@Base+0x730>
   12fc8:	ldr	r0, [fp, #-12]
   12fcc:	str	r0, [fp, #-4]
   12fd0:	b	13398 <main@@Base+0xaf4>
   12fd4:	ldr	r0, [fp, #-8]
   12fd8:	movw	r1, #15
   12fdc:	uxth	r1, r1
   12fe0:	movw	r2, #1
   12fe4:	movw	r3, #1
   12fe8:	uxth	r3, r3
   12fec:	bl	1ad08 <flatcc_verify_field@@Base>
   12ff0:	str	r0, [fp, #-12]
   12ff4:	cmp	r0, #0
   12ff8:	beq	13008 <main@@Base+0x764>
   12ffc:	ldr	r0, [fp, #-12]
   13000:	str	r0, [fp, #-4]
   13004:	b	13398 <main@@Base+0xaf4>
   13008:	ldr	r0, [fp, #-8]
   1300c:	movw	r1, #16
   13010:	uxth	r1, r1
   13014:	movw	r2, #4
   13018:	movw	r3, #4
   1301c:	uxth	r3, r3
   13020:	bl	1ad08 <flatcc_verify_field@@Base>
   13024:	str	r0, [fp, #-12]
   13028:	cmp	r0, #0
   1302c:	beq	1303c <main@@Base+0x798>
   13030:	ldr	r0, [fp, #-12]
   13034:	str	r0, [fp, #-4]
   13038:	b	13398 <main@@Base+0xaf4>
   1303c:	ldr	r0, [fp, #-8]
   13040:	movw	r1, #17
   13044:	uxth	r1, r1
   13048:	movw	r2, #4
   1304c:	movw	r3, #4
   13050:	uxth	r3, r3
   13054:	bl	1ad08 <flatcc_verify_field@@Base>
   13058:	str	r0, [fp, #-12]
   1305c:	cmp	r0, #0
   13060:	beq	13070 <main@@Base+0x7cc>
   13064:	ldr	r0, [fp, #-12]
   13068:	str	r0, [fp, #-4]
   1306c:	b	13398 <main@@Base+0xaf4>
   13070:	ldr	r0, [fp, #-8]
   13074:	movw	r1, #18
   13078:	uxth	r1, r1
   1307c:	movw	r2, #8
   13080:	movw	r3, #8
   13084:	uxth	r3, r3
   13088:	bl	1ad08 <flatcc_verify_field@@Base>
   1308c:	str	r0, [fp, #-12]
   13090:	cmp	r0, #0
   13094:	beq	130a4 <main@@Base+0x800>
   13098:	ldr	r0, [fp, #-12]
   1309c:	str	r0, [fp, #-4]
   130a0:	b	13398 <main@@Base+0xaf4>
   130a4:	ldr	r0, [fp, #-8]
   130a8:	movw	r1, #19
   130ac:	uxth	r1, r1
   130b0:	movw	r2, #8
   130b4:	movw	r3, #8
   130b8:	uxth	r3, r3
   130bc:	bl	1ad08 <flatcc_verify_field@@Base>
   130c0:	str	r0, [fp, #-12]
   130c4:	cmp	r0, #0
   130c8:	beq	130d8 <main@@Base+0x834>
   130cc:	ldr	r0, [fp, #-12]
   130d0:	str	r0, [fp, #-4]
   130d4:	b	13398 <main@@Base+0xaf4>
   130d8:	ldr	r0, [fp, #-8]
   130dc:	movw	r1, #20
   130e0:	uxth	r1, r1
   130e4:	movw	r2, #4
   130e8:	movw	r3, #4
   130ec:	uxth	r3, r3
   130f0:	bl	1ad08 <flatcc_verify_field@@Base>
   130f4:	str	r0, [fp, #-12]
   130f8:	cmp	r0, #0
   130fc:	beq	1310c <main@@Base+0x868>
   13100:	ldr	r0, [fp, #-12]
   13104:	str	r0, [fp, #-4]
   13108:	b	13398 <main@@Base+0xaf4>
   1310c:	ldr	r0, [fp, #-8]
   13110:	movw	r1, #21
   13114:	uxth	r1, r1
   13118:	movw	r2, #4
   1311c:	movw	r3, #4
   13120:	uxth	r3, r3
   13124:	bl	1ad08 <flatcc_verify_field@@Base>
   13128:	str	r0, [fp, #-12]
   1312c:	cmp	r0, #0
   13130:	beq	13140 <main@@Base+0x89c>
   13134:	ldr	r0, [fp, #-12]
   13138:	str	r0, [fp, #-4]
   1313c:	b	13398 <main@@Base+0xaf4>
   13140:	ldr	r0, [fp, #-8]
   13144:	movw	r1, #22
   13148:	uxth	r1, r1
   1314c:	movw	r2, #8
   13150:	movw	r3, #8
   13154:	uxth	r3, r3
   13158:	bl	1ad08 <flatcc_verify_field@@Base>
   1315c:	str	r0, [fp, #-12]
   13160:	cmp	r0, #0
   13164:	beq	13174 <main@@Base+0x8d0>
   13168:	ldr	r0, [fp, #-12]
   1316c:	str	r0, [fp, #-4]
   13170:	b	13398 <main@@Base+0xaf4>
   13174:	ldr	r0, [fp, #-8]
   13178:	movw	r1, #23
   1317c:	uxth	r1, r1
   13180:	movw	r2, #8
   13184:	movw	r3, #8
   13188:	uxth	r3, r3
   1318c:	bl	1ad08 <flatcc_verify_field@@Base>
   13190:	str	r0, [fp, #-12]
   13194:	cmp	r0, #0
   13198:	beq	131a8 <main@@Base+0x904>
   1319c:	ldr	r0, [fp, #-12]
   131a0:	str	r0, [fp, #-4]
   131a4:	b	13398 <main@@Base+0xaf4>
   131a8:	ldr	r0, [fp, #-8]
   131ac:	movw	r1, #25
   131b0:	uxth	r1, r1
   131b4:	movw	r2, #4
   131b8:	movw	r3, #4
   131bc:	uxth	r3, r3
   131c0:	bl	1ad08 <flatcc_verify_field@@Base>
   131c4:	str	r0, [fp, #-12]
   131c8:	cmp	r0, #0
   131cc:	beq	131dc <main@@Base+0x938>
   131d0:	ldr	r0, [fp, #-12]
   131d4:	str	r0, [fp, #-4]
   131d8:	b	13398 <main@@Base+0xaf4>
   131dc:	ldr	r0, [fp, #-8]
   131e0:	movw	r1, #26
   131e4:	uxth	r1, r1
   131e8:	movw	r2, #4
   131ec:	movw	r3, #4
   131f0:	uxth	r3, r3
   131f4:	bl	1ad08 <flatcc_verify_field@@Base>
   131f8:	str	r0, [fp, #-12]
   131fc:	cmp	r0, #0
   13200:	beq	13210 <main@@Base+0x96c>
   13204:	ldr	r0, [fp, #-12]
   13208:	str	r0, [fp, #-4]
   1320c:	b	13398 <main@@Base+0xaf4>
   13210:	ldr	r0, [fp, #-8]
   13214:	movw	r1, #27
   13218:	uxth	r1, r1
   1321c:	movw	r2, #4
   13220:	movw	r3, #4
   13224:	uxth	r3, r3
   13228:	bl	1ad08 <flatcc_verify_field@@Base>
   1322c:	str	r0, [fp, #-12]
   13230:	cmp	r0, #0
   13234:	beq	13244 <main@@Base+0x9a0>
   13238:	ldr	r0, [fp, #-12]
   1323c:	str	r0, [fp, #-4]
   13240:	b	13398 <main@@Base+0xaf4>
   13244:	ldr	r0, [fp, #-8]
   13248:	movw	r1, #30
   1324c:	uxth	r1, r1
   13250:	movw	r2, #0
   13254:	movw	r3, #1
   13258:	movw	ip, #1
   1325c:	uxth	ip, ip
   13260:	str	ip, [sp]
   13264:	mvn	ip, #0
   13268:	str	ip, [sp, #4]
   1326c:	bl	1b270 <flatcc_verify_vector_field@@Base>
   13270:	str	r0, [fp, #-12]
   13274:	cmp	r0, #0
   13278:	beq	13288 <main@@Base+0x9e4>
   1327c:	ldr	r0, [fp, #-12]
   13280:	str	r0, [fp, #-4]
   13284:	b	13398 <main@@Base+0xaf4>
   13288:	ldr	r0, [pc, #280]	; 133a8 <main@@Base+0xb04>
   1328c:	ldr	r1, [fp, #-8]
   13290:	str	r0, [sp, #16]
   13294:	mov	r0, r1
   13298:	movw	r1, #32
   1329c:	uxth	r1, r1
   132a0:	movw	r2, #0
   132a4:	movw	r3, #8
   132a8:	movw	ip, #8
   132ac:	uxth	ip, ip
   132b0:	str	ip, [sp]
   132b4:	ldr	ip, [sp, #16]
   132b8:	str	ip, [sp, #4]
   132bc:	bl	1b270 <flatcc_verify_vector_field@@Base>
   132c0:	str	r0, [fp, #-12]
   132c4:	cmp	r0, #0
   132c8:	beq	132d8 <main@@Base+0xa34>
   132cc:	ldr	r0, [fp, #-12]
   132d0:	str	r0, [fp, #-4]
   132d4:	b	13398 <main@@Base+0xaf4>
   132d8:	ldr	r0, [pc, #200]	; 133a8 <main@@Base+0xb04>
   132dc:	ldr	r1, [fp, #-8]
   132e0:	str	r0, [sp, #12]
   132e4:	mov	r0, r1
   132e8:	movw	r1, #33	; 0x21
   132ec:	uxth	r1, r1
   132f0:	movw	r2, #0
   132f4:	movw	r3, #8
   132f8:	movw	ip, #8
   132fc:	uxth	ip, ip
   13300:	str	ip, [sp]
   13304:	ldr	ip, [sp, #12]
   13308:	str	ip, [sp, #4]
   1330c:	bl	1b270 <flatcc_verify_vector_field@@Base>
   13310:	str	r0, [fp, #-12]
   13314:	cmp	r0, #0
   13318:	beq	13328 <main@@Base+0xa84>
   1331c:	ldr	r0, [fp, #-12]
   13320:	str	r0, [fp, #-4]
   13324:	b	13398 <main@@Base+0xaf4>
   13328:	ldr	r0, [pc, #144]	; 133c0 <main@@Base+0xb1c>
   1332c:	add	r3, pc, r0
   13330:	ldr	r0, [fp, #-8]
   13334:	movw	r1, #34	; 0x22
   13338:	uxth	r1, r1
   1333c:	movw	r2, #0
   13340:	bl	1b724 <flatcc_verify_table_field@@Base>
   13344:	str	r0, [fp, #-12]
   13348:	cmp	r0, #0
   1334c:	beq	1335c <main@@Base+0xab8>
   13350:	ldr	r0, [fp, #-12]
   13354:	str	r0, [fp, #-4]
   13358:	b	13398 <main@@Base+0xaf4>
   1335c:	ldr	r0, [pc, #96]	; 133c4 <main@@Base+0xb20>
   13360:	add	r3, pc, r0
   13364:	ldr	r0, [fp, #-8]
   13368:	movw	r1, #35	; 0x23
   1336c:	uxth	r1, r1
   13370:	movw	r2, #0
   13374:	bl	1b724 <flatcc_verify_table_field@@Base>
   13378:	str	r0, [fp, #-12]
   1337c:	cmp	r0, #0
   13380:	beq	13390 <main@@Base+0xaec>
   13384:	ldr	r0, [fp, #-12]
   13388:	str	r0, [fp, #-4]
   1338c:	b	13398 <main@@Base+0xaf4>
   13390:	movw	r0, #0
   13394:	str	r0, [fp, #-4]
   13398:	ldr	r0, [fp, #-4]
   1339c:	mov	sp, fp
   133a0:	pop	{fp, pc}
   133a4:			; <UNDEFINED> instruction: 0xfffffe9c
   133a8:	svcne	0x00ffffff
   133ac:			; <UNDEFINED> instruction: 0xfffffd7c
   133b0:	andeq	r0, r0, r8, asr #10
   133b4:	svccc	0x00ffffff
   133b8:			; <UNDEFINED> instruction: 0xfffffc74
   133bc:	andeq	r0, r0, r8, ror #9
   133c0:	andeq	r0, r0, r0, lsr #4
   133c4:	andeq	r0, r0, r0, lsl #4
   133c8:	push	{fp, lr}
   133cc:	mov	fp, sp
   133d0:	sub	sp, sp, #16
   133d4:	str	r0, [sp, #8]
   133d8:	ldr	r0, [sp, #8]
   133dc:	ldrb	r0, [r0, #12]
   133e0:	sub	r0, r0, #1
   133e4:	cmp	r0, #3
   133e8:	str	r0, [sp, #4]
   133ec:	bhi	13470 <main@@Base+0xbcc>
   133f0:	add	r0, pc, #8
   133f4:	ldr	r1, [sp, #4]
   133f8:	ldr	r2, [r0, r1, lsl #2]
   133fc:	add	pc, r0, r2
   13400:	andeq	r0, r0, r0, lsl r0
   13404:	andeq	r0, r0, r8, lsr #32
   13408:	andeq	r0, r0, r0, asr #32
   1340c:	andeq	r0, r0, r8, asr r0
   13410:	ldr	r0, [pc, #120]	; 13490 <main@@Base+0xbec>
   13414:	add	r1, pc, r0
   13418:	ldr	r0, [sp, #8]
   1341c:	bl	1be48 <flatcc_verify_union_table@@Base>
   13420:	str	r0, [fp, #-4]
   13424:	b	13478 <main@@Base+0xbd4>
   13428:	ldr	r0, [pc, #92]	; 1348c <main@@Base+0xbe8>
   1342c:	add	r1, pc, r0
   13430:	ldr	r0, [sp, #8]
   13434:	bl	1be48 <flatcc_verify_union_table@@Base>
   13438:	str	r0, [fp, #-4]
   1343c:	b	13478 <main@@Base+0xbd4>
   13440:	ldr	r0, [pc, #64]	; 13488 <main@@Base+0xbe4>
   13444:	add	r1, pc, r0
   13448:	ldr	r0, [sp, #8]
   1344c:	bl	1be48 <flatcc_verify_union_table@@Base>
   13450:	str	r0, [fp, #-4]
   13454:	b	13478 <main@@Base+0xbd4>
   13458:	ldr	r0, [pc, #36]	; 13484 <main@@Base+0xbe0>
   1345c:	add	r1, pc, r0
   13460:	ldr	r0, [sp, #8]
   13464:	bl	1be48 <flatcc_verify_union_table@@Base>
   13468:	str	r0, [fp, #-4]
   1346c:	b	13478 <main@@Base+0xbd4>
   13470:	movw	r0, #0
   13474:	str	r0, [fp, #-4]
   13478:	ldr	r0, [fp, #-4]
   1347c:	mov	sp, fp
   13480:	pop	{fp, pc}
   13484:	andeq	r0, r0, r4, lsr #6
   13488:	andeq	r0, r0, r8, lsr #6
   1348c:	andeq	r0, r0, r4, asr #4
   13490:			; <UNDEFINED> instruction: 0xfffff7ac
   13494:	push	{fp, lr}
   13498:	mov	fp, sp
   1349c:	sub	sp, sp, #16
   134a0:	str	r0, [sp, #8]
   134a4:	ldr	r0, [sp, #8]
   134a8:	movw	r1, #0
   134ac:	uxth	r1, r1
   134b0:	movw	r2, #0
   134b4:	bl	1af14 <flatcc_verify_string_field@@Base>
   134b8:	str	r0, [sp, #4]
   134bc:	cmp	r0, #0
   134c0:	beq	134d0 <main@@Base+0xc2c>
   134c4:	ldr	r0, [sp, #4]
   134c8:	str	r0, [fp, #-4]
   134cc:	b	13548 <main@@Base+0xca4>
   134d0:	ldr	r0, [sp, #8]
   134d4:	movw	r1, #1
   134d8:	uxth	r1, r1
   134dc:	movw	r2, #8
   134e0:	movw	r3, #8
   134e4:	uxth	r3, r3
   134e8:	bl	1ad08 <flatcc_verify_field@@Base>
   134ec:	str	r0, [sp, #4]
   134f0:	cmp	r0, #0
   134f4:	beq	13504 <main@@Base+0xc60>
   134f8:	ldr	r0, [sp, #4]
   134fc:	str	r0, [fp, #-4]
   13500:	b	13548 <main@@Base+0xca4>
   13504:	ldr	r0, [sp, #8]
   13508:	movw	r1, #2
   1350c:	uxth	r2, r1
   13510:	str	r1, [sp]
   13514:	mov	r1, r2
   13518:	movw	r2, #2
   1351c:	ldr	r3, [sp]
   13520:	uxth	r3, r3
   13524:	bl	1ad08 <flatcc_verify_field@@Base>
   13528:	str	r0, [sp, #4]
   1352c:	cmp	r0, #0
   13530:	beq	13540 <main@@Base+0xc9c>
   13534:	ldr	r0, [sp, #4]
   13538:	str	r0, [fp, #-4]
   1353c:	b	13548 <main@@Base+0xca4>
   13540:	movw	r0, #0
   13544:	str	r0, [fp, #-4]
   13548:	ldr	r0, [fp, #-4]
   1354c:	mov	sp, fp
   13550:	pop	{fp, pc}
   13554:	sub	sp, sp, #4
   13558:	str	r0, [sp]
   1355c:	movw	r0, #0
   13560:	add	sp, sp, #4
   13564:	bx	lr
   13568:	push	{fp, lr}
   1356c:	mov	fp, sp
   13570:	sub	sp, sp, #32
   13574:	str	r0, [fp, #-8]
   13578:	ldr	r0, [fp, #-8]
   1357c:	movw	r1, #0
   13580:	uxth	r1, r1
   13584:	movw	r2, #0
   13588:	movw	r3, #1
   1358c:	movw	ip, #1
   13590:	uxth	ip, ip
   13594:	str	ip, [sp]
   13598:	mvn	ip, #0
   1359c:	str	ip, [sp, #4]
   135a0:	bl	1b270 <flatcc_verify_vector_field@@Base>
   135a4:	str	r0, [fp, #-12]
   135a8:	cmp	r0, #0
   135ac:	beq	135bc <main@@Base+0xd18>
   135b0:	ldr	r0, [fp, #-12]
   135b4:	str	r0, [fp, #-4]
   135b8:	b	13668 <main@@Base+0xdc4>
   135bc:	ldr	r0, [fp, #-8]
   135c0:	movw	r1, #1
   135c4:	uxth	r2, r1
   135c8:	str	r1, [sp, #16]
   135cc:	mov	r1, r2
   135d0:	movw	r2, #0
   135d4:	movw	r3, #1
   135d8:	ldr	ip, [sp, #16]
   135dc:	uxth	lr, ip
   135e0:	str	lr, [sp]
   135e4:	mvn	lr, #0
   135e8:	str	lr, [sp, #4]
   135ec:	bl	1b270 <flatcc_verify_vector_field@@Base>
   135f0:	str	r0, [fp, #-12]
   135f4:	cmp	r0, #0
   135f8:	beq	13608 <main@@Base+0xd64>
   135fc:	ldr	r0, [fp, #-12]
   13600:	str	r0, [fp, #-4]
   13604:	b	13668 <main@@Base+0xdc4>
   13608:	ldr	r0, [pc, #100]	; 13674 <main@@Base+0xdd0>
   1360c:	add	r0, pc, r0
   13610:	ldr	r1, [fp, #-8]
   13614:	str	r0, [sp, #12]
   13618:	mov	r0, r1
   1361c:	movw	r1, #2
   13620:	uxth	r1, r1
   13624:	movw	r2, #0
   13628:	str	r2, [sp, #8]
   1362c:	ldr	r3, [sp, #8]
   13630:	movw	ip, #1
   13634:	uxth	ip, ip
   13638:	str	ip, [sp]
   1363c:	ldr	ip, [sp, #12]
   13640:	str	ip, [sp, #4]
   13644:	bl	1c7c8 <flatcc_verify_table_as_nested_root@@Base>
   13648:	str	r0, [fp, #-12]
   1364c:	cmp	r0, #0
   13650:	beq	13660 <main@@Base+0xdbc>
   13654:	ldr	r0, [fp, #-12]
   13658:	str	r0, [fp, #-4]
   1365c:	b	13668 <main@@Base+0xdc4>
   13660:	movw	r0, #0
   13664:	str	r0, [fp, #-4]
   13668:	ldr	r0, [fp, #-4]
   1366c:	mov	sp, fp
   13670:	pop	{fp, pc}
   13674:			; <UNDEFINED> instruction: 0xfffff5b4
   13678:	push	{fp, lr}
   1367c:	mov	fp, sp
   13680:	sub	sp, sp, #16
   13684:	str	r0, [sp, #8]
   13688:	ldr	r0, [sp, #8]
   1368c:	movw	r1, #0
   13690:	uxth	r1, r1
   13694:	movw	r2, #1
   13698:	movw	r3, #1
   1369c:	uxth	r3, r3
   136a0:	bl	1ad08 <flatcc_verify_field@@Base>
   136a4:	str	r0, [sp, #4]
   136a8:	cmp	r0, #0
   136ac:	beq	136bc <main@@Base+0xe18>
   136b0:	ldr	r0, [sp, #4]
   136b4:	str	r0, [fp, #-4]
   136b8:	b	13768 <main@@Base+0xec4>
   136bc:	ldr	r0, [sp, #8]
   136c0:	movw	r1, #1
   136c4:	uxth	r2, r1
   136c8:	str	r1, [sp]
   136cc:	mov	r1, r2
   136d0:	movw	r2, #1
   136d4:	ldr	r3, [sp]
   136d8:	uxth	r3, r3
   136dc:	bl	1ad08 <flatcc_verify_field@@Base>
   136e0:	str	r0, [sp, #4]
   136e4:	cmp	r0, #0
   136e8:	beq	136f8 <main@@Base+0xe54>
   136ec:	ldr	r0, [sp, #4]
   136f0:	str	r0, [fp, #-4]
   136f4:	b	13768 <main@@Base+0xec4>
   136f8:	ldr	r0, [sp, #8]
   136fc:	movw	r1, #2
   13700:	uxth	r1, r1
   13704:	movw	r2, #1
   13708:	movw	r3, #1
   1370c:	uxth	r3, r3
   13710:	bl	1ad08 <flatcc_verify_field@@Base>
   13714:	str	r0, [sp, #4]
   13718:	cmp	r0, #0
   1371c:	beq	1372c <main@@Base+0xe88>
   13720:	ldr	r0, [sp, #4]
   13724:	str	r0, [fp, #-4]
   13728:	b	13768 <main@@Base+0xec4>
   1372c:	ldr	r0, [sp, #8]
   13730:	movw	r1, #3
   13734:	uxth	r1, r1
   13738:	movw	r2, #1
   1373c:	movw	r3, #1
   13740:	uxth	r3, r3
   13744:	bl	1ad08 <flatcc_verify_field@@Base>
   13748:	str	r0, [sp, #4]
   1374c:	cmp	r0, #0
   13750:	beq	13760 <main@@Base+0xebc>
   13754:	ldr	r0, [sp, #4]
   13758:	str	r0, [fp, #-4]
   1375c:	b	13768 <main@@Base+0xec4>
   13760:	movw	r0, #0
   13764:	str	r0, [fp, #-4]
   13768:	ldr	r0, [fp, #-4]
   1376c:	mov	sp, fp
   13770:	pop	{fp, pc}
   13774:	sub	sp, sp, #4
   13778:	str	r0, [sp]
   1377c:	movw	r0, #0
   13780:	add	sp, sp, #4
   13784:	bx	lr
   13788:	push	{fp, lr}
   1378c:	mov	fp, sp
   13790:	sub	sp, sp, #16
   13794:	ldr	r1, [pc, #172]	; 13848 <main@@Base+0xfa4>
   13798:	add	r3, pc, r1
   1379c:	str	r0, [sp, #8]
   137a0:	ldr	r0, [sp, #8]
   137a4:	movw	r1, #0
   137a8:	uxth	r1, r1
   137ac:	movw	r2, #0
   137b0:	bl	1b724 <flatcc_verify_table_field@@Base>
   137b4:	str	r0, [sp, #4]
   137b8:	cmp	r0, #0
   137bc:	beq	137cc <main@@Base+0xf28>
   137c0:	ldr	r0, [sp, #4]
   137c4:	str	r0, [fp, #-4]
   137c8:	b	1383c <main@@Base+0xf98>
   137cc:	ldr	r0, [pc, #120]	; 1384c <main@@Base+0xfa8>
   137d0:	add	r3, pc, r0
   137d4:	ldr	r0, [sp, #8]
   137d8:	movw	r1, #1
   137dc:	uxth	r1, r1
   137e0:	movw	r2, #0
   137e4:	bl	1b724 <flatcc_verify_table_field@@Base>
   137e8:	str	r0, [sp, #4]
   137ec:	cmp	r0, #0
   137f0:	beq	13800 <main@@Base+0xf5c>
   137f4:	ldr	r0, [sp, #4]
   137f8:	str	r0, [fp, #-4]
   137fc:	b	1383c <main@@Base+0xf98>
   13800:	ldr	r0, [pc, #72]	; 13850 <main@@Base+0xfac>
   13804:	add	r3, pc, r0
   13808:	ldr	r0, [sp, #8]
   1380c:	movw	r1, #3
   13810:	uxth	r1, r1
   13814:	movw	r2, #0
   13818:	bl	1cc68 <flatcc_verify_union_vector_field@@Base>
   1381c:	str	r0, [sp, #4]
   13820:	cmp	r0, #0
   13824:	beq	13834 <main@@Base+0xf90>
   13828:	ldr	r0, [sp, #4]
   1382c:	str	r0, [fp, #-4]
   13830:	b	1383c <main@@Base+0xf98>
   13834:	movw	r0, #0
   13838:	str	r0, [fp, #-4]
   1383c:	ldr	r0, [fp, #-4]
   13840:	mov	sp, fp
   13844:	pop	{fp, pc}
   13848:	strheq	r0, [r0], -r4
   1384c:	andeq	r0, r0, r8, asr #2
   13850:			; <UNDEFINED> instruction: 0xfffffbbc
   13854:	push	{fp, lr}
   13858:	mov	fp, sp
   1385c:	sub	sp, sp, #16
   13860:	ldr	r1, [pc, #172]	; 13914 <main@@Base+0x1070>
   13864:	add	r3, pc, r1
   13868:	str	r0, [sp, #8]
   1386c:	ldr	r0, [sp, #8]
   13870:	movw	r1, #0
   13874:	uxth	r1, r1
   13878:	movw	r2, #0
   1387c:	bl	1b724 <flatcc_verify_table_field@@Base>
   13880:	str	r0, [sp, #4]
   13884:	cmp	r0, #0
   13888:	beq	13898 <main@@Base+0xff4>
   1388c:	ldr	r0, [sp, #4]
   13890:	str	r0, [fp, #-4]
   13894:	b	13908 <main@@Base+0x1064>
   13898:	ldr	r0, [pc, #120]	; 13918 <main@@Base+0x1074>
   1389c:	add	r3, pc, r0
   138a0:	ldr	r0, [sp, #8]
   138a4:	movw	r1, #1
   138a8:	uxth	r1, r1
   138ac:	movw	r2, #0
   138b0:	bl	1b724 <flatcc_verify_table_field@@Base>
   138b4:	str	r0, [sp, #4]
   138b8:	cmp	r0, #0
   138bc:	beq	138cc <main@@Base+0x1028>
   138c0:	ldr	r0, [sp, #4]
   138c4:	str	r0, [fp, #-4]
   138c8:	b	13908 <main@@Base+0x1064>
   138cc:	ldr	r0, [pc, #72]	; 1391c <main@@Base+0x1078>
   138d0:	add	r3, pc, r0
   138d4:	ldr	r0, [sp, #8]
   138d8:	movw	r1, #2
   138dc:	uxth	r1, r1
   138e0:	movw	r2, #0
   138e4:	bl	1b724 <flatcc_verify_table_field@@Base>
   138e8:	str	r0, [sp, #4]
   138ec:	cmp	r0, #0
   138f0:	beq	13900 <main@@Base+0x105c>
   138f4:	ldr	r0, [sp, #4]
   138f8:	str	r0, [fp, #-4]
   138fc:	b	13908 <main@@Base+0x1064>
   13900:	movw	r0, #0
   13904:	str	r0, [fp, #-4]
   13908:	ldr	r0, [fp, #-4]
   1390c:	mov	sp, fp
   13910:	pop	{fp, pc}
   13914:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13918:	muleq	r0, r8, r3
   1391c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13920:	push	{fp, lr}
   13924:	mov	fp, sp
   13928:	sub	sp, sp, #16
   1392c:	ldr	r1, [pc, #276]	; 13a48 <main@@Base+0x11a4>
   13930:	add	r3, pc, r1
   13934:	str	r0, [sp, #8]
   13938:	ldr	r0, [sp, #8]
   1393c:	movw	r1, #1
   13940:	uxth	r1, r1
   13944:	movw	r2, #0
   13948:	bl	1c970 <flatcc_verify_union_field@@Base>
   1394c:	str	r0, [sp, #4]
   13950:	cmp	r0, #0
   13954:	beq	13964 <main@@Base+0x10c0>
   13958:	ldr	r0, [sp, #4]
   1395c:	str	r0, [fp, #-4]
   13960:	b	13a3c <main@@Base+0x1198>
   13964:	ldr	r0, [pc, #224]	; 13a4c <main@@Base+0x11a8>
   13968:	add	r3, pc, r0
   1396c:	ldr	r0, [sp, #8]
   13970:	movw	r1, #3
   13974:	uxth	r1, r1
   13978:	movw	r2, #0
   1397c:	bl	1c970 <flatcc_verify_union_field@@Base>
   13980:	str	r0, [sp, #4]
   13984:	cmp	r0, #0
   13988:	beq	13998 <main@@Base+0x10f4>
   1398c:	ldr	r0, [sp, #4]
   13990:	str	r0, [fp, #-4]
   13994:	b	13a3c <main@@Base+0x1198>
   13998:	ldr	r0, [pc, #176]	; 13a50 <main@@Base+0x11ac>
   1399c:	add	r3, pc, r0
   139a0:	ldr	r0, [sp, #8]
   139a4:	movw	r1, #5
   139a8:	uxth	r1, r1
   139ac:	movw	r2, #0
   139b0:	bl	1c970 <flatcc_verify_union_field@@Base>
   139b4:	str	r0, [sp, #4]
   139b8:	cmp	r0, #0
   139bc:	beq	139cc <main@@Base+0x1128>
   139c0:	ldr	r0, [sp, #4]
   139c4:	str	r0, [fp, #-4]
   139c8:	b	13a3c <main@@Base+0x1198>
   139cc:	ldr	r0, [pc, #128]	; 13a54 <main@@Base+0x11b0>
   139d0:	add	r3, pc, r0
   139d4:	ldr	r0, [sp, #8]
   139d8:	movw	r1, #7
   139dc:	uxth	r1, r1
   139e0:	movw	r2, #0
   139e4:	bl	1c970 <flatcc_verify_union_field@@Base>
   139e8:	str	r0, [sp, #4]
   139ec:	cmp	r0, #0
   139f0:	beq	13a00 <main@@Base+0x115c>
   139f4:	ldr	r0, [sp, #4]
   139f8:	str	r0, [fp, #-4]
   139fc:	b	13a3c <main@@Base+0x1198>
   13a00:	ldr	r0, [pc, #80]	; 13a58 <main@@Base+0x11b4>
   13a04:	add	r3, pc, r0
   13a08:	ldr	r0, [sp, #8]
   13a0c:	movw	r1, #9
   13a10:	uxth	r1, r1
   13a14:	movw	r2, #0
   13a18:	bl	1cc68 <flatcc_verify_union_vector_field@@Base>
   13a1c:	str	r0, [sp, #4]
   13a20:	cmp	r0, #0
   13a24:	beq	13a34 <main@@Base+0x1190>
   13a28:	ldr	r0, [sp, #4]
   13a2c:	str	r0, [fp, #-4]
   13a30:	b	13a3c <main@@Base+0x1198>
   13a34:	movw	r0, #0
   13a38:	str	r0, [fp, #-4]
   13a3c:	ldr	r0, [fp, #-4]
   13a40:	mov	sp, fp
   13a44:	pop	{fp, pc}
   13a48:	andeq	r0, r0, ip, lsl r4
   13a4c:	andeq	r0, r0, r4, ror #7
   13a50:			; <UNDEFINED> instruction: 0x000003b0
   13a54:	andeq	r0, r0, ip, ror r3
   13a58:	andeq	r0, r0, r8, asr #6
   13a5c:	push	{fp, lr}
   13a60:	mov	fp, sp
   13a64:	sub	sp, sp, #16
   13a68:	str	r0, [sp, #8]
   13a6c:	ldr	r0, [sp, #8]
   13a70:	movw	r1, #0
   13a74:	uxth	r1, r1
   13a78:	movw	r2, #0
   13a7c:	bl	1af14 <flatcc_verify_string_field@@Base>
   13a80:	str	r0, [sp, #4]
   13a84:	cmp	r0, #0
   13a88:	beq	13a98 <main@@Base+0x11f4>
   13a8c:	ldr	r0, [sp, #4]
   13a90:	str	r0, [fp, #-4]
   13a94:	b	13c30 <main@@Base+0x138c>
   13a98:	ldr	r0, [sp, #8]
   13a9c:	movw	r1, #1
   13aa0:	uxth	r1, r1
   13aa4:	movw	r2, #4
   13aa8:	movw	r3, #4
   13aac:	uxth	r3, r3
   13ab0:	bl	1ad08 <flatcc_verify_field@@Base>
   13ab4:	str	r0, [sp, #4]
   13ab8:	cmp	r0, #0
   13abc:	beq	13acc <main@@Base+0x1228>
   13ac0:	ldr	r0, [sp, #4]
   13ac4:	str	r0, [fp, #-4]
   13ac8:	b	13c30 <main@@Base+0x138c>
   13acc:	ldr	r0, [sp, #8]
   13ad0:	movw	r1, #2
   13ad4:	uxth	r1, r1
   13ad8:	movw	r2, #0
   13adc:	bl	1af14 <flatcc_verify_string_field@@Base>
   13ae0:	str	r0, [sp, #4]
   13ae4:	cmp	r0, #0
   13ae8:	beq	13af8 <main@@Base+0x1254>
   13aec:	ldr	r0, [sp, #4]
   13af0:	str	r0, [fp, #-4]
   13af4:	b	13c30 <main@@Base+0x138c>
   13af8:	ldr	r0, [sp, #8]
   13afc:	movw	r1, #3
   13b00:	uxth	r1, r1
   13b04:	movw	r2, #8
   13b08:	movw	r3, #8
   13b0c:	uxth	r3, r3
   13b10:	bl	1ad08 <flatcc_verify_field@@Base>
   13b14:	str	r0, [sp, #4]
   13b18:	cmp	r0, #0
   13b1c:	beq	13b2c <main@@Base+0x1288>
   13b20:	ldr	r0, [sp, #4]
   13b24:	str	r0, [fp, #-4]
   13b28:	b	13c30 <main@@Base+0x138c>
   13b2c:	ldr	r0, [sp, #8]
   13b30:	movw	r1, #4
   13b34:	uxth	r1, r1
   13b38:	movw	r2, #0
   13b3c:	bl	1af14 <flatcc_verify_string_field@@Base>
   13b40:	str	r0, [sp, #4]
   13b44:	cmp	r0, #0
   13b48:	beq	13b58 <main@@Base+0x12b4>
   13b4c:	ldr	r0, [sp, #4]
   13b50:	str	r0, [fp, #-4]
   13b54:	b	13c30 <main@@Base+0x138c>
   13b58:	ldr	r0, [sp, #8]
   13b5c:	movw	r1, #5
   13b60:	uxth	r1, r1
   13b64:	movw	r2, #8
   13b68:	movw	r3, #8
   13b6c:	uxth	r3, r3
   13b70:	bl	1ad08 <flatcc_verify_field@@Base>
   13b74:	str	r0, [sp, #4]
   13b78:	cmp	r0, #0
   13b7c:	beq	13b8c <main@@Base+0x12e8>
   13b80:	ldr	r0, [sp, #4]
   13b84:	str	r0, [fp, #-4]
   13b88:	b	13c30 <main@@Base+0x138c>
   13b8c:	ldr	r0, [sp, #8]
   13b90:	movw	r1, #6
   13b94:	uxth	r1, r1
   13b98:	movw	r2, #4
   13b9c:	movw	r3, #4
   13ba0:	uxth	r3, r3
   13ba4:	bl	1ad08 <flatcc_verify_field@@Base>
   13ba8:	str	r0, [sp, #4]
   13bac:	cmp	r0, #0
   13bb0:	beq	13bc0 <main@@Base+0x131c>
   13bb4:	ldr	r0, [sp, #4]
   13bb8:	str	r0, [fp, #-4]
   13bbc:	b	13c30 <main@@Base+0x138c>
   13bc0:	ldr	r0, [sp, #8]
   13bc4:	movw	r1, #7
   13bc8:	uxth	r1, r1
   13bcc:	movw	r2, #8
   13bd0:	movw	r3, #8
   13bd4:	uxth	r3, r3
   13bd8:	bl	1ad08 <flatcc_verify_field@@Base>
   13bdc:	str	r0, [sp, #4]
   13be0:	cmp	r0, #0
   13be4:	beq	13bf4 <main@@Base+0x1350>
   13be8:	ldr	r0, [sp, #4]
   13bec:	str	r0, [fp, #-4]
   13bf0:	b	13c30 <main@@Base+0x138c>
   13bf4:	ldr	r0, [sp, #8]
   13bf8:	movw	r1, #8
   13bfc:	uxth	r1, r1
   13c00:	movw	r2, #4
   13c04:	movw	r3, #4
   13c08:	uxth	r3, r3
   13c0c:	bl	1ad08 <flatcc_verify_field@@Base>
   13c10:	str	r0, [sp, #4]
   13c14:	cmp	r0, #0
   13c18:	beq	13c28 <main@@Base+0x1384>
   13c1c:	ldr	r0, [sp, #4]
   13c20:	str	r0, [fp, #-4]
   13c24:	b	13c30 <main@@Base+0x138c>
   13c28:	movw	r0, #0
   13c2c:	str	r0, [fp, #-4]
   13c30:	ldr	r0, [fp, #-4]
   13c34:	mov	sp, fp
   13c38:	pop	{fp, pc}
   13c3c:	push	{fp, lr}
   13c40:	mov	fp, sp
   13c44:	sub	sp, sp, #16
   13c48:	str	r0, [sp, #8]
   13c4c:	ldr	r0, [sp, #8]
   13c50:	movw	r1, #0
   13c54:	uxth	r1, r1
   13c58:	movw	r2, #8
   13c5c:	movw	r3, #8
   13c60:	uxth	r3, r3
   13c64:	bl	1ad08 <flatcc_verify_field@@Base>
   13c68:	str	r0, [sp, #4]
   13c6c:	cmp	r0, #0
   13c70:	beq	13c80 <main@@Base+0x13dc>
   13c74:	ldr	r0, [sp, #4]
   13c78:	str	r0, [fp, #-4]
   13c7c:	b	13cbc <main@@Base+0x1418>
   13c80:	ldr	r0, [sp, #8]
   13c84:	movw	r1, #1
   13c88:	uxth	r1, r1
   13c8c:	movw	r2, #4
   13c90:	movw	r3, #4
   13c94:	uxth	r3, r3
   13c98:	bl	1ad08 <flatcc_verify_field@@Base>
   13c9c:	str	r0, [sp, #4]
   13ca0:	cmp	r0, #0
   13ca4:	beq	13cb4 <main@@Base+0x1410>
   13ca8:	ldr	r0, [sp, #4]
   13cac:	str	r0, [fp, #-4]
   13cb0:	b	13cbc <main@@Base+0x1418>
   13cb4:	movw	r0, #0
   13cb8:	str	r0, [fp, #-4]
   13cbc:	ldr	r0, [fp, #-4]
   13cc0:	mov	sp, fp
   13cc4:	pop	{fp, pc}
   13cc8:	push	{fp, lr}
   13ccc:	mov	fp, sp
   13cd0:	sub	sp, sp, #16
   13cd4:	str	r0, [sp, #8]
   13cd8:	ldr	r0, [sp, #8]
   13cdc:	movw	r1, #0
   13ce0:	uxth	r1, r1
   13ce4:	movw	r2, #8
   13ce8:	movw	r3, #8
   13cec:	uxth	r3, r3
   13cf0:	bl	1ad08 <flatcc_verify_field@@Base>
   13cf4:	str	r0, [sp, #4]
   13cf8:	cmp	r0, #0
   13cfc:	beq	13d0c <main@@Base+0x1468>
   13d00:	ldr	r0, [sp, #4]
   13d04:	str	r0, [fp, #-4]
   13d08:	b	13d48 <main@@Base+0x14a4>
   13d0c:	ldr	r0, [sp, #8]
   13d10:	movw	r1, #1
   13d14:	uxth	r1, r1
   13d18:	movw	r2, #4
   13d1c:	movw	r3, #4
   13d20:	uxth	r3, r3
   13d24:	bl	1ad08 <flatcc_verify_field@@Base>
   13d28:	str	r0, [sp, #4]
   13d2c:	cmp	r0, #0
   13d30:	beq	13d40 <main@@Base+0x149c>
   13d34:	ldr	r0, [sp, #4]
   13d38:	str	r0, [fp, #-4]
   13d3c:	b	13d48 <main@@Base+0x14a4>
   13d40:	movw	r0, #0
   13d44:	str	r0, [fp, #-4]
   13d48:	ldr	r0, [fp, #-4]
   13d4c:	mov	sp, fp
   13d50:	pop	{fp, pc}
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	sub	sp, sp, #16
   13d60:	str	r0, [sp, #8]
   13d64:	ldr	r0, [sp, #8]
   13d68:	ldrb	r0, [r0, #12]
   13d6c:	mov	r1, r0
   13d70:	cmp	r0, #2
   13d74:	str	r1, [sp, #4]
   13d78:	beq	13dd0 <main@@Base+0x152c>
   13d7c:	b	13d80 <main@@Base+0x14dc>
   13d80:	ldr	r0, [sp, #4]
   13d84:	cmp	r0, #8
   13d88:	beq	13de8 <main@@Base+0x1544>
   13d8c:	b	13d90 <main@@Base+0x14ec>
   13d90:	ldr	r0, [sp, #4]
   13d94:	cmp	r0, #9
   13d98:	beq	13e04 <main@@Base+0x1560>
   13d9c:	b	13da0 <main@@Base+0x14fc>
   13da0:	ldr	r0, [sp, #4]
   13da4:	cmp	r0, #10
   13da8:	beq	13e20 <main@@Base+0x157c>
   13dac:	b	13db0 <main@@Base+0x150c>
   13db0:	ldr	r0, [sp, #4]
   13db4:	cmp	r0, #11
   13db8:	beq	13e3c <main@@Base+0x1598>
   13dbc:	b	13dc0 <main@@Base+0x151c>
   13dc0:	ldr	r0, [sp, #4]
   13dc4:	cmp	r0, #255	; 0xff
   13dc8:	beq	13e4c <main@@Base+0x15a8>
   13dcc:	b	13e5c <main@@Base+0x15b8>
   13dd0:	ldr	r0, [pc, #152]	; 13e70 <main@@Base+0x15cc>
   13dd4:	add	r1, pc, r0
   13dd8:	ldr	r0, [sp, #8]
   13ddc:	bl	1be48 <flatcc_verify_union_table@@Base>
   13de0:	str	r0, [fp, #-4]
   13de4:	b	13e64 <main@@Base+0x15c0>
   13de8:	ldr	r0, [sp, #8]
   13dec:	movw	r1, #2
   13df0:	movw	r2, #2
   13df4:	uxth	r2, r2
   13df8:	bl	1be9c <flatcc_verify_union_struct@@Base>
   13dfc:	str	r0, [fp, #-4]
   13e00:	b	13e64 <main@@Base+0x15c0>
   13e04:	ldr	r0, [sp, #8]
   13e08:	movw	r1, #4
   13e0c:	movw	r2, #4
   13e10:	uxth	r2, r2
   13e14:	bl	1be9c <flatcc_verify_union_struct@@Base>
   13e18:	str	r0, [fp, #-4]
   13e1c:	b	13e64 <main@@Base+0x15c0>
   13e20:	ldr	r0, [sp, #8]
   13e24:	movw	r1, #4
   13e28:	movw	r2, #4
   13e2c:	uxth	r2, r2
   13e30:	bl	1be9c <flatcc_verify_union_struct@@Base>
   13e34:	str	r0, [fp, #-4]
   13e38:	b	13e64 <main@@Base+0x15c0>
   13e3c:	ldr	r0, [sp, #8]
   13e40:	bl	1c024 <flatcc_verify_union_string@@Base>
   13e44:	str	r0, [fp, #-4]
   13e48:	b	13e64 <main@@Base+0x15c0>
   13e4c:	ldr	r0, [sp, #8]
   13e50:	bl	1c024 <flatcc_verify_union_string@@Base>
   13e54:	str	r0, [fp, #-4]
   13e58:	b	13e64 <main@@Base+0x15c0>
   13e5c:	movw	r0, #0
   13e60:	str	r0, [fp, #-4]
   13e64:	ldr	r0, [fp, #-4]
   13e68:	mov	sp, fp
   13e6c:	pop	{fp, pc}
   13e70:	muleq	r0, r8, r0
   13e74:	push	{fp, lr}
   13e78:	mov	fp, sp
   13e7c:	sub	sp, sp, #16
   13e80:	str	r0, [sp, #8]
   13e84:	ldr	r0, [sp, #8]
   13e88:	movw	r1, #0
   13e8c:	uxth	r1, r1
   13e90:	movw	r2, #4
   13e94:	movw	r3, #4
   13e98:	uxth	r3, r3
   13e9c:	bl	1ad08 <flatcc_verify_field@@Base>
   13ea0:	str	r0, [sp, #4]
   13ea4:	cmp	r0, #0
   13ea8:	beq	13eb8 <main@@Base+0x1614>
   13eac:	ldr	r0, [sp, #4]
   13eb0:	str	r0, [fp, #-4]
   13eb4:	b	13ec0 <main@@Base+0x161c>
   13eb8:	movw	r0, #0
   13ebc:	str	r0, [fp, #-4]
   13ec0:	ldr	r0, [fp, #-4]
   13ec4:	mov	sp, fp
   13ec8:	pop	{fp, pc}

00013ecc <flatcc_builder_default_alloc@@Base>:
   13ecc:	push	{fp, lr}
   13ed0:	mov	fp, sp
   13ed4:	sub	sp, sp, #32
   13ed8:	ldr	ip, [fp, #8]
   13edc:	str	r0, [fp, #-8]
   13ee0:	str	r1, [fp, #-12]
   13ee4:	str	r2, [sp, #16]
   13ee8:	str	r3, [sp, #12]
   13eec:	ldr	r0, [sp, #16]
   13ef0:	cmp	r0, #0
   13ef4:	bne	13f38 <flatcc_builder_default_alloc@@Base+0x6c>
   13ef8:	ldr	r0, [fp, #-12]
   13efc:	ldr	r0, [r0]
   13f00:	movw	r1, #0
   13f04:	cmp	r0, r1
   13f08:	beq	13f2c <flatcc_builder_default_alloc@@Base+0x60>
   13f0c:	ldr	r0, [fp, #-12]
   13f10:	ldr	r0, [r0]
   13f14:	bl	1270c <free@plt>
   13f18:	ldr	r0, [fp, #-12]
   13f1c:	movw	r1, #0
   13f20:	str	r1, [r0]
   13f24:	ldr	r0, [fp, #-12]
   13f28:	str	r1, [r0, #4]
   13f2c:	movw	r0, #0
   13f30:	str	r0, [fp, #-4]
   13f34:	b	140a4 <flatcc_builder_default_alloc@@Base+0x1d8>
   13f38:	ldr	r0, [fp, #8]
   13f3c:	sub	r0, r0, #1
   13f40:	cmp	r0, #6
   13f44:	str	r0, [sp]
   13f48:	bhi	13fa8 <flatcc_builder_default_alloc@@Base+0xdc>
   13f4c:	add	r0, pc, #8
   13f50:	ldr	r1, [sp]
   13f54:	ldr	r2, [r0, r1, lsl #2]
   13f58:	add	pc, r0, r2
   13f5c:	andeq	r0, r0, ip, lsl r0
   13f60:	andeq	r0, r0, ip, asr #32
   13f64:	andeq	r0, r0, ip, asr #32
   13f68:	andeq	r0, r0, r4, lsr r0
   13f6c:	andeq	r0, r0, r8, lsr #32
   13f70:	andeq	r0, r0, ip, asr #32
   13f74:	andeq	r0, r0, r0, asr #32
   13f78:	movw	r0, #256	; 0x100
   13f7c:	str	r0, [sp, #4]
   13f80:	b	13fb0 <flatcc_builder_default_alloc@@Base+0xe4>
   13f84:	ldr	r0, [sp, #16]
   13f88:	str	r0, [sp, #4]
   13f8c:	b	13fb0 <flatcc_builder_default_alloc@@Base+0xe4>
   13f90:	movw	r0, #288	; 0x120
   13f94:	str	r0, [sp, #4]
   13f98:	b	13fb0 <flatcc_builder_default_alloc@@Base+0xe4>
   13f9c:	movw	r0, #64	; 0x40
   13fa0:	str	r0, [sp, #4]
   13fa4:	b	13fb0 <flatcc_builder_default_alloc@@Base+0xe4>
   13fa8:	movw	r0, #32
   13fac:	str	r0, [sp, #4]
   13fb0:	b	13fb4 <flatcc_builder_default_alloc@@Base+0xe8>
   13fb4:	ldr	r0, [sp, #4]
   13fb8:	ldr	r1, [sp, #16]
   13fbc:	cmp	r0, r1
   13fc0:	bcs	13fd4 <flatcc_builder_default_alloc@@Base+0x108>
   13fc4:	ldr	r0, [sp, #4]
   13fc8:	lsl	r0, r0, #1
   13fcc:	str	r0, [sp, #4]
   13fd0:	b	13fb4 <flatcc_builder_default_alloc@@Base+0xe8>
   13fd4:	ldr	r0, [sp, #16]
   13fd8:	ldr	r1, [fp, #-12]
   13fdc:	ldr	r1, [r1, #4]
   13fe0:	cmp	r0, r1
   13fe4:	bhi	1400c <flatcc_builder_default_alloc@@Base+0x140>
   13fe8:	ldr	r0, [fp, #-12]
   13fec:	ldr	r0, [r0, #4]
   13ff0:	lsr	r0, r0, #1
   13ff4:	ldr	r1, [sp, #4]
   13ff8:	cmp	r0, r1
   13ffc:	bcc	1400c <flatcc_builder_default_alloc@@Base+0x140>
   14000:	movw	r0, #0
   14004:	str	r0, [fp, #-4]
   14008:	b	140a4 <flatcc_builder_default_alloc@@Base+0x1d8>
   1400c:	ldr	r0, [fp, #-12]
   14010:	ldr	r0, [r0]
   14014:	ldr	r1, [sp, #4]
   14018:	bl	12730 <realloc@plt>
   1401c:	str	r0, [sp, #8]
   14020:	movw	r1, #0
   14024:	cmp	r0, r1
   14028:	bne	14038 <flatcc_builder_default_alloc@@Base+0x16c>
   1402c:	mvn	r0, #0
   14030:	str	r0, [fp, #-4]
   14034:	b	140a4 <flatcc_builder_default_alloc@@Base+0x1d8>
   14038:	ldr	r0, [sp, #12]
   1403c:	cmp	r0, #0
   14040:	beq	14084 <flatcc_builder_default_alloc@@Base+0x1b8>
   14044:	ldr	r0, [fp, #-12]
   14048:	ldr	r0, [r0, #4]
   1404c:	ldr	r1, [sp, #4]
   14050:	cmp	r0, r1
   14054:	bcs	14084 <flatcc_builder_default_alloc@@Base+0x1b8>
   14058:	ldr	r0, [sp, #8]
   1405c:	ldr	r1, [fp, #-12]
   14060:	ldr	r1, [r1, #4]
   14064:	add	r0, r0, r1
   14068:	ldr	r1, [sp, #4]
   1406c:	ldr	r2, [fp, #-12]
   14070:	ldr	r2, [r2, #4]
   14074:	sub	r2, r1, r2
   14078:	movw	r1, #0
   1407c:	and	r1, r1, #255	; 0xff
   14080:	bl	12778 <memset@plt>
   14084:	ldr	r0, [sp, #8]
   14088:	ldr	r1, [fp, #-12]
   1408c:	str	r0, [r1]
   14090:	ldr	r0, [sp, #4]
   14094:	ldr	r1, [fp, #-12]
   14098:	str	r0, [r1, #4]
   1409c:	movw	r0, #0
   140a0:	str	r0, [fp, #-4]
   140a4:	ldr	r0, [fp, #-4]
   140a8:	mov	sp, fp
   140ac:	pop	{fp, pc}

000140b0 <flatcc_builder_flush_vtable_cache@@Base>:
   140b0:	push	{fp, lr}
   140b4:	mov	fp, sp
   140b8:	sub	sp, sp, #8
   140bc:	str	r0, [sp, #4]
   140c0:	ldr	r0, [sp, #4]
   140c4:	add	r0, r0, #52	; 0x34
   140c8:	add	r0, r0, #40	; 0x28
   140cc:	str	r0, [sp]
   140d0:	ldr	r0, [sp, #4]
   140d4:	ldr	r0, [r0, #116]	; 0x74
   140d8:	cmp	r0, #0
   140dc:	bne	140e4 <flatcc_builder_flush_vtable_cache@@Base+0x34>
   140e0:	b	14118 <flatcc_builder_flush_vtable_cache@@Base+0x68>
   140e4:	ldr	r0, [sp]
   140e8:	ldr	r0, [r0]
   140ec:	ldr	r1, [sp]
   140f0:	ldr	r2, [r1, #4]
   140f4:	movw	r1, #0
   140f8:	and	r1, r1, #255	; 0xff
   140fc:	bl	12778 <memset@plt>
   14100:	ldr	r0, [sp, #4]
   14104:	movw	r1, #16
   14108:	str	r1, [r0, #124]	; 0x7c
   1410c:	ldr	r0, [sp, #4]
   14110:	movw	r1, #0
   14114:	str	r1, [r0, #120]	; 0x78
   14118:	mov	sp, fp
   1411c:	pop	{fp, pc}

00014120 <flatcc_builder_custom_init@@Base>:
   14120:	push	{fp, lr}
   14124:	mov	fp, sp
   14128:	sub	sp, sp, #24
   1412c:	ldr	ip, [fp, #8]
   14130:	str	r0, [fp, #-4]
   14134:	str	r1, [fp, #-8]
   14138:	str	r2, [sp, #12]
   1413c:	str	r3, [sp, #8]
   14140:	ldr	r0, [fp, #-4]
   14144:	movw	r1, #0
   14148:	and	r1, r1, #255	; 0xff
   1414c:	movw	r2, #232	; 0xe8
   14150:	str	ip, [sp, #4]
   14154:	bl	12778 <memset@plt>
   14158:	ldr	r0, [fp, #-8]
   1415c:	movw	r1, #0
   14160:	cmp	r0, r1
   14164:	bne	1418c <flatcc_builder_custom_init@@Base+0x6c>
   14168:	ldr	r0, [pc, #116]	; 141e4 <flatcc_builder_custom_init@@Base+0xc4>
   1416c:	ldr	r0, [pc, r0]
   14170:	ldr	r1, [fp, #-4]
   14174:	movw	r2, #1
   14178:	str	r2, [r1, #184]	; 0xb8
   1417c:	str	r0, [fp, #-8]
   14180:	ldr	r0, [fp, #-4]
   14184:	add	r0, r0, #188	; 0xbc
   14188:	str	r0, [sp, #12]
   1418c:	ldr	r0, [sp, #8]
   14190:	movw	r1, #0
   14194:	cmp	r0, r1
   14198:	bne	141a8 <flatcc_builder_custom_init@@Base+0x88>
   1419c:	ldr	r0, [pc, #68]	; 141e8 <flatcc_builder_custom_init@@Base+0xc8>
   141a0:	ldr	r0, [pc, r0]
   141a4:	str	r0, [sp, #8]
   141a8:	ldr	r0, [fp, #8]
   141ac:	ldr	r1, [fp, #-4]
   141b0:	str	r0, [r1, #40]	; 0x28
   141b4:	ldr	r0, [sp, #8]
   141b8:	ldr	r1, [fp, #-4]
   141bc:	str	r0, [r1, #48]	; 0x30
   141c0:	ldr	r0, [sp, #12]
   141c4:	ldr	r1, [fp, #-4]
   141c8:	str	r0, [r1, #36]	; 0x24
   141cc:	ldr	r0, [fp, #-8]
   141d0:	ldr	r1, [fp, #-4]
   141d4:	str	r0, [r1, #44]	; 0x2c
   141d8:	movw	r0, #0
   141dc:	mov	sp, fp
   141e0:	pop	{fp, pc}
   141e4:	ldrdeq	sl, [r1], -ip
   141e8:	andeq	sl, r1, r4, lsr #29

000141ec <flatcc_builder_init@@Base>:
   141ec:	push	{fp, lr}
   141f0:	mov	fp, sp
   141f4:	sub	sp, sp, #16
   141f8:	str	r0, [fp, #-4]
   141fc:	ldr	r0, [fp, #-4]
   14200:	movw	r1, #0
   14204:	str	r1, [sp, #8]
   14208:	ldr	r2, [sp, #8]
   1420c:	ldr	r3, [sp, #8]
   14210:	ldr	ip, [sp, #8]
   14214:	str	ip, [sp]
   14218:	bl	14120 <flatcc_builder_custom_init@@Base>
   1421c:	mov	sp, fp
   14220:	pop	{fp, pc}

00014224 <flatcc_builder_custom_reset@@Base>:
   14224:	push	{r4, sl, fp, lr}
   14228:	add	fp, sp, #8
   1422c:	sub	sp, sp, #40	; 0x28
   14230:	str	r0, [fp, #-16]
   14234:	str	r1, [fp, #-20]	; 0xffffffec
   14238:	str	r2, [sp, #24]
   1423c:	movw	r0, #0
   14240:	str	r0, [sp, #16]
   14244:	ldr	r0, [sp, #16]
   14248:	cmp	r0, #8
   1424c:	bge	14358 <flatcc_builder_custom_reset@@Base+0x134>
   14250:	ldr	r0, [fp, #-16]
   14254:	add	r0, r0, #52	; 0x34
   14258:	ldr	r1, [sp, #16]
   1425c:	add	r0, r0, r1, lsl #3
   14260:	str	r0, [sp, #20]
   14264:	ldr	r0, [sp, #20]
   14268:	ldr	r0, [r0]
   1426c:	movw	r1, #0
   14270:	cmp	r0, r1
   14274:	beq	1430c <flatcc_builder_custom_reset@@Base+0xe8>
   14278:	ldr	r0, [sp, #16]
   1427c:	cmp	r0, #5
   14280:	beq	142ec <flatcc_builder_custom_reset@@Base+0xc8>
   14284:	ldr	r0, [sp, #24]
   14288:	cmp	r0, #0
   1428c:	beq	142ec <flatcc_builder_custom_reset@@Base+0xc8>
   14290:	ldr	r0, [fp, #-16]
   14294:	ldr	r0, [r0, #48]	; 0x30
   14298:	ldr	r1, [fp, #-16]
   1429c:	ldr	r1, [r1, #40]	; 0x28
   142a0:	ldr	r2, [sp, #20]
   142a4:	ldr	r3, [sp, #16]
   142a8:	str	r0, [sp, #12]
   142ac:	mov	r0, r1
   142b0:	mov	r1, r2
   142b4:	movw	r2, #1
   142b8:	str	r2, [sp, #8]
   142bc:	ldr	ip, [sp, #8]
   142c0:	str	r3, [sp, #4]
   142c4:	mov	r3, ip
   142c8:	ldr	lr, [sp, #4]
   142cc:	str	lr, [sp]
   142d0:	ldr	r4, [sp, #12]
   142d4:	blx	r4
   142d8:	cmp	r0, #0
   142dc:	beq	142ec <flatcc_builder_custom_reset@@Base+0xc8>
   142e0:	mvn	r0, #0
   142e4:	str	r0, [fp, #-12]
   142e8:	b	14454 <flatcc_builder_custom_reset@@Base+0x230>
   142ec:	ldr	r0, [sp, #20]
   142f0:	ldr	r0, [r0]
   142f4:	ldr	r1, [sp, #20]
   142f8:	ldr	r2, [r1, #4]
   142fc:	movw	r1, #0
   14300:	and	r1, r1, #255	; 0xff
   14304:	bl	12778 <memset@plt>
   14308:	b	14344 <flatcc_builder_custom_reset@@Base+0x120>
   1430c:	ldr	r0, [sp, #20]
   14310:	ldr	r0, [r0, #4]
   14314:	cmp	r0, #0
   14318:	bne	14320 <flatcc_builder_custom_reset@@Base+0xfc>
   1431c:	b	14340 <flatcc_builder_custom_reset@@Base+0x11c>
   14320:	ldr	r0, [pc, #312]	; 14460 <flatcc_builder_custom_reset@@Base+0x23c>
   14324:	add	r0, pc, r0
   14328:	ldr	r1, [pc, #308]	; 14464 <flatcc_builder_custom_reset@@Base+0x240>
   1432c:	add	r1, pc, r1
   14330:	ldr	r2, [pc, #304]	; 14468 <flatcc_builder_custom_reset@@Base+0x244>
   14334:	add	r3, pc, r2
   14338:	movw	r2, #434	; 0x1b2
   1433c:	bl	127a8 <__assert_fail@plt>
   14340:	b	14344 <flatcc_builder_custom_reset@@Base+0x120>
   14344:	b	14348 <flatcc_builder_custom_reset@@Base+0x124>
   14348:	ldr	r0, [sp, #16]
   1434c:	add	r0, r0, #1
   14350:	str	r0, [sp, #16]
   14354:	b	14244 <flatcc_builder_custom_reset@@Base+0x20>
   14358:	ldr	r0, [fp, #-16]
   1435c:	movw	r1, #0
   14360:	str	r1, [r0, #120]	; 0x78
   14364:	ldr	r0, [fp, #-16]
   14368:	ldr	r0, [r0, #124]	; 0x7c
   1436c:	cmp	r0, #0
   14370:	bls	14380 <flatcc_builder_custom_reset@@Base+0x15c>
   14374:	ldr	r0, [fp, #-16]
   14378:	movw	r1, #16
   1437c:	str	r1, [r0, #124]	; 0x7c
   14380:	ldr	r0, [fp, #-16]
   14384:	movw	r1, #0
   14388:	strh	r1, [r0, #128]	; 0x80
   1438c:	ldr	r0, [fp, #-16]
   14390:	movw	r1, #0
   14394:	str	r1, [r0, #136]	; 0x88
   14398:	ldr	r0, [fp, #-16]
   1439c:	str	r1, [r0, #140]	; 0x8c
   143a0:	ldr	r0, [fp, #-16]
   143a4:	str	r1, [r0, #156]	; 0x9c
   143a8:	ldr	r0, [fp, #-16]
   143ac:	str	r1, [r0, #160]	; 0xa0
   143b0:	ldr	r0, [fp, #-16]
   143b4:	str	r1, [r0, #20]
   143b8:	ldr	r0, [fp, #-16]
   143bc:	str	r1, [r0, #24]
   143c0:	ldr	r0, [fp, #-16]
   143c4:	str	r1, [r0, #148]	; 0x94
   143c8:	ldr	r0, [fp, #-16]
   143cc:	str	r1, [r0, #152]	; 0x98
   143d0:	ldr	r0, [fp, #-16]
   143d4:	ldr	r0, [r0, #60]	; 0x3c
   143d8:	ldr	r2, [fp, #-16]
   143dc:	str	r0, [r2, #16]
   143e0:	ldr	r0, [fp, #-16]
   143e4:	ldr	r0, [r0, #76]	; 0x4c
   143e8:	ldr	r2, [fp, #-16]
   143ec:	str	r0, [r2]
   143f0:	ldr	r0, [fp, #-16]
   143f4:	ldr	r0, [r0, #52]	; 0x34
   143f8:	ldr	r2, [fp, #-16]
   143fc:	str	r0, [r2, #4]
   14400:	ldr	r0, [fp, #-16]
   14404:	str	r1, [r0, #32]
   14408:	ldr	r0, [fp, #-20]	; 0xffffffec
   1440c:	cmp	r0, #0
   14410:	beq	14430 <flatcc_builder_custom_reset@@Base+0x20c>
   14414:	ldr	r0, [fp, #-16]
   14418:	movw	r1, #0
   1441c:	str	r1, [r0, #172]	; 0xac
   14420:	ldr	r0, [fp, #-16]
   14424:	str	r1, [r0, #176]	; 0xb0
   14428:	ldr	r0, [fp, #-16]
   1442c:	str	r1, [r0, #180]	; 0xb4
   14430:	ldr	r0, [fp, #-16]
   14434:	ldr	r0, [r0, #184]	; 0xb8
   14438:	cmp	r0, #0
   1443c:	beq	1444c <flatcc_builder_custom_reset@@Base+0x228>
   14440:	ldr	r0, [fp, #-16]
   14444:	add	r0, r0, #188	; 0xbc
   14448:	bl	19dd4 <flatcc_emitter_reset@@Base>
   1444c:	movw	r0, #0
   14450:	str	r0, [fp, #-12]
   14454:	ldr	r0, [fp, #-12]
   14458:	sub	sp, fp, #8
   1445c:	pop	{r4, sl, fp, pc}
   14460:	andeq	r9, r0, r4, ror #9
   14464:	andeq	r9, r0, lr, ror #9
   14468:	andeq	r9, r0, r3, asr #10

0001446c <flatcc_builder_reset@@Base>:
   1446c:	push	{fp, lr}
   14470:	mov	fp, sp
   14474:	sub	sp, sp, #8
   14478:	str	r0, [sp, #4]
   1447c:	ldr	r0, [sp, #4]
   14480:	movw	r1, #0
   14484:	str	r1, [sp]
   14488:	ldr	r2, [sp]
   1448c:	bl	14224 <flatcc_builder_custom_reset@@Base>
   14490:	mov	sp, fp
   14494:	pop	{fp, pc}

00014498 <flatcc_builder_clear@@Base>:
   14498:	push	{r4, sl, fp, lr}
   1449c:	add	fp, sp, #8
   144a0:	sub	sp, sp, #32
   144a4:	str	r0, [fp, #-12]
   144a8:	movw	r0, #0
   144ac:	str	r0, [sp, #20]
   144b0:	ldr	r0, [sp, #20]
   144b4:	cmp	r0, #8
   144b8:	bge	14528 <flatcc_builder_clear@@Base+0x90>
   144bc:	ldr	r0, [fp, #-12]
   144c0:	add	r0, r0, #52	; 0x34
   144c4:	ldr	r1, [sp, #20]
   144c8:	add	r0, r0, r1, lsl #3
   144cc:	str	r0, [fp, #-16]
   144d0:	ldr	r0, [fp, #-12]
   144d4:	ldr	r0, [r0, #48]	; 0x30
   144d8:	ldr	r1, [fp, #-12]
   144dc:	ldr	r1, [r1, #40]	; 0x28
   144e0:	ldr	r2, [fp, #-16]
   144e4:	ldr	r3, [sp, #20]
   144e8:	str	r0, [sp, #16]
   144ec:	mov	r0, r1
   144f0:	mov	r1, r2
   144f4:	movw	r2, #0
   144f8:	str	r2, [sp, #12]
   144fc:	ldr	ip, [sp, #12]
   14500:	str	r3, [sp, #8]
   14504:	mov	r3, ip
   14508:	ldr	lr, [sp, #8]
   1450c:	str	lr, [sp]
   14510:	ldr	r4, [sp, #16]
   14514:	blx	r4
   14518:	ldr	r0, [sp, #20]
   1451c:	add	r0, r0, #1
   14520:	str	r0, [sp, #20]
   14524:	b	144b0 <flatcc_builder_clear@@Base+0x18>
   14528:	ldr	r0, [fp, #-12]
   1452c:	ldr	r0, [r0, #184]	; 0xb8
   14530:	cmp	r0, #0
   14534:	beq	14544 <flatcc_builder_clear@@Base+0xac>
   14538:	ldr	r0, [fp, #-12]
   1453c:	add	r0, r0, #188	; 0xbc
   14540:	bl	19f6c <flatcc_emitter_clear@@Base>
   14544:	ldr	r0, [fp, #-12]
   14548:	movw	r1, #0
   1454c:	and	r1, r1, #255	; 0xff
   14550:	movw	r2, #232	; 0xe8
   14554:	bl	12778 <memset@plt>
   14558:	sub	sp, fp, #8
   1455c:	pop	{r4, sl, fp, pc}

00014560 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14560:	push	{fp, lr}
   14564:	mov	fp, sp
   14568:	sub	sp, sp, #24
   1456c:	str	r0, [fp, #-8]
   14570:	str	r1, [sp, #12]
   14574:	ldr	r0, [sp, #12]
   14578:	add	r0, r0, #4
   1457c:	sub	r0, r0, #1
   14580:	mvn	r1, #3
   14584:	and	r0, r0, r1
   14588:	add	r0, r0, #4
   1458c:	str	r0, [sp, #12]
   14590:	ldr	r0, [fp, #-8]
   14594:	ldr	r1, [fp, #-8]
   14598:	ldr	r2, [r1, #228]	; 0xe4
   1459c:	ldr	r3, [sp, #12]
   145a0:	movw	r1, #7
   145a4:	movw	ip, #0
   145a8:	str	ip, [sp]
   145ac:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   145b0:	str	r0, [sp, #8]
   145b4:	movw	r1, #0
   145b8:	cmp	r0, r1
   145bc:	bne	145cc <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   145c0:	movw	r0, #0
   145c4:	str	r0, [fp, #-4]
   145c8:	b	14628 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   145cc:	ldr	r0, [sp, #8]
   145d0:	ldr	r2, [sp, #12]
   145d4:	movw	r1, #0
   145d8:	and	r1, r1, #255	; 0xff
   145dc:	bl	12778 <memset@plt>
   145e0:	ldr	r0, [fp, #-8]
   145e4:	ldr	r0, [r0, #224]	; 0xe0
   145e8:	ldr	r1, [sp, #8]
   145ec:	add	r2, r1, #4
   145f0:	str	r2, [sp, #8]
   145f4:	str	r0, [r1]
   145f8:	ldr	r0, [fp, #-8]
   145fc:	ldr	r0, [r0, #228]	; 0xe4
   14600:	add	r0, r0, #4
   14604:	ldr	r1, [fp, #-8]
   14608:	str	r0, [r1, #224]	; 0xe0
   1460c:	ldr	r0, [sp, #12]
   14610:	ldr	r1, [fp, #-8]
   14614:	ldr	r2, [r1, #228]	; 0xe4
   14618:	add	r0, r2, r0
   1461c:	str	r0, [r1, #228]	; 0xe4
   14620:	ldr	r0, [sp, #8]
   14624:	str	r0, [fp, #-4]
   14628:	ldr	r0, [fp, #-4]
   1462c:	mov	sp, fp
   14630:	pop	{fp, pc}
   14634:	push	{fp, lr}
   14638:	mov	fp, sp
   1463c:	sub	sp, sp, #32
   14640:	ldr	ip, [fp, #8]
   14644:	str	r0, [fp, #-4]
   14648:	str	r1, [fp, #-8]
   1464c:	str	r2, [fp, #-12]
   14650:	str	r3, [sp, #16]
   14654:	ldr	r0, [fp, #-4]
   14658:	add	r0, r0, #52	; 0x34
   1465c:	ldr	r1, [fp, #-8]
   14660:	add	r0, r0, r1, lsl #3
   14664:	str	r0, [sp, #12]
   14668:	ldr	r0, [fp, #-12]
   1466c:	ldr	r1, [sp, #16]
   14670:	add	r0, r0, r1
   14674:	ldr	r1, [sp, #12]
   14678:	ldr	r1, [r1, #4]
   1467c:	cmp	r0, r1
   14680:	bls	146f8 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   14684:	ldr	r0, [fp, #-4]
   14688:	ldr	r0, [r0, #48]	; 0x30
   1468c:	ldr	r1, [fp, #-4]
   14690:	ldr	r1, [r1, #40]	; 0x28
   14694:	ldr	r2, [sp, #12]
   14698:	ldr	r3, [fp, #-12]
   1469c:	ldr	ip, [sp, #16]
   146a0:	add	r3, r3, ip
   146a4:	ldr	ip, [fp, #8]
   146a8:	ldr	lr, [fp, #-8]
   146ac:	str	r0, [sp, #8]
   146b0:	mov	r0, r1
   146b4:	mov	r1, r2
   146b8:	mov	r2, r3
   146bc:	mov	r3, ip
   146c0:	str	lr, [sp]
   146c4:	ldr	ip, [sp, #8]
   146c8:	blx	ip
   146cc:	cmp	r0, #0
   146d0:	beq	146f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x194>
   146d4:	ldr	r0, [pc, #52]	; 14710 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b0>
   146d8:	add	r0, pc, r0
   146dc:	ldr	r1, [pc, #48]	; 14714 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b4>
   146e0:	add	r1, pc, r1
   146e4:	ldr	r2, [pc, #44]	; 14718 <flatcc_builder_enter_user_frame_ptr@@Base+0x1b8>
   146e8:	add	r3, pc, r2
   146ec:	movw	r2, #308	; 0x134
   146f0:	bl	127a8 <__assert_fail@plt>
   146f4:	b	146f8 <flatcc_builder_enter_user_frame_ptr@@Base+0x198>
   146f8:	ldr	r0, [sp, #12]
   146fc:	ldr	r0, [r0]
   14700:	ldr	r1, [fp, #-12]
   14704:	add	r0, r0, r1
   14708:	mov	sp, fp
   1470c:	pop	{fp, pc}
   14710:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   14714:	andeq	r9, r0, sl, lsr r1
   14718:	andeq	sl, r0, r9, lsr #2

0001471c <flatcc_builder_enter_user_frame@@Base>:
   1471c:	push	{fp, lr}
   14720:	mov	fp, sp
   14724:	sub	sp, sp, #24
   14728:	str	r0, [fp, #-8]
   1472c:	str	r1, [sp, #12]
   14730:	ldr	r0, [sp, #12]
   14734:	add	r0, r0, #4
   14738:	sub	r0, r0, #1
   1473c:	mvn	r1, #3
   14740:	and	r0, r0, r1
   14744:	add	r0, r0, #4
   14748:	str	r0, [sp, #12]
   1474c:	ldr	r0, [fp, #-8]
   14750:	ldr	r1, [fp, #-8]
   14754:	ldr	r2, [r1, #228]	; 0xe4
   14758:	ldr	r3, [sp, #12]
   1475c:	movw	r1, #7
   14760:	movw	ip, #0
   14764:	str	ip, [sp]
   14768:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1476c:	str	r0, [sp, #8]
   14770:	movw	r1, #0
   14774:	cmp	r0, r1
   14778:	bne	14788 <flatcc_builder_enter_user_frame@@Base+0x6c>
   1477c:	movw	r0, #0
   14780:	str	r0, [fp, #-4]
   14784:	b	147e8 <flatcc_builder_enter_user_frame@@Base+0xcc>
   14788:	ldr	r0, [sp, #8]
   1478c:	ldr	r2, [sp, #12]
   14790:	movw	r1, #0
   14794:	and	r1, r1, #255	; 0xff
   14798:	bl	12778 <memset@plt>
   1479c:	ldr	r0, [fp, #-8]
   147a0:	ldr	r0, [r0, #224]	; 0xe0
   147a4:	ldr	r1, [sp, #8]
   147a8:	add	r2, r1, #4
   147ac:	str	r2, [sp, #8]
   147b0:	str	r0, [r1]
   147b4:	ldr	r0, [fp, #-8]
   147b8:	ldr	r0, [r0, #228]	; 0xe4
   147bc:	add	r0, r0, #4
   147c0:	ldr	r1, [fp, #-8]
   147c4:	str	r0, [r1, #224]	; 0xe0
   147c8:	ldr	r0, [sp, #12]
   147cc:	ldr	r1, [fp, #-8]
   147d0:	ldr	r2, [r1, #228]	; 0xe4
   147d4:	add	r0, r2, r0
   147d8:	str	r0, [r1, #228]	; 0xe4
   147dc:	ldr	r0, [fp, #-8]
   147e0:	ldr	r0, [r0, #224]	; 0xe0
   147e4:	str	r0, [fp, #-4]
   147e8:	ldr	r0, [fp, #-4]
   147ec:	mov	sp, fp
   147f0:	pop	{fp, pc}

000147f4 <flatcc_builder_exit_user_frame@@Base>:
   147f4:	push	{fp, lr}
   147f8:	mov	fp, sp
   147fc:	sub	sp, sp, #8
   14800:	str	r0, [sp, #4]
   14804:	ldr	r0, [sp, #4]
   14808:	ldr	r0, [r0, #224]	; 0xe0
   1480c:	cmp	r0, #0
   14810:	bls	14818 <flatcc_builder_exit_user_frame@@Base+0x24>
   14814:	b	14838 <flatcc_builder_exit_user_frame@@Base+0x44>
   14818:	ldr	r0, [pc, #100]	; 14884 <flatcc_builder_exit_user_frame@@Base+0x90>
   1481c:	add	r0, pc, r0
   14820:	ldr	r1, [pc, #96]	; 14888 <flatcc_builder_exit_user_frame@@Base+0x94>
   14824:	add	r1, pc, r1
   14828:	ldr	r2, [pc, #92]	; 1488c <flatcc_builder_exit_user_frame@@Base+0x98>
   1482c:	add	r3, pc, r2
   14830:	movw	r2, #542	; 0x21e
   14834:	bl	127a8 <__assert_fail@plt>
   14838:	ldr	r0, [sp, #4]
   1483c:	ldr	r0, [r0, #108]	; 0x6c
   14840:	ldr	r1, [sp, #4]
   14844:	ldr	r1, [r1, #224]	; 0xe0
   14848:	add	r0, r0, r1
   1484c:	str	r0, [sp]
   14850:	ldr	r0, [sp, #4]
   14854:	ldr	r0, [r0, #224]	; 0xe0
   14858:	sub	r0, r0, #4
   1485c:	ldr	r1, [sp, #4]
   14860:	str	r0, [r1, #228]	; 0xe4
   14864:	ldr	r0, [sp]
   14868:	mvn	r1, #3
   1486c:	add	r0, r0, r1
   14870:	ldr	r0, [r0]
   14874:	ldr	r1, [sp, #4]
   14878:	str	r0, [r1, #224]	; 0xe0
   1487c:	mov	sp, fp
   14880:	pop	{fp, pc}
   14884:	muleq	r0, r9, r0
   14888:	strdeq	r8, [r0], -r6
   1488c:	andeq	r9, r0, r2, lsr #1

00014890 <flatcc_builder_exit_user_frame_at@@Base>:
   14890:	push	{fp, lr}
   14894:	mov	fp, sp
   14898:	sub	sp, sp, #8
   1489c:	str	r0, [sp, #4]
   148a0:	str	r1, [sp]
   148a4:	ldr	r0, [sp, #4]
   148a8:	ldr	r0, [r0, #224]	; 0xe0
   148ac:	ldr	r1, [sp]
   148b0:	cmp	r0, r1
   148b4:	bcc	148bc <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   148b8:	b	148dc <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   148bc:	ldr	r0, [pc, #52]	; 148f8 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   148c0:	add	r0, pc, r0
   148c4:	ldr	r1, [pc, #48]	; 148fc <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   148c8:	add	r1, pc, r1
   148cc:	ldr	r2, [pc, #44]	; 14900 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   148d0:	add	r3, pc, r2
   148d4:	movw	r2, #551	; 0x227
   148d8:	bl	127a8 <__assert_fail@plt>
   148dc:	ldr	r0, [sp]
   148e0:	ldr	r1, [sp, #4]
   148e4:	str	r0, [r1, #224]	; 0xe0
   148e8:	ldr	r0, [sp, #4]
   148ec:	bl	147f4 <flatcc_builder_exit_user_frame@@Base>
   148f0:	mov	sp, fp
   148f4:	pop	{fp, pc}
   148f8:	andeq	r9, r0, r8, asr #32
   148fc:	andeq	r8, r0, r2, asr pc
   14900:	andeq	r9, r0, r7, asr r0

00014904 <flatcc_builder_get_current_user_frame@@Base>:
   14904:	sub	sp, sp, #4
   14908:	str	r0, [sp]
   1490c:	ldr	r0, [sp]
   14910:	ldr	r0, [r0, #224]	; 0xe0
   14914:	add	sp, sp, #4
   14918:	bx	lr

0001491c <flatcc_builder_get_user_frame_ptr@@Base>:
   1491c:	sub	sp, sp, #8
   14920:	str	r0, [sp, #4]
   14924:	str	r1, [sp]
   14928:	ldr	r0, [sp, #4]
   1492c:	ldr	r0, [r0, #108]	; 0x6c
   14930:	ldr	r1, [sp]
   14934:	add	r0, r0, r1
   14938:	add	sp, sp, #8
   1493c:	bx	lr

00014940 <flatcc_builder_embed_buffer@@Base>:
   14940:	push	{fp, lr}
   14944:	mov	fp, sp
   14948:	sub	sp, sp, #120	; 0x78
   1494c:	ldr	ip, [fp, #12]
   14950:	ldr	lr, [fp, #8]
   14954:	str	r0, [fp, #-8]
   14958:	strh	r1, [fp, #-10]
   1495c:	str	r2, [fp, #-16]
   14960:	str	r3, [fp, #-20]	; 0xffffffec
   14964:	strh	lr, [fp, #-22]	; 0xffffffea
   14968:	ldr	r0, [fp, #12]
   1496c:	and	r0, r0, #2
   14970:	str	r0, [sp, #12]
   14974:	ldr	r0, [fp, #-8]
   14978:	ldrh	r1, [fp, #-10]
   1497c:	ldr	r2, [fp, #-8]
   14980:	ldr	r2, [r2, #152]	; 0x98
   14984:	cmp	r2, #0
   14988:	movw	r2, #0
   1498c:	moveq	r2, #1
   14990:	mvn	r3, #0
   14994:	eor	r2, r2, r3
   14998:	and	r3, r2, #1
   1499c:	sub	r2, fp, #22
   149a0:	str	r1, [sp, #8]
   149a4:	mov	r1, r2
   149a8:	ldr	r2, [sp, #8]
   149ac:	uxth	r2, r2
   149b0:	str	ip, [sp, #4]
   149b4:	bl	14b28 <flatcc_builder_embed_buffer@@Base+0x1e8>
   149b8:	cmp	r0, #0
   149bc:	beq	149cc <flatcc_builder_embed_buffer@@Base+0x8c>
   149c0:	movw	r0, #0
   149c4:	str	r0, [fp, #-4]
   149c8:	b	14b18 <flatcc_builder_embed_buffer@@Base+0x1d8>
   149cc:	ldr	r0, [fp, #-8]
   149d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   149d4:	ldr	r2, [sp, #12]
   149d8:	cmp	r2, #0
   149dc:	movw	r2, #0
   149e0:	movne	r2, #1
   149e4:	tst	r2, #1
   149e8:	movw	r2, #4
   149ec:	moveq	r2, #0
   149f0:	add	r1, r1, r2
   149f4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   149f8:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   149fc:	str	r0, [fp, #-32]	; 0xffffffe0
   14a00:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a04:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14a08:	add	r0, r0, r1
   14a0c:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   14a10:	str	r0, [fp, #-28]	; 0xffffffe4
   14a14:	movw	r0, #0
   14a18:	str	r0, [sp, #16]
   14a1c:	str	r0, [sp, #20]
   14a20:	ldr	r0, [fp, #-8]
   14a24:	ldr	r0, [r0, #152]	; 0x98
   14a28:	cmp	r0, #0
   14a2c:	beq	14a6c <flatcc_builder_embed_buffer@@Base+0x12c>
   14a30:	ldr	r0, [sp, #16]
   14a34:	add	r0, r0, #4
   14a38:	str	r0, [sp, #16]
   14a3c:	add	r0, sp, #16
   14a40:	add	r0, r0, #8
   14a44:	ldr	r1, [sp, #20]
   14a48:	sub	r2, fp, #28
   14a4c:	str	r2, [r0, r1, lsl #3]
   14a50:	ldr	r1, [sp, #20]
   14a54:	add	r0, r0, r1, lsl #3
   14a58:	movw	r1, #4
   14a5c:	str	r1, [r0, #4]
   14a60:	ldr	r0, [sp, #20]
   14a64:	add	r0, r0, #1
   14a68:	str	r0, [sp, #20]
   14a6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a70:	cmp	r0, #0
   14a74:	bls	14ab8 <flatcc_builder_embed_buffer@@Base+0x178>
   14a78:	ldr	r0, [fp, #-20]	; 0xffffffec
   14a7c:	ldr	r1, [sp, #16]
   14a80:	add	r0, r1, r0
   14a84:	str	r0, [sp, #16]
   14a88:	ldr	r0, [fp, #-16]
   14a8c:	add	r1, sp, #16
   14a90:	add	r1, r1, #8
   14a94:	ldr	r2, [sp, #20]
   14a98:	str	r0, [r1, r2, lsl #3]
   14a9c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14aa0:	ldr	r2, [sp, #20]
   14aa4:	add	r1, r1, r2, lsl #3
   14aa8:	str	r0, [r1, #4]
   14aac:	ldr	r0, [sp, #20]
   14ab0:	add	r0, r0, #1
   14ab4:	str	r0, [sp, #20]
   14ab8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14abc:	cmp	r0, #0
   14ac0:	bls	14b08 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14ac4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ac8:	ldr	r1, [sp, #16]
   14acc:	add	r0, r1, r0
   14ad0:	str	r0, [sp, #16]
   14ad4:	add	r0, sp, #16
   14ad8:	add	r0, r0, #8
   14adc:	ldr	r1, [sp, #20]
   14ae0:	ldr	r2, [pc, #60]	; 14b24 <flatcc_builder_embed_buffer@@Base+0x1e4>
   14ae4:	ldr	r2, [pc, r2]
   14ae8:	str	r2, [r0, r1, lsl #3]
   14aec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14af0:	ldr	r2, [sp, #20]
   14af4:	add	r0, r0, r2, lsl #3
   14af8:	str	r1, [r0, #4]
   14afc:	ldr	r0, [sp, #20]
   14b00:	add	r0, r0, #1
   14b04:	str	r0, [sp, #20]
   14b08:	ldr	r0, [fp, #-8]
   14b0c:	add	r1, sp, #16
   14b10:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   14b14:	str	r0, [fp, #-4]
   14b18:	ldr	r0, [fp, #-4]
   14b1c:	mov	sp, fp
   14b20:	pop	{fp, pc}
   14b24:	andeq	sl, r1, r8, asr r5
   14b28:	push	{fp, lr}
   14b2c:	mov	fp, sp
   14b30:	sub	sp, sp, #104	; 0x68
   14b34:	str	r0, [fp, #-4]
   14b38:	str	r1, [fp, #-8]
   14b3c:	strh	r2, [fp, #-10]
   14b40:	str	r3, [fp, #-16]
   14b44:	ldrh	r0, [fp, #-10]
   14b48:	cmp	r0, #0
   14b4c:	beq	14b5c <flatcc_builder_embed_buffer@@Base+0x21c>
   14b50:	ldrh	r0, [fp, #-10]
   14b54:	str	r0, [sp, #8]
   14b58:	b	14b90 <flatcc_builder_embed_buffer@@Base+0x250>
   14b5c:	ldr	r0, [fp, #-4]
   14b60:	ldrh	r0, [r0, #132]	; 0x84
   14b64:	cmp	r0, #0
   14b68:	beq	14b7c <flatcc_builder_embed_buffer@@Base+0x23c>
   14b6c:	ldr	r0, [fp, #-4]
   14b70:	ldrh	r0, [r0, #132]	; 0x84
   14b74:	str	r0, [sp, #4]
   14b78:	b	14b88 <flatcc_builder_embed_buffer@@Base+0x248>
   14b7c:	movw	r0, #1
   14b80:	str	r0, [sp, #4]
   14b84:	b	14b88 <flatcc_builder_embed_buffer@@Base+0x248>
   14b88:	ldr	r0, [sp, #4]
   14b8c:	str	r0, [sp, #8]
   14b90:	ldr	r0, [sp, #8]
   14b94:	strh	r0, [fp, #-10]
   14b98:	ldr	r0, [fp, #-8]
   14b9c:	movw	r1, #4
   14ba0:	uxth	r1, r1
   14ba4:	bl	16688 <flatcc_builder_start_vector@@Base+0xac>
   14ba8:	ldr	r0, [fp, #-8]
   14bac:	ldrh	r1, [fp, #-10]
   14bb0:	bl	16688 <flatcc_builder_start_vector@@Base+0xac>
   14bb4:	ldr	r0, [fp, #-16]
   14bb8:	cmp	r0, #0
   14bbc:	bne	14c78 <flatcc_builder_embed_buffer@@Base+0x338>
   14bc0:	ldr	r0, [fp, #-4]
   14bc4:	ldrh	r1, [fp, #-10]
   14bc8:	bl	19abc <flatcc_builder_get_emit_context@@Base+0x18>
   14bcc:	str	r0, [fp, #-20]	; 0xffffffec
   14bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bd4:	cmp	r0, #0
   14bd8:	beq	14c74 <flatcc_builder_embed_buffer@@Base+0x334>
   14bdc:	movw	r0, #0
   14be0:	str	r0, [sp, #12]
   14be4:	str	r0, [sp, #16]
   14be8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bec:	cmp	r0, #0
   14bf0:	bls	14c38 <flatcc_builder_embed_buffer@@Base+0x2f8>
   14bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bf8:	ldr	r1, [sp, #12]
   14bfc:	add	r0, r1, r0
   14c00:	str	r0, [sp, #12]
   14c04:	add	r0, sp, #12
   14c08:	add	r0, r0, #8
   14c0c:	ldr	r1, [sp, #16]
   14c10:	ldr	r2, [pc, #120]	; 14c90 <flatcc_builder_embed_buffer@@Base+0x350>
   14c14:	ldr	r2, [pc, r2]
   14c18:	str	r2, [r0, r1, lsl #3]
   14c1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c20:	ldr	r2, [sp, #16]
   14c24:	add	r0, r0, r2, lsl #3
   14c28:	str	r1, [r0, #4]
   14c2c:	ldr	r0, [sp, #16]
   14c30:	add	r0, r0, #1
   14c34:	str	r0, [sp, #16]
   14c38:	ldr	r0, [fp, #-4]
   14c3c:	add	r1, sp, #12
   14c40:	bl	16c6c <flatcc_builder_create_vtable@@Base+0x104>
   14c44:	movw	r1, #0
   14c48:	cmp	r1, r0
   14c4c:	bne	14c70 <flatcc_builder_embed_buffer@@Base+0x330>
   14c50:	ldr	r0, [pc, #44]	; 14c84 <flatcc_builder_embed_buffer@@Base+0x344>
   14c54:	add	r0, pc, r0
   14c58:	ldr	r1, [pc, #40]	; 14c88 <flatcc_builder_embed_buffer@@Base+0x348>
   14c5c:	add	r1, pc, r1
   14c60:	ldr	r2, [pc, #36]	; 14c8c <flatcc_builder_embed_buffer@@Base+0x34c>
   14c64:	add	r3, pc, r2
   14c68:	movw	r2, #702	; 0x2be
   14c6c:	bl	127a8 <__assert_fail@plt>
   14c70:	b	14c74 <flatcc_builder_embed_buffer@@Base+0x334>
   14c74:	b	14c78 <flatcc_builder_embed_buffer@@Base+0x338>
   14c78:	movw	r0, #0
   14c7c:	mov	sp, fp
   14c80:	pop	{fp, pc}
   14c84:	andeq	r9, r0, r3, lsl #27
   14c88:			; <UNDEFINED> instruction: 0x00008bbe
   14c8c:	strdeq	r9, [r0], -r0
   14c90:	andeq	sl, r1, r8, lsr #8
   14c94:	sub	sp, sp, #12
   14c98:	str	r0, [sp, #8]
   14c9c:	str	r1, [sp, #4]
   14ca0:	strh	r2, [sp, #2]
   14ca4:	ldr	r0, [sp, #8]
   14ca8:	ldr	r0, [r0, #136]	; 0x88
   14cac:	ldr	r1, [sp, #4]
   14cb0:	sub	r0, r0, r1
   14cb4:	ldrh	r1, [sp, #2]
   14cb8:	sub	r1, r1, #1
   14cbc:	and	r0, r0, r1
   14cc0:	add	sp, sp, #12
   14cc4:	bx	lr
   14cc8:	sub	sp, sp, #4
   14ccc:	str	r0, [sp]
   14cd0:	ldr	r0, [sp]
   14cd4:	add	sp, sp, #4
   14cd8:	bx	lr
   14cdc:	push	{fp, lr}
   14ce0:	mov	fp, sp
   14ce4:	sub	sp, sp, #24
   14ce8:	str	r0, [fp, #-4]
   14cec:	str	r1, [fp, #-8]
   14cf0:	ldr	r0, [fp, #-4]
   14cf4:	ldr	r0, [r0, #136]	; 0x88
   14cf8:	ldr	r1, [fp, #-8]
   14cfc:	ldr	r1, [r1]
   14d00:	sub	r0, r0, r1
   14d04:	str	r0, [sp, #12]
   14d08:	ldr	r0, [fp, #-8]
   14d0c:	ldr	r0, [r0]
   14d10:	cmp	r0, #16
   14d14:	bls	14d2c <flatcc_builder_embed_buffer@@Base+0x3ec>
   14d18:	ldr	r0, [fp, #-8]
   14d1c:	ldr	r0, [r0]
   14d20:	sub	r0, r0, #16
   14d24:	cmn	r0, #1
   14d28:	bhi	14d40 <flatcc_builder_embed_buffer@@Base+0x400>
   14d2c:	ldr	r0, [sp, #12]
   14d30:	ldr	r1, [fp, #-4]
   14d34:	ldr	r1, [r1, #136]	; 0x88
   14d38:	cmp	r0, r1
   14d3c:	blt	14d60 <flatcc_builder_embed_buffer@@Base+0x420>
   14d40:	ldr	r0, [pc, #172]	; 14df4 <flatcc_builder_embed_buffer@@Base+0x4b4>
   14d44:	add	r0, pc, r0
   14d48:	ldr	r1, [pc, #168]	; 14df8 <flatcc_builder_embed_buffer@@Base+0x4b8>
   14d4c:	add	r1, pc, r1
   14d50:	ldr	r2, [pc, #164]	; 14dfc <flatcc_builder_embed_buffer@@Base+0x4bc>
   14d54:	add	r3, pc, r2
   14d58:	movw	r2, #647	; 0x287
   14d5c:	bl	127a8 <__assert_fail@plt>
   14d60:	ldr	r0, [fp, #-4]
   14d64:	ldr	r0, [r0, #44]	; 0x2c
   14d68:	ldr	r1, [fp, #-4]
   14d6c:	ldr	r1, [r1, #36]	; 0x24
   14d70:	ldr	r2, [fp, #-8]
   14d74:	add	r2, r2, #8
   14d78:	ldr	r3, [fp, #-8]
   14d7c:	ldr	r3, [r3, #4]
   14d80:	ldr	ip, [sp, #12]
   14d84:	ldr	lr, [fp, #-8]
   14d88:	ldr	lr, [lr]
   14d8c:	str	r0, [sp, #8]
   14d90:	mov	r0, r1
   14d94:	mov	r1, r2
   14d98:	mov	r2, r3
   14d9c:	mov	r3, ip
   14da0:	str	lr, [sp]
   14da4:	ldr	ip, [sp, #8]
   14da8:	blx	ip
   14dac:	cmp	r0, #0
   14db0:	beq	14dd4 <flatcc_builder_embed_buffer@@Base+0x494>
   14db4:	ldr	r0, [pc, #44]	; 14de8 <flatcc_builder_embed_buffer@@Base+0x4a8>
   14db8:	add	r0, pc, r0
   14dbc:	ldr	r1, [pc, #40]	; 14dec <flatcc_builder_embed_buffer@@Base+0x4ac>
   14dc0:	add	r1, pc, r1
   14dc4:	ldr	r2, [pc, #36]	; 14df0 <flatcc_builder_embed_buffer@@Base+0x4b0>
   14dc8:	add	r3, pc, r2
   14dcc:	movw	r2, #651	; 0x28b
   14dd0:	bl	127a8 <__assert_fail@plt>
   14dd4:	ldr	r0, [sp, #12]
   14dd8:	ldr	r1, [fp, #-4]
   14ddc:	str	r0, [r1, #136]	; 0x88
   14de0:	mov	sp, fp
   14de4:	pop	{fp, pc}
   14de8:	andeq	r9, r0, pc, lsl ip
   14dec:	andeq	r8, r0, sl, asr sl
   14df0:	andeq	r9, r0, lr, asr #21
   14df4:	muleq	r0, r3, ip
   14df8:	andeq	r8, r0, lr, asr #21
   14dfc:	andeq	r9, r0, r2, asr #22

00014e00 <flatcc_builder_create_buffer@@Base>:
   14e00:	push	{fp, lr}
   14e04:	mov	fp, sp
   14e08:	sub	sp, sp, #152	; 0x98
   14e0c:	ldr	ip, [fp, #12]
   14e10:	ldr	lr, [fp, #8]
   14e14:	str	r0, [fp, #-8]
   14e18:	str	r1, [fp, #-12]
   14e1c:	strh	r2, [fp, #-14]
   14e20:	str	r3, [fp, #-20]	; 0xffffffec
   14e24:	strh	lr, [fp, #-22]	; 0xffffffea
   14e28:	movw	r0, #0
   14e2c:	str	r0, [fp, #-36]	; 0xffffffdc
   14e30:	str	r0, [sp, #28]
   14e34:	ldr	r0, [fp, #12]
   14e38:	and	r0, r0, #1
   14e3c:	cmp	r0, #0
   14e40:	movw	r0, #0
   14e44:	movne	r0, #1
   14e48:	and	r0, r0, #1
   14e4c:	str	r0, [sp, #24]
   14e50:	ldr	r0, [fp, #12]
   14e54:	and	r0, r0, #2
   14e58:	cmp	r0, #0
   14e5c:	movw	r0, #0
   14e60:	movne	r0, #1
   14e64:	and	r0, r0, #1
   14e68:	str	r0, [sp, #20]
   14e6c:	ldr	r0, [fp, #-8]
   14e70:	ldrh	r1, [fp, #-14]
   14e74:	ldr	r3, [sp, #24]
   14e78:	sub	r2, fp, #22
   14e7c:	str	r1, [sp, #16]
   14e80:	mov	r1, r2
   14e84:	ldr	r2, [sp, #16]
   14e88:	uxth	r2, r2
   14e8c:	str	ip, [sp, #12]
   14e90:	bl	14b28 <flatcc_builder_embed_buffer@@Base+0x1e8>
   14e94:	cmp	r0, #0
   14e98:	beq	14ea8 <flatcc_builder_create_buffer@@Base+0xa8>
   14e9c:	movw	r0, #0
   14ea0:	str	r0, [fp, #-4]
   14ea4:	b	1518c <flatcc_builder_create_buffer@@Base+0x38c>
   14ea8:	ldr	r0, [fp, #-8]
   14eac:	ldrh	r1, [fp, #-22]	; 0xffffffea
   14eb0:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   14eb4:	ldr	r0, [fp, #-12]
   14eb8:	movw	r1, #0
   14ebc:	cmp	r0, r1
   14ec0:	beq	14f00 <flatcc_builder_create_buffer@@Base+0x100>
   14ec4:	ldr	r0, [fp, #-12]
   14ec8:	ldrb	r1, [r0]
   14ecc:	strb	r1, [sp, #28]
   14ed0:	ldrb	r1, [r0, #1]
   14ed4:	strb	r1, [sp, #29]
   14ed8:	ldrb	r1, [r0, #2]
   14edc:	strb	r1, [sp, #30]
   14ee0:	ldrb	r0, [r0, #3]
   14ee4:	strb	r0, [sp, #31]
   14ee8:	ldr	r0, [sp, #28]
   14eec:	bl	151dc <flatcc_builder_create_buffer@@Base+0x3dc>
   14ef0:	str	r0, [sp, #28]
   14ef4:	ldr	r0, [sp, #28]
   14ef8:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   14efc:	str	r0, [sp, #28]
   14f00:	ldr	r0, [sp, #28]
   14f04:	cmp	r0, #0
   14f08:	movw	r0, #0
   14f0c:	movne	r0, #1
   14f10:	tst	r0, #1
   14f14:	movw	r0, #4
   14f18:	mov	r1, r0
   14f1c:	moveq	r1, #0
   14f20:	str	r1, [fp, #-36]	; 0xffffffdc
   14f24:	ldr	r1, [fp, #-8]
   14f28:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14f2c:	add	r2, r2, #4
   14f30:	ldr	r3, [sp, #20]
   14f34:	cmp	r3, #0
   14f38:	movw	r3, #0
   14f3c:	movne	r3, #1
   14f40:	tst	r3, #1
   14f44:	moveq	r0, #0
   14f48:	add	r0, r2, r0
   14f4c:	str	r0, [sp, #8]
   14f50:	mov	r0, r1
   14f54:	ldr	r1, [sp, #8]
   14f58:	ldrh	r2, [fp, #-22]	; 0xffffffea
   14f5c:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   14f60:	str	r0, [fp, #-32]	; 0xffffffe0
   14f64:	movw	r0, #0
   14f68:	str	r0, [sp, #32]
   14f6c:	str	r0, [sp, #36]	; 0x24
   14f70:	ldr	r0, [sp, #24]
   14f74:	cmp	r0, #0
   14f78:	bne	14f88 <flatcc_builder_create_buffer@@Base+0x188>
   14f7c:	ldr	r0, [sp, #20]
   14f80:	cmp	r0, #0
   14f84:	beq	14fc4 <flatcc_builder_create_buffer@@Base+0x1c4>
   14f88:	ldr	r0, [sp, #32]
   14f8c:	add	r0, r0, #4
   14f90:	str	r0, [sp, #32]
   14f94:	add	r0, sp, #32
   14f98:	add	r0, r0, #8
   14f9c:	ldr	r1, [sp, #36]	; 0x24
   14fa0:	sub	r2, fp, #44	; 0x2c
   14fa4:	str	r2, [r0, r1, lsl #3]
   14fa8:	ldr	r1, [sp, #36]	; 0x24
   14fac:	add	r0, r0, r1, lsl #3
   14fb0:	movw	r1, #4
   14fb4:	str	r1, [r0, #4]
   14fb8:	ldr	r0, [sp, #36]	; 0x24
   14fbc:	add	r0, r0, #1
   14fc0:	str	r0, [sp, #36]	; 0x24
   14fc4:	ldr	r0, [sp, #32]
   14fc8:	add	r0, r0, #4
   14fcc:	str	r0, [sp, #32]
   14fd0:	add	r0, sp, #32
   14fd4:	add	r0, r0, #8
   14fd8:	ldr	r1, [sp, #36]	; 0x24
   14fdc:	sub	r2, fp, #40	; 0x28
   14fe0:	str	r2, [r0, r1, lsl #3]
   14fe4:	ldr	r1, [sp, #36]	; 0x24
   14fe8:	add	r0, r0, r1, lsl #3
   14fec:	movw	r1, #4
   14ff0:	str	r1, [r0, #4]
   14ff4:	ldr	r0, [sp, #36]	; 0x24
   14ff8:	add	r0, r0, #1
   14ffc:	str	r0, [sp, #36]	; 0x24
   15000:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15004:	cmp	r0, #0
   15008:	bls	1504c <flatcc_builder_create_buffer@@Base+0x24c>
   1500c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15010:	ldr	r1, [sp, #32]
   15014:	add	r0, r1, r0
   15018:	str	r0, [sp, #32]
   1501c:	add	r0, sp, #32
   15020:	add	r0, r0, #8
   15024:	ldr	r1, [sp, #36]	; 0x24
   15028:	add	r2, sp, #28
   1502c:	str	r2, [r0, r1, lsl #3]
   15030:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15034:	ldr	r2, [sp, #36]	; 0x24
   15038:	add	r0, r0, r2, lsl #3
   1503c:	str	r1, [r0, #4]
   15040:	ldr	r0, [sp, #36]	; 0x24
   15044:	add	r0, r0, #1
   15048:	str	r0, [sp, #36]	; 0x24
   1504c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15050:	cmp	r0, #0
   15054:	bls	1509c <flatcc_builder_create_buffer@@Base+0x29c>
   15058:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1505c:	ldr	r1, [sp, #32]
   15060:	add	r0, r1, r0
   15064:	str	r0, [sp, #32]
   15068:	add	r0, sp, #32
   1506c:	add	r0, r0, #8
   15070:	ldr	r1, [sp, #36]	; 0x24
   15074:	ldr	r2, [pc, #296]	; 151a4 <flatcc_builder_create_buffer@@Base+0x3a4>
   15078:	ldr	r2, [pc, r2]
   1507c:	str	r2, [r0, r1, lsl #3]
   15080:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15084:	ldr	r2, [sp, #36]	; 0x24
   15088:	add	r0, r0, r2, lsl #3
   1508c:	str	r1, [r0, #4]
   15090:	ldr	r0, [sp, #36]	; 0x24
   15094:	add	r0, r0, #1
   15098:	str	r0, [sp, #36]	; 0x24
   1509c:	ldr	r0, [fp, #-8]
   150a0:	ldr	r0, [r0, #136]	; 0x88
   150a4:	ldr	r1, [sp, #32]
   150a8:	sub	r0, r0, r1
   150ac:	ldr	r1, [sp, #24]
   150b0:	cmp	r1, #0
   150b4:	movw	r1, #1
   150b8:	str	r0, [sp, #4]
   150bc:	str	r1, [sp]
   150c0:	bne	150d8 <flatcc_builder_create_buffer@@Base+0x2d8>
   150c4:	ldr	r0, [sp, #20]
   150c8:	cmp	r0, #0
   150cc:	movw	r0, #0
   150d0:	movne	r0, #1
   150d4:	str	r0, [sp]
   150d8:	ldr	r0, [sp]
   150dc:	tst	r0, #1
   150e0:	movw	r0, #4
   150e4:	moveq	r0, #0
   150e8:	ldr	r1, [sp, #4]
   150ec:	add	r0, r1, r0
   150f0:	str	r0, [fp, #-48]	; 0xffffffd0
   150f4:	ldr	r0, [sp, #24]
   150f8:	cmp	r0, #0
   150fc:	beq	1511c <flatcc_builder_create_buffer@@Base+0x31c>
   15100:	ldr	r0, [fp, #-8]
   15104:	ldr	r0, [r0, #144]	; 0x90
   15108:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1510c:	sub	r0, r0, r1
   15110:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   15114:	str	r0, [fp, #-44]	; 0xffffffd4
   15118:	b	15134 <flatcc_builder_create_buffer@@Base+0x334>
   1511c:	ldr	r0, [fp, #-8]
   15120:	ldr	r0, [r0, #140]	; 0x8c
   15124:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15128:	sub	r0, r0, r1
   1512c:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   15130:	str	r0, [fp, #-44]	; 0xffffffd4
   15134:	ldr	r0, [fp, #-20]	; 0xffffffec
   15138:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1513c:	sub	r0, r0, r1
   15140:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   15144:	str	r0, [fp, #-40]	; 0xffffffd8
   15148:	ldr	r0, [fp, #-8]
   1514c:	add	r1, sp, #32
   15150:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   15154:	str	r0, [fp, #-28]	; 0xffffffe4
   15158:	movw	r1, #0
   1515c:	cmp	r1, r0
   15160:	bne	15184 <flatcc_builder_create_buffer@@Base+0x384>
   15164:	ldr	r0, [pc, #44]	; 15198 <flatcc_builder_create_buffer@@Base+0x398>
   15168:	add	r0, pc, r0
   1516c:	ldr	r1, [pc, #40]	; 1519c <flatcc_builder_create_buffer@@Base+0x39c>
   15170:	add	r1, pc, r1
   15174:	ldr	r2, [pc, #36]	; 151a0 <flatcc_builder_create_buffer@@Base+0x3a0>
   15178:	add	r3, pc, r2
   1517c:	movw	r2, #772	; 0x304
   15180:	bl	127a8 <__assert_fail@plt>
   15184:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15188:	str	r0, [fp, #-4]
   1518c:	ldr	r0, [fp, #-4]
   15190:	mov	sp, fp
   15194:	pop	{fp, pc}
   15198:	andeq	r9, r0, pc, ror #16
   1519c:	andeq	r8, r0, sl, lsr #13
   151a0:	strdeq	r8, [r0], -r4
   151a4:	andeq	r9, r1, r4, asr #31
   151a8:	sub	sp, sp, #8
   151ac:	str	r0, [sp, #4]
   151b0:	strh	r1, [sp, #2]
   151b4:	ldr	r0, [sp, #4]
   151b8:	ldrh	r0, [r0, #128]	; 0x80
   151bc:	ldrh	r1, [sp, #2]
   151c0:	cmp	r0, r1
   151c4:	bge	151d4 <flatcc_builder_create_buffer@@Base+0x3d4>
   151c8:	ldrh	r0, [sp, #2]
   151cc:	ldr	r1, [sp, #4]
   151d0:	strh	r0, [r1, #128]	; 0x80
   151d4:	add	sp, sp, #8
   151d8:	bx	lr
   151dc:	sub	sp, sp, #4
   151e0:	str	r0, [sp]
   151e4:	ldr	r0, [sp]
   151e8:	add	sp, sp, #4
   151ec:	bx	lr

000151f0 <flatcc_builder_create_struct@@Base>:
   151f0:	push	{fp, lr}
   151f4:	mov	fp, sp
   151f8:	sub	sp, sp, #96	; 0x60
   151fc:	str	r0, [fp, #-4]
   15200:	str	r1, [fp, #-8]
   15204:	str	r2, [fp, #-12]
   15208:	strh	r3, [fp, #-14]
   1520c:	ldrh	r0, [fp, #-14]
   15210:	cmp	r0, #1
   15214:	blt	1521c <flatcc_builder_create_struct@@Base+0x2c>
   15218:	b	1523c <flatcc_builder_create_struct@@Base+0x4c>
   1521c:	ldr	r0, [pc, #244]	; 15318 <flatcc_builder_create_struct@@Base+0x128>
   15220:	add	r0, pc, r0
   15224:	ldr	r1, [pc, #240]	; 1531c <flatcc_builder_create_struct@@Base+0x12c>
   15228:	add	r1, pc, r1
   1522c:	ldr	r2, [pc, #236]	; 15320 <flatcc_builder_create_struct@@Base+0x130>
   15230:	add	r3, pc, r2
   15234:	movw	r2, #783	; 0x30f
   15238:	bl	127a8 <__assert_fail@plt>
   1523c:	ldr	r0, [fp, #-4]
   15240:	ldrh	r1, [fp, #-14]
   15244:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   15248:	ldr	r0, [fp, #-4]
   1524c:	ldr	r1, [fp, #-12]
   15250:	ldrh	r2, [fp, #-14]
   15254:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   15258:	str	r0, [fp, #-20]	; 0xffffffec
   1525c:	movw	r0, #0
   15260:	str	r0, [sp, #4]
   15264:	str	r0, [sp, #8]
   15268:	ldr	r0, [fp, #-12]
   1526c:	cmp	r0, #0
   15270:	bls	152b4 <flatcc_builder_create_struct@@Base+0xc4>
   15274:	ldr	r0, [fp, #-12]
   15278:	ldr	r1, [sp, #4]
   1527c:	add	r0, r1, r0
   15280:	str	r0, [sp, #4]
   15284:	ldr	r0, [fp, #-8]
   15288:	add	r1, sp, #4
   1528c:	add	r1, r1, #8
   15290:	ldr	r2, [sp, #8]
   15294:	str	r0, [r1, r2, lsl #3]
   15298:	ldr	r0, [fp, #-12]
   1529c:	ldr	r2, [sp, #8]
   152a0:	add	r1, r1, r2, lsl #3
   152a4:	str	r0, [r1, #4]
   152a8:	ldr	r0, [sp, #8]
   152ac:	add	r0, r0, #1
   152b0:	str	r0, [sp, #8]
   152b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   152b8:	cmp	r0, #0
   152bc:	bls	15304 <flatcc_builder_create_struct@@Base+0x114>
   152c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   152c4:	ldr	r1, [sp, #4]
   152c8:	add	r0, r1, r0
   152cc:	str	r0, [sp, #4]
   152d0:	add	r0, sp, #4
   152d4:	add	r0, r0, #8
   152d8:	ldr	r1, [sp, #8]
   152dc:	ldr	r2, [pc, #64]	; 15324 <flatcc_builder_create_struct@@Base+0x134>
   152e0:	ldr	r2, [pc, r2]
   152e4:	str	r2, [r0, r1, lsl #3]
   152e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   152ec:	ldr	r2, [sp, #8]
   152f0:	add	r0, r0, r2, lsl #3
   152f4:	str	r1, [r0, #4]
   152f8:	ldr	r0, [sp, #8]
   152fc:	add	r0, r0, #1
   15300:	str	r0, [sp, #8]
   15304:	ldr	r0, [fp, #-4]
   15308:	add	r1, sp, #4
   1530c:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   15310:	mov	sp, fp
   15314:	pop	{fp, pc}
   15318:	andeq	r8, r0, pc, asr #15
   1531c:	strdeq	r8, [r0], -r2
   15320:	andeq	r8, r0, sl, asr #15
   15324:	andeq	r9, r1, ip, asr sp

00015328 <flatcc_builder_start_buffer@@Base>:
   15328:	push	{fp, lr}
   1532c:	mov	fp, sp
   15330:	sub	sp, sp, #32
   15334:	str	r0, [fp, #-8]
   15338:	str	r1, [fp, #-12]
   1533c:	strh	r2, [fp, #-14]
   15340:	str	r3, [sp, #12]
   15344:	ldr	r0, [fp, #-8]
   15348:	ldr	r1, [fp, #-8]
   1534c:	ldrh	r1, [r1, #128]	; 0x80
   15350:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   15354:	cmp	r0, #0
   15358:	beq	15368 <flatcc_builder_start_buffer@@Base+0x40>
   1535c:	mvn	r0, #0
   15360:	str	r0, [fp, #-4]
   15364:	b	15490 <flatcc_builder_start_buffer@@Base+0x168>
   15368:	ldr	r0, [fp, #-8]
   1536c:	movw	r1, #1
   15370:	strh	r1, [r0, #128]	; 0x80
   15374:	ldr	r0, [fp, #-8]
   15378:	ldrh	r0, [r0, #132]	; 0x84
   1537c:	ldr	r1, [fp, #-8]
   15380:	ldr	r1, [r1, #32]
   15384:	strh	r0, [r1, #34]	; 0x22
   15388:	ldrh	r0, [fp, #-14]
   1538c:	ldr	r1, [fp, #-8]
   15390:	strh	r0, [r1, #132]	; 0x84
   15394:	ldr	r0, [fp, #-8]
   15398:	ldrh	r0, [r0, #164]	; 0xa4
   1539c:	ldr	r1, [fp, #-8]
   153a0:	ldr	r1, [r1, #32]
   153a4:	strh	r0, [r1, #32]
   153a8:	ldr	r0, [sp, #12]
   153ac:	ldr	r1, [fp, #-8]
   153b0:	strh	r0, [r1, #164]	; 0xa4
   153b4:	ldr	r0, [fp, #-8]
   153b8:	ldr	r0, [r0, #144]	; 0x90
   153bc:	ldr	r1, [fp, #-8]
   153c0:	ldr	r1, [r1, #32]
   153c4:	str	r0, [r1, #20]
   153c8:	ldr	r0, [fp, #-8]
   153cc:	ldr	r0, [r0, #152]	; 0x98
   153d0:	ldr	r1, [fp, #-8]
   153d4:	ldr	r1, [r1, #32]
   153d8:	str	r0, [r1, #28]
   153dc:	ldr	r0, [fp, #-8]
   153e0:	ldr	r0, [r0, #136]	; 0x88
   153e4:	ldr	r1, [fp, #-8]
   153e8:	str	r0, [r1, #144]	; 0x90
   153ec:	ldr	r0, [fp, #-8]
   153f0:	ldr	r1, [r0, #148]	; 0x94
   153f4:	add	r2, r1, #1
   153f8:	str	r2, [r0, #148]	; 0x94
   153fc:	ldr	r0, [fp, #-8]
   15400:	str	r1, [r0, #152]	; 0x98
   15404:	ldr	r0, [fp, #-8]
   15408:	ldr	r0, [r0, #168]	; 0xa8
   1540c:	ldr	r1, [fp, #-8]
   15410:	ldr	r1, [r1, #32]
   15414:	str	r0, [r1, #16]
   15418:	ldr	r0, [fp, #-8]
   1541c:	add	r0, r0, #168	; 0xa8
   15420:	ldr	r1, [fp, #-12]
   15424:	movw	r2, #0
   15428:	cmp	r1, r2
   1542c:	str	r0, [sp, #8]
   15430:	beq	15440 <flatcc_builder_start_buffer@@Base+0x118>
   15434:	ldr	r0, [fp, #-12]
   15438:	str	r0, [sp, #4]
   1543c:	b	15450 <flatcc_builder_start_buffer@@Base+0x128>
   15440:	ldr	r0, [pc, #84]	; 1549c <flatcc_builder_start_buffer@@Base+0x174>
   15444:	ldr	r0, [pc, r0]
   15448:	str	r0, [sp, #4]
   1544c:	b	15450 <flatcc_builder_start_buffer@@Base+0x128>
   15450:	ldr	r0, [sp, #4]
   15454:	ldrb	r1, [r0]
   15458:	ldr	r2, [sp, #8]
   1545c:	strb	r1, [r2]
   15460:	ldrb	r1, [r0, #1]
   15464:	strb	r1, [r2, #1]
   15468:	ldrb	r1, [r0, #2]
   1546c:	strb	r1, [r2, #2]
   15470:	ldrb	r0, [r0, #3]
   15474:	strb	r0, [r2, #3]
   15478:	ldr	r0, [fp, #-8]
   1547c:	ldr	r0, [r0, #32]
   15480:	movw	r1, #1
   15484:	strh	r1, [r0, #14]
   15488:	movw	r0, #0
   1548c:	str	r0, [fp, #-4]
   15490:	ldr	r0, [fp, #-4]
   15494:	mov	sp, fp
   15498:	pop	{fp, pc}
   1549c:	strdeq	r9, [r1], -r8
   154a0:	push	{fp, lr}
   154a4:	mov	fp, sp
   154a8:	sub	sp, sp, #24
   154ac:	str	r0, [fp, #-8]
   154b0:	strh	r1, [fp, #-10]
   154b4:	ldr	r0, [fp, #-8]
   154b8:	ldr	r1, [r0, #156]	; 0x9c
   154bc:	add	r1, r1, #1
   154c0:	str	r1, [r0, #156]	; 0x9c
   154c4:	ldr	r0, [fp, #-8]
   154c8:	ldr	r0, [r0, #160]	; 0xa0
   154cc:	cmp	r1, r0
   154d0:	ble	155bc <flatcc_builder_start_buffer@@Base+0x294>
   154d4:	ldr	r0, [fp, #-8]
   154d8:	ldr	r0, [r0, #176]	; 0xb0
   154dc:	cmp	r0, #0
   154e0:	ble	15508 <flatcc_builder_start_buffer@@Base+0x1e0>
   154e4:	ldr	r0, [fp, #-8]
   154e8:	ldr	r0, [r0, #156]	; 0x9c
   154ec:	ldr	r1, [fp, #-8]
   154f0:	ldr	r1, [r1, #176]	; 0xb0
   154f4:	cmp	r0, r1
   154f8:	ble	15508 <flatcc_builder_start_buffer@@Base+0x1e0>
   154fc:	mvn	r0, #0
   15500:	str	r0, [fp, #-4]
   15504:	b	15660 <flatcc_builder_start_buffer@@Base+0x338>
   15508:	ldr	r0, [fp, #-8]
   1550c:	ldr	r1, [fp, #-8]
   15510:	ldr	r1, [r1, #156]	; 0x9c
   15514:	sub	r1, r1, #1
   15518:	movw	r2, #36	; 0x24
   1551c:	mul	r1, r1, r2
   15520:	movw	r3, #4
   15524:	str	r1, [sp, #8]
   15528:	mov	r1, r3
   1552c:	ldr	r3, [sp, #8]
   15530:	str	r2, [sp, #4]
   15534:	mov	r2, r3
   15538:	ldr	r3, [sp, #4]
   1553c:	movw	ip, #0
   15540:	str	ip, [sp]
   15544:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   15548:	ldr	r1, [fp, #-8]
   1554c:	str	r0, [r1, #32]
   15550:	movw	r1, #0
   15554:	cmp	r0, r1
   15558:	bne	15568 <flatcc_builder_start_buffer@@Base+0x240>
   1555c:	mvn	r0, #0
   15560:	str	r0, [fp, #-4]
   15564:	b	15660 <flatcc_builder_start_buffer@@Base+0x338>
   15568:	ldr	r0, [fp, #-8]
   1556c:	ldr	r0, [r0, #88]	; 0x58
   15570:	movw	r1, #36	; 0x24
   15574:	udiv	r0, r0, r1
   15578:	ldr	r1, [fp, #-8]
   1557c:	str	r0, [r1, #160]	; 0xa0
   15580:	ldr	r0, [fp, #-8]
   15584:	ldr	r0, [r0, #176]	; 0xb0
   15588:	cmp	r0, #0
   1558c:	ble	155b8 <flatcc_builder_start_buffer@@Base+0x290>
   15590:	ldr	r0, [fp, #-8]
   15594:	ldr	r0, [r0, #176]	; 0xb0
   15598:	ldr	r1, [fp, #-8]
   1559c:	ldr	r1, [r1, #160]	; 0xa0
   155a0:	cmp	r0, r1
   155a4:	bge	155b8 <flatcc_builder_start_buffer@@Base+0x290>
   155a8:	ldr	r0, [fp, #-8]
   155ac:	ldr	r0, [r0, #176]	; 0xb0
   155b0:	ldr	r1, [fp, #-8]
   155b4:	str	r0, [r1, #160]	; 0xa0
   155b8:	b	155cc <flatcc_builder_start_buffer@@Base+0x2a4>
   155bc:	ldr	r0, [fp, #-8]
   155c0:	ldr	r1, [r0, #32]
   155c4:	add	r1, r1, #36	; 0x24
   155c8:	str	r1, [r0, #32]
   155cc:	ldr	r0, [fp, #-8]
   155d0:	ldr	r0, [r0, #20]
   155d4:	ldr	r1, [fp, #-8]
   155d8:	ldr	r1, [r1, #32]
   155dc:	str	r0, [r1, #8]
   155e0:	ldr	r0, [fp, #-8]
   155e4:	ldrh	r0, [r0, #130]	; 0x82
   155e8:	ldr	r1, [fp, #-8]
   155ec:	ldr	r1, [r1, #32]
   155f0:	strh	r0, [r1, #12]
   155f4:	ldrh	r0, [fp, #-10]
   155f8:	ldr	r1, [fp, #-8]
   155fc:	strh	r0, [r1, #130]	; 0x82
   15600:	ldr	r0, [fp, #-8]
   15604:	ldr	r0, [r0, #28]
   15608:	ldr	r1, [fp, #-8]
   1560c:	ldr	r1, [r1, #32]
   15610:	str	r0, [r1]
   15614:	ldr	r0, [fp, #-8]
   15618:	ldr	r0, [r0, #32]
   1561c:	mvn	r1, #3
   15620:	str	r1, [r0, #4]
   15624:	ldr	r0, [fp, #-8]
   15628:	ldr	r0, [r0, #28]
   1562c:	ldr	r1, [fp, #-8]
   15630:	ldr	r1, [r1, #20]
   15634:	add	r0, r0, r1
   15638:	add	r0, r0, #8
   1563c:	sub	r0, r0, #1
   15640:	mvn	r1, #7
   15644:	and	r0, r0, r1
   15648:	ldr	r1, [fp, #-8]
   1564c:	str	r0, [r1, #28]
   15650:	ldr	r0, [fp, #-8]
   15654:	movw	r1, #0
   15658:	str	r1, [r0, #20]
   1565c:	str	r1, [fp, #-4]
   15660:	ldr	r0, [fp, #-4]
   15664:	mov	sp, fp
   15668:	pop	{fp, pc}

0001566c <flatcc_builder_end_buffer@@Base>:
   1566c:	push	{fp, lr}
   15670:	mov	fp, sp
   15674:	sub	sp, sp, #32
   15678:	str	r0, [fp, #-8]
   1567c:	str	r1, [fp, #-12]
   15680:	ldr	r0, [fp, #-8]
   15684:	ldrh	r0, [r0, #164]	; 0xa4
   15688:	and	r0, r0, #2
   1568c:	str	r0, [sp, #12]
   15690:	ldr	r0, [fp, #-8]
   15694:	ldr	r0, [r0, #152]	; 0x98
   15698:	cmp	r0, #0
   1569c:	movw	r0, #0
   156a0:	moveq	r0, #1
   156a4:	tst	r0, #1
   156a8:	movw	r0, #0
   156ac:	moveq	r0, #1
   156b0:	ldr	r1, [sp, #12]
   156b4:	orr	r0, r1, r0
   156b8:	str	r0, [sp, #12]
   156bc:	ldr	r0, [fp, #-8]
   156c0:	ldr	r0, [r0, #32]
   156c4:	ldrh	r0, [r0, #14]
   156c8:	cmp	r0, #1
   156cc:	bne	156d4 <flatcc_builder_end_buffer@@Base+0x68>
   156d0:	b	156f4 <flatcc_builder_end_buffer@@Base+0x88>
   156d4:	ldr	r0, [pc, #232]	; 157c4 <flatcc_builder_end_buffer@@Base+0x158>
   156d8:	add	r0, pc, r0
   156dc:	ldr	r1, [pc, #228]	; 157c8 <flatcc_builder_end_buffer@@Base+0x15c>
   156e0:	add	r1, pc, r1
   156e4:	ldr	r2, [pc, #224]	; 157cc <flatcc_builder_end_buffer@@Base+0x160>
   156e8:	add	r3, pc, r2
   156ec:	movw	r2, #838	; 0x346
   156f0:	bl	127a8 <__assert_fail@plt>
   156f4:	ldr	r0, [fp, #-8]
   156f8:	ldr	r1, [fp, #-8]
   156fc:	ldrh	r1, [r1, #132]	; 0x84
   15700:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   15704:	ldr	r0, [fp, #-8]
   15708:	ldr	r1, [fp, #-8]
   1570c:	add	r1, r1, #168	; 0xa8
   15710:	ldr	r2, [fp, #-8]
   15714:	ldrh	r2, [r2, #132]	; 0x84
   15718:	ldr	r3, [fp, #-12]
   1571c:	ldr	ip, [fp, #-8]
   15720:	ldrh	ip, [ip, #128]	; 0x80
   15724:	ldr	lr, [sp, #12]
   15728:	uxth	r2, r2
   1572c:	uxth	ip, ip
   15730:	str	ip, [sp]
   15734:	str	lr, [sp, #4]
   15738:	bl	14e00 <flatcc_builder_create_buffer@@Base>
   1573c:	str	r0, [sp, #16]
   15740:	movw	r1, #0
   15744:	cmp	r1, r0
   15748:	bne	15758 <flatcc_builder_end_buffer@@Base+0xec>
   1574c:	movw	r0, #0
   15750:	str	r0, [fp, #-4]
   15754:	b	157b8 <flatcc_builder_end_buffer@@Base+0x14c>
   15758:	ldr	r0, [fp, #-8]
   1575c:	ldr	r0, [r0, #32]
   15760:	ldr	r0, [r0, #20]
   15764:	ldr	r1, [fp, #-8]
   15768:	str	r0, [r1, #144]	; 0x90
   1576c:	ldr	r0, [fp, #-8]
   15770:	ldr	r0, [r0, #32]
   15774:	ldr	r0, [r0, #28]
   15778:	ldr	r1, [fp, #-8]
   1577c:	str	r0, [r1, #152]	; 0x98
   15780:	ldr	r0, [fp, #-8]
   15784:	ldr	r0, [r0, #32]
   15788:	ldr	r0, [r0, #16]
   1578c:	ldr	r1, [fp, #-8]
   15790:	str	r0, [r1, #168]	; 0xa8
   15794:	ldr	r0, [fp, #-8]
   15798:	ldr	r0, [r0, #32]
   1579c:	ldrh	r0, [r0, #32]
   157a0:	ldr	r1, [fp, #-8]
   157a4:	strh	r0, [r1, #164]	; 0xa4
   157a8:	ldr	r0, [fp, #-8]
   157ac:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   157b0:	ldr	r0, [sp, #16]
   157b4:	str	r0, [fp, #-4]
   157b8:	ldr	r0, [fp, #-4]
   157bc:	mov	sp, fp
   157c0:	pop	{fp, pc}
   157c4:	andeq	r8, r0, r8, lsl #7
   157c8:	andeq	r8, r0, sl, lsr r1
   157cc:	andeq	r8, r0, r4, lsr #7
   157d0:	push	{fp, lr}
   157d4:	mov	fp, sp
   157d8:	sub	sp, sp, #8
   157dc:	str	r0, [sp, #4]
   157e0:	ldr	r0, [sp, #4]
   157e4:	ldr	r0, [r0, #16]
   157e8:	ldr	r1, [sp, #4]
   157ec:	ldr	r2, [r1, #20]
   157f0:	movw	r1, #0
   157f4:	and	r1, r1, #255	; 0xff
   157f8:	bl	12778 <memset@plt>
   157fc:	ldr	r0, [sp, #4]
   15800:	ldr	r0, [r0, #32]
   15804:	ldr	r0, [r0, #8]
   15808:	ldr	r1, [sp, #4]
   1580c:	str	r0, [r1, #20]
   15810:	ldr	r0, [sp, #4]
   15814:	ldr	r0, [r0, #32]
   15818:	ldr	r0, [r0]
   1581c:	ldr	r1, [sp, #4]
   15820:	str	r0, [r1, #28]
   15824:	ldr	r0, [sp, #4]
   15828:	ldr	r1, [sp, #4]
   1582c:	ldr	r1, [r1, #32]
   15830:	ldr	r1, [r1, #4]
   15834:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   15838:	ldr	r0, [sp, #4]
   1583c:	ldr	r1, [sp, #4]
   15840:	ldrh	r1, [r1, #130]	; 0x82
   15844:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   15848:	ldr	r0, [sp, #4]
   1584c:	ldr	r0, [r0, #32]
   15850:	ldrh	r0, [r0, #12]
   15854:	ldr	r1, [sp, #4]
   15858:	strh	r0, [r1, #130]	; 0x82
   1585c:	ldr	r0, [sp, #4]
   15860:	ldr	r1, [r0, #32]
   15864:	mvn	r2, #35	; 0x23
   15868:	add	r1, r1, r2
   1586c:	str	r1, [r0, #32]
   15870:	ldr	r0, [sp, #4]
   15874:	ldr	r1, [r0, #156]	; 0x9c
   15878:	mvn	r2, #0
   1587c:	add	r1, r1, r2
   15880:	str	r1, [r0, #156]	; 0x9c
   15884:	mov	sp, fp
   15888:	pop	{fp, pc}

0001588c <flatcc_builder_start_struct@@Base>:
   1588c:	push	{fp, lr}
   15890:	mov	fp, sp
   15894:	sub	sp, sp, #16
   15898:	str	r0, [sp, #8]
   1589c:	str	r1, [sp, #4]
   158a0:	strh	r2, [sp, #2]
   158a4:	ldr	r0, [sp, #8]
   158a8:	ldrh	r1, [sp, #2]
   158ac:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   158b0:	cmp	r0, #0
   158b4:	beq	158c4 <flatcc_builder_start_struct@@Base+0x38>
   158b8:	movw	r0, #0
   158bc:	str	r0, [fp, #-4]
   158c0:	b	158f0 <flatcc_builder_start_struct@@Base+0x64>
   158c4:	ldr	r0, [sp, #8]
   158c8:	ldr	r0, [r0, #32]
   158cc:	movw	r1, #2
   158d0:	strh	r1, [r0, #14]
   158d4:	ldr	r0, [sp, #8]
   158d8:	mvn	r1, #3
   158dc:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   158e0:	ldr	r0, [sp, #8]
   158e4:	ldr	r1, [sp, #4]
   158e8:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   158ec:	str	r0, [fp, #-4]
   158f0:	ldr	r0, [fp, #-4]
   158f4:	mov	sp, fp
   158f8:	pop	{fp, pc}
   158fc:	sub	sp, sp, #12
   15900:	str	r0, [sp, #8]
   15904:	str	r1, [sp, #4]
   15908:	ldr	r0, [sp, #8]
   1590c:	add	r0, r0, #52	; 0x34
   15910:	add	r0, r0, #8
   15914:	str	r0, [sp]
   15918:	ldr	r0, [sp, #8]
   1591c:	ldr	r0, [r0, #60]	; 0x3c
   15920:	ldr	r1, [sp, #8]
   15924:	ldr	r1, [r1, #28]
   15928:	add	r0, r0, r1
   1592c:	ldr	r1, [sp, #8]
   15930:	str	r0, [r1, #16]
   15934:	ldr	r0, [sp]
   15938:	ldr	r0, [r0, #4]
   1593c:	ldr	r1, [sp, #8]
   15940:	ldr	r1, [r1, #28]
   15944:	sub	r0, r0, r1
   15948:	ldr	r1, [sp, #8]
   1594c:	str	r0, [r1, #24]
   15950:	ldr	r0, [sp, #8]
   15954:	ldr	r0, [r0, #24]
   15958:	ldr	r1, [sp, #4]
   1595c:	cmp	r0, r1
   15960:	bls	15970 <flatcc_builder_start_struct@@Base+0xe4>
   15964:	ldr	r0, [sp, #4]
   15968:	ldr	r1, [sp, #8]
   1596c:	str	r0, [r1, #24]
   15970:	ldr	r0, [sp, #4]
   15974:	ldr	r1, [sp, #8]
   15978:	ldr	r1, [r1, #32]
   1597c:	str	r0, [r1, #4]
   15980:	add	sp, sp, #12
   15984:	bx	lr
   15988:	push	{fp, lr}
   1598c:	mov	fp, sp
   15990:	sub	sp, sp, #16
   15994:	str	r0, [sp, #8]
   15998:	str	r1, [sp, #4]
   1599c:	ldr	r0, [sp, #8]
   159a0:	ldr	r0, [r0, #20]
   159a4:	str	r0, [sp]
   159a8:	ldr	r0, [sp, #4]
   159ac:	ldr	r1, [sp, #8]
   159b0:	ldr	r2, [r1, #20]
   159b4:	add	r0, r2, r0
   159b8:	str	r0, [r1, #20]
   159bc:	ldr	r1, [sp, #8]
   159c0:	ldr	r1, [r1, #24]
   159c4:	cmp	r0, r1
   159c8:	bcc	159fc <flatcc_builder_start_struct@@Base+0x170>
   159cc:	ldr	r0, [sp, #8]
   159d0:	ldr	r1, [sp, #8]
   159d4:	ldr	r1, [r1, #20]
   159d8:	add	r1, r1, #1
   159dc:	mvn	r2, #3
   159e0:	bl	19ae4 <flatcc_builder_get_emit_context@@Base+0x40>
   159e4:	cmp	r0, #0
   159e8:	beq	159f8 <flatcc_builder_start_struct@@Base+0x16c>
   159ec:	movw	r0, #0
   159f0:	str	r0, [fp, #-4]
   159f4:	b	15a10 <flatcc_builder_start_struct@@Base+0x184>
   159f8:	b	159fc <flatcc_builder_start_struct@@Base+0x170>
   159fc:	ldr	r0, [sp, #8]
   15a00:	ldr	r0, [r0, #16]
   15a04:	ldr	r1, [sp]
   15a08:	add	r0, r0, r1
   15a0c:	str	r0, [fp, #-4]
   15a10:	ldr	r0, [fp, #-4]
   15a14:	mov	sp, fp
   15a18:	pop	{fp, pc}

00015a1c <flatcc_builder_struct_edit@@Base>:
   15a1c:	sub	sp, sp, #4
   15a20:	str	r0, [sp]
   15a24:	ldr	r0, [sp]
   15a28:	ldr	r0, [r0, #16]
   15a2c:	add	sp, sp, #4
   15a30:	bx	lr

00015a34 <flatcc_builder_end_struct@@Base>:
   15a34:	push	{fp, lr}
   15a38:	mov	fp, sp
   15a3c:	sub	sp, sp, #16
   15a40:	str	r0, [sp, #8]
   15a44:	ldr	r0, [sp, #8]
   15a48:	ldr	r0, [r0, #32]
   15a4c:	ldrh	r0, [r0, #14]
   15a50:	cmp	r0, #2
   15a54:	bne	15a5c <flatcc_builder_end_struct@@Base+0x28>
   15a58:	b	15a7c <flatcc_builder_end_struct@@Base+0x48>
   15a5c:	ldr	r0, [pc, #112]	; 15ad4 <flatcc_builder_end_struct@@Base+0xa0>
   15a60:	add	r0, pc, r0
   15a64:	ldr	r1, [pc, #108]	; 15ad8 <flatcc_builder_end_struct@@Base+0xa4>
   15a68:	add	r1, pc, r1
   15a6c:	ldr	r2, [pc, #104]	; 15adc <flatcc_builder_end_struct@@Base+0xa8>
   15a70:	add	r3, pc, r2
   15a74:	movw	r2, #872	; 0x368
   15a78:	bl	127a8 <__assert_fail@plt>
   15a7c:	ldr	r0, [sp, #8]
   15a80:	ldr	r1, [sp, #8]
   15a84:	ldr	r1, [r1, #16]
   15a88:	ldr	r2, [sp, #8]
   15a8c:	ldr	r2, [r2, #20]
   15a90:	ldr	r3, [sp, #8]
   15a94:	ldrh	r3, [r3, #130]	; 0x82
   15a98:	bl	151f0 <flatcc_builder_create_struct@@Base>
   15a9c:	str	r0, [sp, #4]
   15aa0:	movw	r1, #0
   15aa4:	cmp	r1, r0
   15aa8:	bne	15ab8 <flatcc_builder_end_struct@@Base+0x84>
   15aac:	movw	r0, #0
   15ab0:	str	r0, [fp, #-4]
   15ab4:	b	15ac8 <flatcc_builder_end_struct@@Base+0x94>
   15ab8:	ldr	r0, [sp, #8]
   15abc:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   15ac0:	ldr	r0, [sp, #4]
   15ac4:	str	r0, [fp, #-4]
   15ac8:	ldr	r0, [fp, #-4]
   15acc:	mov	sp, fp
   15ad0:	pop	{fp, pc}
   15ad4:	andeq	r8, r0, r5, lsl #1
   15ad8:			; <UNDEFINED> instruction: 0x00007db2
   15adc:	andeq	r8, r0, r1, lsr #1

00015ae0 <flatcc_builder_extend_vector@@Base>:
   15ae0:	push	{fp, lr}
   15ae4:	mov	fp, sp
   15ae8:	sub	sp, sp, #16
   15aec:	str	r0, [sp, #8]
   15af0:	str	r1, [sp, #4]
   15af4:	ldr	r0, [sp, #8]
   15af8:	ldr	r1, [sp, #4]
   15afc:	ldr	r2, [sp, #8]
   15b00:	ldr	r2, [r2, #32]
   15b04:	ldr	r2, [r2, #24]
   15b08:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   15b0c:	cmp	r0, #0
   15b10:	beq	15b20 <flatcc_builder_extend_vector@@Base+0x40>
   15b14:	movw	r0, #0
   15b18:	str	r0, [fp, #-4]
   15b1c:	b	15b40 <flatcc_builder_extend_vector@@Base+0x60>
   15b20:	ldr	r0, [sp, #8]
   15b24:	ldr	r1, [sp, #8]
   15b28:	ldr	r1, [r1, #32]
   15b2c:	ldr	r1, [r1, #16]
   15b30:	ldr	r2, [sp, #4]
   15b34:	mul	r1, r1, r2
   15b38:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   15b3c:	str	r0, [fp, #-4]
   15b40:	ldr	r0, [fp, #-4]
   15b44:	mov	sp, fp
   15b48:	pop	{fp, pc}
   15b4c:	push	{fp, lr}
   15b50:	mov	fp, sp
   15b54:	sub	sp, sp, #24
   15b58:	str	r0, [fp, #-8]
   15b5c:	str	r1, [sp, #12]
   15b60:	str	r2, [sp, #8]
   15b64:	ldr	r0, [fp, #-8]
   15b68:	ldr	r0, [r0, #32]
   15b6c:	ldr	r0, [r0, #20]
   15b70:	str	r0, [sp, #4]
   15b74:	ldr	r0, [sp, #4]
   15b78:	ldr	r1, [sp, #12]
   15b7c:	add	r0, r0, r1
   15b80:	str	r0, [sp]
   15b84:	ldr	r0, [sp, #4]
   15b88:	ldr	r1, [sp]
   15b8c:	cmp	r0, r1
   15b90:	bhi	15ba4 <flatcc_builder_extend_vector@@Base+0xc4>
   15b94:	ldr	r0, [sp]
   15b98:	ldr	r1, [sp, #8]
   15b9c:	cmp	r0, r1
   15ba0:	bls	15bf4 <flatcc_builder_extend_vector@@Base+0x114>
   15ba4:	ldr	r0, [sp, #4]
   15ba8:	ldr	r1, [sp]
   15bac:	cmp	r0, r1
   15bb0:	bhi	15bc8 <flatcc_builder_extend_vector@@Base+0xe8>
   15bb4:	ldr	r0, [sp]
   15bb8:	ldr	r1, [sp, #8]
   15bbc:	cmp	r0, r1
   15bc0:	bhi	15bc8 <flatcc_builder_extend_vector@@Base+0xe8>
   15bc4:	b	15be8 <flatcc_builder_extend_vector@@Base+0x108>
   15bc8:	ldr	r0, [pc, #72]	; 15c18 <flatcc_builder_extend_vector@@Base+0x138>
   15bcc:	add	r0, pc, r0
   15bd0:	ldr	r1, [pc, #68]	; 15c1c <flatcc_builder_extend_vector@@Base+0x13c>
   15bd4:	add	r1, pc, r1
   15bd8:	ldr	r2, [pc, #64]	; 15c20 <flatcc_builder_extend_vector@@Base+0x140>
   15bdc:	add	r3, pc, r2
   15be0:	movw	r2, #892	; 0x37c
   15be4:	bl	127a8 <__assert_fail@plt>
   15be8:	mvn	r0, #0
   15bec:	str	r0, [fp, #-4]
   15bf0:	b	15c0c <flatcc_builder_extend_vector@@Base+0x12c>
   15bf4:	ldr	r0, [sp]
   15bf8:	ldr	r1, [fp, #-8]
   15bfc:	ldr	r1, [r1, #32]
   15c00:	str	r0, [r1, #20]
   15c04:	movw	r0, #0
   15c08:	str	r0, [fp, #-4]
   15c0c:	ldr	r0, [fp, #-4]
   15c10:	mov	sp, fp
   15c14:	pop	{fp, pc}
   15c18:	andeq	r8, r0, r4, lsl sp
   15c1c:	andeq	r7, r0, r6, asr #24
   15c20:	andeq	r8, r0, pc, lsl sp

00015c24 <flatcc_builder_vector_push@@Base>:
   15c24:	push	{fp, lr}
   15c28:	mov	fp, sp
   15c2c:	sub	sp, sp, #16
   15c30:	str	r0, [sp, #8]
   15c34:	str	r1, [sp, #4]
   15c38:	ldr	r0, [sp, #8]
   15c3c:	ldr	r0, [r0, #32]
   15c40:	ldrh	r0, [r0, #14]
   15c44:	cmp	r0, #4
   15c48:	bne	15c50 <flatcc_builder_vector_push@@Base+0x2c>
   15c4c:	b	15c70 <flatcc_builder_vector_push@@Base+0x4c>
   15c50:	ldr	r0, [pc, #196]	; 15d1c <flatcc_builder_vector_push@@Base+0xf8>
   15c54:	add	r0, pc, r0
   15c58:	ldr	r1, [pc, #192]	; 15d20 <flatcc_builder_vector_push@@Base+0xfc>
   15c5c:	add	r1, pc, r1
   15c60:	ldr	r2, [pc, #188]	; 15d24 <flatcc_builder_vector_push@@Base+0x100>
   15c64:	add	r3, pc, r2
   15c68:	movw	r2, #907	; 0x38b
   15c6c:	bl	127a8 <__assert_fail@plt>
   15c70:	ldr	r0, [sp, #8]
   15c74:	ldr	r0, [r0, #32]
   15c78:	ldr	r0, [r0, #20]
   15c7c:	ldr	r1, [sp, #8]
   15c80:	ldr	r1, [r1, #32]
   15c84:	ldr	r1, [r1, #24]
   15c88:	cmp	r0, r1
   15c8c:	bls	15ce0 <flatcc_builder_vector_push@@Base+0xbc>
   15c90:	ldr	r0, [sp, #8]
   15c94:	ldr	r0, [r0, #32]
   15c98:	ldr	r0, [r0, #20]
   15c9c:	ldr	r1, [sp, #8]
   15ca0:	ldr	r1, [r1, #32]
   15ca4:	ldr	r1, [r1, #24]
   15ca8:	cmp	r0, r1
   15cac:	bhi	15cb4 <flatcc_builder_vector_push@@Base+0x90>
   15cb0:	b	15cd4 <flatcc_builder_vector_push@@Base+0xb0>
   15cb4:	ldr	r0, [pc, #108]	; 15d28 <flatcc_builder_vector_push@@Base+0x104>
   15cb8:	add	r0, pc, r0
   15cbc:	ldr	r1, [pc, #104]	; 15d2c <flatcc_builder_vector_push@@Base+0x108>
   15cc0:	add	r1, pc, r1
   15cc4:	ldr	r2, [pc, #100]	; 15d30 <flatcc_builder_vector_push@@Base+0x10c>
   15cc8:	add	r3, pc, r2
   15ccc:	movw	r2, #908	; 0x38c
   15cd0:	bl	127a8 <__assert_fail@plt>
   15cd4:	movw	r0, #0
   15cd8:	str	r0, [fp, #-4]
   15cdc:	b	15d10 <flatcc_builder_vector_push@@Base+0xec>
   15ce0:	ldr	r0, [sp, #8]
   15ce4:	ldr	r0, [r0, #32]
   15ce8:	ldr	r1, [r0, #20]
   15cec:	add	r1, r1, #1
   15cf0:	str	r1, [r0, #20]
   15cf4:	ldr	r0, [sp, #8]
   15cf8:	ldr	r1, [sp, #4]
   15cfc:	ldr	r2, [sp, #8]
   15d00:	ldr	r2, [r2, #32]
   15d04:	ldr	r2, [r2, #16]
   15d08:	bl	15d34 <flatcc_builder_vector_push@@Base+0x110>
   15d0c:	str	r0, [fp, #-4]
   15d10:	ldr	r0, [fp, #-4]
   15d14:	mov	sp, fp
   15d18:	pop	{fp, pc}
   15d1c:	andeq	r7, r0, r0, lsl #30
   15d20:			; <UNDEFINED> instruction: 0x00007bbe
   15d24:	andeq	r7, r0, ip, lsl pc
   15d28:	andeq	r7, r0, fp, lsl #30
   15d2c:	andeq	r7, r0, sl, asr fp
   15d30:			; <UNDEFINED> instruction: 0x00007eb8
   15d34:	push	{fp, lr}
   15d38:	mov	fp, sp
   15d3c:	sub	sp, sp, #24
   15d40:	str	r0, [fp, #-8]
   15d44:	str	r1, [sp, #12]
   15d48:	str	r2, [sp, #8]
   15d4c:	ldr	r0, [fp, #-8]
   15d50:	ldr	r1, [sp, #8]
   15d54:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   15d58:	str	r0, [sp, #4]
   15d5c:	movw	r1, #0
   15d60:	cmp	r0, r1
   15d64:	bne	15d74 <flatcc_builder_vector_push@@Base+0x150>
   15d68:	movw	r0, #0
   15d6c:	str	r0, [fp, #-4]
   15d70:	b	15d8c <flatcc_builder_vector_push@@Base+0x168>
   15d74:	ldr	r0, [sp, #4]
   15d78:	ldr	r1, [sp, #12]
   15d7c:	ldr	r2, [sp, #8]
   15d80:	bl	12718 <memcpy@plt>
   15d84:	ldr	r0, [sp, #4]
   15d88:	str	r0, [fp, #-4]
   15d8c:	ldr	r0, [fp, #-4]
   15d90:	mov	sp, fp
   15d94:	pop	{fp, pc}

00015d98 <flatcc_builder_append_vector@@Base>:
   15d98:	push	{fp, lr}
   15d9c:	mov	fp, sp
   15da0:	sub	sp, sp, #16
   15da4:	str	r0, [sp, #8]
   15da8:	str	r1, [sp, #4]
   15dac:	str	r2, [sp]
   15db0:	ldr	r0, [sp, #8]
   15db4:	ldr	r0, [r0, #32]
   15db8:	ldrh	r0, [r0, #14]
   15dbc:	cmp	r0, #4
   15dc0:	bne	15dc8 <flatcc_builder_append_vector@@Base+0x30>
   15dc4:	b	15de8 <flatcc_builder_append_vector@@Base+0x50>
   15dc8:	ldr	r0, [pc, #116]	; 15e44 <flatcc_builder_append_vector@@Base+0xac>
   15dcc:	add	r0, pc, r0
   15dd0:	ldr	r1, [pc, #112]	; 15e48 <flatcc_builder_append_vector@@Base+0xb0>
   15dd4:	add	r1, pc, r1
   15dd8:	ldr	r2, [pc, #108]	; 15e4c <flatcc_builder_append_vector@@Base+0xb4>
   15ddc:	add	r3, pc, r2
   15de0:	movw	r2, #915	; 0x393
   15de4:	bl	127a8 <__assert_fail@plt>
   15de8:	ldr	r0, [sp, #8]
   15dec:	ldr	r1, [sp]
   15df0:	ldr	r2, [sp, #8]
   15df4:	ldr	r2, [r2, #32]
   15df8:	ldr	r2, [r2, #24]
   15dfc:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   15e00:	cmp	r0, #0
   15e04:	beq	15e14 <flatcc_builder_append_vector@@Base+0x7c>
   15e08:	movw	r0, #0
   15e0c:	str	r0, [fp, #-4]
   15e10:	b	15e38 <flatcc_builder_append_vector@@Base+0xa0>
   15e14:	ldr	r0, [sp, #8]
   15e18:	ldr	r1, [sp, #4]
   15e1c:	ldr	r2, [sp, #8]
   15e20:	ldr	r2, [r2, #32]
   15e24:	ldr	r2, [r2, #16]
   15e28:	ldr	r3, [sp]
   15e2c:	mul	r2, r2, r3
   15e30:	bl	15d34 <flatcc_builder_vector_push@@Base+0x110>
   15e34:	str	r0, [fp, #-4]
   15e38:	ldr	r0, [fp, #-4]
   15e3c:	mov	sp, fp
   15e40:	pop	{fp, pc}
   15e44:	andeq	r7, r0, r8, lsl #27
   15e48:	andeq	r7, r0, r6, asr #20
   15e4c:	andeq	r7, r0, r4, lsr #28

00015e50 <flatcc_builder_extend_offset_vector@@Base>:
   15e50:	push	{fp, lr}
   15e54:	mov	fp, sp
   15e58:	sub	sp, sp, #16
   15e5c:	ldr	r2, [pc, #68]	; 15ea8 <flatcc_builder_extend_offset_vector@@Base+0x58>
   15e60:	str	r0, [sp, #8]
   15e64:	str	r1, [sp, #4]
   15e68:	ldr	r0, [sp, #8]
   15e6c:	ldr	r1, [sp, #4]
   15e70:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   15e74:	cmp	r0, #0
   15e78:	beq	15e88 <flatcc_builder_extend_offset_vector@@Base+0x38>
   15e7c:	movw	r0, #0
   15e80:	str	r0, [fp, #-4]
   15e84:	b	15e9c <flatcc_builder_extend_offset_vector@@Base+0x4c>
   15e88:	ldr	r0, [sp, #8]
   15e8c:	ldr	r1, [sp, #4]
   15e90:	lsl	r1, r1, #2
   15e94:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   15e98:	str	r0, [fp, #-4]
   15e9c:	ldr	r0, [fp, #-4]
   15ea0:	mov	sp, fp
   15ea4:	pop	{fp, pc}
   15ea8:	svccc	0x00ffffff

00015eac <flatcc_builder_offset_vector_push@@Base>:
   15eac:	push	{fp, lr}
   15eb0:	mov	fp, sp
   15eb4:	sub	sp, sp, #16
   15eb8:	str	r0, [sp, #8]
   15ebc:	str	r1, [sp, #4]
   15ec0:	ldr	r0, [sp, #8]
   15ec4:	ldr	r0, [r0, #32]
   15ec8:	ldrh	r0, [r0, #14]
   15ecc:	cmp	r0, #5
   15ed0:	bne	15ed8 <flatcc_builder_offset_vector_push@@Base+0x2c>
   15ed4:	b	15ef8 <flatcc_builder_offset_vector_push@@Base+0x4c>
   15ed8:	ldr	r0, [pc, #152]	; 15f78 <flatcc_builder_offset_vector_push@@Base+0xcc>
   15edc:	add	r0, pc, r0
   15ee0:	ldr	r1, [pc, #148]	; 15f7c <flatcc_builder_offset_vector_push@@Base+0xd0>
   15ee4:	add	r1, pc, r1
   15ee8:	ldr	r2, [pc, #144]	; 15f80 <flatcc_builder_offset_vector_push@@Base+0xd4>
   15eec:	add	r3, pc, r2
   15ef0:	movw	r2, #934	; 0x3a6
   15ef4:	bl	127a8 <__assert_fail@plt>
   15ef8:	ldr	r0, [pc, #132]	; 15f84 <flatcc_builder_offset_vector_push@@Base+0xd8>
   15efc:	ldr	r1, [sp, #8]
   15f00:	ldr	r1, [r1, #32]
   15f04:	ldr	r1, [r1, #20]
   15f08:	cmp	r1, r0
   15f0c:	bne	15f1c <flatcc_builder_offset_vector_push@@Base+0x70>
   15f10:	movw	r0, #0
   15f14:	str	r0, [fp, #-4]
   15f18:	b	15f6c <flatcc_builder_offset_vector_push@@Base+0xc0>
   15f1c:	ldr	r0, [sp, #8]
   15f20:	ldr	r0, [r0, #32]
   15f24:	ldr	r1, [r0, #20]
   15f28:	add	r1, r1, #1
   15f2c:	str	r1, [r0, #20]
   15f30:	ldr	r0, [sp, #8]
   15f34:	movw	r1, #4
   15f38:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   15f3c:	str	r0, [sp]
   15f40:	movw	r1, #0
   15f44:	cmp	r1, r0
   15f48:	bne	15f58 <flatcc_builder_offset_vector_push@@Base+0xac>
   15f4c:	movw	r0, #0
   15f50:	str	r0, [fp, #-4]
   15f54:	b	15f6c <flatcc_builder_offset_vector_push@@Base+0xc0>
   15f58:	ldr	r0, [sp, #4]
   15f5c:	ldr	r1, [sp]
   15f60:	str	r0, [r1]
   15f64:	ldr	r0, [sp]
   15f68:	str	r0, [fp, #-4]
   15f6c:	ldr	r0, [fp, #-4]
   15f70:	mov	sp, fp
   15f74:	pop	{fp, pc}
   15f78:	andeq	r7, r0, r1, ror sp
   15f7c:	andeq	r7, r0, r6, lsr r9
   15f80:	muleq	r0, r4, sp
   15f84:	svccc	0x00ffffff

00015f88 <flatcc_builder_append_offset_vector@@Base>:
   15f88:	push	{fp, lr}
   15f8c:	mov	fp, sp
   15f90:	sub	sp, sp, #16
   15f94:	str	r0, [sp, #8]
   15f98:	str	r1, [sp, #4]
   15f9c:	str	r2, [sp]
   15fa0:	ldr	r0, [sp, #8]
   15fa4:	ldr	r0, [r0, #32]
   15fa8:	ldrh	r0, [r0, #14]
   15fac:	cmp	r0, #5
   15fb0:	bne	15fb8 <flatcc_builder_append_offset_vector@@Base+0x30>
   15fb4:	b	15fd8 <flatcc_builder_append_offset_vector@@Base+0x50>
   15fb8:	ldr	r0, [pc, #96]	; 16020 <flatcc_builder_append_offset_vector@@Base+0x98>
   15fbc:	add	r0, pc, r0
   15fc0:	ldr	r1, [pc, #92]	; 16024 <flatcc_builder_append_offset_vector@@Base+0x9c>
   15fc4:	add	r1, pc, r1
   15fc8:	ldr	r2, [pc, #88]	; 16028 <flatcc_builder_append_offset_vector@@Base+0xa0>
   15fcc:	add	r3, pc, r2
   15fd0:	movw	r2, #948	; 0x3b4
   15fd4:	bl	127a8 <__assert_fail@plt>
   15fd8:	ldr	r2, [pc, #76]	; 1602c <flatcc_builder_append_offset_vector@@Base+0xa4>
   15fdc:	ldr	r0, [sp, #8]
   15fe0:	ldr	r1, [sp]
   15fe4:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   15fe8:	cmp	r0, #0
   15fec:	beq	15ffc <flatcc_builder_append_offset_vector@@Base+0x74>
   15ff0:	movw	r0, #0
   15ff4:	str	r0, [fp, #-4]
   15ff8:	b	16014 <flatcc_builder_append_offset_vector@@Base+0x8c>
   15ffc:	ldr	r0, [sp, #8]
   16000:	ldr	r1, [sp, #4]
   16004:	ldr	r2, [sp]
   16008:	lsl	r2, r2, #2
   1600c:	bl	15d34 <flatcc_builder_vector_push@@Base+0x110>
   16010:	str	r0, [fp, #-4]
   16014:	ldr	r0, [fp, #-4]
   16018:	mov	sp, fp
   1601c:	pop	{fp, pc}
   16020:	muleq	r0, r1, ip
   16024:	andeq	r7, r0, r6, asr r8
   16028:	andeq	r7, r0, r6, lsl sp
   1602c:	svccc	0x00ffffff

00016030 <flatcc_builder_extend_string@@Base>:
   16030:	push	{fp, lr}
   16034:	mov	fp, sp
   16038:	sub	sp, sp, #16
   1603c:	str	r0, [sp, #8]
   16040:	str	r1, [sp, #4]
   16044:	ldr	r0, [sp, #8]
   16048:	ldr	r0, [r0, #32]
   1604c:	ldrh	r0, [r0, #14]
   16050:	cmp	r0, #6
   16054:	bne	1605c <flatcc_builder_extend_string@@Base+0x2c>
   16058:	b	1607c <flatcc_builder_extend_string@@Base+0x4c>
   1605c:	ldr	r0, [pc, #88]	; 160bc <flatcc_builder_extend_string@@Base+0x8c>
   16060:	add	r0, pc, r0
   16064:	ldr	r1, [pc, #84]	; 160c0 <flatcc_builder_extend_string@@Base+0x90>
   16068:	add	r1, pc, r1
   1606c:	ldr	r2, [pc, #80]	; 160c4 <flatcc_builder_extend_string@@Base+0x94>
   16070:	add	r3, pc, r2
   16074:	movw	r2, #957	; 0x3bd
   16078:	bl	127a8 <__assert_fail@plt>
   1607c:	ldr	r0, [sp, #8]
   16080:	ldr	r1, [sp, #4]
   16084:	mvn	r2, #0
   16088:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   1608c:	cmp	r0, #0
   16090:	beq	160a0 <flatcc_builder_extend_string@@Base+0x70>
   16094:	movw	r0, #0
   16098:	str	r0, [fp, #-4]
   1609c:	b	160b0 <flatcc_builder_extend_string@@Base+0x80>
   160a0:	ldr	r0, [sp, #8]
   160a4:	ldr	r1, [sp, #4]
   160a8:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   160ac:	str	r0, [fp, #-4]
   160b0:	ldr	r0, [fp, #-4]
   160b4:	mov	sp, fp
   160b8:	pop	{fp, pc}
   160bc:	strdeq	r7, [r0], -r6
   160c0:			; <UNDEFINED> instruction: 0x000077b2
   160c4:	andeq	r7, r0, r2, lsl sp

000160c8 <flatcc_builder_append_string@@Base>:
   160c8:	push	{fp, lr}
   160cc:	mov	fp, sp
   160d0:	sub	sp, sp, #16
   160d4:	str	r0, [sp, #8]
   160d8:	str	r1, [sp, #4]
   160dc:	str	r2, [sp]
   160e0:	ldr	r0, [sp, #8]
   160e4:	ldr	r0, [r0, #32]
   160e8:	ldrh	r0, [r0, #14]
   160ec:	cmp	r0, #6
   160f0:	bne	160f8 <flatcc_builder_append_string@@Base+0x30>
   160f4:	b	16118 <flatcc_builder_append_string@@Base+0x50>
   160f8:	ldr	r0, [pc, #92]	; 1615c <flatcc_builder_append_string@@Base+0x94>
   160fc:	add	r0, pc, r0
   16100:	ldr	r1, [pc, #88]	; 16160 <flatcc_builder_append_string@@Base+0x98>
   16104:	add	r1, pc, r1
   16108:	ldr	r2, [pc, #84]	; 16164 <flatcc_builder_append_string@@Base+0x9c>
   1610c:	add	r3, pc, r2
   16110:	movw	r2, #966	; 0x3c6
   16114:	bl	127a8 <__assert_fail@plt>
   16118:	ldr	r0, [sp, #8]
   1611c:	ldr	r1, [sp]
   16120:	mvn	r2, #0
   16124:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   16128:	cmp	r0, #0
   1612c:	beq	1613c <flatcc_builder_append_string@@Base+0x74>
   16130:	movw	r0, #0
   16134:	str	r0, [fp, #-4]
   16138:	b	16150 <flatcc_builder_append_string@@Base+0x88>
   1613c:	ldr	r0, [sp, #8]
   16140:	ldr	r1, [sp, #4]
   16144:	ldr	r2, [sp]
   16148:	bl	15d34 <flatcc_builder_vector_push@@Base+0x110>
   1614c:	str	r0, [fp, #-4]
   16150:	ldr	r0, [fp, #-4]
   16154:	mov	sp, fp
   16158:	pop	{fp, pc}
   1615c:	andeq	r7, r0, sl, asr ip
   16160:	andeq	r7, r0, r6, lsl r7
   16164:			; <UNDEFINED> instruction: 0x00007cb5

00016168 <flatcc_builder_append_string_str@@Base>:
   16168:	push	{fp, lr}
   1616c:	mov	fp, sp
   16170:	sub	sp, sp, #24
   16174:	str	r0, [fp, #-4]
   16178:	str	r1, [fp, #-8]
   1617c:	ldr	r0, [fp, #-4]
   16180:	ldr	r1, [fp, #-8]
   16184:	ldr	r2, [fp, #-8]
   16188:	str	r0, [sp, #12]
   1618c:	mov	r0, r2
   16190:	str	r1, [sp, #8]
   16194:	bl	12760 <strlen@plt>
   16198:	ldr	r1, [sp, #12]
   1619c:	str	r0, [sp, #4]
   161a0:	mov	r0, r1
   161a4:	ldr	r1, [sp, #8]
   161a8:	ldr	r2, [sp, #4]
   161ac:	bl	160c8 <flatcc_builder_append_string@@Base>
   161b0:	mov	sp, fp
   161b4:	pop	{fp, pc}

000161b8 <flatcc_builder_append_string_strn@@Base>:
   161b8:	push	{fp, lr}
   161bc:	mov	fp, sp
   161c0:	sub	sp, sp, #24
   161c4:	str	r0, [fp, #-4]
   161c8:	str	r1, [fp, #-8]
   161cc:	str	r2, [sp, #12]
   161d0:	ldr	r0, [fp, #-4]
   161d4:	ldr	r1, [fp, #-8]
   161d8:	ldr	r2, [fp, #-8]
   161dc:	ldr	r3, [sp, #12]
   161e0:	str	r0, [sp, #8]
   161e4:	mov	r0, r2
   161e8:	str	r1, [sp, #4]
   161ec:	mov	r1, r3
   161f0:	bl	16214 <flatcc_builder_append_string_strn@@Base+0x5c>
   161f4:	ldr	r1, [sp, #8]
   161f8:	str	r0, [sp]
   161fc:	mov	r0, r1
   16200:	ldr	r1, [sp, #4]
   16204:	ldr	r2, [sp]
   16208:	bl	160c8 <flatcc_builder_append_string@@Base>
   1620c:	mov	sp, fp
   16210:	pop	{fp, pc}
   16214:	push	{fp, lr}
   16218:	mov	fp, sp
   1621c:	sub	sp, sp, #16
   16220:	str	r0, [fp, #-4]
   16224:	str	r1, [sp, #8]
   16228:	ldr	r0, [fp, #-4]
   1622c:	ldr	r2, [sp, #8]
   16230:	mov	r1, #0
   16234:	bl	12790 <memchr@plt>
   16238:	str	r0, [sp, #4]
   1623c:	ldr	r0, [sp, #4]
   16240:	movw	r1, #0
   16244:	cmp	r0, r1
   16248:	beq	16260 <flatcc_builder_append_string_strn@@Base+0xa8>
   1624c:	ldr	r0, [sp, #4]
   16250:	ldr	r1, [fp, #-4]
   16254:	sub	r0, r0, r1
   16258:	str	r0, [sp]
   1625c:	b	16268 <flatcc_builder_append_string_strn@@Base+0xb0>
   16260:	ldr	r0, [sp, #8]
   16264:	str	r0, [sp]
   16268:	ldr	r0, [sp]
   1626c:	mov	sp, fp
   16270:	pop	{fp, pc}

00016274 <flatcc_builder_truncate_vector@@Base>:
   16274:	push	{fp, lr}
   16278:	mov	fp, sp
   1627c:	sub	sp, sp, #16
   16280:	str	r0, [sp, #8]
   16284:	str	r1, [sp, #4]
   16288:	ldr	r0, [sp, #8]
   1628c:	ldr	r0, [r0, #32]
   16290:	ldrh	r0, [r0, #14]
   16294:	cmp	r0, #4
   16298:	bne	162a0 <flatcc_builder_truncate_vector@@Base+0x2c>
   1629c:	b	162c0 <flatcc_builder_truncate_vector@@Base+0x4c>
   162a0:	ldr	r0, [pc, #192]	; 16368 <flatcc_builder_truncate_vector@@Base+0xf4>
   162a4:	add	r0, pc, r0
   162a8:	ldr	r1, [pc, #188]	; 1636c <flatcc_builder_truncate_vector@@Base+0xf8>
   162ac:	add	r1, pc, r1
   162b0:	ldr	r2, [pc, #184]	; 16370 <flatcc_builder_truncate_vector@@Base+0xfc>
   162b4:	add	r3, pc, r2
   162b8:	movw	r2, #985	; 0x3d9
   162bc:	bl	127a8 <__assert_fail@plt>
   162c0:	ldr	r0, [sp, #8]
   162c4:	ldr	r0, [r0, #32]
   162c8:	ldr	r0, [r0, #20]
   162cc:	ldr	r1, [sp, #4]
   162d0:	cmp	r0, r1
   162d4:	bcs	16320 <flatcc_builder_truncate_vector@@Base+0xac>
   162d8:	ldr	r0, [sp, #8]
   162dc:	ldr	r0, [r0, #32]
   162e0:	ldr	r0, [r0, #20]
   162e4:	ldr	r1, [sp, #4]
   162e8:	cmp	r0, r1
   162ec:	bcc	162f4 <flatcc_builder_truncate_vector@@Base+0x80>
   162f0:	b	16314 <flatcc_builder_truncate_vector@@Base+0xa0>
   162f4:	ldr	r0, [pc, #120]	; 16374 <flatcc_builder_truncate_vector@@Base+0x100>
   162f8:	add	r0, pc, r0
   162fc:	ldr	r1, [pc, #116]	; 16378 <flatcc_builder_truncate_vector@@Base+0x104>
   16300:	add	r1, pc, r1
   16304:	ldr	r2, [pc, #112]	; 1637c <flatcc_builder_truncate_vector@@Base+0x108>
   16308:	add	r3, pc, r2
   1630c:	movw	r2, #986	; 0x3da
   16310:	bl	127a8 <__assert_fail@plt>
   16314:	mvn	r0, #0
   16318:	str	r0, [fp, #-4]
   1631c:	b	1635c <flatcc_builder_truncate_vector@@Base+0xe8>
   16320:	ldr	r0, [sp, #4]
   16324:	ldr	r1, [sp, #8]
   16328:	ldr	r1, [r1, #32]
   1632c:	ldr	r2, [r1, #20]
   16330:	sub	r0, r2, r0
   16334:	str	r0, [r1, #20]
   16338:	ldr	r0, [sp, #8]
   1633c:	ldr	r1, [sp, #8]
   16340:	ldr	r1, [r1, #32]
   16344:	ldr	r1, [r1, #16]
   16348:	ldr	r2, [sp, #4]
   1634c:	mul	r1, r1, r2
   16350:	bl	16380 <flatcc_builder_truncate_vector@@Base+0x10c>
   16354:	movw	r0, #0
   16358:	str	r0, [fp, #-4]
   1635c:	ldr	r0, [fp, #-4]
   16360:	mov	sp, fp
   16364:	pop	{fp, pc}
   16368:			; <UNDEFINED> instruction: 0x000078b0
   1636c:	andeq	r7, r0, lr, ror #10
   16370:	andeq	r7, r0, sl, asr fp
   16374:	andeq	r7, r0, r5, asr fp
   16378:	andeq	r7, r0, sl, lsl r5
   1637c:	andeq	r7, r0, r6, lsl #22
   16380:	push	{fp, lr}
   16384:	mov	fp, sp
   16388:	sub	sp, sp, #8
   1638c:	str	r0, [sp, #4]
   16390:	str	r1, [sp]
   16394:	ldr	r0, [sp]
   16398:	ldr	r1, [sp, #4]
   1639c:	ldr	r2, [r1, #20]
   163a0:	sub	r0, r2, r0
   163a4:	str	r0, [r1, #20]
   163a8:	ldr	r0, [sp, #4]
   163ac:	ldr	r0, [r0, #16]
   163b0:	ldr	r1, [sp, #4]
   163b4:	ldr	r1, [r1, #20]
   163b8:	add	r0, r0, r1
   163bc:	ldr	r2, [sp]
   163c0:	movw	r1, #0
   163c4:	and	r1, r1, #255	; 0xff
   163c8:	bl	12778 <memset@plt>
   163cc:	mov	sp, fp
   163d0:	pop	{fp, pc}

000163d4 <flatcc_builder_truncate_offset_vector@@Base>:
   163d4:	push	{fp, lr}
   163d8:	mov	fp, sp
   163dc:	sub	sp, sp, #16
   163e0:	str	r0, [sp, #8]
   163e4:	str	r1, [sp, #4]
   163e8:	ldr	r0, [sp, #8]
   163ec:	ldr	r0, [r0, #32]
   163f0:	ldrh	r0, [r0, #14]
   163f4:	cmp	r0, #5
   163f8:	bne	16400 <flatcc_builder_truncate_offset_vector@@Base+0x2c>
   163fc:	b	16420 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   16400:	ldr	r0, [pc, #192]	; 164c8 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   16404:	add	r0, pc, r0
   16408:	ldr	r1, [pc, #188]	; 164cc <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   1640c:	add	r1, pc, r1
   16410:	ldr	r2, [pc, #184]	; 164d0 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   16414:	add	r3, pc, r2
   16418:	movw	r2, #994	; 0x3e2
   1641c:	bl	127a8 <__assert_fail@plt>
   16420:	ldr	r0, [sp, #8]
   16424:	ldr	r0, [r0, #32]
   16428:	ldr	r0, [r0, #20]
   1642c:	ldr	r1, [sp, #4]
   16430:	cmp	r0, r1
   16434:	bcs	16480 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   16438:	ldr	r0, [sp, #8]
   1643c:	ldr	r0, [r0, #32]
   16440:	ldr	r0, [r0, #20]
   16444:	ldr	r1, [sp, #4]
   16448:	cmp	r0, r1
   1644c:	bcc	16454 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   16450:	b	16474 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   16454:	ldr	r0, [pc, #120]	; 164d4 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   16458:	add	r0, pc, r0
   1645c:	ldr	r1, [pc, #116]	; 164d8 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   16460:	add	r1, pc, r1
   16464:	ldr	r2, [pc, #112]	; 164dc <flatcc_builder_truncate_offset_vector@@Base+0x108>
   16468:	add	r3, pc, r2
   1646c:	movw	r2, #995	; 0x3e3
   16470:	bl	127a8 <__assert_fail@plt>
   16474:	mvn	r0, #0
   16478:	str	r0, [fp, #-4]
   1647c:	b	164bc <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   16480:	ldr	r0, [sp, #4]
   16484:	ldr	r1, [sp, #8]
   16488:	ldr	r1, [r1, #32]
   1648c:	ldr	r2, [r1, #20]
   16490:	sub	r0, r2, r0
   16494:	str	r0, [r1, #20]
   16498:	ldr	r0, [sp, #8]
   1649c:	ldr	r1, [sp, #8]
   164a0:	ldr	r1, [r1, #32]
   164a4:	ldr	r1, [r1, #16]
   164a8:	ldr	r2, [sp, #4]
   164ac:	mul	r1, r1, r2
   164b0:	bl	16380 <flatcc_builder_truncate_vector@@Base+0x10c>
   164b4:	movw	r0, #0
   164b8:	str	r0, [fp, #-4]
   164bc:	ldr	r0, [fp, #-4]
   164c0:	mov	sp, fp
   164c4:	pop	{fp, pc}
   164c8:	andeq	r7, r0, r9, asr #16
   164cc:	andeq	r7, r0, lr, lsl #8
   164d0:	andeq	r7, r0, sp, asr sl
   164d4:	andeq	r7, r0, pc, asr sl
   164d8:			; <UNDEFINED> instruction: 0x000073ba
   164dc:	andeq	r7, r0, r9, lsl #20

000164e0 <flatcc_builder_truncate_string@@Base>:
   164e0:	push	{fp, lr}
   164e4:	mov	fp, sp
   164e8:	sub	sp, sp, #16
   164ec:	str	r0, [sp, #8]
   164f0:	str	r1, [sp, #4]
   164f4:	ldr	r0, [sp, #8]
   164f8:	ldr	r0, [r0, #32]
   164fc:	ldrh	r0, [r0, #14]
   16500:	cmp	r0, #6
   16504:	bne	1650c <flatcc_builder_truncate_string@@Base+0x2c>
   16508:	b	1652c <flatcc_builder_truncate_string@@Base+0x4c>
   1650c:	ldr	r0, [pc, #176]	; 165c4 <flatcc_builder_truncate_string@@Base+0xe4>
   16510:	add	r0, pc, r0
   16514:	ldr	r1, [pc, #172]	; 165c8 <flatcc_builder_truncate_string@@Base+0xe8>
   16518:	add	r1, pc, r1
   1651c:	ldr	r2, [pc, #168]	; 165cc <flatcc_builder_truncate_string@@Base+0xec>
   16520:	add	r3, pc, r2
   16524:	movw	r2, #1003	; 0x3eb
   16528:	bl	127a8 <__assert_fail@plt>
   1652c:	ldr	r0, [sp, #8]
   16530:	ldr	r0, [r0, #32]
   16534:	ldr	r0, [r0, #20]
   16538:	ldr	r1, [sp, #4]
   1653c:	cmp	r0, r1
   16540:	bcs	1658c <flatcc_builder_truncate_string@@Base+0xac>
   16544:	ldr	r0, [sp, #8]
   16548:	ldr	r0, [r0, #32]
   1654c:	ldr	r0, [r0, #20]
   16550:	ldr	r1, [sp, #4]
   16554:	cmp	r0, r1
   16558:	bcc	16560 <flatcc_builder_truncate_string@@Base+0x80>
   1655c:	b	16580 <flatcc_builder_truncate_string@@Base+0xa0>
   16560:	ldr	r0, [pc, #104]	; 165d0 <flatcc_builder_truncate_string@@Base+0xf0>
   16564:	add	r0, pc, r0
   16568:	ldr	r1, [pc, #100]	; 165d4 <flatcc_builder_truncate_string@@Base+0xf4>
   1656c:	add	r1, pc, r1
   16570:	ldr	r2, [pc, #96]	; 165d8 <flatcc_builder_truncate_string@@Base+0xf8>
   16574:	add	r3, pc, r2
   16578:	movw	r2, #1004	; 0x3ec
   1657c:	bl	127a8 <__assert_fail@plt>
   16580:	mvn	r0, #0
   16584:	str	r0, [fp, #-4]
   16588:	b	165b8 <flatcc_builder_truncate_string@@Base+0xd8>
   1658c:	ldr	r0, [sp, #4]
   16590:	ldr	r1, [sp, #8]
   16594:	ldr	r1, [r1, #32]
   16598:	ldr	r2, [r1, #20]
   1659c:	sub	r0, r2, r0
   165a0:	str	r0, [r1, #20]
   165a4:	ldr	r0, [sp, #8]
   165a8:	ldr	r1, [sp, #4]
   165ac:	bl	16380 <flatcc_builder_truncate_vector@@Base+0x10c>
   165b0:	movw	r0, #0
   165b4:	str	r0, [fp, #-4]
   165b8:	ldr	r0, [fp, #-4]
   165bc:	mov	sp, fp
   165c0:	pop	{fp, pc}
   165c4:	andeq	r7, r0, r6, asr #16
   165c8:	andeq	r7, r0, r2, lsl #6
   165cc:	ldrdeq	r7, [r0], -r2
   165d0:	andeq	r7, r0, sp, asr #19
   165d4:	andeq	r7, r0, lr, lsr #5
   165d8:	andeq	r7, r0, lr, ror r9

000165dc <flatcc_builder_start_vector@@Base>:
   165dc:	push	{fp, lr}
   165e0:	mov	fp, sp
   165e4:	sub	sp, sp, #24
   165e8:	str	r0, [fp, #-8]
   165ec:	str	r1, [sp, #12]
   165f0:	strh	r2, [sp, #10]
   165f4:	str	r3, [sp, #4]
   165f8:	add	r0, sp, #10
   165fc:	movw	r1, #4
   16600:	uxth	r1, r1
   16604:	bl	16688 <flatcc_builder_start_vector@@Base+0xac>
   16608:	ldr	r0, [fp, #-8]
   1660c:	ldrh	r1, [sp, #10]
   16610:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   16614:	cmp	r0, #0
   16618:	beq	16628 <flatcc_builder_start_vector@@Base+0x4c>
   1661c:	mvn	r0, #0
   16620:	str	r0, [fp, #-4]
   16624:	b	1667c <flatcc_builder_start_vector@@Base+0xa0>
   16628:	ldr	r0, [sp, #12]
   1662c:	ldr	r1, [fp, #-8]
   16630:	ldr	r1, [r1, #32]
   16634:	str	r0, [r1, #16]
   16638:	ldr	r0, [fp, #-8]
   1663c:	ldr	r0, [r0, #32]
   16640:	movw	r1, #0
   16644:	str	r1, [r0, #20]
   16648:	ldr	r0, [sp, #4]
   1664c:	ldr	r1, [fp, #-8]
   16650:	ldr	r1, [r1, #32]
   16654:	str	r0, [r1, #24]
   16658:	ldr	r0, [fp, #-8]
   1665c:	ldr	r0, [r0, #32]
   16660:	movw	r1, #4
   16664:	strh	r1, [r0, #14]
   16668:	ldr	r0, [fp, #-8]
   1666c:	mvn	r1, #3
   16670:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   16674:	movw	r0, #0
   16678:	str	r0, [fp, #-4]
   1667c:	ldr	r0, [fp, #-4]
   16680:	mov	sp, fp
   16684:	pop	{fp, pc}
   16688:	sub	sp, sp, #8
   1668c:	str	r0, [sp, #4]
   16690:	strh	r1, [sp, #2]
   16694:	ldr	r0, [sp, #4]
   16698:	ldrh	r0, [r0]
   1669c:	ldrh	r1, [sp, #2]
   166a0:	cmp	r0, r1
   166a4:	bge	166b4 <flatcc_builder_start_vector@@Base+0xd8>
   166a8:	ldrh	r0, [sp, #2]
   166ac:	ldr	r1, [sp, #4]
   166b0:	strh	r0, [r1]
   166b4:	add	sp, sp, #8
   166b8:	bx	lr

000166bc <flatcc_builder_start_offset_vector@@Base>:
   166bc:	push	{fp, lr}
   166c0:	mov	fp, sp
   166c4:	sub	sp, sp, #8
   166c8:	str	r0, [sp]
   166cc:	ldr	r0, [sp]
   166d0:	movw	r1, #4
   166d4:	uxth	r1, r1
   166d8:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   166dc:	cmp	r0, #0
   166e0:	beq	166f0 <flatcc_builder_start_offset_vector@@Base+0x34>
   166e4:	mvn	r0, #0
   166e8:	str	r0, [sp, #4]
   166ec:	b	16734 <flatcc_builder_start_offset_vector@@Base+0x78>
   166f0:	ldr	r0, [sp]
   166f4:	ldr	r0, [r0, #32]
   166f8:	movw	r1, #4
   166fc:	str	r1, [r0, #16]
   16700:	ldr	r0, [sp]
   16704:	ldr	r0, [r0, #32]
   16708:	movw	r1, #0
   1670c:	str	r1, [r0, #20]
   16710:	ldr	r0, [sp]
   16714:	ldr	r0, [r0, #32]
   16718:	movw	r1, #5
   1671c:	strh	r1, [r0, #14]
   16720:	ldr	r0, [sp]
   16724:	mvn	r1, #3
   16728:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   1672c:	movw	r0, #0
   16730:	str	r0, [sp, #4]
   16734:	ldr	r0, [sp, #4]
   16738:	mov	sp, fp
   1673c:	pop	{fp, pc}

00016740 <flatcc_builder_create_offset_vector@@Base>:
   16740:	push	{fp, lr}
   16744:	mov	fp, sp
   16748:	sub	sp, sp, #24
   1674c:	str	r0, [fp, #-8]
   16750:	str	r1, [sp, #12]
   16754:	str	r2, [sp, #8]
   16758:	ldr	r0, [fp, #-8]
   1675c:	bl	166bc <flatcc_builder_start_offset_vector@@Base>
   16760:	cmp	r0, #0
   16764:	beq	16774 <flatcc_builder_create_offset_vector@@Base+0x34>
   16768:	movw	r0, #0
   1676c:	str	r0, [fp, #-4]
   16770:	b	167bc <flatcc_builder_create_offset_vector@@Base+0x7c>
   16774:	ldr	r0, [fp, #-8]
   16778:	ldr	r1, [sp, #8]
   1677c:	bl	15e50 <flatcc_builder_extend_offset_vector@@Base>
   16780:	str	r0, [sp, #4]
   16784:	movw	r1, #0
   16788:	cmp	r0, r1
   1678c:	bne	1679c <flatcc_builder_create_offset_vector@@Base+0x5c>
   16790:	movw	r0, #0
   16794:	str	r0, [fp, #-4]
   16798:	b	167bc <flatcc_builder_create_offset_vector@@Base+0x7c>
   1679c:	ldr	r0, [sp, #4]
   167a0:	ldr	r1, [sp, #12]
   167a4:	ldr	r2, [sp, #8]
   167a8:	lsl	r2, r2, #2
   167ac:	bl	12718 <memcpy@plt>
   167b0:	ldr	r0, [fp, #-8]
   167b4:	bl	167c8 <flatcc_builder_end_offset_vector@@Base>
   167b8:	str	r0, [fp, #-4]
   167bc:	ldr	r0, [fp, #-4]
   167c0:	mov	sp, fp
   167c4:	pop	{fp, pc}

000167c8 <flatcc_builder_end_offset_vector@@Base>:
   167c8:	push	{fp, lr}
   167cc:	mov	fp, sp
   167d0:	sub	sp, sp, #16
   167d4:	str	r0, [sp, #8]
   167d8:	ldr	r0, [sp, #8]
   167dc:	ldr	r0, [r0, #32]
   167e0:	ldrh	r0, [r0, #14]
   167e4:	cmp	r0, #5
   167e8:	bne	167f0 <flatcc_builder_end_offset_vector@@Base+0x28>
   167ec:	b	16810 <flatcc_builder_end_offset_vector@@Base+0x48>
   167f0:	ldr	r0, [pc, #108]	; 16864 <flatcc_builder_end_offset_vector@@Base+0x9c>
   167f4:	add	r0, pc, r0
   167f8:	ldr	r1, [pc, #104]	; 16868 <flatcc_builder_end_offset_vector@@Base+0xa0>
   167fc:	add	r1, pc, r1
   16800:	ldr	r2, [pc, #100]	; 1686c <flatcc_builder_end_offset_vector@@Base+0xa4>
   16804:	add	r3, pc, r2
   16808:	movw	r2, #1480	; 0x5c8
   1680c:	bl	127a8 <__assert_fail@plt>
   16810:	ldr	r0, [sp, #8]
   16814:	ldr	r1, [sp, #8]
   16818:	ldr	r1, [r1, #16]
   1681c:	ldr	r2, [sp, #8]
   16820:	ldr	r2, [r2, #32]
   16824:	ldr	r2, [r2, #20]
   16828:	bl	17bc4 <flatcc_builder_create_offset_vector_direct@@Base>
   1682c:	str	r0, [sp, #4]
   16830:	movw	r1, #0
   16834:	cmp	r1, r0
   16838:	bne	16848 <flatcc_builder_end_offset_vector@@Base+0x80>
   1683c:	movw	r0, #0
   16840:	str	r0, [fp, #-4]
   16844:	b	16858 <flatcc_builder_end_offset_vector@@Base+0x90>
   16848:	ldr	r0, [sp, #8]
   1684c:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   16850:	ldr	r0, [sp, #4]
   16854:	str	r0, [fp, #-4]
   16858:	ldr	r0, [fp, #-4]
   1685c:	mov	sp, fp
   16860:	pop	{fp, pc}
   16864:	andeq	r7, r0, r9, asr r4
   16868:	andeq	r7, r0, lr, lsl r0
   1686c:	andeq	r7, r0, r8, ror sl

00016870 <flatcc_builder_start_string@@Base>:
   16870:	push	{fp, lr}
   16874:	mov	fp, sp
   16878:	sub	sp, sp, #8
   1687c:	str	r0, [sp]
   16880:	ldr	r0, [sp]
   16884:	movw	r1, #1
   16888:	uxth	r1, r1
   1688c:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   16890:	cmp	r0, #0
   16894:	beq	168a4 <flatcc_builder_start_string@@Base+0x34>
   16898:	mvn	r0, #0
   1689c:	str	r0, [sp, #4]
   168a0:	b	168e8 <flatcc_builder_start_string@@Base+0x78>
   168a4:	ldr	r0, [sp]
   168a8:	ldr	r0, [r0, #32]
   168ac:	movw	r1, #1
   168b0:	str	r1, [r0, #16]
   168b4:	ldr	r0, [sp]
   168b8:	ldr	r0, [r0, #32]
   168bc:	movw	r1, #0
   168c0:	str	r1, [r0, #20]
   168c4:	ldr	r0, [sp]
   168c8:	ldr	r0, [r0, #32]
   168cc:	movw	r1, #6
   168d0:	strh	r1, [r0, #14]
   168d4:	ldr	r0, [sp]
   168d8:	mvn	r1, #3
   168dc:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   168e0:	movw	r0, #0
   168e4:	str	r0, [sp, #4]
   168e8:	ldr	r0, [sp, #4]
   168ec:	mov	sp, fp
   168f0:	pop	{fp, pc}

000168f4 <flatcc_builder_reserve_table@@Base>:
   168f4:	push	{fp, lr}
   168f8:	mov	fp, sp
   168fc:	sub	sp, sp, #8
   16900:	str	r0, [sp, #4]
   16904:	str	r1, [sp]
   16908:	ldr	r0, [sp]
   1690c:	cmp	r0, #0
   16910:	blt	16918 <flatcc_builder_reserve_table@@Base+0x24>
   16914:	b	16938 <flatcc_builder_reserve_table@@Base+0x44>
   16918:	ldr	r0, [pc, #44]	; 1694c <flatcc_builder_reserve_table@@Base+0x58>
   1691c:	add	r0, pc, r0
   16920:	ldr	r1, [pc, #40]	; 16950 <flatcc_builder_reserve_table@@Base+0x5c>
   16924:	add	r1, pc, r1
   16928:	ldr	r2, [pc, #36]	; 16954 <flatcc_builder_reserve_table@@Base+0x60>
   1692c:	add	r3, pc, r2
   16930:	movw	r2, #1065	; 0x429
   16934:	bl	127a8 <__assert_fail@plt>
   16938:	ldr	r0, [sp, #4]
   1693c:	ldr	r1, [sp]
   16940:	bl	16958 <flatcc_builder_reserve_table@@Base+0x64>
   16944:	mov	sp, fp
   16948:	pop	{fp, pc}
   1694c:	andeq	r7, r0, r8, ror r6
   16950:	strdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   16954:	andeq	r7, r0, r7, lsr #12
   16958:	push	{fp, lr}
   1695c:	mov	fp, sp
   16960:	sub	sp, sp, #24
   16964:	str	r0, [fp, #-8]
   16968:	str	r1, [sp, #12]
   1696c:	ldr	r0, [fp, #-8]
   16970:	ldr	r0, [r0, #32]
   16974:	ldr	r1, [r0, #16]
   16978:	ldrh	r0, [r0, #28]
   1697c:	add	r0, r1, r0, lsl #1
   16980:	str	r0, [sp, #8]
   16984:	ldr	r0, [sp, #12]
   16988:	add	r0, r0, #2
   1698c:	lsl	r0, r0, #1
   16990:	str	r0, [sp, #4]
   16994:	ldr	r0, [fp, #-8]
   16998:	ldr	r2, [sp, #8]
   1699c:	ldr	r3, [sp, #4]
   169a0:	movw	r1, #0
   169a4:	movw	ip, #1
   169a8:	str	ip, [sp]
   169ac:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   169b0:	ldr	r1, [fp, #-8]
   169b4:	str	r0, [r1, #4]
   169b8:	movw	r1, #0
   169bc:	cmp	r0, r1
   169c0:	bne	169d0 <flatcc_builder_reserve_table@@Base+0xdc>
   169c4:	mvn	r0, #0
   169c8:	str	r0, [fp, #-4]
   169cc:	b	16a44 <flatcc_builder_reserve_table@@Base+0x150>
   169d0:	ldr	r0, [fp, #-8]
   169d4:	ldr	r1, [r0, #4]
   169d8:	add	r1, r1, #4
   169dc:	str	r1, [r0, #4]
   169e0:	ldr	r0, [fp, #-8]
   169e4:	ldr	r0, [r0, #32]
   169e8:	ldr	r0, [r0, #20]
   169ec:	str	r0, [sp, #8]
   169f0:	ldr	r0, [sp, #12]
   169f4:	lsl	r0, r0, #1
   169f8:	add	r0, r0, #1
   169fc:	str	r0, [sp, #4]
   16a00:	ldr	r0, [fp, #-8]
   16a04:	ldr	r2, [sp, #8]
   16a08:	ldr	r3, [sp, #4]
   16a0c:	movw	r1, #3
   16a10:	movw	ip, #0
   16a14:	str	ip, [sp]
   16a18:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16a1c:	ldr	r1, [fp, #-8]
   16a20:	str	r0, [r1]
   16a24:	movw	r1, #0
   16a28:	cmp	r0, r1
   16a2c:	bne	16a3c <flatcc_builder_reserve_table@@Base+0x148>
   16a30:	mvn	r0, #0
   16a34:	str	r0, [fp, #-4]
   16a38:	b	16a44 <flatcc_builder_reserve_table@@Base+0x150>
   16a3c:	movw	r0, #0
   16a40:	str	r0, [fp, #-4]
   16a44:	ldr	r0, [fp, #-4]
   16a48:	mov	sp, fp
   16a4c:	pop	{fp, pc}

00016a50 <flatcc_builder_start_table@@Base>:
   16a50:	push	{fp, lr}
   16a54:	mov	fp, sp
   16a58:	sub	sp, sp, #16
   16a5c:	str	r0, [sp, #8]
   16a60:	str	r1, [sp, #4]
   16a64:	ldr	r0, [sp, #8]
   16a68:	movw	r1, #4
   16a6c:	uxth	r1, r1
   16a70:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   16a74:	cmp	r0, #0
   16a78:	beq	16a88 <flatcc_builder_start_table@@Base+0x38>
   16a7c:	mvn	r0, #0
   16a80:	str	r0, [fp, #-4]
   16a84:	b	16b58 <flatcc_builder_start_table@@Base+0x108>
   16a88:	ldr	r0, [pc, #212]	; 16b64 <flatcc_builder_start_table@@Base+0x114>
   16a8c:	ldr	r1, [sp, #8]
   16a90:	ldr	r1, [r1, #4]
   16a94:	ldr	r2, [sp, #8]
   16a98:	ldr	r2, [r2, #52]	; 0x34
   16a9c:	sub	r1, r1, r2
   16aa0:	ldr	r2, [sp, #8]
   16aa4:	ldr	r2, [r2, #32]
   16aa8:	str	r1, [r2, #16]
   16aac:	ldr	r1, [sp, #8]
   16ab0:	ldr	r1, [r1]
   16ab4:	ldr	r2, [sp, #8]
   16ab8:	ldr	r2, [r2, #76]	; 0x4c
   16abc:	sub	r1, r1, r2
   16ac0:	ldr	r2, [sp, #8]
   16ac4:	ldr	r2, [r2, #32]
   16ac8:	str	r1, [r2, #20]
   16acc:	ldr	r1, [sp, #8]
   16ad0:	ldr	r1, [r1, #12]
   16ad4:	ldr	r2, [sp, #8]
   16ad8:	ldr	r2, [r2, #32]
   16adc:	str	r1, [r2, #24]
   16ae0:	ldr	r1, [sp, #8]
   16ae4:	ldrh	r1, [r1, #8]
   16ae8:	ldr	r2, [sp, #8]
   16aec:	ldr	r2, [r2, #32]
   16af0:	strh	r1, [r2, #28]
   16af4:	ldr	r1, [sp, #8]
   16af8:	movw	r2, #0
   16afc:	str	r2, [r1, #12]
   16b00:	ldr	r1, [sp, #8]
   16b04:	str	r0, [r1, #12]
   16b08:	ldr	r0, [sp, #8]
   16b0c:	movw	r1, #0
   16b10:	strh	r1, [r0, #8]
   16b14:	ldr	r0, [sp, #8]
   16b18:	ldr	r0, [r0, #32]
   16b1c:	movw	r1, #3
   16b20:	strh	r1, [r0, #14]
   16b24:	ldr	r0, [sp, #8]
   16b28:	ldr	r1, [sp, #4]
   16b2c:	bl	16958 <flatcc_builder_reserve_table@@Base+0x64>
   16b30:	cmp	r0, #0
   16b34:	beq	16b44 <flatcc_builder_start_table@@Base+0xf4>
   16b38:	mvn	r0, #0
   16b3c:	str	r0, [fp, #-4]
   16b40:	b	16b58 <flatcc_builder_start_table@@Base+0x108>
   16b44:	ldr	r0, [sp, #8]
   16b48:	movw	r1, #65532	; 0xfffc
   16b4c:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   16b50:	movw	r0, #0
   16b54:	str	r0, [fp, #-4]
   16b58:	ldr	r0, [fp, #-4]
   16b5c:	mov	sp, fp
   16b60:	pop	{fp, pc}
   16b64:	svccs	0x00693b52

00016b68 <flatcc_builder_create_vtable@@Base>:
   16b68:	push	{fp, lr}
   16b6c:	mov	fp, sp
   16b70:	sub	sp, sp, #104	; 0x68
   16b74:	str	r0, [fp, #-8]
   16b78:	str	r1, [fp, #-12]
   16b7c:	strh	r2, [fp, #-14]
   16b80:	movw	r0, #0
   16b84:	str	r0, [sp, #12]
   16b88:	str	r0, [sp, #16]
   16b8c:	ldrh	r0, [fp, #-14]
   16b90:	cmp	r0, #0
   16b94:	ble	16bd8 <flatcc_builder_create_vtable@@Base+0x70>
   16b98:	ldrh	r0, [fp, #-14]
   16b9c:	ldr	r1, [sp, #12]
   16ba0:	add	r0, r1, r0
   16ba4:	str	r0, [sp, #12]
   16ba8:	ldr	r0, [fp, #-12]
   16bac:	add	r1, sp, #12
   16bb0:	add	r1, r1, #8
   16bb4:	ldr	r2, [sp, #16]
   16bb8:	str	r0, [r1, r2, lsl #3]
   16bbc:	ldrh	r0, [fp, #-14]
   16bc0:	ldr	r2, [sp, #16]
   16bc4:	add	r1, r1, r2, lsl #3
   16bc8:	str	r0, [r1, #4]
   16bcc:	ldr	r0, [sp, #16]
   16bd0:	add	r0, r0, #1
   16bd4:	str	r0, [sp, #16]
   16bd8:	ldr	r0, [fp, #-8]
   16bdc:	ldr	r0, [r0, #152]	; 0x98
   16be0:	cmp	r0, #0
   16be4:	bne	16c24 <flatcc_builder_create_vtable@@Base+0xbc>
   16be8:	ldr	r0, [fp, #-8]
   16bec:	ldr	r0, [r0, #180]	; 0xb4
   16bf0:	cmp	r0, #0
   16bf4:	bne	16c24 <flatcc_builder_create_vtable@@Base+0xbc>
   16bf8:	ldr	r0, [fp, #-8]
   16bfc:	add	r1, sp, #12
   16c00:	bl	16c6c <flatcc_builder_create_vtable@@Base+0x104>
   16c04:	str	r0, [fp, #-20]	; 0xffffffec
   16c08:	movw	r1, #0
   16c0c:	cmp	r1, r0
   16c10:	bne	16c20 <flatcc_builder_create_vtable@@Base+0xb8>
   16c14:	movw	r0, #0
   16c18:	str	r0, [fp, #-4]
   16c1c:	b	16c60 <flatcc_builder_create_vtable@@Base+0xf8>
   16c20:	b	16c58 <flatcc_builder_create_vtable@@Base+0xf0>
   16c24:	ldr	r0, [fp, #-8]
   16c28:	add	r1, sp, #12
   16c2c:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   16c30:	str	r0, [fp, #-20]	; 0xffffffec
   16c34:	movw	r1, #0
   16c38:	cmp	r1, r0
   16c3c:	bne	16c4c <flatcc_builder_create_vtable@@Base+0xe4>
   16c40:	movw	r0, #0
   16c44:	str	r0, [fp, #-4]
   16c48:	b	16c60 <flatcc_builder_create_vtable@@Base+0xf8>
   16c4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16c50:	add	r0, r0, #1
   16c54:	str	r0, [fp, #-20]	; 0xffffffec
   16c58:	ldr	r0, [fp, #-20]	; 0xffffffec
   16c5c:	str	r0, [fp, #-4]
   16c60:	ldr	r0, [fp, #-4]
   16c64:	mov	sp, fp
   16c68:	pop	{fp, pc}
   16c6c:	push	{fp, lr}
   16c70:	mov	fp, sp
   16c74:	sub	sp, sp, #24
   16c78:	str	r0, [fp, #-4]
   16c7c:	str	r1, [fp, #-8]
   16c80:	ldr	r0, [fp, #-4]
   16c84:	ldr	r0, [r0, #140]	; 0x8c
   16c88:	str	r0, [sp, #12]
   16c8c:	ldr	r0, [sp, #12]
   16c90:	ldr	r1, [fp, #-8]
   16c94:	ldr	r1, [r1]
   16c98:	add	r0, r0, r1
   16c9c:	ldr	r1, [fp, #-4]
   16ca0:	str	r0, [r1, #140]	; 0x8c
   16ca4:	ldr	r0, [fp, #-4]
   16ca8:	ldr	r0, [r0, #140]	; 0x8c
   16cac:	ldr	r1, [sp, #12]
   16cb0:	cmp	r0, r1
   16cb4:	bge	16cd8 <flatcc_builder_create_vtable@@Base+0x170>
   16cb8:	ldr	r0, [pc, #168]	; 16d68 <flatcc_builder_create_vtable@@Base+0x200>
   16cbc:	add	r0, pc, r0
   16cc0:	ldr	r1, [pc, #164]	; 16d6c <flatcc_builder_create_vtable@@Base+0x204>
   16cc4:	add	r1, pc, r1
   16cc8:	ldr	r2, [pc, #160]	; 16d70 <flatcc_builder_create_vtable@@Base+0x208>
   16ccc:	add	r3, pc, r2
   16cd0:	movw	r2, #673	; 0x2a1
   16cd4:	bl	127a8 <__assert_fail@plt>
   16cd8:	ldr	r0, [fp, #-4]
   16cdc:	ldr	r0, [r0, #44]	; 0x2c
   16ce0:	ldr	r1, [fp, #-4]
   16ce4:	ldr	r1, [r1, #36]	; 0x24
   16ce8:	ldr	r2, [fp, #-8]
   16cec:	add	r2, r2, #8
   16cf0:	ldr	r3, [fp, #-8]
   16cf4:	ldr	r3, [r3, #4]
   16cf8:	ldr	ip, [sp, #12]
   16cfc:	ldr	lr, [fp, #-8]
   16d00:	ldr	lr, [lr]
   16d04:	str	r0, [sp, #8]
   16d08:	mov	r0, r1
   16d0c:	mov	r1, r2
   16d10:	mov	r2, r3
   16d14:	mov	r3, ip
   16d18:	str	lr, [sp]
   16d1c:	ldr	ip, [sp, #8]
   16d20:	blx	ip
   16d24:	cmp	r0, #0
   16d28:	beq	16d4c <flatcc_builder_create_vtable@@Base+0x1e4>
   16d2c:	ldr	r0, [pc, #40]	; 16d5c <flatcc_builder_create_vtable@@Base+0x1f4>
   16d30:	add	r0, pc, r0
   16d34:	ldr	r1, [pc, #36]	; 16d60 <flatcc_builder_create_vtable@@Base+0x1f8>
   16d38:	add	r1, pc, r1
   16d3c:	ldr	r2, [pc, #32]	; 16d64 <flatcc_builder_create_vtable@@Base+0x1fc>
   16d40:	add	r3, pc, r2
   16d44:	movw	r2, #677	; 0x2a5
   16d48:	bl	127a8 <__assert_fail@plt>
   16d4c:	ldr	r0, [sp, #12]
   16d50:	add	r0, r0, #1
   16d54:	mov	sp, fp
   16d58:	pop	{fp, pc}
   16d5c:	andeq	r7, r0, r7, lsr #25
   16d60:	andeq	r6, r0, r2, ror #21
   16d64:	andeq	r7, r0, r2, lsl ip
   16d68:	andeq	r7, r0, fp, lsl sp
   16d6c:	andeq	r6, r0, r6, asr fp
   16d70:	andeq	r7, r0, r6, lsl #25

00016d74 <flatcc_builder_create_cached_vtable@@Base>:
   16d74:	push	{fp, lr}
   16d78:	mov	fp, sp
   16d7c:	sub	sp, sp, #48	; 0x30
   16d80:	str	r0, [fp, #-8]
   16d84:	str	r1, [fp, #-12]
   16d88:	strh	r2, [fp, #-14]
   16d8c:	str	r3, [fp, #-20]	; 0xffffffec
   16d90:	ldr	r0, [fp, #-8]
   16d94:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d98:	bl	17080 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   16d9c:	str	r0, [sp, #12]
   16da0:	movw	r1, #0
   16da4:	cmp	r0, r1
   16da8:	bne	16db8 <flatcc_builder_create_cached_vtable@@Base+0x44>
   16dac:	movw	r0, #0
   16db0:	str	r0, [fp, #-4]
   16db4:	b	17074 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16db8:	ldr	r0, [sp, #12]
   16dbc:	str	r0, [sp, #16]
   16dc0:	ldr	r0, [sp, #16]
   16dc4:	ldr	r0, [r0]
   16dc8:	str	r0, [sp, #8]
   16dcc:	movw	r0, #0
   16dd0:	str	r0, [sp, #20]
   16dd4:	ldr	r0, [sp, #8]
   16dd8:	cmp	r0, #0
   16ddc:	beq	16ee0 <flatcc_builder_create_cached_vtable@@Base+0x16c>
   16de0:	ldr	r0, [fp, #-8]
   16de4:	ldr	r0, [r0, #100]	; 0x64
   16de8:	ldr	r1, [sp, #8]
   16dec:	add	r0, r0, r1
   16df0:	str	r0, [sp, #24]
   16df4:	ldr	r0, [fp, #-8]
   16df8:	ldr	r0, [r0, #68]	; 0x44
   16dfc:	ldr	r1, [sp, #24]
   16e00:	ldr	r1, [r1, #8]
   16e04:	add	r0, r0, r1
   16e08:	str	r0, [sp, #4]
   16e0c:	ldr	r0, [sp, #4]
   16e10:	ldrh	r0, [r0]
   16e14:	ldrh	r1, [fp, #-14]
   16e18:	cmp	r0, r1
   16e1c:	bne	16e3c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16e20:	ldr	r0, [fp, #-12]
   16e24:	ldr	r1, [sp, #4]
   16e28:	ldrh	r2, [fp, #-14]
   16e2c:	bl	12724 <memcmp@plt>
   16e30:	movw	r1, #0
   16e34:	cmp	r1, r0
   16e38:	beq	16e58 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   16e3c:	ldr	r0, [sp, #24]
   16e40:	add	r0, r0, #12
   16e44:	str	r0, [sp, #16]
   16e48:	ldr	r0, [sp, #24]
   16e4c:	ldr	r0, [r0, #12]
   16e50:	str	r0, [sp, #8]
   16e54:	b	16dd4 <flatcc_builder_create_cached_vtable@@Base+0x60>
   16e58:	ldr	r0, [sp, #24]
   16e5c:	ldr	r0, [r0, #4]
   16e60:	ldr	r1, [fp, #-8]
   16e64:	ldr	r1, [r1, #152]	; 0x98
   16e68:	cmp	r0, r1
   16e6c:	beq	16e94 <flatcc_builder_create_cached_vtable@@Base+0x120>
   16e70:	ldr	r0, [sp, #24]
   16e74:	str	r0, [sp, #20]
   16e78:	ldr	r0, [sp, #24]
   16e7c:	add	r0, r0, #12
   16e80:	str	r0, [sp, #16]
   16e84:	ldr	r0, [sp, #24]
   16e88:	ldr	r0, [r0, #12]
   16e8c:	str	r0, [sp, #8]
   16e90:	b	16dd4 <flatcc_builder_create_cached_vtable@@Base+0x60>
   16e94:	ldr	r0, [sp, #16]
   16e98:	ldr	r1, [sp, #12]
   16e9c:	cmp	r0, r1
   16ea0:	beq	16ed0 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   16ea4:	ldr	r0, [sp, #24]
   16ea8:	ldr	r0, [r0, #12]
   16eac:	ldr	r1, [sp, #16]
   16eb0:	str	r0, [r1]
   16eb4:	ldr	r0, [sp, #12]
   16eb8:	ldr	r0, [r0]
   16ebc:	ldr	r1, [sp, #24]
   16ec0:	str	r0, [r1, #12]
   16ec4:	ldr	r0, [sp, #8]
   16ec8:	ldr	r1, [sp, #12]
   16ecc:	str	r0, [r1]
   16ed0:	ldr	r0, [sp, #24]
   16ed4:	ldr	r0, [r0]
   16ed8:	str	r0, [fp, #-4]
   16edc:	b	17074 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16ee0:	ldr	r0, [fp, #-8]
   16ee4:	ldr	r1, [fp, #-8]
   16ee8:	ldr	r2, [r1, #124]	; 0x7c
   16eec:	movw	r1, #6
   16ef0:	movw	r3, #16
   16ef4:	movw	ip, #0
   16ef8:	str	ip, [sp]
   16efc:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   16f00:	str	r0, [sp, #24]
   16f04:	movw	r1, #0
   16f08:	cmp	r0, r1
   16f0c:	bne	16f1c <flatcc_builder_create_cached_vtable@@Base+0x1a8>
   16f10:	movw	r0, #0
   16f14:	str	r0, [fp, #-4]
   16f18:	b	17074 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16f1c:	ldr	r0, [fp, #-8]
   16f20:	ldr	r0, [r0, #124]	; 0x7c
   16f24:	str	r0, [sp, #8]
   16f28:	ldr	r0, [fp, #-8]
   16f2c:	ldr	r1, [r0, #124]	; 0x7c
   16f30:	add	r1, r1, #16
   16f34:	str	r1, [r0, #124]	; 0x7c
   16f38:	ldr	r0, [fp, #-8]
   16f3c:	ldr	r0, [r0, #152]	; 0x98
   16f40:	ldr	r1, [sp, #24]
   16f44:	str	r0, [r1, #4]
   16f48:	ldr	r0, [sp, #12]
   16f4c:	ldr	r0, [r0]
   16f50:	ldr	r1, [sp, #24]
   16f54:	str	r0, [r1, #12]
   16f58:	ldr	r0, [sp, #8]
   16f5c:	ldr	r1, [sp, #12]
   16f60:	str	r0, [r1]
   16f64:	ldr	r0, [fp, #-8]
   16f68:	ldr	r1, [fp, #-12]
   16f6c:	ldrh	r2, [fp, #-14]
   16f70:	bl	16b68 <flatcc_builder_create_vtable@@Base>
   16f74:	ldr	r1, [sp, #24]
   16f78:	str	r0, [r1]
   16f7c:	movw	r1, #0
   16f80:	cmp	r1, r0
   16f84:	bne	16f94 <flatcc_builder_create_cached_vtable@@Base+0x220>
   16f88:	movw	r0, #0
   16f8c:	str	r0, [fp, #-4]
   16f90:	b	17074 <flatcc_builder_create_cached_vtable@@Base+0x300>
   16f94:	ldr	r0, [sp, #20]
   16f98:	movw	r1, #0
   16f9c:	cmp	r0, r1
   16fa0:	beq	16fb8 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16fa4:	ldr	r0, [sp, #20]
   16fa8:	ldr	r0, [r0, #8]
   16fac:	ldr	r1, [sp, #24]
   16fb0:	str	r0, [r1, #8]
   16fb4:	b	17068 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   16fb8:	ldr	r0, [fp, #-8]
   16fbc:	ldr	r0, [r0, #172]	; 0xac
   16fc0:	cmp	r0, #0
   16fc4:	beq	16ff4 <flatcc_builder_create_cached_vtable@@Base+0x280>
   16fc8:	ldr	r0, [fp, #-8]
   16fcc:	ldr	r0, [r0, #172]	; 0xac
   16fd0:	ldr	r1, [fp, #-8]
   16fd4:	ldr	r1, [r1, #120]	; 0x78
   16fd8:	ldrh	r2, [fp, #-14]
   16fdc:	add	r1, r1, r2
   16fe0:	cmp	r0, r1
   16fe4:	bcs	16ff4 <flatcc_builder_create_cached_vtable@@Base+0x280>
   16fe8:	ldr	r0, [fp, #-8]
   16fec:	bl	140b0 <flatcc_builder_flush_vtable_cache@@Base>
   16ff0:	b	17064 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   16ff4:	ldr	r0, [fp, #-8]
   16ff8:	ldr	r1, [fp, #-8]
   16ffc:	ldr	r2, [r1, #120]	; 0x78
   17000:	ldrh	r3, [fp, #-14]
   17004:	movw	r1, #2
   17008:	movw	ip, #0
   1700c:	str	ip, [sp]
   17010:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   17014:	str	r0, [sp, #4]
   17018:	movw	r1, #0
   1701c:	cmp	r0, r1
   17020:	bne	17030 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   17024:	mvn	r0, #0
   17028:	str	r0, [fp, #-4]
   1702c:	b	17074 <flatcc_builder_create_cached_vtable@@Base+0x300>
   17030:	ldr	r0, [fp, #-8]
   17034:	ldr	r0, [r0, #120]	; 0x78
   17038:	ldr	r1, [sp, #24]
   1703c:	str	r0, [r1, #8]
   17040:	ldrh	r0, [fp, #-14]
   17044:	ldr	r1, [fp, #-8]
   17048:	ldr	r2, [r1, #120]	; 0x78
   1704c:	add	r0, r2, r0
   17050:	str	r0, [r1, #120]	; 0x78
   17054:	ldr	r0, [sp, #4]
   17058:	ldr	r1, [fp, #-12]
   1705c:	ldrh	r2, [fp, #-14]
   17060:	bl	12718 <memcpy@plt>
   17064:	b	17068 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   17068:	ldr	r0, [sp, #24]
   1706c:	ldr	r0, [r0]
   17070:	str	r0, [fp, #-4]
   17074:	ldr	r0, [fp, #-4]
   17078:	mov	sp, fp
   1707c:	pop	{fp, pc}
   17080:	push	{fp, lr}
   17084:	mov	fp, sp
   17088:	sub	sp, sp, #16
   1708c:	str	r0, [sp, #8]
   17090:	str	r1, [sp, #4]
   17094:	ldr	r0, [sp, #8]
   17098:	ldr	r0, [r0, #116]	; 0x74
   1709c:	cmp	r0, #0
   170a0:	bne	170c4 <flatcc_builder_create_cached_vtable@@Base+0x350>
   170a4:	ldr	r0, [sp, #8]
   170a8:	bl	19b8c <flatcc_builder_get_emit_context@@Base+0xe8>
   170ac:	cmp	r0, #0
   170b0:	beq	170c0 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   170b4:	movw	r0, #0
   170b8:	str	r0, [fp, #-4]
   170bc:	b	170f4 <flatcc_builder_create_cached_vtable@@Base+0x380>
   170c0:	b	170c4 <flatcc_builder_create_cached_vtable@@Base+0x350>
   170c4:	ldr	r0, [sp, #8]
   170c8:	ldr	r0, [r0, #92]	; 0x5c
   170cc:	str	r0, [sp]
   170d0:	ldr	r0, [sp]
   170d4:	ldr	r1, [sp, #4]
   170d8:	ldr	r2, [sp, #8]
   170dc:	ldr	r2, [r2, #116]	; 0x74
   170e0:	rsb	r2, r2, #32
   170e4:	lsr	r1, r1, r2
   170e8:	mov	r2, r1
   170ec:	add	r0, r0, r1, lsl #2
   170f0:	str	r0, [fp, #-4]
   170f4:	ldr	r0, [fp, #-4]
   170f8:	mov	sp, fp
   170fc:	pop	{fp, pc}

00017100 <flatcc_builder_create_table@@Base>:
   17100:	push	{r4, sl, fp, lr}
   17104:	add	fp, sp, #8
   17108:	sub	sp, sp, #128	; 0x80
   1710c:	ldr	ip, [fp, #16]
   17110:	ldr	lr, [fp, #12]
   17114:	ldr	r4, [fp, #8]
   17118:	str	r0, [fp, #-16]
   1711c:	str	r1, [fp, #-20]	; 0xffffffec
   17120:	str	r2, [fp, #-24]	; 0xffffffe8
   17124:	strh	r3, [fp, #-26]	; 0xffffffe6
   17128:	ldr	r0, [fp, #12]
   1712c:	cmp	r0, #0
   17130:	blt	17138 <flatcc_builder_create_table@@Base+0x38>
   17134:	b	17158 <flatcc_builder_create_table@@Base+0x58>
   17138:	ldr	r0, [pc, #616]	; 173a8 <flatcc_builder_create_table@@Base+0x2a8>
   1713c:	add	r0, pc, r0
   17140:	ldr	r1, [pc, #612]	; 173ac <flatcc_builder_create_table@@Base+0x2ac>
   17144:	add	r1, pc, r1
   17148:	ldr	r2, [pc, #608]	; 173b0 <flatcc_builder_create_table@@Base+0x2b0>
   1714c:	add	r3, pc, r2
   17150:	movw	r2, #1237	; 0x4d5
   17154:	bl	127a8 <__assert_fail@plt>
   17158:	ldr	r0, [fp, #16]
   1715c:	and	r0, r0, #1
   17160:	cmp	r0, #0
   17164:	beq	1716c <flatcc_builder_create_table@@Base+0x6c>
   17168:	b	1718c <flatcc_builder_create_table@@Base+0x8c>
   1716c:	ldr	r0, [pc, #576]	; 173b4 <flatcc_builder_create_table@@Base+0x2b4>
   17170:	add	r0, pc, r0
   17174:	ldr	r1, [pc, #572]	; 173b8 <flatcc_builder_create_table@@Base+0x2b8>
   17178:	add	r1, pc, r1
   1717c:	ldr	r2, [pc, #568]	; 173bc <flatcc_builder_create_table@@Base+0x2bc>
   17180:	add	r3, pc, r2
   17184:	movw	r2, #1243	; 0x4db
   17188:	bl	127a8 <__assert_fail@plt>
   1718c:	sub	r0, fp, #26
   17190:	movw	r1, #4
   17194:	uxth	r1, r1
   17198:	bl	16688 <flatcc_builder_start_vector@@Base+0xac>
   1719c:	ldr	r0, [fp, #-16]
   171a0:	ldrh	r1, [fp, #-26]	; 0xffffffe6
   171a4:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   171a8:	ldr	r0, [fp, #-16]
   171ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   171b0:	ldrh	r2, [fp, #-26]	; 0xffffffe6
   171b4:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   171b8:	str	r0, [fp, #-36]	; 0xffffffdc
   171bc:	ldr	r0, [fp, #-16]
   171c0:	ldr	r0, [r0, #136]	; 0x88
   171c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   171c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171cc:	add	r1, r1, r2
   171d0:	add	r1, r1, #4
   171d4:	sub	r0, r0, r1
   171d8:	str	r0, [fp, #-52]	; 0xffffffcc
   171dc:	ldr	r0, [fp, #16]
   171e0:	sub	r0, r0, #1
   171e4:	str	r0, [fp, #-48]	; 0xffffffd0
   171e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   171ec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   171f0:	sub	r0, r0, r1
   171f4:	str	r0, [fp, #-40]	; 0xffffffd8
   171f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   171fc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17200:	sub	r0, r0, r1
   17204:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17208:	cmp	r0, r1
   1720c:	beq	1721c <flatcc_builder_create_table@@Base+0x11c>
   17210:	mvn	r0, #0
   17214:	str	r0, [fp, #-12]
   17218:	b	1739c <flatcc_builder_create_table@@Base+0x29c>
   1721c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17220:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   17224:	str	r0, [fp, #-44]	; 0xffffffd4
   17228:	movw	r0, #0
   1722c:	str	r0, [fp, #-32]	; 0xffffffe0
   17230:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17234:	ldr	r1, [fp, #12]
   17238:	cmp	r0, r1
   1723c:	bge	172a8 <flatcc_builder_create_table@@Base+0x1a8>
   17240:	ldr	r0, [fp, #-20]	; 0xffffffec
   17244:	ldr	r1, [fp, #8]
   17248:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1724c:	add	r1, r1, r2, lsl #1
   17250:	ldrh	r1, [r1]
   17254:	add	r0, r0, r1
   17258:	str	r0, [fp, #-60]	; 0xffffffc4
   1725c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17260:	ldr	r0, [r0]
   17264:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17268:	sub	r0, r0, r1
   1726c:	ldr	r1, [fp, #8]
   17270:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17274:	add	r1, r1, r2, lsl #1
   17278:	ldrh	r1, [r1]
   1727c:	sub	r0, r0, r1
   17280:	sub	r0, r0, #4
   17284:	str	r0, [fp, #-56]	; 0xffffffc8
   17288:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1728c:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   17290:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17294:	str	r0, [r1]
   17298:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1729c:	add	r0, r0, #1
   172a0:	str	r0, [fp, #-32]	; 0xffffffe0
   172a4:	b	17230 <flatcc_builder_create_table@@Base+0x130>
   172a8:	mov	r0, #0
   172ac:	str	r0, [sp, #4]
   172b0:	str	r0, [sp, #8]
   172b4:	ldr	r0, [sp, #4]
   172b8:	add	r0, r0, #4
   172bc:	str	r0, [sp, #4]
   172c0:	add	r0, sp, #4
   172c4:	add	r0, r0, #8
   172c8:	ldr	r1, [sp, #8]
   172cc:	sub	r2, fp, #44	; 0x2c
   172d0:	str	r2, [r0, r1, lsl #3]
   172d4:	ldr	r1, [sp, #8]
   172d8:	add	r0, r0, r1, lsl #3
   172dc:	movw	r1, #4
   172e0:	str	r1, [r0, #4]
   172e4:	ldr	r0, [sp, #8]
   172e8:	add	r0, r0, #1
   172ec:	str	r0, [sp, #8]
   172f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   172f4:	cmp	r0, #0
   172f8:	bls	1733c <flatcc_builder_create_table@@Base+0x23c>
   172fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17300:	ldr	r1, [sp, #4]
   17304:	add	r0, r1, r0
   17308:	str	r0, [sp, #4]
   1730c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17310:	add	r1, sp, #4
   17314:	add	r1, r1, #8
   17318:	ldr	r2, [sp, #8]
   1731c:	str	r0, [r1, r2, lsl #3]
   17320:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17324:	ldr	r2, [sp, #8]
   17328:	add	r1, r1, r2, lsl #3
   1732c:	str	r0, [r1, #4]
   17330:	ldr	r0, [sp, #8]
   17334:	add	r0, r0, #1
   17338:	str	r0, [sp, #8]
   1733c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17340:	cmp	r0, #0
   17344:	bls	1738c <flatcc_builder_create_table@@Base+0x28c>
   17348:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1734c:	ldr	r1, [sp, #4]
   17350:	add	r0, r1, r0
   17354:	str	r0, [sp, #4]
   17358:	add	r0, sp, #4
   1735c:	add	r0, r0, #8
   17360:	ldr	r1, [sp, #8]
   17364:	ldr	r2, [pc, #84]	; 173c0 <flatcc_builder_create_table@@Base+0x2c0>
   17368:	ldr	r2, [pc, r2]
   1736c:	str	r2, [r0, r1, lsl #3]
   17370:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17374:	ldr	r2, [sp, #8]
   17378:	add	r0, r0, r2, lsl #3
   1737c:	str	r1, [r0, #4]
   17380:	ldr	r0, [sp, #8]
   17384:	add	r0, r0, #1
   17388:	str	r0, [sp, #8]
   1738c:	ldr	r0, [fp, #-16]
   17390:	add	r1, sp, #4
   17394:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   17398:	str	r0, [fp, #-12]
   1739c:	ldr	r0, [fp, #-12]
   173a0:	sub	sp, fp, #8
   173a4:	pop	{r4, sl, fp, pc}
   173a8:	andeq	r6, r0, r1, asr lr
   173ac:	ldrdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   173b0:	andeq	r6, r0, r3, asr lr
   173b4:	andeq	r6, r0, fp, asr #29
   173b8:	andeq	r6, r0, r2, lsr #13
   173bc:	andeq	r6, r0, pc, lsl lr
   173c0:	ldrdeq	r7, [r1], -r4

000173c4 <flatcc_builder_check_required_field@@Base>:
   173c4:	push	{fp, lr}
   173c8:	mov	fp, sp
   173cc:	sub	sp, sp, #16
   173d0:	str	r0, [fp, #-4]
   173d4:	strh	r1, [fp, #-6]
   173d8:	ldr	r0, [fp, #-4]
   173dc:	ldr	r0, [r0, #32]
   173e0:	ldrh	r0, [r0, #14]
   173e4:	cmp	r0, #3
   173e8:	bne	173f0 <flatcc_builder_check_required_field@@Base+0x2c>
   173ec:	b	17410 <flatcc_builder_check_required_field@@Base+0x4c>
   173f0:	ldr	r0, [pc, #104]	; 17460 <flatcc_builder_check_required_field@@Base+0x9c>
   173f4:	add	r0, pc, r0
   173f8:	ldr	r1, [pc, #100]	; 17464 <flatcc_builder_check_required_field@@Base+0xa0>
   173fc:	add	r1, pc, r1
   17400:	ldr	r2, [pc, #96]	; 17468 <flatcc_builder_check_required_field@@Base+0xa4>
   17404:	add	r3, pc, r2
   17408:	movw	r2, #1272	; 0x4f8
   1740c:	bl	127a8 <__assert_fail@plt>
   17410:	ldrh	r0, [fp, #-6]
   17414:	ldr	r1, [fp, #-4]
   17418:	ldrh	r1, [r1, #8]
   1741c:	cmp	r0, r1
   17420:	movw	r0, #0
   17424:	str	r0, [sp, #4]
   17428:	bge	17450 <flatcc_builder_check_required_field@@Base+0x8c>
   1742c:	ldr	r0, [fp, #-4]
   17430:	ldr	r0, [r0, #4]
   17434:	ldrh	r1, [fp, #-6]
   17438:	add	r0, r0, r1, lsl #1
   1743c:	ldrh	r0, [r0]
   17440:	cmp	r0, #0
   17444:	movw	r0, #0
   17448:	movne	r0, #1
   1744c:	str	r0, [sp, #4]
   17450:	ldr	r0, [sp, #4]
   17454:	and	r0, r0, #1
   17458:	mov	sp, fp
   1745c:	pop	{fp, pc}
   17460:	andeq	r6, r0, r2, asr ip
   17464:	andeq	r6, r0, lr, lsl r4
   17468:	andeq	r6, r0, sp, ror #24

0001746c <flatcc_builder_check_union_field@@Base>:
   1746c:	push	{fp, lr}
   17470:	mov	fp, sp
   17474:	sub	sp, sp, #16
   17478:	str	r0, [sp, #8]
   1747c:	strh	r1, [sp, #6]
   17480:	ldr	r0, [sp, #8]
   17484:	ldr	r0, [r0, #32]
   17488:	ldrh	r0, [r0, #14]
   1748c:	cmp	r0, #3
   17490:	bne	17498 <flatcc_builder_check_union_field@@Base+0x2c>
   17494:	b	174b8 <flatcc_builder_check_union_field@@Base+0x4c>
   17498:	ldr	r0, [pc, #284]	; 175bc <flatcc_builder_check_union_field@@Base+0x150>
   1749c:	add	r0, pc, r0
   174a0:	ldr	r1, [pc, #280]	; 175c0 <flatcc_builder_check_union_field@@Base+0x154>
   174a4:	add	r1, pc, r1
   174a8:	ldr	r2, [pc, #276]	; 175c4 <flatcc_builder_check_union_field@@Base+0x158>
   174ac:	add	r3, pc, r2
   174b0:	movw	r2, #1279	; 0x4ff
   174b4:	bl	127a8 <__assert_fail@plt>
   174b8:	ldrh	r0, [sp, #6]
   174bc:	cmp	r0, #0
   174c0:	beq	174d8 <flatcc_builder_check_union_field@@Base+0x6c>
   174c4:	ldrh	r0, [sp, #6]
   174c8:	ldr	r1, [sp, #8]
   174cc:	ldrh	r1, [r1, #8]
   174d0:	cmp	r0, r1
   174d4:	blt	174e4 <flatcc_builder_check_union_field@@Base+0x78>
   174d8:	movw	r0, #0
   174dc:	str	r0, [fp, #-4]
   174e0:	b	175b0 <flatcc_builder_check_union_field@@Base+0x144>
   174e4:	ldr	r0, [sp, #8]
   174e8:	ldr	r0, [r0, #4]
   174ec:	ldrh	r1, [sp, #6]
   174f0:	sub	r1, r1, #1
   174f4:	add	r0, r0, r1, lsl #1
   174f8:	ldrh	r0, [r0]
   174fc:	cmp	r0, #0
   17500:	bne	17530 <flatcc_builder_check_union_field@@Base+0xc4>
   17504:	ldr	r0, [sp, #8]
   17508:	ldr	r0, [r0, #4]
   1750c:	ldrh	r1, [sp, #6]
   17510:	add	r0, r0, r1, lsl #1
   17514:	ldrh	r0, [r0]
   17518:	cmp	r0, #0
   1751c:	movw	r0, #0
   17520:	moveq	r0, #1
   17524:	and	r0, r0, #1
   17528:	str	r0, [fp, #-4]
   1752c:	b	175b0 <flatcc_builder_check_union_field@@Base+0x144>
   17530:	ldr	r0, [sp, #8]
   17534:	ldr	r1, [r0, #4]
   17538:	ldr	r0, [r0, #16]
   1753c:	ldrh	r2, [sp, #6]
   17540:	sub	r2, r2, #1
   17544:	add	r1, r1, r2, lsl #1
   17548:	ldrh	r1, [r1]
   1754c:	add	r0, r0, r1
   17550:	ldrsb	r0, [r0]
   17554:	cmp	r0, #0
   17558:	beq	17588 <flatcc_builder_check_union_field@@Base+0x11c>
   1755c:	ldr	r0, [sp, #8]
   17560:	ldr	r0, [r0, #4]
   17564:	ldrh	r1, [sp, #6]
   17568:	add	r0, r0, r1, lsl #1
   1756c:	ldrh	r0, [r0]
   17570:	cmp	r0, #0
   17574:	movw	r0, #0
   17578:	movne	r0, #1
   1757c:	and	r0, r0, #1
   17580:	str	r0, [fp, #-4]
   17584:	b	175b0 <flatcc_builder_check_union_field@@Base+0x144>
   17588:	ldr	r0, [sp, #8]
   1758c:	ldr	r0, [r0, #4]
   17590:	ldrh	r1, [sp, #6]
   17594:	add	r0, r0, r1, lsl #1
   17598:	ldrh	r0, [r0]
   1759c:	cmp	r0, #0
   175a0:	movw	r0, #0
   175a4:	moveq	r0, #1
   175a8:	and	r0, r0, #1
   175ac:	str	r0, [fp, #-4]
   175b0:	ldr	r0, [fp, #-4]
   175b4:	mov	sp, fp
   175b8:	pop	{fp, pc}
   175bc:	andeq	r6, r0, sl, lsr #23
   175c0:	andeq	r6, r0, r6, ror r3
   175c4:	andeq	r6, r0, r8, lsl ip

000175c8 <flatcc_builder_check_required@@Base>:
   175c8:	push	{fp, lr}
   175cc:	mov	fp, sp
   175d0:	sub	sp, sp, #24
   175d4:	str	r0, [fp, #-8]
   175d8:	str	r1, [sp, #12]
   175dc:	str	r2, [sp, #8]
   175e0:	ldr	r0, [fp, #-8]
   175e4:	ldr	r0, [r0, #32]
   175e8:	ldrh	r0, [r0, #14]
   175ec:	cmp	r0, #3
   175f0:	bne	175f8 <flatcc_builder_check_required@@Base+0x30>
   175f4:	b	17618 <flatcc_builder_check_required@@Base+0x50>
   175f8:	ldr	r0, [pc, #172]	; 176ac <flatcc_builder_check_required@@Base+0xe4>
   175fc:	add	r0, pc, r0
   17600:	ldr	r1, [pc, #168]	; 176b0 <flatcc_builder_check_required@@Base+0xe8>
   17604:	add	r1, pc, r1
   17608:	ldr	r2, [pc, #164]	; 176b4 <flatcc_builder_check_required@@Base+0xec>
   1760c:	add	r3, pc, r2
   17610:	movw	r2, #1297	; 0x511
   17614:	bl	127a8 <__assert_fail@plt>
   17618:	ldr	r0, [fp, #-8]
   1761c:	ldrh	r0, [r0, #8]
   17620:	ldr	r1, [sp, #8]
   17624:	cmp	r0, r1
   17628:	bge	17638 <flatcc_builder_check_required@@Base+0x70>
   1762c:	movw	r0, #0
   17630:	str	r0, [fp, #-4]
   17634:	b	176a0 <flatcc_builder_check_required@@Base+0xd8>
   17638:	movw	r0, #0
   1763c:	str	r0, [sp, #4]
   17640:	ldr	r0, [sp, #4]
   17644:	ldr	r1, [sp, #8]
   17648:	cmp	r0, r1
   1764c:	bge	17698 <flatcc_builder_check_required@@Base+0xd0>
   17650:	ldr	r0, [fp, #-8]
   17654:	ldr	r0, [r0, #4]
   17658:	ldr	r1, [sp, #12]
   1765c:	ldr	r2, [sp, #4]
   17660:	add	r1, r1, r2, lsl #1
   17664:	ldrh	r1, [r1]
   17668:	add	r0, r0, r1, lsl #1
   1766c:	ldrh	r0, [r0]
   17670:	cmp	r0, #0
   17674:	bne	17684 <flatcc_builder_check_required@@Base+0xbc>
   17678:	movw	r0, #0
   1767c:	str	r0, [fp, #-4]
   17680:	b	176a0 <flatcc_builder_check_required@@Base+0xd8>
   17684:	b	17688 <flatcc_builder_check_required@@Base+0xc0>
   17688:	ldr	r0, [sp, #4]
   1768c:	add	r0, r0, #1
   17690:	str	r0, [sp, #4]
   17694:	b	17640 <flatcc_builder_check_required@@Base+0x78>
   17698:	movw	r0, #1
   1769c:	str	r0, [fp, #-4]
   176a0:	ldr	r0, [fp, #-4]
   176a4:	mov	sp, fp
   176a8:	pop	{fp, pc}
   176ac:	andeq	r6, r0, sl, asr #20
   176b0:	andeq	r6, r0, r6, lsl r2
   176b4:	andeq	r6, r0, r8, lsl #22

000176b8 <flatcc_builder_end_table@@Base>:
   176b8:	push	{r4, r5, fp, lr}
   176bc:	add	fp, sp, #8
   176c0:	sub	sp, sp, #48	; 0x30
   176c4:	str	r0, [fp, #-16]
   176c8:	ldr	r0, [fp, #-16]
   176cc:	ldr	r0, [r0, #32]
   176d0:	ldrh	r0, [r0, #14]
   176d4:	cmp	r0, #3
   176d8:	bne	176e0 <flatcc_builder_end_table@@Base+0x28>
   176dc:	b	17700 <flatcc_builder_end_table@@Base+0x48>
   176e0:	ldr	r0, [pc, #500]	; 178dc <flatcc_builder_end_table@@Base+0x224>
   176e4:	add	r0, pc, r0
   176e8:	ldr	r1, [pc, #496]	; 178e0 <flatcc_builder_end_table@@Base+0x228>
   176ec:	add	r1, pc, r1
   176f0:	ldr	r2, [pc, #492]	; 178e4 <flatcc_builder_end_table@@Base+0x22c>
   176f4:	add	r3, pc, r2
   176f8:	movw	r2, #1317	; 0x525
   176fc:	bl	127a8 <__assert_fail@plt>
   17700:	ldr	r0, [pc, #480]	; 178e8 <flatcc_builder_end_table@@Base+0x230>
   17704:	ldr	r1, [fp, #-16]
   17708:	ldr	r1, [r1, #4]
   1770c:	sub	r1, r1, #4
   17710:	str	r1, [fp, #-20]	; 0xffffffec
   17714:	ldr	r1, [fp, #-16]
   17718:	ldrh	r1, [r1, #8]
   1771c:	add	r1, r1, #2
   17720:	lsl	r1, r1, #1
   17724:	strh	r1, [fp, #-22]	; 0xffffffea
   17728:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1772c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17730:	strh	r1, [r2]
   17734:	ldr	r1, [fp, #-16]
   17738:	ldr	r1, [r1, #20]
   1773c:	uxth	r1, r1
   17740:	add	r1, r1, #4
   17744:	ldr	r2, [fp, #-20]	; 0xffffffec
   17748:	strh	r1, [r2, #2]
   1774c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17750:	ldrh	r1, [r1]
   17754:	ldr	r2, [fp, #-16]
   17758:	ldr	r2, [r2, #12]
   1775c:	eor	r1, r1, r2
   17760:	mul	r1, r1, r0
   17764:	ldr	r2, [fp, #-20]	; 0xffffffec
   17768:	ldrh	r2, [r2, #2]
   1776c:	eor	r1, r1, r2
   17770:	mul	r0, r1, r0
   17774:	ldr	r1, [fp, #-16]
   17778:	str	r0, [r1, #12]
   1777c:	ldr	r0, [fp, #-16]
   17780:	ldr	r1, [fp, #-20]	; 0xffffffec
   17784:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17788:	ldr	r3, [fp, #-16]
   1778c:	ldr	r3, [r3, #12]
   17790:	uxth	r2, r2
   17794:	bl	16d74 <flatcc_builder_create_cached_vtable@@Base>
   17798:	str	r0, [sp, #24]
   1779c:	cmp	r0, #0
   177a0:	bne	177b0 <flatcc_builder_end_table@@Base+0xf8>
   177a4:	movw	r0, #0
   177a8:	str	r0, [fp, #-12]
   177ac:	b	178d0 <flatcc_builder_end_table@@Base+0x218>
   177b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   177b4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   177b8:	mov	r1, #0
   177bc:	bl	12778 <memset@plt>
   177c0:	ldr	r1, [fp, #-16]
   177c4:	ldr	r2, [r1, #32]
   177c8:	ldr	r1, [r1, #76]	; 0x4c
   177cc:	ldr	r2, [r2, #20]
   177d0:	add	r1, r1, r2
   177d4:	str	r1, [sp, #16]
   177d8:	ldr	r1, [fp, #-16]
   177dc:	ldr	r1, [r1]
   177e0:	ldr	r2, [sp, #16]
   177e4:	sub	r1, r1, r2
   177e8:	asr	r1, r1, #1
   177ec:	str	r1, [sp, #20]
   177f0:	ldr	r1, [fp, #-16]
   177f4:	ldr	r2, [fp, #-16]
   177f8:	ldr	r2, [r2, #16]
   177fc:	ldr	r3, [fp, #-16]
   17800:	ldr	r3, [r3, #20]
   17804:	ldr	ip, [fp, #-16]
   17808:	ldrh	ip, [ip, #130]	; 0x82
   1780c:	ldr	lr, [sp, #16]
   17810:	ldr	r4, [sp, #20]
   17814:	ldr	r5, [sp, #24]
   17818:	str	r0, [sp, #12]
   1781c:	mov	r0, r1
   17820:	mov	r1, r2
   17824:	mov	r2, r3
   17828:	uxth	r3, ip
   1782c:	str	lr, [sp]
   17830:	str	r4, [sp, #4]
   17834:	str	r5, [sp, #8]
   17838:	bl	17100 <flatcc_builder_create_table@@Base>
   1783c:	str	r0, [sp, #28]
   17840:	movw	r1, #0
   17844:	cmp	r1, r0
   17848:	bne	17858 <flatcc_builder_end_table@@Base+0x1a0>
   1784c:	movw	r0, #0
   17850:	str	r0, [fp, #-12]
   17854:	b	178d0 <flatcc_builder_end_table@@Base+0x218>
   17858:	ldr	r0, [fp, #-16]
   1785c:	ldr	r0, [r0, #32]
   17860:	ldr	r0, [r0, #24]
   17864:	ldr	r1, [fp, #-16]
   17868:	str	r0, [r1, #12]
   1786c:	ldr	r0, [fp, #-16]
   17870:	ldr	r0, [r0, #32]
   17874:	ldrh	r0, [r0, #28]
   17878:	ldr	r1, [fp, #-16]
   1787c:	strh	r0, [r1, #8]
   17880:	ldr	r0, [fp, #-16]
   17884:	ldr	r0, [r0, #52]	; 0x34
   17888:	ldr	r1, [fp, #-16]
   1788c:	ldr	r1, [r1, #32]
   17890:	ldr	r1, [r1, #16]
   17894:	add	r0, r0, r1
   17898:	ldr	r1, [fp, #-16]
   1789c:	str	r0, [r1, #4]
   178a0:	ldr	r0, [fp, #-16]
   178a4:	ldr	r0, [r0, #76]	; 0x4c
   178a8:	ldr	r1, [fp, #-16]
   178ac:	ldr	r1, [r1, #32]
   178b0:	ldr	r1, [r1, #20]
   178b4:	add	r0, r0, r1
   178b8:	ldr	r1, [fp, #-16]
   178bc:	str	r0, [r1]
   178c0:	ldr	r0, [fp, #-16]
   178c4:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   178c8:	ldr	r0, [sp, #28]
   178cc:	str	r0, [fp, #-12]
   178d0:	ldr	r0, [fp, #-12]
   178d4:	sub	sp, fp, #8
   178d8:	pop	{r4, r5, fp, pc}
   178dc:	andeq	r6, r0, r2, ror #18
   178e0:	andeq	r6, r0, lr, lsr #2
   178e4:	andeq	r6, r0, sl, ror sl
   178e8:			; <UNDEFINED> instruction: 0x9e3779b1

000178ec <flatcc_builder_create_vector@@Base>:
   178ec:	push	{fp, lr}
   178f0:	mov	fp, sp
   178f4:	sub	sp, sp, #112	; 0x70
   178f8:	ldr	ip, [fp, #12]
   178fc:	ldr	lr, [fp, #8]
   17900:	str	r0, [fp, #-8]
   17904:	str	r1, [fp, #-12]
   17908:	str	r2, [fp, #-16]
   1790c:	str	r3, [fp, #-20]	; 0xffffffec
   17910:	strh	lr, [fp, #-22]	; 0xffffffea
   17914:	ldr	r0, [fp, #-16]
   17918:	ldr	r1, [fp, #12]
   1791c:	cmp	r0, r1
   17920:	bls	17964 <flatcc_builder_create_vector@@Base+0x78>
   17924:	ldr	r0, [fp, #-16]
   17928:	ldr	r1, [fp, #12]
   1792c:	cmp	r0, r1
   17930:	bhi	17938 <flatcc_builder_create_vector@@Base+0x4c>
   17934:	b	17958 <flatcc_builder_create_vector@@Base+0x6c>
   17938:	ldr	r0, [pc, #364]	; 17aac <flatcc_builder_create_vector@@Base+0x1c0>
   1793c:	add	r0, pc, r0
   17940:	ldr	r1, [pc, #360]	; 17ab0 <flatcc_builder_create_vector@@Base+0x1c4>
   17944:	add	r1, pc, r1
   17948:	ldr	r2, [pc, #356]	; 17ab4 <flatcc_builder_create_vector@@Base+0x1c8>
   1794c:	add	r3, pc, r2
   17950:	movw	r2, #1365	; 0x555
   17954:	bl	127a8 <__assert_fail@plt>
   17958:	movw	r0, #0
   1795c:	str	r0, [fp, #-4]
   17960:	b	17aa0 <flatcc_builder_create_vector@@Base+0x1b4>
   17964:	sub	r0, fp, #22
   17968:	mov	r1, #4
   1796c:	bl	16688 <flatcc_builder_start_vector@@Base+0xac>
   17970:	ldr	r0, [fp, #-8]
   17974:	ldrh	r1, [fp, #-22]	; 0xffffffea
   17978:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   1797c:	ldr	r0, [fp, #-16]
   17980:	ldr	r1, [fp, #-20]	; 0xffffffec
   17984:	mul	r0, r0, r1
   17988:	str	r0, [fp, #-28]	; 0xffffffe4
   1798c:	ldr	r0, [fp, #-16]
   17990:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   17994:	str	r0, [fp, #-36]	; 0xffffffdc
   17998:	ldr	r0, [fp, #-8]
   1799c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   179a0:	ldrh	r2, [fp, #-22]	; 0xffffffea
   179a4:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   179a8:	str	r0, [fp, #-32]	; 0xffffffe0
   179ac:	mov	r0, #0
   179b0:	str	r0, [sp, #4]
   179b4:	str	r0, [sp, #8]
   179b8:	ldr	r0, [sp, #4]
   179bc:	add	r0, r0, #4
   179c0:	str	r0, [sp, #4]
   179c4:	add	r0, sp, #4
   179c8:	add	r0, r0, #8
   179cc:	ldr	r1, [sp, #8]
   179d0:	sub	r2, fp, #36	; 0x24
   179d4:	str	r2, [r0, r1, lsl #3]
   179d8:	ldr	r1, [sp, #8]
   179dc:	add	r0, r0, r1, lsl #3
   179e0:	movw	r1, #4
   179e4:	str	r1, [r0, #4]
   179e8:	ldr	r0, [sp, #8]
   179ec:	add	r0, r0, #1
   179f0:	str	r0, [sp, #8]
   179f4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   179f8:	cmp	r0, #0
   179fc:	bls	17a40 <flatcc_builder_create_vector@@Base+0x154>
   17a00:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17a04:	ldr	r1, [sp, #4]
   17a08:	add	r0, r1, r0
   17a0c:	str	r0, [sp, #4]
   17a10:	ldr	r0, [fp, #-12]
   17a14:	add	r1, sp, #4
   17a18:	add	r1, r1, #8
   17a1c:	ldr	r2, [sp, #8]
   17a20:	str	r0, [r1, r2, lsl #3]
   17a24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17a28:	ldr	r2, [sp, #8]
   17a2c:	add	r1, r1, r2, lsl #3
   17a30:	str	r0, [r1, #4]
   17a34:	ldr	r0, [sp, #8]
   17a38:	add	r0, r0, #1
   17a3c:	str	r0, [sp, #8]
   17a40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a44:	cmp	r0, #0
   17a48:	bls	17a90 <flatcc_builder_create_vector@@Base+0x1a4>
   17a4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a50:	ldr	r1, [sp, #4]
   17a54:	add	r0, r1, r0
   17a58:	str	r0, [sp, #4]
   17a5c:	add	r0, sp, #4
   17a60:	add	r0, r0, #8
   17a64:	ldr	r1, [sp, #8]
   17a68:	ldr	r2, [pc, #72]	; 17ab8 <flatcc_builder_create_vector@@Base+0x1cc>
   17a6c:	ldr	r2, [pc, r2]
   17a70:	str	r2, [r0, r1, lsl #3]
   17a74:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17a78:	ldr	r2, [sp, #8]
   17a7c:	add	r0, r0, r2, lsl #3
   17a80:	str	r1, [r0, #4]
   17a84:	ldr	r0, [sp, #8]
   17a88:	add	r0, r0, #1
   17a8c:	str	r0, [sp, #8]
   17a90:	ldr	r0, [fp, #-8]
   17a94:	add	r1, sp, #4
   17a98:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   17a9c:	str	r0, [fp, #-4]
   17aa0:	ldr	r0, [fp, #-4]
   17aa4:	mov	sp, fp
   17aa8:	pop	{fp, pc}
   17aac:	andeq	r6, r0, r4, ror r8
   17ab0:	ldrdeq	r5, [r0], -r6
   17ab4:	andeq	r6, r0, r7, ror r8
   17ab8:	ldrdeq	r7, [r1], -r0

00017abc <flatcc_builder_end_vector@@Base>:
   17abc:	push	{fp, lr}
   17ac0:	mov	fp, sp
   17ac4:	sub	sp, sp, #24
   17ac8:	str	r0, [fp, #-8]
   17acc:	ldr	r0, [fp, #-8]
   17ad0:	ldr	r0, [r0, #32]
   17ad4:	ldrh	r0, [r0, #14]
   17ad8:	cmp	r0, #4
   17adc:	bne	17ae4 <flatcc_builder_end_vector@@Base+0x28>
   17ae0:	b	17b04 <flatcc_builder_end_vector@@Base+0x48>
   17ae4:	ldr	r0, [pc, #152]	; 17b84 <flatcc_builder_end_vector@@Base+0xc8>
   17ae8:	add	r0, pc, r0
   17aec:	ldr	r1, [pc, #148]	; 17b88 <flatcc_builder_end_vector@@Base+0xcc>
   17af0:	add	r1, pc, r1
   17af4:	ldr	r2, [pc, #144]	; 17b8c <flatcc_builder_end_vector@@Base+0xd0>
   17af8:	add	r3, pc, r2
   17afc:	movw	r2, #1400	; 0x578
   17b00:	bl	127a8 <__assert_fail@plt>
   17b04:	ldr	r0, [fp, #-8]
   17b08:	ldr	r1, [fp, #-8]
   17b0c:	ldr	r1, [r1, #16]
   17b10:	ldr	r2, [fp, #-8]
   17b14:	ldr	r2, [r2, #32]
   17b18:	ldr	r2, [r2, #20]
   17b1c:	ldr	r3, [fp, #-8]
   17b20:	ldr	r3, [r3, #32]
   17b24:	ldr	r3, [r3, #16]
   17b28:	ldr	ip, [fp, #-8]
   17b2c:	ldrh	ip, [ip, #130]	; 0x82
   17b30:	ldr	lr, [fp, #-8]
   17b34:	ldr	lr, [lr, #32]
   17b38:	ldr	lr, [lr, #24]
   17b3c:	uxth	ip, ip
   17b40:	str	ip, [sp]
   17b44:	str	lr, [sp, #4]
   17b48:	bl	178ec <flatcc_builder_create_vector@@Base>
   17b4c:	str	r0, [sp, #12]
   17b50:	movw	r1, #0
   17b54:	cmp	r1, r0
   17b58:	bne	17b68 <flatcc_builder_end_vector@@Base+0xac>
   17b5c:	movw	r0, #0
   17b60:	str	r0, [fp, #-4]
   17b64:	b	17b78 <flatcc_builder_end_vector@@Base+0xbc>
   17b68:	ldr	r0, [fp, #-8]
   17b6c:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   17b70:	ldr	r0, [sp, #12]
   17b74:	str	r0, [fp, #-4]
   17b78:	ldr	r0, [fp, #-4]
   17b7c:	mov	sp, fp
   17b80:	pop	{fp, pc}
   17b84:	andeq	r6, r0, ip, rrx
   17b88:	andeq	r5, r0, sl, lsr #26
   17b8c:	andeq	r6, r0, r1, asr #14

00017b90 <flatcc_builder_vector_count@@Base>:
   17b90:	sub	sp, sp, #4
   17b94:	str	r0, [sp]
   17b98:	ldr	r0, [sp]
   17b9c:	ldr	r0, [r0, #32]
   17ba0:	ldr	r0, [r0, #20]
   17ba4:	add	sp, sp, #4
   17ba8:	bx	lr

00017bac <flatcc_builder_vector_edit@@Base>:
   17bac:	sub	sp, sp, #4
   17bb0:	str	r0, [sp]
   17bb4:	ldr	r0, [sp]
   17bb8:	ldr	r0, [r0, #16]
   17bbc:	add	sp, sp, #4
   17bc0:	bx	lr

00017bc4 <flatcc_builder_create_offset_vector_direct@@Base>:
   17bc4:	push	{fp, lr}
   17bc8:	mov	fp, sp
   17bcc:	sub	sp, sp, #16
   17bd0:	str	r0, [fp, #-4]
   17bd4:	str	r1, [sp, #8]
   17bd8:	str	r2, [sp, #4]
   17bdc:	ldr	r0, [fp, #-4]
   17be0:	ldr	r1, [sp, #8]
   17be4:	ldr	r2, [sp, #4]
   17be8:	movw	r3, #0
   17bec:	bl	17bf8 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17bf0:	mov	sp, fp
   17bf4:	pop	{fp, pc}
   17bf8:	push	{fp, lr}
   17bfc:	mov	fp, sp
   17c00:	sub	sp, sp, #120	; 0x78
   17c04:	ldr	ip, [pc, #696]	; 17ec4 <flatcc_builder_create_offset_vector_direct@@Base+0x300>
   17c08:	str	r0, [fp, #-8]
   17c0c:	str	r1, [fp, #-12]
   17c10:	str	r2, [fp, #-16]
   17c14:	str	r3, [fp, #-20]	; 0xffffffec
   17c18:	ldr	r0, [fp, #-16]
   17c1c:	cmp	r0, ip
   17c20:	bls	17c30 <flatcc_builder_create_offset_vector_direct@@Base+0x6c>
   17c24:	movw	r0, #0
   17c28:	str	r0, [fp, #-4]
   17c2c:	b	17eb8 <flatcc_builder_create_offset_vector_direct@@Base+0x2f4>
   17c30:	ldr	r0, [fp, #-8]
   17c34:	mov	r1, #4
   17c38:	str	r1, [sp]
   17c3c:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   17c40:	ldr	r0, [fp, #-16]
   17c44:	lsl	r0, r0, #2
   17c48:	str	r0, [fp, #-24]	; 0xffffffe8
   17c4c:	ldr	r0, [fp, #-16]
   17c50:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   17c54:	str	r0, [fp, #-32]	; 0xffffffe0
   17c58:	ldr	r0, [fp, #-8]
   17c5c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17c60:	ldr	r2, [sp]
   17c64:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   17c68:	str	r0, [fp, #-28]	; 0xffffffe4
   17c6c:	mov	r0, #0
   17c70:	str	r0, [sp, #4]
   17c74:	str	r0, [sp, #8]
   17c78:	ldr	r0, [sp, #4]
   17c7c:	add	r0, r0, #4
   17c80:	str	r0, [sp, #4]
   17c84:	add	r0, sp, #4
   17c88:	add	r0, r0, #8
   17c8c:	ldr	r1, [sp, #8]
   17c90:	sub	r2, fp, #32
   17c94:	str	r2, [r0, r1, lsl #3]
   17c98:	ldr	r1, [sp, #8]
   17c9c:	add	r0, r0, r1, lsl #3
   17ca0:	movw	r1, #4
   17ca4:	str	r1, [r0, #4]
   17ca8:	ldr	r0, [sp, #8]
   17cac:	add	r0, r0, #1
   17cb0:	str	r0, [sp, #8]
   17cb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cb8:	cmp	r0, #0
   17cbc:	bls	17d00 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   17cc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cc4:	ldr	r1, [sp, #4]
   17cc8:	add	r0, r1, r0
   17ccc:	str	r0, [sp, #4]
   17cd0:	ldr	r0, [fp, #-12]
   17cd4:	add	r1, sp, #4
   17cd8:	add	r1, r1, #8
   17cdc:	ldr	r2, [sp, #8]
   17ce0:	str	r0, [r1, r2, lsl #3]
   17ce4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ce8:	ldr	r2, [sp, #8]
   17cec:	add	r1, r1, r2, lsl #3
   17cf0:	str	r0, [r1, #4]
   17cf4:	ldr	r0, [sp, #8]
   17cf8:	add	r0, r0, #1
   17cfc:	str	r0, [sp, #8]
   17d00:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17d04:	cmp	r0, #0
   17d08:	bls	17d50 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   17d0c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17d10:	ldr	r1, [sp, #4]
   17d14:	add	r0, r1, r0
   17d18:	str	r0, [sp, #4]
   17d1c:	add	r0, sp, #4
   17d20:	add	r0, r0, #8
   17d24:	ldr	r1, [sp, #8]
   17d28:	ldr	r2, [pc, #444]	; 17eec <flatcc_builder_create_offset_vector_direct@@Base+0x328>
   17d2c:	ldr	r2, [pc, r2]
   17d30:	str	r2, [r0, r1, lsl #3]
   17d34:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17d38:	ldr	r2, [sp, #8]
   17d3c:	add	r0, r0, r2, lsl #3
   17d40:	str	r1, [r0, #4]
   17d44:	ldr	r0, [sp, #8]
   17d48:	add	r0, r0, #1
   17d4c:	str	r0, [sp, #8]
   17d50:	ldr	r0, [fp, #-8]
   17d54:	ldr	r0, [r0, #136]	; 0x88
   17d58:	ldr	r1, [sp, #4]
   17d5c:	sub	r0, r0, r1
   17d60:	str	r0, [fp, #-36]	; 0xffffffdc
   17d64:	movw	r0, #0
   17d68:	str	r0, [fp, #-44]	; 0xffffffd4
   17d6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17d70:	ldr	r1, [fp, #-16]
   17d74:	cmp	r0, r1
   17d78:	bcs	17ea8 <flatcc_builder_create_offset_vector_direct@@Base+0x2e4>
   17d7c:	ldr	r0, [fp, #-12]
   17d80:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17d84:	add	r0, r0, r1, lsl #2
   17d88:	ldr	r0, [r0]
   17d8c:	cmp	r0, #0
   17d90:	beq	17e20 <flatcc_builder_create_offset_vector_direct@@Base+0x25c>
   17d94:	ldr	r0, [fp, #-12]
   17d98:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17d9c:	ldr	r0, [r0, r1, lsl #2]
   17da0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17da4:	sub	r0, r0, r2
   17da8:	sub	r0, r0, r1, lsl #2
   17dac:	sub	r0, r0, #4
   17db0:	str	r0, [fp, #-40]	; 0xffffffd8
   17db4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17db8:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   17dbc:	ldr	r1, [fp, #-12]
   17dc0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17dc4:	add	r1, r1, r2, lsl #2
   17dc8:	str	r0, [r1]
   17dcc:	ldr	r0, [fp, #-20]	; 0xffffffec
   17dd0:	movw	r1, #0
   17dd4:	cmp	r0, r1
   17dd8:	beq	17e1c <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17ddc:	ldr	r0, [fp, #-20]	; 0xffffffec
   17de0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17de4:	add	r0, r0, r1
   17de8:	ldrb	r0, [r0]
   17dec:	cmp	r0, #0
   17df0:	beq	17df8 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   17df4:	b	17e18 <flatcc_builder_create_offset_vector_direct@@Base+0x254>
   17df8:	ldr	r0, [pc, #224]	; 17ee0 <flatcc_builder_create_offset_vector_direct@@Base+0x31c>
   17dfc:	add	r0, pc, r0
   17e00:	ldr	r1, [pc, #220]	; 17ee4 <flatcc_builder_create_offset_vector_direct@@Base+0x320>
   17e04:	add	r1, pc, r1
   17e08:	ldr	r2, [pc, #216]	; 17ee8 <flatcc_builder_create_offset_vector_direct@@Base+0x324>
   17e0c:	add	r3, pc, r2
   17e10:	movw	r2, #1457	; 0x5b1
   17e14:	bl	127a8 <__assert_fail@plt>
   17e18:	b	17e1c <flatcc_builder_create_offset_vector_direct@@Base+0x258>
   17e1c:	b	17e94 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17e20:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e24:	movw	r1, #0
   17e28:	cmp	r0, r1
   17e2c:	beq	17e70 <flatcc_builder_create_offset_vector_direct@@Base+0x2ac>
   17e30:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e34:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17e38:	add	r0, r0, r1
   17e3c:	ldrb	r0, [r0]
   17e40:	cmp	r0, #0
   17e44:	bne	17e4c <flatcc_builder_create_offset_vector_direct@@Base+0x288>
   17e48:	b	17e6c <flatcc_builder_create_offset_vector_direct@@Base+0x2a8>
   17e4c:	ldr	r0, [pc, #128]	; 17ed4 <flatcc_builder_create_offset_vector_direct@@Base+0x310>
   17e50:	add	r0, pc, r0
   17e54:	ldr	r1, [pc, #124]	; 17ed8 <flatcc_builder_create_offset_vector_direct@@Base+0x314>
   17e58:	add	r1, pc, r1
   17e5c:	ldr	r2, [pc, #120]	; 17edc <flatcc_builder_create_offset_vector_direct@@Base+0x318>
   17e60:	add	r3, pc, r2
   17e64:	movw	r2, #1461	; 0x5b5
   17e68:	bl	127a8 <__assert_fail@plt>
   17e6c:	b	17e90 <flatcc_builder_create_offset_vector_direct@@Base+0x2cc>
   17e70:	ldr	r0, [pc, #80]	; 17ec8 <flatcc_builder_create_offset_vector_direct@@Base+0x304>
   17e74:	add	r0, pc, r0
   17e78:	ldr	r1, [pc, #76]	; 17ecc <flatcc_builder_create_offset_vector_direct@@Base+0x308>
   17e7c:	add	r1, pc, r1
   17e80:	ldr	r2, [pc, #72]	; 17ed0 <flatcc_builder_create_offset_vector_direct@@Base+0x30c>
   17e84:	add	r3, pc, r2
   17e88:	movw	r2, #1463	; 0x5b7
   17e8c:	bl	127a8 <__assert_fail@plt>
   17e90:	b	17e94 <flatcc_builder_create_offset_vector_direct@@Base+0x2d0>
   17e94:	b	17e98 <flatcc_builder_create_offset_vector_direct@@Base+0x2d4>
   17e98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17e9c:	add	r0, r0, #1
   17ea0:	str	r0, [fp, #-44]	; 0xffffffd4
   17ea4:	b	17d6c <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   17ea8:	ldr	r0, [fp, #-8]
   17eac:	add	r1, sp, #4
   17eb0:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   17eb4:	str	r0, [fp, #-4]
   17eb8:	ldr	r0, [fp, #-4]
   17ebc:	mov	sp, fp
   17ec0:	pop	{fp, pc}
   17ec4:	svccc	0x00ffffff
   17ec8:	andeq	r6, r0, r3, ror #22
   17ecc:	muleq	r0, lr, r9
   17ed0:	andeq	r6, r0, r5, asr fp
   17ed4:	andeq	r6, r0, ip, lsl #24
   17ed8:	andeq	r5, r0, r2, asr #19
   17edc:	andeq	r6, r0, r9, ror fp
   17ee0:	andeq	r6, r0, pc, asr #23
   17ee4:	andeq	r5, r0, r6, lsl sl
   17ee8:	andeq	r6, r0, sp, asr #23
   17eec:	andeq	r7, r1, r0, lsl r3

00017ef0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17ef0:	push	{fp, lr}
   17ef4:	mov	fp, sp
   17ef8:	sub	sp, sp, #16
   17efc:	str	r0, [sp, #8]
   17f00:	str	r1, [sp, #4]
   17f04:	ldr	r0, [sp, #8]
   17f08:	ldr	r0, [r0, #32]
   17f0c:	ldrh	r0, [r0, #14]
   17f10:	cmp	r0, #5
   17f14:	bne	17f1c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   17f18:	b	17f3c <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   17f1c:	ldr	r0, [pc, #112]	; 17f94 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   17f20:	add	r0, pc, r0
   17f24:	ldr	r1, [pc, #108]	; 17f98 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   17f28:	add	r1, pc, r1
   17f2c:	ldr	r2, [pc, #104]	; 17f9c <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   17f30:	add	r3, pc, r2
   17f34:	movw	r2, #1493	; 0x5d5
   17f38:	bl	127a8 <__assert_fail@plt>
   17f3c:	ldr	r0, [sp, #8]
   17f40:	ldr	r1, [sp, #8]
   17f44:	ldr	r1, [r1, #16]
   17f48:	ldr	r2, [sp, #8]
   17f4c:	ldr	r2, [r2, #32]
   17f50:	ldr	r2, [r2, #20]
   17f54:	ldr	r3, [sp, #4]
   17f58:	bl	17bf8 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   17f5c:	str	r0, [sp]
   17f60:	movw	r1, #0
   17f64:	cmp	r1, r0
   17f68:	bne	17f78 <flatcc_builder_end_offset_vector_for_unions@@Base+0x88>
   17f6c:	movw	r0, #0
   17f70:	str	r0, [fp, #-4]
   17f74:	b	17f88 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   17f78:	ldr	r0, [sp, #8]
   17f7c:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   17f80:	ldr	r0, [sp]
   17f84:	str	r0, [fp, #-4]
   17f88:	ldr	r0, [fp, #-4]
   17f8c:	mov	sp, fp
   17f90:	pop	{fp, pc}
   17f94:	andeq	r5, r0, sp, lsr #26
   17f98:	strdeq	r5, [r0], -r2
   17f9c:	muleq	r0, r6, r3

00017fa0 <flatcc_builder_offset_vector_edit@@Base>:
   17fa0:	sub	sp, sp, #4
   17fa4:	str	r0, [sp]
   17fa8:	ldr	r0, [sp]
   17fac:	ldr	r0, [r0, #16]
   17fb0:	add	sp, sp, #4
   17fb4:	bx	lr

00017fb8 <flatcc_builder_offset_vector_count@@Base>:
   17fb8:	sub	sp, sp, #4
   17fbc:	str	r0, [sp]
   17fc0:	ldr	r0, [sp]
   17fc4:	ldr	r0, [r0, #32]
   17fc8:	ldr	r0, [r0, #20]
   17fcc:	add	sp, sp, #4
   17fd0:	bx	lr

00017fd4 <flatcc_builder_table_add_union@@Base>:
   17fd4:	push	{fp, lr}
   17fd8:	mov	fp, sp
   17fdc:	sub	sp, sp, #32
   17fe0:	str	r2, [fp, #-12]
   17fe4:	str	r3, [fp, #-8]
   17fe8:	str	r0, [sp, #16]
   17fec:	str	r1, [sp, #12]
   17ff0:	ldr	r0, [sp, #16]
   17ff4:	ldr	r0, [r0, #32]
   17ff8:	ldrh	r0, [r0, #14]
   17ffc:	cmp	r0, #3
   18000:	bne	18008 <flatcc_builder_table_add_union@@Base+0x34>
   18004:	b	18028 <flatcc_builder_table_add_union@@Base+0x54>
   18008:	ldr	r0, [pc, #388]	; 18194 <flatcc_builder_table_add_union@@Base+0x1c0>
   1800c:	add	r0, pc, r0
   18010:	ldr	r1, [pc, #384]	; 18198 <flatcc_builder_table_add_union@@Base+0x1c4>
   18014:	add	r1, pc, r1
   18018:	ldr	r2, [pc, #380]	; 1819c <flatcc_builder_table_add_union@@Base+0x1c8>
   1801c:	add	r3, pc, r2
   18020:	movw	r2, #1518	; 0x5ee
   18024:	bl	127a8 <__assert_fail@plt>
   18028:	ldrb	r0, [fp, #-12]
   1802c:	cmp	r0, #0
   18030:	bne	18088 <flatcc_builder_table_add_union@@Base+0xb4>
   18034:	ldr	r0, [fp, #-8]
   18038:	cmp	r0, #0
   1803c:	beq	18088 <flatcc_builder_table_add_union@@Base+0xb4>
   18040:	ldrb	r0, [fp, #-12]
   18044:	cmp	r0, #0
   18048:	bne	18058 <flatcc_builder_table_add_union@@Base+0x84>
   1804c:	ldr	r0, [fp, #-8]
   18050:	cmp	r0, #0
   18054:	bne	1805c <flatcc_builder_table_add_union@@Base+0x88>
   18058:	b	1807c <flatcc_builder_table_add_union@@Base+0xa8>
   1805c:	ldr	r0, [pc, #316]	; 181a0 <flatcc_builder_table_add_union@@Base+0x1cc>
   18060:	add	r0, pc, r0
   18064:	ldr	r1, [pc, #312]	; 181a4 <flatcc_builder_table_add_union@@Base+0x1d0>
   18068:	add	r1, pc, r1
   1806c:	ldr	r2, [pc, #308]	; 181a8 <flatcc_builder_table_add_union@@Base+0x1d4>
   18070:	add	r3, pc, r2
   18074:	movw	r2, #1519	; 0x5ef
   18078:	bl	127a8 <__assert_fail@plt>
   1807c:	mvn	r0, #0
   18080:	str	r0, [fp, #-4]
   18084:	b	18188 <flatcc_builder_table_add_union@@Base+0x1b4>
   18088:	ldr	r0, [fp, #-8]
   1808c:	cmp	r0, #0
   18090:	beq	18100 <flatcc_builder_table_add_union@@Base+0x12c>
   18094:	ldr	r0, [sp, #16]
   18098:	ldr	r1, [sp, #12]
   1809c:	bl	181c4 <flatcc_builder_table_add_offset@@Base>
   180a0:	str	r0, [sp, #8]
   180a4:	ldr	r0, [sp, #8]
   180a8:	movw	r1, #0
   180ac:	cmp	r0, r1
   180b0:	bne	180f4 <flatcc_builder_table_add_union@@Base+0x120>
   180b4:	ldr	r0, [sp, #8]
   180b8:	movw	r1, #0
   180bc:	cmp	r0, r1
   180c0:	beq	180c8 <flatcc_builder_table_add_union@@Base+0xf4>
   180c4:	b	180e8 <flatcc_builder_table_add_union@@Base+0x114>
   180c8:	ldr	r0, [pc, #220]	; 181ac <flatcc_builder_table_add_union@@Base+0x1d8>
   180cc:	add	r0, pc, r0
   180d0:	ldr	r1, [pc, #216]	; 181b0 <flatcc_builder_table_add_union@@Base+0x1dc>
   180d4:	add	r1, pc, r1
   180d8:	ldr	r2, [pc, #212]	; 181b4 <flatcc_builder_table_add_union@@Base+0x1e0>
   180dc:	add	r3, pc, r2
   180e0:	movw	r2, #1522	; 0x5f2
   180e4:	bl	127a8 <__assert_fail@plt>
   180e8:	mvn	r0, #0
   180ec:	str	r0, [fp, #-4]
   180f0:	b	18188 <flatcc_builder_table_add_union@@Base+0x1b4>
   180f4:	ldr	r0, [fp, #-8]
   180f8:	ldr	r1, [sp, #8]
   180fc:	str	r0, [r1]
   18100:	ldr	r0, [sp, #16]
   18104:	ldr	r1, [sp, #12]
   18108:	sub	r1, r1, #1
   1810c:	movw	r2, #1
   18110:	movw	r3, #1
   18114:	uxth	r3, r3
   18118:	bl	182f4 <flatcc_builder_table_add@@Base>
   1811c:	str	r0, [sp, #4]
   18120:	ldr	r0, [sp, #4]
   18124:	movw	r1, #0
   18128:	cmp	r0, r1
   1812c:	bne	18170 <flatcc_builder_table_add_union@@Base+0x19c>
   18130:	ldr	r0, [sp, #4]
   18134:	movw	r1, #0
   18138:	cmp	r0, r1
   1813c:	beq	18144 <flatcc_builder_table_add_union@@Base+0x170>
   18140:	b	18164 <flatcc_builder_table_add_union@@Base+0x190>
   18144:	ldr	r0, [pc, #108]	; 181b8 <flatcc_builder_table_add_union@@Base+0x1e4>
   18148:	add	r0, pc, r0
   1814c:	ldr	r1, [pc, #104]	; 181bc <flatcc_builder_table_add_union@@Base+0x1e8>
   18150:	add	r1, pc, r1
   18154:	ldr	r2, [pc, #100]	; 181c0 <flatcc_builder_table_add_union@@Base+0x1ec>
   18158:	add	r3, pc, r2
   1815c:	movw	r2, #1526	; 0x5f6
   18160:	bl	127a8 <__assert_fail@plt>
   18164:	mvn	r0, #0
   18168:	str	r0, [fp, #-4]
   1816c:	b	18188 <flatcc_builder_table_add_union@@Base+0x1b4>
   18170:	ldrb	r0, [fp, #-12]
   18174:	bl	1845c <flatcc_builder_table_add@@Base+0x168>
   18178:	ldr	r1, [sp, #4]
   1817c:	strb	r0, [r1]
   18180:	movw	r0, #0
   18184:	str	r0, [fp, #-4]
   18188:	ldr	r0, [fp, #-4]
   1818c:	mov	sp, fp
   18190:	pop	{fp, pc}
   18194:	andeq	r6, r0, sl, lsr r0
   18198:	andeq	r5, r0, r6, lsl #16
   1819c:	andeq	r6, r0, ip, lsl r3
   181a0:	andeq	r6, r0, r0, lsr r3
   181a4:			; <UNDEFINED> instruction: 0x000057b2
   181a8:	andeq	r6, r0, r8, asr #5
   181ac:	andeq	r6, r0, r6, ror #5
   181b0:	andeq	r5, r0, r6, asr #14
   181b4:	andeq	r6, r0, ip, asr r2
   181b8:	andeq	r6, r0, r4, ror r2
   181bc:	andeq	r5, r0, sl, asr #13
   181c0:	andeq	r6, r0, r0, ror #3

000181c4 <flatcc_builder_table_add_offset@@Base>:
   181c4:	push	{fp, lr}
   181c8:	mov	fp, sp
   181cc:	sub	sp, sp, #8
   181d0:	str	r0, [sp, #4]
   181d4:	str	r1, [sp]
   181d8:	ldr	r0, [sp, #4]
   181dc:	ldr	r0, [r0, #32]
   181e0:	ldrh	r0, [r0, #14]
   181e4:	cmp	r0, #3
   181e8:	bne	181f0 <flatcc_builder_table_add_offset@@Base+0x2c>
   181ec:	b	18210 <flatcc_builder_table_add_offset@@Base+0x4c>
   181f0:	ldr	r0, [pc, #212]	; 182cc <flatcc_builder_table_add_offset@@Base+0x108>
   181f4:	add	r0, pc, r0
   181f8:	ldr	r1, [pc, #208]	; 182d0 <flatcc_builder_table_add_offset@@Base+0x10c>
   181fc:	add	r1, pc, r1
   18200:	ldr	r2, [pc, #204]	; 182d4 <flatcc_builder_table_add_offset@@Base+0x110>
   18204:	add	r3, pc, r2
   18208:	movw	r2, #1811	; 0x713
   1820c:	bl	127a8 <__assert_fail@plt>
   18210:	ldr	r0, [sp]
   18214:	cmp	r0, #0
   18218:	blt	18230 <flatcc_builder_table_add_offset@@Base+0x6c>
   1821c:	ldr	r0, [sp]
   18220:	movw	r1, #32764	; 0x7ffc
   18224:	cmp	r0, r1
   18228:	bgt	18230 <flatcc_builder_table_add_offset@@Base+0x6c>
   1822c:	b	18250 <flatcc_builder_table_add_offset@@Base+0x8c>
   18230:	ldr	r0, [pc, #160]	; 182d8 <flatcc_builder_table_add_offset@@Base+0x114>
   18234:	add	r0, pc, r0
   18238:	ldr	r1, [pc, #156]	; 182dc <flatcc_builder_table_add_offset@@Base+0x118>
   1823c:	add	r1, pc, r1
   18240:	ldr	r2, [pc, #152]	; 182e0 <flatcc_builder_table_add_offset@@Base+0x11c>
   18244:	add	r3, pc, r2
   18248:	movw	r2, #1812	; 0x714
   1824c:	bl	127a8 <__assert_fail@plt>
   18250:	ldr	r0, [sp, #4]
   18254:	ldr	r0, [r0, #4]
   18258:	ldr	r1, [sp]
   1825c:	add	r0, r0, r1, lsl #1
   18260:	ldrh	r0, [r0]
   18264:	cmp	r0, #0
   18268:	beq	1828c <flatcc_builder_table_add_offset@@Base+0xc8>
   1826c:	ldr	r0, [pc, #116]	; 182e8 <flatcc_builder_table_add_offset@@Base+0x124>
   18270:	add	r0, pc, r0
   18274:	ldr	r1, [pc, #112]	; 182ec <flatcc_builder_table_add_offset@@Base+0x128>
   18278:	add	r1, pc, r1
   1827c:	ldr	r2, [pc, #108]	; 182f0 <flatcc_builder_table_add_offset@@Base+0x12c>
   18280:	add	r3, pc, r2
   18284:	movw	r2, #1819	; 0x71b
   18288:	bl	127a8 <__assert_fail@plt>
   1828c:	ldr	r0, [pc, #80]	; 182e4 <flatcc_builder_table_add_offset@@Base+0x120>
   18290:	ldr	r1, [sp]
   18294:	ldr	r2, [sp, #4]
   18298:	ldr	r2, [r2, #12]
   1829c:	eor	r1, r1, r2
   182a0:	mul	r1, r1, r0
   182a4:	eor	r1, r1, #4
   182a8:	mul	r0, r1, r0
   182ac:	ldr	r1, [sp, #4]
   182b0:	str	r0, [r1, #12]
   182b4:	ldr	r0, [sp, #4]
   182b8:	ldr	r1, [sp]
   182bc:	uxth	r1, r1
   182c0:	bl	19284 <flatcc_builder_table_add_copy@@Base+0x64>
   182c4:	mov	sp, fp
   182c8:	pop	{fp, pc}
   182cc:	andeq	r5, r0, r2, asr lr
   182d0:	andeq	r5, r0, lr, lsl r6
   182d4:	andeq	r6, r0, r6, lsr r5
   182d8:	andeq	r6, r0, r6, lsl #9
   182dc:	ldrdeq	r5, [r0], -lr
   182e0:	strdeq	r6, [r0], -r6	; <UNPREDICTABLE>
   182e4:			; <UNDEFINED> instruction: 0x9e3779b1
   182e8:	andeq	r6, r0, r7, ror #14
   182ec:	andeq	r5, r0, r2, lsr #11
   182f0:			; <UNDEFINED> instruction: 0x000064ba

000182f4 <flatcc_builder_table_add@@Base>:
   182f4:	push	{fp, lr}
   182f8:	mov	fp, sp
   182fc:	sub	sp, sp, #16
   18300:	str	r0, [fp, #-4]
   18304:	str	r1, [sp, #8]
   18308:	str	r2, [sp, #4]
   1830c:	strh	r3, [sp, #2]
   18310:	ldr	r0, [fp, #-4]
   18314:	ldr	r0, [r0, #32]
   18318:	ldrh	r0, [r0, #14]
   1831c:	cmp	r0, #3
   18320:	bne	18328 <flatcc_builder_table_add@@Base+0x34>
   18324:	b	18348 <flatcc_builder_table_add@@Base+0x54>
   18328:	ldr	r0, [pc, #260]	; 18434 <flatcc_builder_table_add@@Base+0x140>
   1832c:	add	r0, pc, r0
   18330:	ldr	r1, [pc, #256]	; 18438 <flatcc_builder_table_add@@Base+0x144>
   18334:	add	r1, pc, r1
   18338:	ldr	r2, [pc, #252]	; 1843c <flatcc_builder_table_add@@Base+0x148>
   1833c:	add	r3, pc, r2
   18340:	movw	r2, #1773	; 0x6ed
   18344:	bl	127a8 <__assert_fail@plt>
   18348:	ldr	r0, [sp, #8]
   1834c:	cmp	r0, #0
   18350:	blt	18368 <flatcc_builder_table_add@@Base+0x74>
   18354:	ldr	r0, [sp, #8]
   18358:	movw	r1, #32764	; 0x7ffc
   1835c:	cmp	r0, r1
   18360:	bgt	18368 <flatcc_builder_table_add@@Base+0x74>
   18364:	b	18388 <flatcc_builder_table_add@@Base+0x94>
   18368:	ldr	r0, [pc, #208]	; 18440 <flatcc_builder_table_add@@Base+0x14c>
   1836c:	add	r0, pc, r0
   18370:	ldr	r1, [pc, #204]	; 18444 <flatcc_builder_table_add@@Base+0x150>
   18374:	add	r1, pc, r1
   18378:	ldr	r2, [pc, #200]	; 18448 <flatcc_builder_table_add@@Base+0x154>
   1837c:	add	r3, pc, r2
   18380:	movw	r2, #1774	; 0x6ee
   18384:	bl	127a8 <__assert_fail@plt>
   18388:	ldrh	r0, [sp, #2]
   1838c:	ldr	r1, [fp, #-4]
   18390:	ldrh	r1, [r1, #130]	; 0x82
   18394:	cmp	r0, r1
   18398:	ble	183a8 <flatcc_builder_table_add@@Base+0xb4>
   1839c:	ldrh	r0, [sp, #2]
   183a0:	ldr	r1, [fp, #-4]
   183a4:	strh	r0, [r1, #130]	; 0x82
   183a8:	ldr	r0, [fp, #-4]
   183ac:	ldr	r0, [r0, #4]
   183b0:	ldr	r1, [sp, #8]
   183b4:	add	r0, r0, r1, lsl #1
   183b8:	ldrh	r0, [r0]
   183bc:	cmp	r0, #0
   183c0:	beq	183e4 <flatcc_builder_table_add@@Base+0xf0>
   183c4:	ldr	r0, [pc, #132]	; 18450 <flatcc_builder_table_add@@Base+0x15c>
   183c8:	add	r0, pc, r0
   183cc:	ldr	r1, [pc, #128]	; 18454 <flatcc_builder_table_add@@Base+0x160>
   183d0:	add	r1, pc, r1
   183d4:	ldr	r2, [pc, #124]	; 18458 <flatcc_builder_table_add@@Base+0x164>
   183d8:	add	r3, pc, r2
   183dc:	movw	r2, #1784	; 0x6f8
   183e0:	bl	127a8 <__assert_fail@plt>
   183e4:	ldr	r0, [pc, #96]	; 1844c <flatcc_builder_table_add@@Base+0x158>
   183e8:	ldr	r1, [sp, #8]
   183ec:	ldr	r2, [fp, #-4]
   183f0:	ldr	r2, [r2, #12]
   183f4:	eor	r1, r1, r2
   183f8:	mul	r1, r1, r0
   183fc:	ldr	r2, [sp, #4]
   18400:	eor	r1, r1, r2
   18404:	mul	r0, r1, r0
   18408:	ldr	r1, [fp, #-4]
   1840c:	str	r0, [r1, #12]
   18410:	ldr	r0, [fp, #-4]
   18414:	ldr	r1, [sp, #4]
   18418:	ldrh	r2, [sp, #2]
   1841c:	ldr	r3, [sp, #8]
   18420:	uxth	r2, r2
   18424:	uxth	r3, r3
   18428:	bl	190a0 <flatcc_builder_string_len@@Base+0x1c>
   1842c:	mov	sp, fp
   18430:	pop	{fp, pc}
   18434:	andeq	r5, r0, sl, lsl sp
   18438:	andeq	r5, r0, r6, ror #9
   1843c:	andeq	r6, r0, r4, lsr r3
   18440:	andeq	r6, r0, lr, asr #6
   18444:	andeq	r5, r0, r6, lsr #9
   18448:	strdeq	r6, [r0], -r4
   1844c:			; <UNDEFINED> instruction: 0x9e3779b1
   18450:	andeq	r6, r0, pc, lsl #12
   18454:	andeq	r5, r0, sl, asr #8
   18458:	muleq	r0, r8, r2
   1845c:	sub	sp, sp, #4
   18460:	strb	r0, [sp, #3]
   18464:	ldrb	r0, [sp, #3]
   18468:	add	sp, sp, #4
   1846c:	bx	lr

00018470 <flatcc_builder_table_add_union_vector@@Base>:
   18470:	push	{fp, lr}
   18474:	mov	fp, sp
   18478:	sub	sp, sp, #24
   1847c:	str	r2, [sp, #12]
   18480:	str	r3, [sp, #16]
   18484:	str	r0, [sp, #8]
   18488:	str	r1, [sp, #4]
   1848c:	ldr	r0, [sp, #8]
   18490:	ldr	r0, [r0, #32]
   18494:	ldrh	r0, [r0, #14]
   18498:	cmp	r0, #3
   1849c:	bne	184a4 <flatcc_builder_table_add_union_vector@@Base+0x34>
   184a0:	b	184c4 <flatcc_builder_table_add_union_vector@@Base+0x54>
   184a4:	ldr	r0, [pc, #420]	; 18650 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   184a8:	add	r0, pc, r0
   184ac:	ldr	r1, [pc, #416]	; 18654 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   184b0:	add	r1, pc, r1
   184b4:	ldr	r2, [pc, #412]	; 18658 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   184b8:	add	r3, pc, r2
   184bc:	movw	r2, #1536	; 0x600
   184c0:	bl	127a8 <__assert_fail@plt>
   184c4:	ldr	r0, [sp, #12]
   184c8:	cmp	r0, #0
   184cc:	movw	r0, #0
   184d0:	moveq	r0, #1
   184d4:	and	r0, r0, #1
   184d8:	ldr	r1, [sp, #16]
   184dc:	cmp	r1, #0
   184e0:	movw	r1, #0
   184e4:	moveq	r1, #1
   184e8:	and	r1, r1, #1
   184ec:	cmp	r0, r1
   184f0:	beq	18554 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   184f4:	ldr	r0, [sp, #12]
   184f8:	cmp	r0, #0
   184fc:	movw	r0, #0
   18500:	moveq	r0, #1
   18504:	and	r0, r0, #1
   18508:	ldr	r1, [sp, #16]
   1850c:	cmp	r1, #0
   18510:	movw	r1, #0
   18514:	moveq	r1, #1
   18518:	and	r1, r1, #1
   1851c:	cmp	r0, r1
   18520:	bne	18528 <flatcc_builder_table_add_union_vector@@Base+0xb8>
   18524:	b	18548 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   18528:	ldr	r0, [pc, #300]	; 1865c <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   1852c:	add	r0, pc, r0
   18530:	ldr	r1, [pc, #296]	; 18660 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18534:	add	r1, pc, r1
   18538:	ldr	r2, [pc, #292]	; 18664 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   1853c:	add	r3, pc, r2
   18540:	movw	r2, #1537	; 0x601
   18544:	bl	127a8 <__assert_fail@plt>
   18548:	mvn	r0, #0
   1854c:	str	r0, [fp, #-4]
   18550:	b	18644 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18554:	ldr	r0, [sp, #12]
   18558:	cmp	r0, #0
   1855c:	beq	1863c <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   18560:	ldr	r0, [sp, #8]
   18564:	ldr	r1, [sp, #4]
   18568:	sub	r1, r1, #1
   1856c:	bl	181c4 <flatcc_builder_table_add_offset@@Base>
   18570:	str	r0, [sp]
   18574:	ldr	r0, [sp]
   18578:	movw	r1, #0
   1857c:	cmp	r0, r1
   18580:	bne	185c4 <flatcc_builder_table_add_union_vector@@Base+0x154>
   18584:	ldr	r0, [sp]
   18588:	movw	r1, #0
   1858c:	cmp	r0, r1
   18590:	beq	18598 <flatcc_builder_table_add_union_vector@@Base+0x128>
   18594:	b	185b8 <flatcc_builder_table_add_union_vector@@Base+0x148>
   18598:	ldr	r0, [pc, #200]	; 18668 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   1859c:	add	r0, pc, r0
   185a0:	ldr	r1, [pc, #196]	; 1866c <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   185a4:	add	r1, pc, r1
   185a8:	ldr	r2, [pc, #192]	; 18670 <flatcc_builder_table_add_union_vector@@Base+0x200>
   185ac:	add	r3, pc, r2
   185b0:	movw	r2, #1540	; 0x604
   185b4:	bl	127a8 <__assert_fail@plt>
   185b8:	mvn	r0, #0
   185bc:	str	r0, [fp, #-4]
   185c0:	b	18644 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   185c4:	ldr	r0, [sp, #12]
   185c8:	ldr	r1, [sp]
   185cc:	str	r0, [r1]
   185d0:	ldr	r0, [sp, #8]
   185d4:	ldr	r1, [sp, #4]
   185d8:	bl	181c4 <flatcc_builder_table_add_offset@@Base>
   185dc:	str	r0, [sp]
   185e0:	ldr	r0, [sp]
   185e4:	movw	r1, #0
   185e8:	cmp	r0, r1
   185ec:	bne	18630 <flatcc_builder_table_add_union_vector@@Base+0x1c0>
   185f0:	ldr	r0, [sp]
   185f4:	movw	r1, #0
   185f8:	cmp	r0, r1
   185fc:	beq	18604 <flatcc_builder_table_add_union_vector@@Base+0x194>
   18600:	b	18624 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   18604:	ldr	r0, [pc, #104]	; 18674 <flatcc_builder_table_add_union_vector@@Base+0x204>
   18608:	add	r0, pc, r0
   1860c:	ldr	r1, [pc, #100]	; 18678 <flatcc_builder_table_add_union_vector@@Base+0x208>
   18610:	add	r1, pc, r1
   18614:	ldr	r2, [pc, #96]	; 1867c <flatcc_builder_table_add_union_vector@@Base+0x20c>
   18618:	add	r3, pc, r2
   1861c:	movw	r2, #1544	; 0x608
   18620:	bl	127a8 <__assert_fail@plt>
   18624:	mvn	r0, #0
   18628:	str	r0, [fp, #-4]
   1862c:	b	18644 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18630:	ldr	r0, [sp, #16]
   18634:	ldr	r1, [sp]
   18638:	str	r0, [r1]
   1863c:	movw	r0, #0
   18640:	str	r0, [fp, #-4]
   18644:	ldr	r0, [fp, #-4]
   18648:	mov	sp, fp
   1864c:	pop	{fp, pc}
   18650:	muleq	r0, lr, fp
   18654:	andeq	r5, r0, sl, ror #6
   18658:	andeq	r5, r0, r0, lsl pc
   1865c:	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   18660:	andeq	r5, r0, r6, ror #5
   18664:	andeq	r5, r0, ip, lsl #29
   18668:	andeq	r5, r0, r6, lsl lr
   1866c:	andeq	r5, r0, r6, ror r2
   18670:	andeq	r5, r0, ip, lsl lr
   18674:	andeq	r5, r0, sl, lsr #27
   18678:	andeq	r5, r0, sl, lsl #4
   1867c:			; <UNDEFINED> instruction: 0x00005db0

00018680 <flatcc_builder_create_union_vector@@Base>:
   18680:	push	{fp, lr}
   18684:	mov	fp, sp
   18688:	sub	sp, sp, #48	; 0x30
   1868c:	str	r1, [fp, #-4]
   18690:	str	r2, [fp, #-8]
   18694:	str	r3, [fp, #-12]
   18698:	mov	r1, r0
   1869c:	str	r0, [sp, #12]
   186a0:	mov	r0, r1
   186a4:	movw	r1, #0
   186a8:	and	r1, r1, #255	; 0xff
   186ac:	movw	r2, #8
   186b0:	bl	12778 <memset@plt>
   186b4:	ldr	r0, [fp, #-4]
   186b8:	bl	166bc <flatcc_builder_start_offset_vector@@Base>
   186bc:	cmp	r0, #0
   186c0:	beq	186c8 <flatcc_builder_create_union_vector@@Base+0x48>
   186c4:	b	187ac <flatcc_builder_create_union_vector@@Base+0x12c>
   186c8:	ldr	r0, [fp, #-4]
   186cc:	ldr	r1, [fp, #-12]
   186d0:	bl	15e50 <flatcc_builder_extend_offset_vector@@Base>
   186d4:	movw	r1, #0
   186d8:	cmp	r1, r0
   186dc:	bne	186e4 <flatcc_builder_create_union_vector@@Base+0x64>
   186e0:	b	187ac <flatcc_builder_create_union_vector@@Base+0x12c>
   186e4:	ldr	r0, [fp, #-4]
   186e8:	ldr	r1, [fp, #-12]
   186ec:	mov	r2, r1
   186f0:	str	r2, [sp, #8]
   186f4:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   186f8:	str	r0, [fp, #-16]
   186fc:	movw	r1, #0
   18700:	cmp	r1, r0
   18704:	bne	1870c <flatcc_builder_create_union_vector@@Base+0x8c>
   18708:	b	187ac <flatcc_builder_create_union_vector@@Base+0x12c>
   1870c:	ldr	r0, [fp, #-4]
   18710:	bl	17fa0 <flatcc_builder_offset_vector_edit@@Base>
   18714:	str	r0, [fp, #-20]	; 0xffffffec
   18718:	movw	r0, #0
   1871c:	str	r0, [sp, #24]
   18720:	ldr	r0, [sp, #24]
   18724:	ldr	r1, [fp, #-12]
   18728:	cmp	r0, r1
   1872c:	bcs	18770 <flatcc_builder_create_union_vector@@Base+0xf0>
   18730:	ldr	r0, [fp, #-8]
   18734:	ldr	r1, [sp, #24]
   18738:	ldrb	r0, [r0, r1, lsl #3]
   1873c:	ldr	r2, [fp, #-16]
   18740:	strb	r0, [r2, r1]
   18744:	ldr	r0, [fp, #-8]
   18748:	ldr	r1, [sp, #24]
   1874c:	add	r0, r0, r1, lsl #3
   18750:	ldr	r0, [r0, #4]
   18754:	ldr	r2, [fp, #-20]	; 0xffffffec
   18758:	add	r1, r2, r1, lsl #2
   1875c:	str	r0, [r1]
   18760:	ldr	r0, [sp, #24]
   18764:	add	r0, r0, #1
   18768:	str	r0, [sp, #24]
   1876c:	b	18720 <flatcc_builder_create_union_vector@@Base+0xa0>
   18770:	ldr	r1, [fp, #-4]
   18774:	ldr	r2, [fp, #-16]
   18778:	ldr	r3, [fp, #-20]	; 0xffffffec
   1877c:	ldr	r0, [fp, #-12]
   18780:	mov	ip, sp
   18784:	str	r0, [ip]
   18788:	add	r0, sp, #16
   1878c:	bl	187b4 <flatcc_builder_create_union_vector_direct@@Base>
   18790:	ldr	r0, [sp, #16]
   18794:	ldr	r1, [sp, #12]
   18798:	str	r0, [r1]
   1879c:	ldr	r0, [sp, #20]
   187a0:	str	r0, [r1, #4]
   187a4:	ldr	r0, [fp, #-4]
   187a8:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   187ac:	mov	sp, fp
   187b0:	pop	{fp, pc}

000187b4 <flatcc_builder_create_union_vector_direct@@Base>:
   187b4:	push	{fp, lr}
   187b8:	mov	fp, sp
   187bc:	sub	sp, sp, #32
   187c0:	ldr	ip, [fp, #8]
   187c4:	str	r1, [fp, #-4]
   187c8:	str	r2, [fp, #-8]
   187cc:	str	r3, [fp, #-12]
   187d0:	mov	r1, r0
   187d4:	str	r0, [sp, #16]
   187d8:	mov	r0, r1
   187dc:	movw	r1, #0
   187e0:	and	r1, r1, #255	; 0xff
   187e4:	movw	r2, #8
   187e8:	str	ip, [sp, #12]
   187ec:	bl	12778 <memset@plt>
   187f0:	ldr	r0, [fp, #-4]
   187f4:	ldr	r1, [fp, #-12]
   187f8:	ldr	r2, [fp, #8]
   187fc:	ldr	r3, [fp, #-8]
   18800:	bl	17bf8 <flatcc_builder_create_offset_vector_direct@@Base+0x34>
   18804:	ldr	r1, [sp, #16]
   18808:	str	r0, [r1, #4]
   1880c:	movw	r2, #0
   18810:	cmp	r2, r0
   18814:	bne	1881c <flatcc_builder_create_union_vector_direct@@Base+0x68>
   18818:	b	18860 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   1881c:	ldr	r0, [fp, #-4]
   18820:	ldr	r1, [fp, #-8]
   18824:	ldr	r2, [fp, #8]
   18828:	movw	r3, #1
   1882c:	movw	ip, #1
   18830:	uxth	ip, ip
   18834:	str	ip, [sp]
   18838:	mvn	ip, #0
   1883c:	str	ip, [sp, #4]
   18840:	bl	178ec <flatcc_builder_create_vector@@Base>
   18844:	ldr	r1, [sp, #16]
   18848:	str	r0, [r1]
   1884c:	movw	r2, #0
   18850:	cmp	r2, r0
   18854:	bne	1885c <flatcc_builder_create_union_vector_direct@@Base+0xa8>
   18858:	b	18860 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   1885c:	b	18860 <flatcc_builder_create_union_vector_direct@@Base+0xac>
   18860:	mov	sp, fp
   18864:	pop	{fp, pc}

00018868 <flatcc_builder_start_union_vector@@Base>:
   18868:	push	{fp, lr}
   1886c:	mov	fp, sp
   18870:	sub	sp, sp, #8
   18874:	str	r0, [sp]
   18878:	ldr	r0, [sp]
   1887c:	movw	r1, #4
   18880:	uxth	r1, r1
   18884:	bl	154a0 <flatcc_builder_start_buffer@@Base+0x178>
   18888:	cmp	r0, #0
   1888c:	beq	1889c <flatcc_builder_start_union_vector@@Base+0x34>
   18890:	mvn	r0, #0
   18894:	str	r0, [sp, #4]
   18898:	b	188e0 <flatcc_builder_start_union_vector@@Base+0x78>
   1889c:	ldr	r0, [sp]
   188a0:	ldr	r0, [r0, #32]
   188a4:	movw	r1, #8
   188a8:	str	r1, [r0, #16]
   188ac:	ldr	r0, [sp]
   188b0:	ldr	r0, [r0, #32]
   188b4:	movw	r1, #0
   188b8:	str	r1, [r0, #20]
   188bc:	ldr	r0, [sp]
   188c0:	ldr	r0, [r0, #32]
   188c4:	movw	r1, #7
   188c8:	strh	r1, [r0, #14]
   188cc:	ldr	r0, [sp]
   188d0:	mvn	r1, #3
   188d4:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   188d8:	movw	r0, #0
   188dc:	str	r0, [sp, #4]
   188e0:	ldr	r0, [sp, #4]
   188e4:	mov	sp, fp
   188e8:	pop	{fp, pc}

000188ec <flatcc_builder_end_union_vector@@Base>:
   188ec:	push	{fp, lr}
   188f0:	mov	fp, sp
   188f4:	sub	sp, sp, #40	; 0x28
   188f8:	str	r1, [fp, #-4]
   188fc:	mov	r1, r0
   18900:	str	r0, [sp, #4]
   18904:	mov	r0, r1
   18908:	movw	r1, #0
   1890c:	and	r1, r1, #255	; 0xff
   18910:	movw	r2, #8
   18914:	bl	12778 <memset@plt>
   18918:	ldr	r0, [fp, #-4]
   1891c:	ldr	r0, [r0, #32]
   18920:	ldrh	r0, [r0, #14]
   18924:	cmp	r0, #7
   18928:	bne	18930 <flatcc_builder_end_union_vector@@Base+0x44>
   1892c:	b	18950 <flatcc_builder_end_union_vector@@Base+0x64>
   18930:	ldr	r0, [pc, #260]	; 18a3c <flatcc_builder_end_union_vector@@Base+0x150>
   18934:	add	r0, pc, r0
   18938:	ldr	r1, [pc, #256]	; 18a40 <flatcc_builder_end_union_vector@@Base+0x154>
   1893c:	add	r1, pc, r1
   18940:	ldr	r2, [pc, #252]	; 18a44 <flatcc_builder_end_union_vector@@Base+0x158>
   18944:	add	r3, pc, r2
   18948:	movw	r2, #1617	; 0x651
   1894c:	bl	127a8 <__assert_fail@plt>
   18950:	ldr	r0, [fp, #-4]
   18954:	bl	18a48 <flatcc_builder_union_vector_count@@Base>
   18958:	str	r0, [sp, #16]
   1895c:	ldr	r0, [fp, #-4]
   18960:	ldr	r1, [sp, #16]
   18964:	movw	r2, #5
   18968:	mul	r1, r1, r2
   1896c:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   18970:	str	r0, [fp, #-16]
   18974:	movw	r1, #0
   18978:	cmp	r1, r0
   1897c:	bne	18984 <flatcc_builder_end_union_vector@@Base+0x98>
   18980:	b	18a34 <flatcc_builder_end_union_vector@@Base+0x148>
   18984:	ldr	r0, [fp, #-16]
   18988:	ldr	r1, [sp, #16]
   1898c:	add	r0, r0, r1, lsl #2
   18990:	str	r0, [fp, #-8]
   18994:	ldr	r0, [fp, #-4]
   18998:	bl	18a64 <flatcc_builder_union_vector_edit@@Base>
   1899c:	str	r0, [fp, #-12]
   189a0:	movw	r0, #0
   189a4:	str	r0, [sp, #20]
   189a8:	ldr	r0, [sp, #20]
   189ac:	ldr	r1, [sp, #16]
   189b0:	cmp	r0, r1
   189b4:	bcs	189f8 <flatcc_builder_end_union_vector@@Base+0x10c>
   189b8:	ldr	r0, [fp, #-12]
   189bc:	ldr	r1, [sp, #20]
   189c0:	ldrb	r0, [r0, r1, lsl #3]
   189c4:	ldr	r2, [fp, #-8]
   189c8:	strb	r0, [r2, r1]
   189cc:	ldr	r0, [fp, #-12]
   189d0:	ldr	r1, [sp, #20]
   189d4:	add	r0, r0, r1, lsl #3
   189d8:	ldr	r0, [r0, #4]
   189dc:	ldr	r2, [fp, #-16]
   189e0:	add	r1, r2, r1, lsl #2
   189e4:	str	r0, [r1]
   189e8:	ldr	r0, [sp, #20]
   189ec:	add	r0, r0, #1
   189f0:	str	r0, [sp, #20]
   189f4:	b	189a8 <flatcc_builder_end_union_vector@@Base+0xbc>
   189f8:	ldr	r1, [fp, #-4]
   189fc:	ldr	r2, [fp, #-8]
   18a00:	ldr	r3, [fp, #-16]
   18a04:	ldr	r0, [sp, #16]
   18a08:	mov	ip, sp
   18a0c:	str	r0, [ip]
   18a10:	add	r0, sp, #8
   18a14:	bl	187b4 <flatcc_builder_create_union_vector_direct@@Base>
   18a18:	ldr	r0, [sp, #8]
   18a1c:	ldr	r1, [sp, #4]
   18a20:	str	r0, [r1]
   18a24:	ldr	r0, [sp, #12]
   18a28:	str	r0, [r1, #4]
   18a2c:	ldr	r0, [fp, #-4]
   18a30:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   18a34:	mov	sp, fp
   18a38:	pop	{fp, pc}
   18a3c:	andeq	r5, r0, pc, lsl fp
   18a40:	ldrdeq	r4, [r0], -lr
   18a44:	andeq	r5, r0, r1, asr #22

00018a48 <flatcc_builder_union_vector_count@@Base>:
   18a48:	sub	sp, sp, #4
   18a4c:	str	r0, [sp]
   18a50:	ldr	r0, [sp]
   18a54:	ldr	r0, [r0, #32]
   18a58:	ldr	r0, [r0, #20]
   18a5c:	add	sp, sp, #4
   18a60:	bx	lr

00018a64 <flatcc_builder_union_vector_edit@@Base>:
   18a64:	sub	sp, sp, #4
   18a68:	str	r0, [sp]
   18a6c:	ldr	r0, [sp]
   18a70:	ldr	r0, [r0, #16]
   18a74:	add	sp, sp, #4
   18a78:	bx	lr

00018a7c <flatcc_builder_extend_union_vector@@Base>:
   18a7c:	push	{fp, lr}
   18a80:	mov	fp, sp
   18a84:	sub	sp, sp, #16
   18a88:	ldr	r2, [pc, #68]	; 18ad4 <flatcc_builder_extend_union_vector@@Base+0x58>
   18a8c:	str	r0, [sp, #8]
   18a90:	str	r1, [sp, #4]
   18a94:	ldr	r0, [sp, #8]
   18a98:	ldr	r1, [sp, #4]
   18a9c:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   18aa0:	cmp	r0, #0
   18aa4:	beq	18ab4 <flatcc_builder_extend_union_vector@@Base+0x38>
   18aa8:	movw	r0, #0
   18aac:	str	r0, [fp, #-4]
   18ab0:	b	18ac8 <flatcc_builder_extend_union_vector@@Base+0x4c>
   18ab4:	ldr	r0, [sp, #8]
   18ab8:	ldr	r1, [sp, #4]
   18abc:	lsl	r1, r1, #3
   18ac0:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   18ac4:	str	r0, [fp, #-4]
   18ac8:	ldr	r0, [fp, #-4]
   18acc:	mov	sp, fp
   18ad0:	pop	{fp, pc}
   18ad4:	svcne	0x00ffffff

00018ad8 <flatcc_builder_truncate_union_vector@@Base>:
   18ad8:	push	{fp, lr}
   18adc:	mov	fp, sp
   18ae0:	sub	sp, sp, #16
   18ae4:	str	r0, [sp, #8]
   18ae8:	str	r1, [sp, #4]
   18aec:	ldr	r0, [sp, #8]
   18af0:	ldr	r0, [r0, #32]
   18af4:	ldrh	r0, [r0, #14]
   18af8:	cmp	r0, #7
   18afc:	bne	18b04 <flatcc_builder_truncate_union_vector@@Base+0x2c>
   18b00:	b	18b24 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   18b04:	ldr	r0, [pc, #192]	; 18bcc <flatcc_builder_truncate_union_vector@@Base+0xf4>
   18b08:	add	r0, pc, r0
   18b0c:	ldr	r1, [pc, #188]	; 18bd0 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   18b10:	add	r1, pc, r1
   18b14:	ldr	r2, [pc, #184]	; 18bd4 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18b18:	add	r3, pc, r2
   18b1c:	movw	r2, #1665	; 0x681
   18b20:	bl	127a8 <__assert_fail@plt>
   18b24:	ldr	r0, [sp, #8]
   18b28:	ldr	r0, [r0, #32]
   18b2c:	ldr	r0, [r0, #20]
   18b30:	ldr	r1, [sp, #4]
   18b34:	cmp	r0, r1
   18b38:	bcs	18b84 <flatcc_builder_truncate_union_vector@@Base+0xac>
   18b3c:	ldr	r0, [sp, #8]
   18b40:	ldr	r0, [r0, #32]
   18b44:	ldr	r0, [r0, #20]
   18b48:	ldr	r1, [sp, #4]
   18b4c:	cmp	r0, r1
   18b50:	bcc	18b58 <flatcc_builder_truncate_union_vector@@Base+0x80>
   18b54:	b	18b78 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18b58:	ldr	r0, [pc, #120]	; 18bd8 <flatcc_builder_truncate_union_vector@@Base+0x100>
   18b5c:	add	r0, pc, r0
   18b60:	ldr	r1, [pc, #116]	; 18bdc <flatcc_builder_truncate_union_vector@@Base+0x104>
   18b64:	add	r1, pc, r1
   18b68:	ldr	r2, [pc, #112]	; 18be0 <flatcc_builder_truncate_union_vector@@Base+0x108>
   18b6c:	add	r3, pc, r2
   18b70:	movw	r2, #1666	; 0x682
   18b74:	bl	127a8 <__assert_fail@plt>
   18b78:	mvn	r0, #0
   18b7c:	str	r0, [fp, #-4]
   18b80:	b	18bc0 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   18b84:	ldr	r0, [sp, #4]
   18b88:	ldr	r1, [sp, #8]
   18b8c:	ldr	r1, [r1, #32]
   18b90:	ldr	r2, [r1, #20]
   18b94:	sub	r0, r2, r0
   18b98:	str	r0, [r1, #20]
   18b9c:	ldr	r0, [sp, #8]
   18ba0:	ldr	r1, [sp, #8]
   18ba4:	ldr	r1, [r1, #32]
   18ba8:	ldr	r1, [r1, #16]
   18bac:	ldr	r2, [sp, #4]
   18bb0:	mul	r1, r1, r2
   18bb4:	bl	16380 <flatcc_builder_truncate_vector@@Base+0x10c>
   18bb8:	movw	r0, #0
   18bbc:	str	r0, [fp, #-4]
   18bc0:	ldr	r0, [fp, #-4]
   18bc4:	mov	sp, fp
   18bc8:	pop	{fp, pc}
   18bcc:	andeq	r5, r0, fp, asr #18
   18bd0:	andeq	r4, r0, sl, lsl #26
   18bd4:	andeq	r5, r0, r0, asr #19
   18bd8:	andeq	r5, r0, fp, asr r3
   18bdc:			; <UNDEFINED> instruction: 0x00004cb6
   18be0:	andeq	r5, r0, ip, ror #18

00018be4 <flatcc_builder_union_vector_push@@Base>:
   18be4:	push	{fp, lr}
   18be8:	mov	fp, sp
   18bec:	sub	sp, sp, #24
   18bf0:	str	r1, [sp, #12]
   18bf4:	str	r2, [sp, #16]
   18bf8:	str	r0, [sp, #8]
   18bfc:	ldr	r0, [sp, #8]
   18c00:	ldr	r0, [r0, #32]
   18c04:	ldrh	r0, [r0, #14]
   18c08:	cmp	r0, #7
   18c0c:	bne	18c14 <flatcc_builder_union_vector_push@@Base+0x30>
   18c10:	b	18c34 <flatcc_builder_union_vector_push@@Base+0x50>
   18c14:	ldr	r0, [pc, #160]	; 18cbc <flatcc_builder_union_vector_push@@Base+0xd8>
   18c18:	add	r0, pc, r0
   18c1c:	ldr	r1, [pc, #156]	; 18cc0 <flatcc_builder_union_vector_push@@Base+0xdc>
   18c20:	add	r1, pc, r1
   18c24:	ldr	r2, [pc, #152]	; 18cc4 <flatcc_builder_union_vector_push@@Base+0xe0>
   18c28:	add	r3, pc, r2
   18c2c:	movw	r2, #1677	; 0x68d
   18c30:	bl	127a8 <__assert_fail@plt>
   18c34:	ldr	r0, [pc, #140]	; 18cc8 <flatcc_builder_union_vector_push@@Base+0xe4>
   18c38:	ldr	r1, [sp, #8]
   18c3c:	ldr	r1, [r1, #32]
   18c40:	ldr	r1, [r1, #20]
   18c44:	cmp	r1, r0
   18c48:	bne	18c58 <flatcc_builder_union_vector_push@@Base+0x74>
   18c4c:	movw	r0, #0
   18c50:	str	r0, [fp, #-4]
   18c54:	b	18cb0 <flatcc_builder_union_vector_push@@Base+0xcc>
   18c58:	ldr	r0, [sp, #8]
   18c5c:	ldr	r0, [r0, #32]
   18c60:	ldr	r1, [r0, #20]
   18c64:	add	r1, r1, #1
   18c68:	str	r1, [r0, #20]
   18c6c:	ldr	r0, [sp, #8]
   18c70:	movw	r1, #8
   18c74:	bl	15988 <flatcc_builder_start_struct@@Base+0xfc>
   18c78:	str	r0, [sp, #4]
   18c7c:	movw	r1, #0
   18c80:	cmp	r1, r0
   18c84:	bne	18c94 <flatcc_builder_union_vector_push@@Base+0xb0>
   18c88:	movw	r0, #0
   18c8c:	str	r0, [fp, #-4]
   18c90:	b	18cb0 <flatcc_builder_union_vector_push@@Base+0xcc>
   18c94:	ldr	r0, [sp, #4]
   18c98:	ldr	r1, [sp, #12]
   18c9c:	str	r1, [r0]
   18ca0:	ldr	r1, [sp, #16]
   18ca4:	str	r1, [r0, #4]
   18ca8:	ldr	r0, [sp, #4]
   18cac:	str	r0, [fp, #-4]
   18cb0:	ldr	r0, [fp, #-4]
   18cb4:	mov	sp, fp
   18cb8:	pop	{fp, pc}
   18cbc:	andeq	r5, r0, fp, lsr r8
   18cc0:	strdeq	r4, [r0], -sl
   18cc4:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   18cc8:	svcne	0x00ffffff

00018ccc <flatcc_builder_append_union_vector@@Base>:
   18ccc:	push	{fp, lr}
   18cd0:	mov	fp, sp
   18cd4:	sub	sp, sp, #16
   18cd8:	str	r0, [sp, #8]
   18cdc:	str	r1, [sp, #4]
   18ce0:	str	r2, [sp]
   18ce4:	ldr	r0, [sp, #8]
   18ce8:	ldr	r0, [r0, #32]
   18cec:	ldrh	r0, [r0, #14]
   18cf0:	cmp	r0, #7
   18cf4:	bne	18cfc <flatcc_builder_append_union_vector@@Base+0x30>
   18cf8:	b	18d1c <flatcc_builder_append_union_vector@@Base+0x50>
   18cfc:	ldr	r0, [pc, #96]	; 18d64 <flatcc_builder_append_union_vector@@Base+0x98>
   18d00:	add	r0, pc, r0
   18d04:	ldr	r1, [pc, #92]	; 18d68 <flatcc_builder_append_union_vector@@Base+0x9c>
   18d08:	add	r1, pc, r1
   18d0c:	ldr	r2, [pc, #88]	; 18d6c <flatcc_builder_append_union_vector@@Base+0xa0>
   18d10:	add	r3, pc, r2
   18d14:	movw	r2, #1692	; 0x69c
   18d18:	bl	127a8 <__assert_fail@plt>
   18d1c:	ldr	r2, [pc, #76]	; 18d70 <flatcc_builder_append_union_vector@@Base+0xa4>
   18d20:	ldr	r0, [sp, #8]
   18d24:	ldr	r1, [sp]
   18d28:	bl	15b4c <flatcc_builder_extend_vector@@Base+0x6c>
   18d2c:	cmp	r0, #0
   18d30:	beq	18d40 <flatcc_builder_append_union_vector@@Base+0x74>
   18d34:	movw	r0, #0
   18d38:	str	r0, [fp, #-4]
   18d3c:	b	18d58 <flatcc_builder_append_union_vector@@Base+0x8c>
   18d40:	ldr	r0, [sp, #8]
   18d44:	ldr	r1, [sp, #4]
   18d48:	ldr	r2, [sp]
   18d4c:	lsl	r2, r2, #3
   18d50:	bl	15d34 <flatcc_builder_vector_push@@Base+0x110>
   18d54:	str	r0, [fp, #-4]
   18d58:	ldr	r0, [fp, #-4]
   18d5c:	mov	sp, fp
   18d60:	pop	{fp, pc}
   18d64:	andeq	r5, r0, r3, asr r7
   18d68:	andeq	r4, r0, r2, lsl fp
   18d6c:	andeq	r5, r0, sl, ror r8
   18d70:	svcne	0x00ffffff

00018d74 <flatcc_builder_create_string@@Base>:
   18d74:	push	{fp, lr}
   18d78:	mov	fp, sp
   18d7c:	sub	sp, sp, #96	; 0x60
   18d80:	str	r0, [fp, #-8]
   18d84:	str	r1, [fp, #-12]
   18d88:	str	r2, [fp, #-16]
   18d8c:	ldr	r0, [fp, #-16]
   18d90:	cmn	r0, #1
   18d94:	bls	18da4 <flatcc_builder_create_string@@Base+0x30>
   18d98:	movw	r0, #0
   18d9c:	str	r0, [fp, #-4]
   18da0:	b	18ec0 <flatcc_builder_create_string@@Base+0x14c>
   18da4:	ldr	r0, [fp, #-16]
   18da8:	bl	14cc8 <flatcc_builder_embed_buffer@@Base+0x388>
   18dac:	str	r0, [fp, #-24]	; 0xffffffe8
   18db0:	ldr	r0, [fp, #-8]
   18db4:	ldr	r1, [fp, #-16]
   18db8:	add	r1, r1, #1
   18dbc:	mov	r2, #4
   18dc0:	bl	14c94 <flatcc_builder_embed_buffer@@Base+0x354>
   18dc4:	add	r0, r0, #1
   18dc8:	str	r0, [fp, #-20]	; 0xffffffec
   18dcc:	mov	r0, #0
   18dd0:	str	r0, [sp]
   18dd4:	str	r0, [sp, #4]
   18dd8:	ldr	r0, [sp]
   18ddc:	add	r0, r0, #4
   18de0:	str	r0, [sp]
   18de4:	mov	r0, sp
   18de8:	add	r0, r0, #8
   18dec:	ldr	r1, [sp, #4]
   18df0:	sub	r2, fp, #24
   18df4:	str	r2, [r0, r1, lsl #3]
   18df8:	ldr	r1, [sp, #4]
   18dfc:	add	r0, r0, r1, lsl #3
   18e00:	movw	r1, #4
   18e04:	str	r1, [r0, #4]
   18e08:	ldr	r0, [sp, #4]
   18e0c:	add	r0, r0, #1
   18e10:	str	r0, [sp, #4]
   18e14:	ldr	r0, [fp, #-16]
   18e18:	cmp	r0, #0
   18e1c:	bls	18e60 <flatcc_builder_create_string@@Base+0xec>
   18e20:	ldr	r0, [fp, #-16]
   18e24:	ldr	r1, [sp]
   18e28:	add	r0, r1, r0
   18e2c:	str	r0, [sp]
   18e30:	ldr	r0, [fp, #-12]
   18e34:	mov	r1, sp
   18e38:	add	r1, r1, #8
   18e3c:	ldr	r2, [sp, #4]
   18e40:	str	r0, [r1, r2, lsl #3]
   18e44:	ldr	r0, [fp, #-16]
   18e48:	ldr	r2, [sp, #4]
   18e4c:	add	r1, r1, r2, lsl #3
   18e50:	str	r0, [r1, #4]
   18e54:	ldr	r0, [sp, #4]
   18e58:	add	r0, r0, #1
   18e5c:	str	r0, [sp, #4]
   18e60:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e64:	cmp	r0, #0
   18e68:	bls	18eb0 <flatcc_builder_create_string@@Base+0x13c>
   18e6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18e70:	ldr	r1, [sp]
   18e74:	add	r0, r1, r0
   18e78:	str	r0, [sp]
   18e7c:	mov	r0, sp
   18e80:	add	r0, r0, #8
   18e84:	ldr	r1, [sp, #4]
   18e88:	ldr	r2, [pc, #60]	; 18ecc <flatcc_builder_create_string@@Base+0x158>
   18e8c:	ldr	r2, [pc, r2]
   18e90:	str	r2, [r0, r1, lsl #3]
   18e94:	ldr	r1, [fp, #-20]	; 0xffffffec
   18e98:	ldr	r2, [sp, #4]
   18e9c:	add	r0, r0, r2, lsl #3
   18ea0:	str	r1, [r0, #4]
   18ea4:	ldr	r0, [sp, #4]
   18ea8:	add	r0, r0, #1
   18eac:	str	r0, [sp, #4]
   18eb0:	ldr	r0, [fp, #-8]
   18eb4:	mov	r1, sp
   18eb8:	bl	14cdc <flatcc_builder_embed_buffer@@Base+0x39c>
   18ebc:	str	r0, [fp, #-4]
   18ec0:	ldr	r0, [fp, #-4]
   18ec4:	mov	sp, fp
   18ec8:	pop	{fp, pc}
   18ecc:			; <UNDEFINED> instruction: 0x000161b0

00018ed0 <flatcc_builder_create_string_str@@Base>:
   18ed0:	push	{fp, lr}
   18ed4:	mov	fp, sp
   18ed8:	sub	sp, sp, #24
   18edc:	str	r0, [fp, #-4]
   18ee0:	str	r1, [fp, #-8]
   18ee4:	ldr	r0, [fp, #-4]
   18ee8:	ldr	r1, [fp, #-8]
   18eec:	ldr	r2, [fp, #-8]
   18ef0:	str	r0, [sp, #12]
   18ef4:	mov	r0, r2
   18ef8:	str	r1, [sp, #8]
   18efc:	bl	12760 <strlen@plt>
   18f00:	ldr	r1, [sp, #12]
   18f04:	str	r0, [sp, #4]
   18f08:	mov	r0, r1
   18f0c:	ldr	r1, [sp, #8]
   18f10:	ldr	r2, [sp, #4]
   18f14:	bl	18d74 <flatcc_builder_create_string@@Base>
   18f18:	mov	sp, fp
   18f1c:	pop	{fp, pc}

00018f20 <flatcc_builder_create_string_strn@@Base>:
   18f20:	push	{fp, lr}
   18f24:	mov	fp, sp
   18f28:	sub	sp, sp, #24
   18f2c:	str	r0, [fp, #-4]
   18f30:	str	r1, [fp, #-8]
   18f34:	str	r2, [sp, #12]
   18f38:	ldr	r0, [fp, #-4]
   18f3c:	ldr	r1, [fp, #-8]
   18f40:	ldr	r2, [fp, #-8]
   18f44:	ldr	r3, [sp, #12]
   18f48:	str	r0, [sp, #8]
   18f4c:	mov	r0, r2
   18f50:	str	r1, [sp, #4]
   18f54:	mov	r1, r3
   18f58:	bl	16214 <flatcc_builder_append_string_strn@@Base+0x5c>
   18f5c:	ldr	r1, [sp, #8]
   18f60:	str	r0, [sp]
   18f64:	mov	r0, r1
   18f68:	ldr	r1, [sp, #4]
   18f6c:	ldr	r2, [sp]
   18f70:	bl	18d74 <flatcc_builder_create_string@@Base>
   18f74:	mov	sp, fp
   18f78:	pop	{fp, pc}

00018f7c <flatcc_builder_end_string@@Base>:
   18f7c:	push	{fp, lr}
   18f80:	mov	fp, sp
   18f84:	sub	sp, sp, #16
   18f88:	str	r0, [sp, #8]
   18f8c:	ldr	r0, [sp, #8]
   18f90:	ldr	r0, [r0, #32]
   18f94:	ldrh	r0, [r0, #14]
   18f98:	cmp	r0, #6
   18f9c:	bne	18fa4 <flatcc_builder_end_string@@Base+0x28>
   18fa0:	b	18fc4 <flatcc_builder_end_string@@Base+0x48>
   18fa4:	ldr	r0, [pc, #168]	; 19054 <flatcc_builder_end_string@@Base+0xd8>
   18fa8:	add	r0, pc, r0
   18fac:	ldr	r1, [pc, #164]	; 19058 <flatcc_builder_end_string@@Base+0xdc>
   18fb0:	add	r1, pc, r1
   18fb4:	ldr	r2, [pc, #160]	; 1905c <flatcc_builder_end_string@@Base+0xe0>
   18fb8:	add	r3, pc, r2
   18fbc:	movw	r2, #1732	; 0x6c4
   18fc0:	bl	127a8 <__assert_fail@plt>
   18fc4:	ldr	r0, [sp, #8]
   18fc8:	ldr	r0, [r0, #32]
   18fcc:	ldr	r0, [r0, #20]
   18fd0:	ldr	r1, [sp, #8]
   18fd4:	ldr	r1, [r1, #20]
   18fd8:	cmp	r0, r1
   18fdc:	bne	18fe4 <flatcc_builder_end_string@@Base+0x68>
   18fe0:	b	19004 <flatcc_builder_end_string@@Base+0x88>
   18fe4:	ldr	r0, [pc, #116]	; 19060 <flatcc_builder_end_string@@Base+0xe4>
   18fe8:	add	r0, pc, r0
   18fec:	ldr	r1, [pc, #112]	; 19064 <flatcc_builder_end_string@@Base+0xe8>
   18ff0:	add	r1, pc, r1
   18ff4:	ldr	r2, [pc, #108]	; 19068 <flatcc_builder_end_string@@Base+0xec>
   18ff8:	add	r3, pc, r2
   18ffc:	movw	r2, #1733	; 0x6c5
   19000:	bl	127a8 <__assert_fail@plt>
   19004:	ldr	r0, [sp, #8]
   19008:	ldr	r1, [sp, #8]
   1900c:	ldr	r1, [r1, #16]
   19010:	ldr	r2, [sp, #8]
   19014:	ldr	r2, [r2, #20]
   19018:	bl	18d74 <flatcc_builder_create_string@@Base>
   1901c:	str	r0, [sp, #4]
   19020:	movw	r1, #0
   19024:	cmp	r1, r0
   19028:	bne	19038 <flatcc_builder_end_string@@Base+0xbc>
   1902c:	movw	r0, #0
   19030:	str	r0, [fp, #-4]
   19034:	b	19048 <flatcc_builder_end_string@@Base+0xcc>
   19038:	ldr	r0, [sp, #8]
   1903c:	bl	157d0 <flatcc_builder_end_buffer@@Base+0x164>
   19040:	ldr	r0, [sp, #4]
   19044:	str	r0, [fp, #-4]
   19048:	ldr	r0, [fp, #-4]
   1904c:	mov	sp, fp
   19050:	pop	{fp, pc}
   19054:	andeq	r4, r0, lr, lsr #27
   19058:	andeq	r4, r0, sl, ror #16
   1905c:	andeq	r5, r0, r1, asr r6
   19060:	andeq	r5, r0, r4, ror #12
   19064:	andeq	r4, r0, sl, lsr #16
   19068:	andeq	r5, r0, r1, lsl r6

0001906c <flatcc_builder_string_edit@@Base>:
   1906c:	sub	sp, sp, #4
   19070:	str	r0, [sp]
   19074:	ldr	r0, [sp]
   19078:	ldr	r0, [r0, #16]
   1907c:	add	sp, sp, #4
   19080:	bx	lr

00019084 <flatcc_builder_string_len@@Base>:
   19084:	sub	sp, sp, #4
   19088:	str	r0, [sp]
   1908c:	ldr	r0, [sp]
   19090:	ldr	r0, [r0, #32]
   19094:	ldr	r0, [r0, #20]
   19098:	add	sp, sp, #4
   1909c:	bx	lr
   190a0:	push	{fp, lr}
   190a4:	mov	fp, sp
   190a8:	sub	sp, sp, #24
   190ac:	str	r0, [fp, #-8]
   190b0:	str	r1, [sp, #12]
   190b4:	strh	r2, [sp, #10]
   190b8:	strh	r3, [sp, #8]
   190bc:	ldr	r0, [fp, #-8]
   190c0:	ldr	r0, [r0, #20]
   190c4:	ldrh	r1, [sp, #10]
   190c8:	add	r0, r0, r1
   190cc:	sub	r0, r0, #1
   190d0:	ldrh	r1, [sp, #10]
   190d4:	sub	r1, r1, #1
   190d8:	mvn	r2, #0
   190dc:	eor	r1, r1, r2
   190e0:	and	r0, r0, r1
   190e4:	str	r0, [sp, #4]
   190e8:	ldr	r0, [sp, #4]
   190ec:	ldr	r1, [sp, #12]
   190f0:	add	r0, r0, r1
   190f4:	ldr	r1, [fp, #-8]
   190f8:	str	r0, [r1, #20]
   190fc:	ldr	r1, [fp, #-8]
   19100:	ldr	r1, [r1, #24]
   19104:	cmp	r0, r1
   19108:	bcc	1913c <flatcc_builder_string_len@@Base+0xb8>
   1910c:	ldr	r0, [fp, #-8]
   19110:	ldr	r1, [fp, #-8]
   19114:	ldr	r1, [r1, #20]
   19118:	add	r1, r1, #1
   1911c:	movw	r2, #65532	; 0xfffc
   19120:	bl	19ae4 <flatcc_builder_get_emit_context@@Base+0x40>
   19124:	cmp	r0, #0
   19128:	beq	19138 <flatcc_builder_string_len@@Base+0xb4>
   1912c:	movw	r0, #0
   19130:	str	r0, [fp, #-4]
   19134:	b	19190 <flatcc_builder_string_len@@Base+0x10c>
   19138:	b	1913c <flatcc_builder_string_len@@Base+0xb8>
   1913c:	ldr	r0, [sp, #4]
   19140:	add	r0, r0, #4
   19144:	ldr	r1, [fp, #-8]
   19148:	ldr	r1, [r1, #4]
   1914c:	ldrh	r2, [sp, #8]
   19150:	add	r1, r1, r2, lsl #1
   19154:	strh	r0, [r1]
   19158:	ldrh	r0, [sp, #8]
   1915c:	ldr	r1, [fp, #-8]
   19160:	ldrh	r1, [r1, #8]
   19164:	cmp	r0, r1
   19168:	blt	1917c <flatcc_builder_string_len@@Base+0xf8>
   1916c:	ldrh	r0, [sp, #8]
   19170:	add	r0, r0, #1
   19174:	ldr	r1, [fp, #-8]
   19178:	strh	r0, [r1, #8]
   1917c:	ldr	r0, [fp, #-8]
   19180:	ldr	r0, [r0, #16]
   19184:	ldr	r1, [sp, #4]
   19188:	add	r0, r0, r1
   1918c:	str	r0, [fp, #-4]
   19190:	ldr	r0, [fp, #-4]
   19194:	mov	sp, fp
   19198:	pop	{fp, pc}

0001919c <flatcc_builder_table_edit@@Base>:
   1919c:	push	{fp, lr}
   191a0:	mov	fp, sp
   191a4:	sub	sp, sp, #8
   191a8:	str	r0, [sp, #4]
   191ac:	str	r1, [sp]
   191b0:	ldr	r0, [sp, #4]
   191b4:	ldr	r0, [r0, #32]
   191b8:	ldrh	r0, [r0, #14]
   191bc:	cmp	r0, #3
   191c0:	bne	191c8 <flatcc_builder_table_edit@@Base+0x2c>
   191c4:	b	191e8 <flatcc_builder_table_edit@@Base+0x4c>
   191c8:	ldr	r0, [pc, #68]	; 19214 <flatcc_builder_table_edit@@Base+0x78>
   191cc:	add	r0, pc, r0
   191d0:	ldr	r1, [pc, #64]	; 19218 <flatcc_builder_table_edit@@Base+0x7c>
   191d4:	add	r1, pc, r1
   191d8:	ldr	r2, [pc, #60]	; 1921c <flatcc_builder_table_edit@@Base+0x80>
   191dc:	add	r3, pc, r2
   191e0:	movw	r2, #1794	; 0x702
   191e4:	bl	127a8 <__assert_fail@plt>
   191e8:	ldr	r0, [sp, #4]
   191ec:	ldr	r0, [r0, #16]
   191f0:	ldr	r1, [sp, #4]
   191f4:	ldr	r1, [r1, #20]
   191f8:	add	r0, r0, r1
   191fc:	ldr	r1, [sp]
   19200:	movw	r2, #0
   19204:	sub	r1, r2, r1
   19208:	add	r0, r0, r1
   1920c:	mov	sp, fp
   19210:	pop	{fp, pc}
   19214:	andeq	r4, r0, sl, ror lr
   19218:	andeq	r4, r0, r6, asr #12
   1921c:	andeq	r5, r0, r2, lsr #10

00019220 <flatcc_builder_table_add_copy@@Base>:
   19220:	push	{fp, lr}
   19224:	mov	fp, sp
   19228:	sub	sp, sp, #24
   1922c:	ldr	ip, [fp, #8]
   19230:	str	r0, [fp, #-4]
   19234:	str	r1, [fp, #-8]
   19238:	str	r2, [sp, #12]
   1923c:	str	r3, [sp, #8]
   19240:	strh	ip, [sp, #6]
   19244:	ldr	r0, [fp, #-4]
   19248:	ldr	r1, [fp, #-8]
   1924c:	ldr	r2, [sp, #8]
   19250:	ldrh	r3, [sp, #6]
   19254:	bl	182f4 <flatcc_builder_table_add@@Base>
   19258:	str	r0, [sp]
   1925c:	movw	r1, #0
   19260:	cmp	r0, r1
   19264:	beq	19278 <flatcc_builder_table_add_copy@@Base+0x58>
   19268:	ldr	r0, [sp]
   1926c:	ldr	r1, [sp, #12]
   19270:	ldr	r2, [sp, #8]
   19274:	bl	12718 <memcpy@plt>
   19278:	ldr	r0, [sp]
   1927c:	mov	sp, fp
   19280:	pop	{fp, pc}
   19284:	push	{fp, lr}
   19288:	mov	fp, sp
   1928c:	sub	sp, sp, #16
   19290:	str	r0, [sp, #8]
   19294:	strh	r1, [sp, #6]
   19298:	ldr	r0, [sp, #8]
   1929c:	ldr	r0, [r0, #20]
   192a0:	add	r0, r0, #4
   192a4:	sub	r0, r0, #1
   192a8:	mvn	r1, #3
   192ac:	and	r0, r0, r1
   192b0:	str	r0, [sp]
   192b4:	ldr	r0, [sp]
   192b8:	add	r0, r0, #4
   192bc:	ldr	r1, [sp, #8]
   192c0:	str	r0, [r1, #20]
   192c4:	ldr	r1, [sp, #8]
   192c8:	ldr	r1, [r1, #24]
   192cc:	cmp	r0, r1
   192d0:	bls	19300 <flatcc_builder_table_add_copy@@Base+0xe0>
   192d4:	ldr	r0, [sp, #8]
   192d8:	ldr	r1, [sp, #8]
   192dc:	ldr	r1, [r1, #20]
   192e0:	movw	r2, #65532	; 0xfffc
   192e4:	bl	19ae4 <flatcc_builder_get_emit_context@@Base+0x40>
   192e8:	cmp	r0, #0
   192ec:	beq	192fc <flatcc_builder_table_add_copy@@Base+0xdc>
   192f0:	movw	r0, #0
   192f4:	str	r0, [fp, #-4]
   192f8:	b	1936c <flatcc_builder_table_add_copy@@Base+0x14c>
   192fc:	b	19300 <flatcc_builder_table_add_copy@@Base+0xe0>
   19300:	ldr	r0, [sp]
   19304:	add	r0, r0, #4
   19308:	ldr	r1, [sp, #8]
   1930c:	ldr	r1, [r1, #4]
   19310:	ldrh	r2, [sp, #6]
   19314:	add	r1, r1, r2, lsl #1
   19318:	strh	r0, [r1]
   1931c:	ldrh	r0, [sp, #6]
   19320:	ldr	r1, [sp, #8]
   19324:	ldrh	r1, [r1, #8]
   19328:	cmp	r0, r1
   1932c:	blt	19340 <flatcc_builder_table_add_copy@@Base+0x120>
   19330:	ldrh	r0, [sp, #6]
   19334:	add	r0, r0, #1
   19338:	ldr	r1, [sp, #8]
   1933c:	strh	r0, [r1, #8]
   19340:	ldr	r0, [sp]
   19344:	ldr	r1, [sp, #8]
   19348:	ldr	r2, [r1]
   1934c:	add	r3, r2, #2
   19350:	str	r3, [r1]
   19354:	strh	r0, [r2]
   19358:	ldr	r0, [sp, #8]
   1935c:	ldr	r0, [r0, #16]
   19360:	ldr	r1, [sp]
   19364:	add	r0, r0, r1
   19368:	str	r0, [fp, #-4]
   1936c:	ldr	r0, [fp, #-4]
   19370:	mov	sp, fp
   19374:	pop	{fp, pc}

00019378 <flatcc_builder_push_buffer_alignment@@Base>:
   19378:	sub	sp, sp, #8
   1937c:	str	r0, [sp, #4]
   19380:	ldr	r0, [sp, #4]
   19384:	ldrh	r0, [r0, #128]	; 0x80
   19388:	strh	r0, [sp, #2]
   1938c:	ldr	r0, [sp, #4]
   19390:	movw	r1, #4
   19394:	strh	r1, [r0, #128]	; 0x80
   19398:	ldrh	r0, [sp, #2]
   1939c:	add	sp, sp, #8
   193a0:	bx	lr

000193a4 <flatcc_builder_pop_buffer_alignment@@Base>:
   193a4:	push	{fp, lr}
   193a8:	mov	fp, sp
   193ac:	sub	sp, sp, #8
   193b0:	str	r0, [sp, #4]
   193b4:	strh	r1, [sp, #2]
   193b8:	ldr	r0, [sp, #4]
   193bc:	ldrh	r1, [sp, #2]
   193c0:	bl	151a8 <flatcc_builder_create_buffer@@Base+0x3a8>
   193c4:	mov	sp, fp
   193c8:	pop	{fp, pc}

000193cc <flatcc_builder_get_buffer_alignment@@Base>:
   193cc:	sub	sp, sp, #4
   193d0:	str	r0, [sp]
   193d4:	ldr	r0, [sp]
   193d8:	ldrh	r0, [r0, #128]	; 0x80
   193dc:	add	sp, sp, #4
   193e0:	bx	lr

000193e4 <flatcc_builder_set_vtable_clustering@@Base>:
   193e4:	sub	sp, sp, #8
   193e8:	str	r0, [sp, #4]
   193ec:	str	r1, [sp]
   193f0:	ldr	r0, [sp]
   193f4:	cmp	r0, #0
   193f8:	movw	r0, #0
   193fc:	movne	r0, #1
   19400:	mvn	r1, #0
   19404:	eor	r0, r0, r1
   19408:	and	r0, r0, #1
   1940c:	ldr	r1, [sp, #4]
   19410:	str	r0, [r1, #180]	; 0xb4
   19414:	add	sp, sp, #8
   19418:	bx	lr

0001941c <flatcc_builder_set_block_align@@Base>:
   1941c:	sub	sp, sp, #8
   19420:	str	r0, [sp, #4]
   19424:	strh	r1, [sp, #2]
   19428:	ldrh	r0, [sp, #2]
   1942c:	ldr	r1, [sp, #4]
   19430:	strh	r0, [r1, #132]	; 0x84
   19434:	add	sp, sp, #8
   19438:	bx	lr

0001943c <flatcc_builder_get_level@@Base>:
   1943c:	sub	sp, sp, #4
   19440:	str	r0, [sp]
   19444:	ldr	r0, [sp]
   19448:	ldr	r0, [r0, #156]	; 0x9c
   1944c:	add	sp, sp, #4
   19450:	bx	lr

00019454 <flatcc_builder_set_max_level@@Base>:
   19454:	sub	sp, sp, #8
   19458:	str	r0, [sp, #4]
   1945c:	str	r1, [sp]
   19460:	ldr	r0, [sp]
   19464:	ldr	r1, [sp, #4]
   19468:	str	r0, [r1, #176]	; 0xb0
   1946c:	ldr	r0, [sp, #4]
   19470:	ldr	r0, [r0, #160]	; 0xa0
   19474:	ldr	r1, [sp, #4]
   19478:	ldr	r1, [r1, #176]	; 0xb0
   1947c:	cmp	r0, r1
   19480:	bge	19494 <flatcc_builder_set_max_level@@Base+0x40>
   19484:	ldr	r0, [sp, #4]
   19488:	ldr	r0, [r0, #176]	; 0xb0
   1948c:	ldr	r1, [sp, #4]
   19490:	str	r0, [r1, #160]	; 0xa0
   19494:	add	sp, sp, #8
   19498:	bx	lr

0001949c <flatcc_builder_get_buffer_size@@Base>:
   1949c:	sub	sp, sp, #4
   194a0:	str	r0, [sp]
   194a4:	ldr	r0, [sp]
   194a8:	ldr	r0, [r0, #140]	; 0x8c
   194ac:	ldr	r1, [sp]
   194b0:	ldr	r1, [r1, #136]	; 0x88
   194b4:	sub	r0, r0, r1
   194b8:	add	sp, sp, #4
   194bc:	bx	lr

000194c0 <flatcc_builder_get_buffer_start@@Base>:
   194c0:	sub	sp, sp, #4
   194c4:	str	r0, [sp]
   194c8:	ldr	r0, [sp]
   194cc:	ldr	r0, [r0, #136]	; 0x88
   194d0:	add	sp, sp, #4
   194d4:	bx	lr

000194d8 <flatcc_builder_get_buffer_end@@Base>:
   194d8:	sub	sp, sp, #4
   194dc:	str	r0, [sp]
   194e0:	ldr	r0, [sp]
   194e4:	ldr	r0, [r0, #140]	; 0x8c
   194e8:	add	sp, sp, #4
   194ec:	bx	lr

000194f0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   194f0:	sub	sp, sp, #8
   194f4:	str	r0, [sp, #4]
   194f8:	str	r1, [sp]
   194fc:	ldr	r0, [sp]
   19500:	ldr	r1, [sp, #4]
   19504:	str	r0, [r1, #172]	; 0xac
   19508:	add	sp, sp, #8
   1950c:	bx	lr

00019510 <flatcc_builder_set_identifier@@Base>:
   19510:	sub	sp, sp, #16
   19514:	str	r0, [sp, #12]
   19518:	str	r1, [sp, #8]
   1951c:	ldr	r0, [sp, #12]
   19520:	add	r0, r0, #168	; 0xa8
   19524:	ldr	r1, [sp, #8]
   19528:	movw	r2, #0
   1952c:	cmp	r1, r2
   19530:	str	r0, [sp, #4]
   19534:	beq	19544 <flatcc_builder_set_identifier@@Base+0x34>
   19538:	ldr	r0, [sp, #8]
   1953c:	str	r0, [sp]
   19540:	b	19554 <flatcc_builder_set_identifier@@Base+0x44>
   19544:	ldr	r0, [pc, #56]	; 19584 <flatcc_builder_set_identifier@@Base+0x74>
   19548:	ldr	r0, [pc, r0]
   1954c:	str	r0, [sp]
   19550:	b	19554 <flatcc_builder_set_identifier@@Base+0x44>
   19554:	ldr	r0, [sp]
   19558:	ldrb	r1, [r0]
   1955c:	ldr	r2, [sp, #4]
   19560:	strb	r1, [r2]
   19564:	ldrb	r1, [r0, #1]
   19568:	strb	r1, [r2, #1]
   1956c:	ldrb	r1, [r0, #2]
   19570:	strb	r1, [r2, #2]
   19574:	ldrb	r0, [r0, #3]
   19578:	strb	r0, [r2, #3]
   1957c:	add	sp, sp, #16
   19580:	bx	lr
   19584:	strdeq	r5, [r1], -r4

00019588 <flatcc_builder_get_type@@Base>:
   19588:	sub	sp, sp, #8
   1958c:	str	r0, [sp, #4]
   19590:	ldr	r0, [sp, #4]
   19594:	ldr	r0, [r0, #32]
   19598:	movw	r1, #0
   1959c:	cmp	r0, r1
   195a0:	beq	195b8 <flatcc_builder_get_type@@Base+0x30>
   195a4:	ldr	r0, [sp, #4]
   195a8:	ldr	r0, [r0, #32]
   195ac:	ldrh	r0, [r0, #14]
   195b0:	str	r0, [sp]
   195b4:	b	195c4 <flatcc_builder_get_type@@Base+0x3c>
   195b8:	movw	r0, #0
   195bc:	str	r0, [sp]
   195c0:	b	195c4 <flatcc_builder_get_type@@Base+0x3c>
   195c4:	ldr	r0, [sp]
   195c8:	add	sp, sp, #8
   195cc:	bx	lr

000195d0 <flatcc_builder_get_type_at@@Base>:
   195d0:	sub	sp, sp, #12
   195d4:	str	r0, [sp, #4]
   195d8:	str	r1, [sp]
   195dc:	ldr	r0, [sp]
   195e0:	cmp	r0, #1
   195e4:	blt	195fc <flatcc_builder_get_type_at@@Base+0x2c>
   195e8:	ldr	r0, [sp]
   195ec:	ldr	r1, [sp, #4]
   195f0:	ldr	r1, [r1, #156]	; 0x9c
   195f4:	cmp	r0, r1
   195f8:	ble	19608 <flatcc_builder_get_type_at@@Base+0x38>
   195fc:	movw	r0, #0
   19600:	str	r0, [sp, #8]
   19604:	b	19634 <flatcc_builder_get_type_at@@Base+0x64>
   19608:	ldr	r0, [sp, #4]
   1960c:	ldr	r0, [r0, #32]
   19610:	ldr	r1, [sp]
   19614:	ldr	r2, [sp, #4]
   19618:	ldr	r2, [r2, #156]	; 0x9c
   1961c:	sub	r1, r1, r2
   19620:	movw	r2, #36	; 0x24
   19624:	mul	r1, r1, r2
   19628:	add	r0, r0, r1
   1962c:	ldrh	r0, [r0, #14]
   19630:	str	r0, [sp, #8]
   19634:	ldr	r0, [sp, #8]
   19638:	add	sp, sp, #12
   1963c:	bx	lr

00019640 <flatcc_builder_get_direct_buffer@@Base>:
   19640:	push	{fp, lr}
   19644:	mov	fp, sp
   19648:	sub	sp, sp, #16
   1964c:	str	r0, [sp, #8]
   19650:	str	r1, [sp, #4]
   19654:	ldr	r0, [sp, #8]
   19658:	ldr	r0, [r0, #184]	; 0xb8
   1965c:	cmp	r0, #0
   19660:	beq	1967c <flatcc_builder_get_direct_buffer@@Base+0x3c>
   19664:	ldr	r0, [sp, #8]
   19668:	add	r0, r0, #188	; 0xbc
   1966c:	ldr	r1, [sp, #4]
   19670:	bl	196b0 <flatcc_builder_get_direct_buffer@@Base+0x70>
   19674:	str	r0, [fp, #-4]
   19678:	b	196a4 <flatcc_builder_get_direct_buffer@@Base+0x64>
   1967c:	ldr	r0, [sp, #4]
   19680:	movw	r1, #0
   19684:	cmp	r0, r1
   19688:	beq	19698 <flatcc_builder_get_direct_buffer@@Base+0x58>
   1968c:	ldr	r0, [sp, #4]
   19690:	movw	r1, #0
   19694:	str	r1, [r0]
   19698:	b	1969c <flatcc_builder_get_direct_buffer@@Base+0x5c>
   1969c:	movw	r0, #0
   196a0:	str	r0, [fp, #-4]
   196a4:	ldr	r0, [fp, #-4]
   196a8:	mov	sp, fp
   196ac:	pop	{fp, pc}
   196b0:	sub	sp, sp, #12
   196b4:	str	r0, [sp, #4]
   196b8:	str	r1, [sp]
   196bc:	ldr	r0, [sp, #4]
   196c0:	ldr	r0, [r0]
   196c4:	ldr	r1, [sp, #4]
   196c8:	ldr	r1, [r1, #4]
   196cc:	cmp	r0, r1
   196d0:	bne	19704 <flatcc_builder_get_direct_buffer@@Base+0xc4>
   196d4:	ldr	r0, [sp]
   196d8:	movw	r1, #0
   196dc:	cmp	r0, r1
   196e0:	beq	196f4 <flatcc_builder_get_direct_buffer@@Base+0xb4>
   196e4:	ldr	r0, [sp, #4]
   196e8:	ldr	r0, [r0, #24]
   196ec:	ldr	r1, [sp]
   196f0:	str	r0, [r1]
   196f4:	ldr	r0, [sp, #4]
   196f8:	ldr	r0, [r0, #8]
   196fc:	str	r0, [sp, #8]
   19700:	b	19728 <flatcc_builder_get_direct_buffer@@Base+0xe8>
   19704:	ldr	r0, [sp]
   19708:	movw	r1, #0
   1970c:	cmp	r0, r1
   19710:	beq	19720 <flatcc_builder_get_direct_buffer@@Base+0xe0>
   19714:	ldr	r0, [sp]
   19718:	movw	r1, #0
   1971c:	str	r1, [r0]
   19720:	movw	r0, #0
   19724:	str	r0, [sp, #8]
   19728:	ldr	r0, [sp, #8]
   1972c:	add	sp, sp, #12
   19730:	bx	lr

00019734 <flatcc_builder_copy_buffer@@Base>:
   19734:	push	{fp, lr}
   19738:	mov	fp, sp
   1973c:	sub	sp, sp, #16
   19740:	str	r0, [sp, #8]
   19744:	str	r1, [sp, #4]
   19748:	str	r2, [sp]
   1974c:	ldr	r0, [sp, #8]
   19750:	ldr	r0, [r0, #184]	; 0xb8
   19754:	cmp	r0, #0
   19758:	bne	19768 <flatcc_builder_copy_buffer@@Base+0x34>
   1975c:	movw	r0, #0
   19760:	str	r0, [fp, #-4]
   19764:	b	197bc <flatcc_builder_copy_buffer@@Base+0x88>
   19768:	ldr	r0, [sp, #8]
   1976c:	add	r0, r0, #188	; 0xbc
   19770:	ldr	r1, [sp, #4]
   19774:	ldr	r2, [sp]
   19778:	bl	1a424 <flatcc_emitter_copy_buffer@@Base>
   1977c:	str	r0, [sp, #4]
   19780:	ldr	r0, [sp, #4]
   19784:	movw	r1, #0
   19788:	cmp	r0, r1
   1978c:	beq	19794 <flatcc_builder_copy_buffer@@Base+0x60>
   19790:	b	197b4 <flatcc_builder_copy_buffer@@Base+0x80>
   19794:	ldr	r0, [pc, #44]	; 197c8 <flatcc_builder_copy_buffer@@Base+0x94>
   19798:	add	r0, pc, r0
   1979c:	ldr	r1, [pc, #40]	; 197cc <flatcc_builder_copy_buffer@@Base+0x98>
   197a0:	add	r1, pc, r1
   197a4:	ldr	r2, [pc, #36]	; 197d0 <flatcc_builder_copy_buffer@@Base+0x9c>
   197a8:	add	r3, pc, r2
   197ac:	movw	r2, #1926	; 0x786
   197b0:	bl	127a8 <__assert_fail@plt>
   197b4:	ldr	r0, [sp, #4]
   197b8:	str	r0, [fp, #-4]
   197bc:	ldr	r0, [fp, #-4]
   197c0:	mov	sp, fp
   197c4:	pop	{fp, pc}
   197c8:	andeq	r4, r0, sp, ror #5
   197cc:	andeq	r4, r0, sl, ror r0
   197d0:	andeq	r4, r0, r1, ror #31

000197d4 <flatcc_builder_finalize_buffer@@Base>:
   197d4:	push	{fp, lr}
   197d8:	mov	fp, sp
   197dc:	sub	sp, sp, #16
   197e0:	str	r0, [fp, #-4]
   197e4:	str	r1, [sp, #8]
   197e8:	ldr	r0, [fp, #-4]
   197ec:	bl	1949c <flatcc_builder_get_buffer_size@@Base>
   197f0:	str	r0, [sp]
   197f4:	ldr	r0, [sp, #8]
   197f8:	movw	r1, #0
   197fc:	cmp	r0, r1
   19800:	beq	19810 <flatcc_builder_finalize_buffer@@Base+0x3c>
   19804:	ldr	r0, [sp]
   19808:	ldr	r1, [sp, #8]
   1980c:	str	r0, [r1]
   19810:	ldr	r0, [sp]
   19814:	bl	1273c <malloc@plt>
   19818:	str	r0, [sp, #4]
   1981c:	ldr	r0, [sp, #4]
   19820:	movw	r1, #0
   19824:	cmp	r0, r1
   19828:	bne	1984c <flatcc_builder_finalize_buffer@@Base+0x78>
   1982c:	ldr	r0, [pc, #144]	; 198c4 <flatcc_builder_finalize_buffer@@Base+0xf0>
   19830:	add	r0, pc, r0
   19834:	ldr	r1, [pc, #140]	; 198c8 <flatcc_builder_finalize_buffer@@Base+0xf4>
   19838:	add	r1, pc, r1
   1983c:	ldr	r2, [pc, #136]	; 198cc <flatcc_builder_finalize_buffer@@Base+0xf8>
   19840:	add	r3, pc, r2
   19844:	movw	r2, #1944	; 0x798
   19848:	bl	127a8 <__assert_fail@plt>
   1984c:	ldr	r0, [fp, #-4]
   19850:	ldr	r1, [sp, #4]
   19854:	ldr	r2, [sp]
   19858:	bl	19734 <flatcc_builder_copy_buffer@@Base>
   1985c:	movw	r1, #0
   19860:	cmp	r0, r1
   19864:	bne	19888 <flatcc_builder_finalize_buffer@@Base+0xb4>
   19868:	ldr	r0, [pc, #96]	; 198d0 <flatcc_builder_finalize_buffer@@Base+0xfc>
   1986c:	add	r0, pc, r0
   19870:	ldr	r1, [pc, #92]	; 198d4 <flatcc_builder_finalize_buffer@@Base+0x100>
   19874:	add	r1, pc, r1
   19878:	ldr	r2, [pc, #88]	; 198d8 <flatcc_builder_finalize_buffer@@Base+0x104>
   1987c:	add	r3, pc, r2
   19880:	movw	r2, #1948	; 0x79c
   19884:	bl	127a8 <__assert_fail@plt>
   19888:	b	1988c <flatcc_builder_finalize_buffer@@Base+0xb8>
   1988c:	ldr	r0, [sp, #4]
   19890:	movw	r1, #0
   19894:	cmp	r0, r1
   19898:	bne	198b8 <flatcc_builder_finalize_buffer@@Base+0xe4>
   1989c:	ldr	r0, [sp, #8]
   198a0:	movw	r1, #0
   198a4:	cmp	r0, r1
   198a8:	beq	198b8 <flatcc_builder_finalize_buffer@@Base+0xe4>
   198ac:	ldr	r0, [sp, #8]
   198b0:	movw	r1, #0
   198b4:	str	r1, [r0]
   198b8:	ldr	r0, [sp, #4]
   198bc:	mov	sp, fp
   198c0:	pop	{fp, pc}
   198c4:	andeq	r5, r0, r7, lsr #3
   198c8:	andeq	r3, r0, r2, ror #31
   198cc:	andeq	r4, r0, lr, lsl #31
   198d0:	andeq	r5, r0, fp, ror #2
   198d4:	andeq	r3, r0, r6, lsr #31
   198d8:	andeq	r4, r0, r2, asr pc

000198dc <flatcc_builder_finalize_aligned_buffer@@Base>:
   198dc:	push	{fp, lr}
   198e0:	mov	fp, sp
   198e4:	sub	sp, sp, #24
   198e8:	str	r0, [fp, #-4]
   198ec:	str	r1, [fp, #-8]
   198f0:	ldr	r0, [fp, #-4]
   198f4:	bl	1949c <flatcc_builder_get_buffer_size@@Base>
   198f8:	str	r0, [sp, #4]
   198fc:	ldr	r0, [fp, #-8]
   19900:	movw	r1, #0
   19904:	cmp	r0, r1
   19908:	beq	19918 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1990c:	ldr	r0, [sp, #4]
   19910:	ldr	r1, [fp, #-8]
   19914:	str	r0, [r1]
   19918:	ldr	r0, [fp, #-4]
   1991c:	bl	193cc <flatcc_builder_get_buffer_alignment@@Base>
   19920:	uxth	r0, r0
   19924:	str	r0, [sp, #8]
   19928:	ldr	r0, [sp, #4]
   1992c:	ldr	r1, [sp, #8]
   19930:	add	r0, r0, r1
   19934:	sub	r0, r0, #1
   19938:	ldr	r1, [sp, #8]
   1993c:	sub	r1, r1, #1
   19940:	mvn	r2, #0
   19944:	eor	r1, r1, r2
   19948:	and	r0, r0, r1
   1994c:	str	r0, [sp, #4]
   19950:	ldr	r0, [sp, #8]
   19954:	ldr	r1, [sp, #4]
   19958:	bl	199e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   1995c:	str	r0, [sp, #12]
   19960:	ldr	r0, [sp, #12]
   19964:	movw	r1, #0
   19968:	cmp	r0, r1
   1996c:	bne	19974 <flatcc_builder_finalize_aligned_buffer@@Base+0x98>
   19970:	b	199a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   19974:	ldr	r0, [fp, #-4]
   19978:	ldr	r1, [sp, #12]
   1997c:	ldr	r2, [sp, #4]
   19980:	bl	19734 <flatcc_builder_copy_buffer@@Base>
   19984:	movw	r1, #0
   19988:	cmp	r0, r1
   1998c:	bne	199a4 <flatcc_builder_finalize_aligned_buffer@@Base+0xc8>
   19990:	ldr	r0, [sp, #12]
   19994:	bl	1270c <free@plt>
   19998:	movw	r0, #0
   1999c:	str	r0, [sp, #12]
   199a0:	b	199a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   199a4:	b	199a8 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   199a8:	ldr	r0, [sp, #12]
   199ac:	movw	r1, #0
   199b0:	cmp	r0, r1
   199b4:	bne	199d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   199b8:	ldr	r0, [fp, #-8]
   199bc:	movw	r1, #0
   199c0:	cmp	r0, r1
   199c4:	beq	199d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xf8>
   199c8:	ldr	r0, [fp, #-8]
   199cc:	movw	r1, #0
   199d0:	str	r1, [r0]
   199d4:	ldr	r0, [sp, #12]
   199d8:	mov	sp, fp
   199dc:	pop	{fp, pc}
   199e0:	push	{fp, lr}
   199e4:	mov	fp, sp
   199e8:	sub	sp, sp, #16
   199ec:	str	r0, [fp, #-4]
   199f0:	str	r1, [sp, #8]
   199f4:	movw	r0, #0
   199f8:	str	r0, [sp]
   199fc:	ldr	r0, [fp, #-4]
   19a00:	cmp	r0, #4
   19a04:	bcs	19a10 <flatcc_builder_finalize_aligned_buffer@@Base+0x134>
   19a08:	movw	r0, #4
   19a0c:	str	r0, [fp, #-4]
   19a10:	ldr	r1, [fp, #-4]
   19a14:	ldr	r2, [sp, #8]
   19a18:	mov	r0, sp
   19a1c:	bl	1276c <posix_memalign@plt>
   19a20:	str	r0, [sp, #4]
   19a24:	ldr	r0, [sp, #4]
   19a28:	cmp	r0, #0
   19a2c:	beq	19a50 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19a30:	ldr	r0, [sp]
   19a34:	movw	r1, #0
   19a38:	cmp	r0, r1
   19a3c:	beq	19a50 <flatcc_builder_finalize_aligned_buffer@@Base+0x174>
   19a40:	ldr	r0, [sp]
   19a44:	bl	1270c <free@plt>
   19a48:	movw	r0, #0
   19a4c:	str	r0, [sp]
   19a50:	ldr	r0, [sp]
   19a54:	mov	sp, fp
   19a58:	pop	{fp, pc}

00019a5c <flatcc_builder_aligned_alloc@@Base>:
   19a5c:	push	{fp, lr}
   19a60:	mov	fp, sp
   19a64:	sub	sp, sp, #8
   19a68:	str	r0, [sp, #4]
   19a6c:	str	r1, [sp]
   19a70:	ldr	r0, [sp, #4]
   19a74:	ldr	r1, [sp]
   19a78:	bl	199e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x104>
   19a7c:	mov	sp, fp
   19a80:	pop	{fp, pc}

00019a84 <flatcc_builder_aligned_free@@Base>:
   19a84:	push	{fp, lr}
   19a88:	mov	fp, sp
   19a8c:	sub	sp, sp, #8
   19a90:	str	r0, [sp, #4]
   19a94:	ldr	r0, [sp, #4]
   19a98:	bl	1270c <free@plt>
   19a9c:	mov	sp, fp
   19aa0:	pop	{fp, pc}

00019aa4 <flatcc_builder_get_emit_context@@Base>:
   19aa4:	sub	sp, sp, #4
   19aa8:	str	r0, [sp]
   19aac:	ldr	r0, [sp]
   19ab0:	ldr	r0, [r0, #36]	; 0x24
   19ab4:	add	sp, sp, #4
   19ab8:	bx	lr
   19abc:	sub	sp, sp, #8
   19ac0:	str	r0, [sp, #4]
   19ac4:	strh	r1, [sp, #2]
   19ac8:	ldr	r0, [sp, #4]
   19acc:	ldr	r0, [r0, #140]	; 0x8c
   19ad0:	ldrh	r1, [sp, #2]
   19ad4:	sub	r1, r1, #1
   19ad8:	and	r0, r0, r1
   19adc:	add	sp, sp, #8
   19ae0:	bx	lr
   19ae4:	push	{fp, lr}
   19ae8:	mov	fp, sp
   19aec:	sub	sp, sp, #32
   19af0:	str	r0, [fp, #-8]
   19af4:	str	r1, [fp, #-12]
   19af8:	str	r2, [sp, #16]
   19afc:	ldr	r0, [fp, #-8]
   19b00:	add	r0, r0, #52	; 0x34
   19b04:	add	r0, r0, #8
   19b08:	str	r0, [sp, #12]
   19b0c:	ldr	r0, [fp, #-8]
   19b10:	ldr	r0, [r0, #48]	; 0x30
   19b14:	ldr	r1, [fp, #-8]
   19b18:	ldr	r1, [r1, #40]	; 0x28
   19b1c:	ldr	r2, [sp, #12]
   19b20:	ldr	r3, [fp, #-8]
   19b24:	ldr	r3, [r3, #28]
   19b28:	ldr	ip, [fp, #-12]
   19b2c:	add	r3, r3, ip
   19b30:	str	r0, [sp, #8]
   19b34:	mov	r0, r1
   19b38:	mov	r1, r2
   19b3c:	mov	r2, r3
   19b40:	movw	r3, #1
   19b44:	str	r3, [sp, #4]
   19b48:	ldr	ip, [sp, #4]
   19b4c:	str	ip, [sp]
   19b50:	ldr	lr, [sp, #8]
   19b54:	blx	lr
   19b58:	cmp	r0, #0
   19b5c:	beq	19b6c <flatcc_builder_get_emit_context@@Base+0xc8>
   19b60:	mvn	r0, #0
   19b64:	str	r0, [fp, #-4]
   19b68:	b	19b80 <flatcc_builder_get_emit_context@@Base+0xdc>
   19b6c:	ldr	r0, [fp, #-8]
   19b70:	ldr	r1, [sp, #16]
   19b74:	bl	158fc <flatcc_builder_start_struct@@Base+0x70>
   19b78:	movw	r0, #0
   19b7c:	str	r0, [fp, #-4]
   19b80:	ldr	r0, [fp, #-4]
   19b84:	mov	sp, fp
   19b88:	pop	{fp, pc}
   19b8c:	push	{fp, lr}
   19b90:	mov	fp, sp
   19b94:	sub	sp, sp, #32
   19b98:	str	r0, [fp, #-8]
   19b9c:	ldr	r0, [fp, #-8]
   19ba0:	add	r0, r0, #52	; 0x34
   19ba4:	add	r0, r0, #40	; 0x28
   19ba8:	str	r0, [fp, #-12]
   19bac:	ldr	r0, [fp, #-8]
   19bb0:	ldr	r0, [r0, #124]	; 0x7c
   19bb4:	cmp	r0, #0
   19bb8:	bne	19bc0 <flatcc_builder_get_emit_context@@Base+0x11c>
   19bbc:	b	19be0 <flatcc_builder_get_emit_context@@Base+0x13c>
   19bc0:	ldr	r0, [pc, #320]	; 19d08 <flatcc_builder_get_emit_context@@Base+0x264>
   19bc4:	add	r0, pc, r0
   19bc8:	ldr	r1, [pc, #316]	; 19d0c <flatcc_builder_get_emit_context@@Base+0x268>
   19bcc:	add	r1, pc, r1
   19bd0:	ldr	r2, [pc, #312]	; 19d10 <flatcc_builder_get_emit_context@@Base+0x26c>
   19bd4:	add	r3, pc, r2
   19bd8:	movw	r2, #342	; 0x156
   19bdc:	bl	127a8 <__assert_fail@plt>
   19be0:	ldr	r0, [fp, #-8]
   19be4:	ldr	r1, [fp, #-8]
   19be8:	ldr	r2, [r1, #124]	; 0x7c
   19bec:	movw	r1, #6
   19bf0:	movw	r3, #16
   19bf4:	movw	ip, #0
   19bf8:	str	ip, [sp]
   19bfc:	bl	14634 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   19c00:	movw	r1, #0
   19c04:	cmp	r0, r1
   19c08:	bne	19c18 <flatcc_builder_get_emit_context@@Base+0x174>
   19c0c:	mvn	r0, #0
   19c10:	str	r0, [fp, #-4]
   19c14:	b	19cfc <flatcc_builder_get_emit_context@@Base+0x258>
   19c18:	ldr	r0, [fp, #-8]
   19c1c:	movw	r1, #16
   19c20:	str	r1, [r0, #124]	; 0x7c
   19c24:	movw	r0, #256	; 0x100
   19c28:	str	r0, [sp, #16]
   19c2c:	ldr	r0, [fp, #-8]
   19c30:	ldr	r0, [r0, #48]	; 0x30
   19c34:	ldr	r1, [fp, #-8]
   19c38:	ldr	r1, [r1, #40]	; 0x28
   19c3c:	ldr	r2, [fp, #-12]
   19c40:	ldr	r3, [sp, #16]
   19c44:	str	r0, [sp, #8]
   19c48:	mov	r0, r1
   19c4c:	mov	r1, r2
   19c50:	mov	r2, r3
   19c54:	movw	r3, #1
   19c58:	movw	ip, #5
   19c5c:	str	ip, [sp]
   19c60:	ldr	ip, [sp, #8]
   19c64:	blx	ip
   19c68:	cmp	r0, #0
   19c6c:	beq	19c7c <flatcc_builder_get_emit_context@@Base+0x1d8>
   19c70:	mvn	r0, #0
   19c74:	str	r0, [fp, #-4]
   19c78:	b	19cfc <flatcc_builder_get_emit_context@@Base+0x258>
   19c7c:	b	19c80 <flatcc_builder_get_emit_context@@Base+0x1dc>
   19c80:	ldr	r0, [sp, #16]
   19c84:	lsl	r0, r0, #1
   19c88:	ldr	r1, [fp, #-12]
   19c8c:	ldr	r1, [r1, #4]
   19c90:	cmp	r0, r1
   19c94:	bhi	19ca8 <flatcc_builder_get_emit_context@@Base+0x204>
   19c98:	ldr	r0, [sp, #16]
   19c9c:	lsl	r0, r0, #1
   19ca0:	str	r0, [sp, #16]
   19ca4:	b	19c80 <flatcc_builder_get_emit_context@@Base+0x1dc>
   19ca8:	ldr	r0, [sp, #16]
   19cac:	lsr	r0, r0, #2
   19cb0:	str	r0, [sp, #16]
   19cb4:	movw	r0, #0
   19cb8:	str	r0, [sp, #12]
   19cbc:	ldr	r0, [sp, #12]
   19cc0:	movw	r1, #1
   19cc4:	lsl	r0, r1, r0
   19cc8:	ldr	r1, [sp, #16]
   19ccc:	cmp	r0, r1
   19cd0:	bcs	19ce8 <flatcc_builder_get_emit_context@@Base+0x244>
   19cd4:	b	19cd8 <flatcc_builder_get_emit_context@@Base+0x234>
   19cd8:	ldr	r0, [sp, #12]
   19cdc:	add	r0, r0, #1
   19ce0:	str	r0, [sp, #12]
   19ce4:	b	19cbc <flatcc_builder_get_emit_context@@Base+0x218>
   19ce8:	ldr	r0, [sp, #12]
   19cec:	ldr	r1, [fp, #-8]
   19cf0:	str	r0, [r1, #116]	; 0x74
   19cf4:	movw	r0, #0
   19cf8:	str	r0, [fp, #-4]
   19cfc:	ldr	r0, [fp, #-4]
   19d00:	mov	sp, fp
   19d04:	pop	{fp, pc}
   19d08:	ldrdeq	r4, [r0], -r7
   19d0c:	andeq	r3, r0, lr, asr #24
   19d10:	ldrdeq	r4, [r0], -r6

00019d14 <flatcc_emitter_recycle_page@@Base>:
   19d14:	sub	sp, sp, #12
   19d18:	str	r0, [sp, #4]
   19d1c:	str	r1, [sp]
   19d20:	ldr	r0, [sp]
   19d24:	ldr	r1, [sp, #4]
   19d28:	ldr	r1, [r1]
   19d2c:	cmp	r0, r1
   19d30:	beq	19d48 <flatcc_emitter_recycle_page@@Base+0x34>
   19d34:	ldr	r0, [sp]
   19d38:	ldr	r1, [sp, #4]
   19d3c:	ldr	r1, [r1, #4]
   19d40:	cmp	r0, r1
   19d44:	bne	19d54 <flatcc_emitter_recycle_page@@Base+0x40>
   19d48:	mvn	r0, #0
   19d4c:	str	r0, [sp, #8]
   19d50:	b	19dc8 <flatcc_emitter_recycle_page@@Base+0xb4>
   19d54:	ldr	r0, [sp]
   19d58:	ldr	r0, [r0, #2948]	; 0xb84
   19d5c:	ldr	r1, [sp]
   19d60:	ldr	r1, [r1, #2944]	; 0xb80
   19d64:	str	r0, [r1, #2948]	; 0xb84
   19d68:	ldr	r0, [sp]
   19d6c:	ldr	r0, [r0, #2944]	; 0xb80
   19d70:	ldr	r1, [sp]
   19d74:	ldr	r1, [r1, #2948]	; 0xb84
   19d78:	str	r0, [r1, #2944]	; 0xb80
   19d7c:	ldr	r0, [sp, #4]
   19d80:	ldr	r0, [r0]
   19d84:	ldr	r0, [r0, #2948]	; 0xb84
   19d88:	ldr	r1, [sp]
   19d8c:	str	r0, [r1, #2948]	; 0xb84
   19d90:	ldr	r0, [sp, #4]
   19d94:	ldr	r0, [r0]
   19d98:	ldr	r1, [sp]
   19d9c:	str	r0, [r1, #2944]	; 0xb80
   19da0:	ldr	r0, [sp]
   19da4:	ldr	r1, [sp]
   19da8:	ldr	r1, [r1, #2948]	; 0xb84
   19dac:	str	r0, [r1, #2944]	; 0xb80
   19db0:	ldr	r0, [sp]
   19db4:	ldr	r1, [sp]
   19db8:	ldr	r1, [r1, #2944]	; 0xb80
   19dbc:	str	r0, [r1, #2948]	; 0xb84
   19dc0:	movw	r0, #0
   19dc4:	str	r0, [sp, #8]
   19dc8:	ldr	r0, [sp, #8]
   19dcc:	add	sp, sp, #12
   19dd0:	bx	lr

00019dd4 <flatcc_emitter_reset@@Base>:
   19dd4:	push	{fp, lr}
   19dd8:	mov	fp, sp
   19ddc:	sub	sp, sp, #16
   19de0:	str	r0, [fp, #-4]
   19de4:	ldr	r0, [fp, #-4]
   19de8:	ldr	r0, [r0]
   19dec:	str	r0, [sp, #8]
   19df0:	ldr	r0, [fp, #-4]
   19df4:	ldr	r0, [r0]
   19df8:	movw	r1, #0
   19dfc:	cmp	r0, r1
   19e00:	bne	19e08 <flatcc_emitter_reset@@Base+0x34>
   19e04:	b	19f64 <flatcc_emitter_reset@@Base+0x190>
   19e08:	ldr	r0, [fp, #-4]
   19e0c:	ldr	r0, [r0]
   19e10:	ldr	r1, [fp, #-4]
   19e14:	str	r0, [r1, #4]
   19e18:	ldr	r0, [fp, #-4]
   19e1c:	ldr	r0, [r0]
   19e20:	add	r0, r0, #1472	; 0x5c0
   19e24:	ldr	r1, [fp, #-4]
   19e28:	str	r0, [r1, #8]
   19e2c:	ldr	r0, [fp, #-4]
   19e30:	ldr	r0, [r0, #8]
   19e34:	ldr	r1, [fp, #-4]
   19e38:	str	r0, [r1, #16]
   19e3c:	ldr	r0, [fp, #-4]
   19e40:	movw	r1, #1472	; 0x5c0
   19e44:	str	r1, [r0, #12]
   19e48:	ldr	r0, [fp, #-4]
   19e4c:	str	r1, [r0, #20]
   19e50:	ldr	r0, [fp, #-4]
   19e54:	ldr	r0, [r0, #12]
   19e58:	movw	r1, #0
   19e5c:	sub	r0, r1, r0
   19e60:	ldr	r1, [fp, #-4]
   19e64:	ldr	r1, [r1]
   19e68:	str	r0, [r1, #2952]	; 0xb88
   19e6c:	ldr	r0, [fp, #-4]
   19e70:	ldr	r0, [r0, #32]
   19e74:	cmp	r0, #0
   19e78:	bne	19e8c <flatcc_emitter_reset@@Base+0xb8>
   19e7c:	ldr	r0, [fp, #-4]
   19e80:	ldr	r0, [r0, #24]
   19e84:	ldr	r1, [fp, #-4]
   19e88:	str	r0, [r1, #32]
   19e8c:	ldr	r0, [fp, #-4]
   19e90:	ldr	r1, [r0, #24]
   19e94:	ldr	r0, [r0, #32]
   19e98:	add	r0, r0, r0, lsl #1
   19e9c:	lsr	r0, r0, #2
   19ea0:	lsr	r1, r1, #2
   19ea4:	add	r0, r0, r1
   19ea8:	ldr	r1, [fp, #-4]
   19eac:	str	r0, [r1, #32]
   19eb0:	ldr	r0, [fp, #-4]
   19eb4:	movw	r1, #0
   19eb8:	str	r1, [r0, #24]
   19ebc:	ldr	r0, [fp, #-4]
   19ec0:	ldr	r0, [r0, #32]
   19ec4:	lsl	r0, r0, #1
   19ec8:	ldr	r1, [fp, #-4]
   19ecc:	ldr	r1, [r1, #28]
   19ed0:	cmp	r0, r1
   19ed4:	movw	r0, #0
   19ed8:	str	r0, [sp, #4]
   19edc:	bcs	19f04 <flatcc_emitter_reset@@Base+0x130>
   19ee0:	ldr	r0, [fp, #-4]
   19ee4:	ldr	r0, [r0, #4]
   19ee8:	ldr	r0, [r0, #2944]	; 0xb80
   19eec:	ldr	r1, [fp, #-4]
   19ef0:	ldr	r1, [r1]
   19ef4:	cmp	r0, r1
   19ef8:	movw	r0, #0
   19efc:	movne	r0, #1
   19f00:	str	r0, [sp, #4]
   19f04:	ldr	r0, [sp, #4]
   19f08:	tst	r0, #1
   19f0c:	beq	19f64 <flatcc_emitter_reset@@Base+0x190>
   19f10:	ldr	r0, [fp, #-4]
   19f14:	ldr	r0, [r0, #4]
   19f18:	ldr	r0, [r0, #2944]	; 0xb80
   19f1c:	str	r0, [sp, #8]
   19f20:	ldr	r0, [sp, #8]
   19f24:	ldr	r0, [r0, #2944]	; 0xb80
   19f28:	ldr	r1, [fp, #-4]
   19f2c:	ldr	r1, [r1, #4]
   19f30:	str	r0, [r1, #2944]	; 0xb80
   19f34:	ldr	r0, [fp, #-4]
   19f38:	ldr	r0, [r0, #4]
   19f3c:	ldr	r1, [sp, #8]
   19f40:	ldr	r1, [r1, #2944]	; 0xb80
   19f44:	str	r0, [r1, #2948]	; 0xb84
   19f48:	ldr	r0, [sp, #8]
   19f4c:	bl	1270c <free@plt>
   19f50:	ldr	r0, [fp, #-4]
   19f54:	ldr	r1, [r0, #28]
   19f58:	sub	r1, r1, #2944	; 0xb80
   19f5c:	str	r1, [r0, #28]
   19f60:	b	19ebc <flatcc_emitter_reset@@Base+0xe8>
   19f64:	mov	sp, fp
   19f68:	pop	{fp, pc}

00019f6c <flatcc_emitter_clear@@Base>:
   19f6c:	push	{fp, lr}
   19f70:	mov	fp, sp
   19f74:	sub	sp, sp, #8
   19f78:	str	r0, [sp, #4]
   19f7c:	ldr	r0, [sp, #4]
   19f80:	ldr	r0, [r0]
   19f84:	str	r0, [sp]
   19f88:	ldr	r0, [sp]
   19f8c:	movw	r1, #0
   19f90:	cmp	r0, r1
   19f94:	bne	19f9c <flatcc_emitter_clear@@Base+0x30>
   19f98:	b	19ff8 <flatcc_emitter_clear@@Base+0x8c>
   19f9c:	ldr	r0, [sp]
   19fa0:	ldr	r0, [r0, #2948]	; 0xb84
   19fa4:	movw	r1, #0
   19fa8:	str	r1, [r0, #2944]	; 0xb80
   19fac:	ldr	r0, [sp]
   19fb0:	ldr	r0, [r0, #2944]	; 0xb80
   19fb4:	movw	r1, #0
   19fb8:	cmp	r0, r1
   19fbc:	beq	19fdc <flatcc_emitter_clear@@Base+0x70>
   19fc0:	ldr	r0, [sp]
   19fc4:	ldr	r0, [r0, #2944]	; 0xb80
   19fc8:	str	r0, [sp]
   19fcc:	ldr	r0, [sp]
   19fd0:	ldr	r0, [r0, #2948]	; 0xb84
   19fd4:	bl	1270c <free@plt>
   19fd8:	b	19fac <flatcc_emitter_clear@@Base+0x40>
   19fdc:	ldr	r0, [sp]
   19fe0:	bl	1270c <free@plt>
   19fe4:	ldr	r0, [sp, #4]
   19fe8:	movw	r1, #0
   19fec:	and	r1, r1, #255	; 0xff
   19ff0:	movw	r2, #36	; 0x24
   19ff4:	bl	12778 <memset@plt>
   19ff8:	mov	sp, fp
   19ffc:	pop	{fp, pc}

0001a000 <flatcc_emitter@@Base>:
   1a000:	push	{fp, lr}
   1a004:	mov	fp, sp
   1a008:	sub	sp, sp, #32
   1a00c:	ldr	ip, [fp, #8]
   1a010:	str	r0, [fp, #-8]
   1a014:	str	r1, [fp, #-12]
   1a018:	str	r2, [sp, #16]
   1a01c:	str	r3, [sp, #12]
   1a020:	ldr	r0, [fp, #-8]
   1a024:	str	r0, [sp, #8]
   1a028:	ldr	r0, [fp, #8]
   1a02c:	ldr	r1, [sp, #8]
   1a030:	ldr	r2, [r1, #24]
   1a034:	add	r0, r2, r0
   1a038:	str	r0, [r1, #24]
   1a03c:	ldr	r0, [sp, #12]
   1a040:	cmp	r0, #0
   1a044:	bge	1a108 <flatcc_emitter@@Base+0x108>
   1a048:	ldr	r0, [fp, #8]
   1a04c:	ldr	r1, [sp, #8]
   1a050:	ldr	r1, [r1, #12]
   1a054:	cmp	r0, r1
   1a058:	bhi	1a09c <flatcc_emitter@@Base+0x9c>
   1a05c:	ldr	r0, [fp, #8]
   1a060:	ldr	r1, [sp, #8]
   1a064:	ldr	r2, [r1, #8]
   1a068:	movw	r3, #0
   1a06c:	sub	r0, r3, r0
   1a070:	add	r0, r2, r0
   1a074:	str	r0, [r1, #8]
   1a078:	ldr	r0, [fp, #8]
   1a07c:	ldr	r1, [sp, #8]
   1a080:	ldr	r2, [r1, #12]
   1a084:	sub	r0, r2, r0
   1a088:	str	r0, [r1, #12]
   1a08c:	ldr	r0, [sp, #8]
   1a090:	ldr	r0, [r0, #8]
   1a094:	str	r0, [sp, #4]
   1a098:	b	1a1bc <flatcc_emitter@@Base+0x1bc>
   1a09c:	ldr	r0, [sp, #16]
   1a0a0:	ldr	r1, [fp, #-12]
   1a0a4:	add	r0, r1, r0, lsl #3
   1a0a8:	str	r0, [fp, #-12]
   1a0ac:	ldr	r0, [sp, #16]
   1a0b0:	mvn	r1, #0
   1a0b4:	add	r1, r0, r1
   1a0b8:	str	r1, [sp, #16]
   1a0bc:	cmp	r0, #0
   1a0c0:	beq	1a104 <flatcc_emitter@@Base+0x104>
   1a0c4:	ldr	r0, [fp, #-12]
   1a0c8:	mvn	r1, #7
   1a0cc:	add	r0, r0, r1
   1a0d0:	str	r0, [fp, #-12]
   1a0d4:	ldr	r0, [sp, #8]
   1a0d8:	ldr	r1, [fp, #-12]
   1a0dc:	ldr	r1, [r1]
   1a0e0:	ldr	r2, [fp, #-12]
   1a0e4:	ldr	r2, [r2, #4]
   1a0e8:	bl	1a228 <flatcc_emitter@@Base+0x228>
   1a0ec:	cmp	r0, #0
   1a0f0:	beq	1a100 <flatcc_emitter@@Base+0x100>
   1a0f4:	mvn	r0, #0
   1a0f8:	str	r0, [fp, #-4]
   1a0fc:	b	1a21c <flatcc_emitter@@Base+0x21c>
   1a100:	b	1a0ac <flatcc_emitter@@Base+0xac>
   1a104:	b	1a1b0 <flatcc_emitter@@Base+0x1b0>
   1a108:	ldr	r0, [fp, #8]
   1a10c:	ldr	r1, [sp, #8]
   1a110:	ldr	r1, [r1, #20]
   1a114:	cmp	r0, r1
   1a118:	bhi	1a154 <flatcc_emitter@@Base+0x154>
   1a11c:	ldr	r0, [sp, #8]
   1a120:	ldr	r0, [r0, #16]
   1a124:	str	r0, [sp, #4]
   1a128:	ldr	r0, [fp, #8]
   1a12c:	ldr	r1, [sp, #8]
   1a130:	ldr	r2, [r1, #16]
   1a134:	add	r0, r2, r0
   1a138:	str	r0, [r1, #16]
   1a13c:	ldr	r0, [fp, #8]
   1a140:	ldr	r1, [sp, #8]
   1a144:	ldr	r2, [r1, #20]
   1a148:	sub	r0, r2, r0
   1a14c:	str	r0, [r1, #20]
   1a150:	b	1a1bc <flatcc_emitter@@Base+0x1bc>
   1a154:	b	1a158 <flatcc_emitter@@Base+0x158>
   1a158:	ldr	r0, [sp, #16]
   1a15c:	mvn	r1, #0
   1a160:	add	r1, r0, r1
   1a164:	str	r1, [sp, #16]
   1a168:	cmp	r0, #0
   1a16c:	beq	1a1ac <flatcc_emitter@@Base+0x1ac>
   1a170:	ldr	r0, [sp, #8]
   1a174:	ldr	r1, [fp, #-12]
   1a178:	ldr	r1, [r1]
   1a17c:	ldr	r2, [fp, #-12]
   1a180:	ldr	r2, [r2, #4]
   1a184:	bl	1a334 <flatcc_emitter@@Base+0x334>
   1a188:	cmp	r0, #0
   1a18c:	beq	1a19c <flatcc_emitter@@Base+0x19c>
   1a190:	mvn	r0, #0
   1a194:	str	r0, [fp, #-4]
   1a198:	b	1a21c <flatcc_emitter@@Base+0x21c>
   1a19c:	ldr	r0, [fp, #-12]
   1a1a0:	add	r0, r0, #8
   1a1a4:	str	r0, [fp, #-12]
   1a1a8:	b	1a158 <flatcc_emitter@@Base+0x158>
   1a1ac:	b	1a1b0 <flatcc_emitter@@Base+0x1b0>
   1a1b0:	movw	r0, #0
   1a1b4:	str	r0, [fp, #-4]
   1a1b8:	b	1a21c <flatcc_emitter@@Base+0x21c>
   1a1bc:	b	1a1c0 <flatcc_emitter@@Base+0x1c0>
   1a1c0:	ldr	r0, [sp, #16]
   1a1c4:	mvn	r1, #0
   1a1c8:	add	r1, r0, r1
   1a1cc:	str	r1, [sp, #16]
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a214 <flatcc_emitter@@Base+0x214>
   1a1d8:	ldr	r0, [sp, #4]
   1a1dc:	ldr	r1, [fp, #-12]
   1a1e0:	ldr	r1, [r1]
   1a1e4:	ldr	r2, [fp, #-12]
   1a1e8:	ldr	r2, [r2, #4]
   1a1ec:	bl	12718 <memcpy@plt>
   1a1f0:	ldr	r0, [fp, #-12]
   1a1f4:	ldr	r0, [r0, #4]
   1a1f8:	ldr	r1, [sp, #4]
   1a1fc:	add	r0, r1, r0
   1a200:	str	r0, [sp, #4]
   1a204:	ldr	r0, [fp, #-12]
   1a208:	add	r0, r0, #8
   1a20c:	str	r0, [fp, #-12]
   1a210:	b	1a1c0 <flatcc_emitter@@Base+0x1c0>
   1a214:	movw	r0, #0
   1a218:	str	r0, [fp, #-4]
   1a21c:	ldr	r0, [fp, #-4]
   1a220:	mov	sp, fp
   1a224:	pop	{fp, pc}
   1a228:	push	{fp, lr}
   1a22c:	mov	fp, sp
   1a230:	sub	sp, sp, #24
   1a234:	str	r0, [fp, #-8]
   1a238:	str	r1, [sp, #12]
   1a23c:	str	r2, [sp, #8]
   1a240:	ldr	r0, [sp, #8]
   1a244:	ldr	r1, [sp, #12]
   1a248:	add	r0, r1, r0
   1a24c:	str	r0, [sp, #12]
   1a250:	ldr	r0, [sp, #8]
   1a254:	cmp	r0, #0
   1a258:	beq	1a320 <flatcc_emitter@@Base+0x320>
   1a25c:	ldr	r0, [sp, #8]
   1a260:	str	r0, [sp, #4]
   1a264:	ldr	r0, [sp, #4]
   1a268:	ldr	r1, [fp, #-8]
   1a26c:	ldr	r1, [r1, #12]
   1a270:	cmp	r0, r1
   1a274:	bls	1a2b4 <flatcc_emitter@@Base+0x2b4>
   1a278:	ldr	r0, [fp, #-8]
   1a27c:	ldr	r0, [r0, #12]
   1a280:	str	r0, [sp, #4]
   1a284:	ldr	r0, [sp, #4]
   1a288:	cmp	r0, #0
   1a28c:	bne	1a2b0 <flatcc_emitter@@Base+0x2b0>
   1a290:	ldr	r0, [fp, #-8]
   1a294:	bl	1a570 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1a298:	cmp	r0, #0
   1a29c:	beq	1a2ac <flatcc_emitter@@Base+0x2ac>
   1a2a0:	mvn	r0, #0
   1a2a4:	str	r0, [fp, #-4]
   1a2a8:	b	1a328 <flatcc_emitter@@Base+0x328>
   1a2ac:	b	1a250 <flatcc_emitter@@Base+0x250>
   1a2b0:	b	1a2b4 <flatcc_emitter@@Base+0x2b4>
   1a2b4:	ldr	r0, [sp, #4]
   1a2b8:	ldr	r1, [fp, #-8]
   1a2bc:	ldr	r2, [r1, #8]
   1a2c0:	movw	r3, #0
   1a2c4:	sub	r0, r3, r0
   1a2c8:	add	r0, r2, r0
   1a2cc:	str	r0, [r1, #8]
   1a2d0:	ldr	r0, [sp, #4]
   1a2d4:	ldr	r1, [fp, #-8]
   1a2d8:	ldr	r2, [r1, #12]
   1a2dc:	sub	r0, r2, r0
   1a2e0:	str	r0, [r1, #12]
   1a2e4:	ldr	r0, [sp, #4]
   1a2e8:	ldr	r1, [sp, #12]
   1a2ec:	sub	r0, r3, r0
   1a2f0:	add	r0, r1, r0
   1a2f4:	str	r0, [sp, #12]
   1a2f8:	ldr	r0, [sp, #4]
   1a2fc:	ldr	r1, [sp, #8]
   1a300:	sub	r0, r1, r0
   1a304:	str	r0, [sp, #8]
   1a308:	ldr	r0, [fp, #-8]
   1a30c:	ldr	r0, [r0, #8]
   1a310:	ldr	r1, [sp, #12]
   1a314:	ldr	r2, [sp, #4]
   1a318:	bl	12718 <memcpy@plt>
   1a31c:	b	1a250 <flatcc_emitter@@Base+0x250>
   1a320:	movw	r0, #0
   1a324:	str	r0, [fp, #-4]
   1a328:	ldr	r0, [fp, #-4]
   1a32c:	mov	sp, fp
   1a330:	pop	{fp, pc}
   1a334:	push	{fp, lr}
   1a338:	mov	fp, sp
   1a33c:	sub	sp, sp, #24
   1a340:	str	r0, [fp, #-8]
   1a344:	str	r1, [sp, #12]
   1a348:	str	r2, [sp, #8]
   1a34c:	ldr	r0, [sp, #8]
   1a350:	cmp	r0, #0
   1a354:	beq	1a410 <flatcc_emitter@@Base+0x410>
   1a358:	ldr	r0, [sp, #8]
   1a35c:	str	r0, [sp, #4]
   1a360:	ldr	r0, [sp, #4]
   1a364:	ldr	r1, [fp, #-8]
   1a368:	ldr	r1, [r1, #20]
   1a36c:	cmp	r0, r1
   1a370:	bls	1a3b0 <flatcc_emitter@@Base+0x3b0>
   1a374:	ldr	r0, [fp, #-8]
   1a378:	ldr	r0, [r0, #20]
   1a37c:	str	r0, [sp, #4]
   1a380:	ldr	r0, [sp, #4]
   1a384:	cmp	r0, #0
   1a388:	bne	1a3ac <flatcc_emitter@@Base+0x3ac>
   1a38c:	ldr	r0, [fp, #-8]
   1a390:	bl	1a770 <flatcc_emitter_copy_buffer@@Base+0x34c>
   1a394:	cmp	r0, #0
   1a398:	beq	1a3a8 <flatcc_emitter@@Base+0x3a8>
   1a39c:	mvn	r0, #0
   1a3a0:	str	r0, [fp, #-4]
   1a3a4:	b	1a418 <flatcc_emitter@@Base+0x418>
   1a3a8:	b	1a34c <flatcc_emitter@@Base+0x34c>
   1a3ac:	b	1a3b0 <flatcc_emitter@@Base+0x3b0>
   1a3b0:	ldr	r0, [fp, #-8]
   1a3b4:	ldr	r0, [r0, #16]
   1a3b8:	ldr	r1, [sp, #12]
   1a3bc:	ldr	r2, [sp, #4]
   1a3c0:	bl	12718 <memcpy@plt>
   1a3c4:	ldr	r0, [sp, #4]
   1a3c8:	ldr	r1, [sp, #8]
   1a3cc:	sub	r0, r1, r0
   1a3d0:	str	r0, [sp, #8]
   1a3d4:	ldr	r0, [sp, #4]
   1a3d8:	ldr	r1, [sp, #12]
   1a3dc:	add	r0, r1, r0
   1a3e0:	str	r0, [sp, #12]
   1a3e4:	ldr	r0, [sp, #4]
   1a3e8:	ldr	r1, [fp, #-8]
   1a3ec:	ldr	r2, [r1, #16]
   1a3f0:	add	r0, r2, r0
   1a3f4:	str	r0, [r1, #16]
   1a3f8:	ldr	r0, [sp, #4]
   1a3fc:	ldr	r1, [fp, #-8]
   1a400:	ldr	r2, [r1, #20]
   1a404:	sub	r0, r2, r0
   1a408:	str	r0, [r1, #20]
   1a40c:	b	1a34c <flatcc_emitter@@Base+0x34c>
   1a410:	movw	r0, #0
   1a414:	str	r0, [fp, #-4]
   1a418:	ldr	r0, [fp, #-4]
   1a41c:	mov	sp, fp
   1a420:	pop	{fp, pc}

0001a424 <flatcc_emitter_copy_buffer@@Base>:
   1a424:	push	{fp, lr}
   1a428:	mov	fp, sp
   1a42c:	sub	sp, sp, #24
   1a430:	str	r0, [fp, #-8]
   1a434:	str	r1, [sp, #12]
   1a438:	str	r2, [sp, #8]
   1a43c:	ldr	r0, [sp, #8]
   1a440:	ldr	r1, [fp, #-8]
   1a444:	ldr	r1, [r1, #24]
   1a448:	cmp	r0, r1
   1a44c:	bcs	1a45c <flatcc_emitter_copy_buffer@@Base+0x38>
   1a450:	movw	r0, #0
   1a454:	str	r0, [fp, #-4]
   1a458:	b	1a564 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a45c:	ldr	r0, [fp, #-8]
   1a460:	ldr	r0, [r0]
   1a464:	movw	r1, #0
   1a468:	cmp	r0, r1
   1a46c:	bne	1a47c <flatcc_emitter_copy_buffer@@Base+0x58>
   1a470:	movw	r0, #0
   1a474:	str	r0, [fp, #-4]
   1a478:	b	1a564 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a47c:	ldr	r0, [fp, #-8]
   1a480:	ldr	r0, [r0]
   1a484:	ldr	r1, [fp, #-8]
   1a488:	ldr	r1, [r1, #4]
   1a48c:	cmp	r0, r1
   1a490:	bne	1a4b8 <flatcc_emitter_copy_buffer@@Base+0x94>
   1a494:	ldr	r0, [sp, #12]
   1a498:	ldr	r1, [fp, #-8]
   1a49c:	ldr	r1, [r1, #8]
   1a4a0:	ldr	r2, [fp, #-8]
   1a4a4:	ldr	r2, [r2, #24]
   1a4a8:	bl	12718 <memcpy@plt>
   1a4ac:	ldr	r0, [sp, #12]
   1a4b0:	str	r0, [fp, #-4]
   1a4b4:	b	1a564 <flatcc_emitter_copy_buffer@@Base+0x140>
   1a4b8:	ldr	r0, [fp, #-8]
   1a4bc:	ldr	r0, [r0, #12]
   1a4c0:	movw	r1, #2944	; 0xb80
   1a4c4:	sub	r0, r1, r0
   1a4c8:	str	r0, [sp]
   1a4cc:	ldr	r0, [sp, #12]
   1a4d0:	ldr	r1, [fp, #-8]
   1a4d4:	ldr	r1, [r1, #8]
   1a4d8:	ldr	r2, [sp]
   1a4dc:	bl	12718 <memcpy@plt>
   1a4e0:	ldr	r0, [sp, #12]
   1a4e4:	ldr	r1, [sp]
   1a4e8:	add	r0, r0, r1
   1a4ec:	str	r0, [sp, #12]
   1a4f0:	ldr	r0, [fp, #-8]
   1a4f4:	ldr	r0, [r0]
   1a4f8:	ldr	r0, [r0, #2944]	; 0xb80
   1a4fc:	str	r0, [sp, #4]
   1a500:	ldr	r0, [sp, #4]
   1a504:	ldr	r1, [fp, #-8]
   1a508:	ldr	r1, [r1, #4]
   1a50c:	cmp	r0, r1
   1a510:	beq	1a540 <flatcc_emitter_copy_buffer@@Base+0x11c>
   1a514:	ldr	r0, [sp, #12]
   1a518:	ldr	r1, [sp, #4]
   1a51c:	movw	r2, #2944	; 0xb80
   1a520:	bl	12718 <memcpy@plt>
   1a524:	ldr	r0, [sp, #12]
   1a528:	add	r0, r0, #2944	; 0xb80
   1a52c:	str	r0, [sp, #12]
   1a530:	ldr	r0, [sp, #4]
   1a534:	ldr	r0, [r0, #2944]	; 0xb80
   1a538:	str	r0, [sp, #4]
   1a53c:	b	1a500 <flatcc_emitter_copy_buffer@@Base+0xdc>
   1a540:	ldr	r0, [sp, #12]
   1a544:	ldr	r1, [sp, #4]
   1a548:	ldr	r2, [fp, #-8]
   1a54c:	ldr	r2, [r2, #20]
   1a550:	movw	r3, #2944	; 0xb80
   1a554:	sub	r2, r3, r2
   1a558:	bl	12718 <memcpy@plt>
   1a55c:	ldr	r0, [sp, #12]
   1a560:	str	r0, [fp, #-4]
   1a564:	ldr	r0, [fp, #-4]
   1a568:	mov	sp, fp
   1a56c:	pop	{fp, pc}
   1a570:	push	{fp, lr}
   1a574:	mov	fp, sp
   1a578:	sub	sp, sp, #16
   1a57c:	str	r0, [sp, #8]
   1a580:	movw	r0, #0
   1a584:	str	r0, [sp, #4]
   1a588:	ldr	r1, [sp, #8]
   1a58c:	ldr	r1, [r1]
   1a590:	cmp	r1, r0
   1a594:	beq	1a5ec <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a598:	ldr	r0, [sp, #8]
   1a59c:	ldr	r0, [r0]
   1a5a0:	ldr	r0, [r0, #2948]	; 0xb84
   1a5a4:	ldr	r1, [sp, #8]
   1a5a8:	ldr	r1, [r1, #4]
   1a5ac:	cmp	r0, r1
   1a5b0:	beq	1a5ec <flatcc_emitter_copy_buffer@@Base+0x1c8>
   1a5b4:	ldr	r0, [sp, #8]
   1a5b8:	ldr	r0, [r0]
   1a5bc:	ldr	r0, [r0, #2952]	; 0xb88
   1a5c0:	sub	r0, r0, #2944	; 0xb80
   1a5c4:	ldr	r1, [sp, #8]
   1a5c8:	ldr	r1, [r1]
   1a5cc:	ldr	r1, [r1, #2948]	; 0xb84
   1a5d0:	str	r0, [r1, #2952]	; 0xb88
   1a5d4:	ldr	r0, [sp, #8]
   1a5d8:	ldr	r0, [r0]
   1a5dc:	ldr	r0, [r0, #2948]	; 0xb84
   1a5e0:	ldr	r1, [sp, #8]
   1a5e4:	str	r0, [r1]
   1a5e8:	b	1a71c <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a5ec:	movw	r0, #2956	; 0xb8c
   1a5f0:	bl	1273c <malloc@plt>
   1a5f4:	str	r0, [sp, #4]
   1a5f8:	movw	r1, #0
   1a5fc:	cmp	r0, r1
   1a600:	bne	1a610 <flatcc_emitter_copy_buffer@@Base+0x1ec>
   1a604:	mvn	r0, #0
   1a608:	str	r0, [fp, #-4]
   1a60c:	b	1a764 <flatcc_emitter_copy_buffer@@Base+0x340>
   1a610:	ldr	r0, [sp, #8]
   1a614:	ldr	r1, [r0, #28]
   1a618:	add	r1, r1, #2944	; 0xb80
   1a61c:	str	r1, [r0, #28]
   1a620:	ldr	r0, [sp, #8]
   1a624:	ldr	r0, [r0]
   1a628:	movw	r1, #0
   1a62c:	cmp	r0, r1
   1a630:	beq	1a684 <flatcc_emitter_copy_buffer@@Base+0x260>
   1a634:	ldr	r0, [sp, #8]
   1a638:	ldr	r0, [r0, #4]
   1a63c:	ldr	r1, [sp, #4]
   1a640:	str	r0, [r1, #2948]	; 0xb84
   1a644:	ldr	r0, [sp, #8]
   1a648:	ldr	r0, [r0]
   1a64c:	ldr	r1, [sp, #4]
   1a650:	str	r0, [r1, #2944]	; 0xb80
   1a654:	ldr	r0, [sp, #4]
   1a658:	ldr	r1, [sp, #8]
   1a65c:	ldr	r1, [r1]
   1a660:	str	r0, [r1, #2948]	; 0xb84
   1a664:	ldr	r0, [sp, #4]
   1a668:	ldr	r1, [sp, #8]
   1a66c:	ldr	r1, [r1, #4]
   1a670:	str	r0, [r1, #2944]	; 0xb80
   1a674:	ldr	r0, [sp, #4]
   1a678:	ldr	r1, [sp, #8]
   1a67c:	str	r0, [r1]
   1a680:	b	1a71c <flatcc_emitter_copy_buffer@@Base+0x2f8>
   1a684:	ldr	r0, [sp, #4]
   1a688:	ldr	r1, [sp, #8]
   1a68c:	str	r0, [r1]
   1a690:	ldr	r0, [sp, #4]
   1a694:	ldr	r1, [sp, #8]
   1a698:	str	r0, [r1, #4]
   1a69c:	ldr	r0, [sp, #4]
   1a6a0:	ldr	r1, [sp, #4]
   1a6a4:	str	r0, [r1, #2944]	; 0xb80
   1a6a8:	ldr	r0, [sp, #4]
   1a6ac:	ldr	r1, [sp, #4]
   1a6b0:	str	r0, [r1, #2948]	; 0xb84
   1a6b4:	ldr	r0, [sp, #8]
   1a6b8:	ldr	r0, [r0]
   1a6bc:	add	r0, r0, #1472	; 0x5c0
   1a6c0:	ldr	r1, [sp, #8]
   1a6c4:	str	r0, [r1, #8]
   1a6c8:	ldr	r0, [sp, #8]
   1a6cc:	ldr	r0, [r0, #8]
   1a6d0:	ldr	r1, [sp, #8]
   1a6d4:	str	r0, [r1, #16]
   1a6d8:	ldr	r0, [sp, #8]
   1a6dc:	movw	r1, #1472	; 0x5c0
   1a6e0:	str	r1, [r0, #12]
   1a6e4:	ldr	r0, [sp, #8]
   1a6e8:	ldr	r0, [r0, #12]
   1a6ec:	movw	r1, #2944	; 0xb80
   1a6f0:	sub	r0, r1, r0
   1a6f4:	ldr	r1, [sp, #8]
   1a6f8:	str	r0, [r1, #20]
   1a6fc:	ldr	r0, [sp, #8]
   1a700:	ldr	r0, [r0, #12]
   1a704:	movw	r1, #0
   1a708:	sub	r0, r1, r0
   1a70c:	ldr	r2, [sp, #4]
   1a710:	str	r0, [r2, #2952]	; 0xb88
   1a714:	str	r1, [fp, #-4]
   1a718:	b	1a764 <flatcc_emitter_copy_buffer@@Base+0x340>
   1a71c:	ldr	r0, [sp, #8]
   1a720:	ldr	r0, [r0]
   1a724:	add	r0, r0, #2944	; 0xb80
   1a728:	ldr	r1, [sp, #8]
   1a72c:	str	r0, [r1, #8]
   1a730:	ldr	r0, [sp, #8]
   1a734:	movw	r1, #2944	; 0xb80
   1a738:	str	r1, [r0, #12]
   1a73c:	ldr	r0, [sp, #8]
   1a740:	ldr	r0, [r0]
   1a744:	ldr	r0, [r0, #2944]	; 0xb80
   1a748:	ldr	r0, [r0, #2952]	; 0xb88
   1a74c:	sub	r0, r0, #2944	; 0xb80
   1a750:	ldr	r1, [sp, #8]
   1a754:	ldr	r1, [r1]
   1a758:	str	r0, [r1, #2952]	; 0xb88
   1a75c:	movw	r0, #0
   1a760:	str	r0, [fp, #-4]
   1a764:	ldr	r0, [fp, #-4]
   1a768:	mov	sp, fp
   1a76c:	pop	{fp, pc}
   1a770:	push	{fp, lr}
   1a774:	mov	fp, sp
   1a778:	sub	sp, sp, #16
   1a77c:	str	r0, [sp, #8]
   1a780:	movw	r0, #0
   1a784:	str	r0, [sp, #4]
   1a788:	ldr	r1, [sp, #8]
   1a78c:	ldr	r1, [r1, #4]
   1a790:	cmp	r1, r0
   1a794:	beq	1a7cc <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a798:	ldr	r0, [sp, #8]
   1a79c:	ldr	r0, [r0, #4]
   1a7a0:	ldr	r0, [r0, #2944]	; 0xb80
   1a7a4:	ldr	r1, [sp, #8]
   1a7a8:	ldr	r1, [r1]
   1a7ac:	cmp	r0, r1
   1a7b0:	beq	1a7cc <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1a7b4:	ldr	r0, [sp, #8]
   1a7b8:	ldr	r0, [r0, #4]
   1a7bc:	ldr	r0, [r0, #2944]	; 0xb80
   1a7c0:	ldr	r1, [sp, #8]
   1a7c4:	str	r0, [r1, #4]
   1a7c8:	b	1a8fc <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a7cc:	movw	r0, #2956	; 0xb8c
   1a7d0:	bl	1273c <malloc@plt>
   1a7d4:	str	r0, [sp, #4]
   1a7d8:	movw	r1, #0
   1a7dc:	cmp	r0, r1
   1a7e0:	bne	1a7f0 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1a7e4:	mvn	r0, #0
   1a7e8:	str	r0, [fp, #-4]
   1a7ec:	b	1a940 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a7f0:	ldr	r0, [sp, #8]
   1a7f4:	ldr	r1, [r0, #28]
   1a7f8:	add	r1, r1, #2944	; 0xb80
   1a7fc:	str	r1, [r0, #28]
   1a800:	ldr	r0, [sp, #8]
   1a804:	ldr	r0, [r0, #4]
   1a808:	movw	r1, #0
   1a80c:	cmp	r0, r1
   1a810:	beq	1a864 <flatcc_emitter_copy_buffer@@Base+0x440>
   1a814:	ldr	r0, [sp, #8]
   1a818:	ldr	r0, [r0, #4]
   1a81c:	ldr	r1, [sp, #4]
   1a820:	str	r0, [r1, #2948]	; 0xb84
   1a824:	ldr	r0, [sp, #8]
   1a828:	ldr	r0, [r0]
   1a82c:	ldr	r1, [sp, #4]
   1a830:	str	r0, [r1, #2944]	; 0xb80
   1a834:	ldr	r0, [sp, #4]
   1a838:	ldr	r1, [sp, #8]
   1a83c:	ldr	r1, [r1]
   1a840:	str	r0, [r1, #2948]	; 0xb84
   1a844:	ldr	r0, [sp, #4]
   1a848:	ldr	r1, [sp, #8]
   1a84c:	ldr	r1, [r1, #4]
   1a850:	str	r0, [r1, #2944]	; 0xb80
   1a854:	ldr	r0, [sp, #4]
   1a858:	ldr	r1, [sp, #8]
   1a85c:	str	r0, [r1, #4]
   1a860:	b	1a8fc <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1a864:	ldr	r0, [sp, #4]
   1a868:	ldr	r1, [sp, #8]
   1a86c:	str	r0, [r1]
   1a870:	ldr	r0, [sp, #4]
   1a874:	ldr	r1, [sp, #8]
   1a878:	str	r0, [r1, #4]
   1a87c:	ldr	r0, [sp, #4]
   1a880:	ldr	r1, [sp, #4]
   1a884:	str	r0, [r1, #2944]	; 0xb80
   1a888:	ldr	r0, [sp, #4]
   1a88c:	ldr	r1, [sp, #4]
   1a890:	str	r0, [r1, #2948]	; 0xb84
   1a894:	ldr	r0, [sp, #8]
   1a898:	ldr	r0, [r0]
   1a89c:	add	r0, r0, #1472	; 0x5c0
   1a8a0:	ldr	r1, [sp, #8]
   1a8a4:	str	r0, [r1, #8]
   1a8a8:	ldr	r0, [sp, #8]
   1a8ac:	ldr	r0, [r0, #8]
   1a8b0:	ldr	r1, [sp, #8]
   1a8b4:	str	r0, [r1, #16]
   1a8b8:	ldr	r0, [sp, #8]
   1a8bc:	movw	r1, #1472	; 0x5c0
   1a8c0:	str	r1, [r0, #12]
   1a8c4:	ldr	r0, [sp, #8]
   1a8c8:	ldr	r0, [r0, #12]
   1a8cc:	movw	r1, #2944	; 0xb80
   1a8d0:	sub	r0, r1, r0
   1a8d4:	ldr	r1, [sp, #8]
   1a8d8:	str	r0, [r1, #20]
   1a8dc:	ldr	r0, [sp, #8]
   1a8e0:	ldr	r0, [r0, #12]
   1a8e4:	movw	r1, #0
   1a8e8:	sub	r0, r1, r0
   1a8ec:	ldr	r2, [sp, #4]
   1a8f0:	str	r0, [r2, #2952]	; 0xb88
   1a8f4:	str	r1, [fp, #-4]
   1a8f8:	b	1a940 <flatcc_emitter_copy_buffer@@Base+0x51c>
   1a8fc:	ldr	r0, [sp, #8]
   1a900:	ldr	r0, [r0, #4]
   1a904:	ldr	r1, [sp, #8]
   1a908:	str	r0, [r1, #16]
   1a90c:	ldr	r0, [sp, #8]
   1a910:	movw	r1, #2944	; 0xb80
   1a914:	str	r1, [r0, #20]
   1a918:	ldr	r0, [sp, #8]
   1a91c:	ldr	r0, [r0, #4]
   1a920:	ldr	r0, [r0, #2948]	; 0xb84
   1a924:	ldr	r0, [r0, #2952]	; 0xb88
   1a928:	add	r0, r0, #2944	; 0xb80
   1a92c:	ldr	r1, [sp, #8]
   1a930:	ldr	r1, [r1, #4]
   1a934:	str	r0, [r1, #2952]	; 0xb88
   1a938:	movw	r0, #0
   1a93c:	str	r0, [fp, #-4]
   1a940:	ldr	r0, [fp, #-4]
   1a944:	mov	sp, fp
   1a948:	pop	{fp, pc}

0001a94c <flatcc_verify_error_string@@Base>:
   1a94c:	sub	sp, sp, #12
   1a950:	str	r0, [sp, #4]
   1a954:	ldr	r0, [sp, #4]
   1a958:	cmp	r0, #36	; 0x24
   1a95c:	str	r0, [sp]
   1a960:	bhi	1ac58 <flatcc_verify_error_string@@Base+0x30c>
   1a964:	add	r0, pc, #8
   1a968:	ldr	r1, [sp]
   1a96c:	ldr	r2, [r0, r1, lsl #2]
   1a970:	add	pc, r0, r2
   1a974:	muleq	r0, r4, r0
   1a978:	andeq	r0, r0, r4, lsr #1
   1a97c:	strheq	r0, [r0], -r4
   1a980:	andeq	r0, r0, r4, asr #1
   1a984:	ldrdeq	r0, [r0], -r4
   1a988:	andeq	r0, r0, r4, ror #1
   1a98c:	strdeq	r0, [r0], -r4
   1a990:	andeq	r0, r0, r4, lsl #2
   1a994:	andeq	r0, r0, r4, lsl r1
   1a998:	andeq	r0, r0, r4, lsr #2
   1a99c:	andeq	r0, r0, r4, lsr r1
   1a9a0:	andeq	r0, r0, r4, asr #2
   1a9a4:	andeq	r0, r0, r4, asr r1
   1a9a8:	andeq	r0, r0, r4, ror #2
   1a9ac:	andeq	r0, r0, r4, ror r1
   1a9b0:	andeq	r0, r0, r4, lsl #3
   1a9b4:	muleq	r0, r4, r1
   1a9b8:	andeq	r0, r0, r4, lsr #3
   1a9bc:			; <UNDEFINED> instruction: 0x000001b4
   1a9c0:	andeq	r0, r0, r4, asr #3
   1a9c4:	ldrdeq	r0, [r0], -r4
   1a9c8:	andeq	r0, r0, r4, ror #3
   1a9cc:	strdeq	r0, [r0], -r4
   1a9d0:	andeq	r0, r0, r4, lsl #4
   1a9d4:	andeq	r0, r0, r4, lsl r2
   1a9d8:	andeq	r0, r0, r4, lsr #4
   1a9dc:	andeq	r0, r0, r4, lsr r2
   1a9e0:	andeq	r0, r0, r4, asr #4
   1a9e4:	andeq	r0, r0, r4, asr r2
   1a9e8:	andeq	r0, r0, r4, ror #4
   1a9ec:	andeq	r0, r0, r4, ror r2
   1a9f0:	andeq	r0, r0, r4, lsl #5
   1a9f4:	muleq	r0, r4, r2
   1a9f8:	andeq	r0, r0, r4, lsr #5
   1a9fc:			; <UNDEFINED> instruction: 0x000002b4
   1aa00:	andeq	r0, r0, r4, asr #5
   1aa04:	ldrdeq	r0, [r0], -r4
   1aa08:	ldr	r0, [pc, #752]	; 1ad00 <flatcc_verify_error_string@@Base+0x3b4>
   1aa0c:	add	r0, pc, r0
   1aa10:	str	r0, [sp, #8]
   1aa14:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa18:	ldr	r0, [pc, #732]	; 1acfc <flatcc_verify_error_string@@Base+0x3b0>
   1aa1c:	add	r0, pc, r0
   1aa20:	str	r0, [sp, #8]
   1aa24:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa28:	ldr	r0, [pc, #712]	; 1acf8 <flatcc_verify_error_string@@Base+0x3ac>
   1aa2c:	add	r0, pc, r0
   1aa30:	str	r0, [sp, #8]
   1aa34:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa38:	ldr	r0, [pc, #692]	; 1acf4 <flatcc_verify_error_string@@Base+0x3a8>
   1aa3c:	add	r0, pc, r0
   1aa40:	str	r0, [sp, #8]
   1aa44:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa48:	ldr	r0, [pc, #672]	; 1acf0 <flatcc_verify_error_string@@Base+0x3a4>
   1aa4c:	add	r0, pc, r0
   1aa50:	str	r0, [sp, #8]
   1aa54:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa58:	ldr	r0, [pc, #652]	; 1acec <flatcc_verify_error_string@@Base+0x3a0>
   1aa5c:	add	r0, pc, r0
   1aa60:	str	r0, [sp, #8]
   1aa64:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa68:	ldr	r0, [pc, #632]	; 1ace8 <flatcc_verify_error_string@@Base+0x39c>
   1aa6c:	add	r0, pc, r0
   1aa70:	str	r0, [sp, #8]
   1aa74:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa78:	ldr	r0, [pc, #612]	; 1ace4 <flatcc_verify_error_string@@Base+0x398>
   1aa7c:	add	r0, pc, r0
   1aa80:	str	r0, [sp, #8]
   1aa84:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa88:	ldr	r0, [pc, #592]	; 1ace0 <flatcc_verify_error_string@@Base+0x394>
   1aa8c:	add	r0, pc, r0
   1aa90:	str	r0, [sp, #8]
   1aa94:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aa98:	ldr	r0, [pc, #572]	; 1acdc <flatcc_verify_error_string@@Base+0x390>
   1aa9c:	add	r0, pc, r0
   1aaa0:	str	r0, [sp, #8]
   1aaa4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aaa8:	ldr	r0, [pc, #552]	; 1acd8 <flatcc_verify_error_string@@Base+0x38c>
   1aaac:	add	r0, pc, r0
   1aab0:	str	r0, [sp, #8]
   1aab4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aab8:	ldr	r0, [pc, #532]	; 1acd4 <flatcc_verify_error_string@@Base+0x388>
   1aabc:	add	r0, pc, r0
   1aac0:	str	r0, [sp, #8]
   1aac4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aac8:	ldr	r0, [pc, #512]	; 1acd0 <flatcc_verify_error_string@@Base+0x384>
   1aacc:	add	r0, pc, r0
   1aad0:	str	r0, [sp, #8]
   1aad4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aad8:	ldr	r0, [pc, #492]	; 1accc <flatcc_verify_error_string@@Base+0x380>
   1aadc:	add	r0, pc, r0
   1aae0:	str	r0, [sp, #8]
   1aae4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aae8:	ldr	r0, [pc, #472]	; 1acc8 <flatcc_verify_error_string@@Base+0x37c>
   1aaec:	add	r0, pc, r0
   1aaf0:	str	r0, [sp, #8]
   1aaf4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aaf8:	ldr	r0, [pc, #452]	; 1acc4 <flatcc_verify_error_string@@Base+0x378>
   1aafc:	add	r0, pc, r0
   1ab00:	str	r0, [sp, #8]
   1ab04:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab08:	ldr	r0, [pc, #432]	; 1acc0 <flatcc_verify_error_string@@Base+0x374>
   1ab0c:	add	r0, pc, r0
   1ab10:	str	r0, [sp, #8]
   1ab14:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab18:	ldr	r0, [pc, #412]	; 1acbc <flatcc_verify_error_string@@Base+0x370>
   1ab1c:	add	r0, pc, r0
   1ab20:	str	r0, [sp, #8]
   1ab24:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab28:	ldr	r0, [pc, #392]	; 1acb8 <flatcc_verify_error_string@@Base+0x36c>
   1ab2c:	add	r0, pc, r0
   1ab30:	str	r0, [sp, #8]
   1ab34:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab38:	ldr	r0, [pc, #372]	; 1acb4 <flatcc_verify_error_string@@Base+0x368>
   1ab3c:	add	r0, pc, r0
   1ab40:	str	r0, [sp, #8]
   1ab44:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab48:	ldr	r0, [pc, #352]	; 1acb0 <flatcc_verify_error_string@@Base+0x364>
   1ab4c:	add	r0, pc, r0
   1ab50:	str	r0, [sp, #8]
   1ab54:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab58:	ldr	r0, [pc, #332]	; 1acac <flatcc_verify_error_string@@Base+0x360>
   1ab5c:	add	r0, pc, r0
   1ab60:	str	r0, [sp, #8]
   1ab64:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab68:	ldr	r0, [pc, #312]	; 1aca8 <flatcc_verify_error_string@@Base+0x35c>
   1ab6c:	add	r0, pc, r0
   1ab70:	str	r0, [sp, #8]
   1ab74:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab78:	ldr	r0, [pc, #292]	; 1aca4 <flatcc_verify_error_string@@Base+0x358>
   1ab7c:	add	r0, pc, r0
   1ab80:	str	r0, [sp, #8]
   1ab84:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab88:	ldr	r0, [pc, #272]	; 1aca0 <flatcc_verify_error_string@@Base+0x354>
   1ab8c:	add	r0, pc, r0
   1ab90:	str	r0, [sp, #8]
   1ab94:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ab98:	ldr	r0, [pc, #252]	; 1ac9c <flatcc_verify_error_string@@Base+0x350>
   1ab9c:	add	r0, pc, r0
   1aba0:	str	r0, [sp, #8]
   1aba4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1aba8:	ldr	r0, [pc, #232]	; 1ac98 <flatcc_verify_error_string@@Base+0x34c>
   1abac:	add	r0, pc, r0
   1abb0:	str	r0, [sp, #8]
   1abb4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1abb8:	ldr	r0, [pc, #212]	; 1ac94 <flatcc_verify_error_string@@Base+0x348>
   1abbc:	add	r0, pc, r0
   1abc0:	str	r0, [sp, #8]
   1abc4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1abc8:	ldr	r0, [pc, #192]	; 1ac90 <flatcc_verify_error_string@@Base+0x344>
   1abcc:	add	r0, pc, r0
   1abd0:	str	r0, [sp, #8]
   1abd4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1abd8:	ldr	r0, [pc, #172]	; 1ac8c <flatcc_verify_error_string@@Base+0x340>
   1abdc:	add	r0, pc, r0
   1abe0:	str	r0, [sp, #8]
   1abe4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1abe8:	ldr	r0, [pc, #152]	; 1ac88 <flatcc_verify_error_string@@Base+0x33c>
   1abec:	add	r0, pc, r0
   1abf0:	str	r0, [sp, #8]
   1abf4:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1abf8:	ldr	r0, [pc, #132]	; 1ac84 <flatcc_verify_error_string@@Base+0x338>
   1abfc:	add	r0, pc, r0
   1ac00:	str	r0, [sp, #8]
   1ac04:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ac08:	ldr	r0, [pc, #112]	; 1ac80 <flatcc_verify_error_string@@Base+0x334>
   1ac0c:	add	r0, pc, r0
   1ac10:	str	r0, [sp, #8]
   1ac14:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ac18:	ldr	r0, [pc, #92]	; 1ac7c <flatcc_verify_error_string@@Base+0x330>
   1ac1c:	add	r0, pc, r0
   1ac20:	str	r0, [sp, #8]
   1ac24:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ac28:	ldr	r0, [pc, #72]	; 1ac78 <flatcc_verify_error_string@@Base+0x32c>
   1ac2c:	add	r0, pc, r0
   1ac30:	str	r0, [sp, #8]
   1ac34:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ac38:	ldr	r0, [pc, #52]	; 1ac74 <flatcc_verify_error_string@@Base+0x328>
   1ac3c:	add	r0, pc, r0
   1ac40:	str	r0, [sp, #8]
   1ac44:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ac48:	ldr	r0, [pc, #32]	; 1ac70 <flatcc_verify_error_string@@Base+0x324>
   1ac4c:	add	r0, pc, r0
   1ac50:	str	r0, [sp, #8]
   1ac54:	b	1ac64 <flatcc_verify_error_string@@Base+0x318>
   1ac58:	ldr	r0, [pc, #164]	; 1ad04 <flatcc_verify_error_string@@Base+0x3b8>
   1ac5c:	add	r0, pc, r0
   1ac60:	str	r0, [sp, #8]
   1ac64:	ldr	r0, [sp, #8]
   1ac68:	add	sp, sp, #12
   1ac6c:	bx	lr
   1ac70:	andeq	r4, r0, fp, lsr r2
   1ac74:	andeq	r4, r0, r1, lsr r2
   1ac78:	andeq	r4, r0, sp, lsl #4
   1ac7c:	strdeq	r4, [r0], -r8
   1ac80:	andeq	r4, r0, r1, ror #3
   1ac84:	ldrdeq	r4, [r0], -ip
   1ac88:	andeq	r4, r0, r6, asr #3
   1ac8c:	andeq	r4, r0, lr, lsr #3
   1ac90:	andeq	r4, r0, r6, lsr #3
   1ac94:	muleq	r0, fp, r1
   1ac98:	muleq	r0, r7, r1
   1ac9c:	andeq	r4, r0, r8, ror r1
   1aca0:	andeq	r4, r0, pc, asr r1
   1aca4:	andeq	r4, r0, r6, asr #2
   1aca8:	andeq	r4, r0, r3, lsr #2
   1acac:	andeq	r4, r0, r7, lsl #2
   1acb0:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   1acb4:	andeq	r4, r0, pc, asr #4
   1acb8:	andeq	r4, r0, fp, lsl #2
   1acbc:	strdeq	r4, [r0], -r3
   1acc0:	ldrdeq	r4, [r0], -fp
   1acc4:	andeq	r4, r0, r4, asr #1
   1acc8:	strheq	r4, [r0], -sl
   1accc:	strheq	r4, [r0], -r1
   1acd0:	andeq	r4, r0, r9, lsr #1
   1acd4:	andeq	r4, r0, r8, lsr #1
   1acd8:	andeq	r4, r0, r3, lsr #1
   1acdc:	muleq	r0, pc, r0	; <UNPREDICTABLE>
   1ace0:	muleq	r0, fp, r0
   1ace4:	muleq	r0, r0, r0
   1ace8:	andeq	r4, r0, r1, lsl #1
   1acec:	andeq	r4, r0, lr, rrx
   1acf0:	andeq	r4, r0, r7, rrx
   1acf4:	andeq	r4, r0, sp, asr r0
   1acf8:	andeq	r4, r0, r9, asr r0
   1acfc:	andeq	r4, r0, r1, asr r0
   1ad00:	andeq	r4, r0, lr, asr r0
   1ad04:	andeq	r4, r0, r9, lsr r2

0001ad08 <flatcc_verify_field@@Base>:
   1ad08:	push	{fp, lr}
   1ad0c:	mov	fp, sp
   1ad10:	sub	sp, sp, #24
   1ad14:	str	r0, [fp, #-8]
   1ad18:	strh	r1, [fp, #-10]
   1ad1c:	str	r2, [sp, #8]
   1ad20:	strh	r3, [sp, #6]
   1ad24:	ldr	r0, [fp, #-8]
   1ad28:	ldrh	r1, [fp, #-10]
   1ad2c:	ldr	r3, [sp, #8]
   1ad30:	uxth	r1, r1
   1ad34:	movw	r2, #0
   1ad38:	ldrh	ip, [sp, #6]
   1ad3c:	str	ip, [sp]
   1ad40:	bl	1ad88 <flatcc_verify_field@@Base+0x80>
   1ad44:	cmp	r0, #0
   1ad48:	beq	1ad74 <flatcc_verify_field@@Base+0x6c>
   1ad4c:	ldr	r0, [fp, #-8]
   1ad50:	ldrh	r1, [fp, #-10]
   1ad54:	ldr	r3, [sp, #8]
   1ad58:	uxth	r1, r1
   1ad5c:	movw	r2, #0
   1ad60:	ldrh	ip, [sp, #6]
   1ad64:	str	ip, [sp]
   1ad68:	bl	1ad88 <flatcc_verify_field@@Base+0x80>
   1ad6c:	str	r0, [fp, #-4]
   1ad70:	b	1ad7c <flatcc_verify_field@@Base+0x74>
   1ad74:	movw	r0, #0
   1ad78:	str	r0, [fp, #-4]
   1ad7c:	ldr	r0, [fp, #-4]
   1ad80:	mov	sp, fp
   1ad84:	pop	{fp, pc}
   1ad88:	push	{fp, lr}
   1ad8c:	mov	fp, sp
   1ad90:	sub	sp, sp, #56	; 0x38
   1ad94:	ldr	ip, [fp, #8]
   1ad98:	str	r0, [fp, #-8]
   1ad9c:	strh	r1, [fp, #-10]
   1ada0:	str	r2, [fp, #-16]
   1ada4:	str	r3, [fp, #-20]	; 0xffffffec
   1ada8:	strh	ip, [fp, #-22]	; 0xffffffea
   1adac:	ldr	r0, [fp, #-8]
   1adb0:	ldr	r0, [r0]
   1adb4:	str	r0, [sp, #16]
   1adb8:	ldr	r0, [fp, #-8]
   1adbc:	ldrh	r1, [fp, #-10]
   1adc0:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1adc4:	strh	r0, [sp, #22]
   1adc8:	ldrsh	r0, [sp, #22]
   1adcc:	cmp	r0, #0
   1add0:	bne	1ae20 <flatcc_verify_field@@Base+0x118>
   1add4:	b	1add8 <flatcc_verify_field@@Base+0xd0>
   1add8:	ldr	r0, [fp, #-16]
   1addc:	cmp	r0, #0
   1ade0:	movw	r0, #0
   1ade4:	movne	r0, #1
   1ade8:	mvn	r1, #0
   1adec:	eor	r0, r0, r1
   1adf0:	and	r0, r0, #1
   1adf4:	str	r0, [sp, #12]
   1adf8:	ldr	r0, [sp, #12]
   1adfc:	cmp	r0, #0
   1ae00:	bne	1ae10 <flatcc_verify_field@@Base+0x108>
   1ae04:	movw	r0, #4
   1ae08:	str	r0, [fp, #-4]
   1ae0c:	b	1af08 <flatcc_verify_field@@Base+0x200>
   1ae10:	b	1ae14 <flatcc_verify_field@@Base+0x10c>
   1ae14:	movw	r0, #0
   1ae18:	str	r0, [fp, #-4]
   1ae1c:	b	1af08 <flatcc_verify_field@@Base+0x200>
   1ae20:	ldrh	r0, [sp, #22]
   1ae24:	str	r0, [sp, #28]
   1ae28:	ldr	r0, [sp, #28]
   1ae2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ae30:	add	r0, r0, r1
   1ae34:	str	r0, [sp, #24]
   1ae38:	ldr	r0, [sp, #24]
   1ae3c:	ldr	r1, [fp, #-8]
   1ae40:	ldrh	r1, [r1, #20]
   1ae44:	cmp	r0, r1
   1ae48:	movw	r0, #0
   1ae4c:	movls	r0, #1
   1ae50:	and	r0, r0, #1
   1ae54:	str	r0, [sp, #8]
   1ae58:	ldr	r0, [sp, #8]
   1ae5c:	cmp	r0, #0
   1ae60:	bne	1ae70 <flatcc_verify_field@@Base+0x168>
   1ae64:	movw	r0, #13
   1ae68:	str	r0, [fp, #-4]
   1ae6c:	b	1af08 <flatcc_verify_field@@Base+0x200>
   1ae70:	b	1ae74 <flatcc_verify_field@@Base+0x16c>
   1ae74:	b	1ae78 <flatcc_verify_field@@Base+0x170>
   1ae78:	movw	r0, #1
   1ae7c:	str	r0, [sp, #4]
   1ae80:	ldr	r0, [sp, #4]
   1ae84:	cmp	r0, #0
   1ae88:	bne	1ae98 <flatcc_verify_field@@Base+0x190>
   1ae8c:	movw	r0, #14
   1ae90:	str	r0, [fp, #-4]
   1ae94:	b	1af08 <flatcc_verify_field@@Base+0x200>
   1ae98:	b	1ae9c <flatcc_verify_field@@Base+0x194>
   1ae9c:	ldr	r0, [fp, #-8]
   1aea0:	ldr	r0, [r0, #16]
   1aea4:	ldr	r1, [sp, #16]
   1aea8:	add	r0, r0, r1
   1aeac:	ldr	r1, [sp, #28]
   1aeb0:	add	r0, r1, r0
   1aeb4:	str	r0, [sp, #28]
   1aeb8:	ldr	r0, [sp, #28]
   1aebc:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1aec0:	sub	r1, r1, #1
   1aec4:	and	r0, r0, r1
   1aec8:	cmp	r0, #0
   1aecc:	movw	r0, #0
   1aed0:	movne	r0, #1
   1aed4:	mvn	r1, #0
   1aed8:	eor	r0, r0, r1
   1aedc:	and	r0, r0, #1
   1aee0:	str	r0, [sp]
   1aee4:	ldr	r0, [sp]
   1aee8:	cmp	r0, #0
   1aeec:	bne	1aefc <flatcc_verify_field@@Base+0x1f4>
   1aef0:	movw	r0, #12
   1aef4:	str	r0, [fp, #-4]
   1aef8:	b	1af08 <flatcc_verify_field@@Base+0x200>
   1aefc:	b	1af00 <flatcc_verify_field@@Base+0x1f8>
   1af00:	movw	r0, #0
   1af04:	str	r0, [fp, #-4]
   1af08:	ldr	r0, [fp, #-4]
   1af0c:	mov	sp, fp
   1af10:	pop	{fp, pc}

0001af14 <flatcc_verify_string_field@@Base>:
   1af14:	push	{fp, lr}
   1af18:	mov	fp, sp
   1af1c:	sub	sp, sp, #40	; 0x28
   1af20:	str	r0, [fp, #-8]
   1af24:	strh	r1, [fp, #-10]
   1af28:	str	r2, [fp, #-16]
   1af2c:	ldr	r0, [fp, #-8]
   1af30:	ldrh	r1, [fp, #-10]
   1af34:	ldr	r2, [fp, #-16]
   1af38:	uxth	r1, r1
   1af3c:	add	r3, sp, #20
   1af40:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1af44:	str	r0, [sp, #16]
   1af48:	ldr	r0, [sp, #16]
   1af4c:	cmp	r0, #0
   1af50:	bne	1af60 <flatcc_verify_string_field@@Base+0x4c>
   1af54:	ldr	r0, [sp, #20]
   1af58:	cmp	r0, #0
   1af5c:	bne	1af6c <flatcc_verify_string_field@@Base+0x58>
   1af60:	ldr	r0, [sp, #16]
   1af64:	str	r0, [fp, #-4]
   1af68:	b	1afc8 <flatcc_verify_string_field@@Base+0xb4>
   1af6c:	b	1af70 <flatcc_verify_string_field@@Base+0x5c>
   1af70:	ldr	r0, [fp, #-8]
   1af74:	ldr	r0, [r0]
   1af78:	ldr	r1, [fp, #-8]
   1af7c:	ldr	r1, [r1, #4]
   1af80:	ldr	r2, [sp, #20]
   1af84:	ldr	r3, [fp, #-8]
   1af88:	ldr	r3, [r3]
   1af8c:	ldr	ip, [sp, #20]
   1af90:	str	r0, [sp, #12]
   1af94:	mov	r0, r3
   1af98:	str	r1, [sp, #8]
   1af9c:	mov	r1, ip
   1afa0:	str	r2, [sp, #4]
   1afa4:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1afa8:	ldr	r1, [sp, #12]
   1afac:	str	r0, [sp]
   1afb0:	mov	r0, r1
   1afb4:	ldr	r1, [sp, #8]
   1afb8:	ldr	r2, [sp, #4]
   1afbc:	ldr	r3, [sp]
   1afc0:	bl	1b128 <flatcc_verify_string_field@@Base+0x214>
   1afc4:	str	r0, [fp, #-4]
   1afc8:	ldr	r0, [fp, #-4]
   1afcc:	mov	sp, fp
   1afd0:	pop	{fp, pc}
   1afd4:	push	{fp, lr}
   1afd8:	mov	fp, sp
   1afdc:	sub	sp, sp, #48	; 0x30
   1afe0:	str	r0, [fp, #-8]
   1afe4:	strh	r1, [fp, #-10]
   1afe8:	str	r2, [fp, #-16]
   1afec:	str	r3, [fp, #-20]	; 0xffffffec
   1aff0:	ldr	r0, [fp, #-8]
   1aff4:	ldrh	r1, [fp, #-10]
   1aff8:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1affc:	strh	r0, [sp, #18]
   1b000:	ldrsh	r0, [sp, #18]
   1b004:	cmp	r0, #0
   1b008:	bne	1b03c <flatcc_verify_string_field@@Base+0x128>
   1b00c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b010:	movw	r1, #0
   1b014:	str	r1, [r0]
   1b018:	ldr	r0, [fp, #-16]
   1b01c:	cmp	r0, #0
   1b020:	beq	1b030 <flatcc_verify_string_field@@Base+0x11c>
   1b024:	movw	r0, #4
   1b028:	str	r0, [fp, #-4]
   1b02c:	b	1b11c <flatcc_verify_string_field@@Base+0x208>
   1b030:	movw	r0, #0
   1b034:	str	r0, [fp, #-4]
   1b038:	b	1b11c <flatcc_verify_string_field@@Base+0x208>
   1b03c:	ldrh	r0, [sp, #18]
   1b040:	str	r0, [sp, #24]
   1b044:	ldr	r0, [sp, #24]
   1b048:	add	r0, r0, #4
   1b04c:	str	r0, [sp, #20]
   1b050:	ldr	r0, [sp, #20]
   1b054:	ldr	r1, [fp, #-8]
   1b058:	ldrh	r1, [r1, #20]
   1b05c:	cmp	r0, r1
   1b060:	movw	r0, #0
   1b064:	movls	r0, #1
   1b068:	and	r0, r0, #1
   1b06c:	str	r0, [sp, #12]
   1b070:	ldr	r0, [sp, #12]
   1b074:	cmp	r0, #0
   1b078:	bne	1b088 <flatcc_verify_string_field@@Base+0x174>
   1b07c:	movw	r0, #13
   1b080:	str	r0, [fp, #-4]
   1b084:	b	1b11c <flatcc_verify_string_field@@Base+0x208>
   1b088:	b	1b08c <flatcc_verify_string_field@@Base+0x178>
   1b08c:	b	1b090 <flatcc_verify_string_field@@Base+0x17c>
   1b090:	movw	r0, #1
   1b094:	str	r0, [sp, #8]
   1b098:	ldr	r0, [sp, #8]
   1b09c:	cmp	r0, #0
   1b0a0:	bne	1b0b0 <flatcc_verify_string_field@@Base+0x19c>
   1b0a4:	movw	r0, #14
   1b0a8:	str	r0, [fp, #-4]
   1b0ac:	b	1b11c <flatcc_verify_string_field@@Base+0x208>
   1b0b0:	b	1b0b4 <flatcc_verify_string_field@@Base+0x1a0>
   1b0b4:	ldr	r0, [fp, #-8]
   1b0b8:	ldr	r0, [r0, #16]
   1b0bc:	ldr	r1, [sp, #24]
   1b0c0:	add	r0, r1, r0
   1b0c4:	str	r0, [sp, #24]
   1b0c8:	ldr	r0, [sp, #24]
   1b0cc:	and	r0, r0, #3
   1b0d0:	cmp	r0, #0
   1b0d4:	movw	r0, #0
   1b0d8:	movne	r0, #1
   1b0dc:	mvn	r1, #0
   1b0e0:	eor	r0, r0, r1
   1b0e4:	and	r0, r0, #1
   1b0e8:	str	r0, [sp, #4]
   1b0ec:	ldr	r0, [sp, #4]
   1b0f0:	cmp	r0, #0
   1b0f4:	bne	1b104 <flatcc_verify_string_field@@Base+0x1f0>
   1b0f8:	movw	r0, #12
   1b0fc:	str	r0, [fp, #-4]
   1b100:	b	1b11c <flatcc_verify_string_field@@Base+0x208>
   1b104:	b	1b108 <flatcc_verify_string_field@@Base+0x1f4>
   1b108:	ldr	r0, [sp, #24]
   1b10c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b110:	str	r0, [r1]
   1b114:	movw	r0, #0
   1b118:	str	r0, [fp, #-4]
   1b11c:	ldr	r0, [fp, #-4]
   1b120:	mov	sp, fp
   1b124:	pop	{fp, pc}
   1b128:	push	{fp, lr}
   1b12c:	mov	fp, sp
   1b130:	sub	sp, sp, #40	; 0x28
   1b134:	str	r0, [fp, #-8]
   1b138:	str	r1, [fp, #-12]
   1b13c:	str	r2, [fp, #-16]
   1b140:	str	r3, [sp, #20]
   1b144:	ldr	r0, [fp, #-12]
   1b148:	ldr	r1, [fp, #-16]
   1b14c:	ldr	r2, [sp, #20]
   1b150:	bl	1d1d4 <flatcc_verify_union_vector_field@@Base+0x56c>
   1b154:	str	r0, [sp, #12]
   1b158:	ldr	r0, [sp, #12]
   1b15c:	cmp	r0, #0
   1b160:	bne	1b170 <flatcc_verify_string_field@@Base+0x25c>
   1b164:	movw	r0, #17
   1b168:	str	r0, [fp, #-4]
   1b16c:	b	1b238 <flatcc_verify_string_field@@Base+0x324>
   1b170:	b	1b174 <flatcc_verify_string_field@@Base+0x260>
   1b174:	ldr	r0, [sp, #20]
   1b178:	ldr	r1, [fp, #-16]
   1b17c:	add	r0, r1, r0
   1b180:	str	r0, [fp, #-16]
   1b184:	ldr	r0, [fp, #-8]
   1b188:	ldr	r1, [fp, #-16]
   1b18c:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b190:	str	r0, [sp, #16]
   1b194:	ldr	r0, [fp, #-16]
   1b198:	add	r0, r0, #4
   1b19c:	str	r0, [fp, #-16]
   1b1a0:	ldr	r0, [fp, #-12]
   1b1a4:	ldr	r1, [fp, #-16]
   1b1a8:	sub	r0, r0, r1
   1b1ac:	ldr	r1, [sp, #16]
   1b1b0:	add	r1, r1, #1
   1b1b4:	cmp	r0, r1
   1b1b8:	movw	r0, #0
   1b1bc:	movcs	r0, #1
   1b1c0:	and	r0, r0, #1
   1b1c4:	str	r0, [sp, #8]
   1b1c8:	ldr	r0, [sp, #8]
   1b1cc:	cmp	r0, #0
   1b1d0:	bne	1b1e0 <flatcc_verify_string_field@@Base+0x2cc>
   1b1d4:	movw	r0, #8
   1b1d8:	str	r0, [fp, #-4]
   1b1dc:	b	1b238 <flatcc_verify_string_field@@Base+0x324>
   1b1e0:	b	1b1e4 <flatcc_verify_string_field@@Base+0x2d0>
   1b1e4:	b	1b1e8 <flatcc_verify_string_field@@Base+0x2d4>
   1b1e8:	ldr	r0, [fp, #-8]
   1b1ec:	ldr	r1, [fp, #-16]
   1b1f0:	add	r0, r0, r1
   1b1f4:	ldr	r1, [sp, #16]
   1b1f8:	add	r0, r0, r1
   1b1fc:	ldrb	r0, [r0]
   1b200:	cmp	r0, #0
   1b204:	movw	r0, #0
   1b208:	moveq	r0, #1
   1b20c:	and	r0, r0, #1
   1b210:	str	r0, [sp, #4]
   1b214:	ldr	r0, [sp, #4]
   1b218:	cmp	r0, #0
   1b21c:	bne	1b22c <flatcc_verify_string_field@@Base+0x318>
   1b220:	movw	r0, #7
   1b224:	str	r0, [fp, #-4]
   1b228:	b	1b238 <flatcc_verify_string_field@@Base+0x324>
   1b22c:	b	1b230 <flatcc_verify_string_field@@Base+0x31c>
   1b230:	movw	r0, #0
   1b234:	str	r0, [fp, #-4]
   1b238:	ldr	r0, [fp, #-4]
   1b23c:	mov	sp, fp
   1b240:	pop	{fp, pc}
   1b244:	push	{fp, lr}
   1b248:	mov	fp, sp
   1b24c:	sub	sp, sp, #8
   1b250:	str	r0, [sp, #4]
   1b254:	str	r1, [sp]
   1b258:	ldr	r0, [sp, #4]
   1b25c:	ldr	r1, [sp]
   1b260:	add	r0, r0, r1
   1b264:	bl	1d258 <flatcc_verify_union_vector_field@@Base+0x5f0>
   1b268:	mov	sp, fp
   1b26c:	pop	{fp, pc}

0001b270 <flatcc_verify_vector_field@@Base>:
   1b270:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b274:	add	fp, sp, #24
   1b278:	sub	sp, sp, #72	; 0x48
   1b27c:	ldr	ip, [fp, #12]
   1b280:	ldr	lr, [fp, #8]
   1b284:	str	r0, [fp, #-32]	; 0xffffffe0
   1b288:	strh	r1, [fp, #-34]	; 0xffffffde
   1b28c:	str	r2, [fp, #-40]	; 0xffffffd8
   1b290:	str	r3, [fp, #-44]	; 0xffffffd4
   1b294:	strh	lr, [fp, #-46]	; 0xffffffd2
   1b298:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b29c:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1b2a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b2a4:	uxth	r1, r1
   1b2a8:	add	r3, sp, #44	; 0x2c
   1b2ac:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1b2b0:	str	r0, [sp, #40]	; 0x28
   1b2b4:	ldr	r0, [sp, #40]	; 0x28
   1b2b8:	cmp	r0, #0
   1b2bc:	bne	1b2cc <flatcc_verify_vector_field@@Base+0x5c>
   1b2c0:	ldr	r0, [sp, #44]	; 0x2c
   1b2c4:	cmp	r0, #0
   1b2c8:	bne	1b2d8 <flatcc_verify_vector_field@@Base+0x68>
   1b2cc:	ldr	r0, [sp, #40]	; 0x28
   1b2d0:	str	r0, [fp, #-28]	; 0xffffffe4
   1b2d4:	b	1b374 <flatcc_verify_vector_field@@Base+0x104>
   1b2d8:	b	1b2dc <flatcc_verify_vector_field@@Base+0x6c>
   1b2dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b2e0:	ldr	r0, [r0]
   1b2e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b2e8:	ldr	r1, [r1, #4]
   1b2ec:	ldr	r2, [sp, #44]	; 0x2c
   1b2f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b2f4:	ldr	r3, [r3]
   1b2f8:	ldr	ip, [sp, #44]	; 0x2c
   1b2fc:	str	r0, [sp, #36]	; 0x24
   1b300:	mov	r0, r3
   1b304:	str	r1, [sp, #32]
   1b308:	mov	r1, ip
   1b30c:	str	r2, [sp, #28]
   1b310:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b314:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1b318:	ldrh	r2, [fp, #-46]	; 0xffffffd2
   1b31c:	ldr	r3, [fp, #12]
   1b320:	ldr	ip, [sp, #36]	; 0x24
   1b324:	str	r0, [sp, #24]
   1b328:	mov	r0, ip
   1b32c:	ldr	lr, [sp, #32]
   1b330:	str	r1, [sp, #20]
   1b334:	mov	r1, lr
   1b338:	ldr	r4, [sp, #28]
   1b33c:	str	r2, [sp, #16]
   1b340:	mov	r2, r4
   1b344:	ldr	r5, [sp, #24]
   1b348:	str	r3, [sp, #12]
   1b34c:	mov	r3, r5
   1b350:	ldr	r6, [sp, #20]
   1b354:	str	r6, [sp]
   1b358:	ldr	r7, [sp, #16]
   1b35c:	uxth	r8, r7
   1b360:	str	r8, [sp, #4]
   1b364:	ldr	r8, [sp, #12]
   1b368:	str	r8, [sp, #8]
   1b36c:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1b370:	str	r0, [fp, #-28]	; 0xffffffe4
   1b374:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b378:	sub	sp, fp, #24
   1b37c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b380:	push	{r4, sl, fp, lr}
   1b384:	add	fp, sp, #8
   1b388:	sub	sp, sp, #40	; 0x28
   1b38c:	ldr	ip, [fp, #16]
   1b390:	ldr	lr, [fp, #12]
   1b394:	ldr	r4, [fp, #8]
   1b398:	str	r0, [fp, #-16]
   1b39c:	str	r1, [fp, #-20]	; 0xffffffec
   1b3a0:	str	r2, [sp, #24]
   1b3a4:	str	r3, [sp, #20]
   1b3a8:	strh	lr, [sp, #18]
   1b3ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b3b0:	ldr	r1, [sp, #24]
   1b3b4:	ldr	r2, [sp, #20]
   1b3b8:	ldrh	r3, [sp, #18]
   1b3bc:	bl	1d290 <flatcc_verify_union_vector_field@@Base+0x628>
   1b3c0:	str	r0, [sp, #8]
   1b3c4:	ldr	r0, [sp, #8]
   1b3c8:	cmp	r0, #0
   1b3cc:	bne	1b3dc <flatcc_verify_vector_field@@Base+0x16c>
   1b3d0:	movw	r0, #16
   1b3d4:	str	r0, [fp, #-12]
   1b3d8:	b	1b498 <flatcc_verify_vector_field@@Base+0x228>
   1b3dc:	b	1b3e0 <flatcc_verify_vector_field@@Base+0x170>
   1b3e0:	ldr	r0, [sp, #20]
   1b3e4:	ldr	r1, [sp, #24]
   1b3e8:	add	r0, r1, r0
   1b3ec:	str	r0, [sp, #24]
   1b3f0:	ldr	r0, [fp, #-16]
   1b3f4:	ldr	r1, [sp, #24]
   1b3f8:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b3fc:	str	r0, [sp, #12]
   1b400:	ldr	r0, [sp, #24]
   1b404:	add	r0, r0, #4
   1b408:	str	r0, [sp, #24]
   1b40c:	ldr	r0, [sp, #12]
   1b410:	ldr	r1, [fp, #16]
   1b414:	cmp	r0, r1
   1b418:	movw	r0, #0
   1b41c:	movls	r0, #1
   1b420:	and	r0, r0, #1
   1b424:	str	r0, [sp, #4]
   1b428:	ldr	r0, [sp, #4]
   1b42c:	cmp	r0, #0
   1b430:	bne	1b440 <flatcc_verify_vector_field@@Base+0x1d0>
   1b434:	movw	r0, #25
   1b438:	str	r0, [fp, #-12]
   1b43c:	b	1b498 <flatcc_verify_vector_field@@Base+0x228>
   1b440:	b	1b444 <flatcc_verify_vector_field@@Base+0x1d4>
   1b444:	b	1b448 <flatcc_verify_vector_field@@Base+0x1d8>
   1b448:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b44c:	ldr	r1, [sp, #24]
   1b450:	sub	r0, r0, r1
   1b454:	ldr	r1, [sp, #12]
   1b458:	ldr	r2, [fp, #8]
   1b45c:	mul	r1, r1, r2
   1b460:	cmp	r0, r1
   1b464:	movw	r0, #0
   1b468:	movcs	r0, #1
   1b46c:	and	r0, r0, #1
   1b470:	str	r0, [sp]
   1b474:	ldr	r0, [sp]
   1b478:	cmp	r0, #0
   1b47c:	bne	1b48c <flatcc_verify_vector_field@@Base+0x21c>
   1b480:	movw	r0, #26
   1b484:	str	r0, [fp, #-12]
   1b488:	b	1b498 <flatcc_verify_vector_field@@Base+0x228>
   1b48c:	b	1b490 <flatcc_verify_vector_field@@Base+0x220>
   1b490:	movw	r0, #0
   1b494:	str	r0, [fp, #-12]
   1b498:	ldr	r0, [fp, #-12]
   1b49c:	sub	sp, fp, #8
   1b4a0:	pop	{r4, sl, fp, pc}

0001b4a4 <flatcc_verify_string_vector_field@@Base>:
   1b4a4:	push	{fp, lr}
   1b4a8:	mov	fp, sp
   1b4ac:	sub	sp, sp, #40	; 0x28
   1b4b0:	str	r0, [fp, #-8]
   1b4b4:	strh	r1, [fp, #-10]
   1b4b8:	str	r2, [fp, #-16]
   1b4bc:	ldr	r0, [fp, #-8]
   1b4c0:	ldrh	r1, [fp, #-10]
   1b4c4:	ldr	r2, [fp, #-16]
   1b4c8:	uxth	r1, r1
   1b4cc:	add	r3, sp, #20
   1b4d0:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1b4d4:	str	r0, [sp, #16]
   1b4d8:	ldr	r0, [sp, #16]
   1b4dc:	cmp	r0, #0
   1b4e0:	bne	1b4f0 <flatcc_verify_string_vector_field@@Base+0x4c>
   1b4e4:	ldr	r0, [sp, #20]
   1b4e8:	cmp	r0, #0
   1b4ec:	bne	1b4fc <flatcc_verify_string_vector_field@@Base+0x58>
   1b4f0:	ldr	r0, [sp, #16]
   1b4f4:	str	r0, [fp, #-4]
   1b4f8:	b	1b558 <flatcc_verify_string_vector_field@@Base+0xb4>
   1b4fc:	b	1b500 <flatcc_verify_string_vector_field@@Base+0x5c>
   1b500:	ldr	r0, [fp, #-8]
   1b504:	ldr	r0, [r0]
   1b508:	ldr	r1, [fp, #-8]
   1b50c:	ldr	r1, [r1, #4]
   1b510:	ldr	r2, [sp, #20]
   1b514:	ldr	r3, [fp, #-8]
   1b518:	ldr	r3, [r3]
   1b51c:	ldr	ip, [sp, #20]
   1b520:	str	r0, [sp, #12]
   1b524:	mov	r0, r3
   1b528:	str	r1, [sp, #8]
   1b52c:	mov	r1, ip
   1b530:	str	r2, [sp, #4]
   1b534:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b538:	ldr	r1, [sp, #12]
   1b53c:	str	r0, [sp]
   1b540:	mov	r0, r1
   1b544:	ldr	r1, [sp, #8]
   1b548:	ldr	r2, [sp, #4]
   1b54c:	ldr	r3, [sp]
   1b550:	bl	1b564 <flatcc_verify_string_vector_field@@Base+0xc0>
   1b554:	str	r0, [fp, #-4]
   1b558:	ldr	r0, [fp, #-4]
   1b55c:	mov	sp, fp
   1b560:	pop	{fp, pc}
   1b564:	push	{fp, lr}
   1b568:	mov	fp, sp
   1b56c:	sub	sp, sp, #80	; 0x50
   1b570:	ldr	ip, [pc, #424]	; 1b720 <flatcc_verify_string_vector_field@@Base+0x27c>
   1b574:	str	r0, [fp, #-8]
   1b578:	str	r1, [fp, #-12]
   1b57c:	str	r2, [fp, #-16]
   1b580:	str	r3, [fp, #-20]	; 0xffffffec
   1b584:	ldr	r0, [fp, #-8]
   1b588:	ldr	r1, [fp, #-12]
   1b58c:	ldr	r2, [fp, #-16]
   1b590:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b594:	movw	lr, #4
   1b598:	str	lr, [sp]
   1b59c:	movw	lr, #4
   1b5a0:	uxth	lr, lr
   1b5a4:	str	lr, [sp, #4]
   1b5a8:	str	ip, [sp, #8]
   1b5ac:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1b5b0:	cmp	r0, #0
   1b5b4:	beq	1b608 <flatcc_verify_string_vector_field@@Base+0x164>
   1b5b8:	ldr	r0, [pc, #352]	; 1b720 <flatcc_verify_string_vector_field@@Base+0x27c>
   1b5bc:	ldr	r1, [fp, #-8]
   1b5c0:	ldr	r2, [fp, #-12]
   1b5c4:	ldr	r3, [fp, #-16]
   1b5c8:	ldr	ip, [fp, #-20]	; 0xffffffec
   1b5cc:	str	r0, [fp, #-32]	; 0xffffffe0
   1b5d0:	mov	r0, r1
   1b5d4:	mov	r1, r2
   1b5d8:	mov	r2, r3
   1b5dc:	mov	r3, ip
   1b5e0:	movw	ip, #4
   1b5e4:	str	ip, [sp]
   1b5e8:	movw	ip, #4
   1b5ec:	uxth	ip, ip
   1b5f0:	str	ip, [sp, #4]
   1b5f4:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1b5f8:	str	ip, [sp, #8]
   1b5fc:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1b600:	str	r0, [fp, #-4]
   1b604:	b	1b714 <flatcc_verify_string_vector_field@@Base+0x270>
   1b608:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b60c:	ldr	r1, [fp, #-16]
   1b610:	add	r0, r1, r0
   1b614:	str	r0, [fp, #-16]
   1b618:	ldr	r0, [fp, #-8]
   1b61c:	ldr	r1, [fp, #-16]
   1b620:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b624:	str	r0, [fp, #-28]	; 0xffffffe4
   1b628:	ldr	r0, [fp, #-16]
   1b62c:	add	r0, r0, #4
   1b630:	str	r0, [fp, #-16]
   1b634:	movw	r0, #0
   1b638:	str	r0, [fp, #-24]	; 0xffffffe8
   1b63c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b640:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b644:	cmp	r0, r1
   1b648:	bcs	1b70c <flatcc_verify_string_vector_field@@Base+0x268>
   1b64c:	ldr	r0, [fp, #-8]
   1b650:	ldr	r1, [fp, #-12]
   1b654:	ldr	r2, [fp, #-16]
   1b658:	ldr	r3, [fp, #-8]
   1b65c:	ldr	ip, [fp, #-16]
   1b660:	str	r0, [fp, #-36]	; 0xffffffdc
   1b664:	mov	r0, r3
   1b668:	str	r1, [sp, #40]	; 0x28
   1b66c:	mov	r1, ip
   1b670:	str	r2, [sp, #36]	; 0x24
   1b674:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b678:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b67c:	str	r0, [sp, #32]
   1b680:	mov	r0, r1
   1b684:	ldr	r1, [sp, #40]	; 0x28
   1b688:	ldr	r2, [sp, #36]	; 0x24
   1b68c:	ldr	r3, [sp, #32]
   1b690:	bl	1b128 <flatcc_verify_string_field@@Base+0x214>
   1b694:	cmp	r0, #0
   1b698:	beq	1b6ec <flatcc_verify_string_vector_field@@Base+0x248>
   1b69c:	ldr	r0, [fp, #-8]
   1b6a0:	ldr	r1, [fp, #-12]
   1b6a4:	ldr	r2, [fp, #-16]
   1b6a8:	ldr	r3, [fp, #-8]
   1b6ac:	ldr	ip, [fp, #-16]
   1b6b0:	str	r0, [sp, #28]
   1b6b4:	mov	r0, r3
   1b6b8:	str	r1, [sp, #24]
   1b6bc:	mov	r1, ip
   1b6c0:	str	r2, [sp, #20]
   1b6c4:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b6c8:	ldr	r1, [sp, #28]
   1b6cc:	str	r0, [sp, #16]
   1b6d0:	mov	r0, r1
   1b6d4:	ldr	r1, [sp, #24]
   1b6d8:	ldr	r2, [sp, #20]
   1b6dc:	ldr	r3, [sp, #16]
   1b6e0:	bl	1b128 <flatcc_verify_string_field@@Base+0x214>
   1b6e4:	str	r0, [fp, #-4]
   1b6e8:	b	1b714 <flatcc_verify_string_vector_field@@Base+0x270>
   1b6ec:	b	1b6f0 <flatcc_verify_string_vector_field@@Base+0x24c>
   1b6f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6f4:	add	r0, r0, #1
   1b6f8:	str	r0, [fp, #-24]	; 0xffffffe8
   1b6fc:	ldr	r0, [fp, #-16]
   1b700:	add	r0, r0, #4
   1b704:	str	r0, [fp, #-16]
   1b708:	b	1b63c <flatcc_verify_string_vector_field@@Base+0x198>
   1b70c:	movw	r0, #0
   1b710:	str	r0, [fp, #-4]
   1b714:	ldr	r0, [fp, #-4]
   1b718:	mov	sp, fp
   1b71c:	pop	{fp, pc}
   1b720:	svccc	0x00ffffff

0001b724 <flatcc_verify_table_field@@Base>:
   1b724:	push	{r4, r5, fp, lr}
   1b728:	add	fp, sp, #8
   1b72c:	sub	sp, sp, #64	; 0x40
   1b730:	str	r0, [fp, #-16]
   1b734:	strh	r1, [fp, #-18]	; 0xffffffee
   1b738:	str	r2, [fp, #-24]	; 0xffffffe8
   1b73c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b740:	ldr	r0, [fp, #-16]
   1b744:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1b748:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b74c:	uxth	r1, r1
   1b750:	sub	r3, fp, #32
   1b754:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1b758:	str	r0, [sp, #36]	; 0x24
   1b75c:	ldr	r0, [sp, #36]	; 0x24
   1b760:	cmp	r0, #0
   1b764:	bne	1b774 <flatcc_verify_table_field@@Base+0x50>
   1b768:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b76c:	cmp	r0, #0
   1b770:	bne	1b780 <flatcc_verify_table_field@@Base+0x5c>
   1b774:	ldr	r0, [sp, #36]	; 0x24
   1b778:	str	r0, [fp, #-12]
   1b77c:	b	1b808 <flatcc_verify_table_field@@Base+0xe4>
   1b780:	b	1b784 <flatcc_verify_table_field@@Base+0x60>
   1b784:	ldr	r0, [fp, #-16]
   1b788:	ldr	r0, [r0]
   1b78c:	ldr	r1, [fp, #-16]
   1b790:	ldr	r1, [r1, #4]
   1b794:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b798:	ldr	r3, [fp, #-16]
   1b79c:	ldr	r3, [r3]
   1b7a0:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1b7a4:	str	r0, [sp, #32]
   1b7a8:	mov	r0, r3
   1b7ac:	str	r1, [sp, #28]
   1b7b0:	mov	r1, ip
   1b7b4:	str	r2, [sp, #24]
   1b7b8:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b7bc:	ldr	r1, [fp, #-16]
   1b7c0:	ldr	r1, [r1, #8]
   1b7c4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b7c8:	ldr	r3, [sp, #32]
   1b7cc:	str	r0, [sp, #20]
   1b7d0:	mov	r0, r3
   1b7d4:	ldr	ip, [sp, #28]
   1b7d8:	str	r1, [sp, #16]
   1b7dc:	mov	r1, ip
   1b7e0:	ldr	lr, [sp, #24]
   1b7e4:	str	r2, [sp, #12]
   1b7e8:	mov	r2, lr
   1b7ec:	ldr	r3, [sp, #20]
   1b7f0:	ldr	r4, [sp, #16]
   1b7f4:	str	r4, [sp]
   1b7f8:	ldr	r5, [sp, #12]
   1b7fc:	str	r5, [sp, #4]
   1b800:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1b804:	str	r0, [fp, #-12]
   1b808:	ldr	r0, [fp, #-12]
   1b80c:	sub	sp, fp, #8
   1b810:	pop	{r4, r5, fp, pc}
   1b814:	push	{fp, lr}
   1b818:	mov	fp, sp
   1b81c:	sub	sp, sp, #104	; 0x68
   1b820:	ldr	ip, [fp, #12]
   1b824:	ldr	lr, [fp, #8]
   1b828:	str	r0, [fp, #-8]
   1b82c:	str	r1, [fp, #-12]
   1b830:	str	r2, [fp, #-16]
   1b834:	str	r3, [fp, #-20]	; 0xffffffec
   1b838:	ldr	r0, [fp, #8]
   1b83c:	sub	r0, r0, #1
   1b840:	str	r0, [sp, #60]	; 0x3c
   1b844:	str	r0, [sp, #48]	; 0x30
   1b848:	ldr	r0, [sp, #48]	; 0x30
   1b84c:	cmp	r0, #0
   1b850:	bne	1b860 <flatcc_verify_table_field@@Base+0x13c>
   1b854:	movw	r0, #3
   1b858:	str	r0, [fp, #-4]
   1b85c:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1b860:	b	1b864 <flatcc_verify_table_field@@Base+0x140>
   1b864:	b	1b868 <flatcc_verify_table_field@@Base+0x144>
   1b868:	ldr	r0, [fp, #-12]
   1b86c:	ldr	r1, [fp, #-16]
   1b870:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b874:	bl	1d1d4 <flatcc_verify_union_vector_field@@Base+0x56c>
   1b878:	str	r0, [sp, #44]	; 0x2c
   1b87c:	ldr	r0, [sp, #44]	; 0x2c
   1b880:	cmp	r0, #0
   1b884:	bne	1b894 <flatcc_verify_table_field@@Base+0x170>
   1b888:	movw	r0, #15
   1b88c:	str	r0, [fp, #-4]
   1b890:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1b894:	b	1b898 <flatcc_verify_table_field@@Base+0x174>
   1b898:	ldr	r0, [fp, #-16]
   1b89c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b8a0:	add	r0, r0, r1
   1b8a4:	str	r0, [sp, #68]	; 0x44
   1b8a8:	ldr	r0, [sp, #68]	; 0x44
   1b8ac:	ldr	r1, [fp, #-8]
   1b8b0:	ldr	r2, [sp, #68]	; 0x44
   1b8b4:	str	r0, [sp, #16]
   1b8b8:	mov	r0, r1
   1b8bc:	mov	r1, r2
   1b8c0:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1b8c4:	ldr	r1, [sp, #16]
   1b8c8:	sub	r0, r1, r0
   1b8cc:	str	r0, [fp, #-24]	; 0xffffffe8
   1b8d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b8d4:	cmp	r0, #0
   1b8d8:	movw	r0, #0
   1b8dc:	str	r0, [sp, #12]
   1b8e0:	blt	1b904 <flatcc_verify_table_field@@Base+0x1e0>
   1b8e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b8e8:	and	r0, r0, #1
   1b8ec:	cmp	r0, #0
   1b8f0:	movw	r0, #0
   1b8f4:	movne	r0, #1
   1b8f8:	mvn	r1, #0
   1b8fc:	eor	r0, r0, r1
   1b900:	str	r0, [sp, #12]
   1b904:	ldr	r0, [sp, #12]
   1b908:	and	r0, r0, #1
   1b90c:	str	r0, [sp, #40]	; 0x28
   1b910:	ldr	r0, [sp, #40]	; 0x28
   1b914:	cmp	r0, #0
   1b918:	bne	1b928 <flatcc_verify_table_field@@Base+0x204>
   1b91c:	movw	r0, #29
   1b920:	str	r0, [fp, #-4]
   1b924:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1b928:	b	1b92c <flatcc_verify_table_field@@Base+0x208>
   1b92c:	b	1b930 <flatcc_verify_table_field@@Base+0x20c>
   1b930:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b934:	add	r0, r0, #2
   1b938:	ldr	r1, [fp, #-12]
   1b93c:	cmp	r0, r1
   1b940:	movw	r0, #0
   1b944:	movls	r0, #1
   1b948:	and	r0, r0, #1
   1b94c:	str	r0, [sp, #36]	; 0x24
   1b950:	ldr	r0, [sp, #36]	; 0x24
   1b954:	cmp	r0, #0
   1b958:	bne	1b968 <flatcc_verify_table_field@@Base+0x244>
   1b95c:	movw	r0, #27
   1b960:	str	r0, [fp, #-4]
   1b964:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1b968:	b	1b96c <flatcc_verify_table_field@@Base+0x248>
   1b96c:	ldr	r0, [fp, #-8]
   1b970:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b974:	bl	1d350 <flatcc_verify_union_vector_field@@Base+0x6e8>
   1b978:	strh	r0, [sp, #74]	; 0x4a
   1b97c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b980:	ldrh	r1, [sp, #74]	; 0x4a
   1b984:	add	r0, r0, r1
   1b988:	str	r0, [fp, #-28]	; 0xffffffe4
   1b98c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b990:	ldr	r1, [fp, #-12]
   1b994:	cmp	r0, r1
   1b998:	movw	r0, #0
   1b99c:	str	r0, [sp, #8]
   1b9a0:	bhi	1b9c4 <flatcc_verify_table_field@@Base+0x2a0>
   1b9a4:	ldrh	r0, [sp, #74]	; 0x4a
   1b9a8:	and	r0, r0, #1
   1b9ac:	cmp	r0, #0
   1b9b0:	movw	r0, #0
   1b9b4:	movne	r0, #1
   1b9b8:	mvn	r1, #0
   1b9bc:	eor	r0, r0, r1
   1b9c0:	str	r0, [sp, #8]
   1b9c4:	ldr	r0, [sp, #8]
   1b9c8:	and	r0, r0, #1
   1b9cc:	str	r0, [sp, #32]
   1b9d0:	ldr	r0, [sp, #32]
   1b9d4:	cmp	r0, #0
   1b9d8:	bne	1b9e8 <flatcc_verify_table_field@@Base+0x2c4>
   1b9dc:	movw	r0, #30
   1b9e0:	str	r0, [fp, #-4]
   1b9e4:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1b9e8:	b	1b9ec <flatcc_verify_table_field@@Base+0x2c8>
   1b9ec:	b	1b9f0 <flatcc_verify_table_field@@Base+0x2cc>
   1b9f0:	movw	r0, #1
   1b9f4:	str	r0, [sp, #28]
   1b9f8:	ldr	r0, [sp, #28]
   1b9fc:	cmp	r0, #0
   1ba00:	bne	1ba10 <flatcc_verify_table_field@@Base+0x2ec>
   1ba04:	movw	r0, #31
   1ba08:	str	r0, [fp, #-4]
   1ba0c:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1ba10:	b	1ba14 <flatcc_verify_table_field@@Base+0x2f0>
   1ba14:	b	1ba18 <flatcc_verify_table_field@@Base+0x2f4>
   1ba18:	ldrh	r0, [sp, #74]	; 0x4a
   1ba1c:	cmp	r0, #4
   1ba20:	movw	r0, #0
   1ba24:	movcs	r0, #1
   1ba28:	and	r0, r0, #1
   1ba2c:	str	r0, [sp, #24]
   1ba30:	ldr	r0, [sp, #24]
   1ba34:	cmp	r0, #0
   1ba38:	bne	1ba48 <flatcc_verify_table_field@@Base+0x324>
   1ba3c:	movw	r0, #28
   1ba40:	str	r0, [fp, #-4]
   1ba44:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1ba48:	b	1ba4c <flatcc_verify_table_field@@Base+0x328>
   1ba4c:	ldr	r0, [fp, #-8]
   1ba50:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ba54:	add	r1, r1, #2
   1ba58:	bl	1d350 <flatcc_verify_union_vector_field@@Base+0x6e8>
   1ba5c:	strh	r0, [sp, #72]	; 0x48
   1ba60:	ldr	r0, [fp, #-12]
   1ba64:	ldr	r1, [sp, #68]	; 0x44
   1ba68:	sub	r0, r0, r1
   1ba6c:	ldrh	r1, [sp, #72]	; 0x48
   1ba70:	cmp	r0, r1
   1ba74:	movw	r0, #0
   1ba78:	movcs	r0, #1
   1ba7c:	and	r0, r0, #1
   1ba80:	str	r0, [sp, #20]
   1ba84:	ldr	r0, [sp, #20]
   1ba88:	cmp	r0, #0
   1ba8c:	bne	1ba9c <flatcc_verify_table_field@@Base+0x378>
   1ba90:	movw	r0, #20
   1ba94:	str	r0, [fp, #-4]
   1ba98:	b	1badc <flatcc_verify_table_field@@Base+0x3b8>
   1ba9c:	b	1baa0 <flatcc_verify_table_field@@Base+0x37c>
   1baa0:	ldr	r0, [fp, #-8]
   1baa4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1baa8:	add	r0, r0, r1
   1baac:	str	r0, [sp, #64]	; 0x40
   1bab0:	ldr	r0, [fp, #-8]
   1bab4:	str	r0, [sp, #52]	; 0x34
   1bab8:	ldr	r0, [fp, #-12]
   1babc:	str	r0, [sp, #56]	; 0x38
   1bac0:	ldr	r0, [fp, #12]
   1bac4:	add	r1, sp, #52	; 0x34
   1bac8:	str	r0, [sp, #4]
   1bacc:	mov	r0, r1
   1bad0:	ldr	r1, [sp, #4]
   1bad4:	blx	r1
   1bad8:	str	r0, [fp, #-4]
   1badc:	ldr	r0, [fp, #-4]
   1bae0:	mov	sp, fp
   1bae4:	pop	{fp, pc}

0001bae8 <flatcc_verify_table_vector_field@@Base>:
   1bae8:	push	{r4, r5, fp, lr}
   1baec:	add	fp, sp, #8
   1baf0:	sub	sp, sp, #64	; 0x40
   1baf4:	str	r0, [fp, #-16]
   1baf8:	strh	r1, [fp, #-18]	; 0xffffffee
   1bafc:	str	r2, [fp, #-24]	; 0xffffffe8
   1bb00:	str	r3, [fp, #-28]	; 0xffffffe4
   1bb04:	ldr	r0, [fp, #-16]
   1bb08:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1bb0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bb10:	uxth	r1, r1
   1bb14:	sub	r3, fp, #32
   1bb18:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1bb1c:	str	r0, [sp, #36]	; 0x24
   1bb20:	ldr	r0, [sp, #36]	; 0x24
   1bb24:	cmp	r0, #0
   1bb28:	bne	1bb38 <flatcc_verify_table_vector_field@@Base+0x50>
   1bb2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bb30:	cmp	r0, #0
   1bb34:	bne	1bb44 <flatcc_verify_table_vector_field@@Base+0x5c>
   1bb38:	ldr	r0, [sp, #36]	; 0x24
   1bb3c:	str	r0, [fp, #-12]
   1bb40:	b	1bbcc <flatcc_verify_table_vector_field@@Base+0xe4>
   1bb44:	b	1bb48 <flatcc_verify_table_vector_field@@Base+0x60>
   1bb48:	ldr	r0, [fp, #-16]
   1bb4c:	ldr	r0, [r0]
   1bb50:	ldr	r1, [fp, #-16]
   1bb54:	ldr	r1, [r1, #4]
   1bb58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb5c:	ldr	r3, [fp, #-16]
   1bb60:	ldr	r3, [r3]
   1bb64:	ldr	ip, [fp, #-32]	; 0xffffffe0
   1bb68:	str	r0, [sp, #32]
   1bb6c:	mov	r0, r3
   1bb70:	str	r1, [sp, #28]
   1bb74:	mov	r1, ip
   1bb78:	str	r2, [sp, #24]
   1bb7c:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1bb80:	ldr	r1, [fp, #-16]
   1bb84:	ldr	r1, [r1, #8]
   1bb88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bb8c:	ldr	r3, [sp, #32]
   1bb90:	str	r0, [sp, #20]
   1bb94:	mov	r0, r3
   1bb98:	ldr	ip, [sp, #28]
   1bb9c:	str	r1, [sp, #16]
   1bba0:	mov	r1, ip
   1bba4:	ldr	lr, [sp, #24]
   1bba8:	str	r2, [sp, #12]
   1bbac:	mov	r2, lr
   1bbb0:	ldr	r3, [sp, #20]
   1bbb4:	ldr	r4, [sp, #16]
   1bbb8:	str	r4, [sp]
   1bbbc:	ldr	r5, [sp, #12]
   1bbc0:	str	r5, [sp, #4]
   1bbc4:	bl	1bbd8 <flatcc_verify_table_vector_field@@Base+0xf0>
   1bbc8:	str	r0, [fp, #-12]
   1bbcc:	ldr	r0, [fp, #-12]
   1bbd0:	sub	sp, fp, #8
   1bbd4:	pop	{r4, r5, fp, pc}
   1bbd8:	push	{r4, r5, fp, lr}
   1bbdc:	add	fp, sp, #8
   1bbe0:	sub	sp, sp, #104	; 0x68
   1bbe4:	ldr	ip, [fp, #12]
   1bbe8:	ldr	lr, [fp, #8]
   1bbec:	str	r0, [fp, #-16]
   1bbf0:	str	r1, [fp, #-20]	; 0xffffffec
   1bbf4:	str	r2, [fp, #-24]	; 0xffffffe8
   1bbf8:	str	r3, [fp, #-28]	; 0xffffffe4
   1bbfc:	ldr	r0, [fp, #8]
   1bc00:	mvn	r1, #0
   1bc04:	add	r1, r0, r1
   1bc08:	str	r1, [fp, #8]
   1bc0c:	cmp	r0, #0
   1bc10:	movw	r0, #0
   1bc14:	movgt	r0, #1
   1bc18:	and	r0, r0, #1
   1bc1c:	str	r0, [fp, #-40]	; 0xffffffd8
   1bc20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bc24:	cmp	r0, #0
   1bc28:	bne	1bc38 <flatcc_verify_table_vector_field@@Base+0x150>
   1bc2c:	movw	r0, #3
   1bc30:	str	r0, [fp, #-12]
   1bc34:	b	1be38 <flatcc_verify_table_vector_field@@Base+0x350>
   1bc38:	b	1bc3c <flatcc_verify_table_vector_field@@Base+0x154>
   1bc3c:	ldr	r0, [pc, #512]	; 1be44 <flatcc_verify_table_vector_field@@Base+0x35c>
   1bc40:	ldr	r1, [fp, #-16]
   1bc44:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bc4c:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1bc50:	str	r0, [fp, #-44]	; 0xffffffd4
   1bc54:	mov	r0, r1
   1bc58:	mov	r1, r2
   1bc5c:	mov	r2, r3
   1bc60:	mov	r3, ip
   1bc64:	movw	ip, #4
   1bc68:	str	ip, [sp]
   1bc6c:	movw	ip, #4
   1bc70:	uxth	ip, ip
   1bc74:	str	ip, [sp, #4]
   1bc78:	ldr	ip, [fp, #-44]	; 0xffffffd4
   1bc7c:	str	ip, [sp, #8]
   1bc80:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1bc84:	cmp	r0, #0
   1bc88:	beq	1bcdc <flatcc_verify_table_vector_field@@Base+0x1f4>
   1bc8c:	ldr	r0, [pc, #432]	; 1be44 <flatcc_verify_table_vector_field@@Base+0x35c>
   1bc90:	ldr	r1, [fp, #-16]
   1bc94:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bc9c:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1bca0:	str	r0, [fp, #-48]	; 0xffffffd0
   1bca4:	mov	r0, r1
   1bca8:	mov	r1, r2
   1bcac:	mov	r2, r3
   1bcb0:	mov	r3, ip
   1bcb4:	movw	ip, #4
   1bcb8:	str	ip, [sp]
   1bcbc:	movw	ip, #4
   1bcc0:	uxth	ip, ip
   1bcc4:	str	ip, [sp, #4]
   1bcc8:	ldr	ip, [fp, #-48]	; 0xffffffd0
   1bccc:	str	ip, [sp, #8]
   1bcd0:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1bcd4:	str	r0, [fp, #-12]
   1bcd8:	b	1be38 <flatcc_verify_table_vector_field@@Base+0x350>
   1bcdc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1bce0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bce4:	add	r0, r1, r0
   1bce8:	str	r0, [fp, #-24]	; 0xffffffe8
   1bcec:	ldr	r0, [fp, #-16]
   1bcf0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bcf4:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1bcf8:	str	r0, [fp, #-36]	; 0xffffffdc
   1bcfc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bd00:	add	r0, r0, #4
   1bd04:	str	r0, [fp, #-24]	; 0xffffffe8
   1bd08:	movw	r0, #0
   1bd0c:	str	r0, [fp, #-32]	; 0xffffffe0
   1bd10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bd14:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bd18:	cmp	r0, r1
   1bd1c:	bcs	1be30 <flatcc_verify_table_vector_field@@Base+0x348>
   1bd20:	ldr	r0, [fp, #-16]
   1bd24:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bd28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bd2c:	ldr	r3, [fp, #-16]
   1bd30:	ldr	ip, [fp, #-24]	; 0xffffffe8
   1bd34:	str	r0, [fp, #-52]	; 0xffffffcc
   1bd38:	mov	r0, r3
   1bd3c:	str	r1, [sp, #56]	; 0x38
   1bd40:	mov	r1, ip
   1bd44:	str	r2, [sp, #52]	; 0x34
   1bd48:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1bd4c:	ldr	r1, [fp, #8]
   1bd50:	ldr	r2, [fp, #12]
   1bd54:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1bd58:	str	r0, [sp, #48]	; 0x30
   1bd5c:	mov	r0, r3
   1bd60:	ldr	ip, [sp, #56]	; 0x38
   1bd64:	str	r1, [sp, #44]	; 0x2c
   1bd68:	mov	r1, ip
   1bd6c:	ldr	lr, [sp, #52]	; 0x34
   1bd70:	str	r2, [sp, #40]	; 0x28
   1bd74:	mov	r2, lr
   1bd78:	ldr	r3, [sp, #48]	; 0x30
   1bd7c:	ldr	r4, [sp, #44]	; 0x2c
   1bd80:	str	r4, [sp]
   1bd84:	ldr	r5, [sp, #40]	; 0x28
   1bd88:	str	r5, [sp, #4]
   1bd8c:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1bd90:	cmp	r0, #0
   1bd94:	beq	1be10 <flatcc_verify_table_vector_field@@Base+0x328>
   1bd98:	ldr	r0, [fp, #-16]
   1bd9c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bda0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bda4:	ldr	r3, [fp, #-16]
   1bda8:	ldr	ip, [fp, #-24]	; 0xffffffe8
   1bdac:	str	r0, [sp, #36]	; 0x24
   1bdb0:	mov	r0, r3
   1bdb4:	str	r1, [sp, #32]
   1bdb8:	mov	r1, ip
   1bdbc:	str	r2, [sp, #28]
   1bdc0:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1bdc4:	ldr	r1, [fp, #8]
   1bdc8:	ldr	r2, [fp, #12]
   1bdcc:	ldr	r3, [sp, #36]	; 0x24
   1bdd0:	str	r0, [sp, #24]
   1bdd4:	mov	r0, r3
   1bdd8:	ldr	ip, [sp, #32]
   1bddc:	str	r1, [sp, #20]
   1bde0:	mov	r1, ip
   1bde4:	ldr	lr, [sp, #28]
   1bde8:	str	r2, [sp, #16]
   1bdec:	mov	r2, lr
   1bdf0:	ldr	r3, [sp, #24]
   1bdf4:	ldr	r4, [sp, #20]
   1bdf8:	str	r4, [sp]
   1bdfc:	ldr	r5, [sp, #16]
   1be00:	str	r5, [sp, #4]
   1be04:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1be08:	str	r0, [fp, #-12]
   1be0c:	b	1be38 <flatcc_verify_table_vector_field@@Base+0x350>
   1be10:	b	1be14 <flatcc_verify_table_vector_field@@Base+0x32c>
   1be14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1be18:	add	r0, r0, #1
   1be1c:	str	r0, [fp, #-32]	; 0xffffffe0
   1be20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1be24:	add	r0, r0, #4
   1be28:	str	r0, [fp, #-24]	; 0xffffffe8
   1be2c:	b	1bd10 <flatcc_verify_table_vector_field@@Base+0x228>
   1be30:	movw	r0, #0
   1be34:	str	r0, [fp, #-12]
   1be38:	ldr	r0, [fp, #-12]
   1be3c:	sub	sp, fp, #8
   1be40:	pop	{r4, r5, fp, pc}
   1be44:	svccc	0x00ffffff

0001be48 <flatcc_verify_union_table@@Base>:
   1be48:	push	{fp, lr}
   1be4c:	mov	fp, sp
   1be50:	sub	sp, sp, #16
   1be54:	str	r0, [fp, #-4]
   1be58:	str	r1, [sp, #8]
   1be5c:	ldr	r0, [fp, #-4]
   1be60:	ldr	r0, [r0]
   1be64:	ldr	r1, [fp, #-4]
   1be68:	ldr	r1, [r1, #4]
   1be6c:	ldr	r2, [fp, #-4]
   1be70:	ldr	r2, [r2, #16]
   1be74:	ldr	r3, [fp, #-4]
   1be78:	ldr	r3, [r3, #20]
   1be7c:	ldr	ip, [fp, #-4]
   1be80:	ldr	ip, [ip, #8]
   1be84:	ldr	lr, [sp, #8]
   1be88:	str	ip, [sp]
   1be8c:	str	lr, [sp, #4]
   1be90:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1be94:	mov	sp, fp
   1be98:	pop	{fp, pc}

0001be9c <flatcc_verify_union_struct@@Base>:
   1be9c:	push	{fp, lr}
   1bea0:	mov	fp, sp
   1bea4:	sub	sp, sp, #16
   1bea8:	str	r0, [fp, #-4]
   1beac:	str	r1, [sp, #8]
   1beb0:	strh	r2, [sp, #6]
   1beb4:	ldr	r0, [fp, #-4]
   1beb8:	ldr	r0, [r0, #4]
   1bebc:	ldr	r1, [fp, #-4]
   1bec0:	ldr	r1, [r1, #16]
   1bec4:	ldr	r2, [fp, #-4]
   1bec8:	ldr	r2, [r2, #20]
   1becc:	ldr	r3, [sp, #8]
   1bed0:	ldrh	ip, [sp, #6]
   1bed4:	str	ip, [sp]
   1bed8:	bl	1bee4 <flatcc_verify_union_struct@@Base+0x48>
   1bedc:	mov	sp, fp
   1bee0:	pop	{fp, pc}
   1bee4:	sub	sp, sp, #36	; 0x24
   1bee8:	ldr	ip, [sp, #36]	; 0x24
   1beec:	str	r0, [sp, #28]
   1bef0:	str	r1, [sp, #24]
   1bef4:	str	r2, [sp, #20]
   1bef8:	str	r3, [sp, #16]
   1befc:	strh	ip, [sp, #14]
   1bf00:	ldr	r0, [sp, #20]
   1bf04:	cmp	r0, #0
   1bf08:	beq	1bf24 <flatcc_verify_union_struct@@Base+0x88>
   1bf0c:	ldr	r0, [sp, #24]
   1bf10:	ldr	r1, [sp, #20]
   1bf14:	add	r0, r0, r1
   1bf18:	ldr	r1, [sp, #28]
   1bf1c:	cmp	r0, r1
   1bf20:	bls	1bf30 <flatcc_verify_union_struct@@Base+0x94>
   1bf24:	movw	r0, #18
   1bf28:	str	r0, [sp, #32]
   1bf2c:	b	1c018 <flatcc_verify_union_struct@@Base+0x17c>
   1bf30:	ldr	r0, [sp, #20]
   1bf34:	ldr	r1, [sp, #24]
   1bf38:	add	r0, r1, r0
   1bf3c:	str	r0, [sp, #24]
   1bf40:	ldr	r0, [sp, #24]
   1bf44:	ldr	r1, [sp, #16]
   1bf48:	add	r0, r0, r1
   1bf4c:	ldr	r1, [sp, #24]
   1bf50:	cmp	r0, r1
   1bf54:	movw	r0, #0
   1bf58:	movcs	r0, #1
   1bf5c:	and	r0, r0, #1
   1bf60:	str	r0, [sp, #8]
   1bf64:	ldr	r0, [sp, #8]
   1bf68:	cmp	r0, #0
   1bf6c:	bne	1bf7c <flatcc_verify_union_struct@@Base+0xe0>
   1bf70:	movw	r0, #10
   1bf74:	str	r0, [sp, #32]
   1bf78:	b	1c018 <flatcc_verify_union_struct@@Base+0x17c>
   1bf7c:	b	1bf80 <flatcc_verify_union_struct@@Base+0xe4>
   1bf80:	b	1bf84 <flatcc_verify_union_struct@@Base+0xe8>
   1bf84:	ldr	r0, [sp, #24]
   1bf88:	ldr	r1, [sp, #16]
   1bf8c:	add	r0, r0, r1
   1bf90:	ldr	r1, [sp, #28]
   1bf94:	cmp	r0, r1
   1bf98:	movw	r0, #0
   1bf9c:	movls	r0, #1
   1bfa0:	and	r0, r0, #1
   1bfa4:	str	r0, [sp, #4]
   1bfa8:	ldr	r0, [sp, #4]
   1bfac:	cmp	r0, #0
   1bfb0:	bne	1bfc0 <flatcc_verify_union_struct@@Base+0x124>
   1bfb4:	movw	r0, #9
   1bfb8:	str	r0, [sp, #32]
   1bfbc:	b	1c018 <flatcc_verify_union_struct@@Base+0x17c>
   1bfc0:	b	1bfc4 <flatcc_verify_union_struct@@Base+0x128>
   1bfc4:	b	1bfc8 <flatcc_verify_union_struct@@Base+0x12c>
   1bfc8:	ldr	r0, [sp, #24]
   1bfcc:	ldrh	r1, [sp, #14]
   1bfd0:	sub	r1, r1, #1
   1bfd4:	and	r0, r0, r1
   1bfd8:	cmp	r0, #0
   1bfdc:	movw	r0, #0
   1bfe0:	movne	r0, #1
   1bfe4:	mvn	r1, #0
   1bfe8:	eor	r0, r0, r1
   1bfec:	and	r0, r0, #1
   1bff0:	str	r0, [sp]
   1bff4:	ldr	r0, [sp]
   1bff8:	cmp	r0, #0
   1bffc:	bne	1c00c <flatcc_verify_union_struct@@Base+0x170>
   1c000:	movw	r0, #11
   1c004:	str	r0, [sp, #32]
   1c008:	b	1c018 <flatcc_verify_union_struct@@Base+0x17c>
   1c00c:	b	1c010 <flatcc_verify_union_struct@@Base+0x174>
   1c010:	movw	r0, #0
   1c014:	str	r0, [sp, #32]
   1c018:	ldr	r0, [sp, #32]
   1c01c:	add	sp, sp, #36	; 0x24
   1c020:	bx	lr

0001c024 <flatcc_verify_union_string@@Base>:
   1c024:	push	{fp, lr}
   1c028:	mov	fp, sp
   1c02c:	sub	sp, sp, #8
   1c030:	str	r0, [sp, #4]
   1c034:	ldr	r0, [sp, #4]
   1c038:	ldr	r0, [r0]
   1c03c:	ldr	r1, [sp, #4]
   1c040:	ldr	r1, [r1, #4]
   1c044:	ldr	r2, [sp, #4]
   1c048:	ldr	r2, [r2, #16]
   1c04c:	ldr	r3, [sp, #4]
   1c050:	ldr	r3, [r3, #20]
   1c054:	bl	1b128 <flatcc_verify_string_field@@Base+0x214>
   1c058:	mov	sp, fp
   1c05c:	pop	{fp, pc}

0001c060 <flatcc_verify_buffer_header@@Base>:
   1c060:	push	{fp, lr}
   1c064:	mov	fp, sp
   1c068:	sub	sp, sp, #48	; 0x30
   1c06c:	str	r0, [fp, #-8]
   1c070:	str	r1, [fp, #-12]
   1c074:	str	r2, [fp, #-16]
   1c078:	ldr	r0, [fp, #-8]
   1c07c:	and	r0, r0, #3
   1c080:	cmp	r0, #0
   1c084:	movw	r0, #0
   1c088:	movne	r0, #1
   1c08c:	mvn	r1, #0
   1c090:	eor	r0, r0, r1
   1c094:	and	r0, r0, #1
   1c098:	str	r0, [sp, #20]
   1c09c:	ldr	r0, [sp, #20]
   1c0a0:	cmp	r0, #0
   1c0a4:	bne	1c0b4 <flatcc_verify_buffer_header@@Base+0x54>
   1c0a8:	movw	r0, #5
   1c0ac:	str	r0, [fp, #-4]
   1c0b0:	b	1c1b4 <flatcc_verify_buffer_header@@Base+0x154>
   1c0b4:	b	1c0b8 <flatcc_verify_buffer_header@@Base+0x58>
   1c0b8:	b	1c0bc <flatcc_verify_buffer_header@@Base+0x5c>
   1c0bc:	ldr	r0, [fp, #-12]
   1c0c0:	cmn	r0, #9
   1c0c4:	movw	r0, #0
   1c0c8:	movls	r0, #1
   1c0cc:	and	r0, r0, #1
   1c0d0:	str	r0, [sp, #16]
   1c0d4:	ldr	r0, [sp, #16]
   1c0d8:	cmp	r0, #0
   1c0dc:	bne	1c0ec <flatcc_verify_buffer_header@@Base+0x8c>
   1c0e0:	movw	r0, #6
   1c0e4:	str	r0, [fp, #-4]
   1c0e8:	b	1c1b4 <flatcc_verify_buffer_header@@Base+0x154>
   1c0ec:	b	1c0f0 <flatcc_verify_buffer_header@@Base+0x90>
   1c0f0:	b	1c0f4 <flatcc_verify_buffer_header@@Base+0x94>
   1c0f4:	ldr	r0, [fp, #-12]
   1c0f8:	cmp	r0, #8
   1c0fc:	movw	r0, #0
   1c100:	movcs	r0, #1
   1c104:	and	r0, r0, #1
   1c108:	str	r0, [sp, #12]
   1c10c:	ldr	r0, [sp, #12]
   1c110:	cmp	r0, #0
   1c114:	bne	1c124 <flatcc_verify_buffer_header@@Base+0xc4>
   1c118:	movw	r0, #1
   1c11c:	str	r0, [fp, #-4]
   1c120:	b	1c1b4 <flatcc_verify_buffer_header@@Base+0x154>
   1c124:	b	1c128 <flatcc_verify_buffer_header@@Base+0xc8>
   1c128:	ldr	r0, [fp, #-16]
   1c12c:	movw	r1, #0
   1c130:	cmp	r0, r1
   1c134:	beq	1c1ac <flatcc_verify_buffer_header@@Base+0x14c>
   1c138:	ldr	r0, [fp, #-16]
   1c13c:	bl	1c1c0 <flatcc_verify_buffer_header@@Base+0x160>
   1c140:	str	r0, [sp, #24]
   1c144:	ldr	r0, [fp, #-8]
   1c148:	movw	r1, #4
   1c14c:	bl	1c200 <flatcc_verify_buffer_header@@Base+0x1a0>
   1c150:	str	r0, [fp, #-20]	; 0xffffffec
   1c154:	ldr	r0, [sp, #24]
   1c158:	cmp	r0, #0
   1c15c:	movw	r0, #1
   1c160:	str	r0, [sp, #4]
   1c164:	beq	1c180 <flatcc_verify_buffer_header@@Base+0x120>
   1c168:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c16c:	ldr	r1, [sp, #24]
   1c170:	cmp	r0, r1
   1c174:	movw	r0, #0
   1c178:	moveq	r0, #1
   1c17c:	str	r0, [sp, #4]
   1c180:	ldr	r0, [sp, #4]
   1c184:	and	r0, r0, #1
   1c188:	str	r0, [sp, #8]
   1c18c:	ldr	r0, [sp, #8]
   1c190:	cmp	r0, #0
   1c194:	bne	1c1a4 <flatcc_verify_buffer_header@@Base+0x144>
   1c198:	movw	r0, #2
   1c19c:	str	r0, [fp, #-4]
   1c1a0:	b	1c1b4 <flatcc_verify_buffer_header@@Base+0x154>
   1c1a4:	b	1c1a8 <flatcc_verify_buffer_header@@Base+0x148>
   1c1a8:	b	1c1ac <flatcc_verify_buffer_header@@Base+0x14c>
   1c1ac:	movw	r0, #0
   1c1b0:	str	r0, [fp, #-4]
   1c1b4:	ldr	r0, [fp, #-4]
   1c1b8:	mov	sp, fp
   1c1bc:	pop	{fp, pc}
   1c1c0:	push	{fp, lr}
   1c1c4:	mov	fp, sp
   1c1c8:	sub	sp, sp, #16
   1c1cc:	str	r0, [fp, #-4]
   1c1d0:	movw	r0, #0
   1c1d4:	str	r0, [sp, #8]
   1c1d8:	add	r0, sp, #8
   1c1dc:	ldr	r1, [fp, #-4]
   1c1e0:	movw	r2, #4
   1c1e4:	bl	12784 <strncpy@plt>
   1c1e8:	ldr	r1, [sp, #8]
   1c1ec:	str	r0, [sp, #4]
   1c1f0:	mov	r0, r1
   1c1f4:	bl	1d3bc <flatcc_verify_union_vector_field@@Base+0x754>
   1c1f8:	mov	sp, fp
   1c1fc:	pop	{fp, pc}
   1c200:	push	{fp, lr}
   1c204:	mov	fp, sp
   1c208:	sub	sp, sp, #8
   1c20c:	str	r0, [sp, #4]
   1c210:	str	r1, [sp]
   1c214:	ldr	r0, [sp, #4]
   1c218:	ldr	r1, [sp]
   1c21c:	add	r0, r0, r1
   1c220:	bl	1d3d0 <flatcc_verify_union_vector_field@@Base+0x768>
   1c224:	mov	sp, fp
   1c228:	pop	{fp, pc}

0001c22c <flatcc_verify_typed_buffer_header@@Base>:
   1c22c:	push	{fp, lr}
   1c230:	mov	fp, sp
   1c234:	sub	sp, sp, #48	; 0x30
   1c238:	str	r0, [fp, #-8]
   1c23c:	str	r1, [fp, #-12]
   1c240:	str	r2, [fp, #-16]
   1c244:	ldr	r0, [fp, #-8]
   1c248:	and	r0, r0, #3
   1c24c:	cmp	r0, #0
   1c250:	movw	r0, #0
   1c254:	movne	r0, #1
   1c258:	mvn	r1, #0
   1c25c:	eor	r0, r0, r1
   1c260:	and	r0, r0, #1
   1c264:	str	r0, [sp, #20]
   1c268:	ldr	r0, [sp, #20]
   1c26c:	cmp	r0, #0
   1c270:	bne	1c280 <flatcc_verify_typed_buffer_header@@Base+0x54>
   1c274:	movw	r0, #5
   1c278:	str	r0, [fp, #-4]
   1c27c:	b	1c378 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c280:	b	1c284 <flatcc_verify_typed_buffer_header@@Base+0x58>
   1c284:	b	1c288 <flatcc_verify_typed_buffer_header@@Base+0x5c>
   1c288:	ldr	r0, [fp, #-12]
   1c28c:	cmn	r0, #9
   1c290:	movw	r0, #0
   1c294:	movls	r0, #1
   1c298:	and	r0, r0, #1
   1c29c:	str	r0, [sp, #16]
   1c2a0:	ldr	r0, [sp, #16]
   1c2a4:	cmp	r0, #0
   1c2a8:	bne	1c2b8 <flatcc_verify_typed_buffer_header@@Base+0x8c>
   1c2ac:	movw	r0, #6
   1c2b0:	str	r0, [fp, #-4]
   1c2b4:	b	1c378 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c2b8:	b	1c2bc <flatcc_verify_typed_buffer_header@@Base+0x90>
   1c2bc:	b	1c2c0 <flatcc_verify_typed_buffer_header@@Base+0x94>
   1c2c0:	ldr	r0, [fp, #-12]
   1c2c4:	cmp	r0, #8
   1c2c8:	movw	r0, #0
   1c2cc:	movcs	r0, #1
   1c2d0:	and	r0, r0, #1
   1c2d4:	str	r0, [sp, #12]
   1c2d8:	ldr	r0, [sp, #12]
   1c2dc:	cmp	r0, #0
   1c2e0:	bne	1c2f0 <flatcc_verify_typed_buffer_header@@Base+0xc4>
   1c2e4:	movw	r0, #1
   1c2e8:	str	r0, [fp, #-4]
   1c2ec:	b	1c378 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c2f0:	b	1c2f4 <flatcc_verify_typed_buffer_header@@Base+0xc8>
   1c2f4:	ldr	r0, [fp, #-16]
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c370 <flatcc_verify_typed_buffer_header@@Base+0x144>
   1c300:	ldr	r0, [fp, #-16]
   1c304:	str	r0, [sp, #24]
   1c308:	ldr	r0, [fp, #-8]
   1c30c:	movw	r1, #4
   1c310:	bl	1c200 <flatcc_verify_buffer_header@@Base+0x1a0>
   1c314:	str	r0, [fp, #-20]	; 0xffffffec
   1c318:	ldr	r0, [sp, #24]
   1c31c:	cmp	r0, #0
   1c320:	movw	r0, #1
   1c324:	str	r0, [sp, #4]
   1c328:	beq	1c344 <flatcc_verify_typed_buffer_header@@Base+0x118>
   1c32c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c330:	ldr	r1, [sp, #24]
   1c334:	cmp	r0, r1
   1c338:	movw	r0, #0
   1c33c:	moveq	r0, #1
   1c340:	str	r0, [sp, #4]
   1c344:	ldr	r0, [sp, #4]
   1c348:	and	r0, r0, #1
   1c34c:	str	r0, [sp, #8]
   1c350:	ldr	r0, [sp, #8]
   1c354:	cmp	r0, #0
   1c358:	bne	1c368 <flatcc_verify_typed_buffer_header@@Base+0x13c>
   1c35c:	movw	r0, #2
   1c360:	str	r0, [fp, #-4]
   1c364:	b	1c378 <flatcc_verify_typed_buffer_header@@Base+0x14c>
   1c368:	b	1c36c <flatcc_verify_typed_buffer_header@@Base+0x140>
   1c36c:	b	1c370 <flatcc_verify_typed_buffer_header@@Base+0x144>
   1c370:	movw	r0, #0
   1c374:	str	r0, [fp, #-4]
   1c378:	ldr	r0, [fp, #-4]
   1c37c:	mov	sp, fp
   1c380:	pop	{fp, pc}

0001c384 <flatcc_verify_struct_as_root@@Base>:
   1c384:	push	{fp, lr}
   1c388:	mov	fp, sp
   1c38c:	sub	sp, sp, #40	; 0x28
   1c390:	ldr	ip, [fp, #8]
   1c394:	str	r0, [fp, #-8]
   1c398:	str	r1, [fp, #-12]
   1c39c:	str	r2, [fp, #-16]
   1c3a0:	str	r3, [sp, #20]
   1c3a4:	strh	ip, [sp, #18]
   1c3a8:	ldr	r0, [fp, #-8]
   1c3ac:	ldr	r1, [fp, #-12]
   1c3b0:	ldr	r2, [fp, #-16]
   1c3b4:	bl	1c060 <flatcc_verify_buffer_header@@Base>
   1c3b8:	cmp	r0, #0
   1c3bc:	beq	1c3d8 <flatcc_verify_struct_as_root@@Base+0x54>
   1c3c0:	ldr	r0, [fp, #-8]
   1c3c4:	ldr	r1, [fp, #-12]
   1c3c8:	ldr	r2, [fp, #-16]
   1c3cc:	bl	1c060 <flatcc_verify_buffer_header@@Base>
   1c3d0:	str	r0, [fp, #-4]
   1c3d4:	b	1c418 <flatcc_verify_struct_as_root@@Base+0x94>
   1c3d8:	ldr	r0, [fp, #-12]
   1c3dc:	ldr	r1, [fp, #-8]
   1c3e0:	str	r0, [sp, #12]
   1c3e4:	mov	r0, r1
   1c3e8:	movw	r1, #0
   1c3ec:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c3f0:	ldr	r3, [sp, #20]
   1c3f4:	ldr	r1, [sp, #12]
   1c3f8:	str	r0, [sp, #8]
   1c3fc:	mov	r0, r1
   1c400:	movw	r1, #0
   1c404:	ldr	r2, [sp, #8]
   1c408:	ldrh	ip, [sp, #18]
   1c40c:	str	ip, [sp]
   1c410:	bl	1bee4 <flatcc_verify_union_struct@@Base+0x48>
   1c414:	str	r0, [fp, #-4]
   1c418:	ldr	r0, [fp, #-4]
   1c41c:	mov	sp, fp
   1c420:	pop	{fp, pc}

0001c424 <flatcc_verify_struct_as_typed_root@@Base>:
   1c424:	push	{fp, lr}
   1c428:	mov	fp, sp
   1c42c:	sub	sp, sp, #40	; 0x28
   1c430:	ldr	ip, [fp, #8]
   1c434:	str	r0, [fp, #-8]
   1c438:	str	r1, [fp, #-12]
   1c43c:	str	r2, [fp, #-16]
   1c440:	str	r3, [sp, #20]
   1c444:	strh	ip, [sp, #18]
   1c448:	ldr	r0, [fp, #-8]
   1c44c:	ldr	r1, [fp, #-12]
   1c450:	ldr	r2, [fp, #-16]
   1c454:	bl	1c22c <flatcc_verify_typed_buffer_header@@Base>
   1c458:	cmp	r0, #0
   1c45c:	beq	1c478 <flatcc_verify_struct_as_typed_root@@Base+0x54>
   1c460:	ldr	r0, [fp, #-8]
   1c464:	ldr	r1, [fp, #-12]
   1c468:	ldr	r2, [fp, #-16]
   1c46c:	bl	1c22c <flatcc_verify_typed_buffer_header@@Base>
   1c470:	str	r0, [fp, #-4]
   1c474:	b	1c4b8 <flatcc_verify_struct_as_typed_root@@Base+0x94>
   1c478:	ldr	r0, [fp, #-12]
   1c47c:	ldr	r1, [fp, #-8]
   1c480:	str	r0, [sp, #12]
   1c484:	mov	r0, r1
   1c488:	movw	r1, #0
   1c48c:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c490:	ldr	r3, [sp, #20]
   1c494:	ldr	r1, [sp, #12]
   1c498:	str	r0, [sp, #8]
   1c49c:	mov	r0, r1
   1c4a0:	movw	r1, #0
   1c4a4:	ldr	r2, [sp, #8]
   1c4a8:	ldrh	ip, [sp, #18]
   1c4ac:	str	ip, [sp]
   1c4b0:	bl	1bee4 <flatcc_verify_union_struct@@Base+0x48>
   1c4b4:	str	r0, [fp, #-4]
   1c4b8:	ldr	r0, [fp, #-4]
   1c4bc:	mov	sp, fp
   1c4c0:	pop	{fp, pc}

0001c4c4 <flatcc_verify_table_as_root@@Base>:
   1c4c4:	push	{fp, lr}
   1c4c8:	mov	fp, sp
   1c4cc:	sub	sp, sp, #48	; 0x30
   1c4d0:	str	r0, [fp, #-8]
   1c4d4:	str	r1, [fp, #-12]
   1c4d8:	str	r2, [fp, #-16]
   1c4dc:	str	r3, [fp, #-20]	; 0xffffffec
   1c4e0:	ldr	r0, [fp, #-8]
   1c4e4:	ldr	r1, [fp, #-12]
   1c4e8:	ldr	r2, [fp, #-16]
   1c4ec:	bl	1c060 <flatcc_verify_buffer_header@@Base>
   1c4f0:	cmp	r0, #0
   1c4f4:	beq	1c510 <flatcc_verify_table_as_root@@Base+0x4c>
   1c4f8:	ldr	r0, [fp, #-8]
   1c4fc:	ldr	r1, [fp, #-12]
   1c500:	ldr	r2, [fp, #-16]
   1c504:	bl	1c060 <flatcc_verify_buffer_header@@Base>
   1c508:	str	r0, [fp, #-4]
   1c50c:	b	1c570 <flatcc_verify_table_as_root@@Base+0xac>
   1c510:	ldr	r0, [fp, #-8]
   1c514:	ldr	r1, [fp, #-12]
   1c518:	ldr	r2, [fp, #-8]
   1c51c:	str	r0, [sp, #24]
   1c520:	mov	r0, r2
   1c524:	movw	r2, #0
   1c528:	str	r1, [sp, #20]
   1c52c:	mov	r1, r2
   1c530:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c534:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c538:	ldr	r2, [sp, #24]
   1c53c:	str	r0, [sp, #16]
   1c540:	mov	r0, r2
   1c544:	ldr	r3, [sp, #20]
   1c548:	str	r1, [sp, #12]
   1c54c:	mov	r1, r3
   1c550:	movw	r2, #0
   1c554:	ldr	r3, [sp, #16]
   1c558:	movw	ip, #100	; 0x64
   1c55c:	str	ip, [sp]
   1c560:	ldr	ip, [sp, #12]
   1c564:	str	ip, [sp, #4]
   1c568:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1c56c:	str	r0, [fp, #-4]
   1c570:	ldr	r0, [fp, #-4]
   1c574:	mov	sp, fp
   1c578:	pop	{fp, pc}

0001c57c <flatcc_verify_table_as_typed_root@@Base>:
   1c57c:	push	{fp, lr}
   1c580:	mov	fp, sp
   1c584:	sub	sp, sp, #48	; 0x30
   1c588:	str	r0, [fp, #-8]
   1c58c:	str	r1, [fp, #-12]
   1c590:	str	r2, [fp, #-16]
   1c594:	str	r3, [fp, #-20]	; 0xffffffec
   1c598:	ldr	r0, [fp, #-8]
   1c59c:	ldr	r1, [fp, #-12]
   1c5a0:	ldr	r2, [fp, #-16]
   1c5a4:	bl	1c22c <flatcc_verify_typed_buffer_header@@Base>
   1c5a8:	cmp	r0, #0
   1c5ac:	beq	1c5c8 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   1c5b0:	ldr	r0, [fp, #-8]
   1c5b4:	ldr	r1, [fp, #-12]
   1c5b8:	ldr	r2, [fp, #-16]
   1c5bc:	bl	1c22c <flatcc_verify_typed_buffer_header@@Base>
   1c5c0:	str	r0, [fp, #-4]
   1c5c4:	b	1c628 <flatcc_verify_table_as_typed_root@@Base+0xac>
   1c5c8:	ldr	r0, [fp, #-8]
   1c5cc:	ldr	r1, [fp, #-12]
   1c5d0:	ldr	r2, [fp, #-8]
   1c5d4:	str	r0, [sp, #24]
   1c5d8:	mov	r0, r2
   1c5dc:	movw	r2, #0
   1c5e0:	str	r1, [sp, #20]
   1c5e4:	mov	r1, r2
   1c5e8:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c5ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c5f0:	ldr	r2, [sp, #24]
   1c5f4:	str	r0, [sp, #16]
   1c5f8:	mov	r0, r2
   1c5fc:	ldr	r3, [sp, #20]
   1c600:	str	r1, [sp, #12]
   1c604:	mov	r1, r3
   1c608:	movw	r2, #0
   1c60c:	ldr	r3, [sp, #16]
   1c610:	movw	ip, #100	; 0x64
   1c614:	str	ip, [sp]
   1c618:	ldr	ip, [sp, #12]
   1c61c:	str	ip, [sp, #4]
   1c620:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1c624:	str	r0, [fp, #-4]
   1c628:	ldr	r0, [fp, #-4]
   1c62c:	mov	sp, fp
   1c630:	pop	{fp, pc}

0001c634 <flatcc_verify_struct_as_nested_root@@Base>:
   1c634:	push	{fp, lr}
   1c638:	mov	fp, sp
   1c63c:	sub	sp, sp, #48	; 0x30
   1c640:	ldr	ip, [fp, #12]
   1c644:	ldr	lr, [fp, #8]
   1c648:	str	r0, [fp, #-8]
   1c64c:	strh	r1, [fp, #-10]
   1c650:	str	r2, [fp, #-16]
   1c654:	str	r3, [fp, #-20]	; 0xffffffec
   1c658:	strh	ip, [fp, #-22]	; 0xffffffea
   1c65c:	ldr	r0, [fp, #-8]
   1c660:	ldrh	r1, [fp, #-10]
   1c664:	ldr	r2, [fp, #-16]
   1c668:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1c66c:	uxth	r1, r1
   1c670:	movw	ip, #1
   1c674:	uxth	ip, ip
   1c678:	str	ip, [sp]
   1c67c:	mvn	ip, #0
   1c680:	str	ip, [sp, #4]
   1c684:	str	lr, [sp, #12]
   1c688:	bl	1b270 <flatcc_verify_vector_field@@Base>
   1c68c:	cmp	r0, #0
   1c690:	beq	1c6c8 <flatcc_verify_struct_as_nested_root@@Base+0x94>
   1c694:	ldr	r0, [fp, #-8]
   1c698:	ldrh	r1, [fp, #-10]
   1c69c:	ldr	r2, [fp, #-16]
   1c6a0:	ldrh	r3, [fp, #-22]	; 0xffffffea
   1c6a4:	uxth	r1, r1
   1c6a8:	movw	ip, #1
   1c6ac:	uxth	ip, ip
   1c6b0:	str	ip, [sp]
   1c6b4:	mvn	ip, #0
   1c6b8:	str	ip, [sp, #4]
   1c6bc:	bl	1b270 <flatcc_verify_vector_field@@Base>
   1c6c0:	str	r0, [fp, #-4]
   1c6c4:	b	1c750 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   1c6c8:	ldr	r0, [fp, #-8]
   1c6cc:	ldrh	r1, [fp, #-10]
   1c6d0:	bl	1c75c <flatcc_verify_struct_as_nested_root@@Base+0x128>
   1c6d4:	str	r0, [sp, #20]
   1c6d8:	movw	r1, #0
   1c6dc:	cmp	r1, r0
   1c6e0:	bne	1c6f0 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   1c6e4:	movw	r0, #0
   1c6e8:	str	r0, [fp, #-4]
   1c6ec:	b	1c750 <flatcc_verify_struct_as_nested_root@@Base+0x11c>
   1c6f0:	ldr	r0, [sp, #20]
   1c6f4:	ldr	r1, [sp, #20]
   1c6f8:	str	r0, [sp, #8]
   1c6fc:	mov	r0, r1
   1c700:	movw	r1, #0
   1c704:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c708:	ldr	r1, [sp, #8]
   1c70c:	add	r0, r1, r0
   1c710:	str	r0, [sp, #20]
   1c714:	ldr	r0, [sp, #20]
   1c718:	movw	r1, #0
   1c71c:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c720:	str	r0, [sp, #16]
   1c724:	ldr	r0, [sp, #20]
   1c728:	add	r0, r0, #4
   1c72c:	str	r0, [sp, #20]
   1c730:	ldr	r0, [sp, #20]
   1c734:	ldr	r1, [sp, #16]
   1c738:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c73c:	ldr	r3, [fp, #8]
   1c740:	ldrh	ip, [fp, #-22]	; 0xffffffea
   1c744:	str	ip, [sp]
   1c748:	bl	1c384 <flatcc_verify_struct_as_root@@Base>
   1c74c:	str	r0, [fp, #-4]
   1c750:	ldr	r0, [fp, #-4]
   1c754:	mov	sp, fp
   1c758:	pop	{fp, pc}
   1c75c:	push	{fp, lr}
   1c760:	mov	fp, sp
   1c764:	sub	sp, sp, #16
   1c768:	str	r0, [fp, #-4]
   1c76c:	strh	r1, [fp, #-6]
   1c770:	ldr	r0, [fp, #-4]
   1c774:	ldrh	r1, [fp, #-6]
   1c778:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1c77c:	strh	r0, [sp, #8]
   1c780:	ldrh	r0, [sp, #8]
   1c784:	cmp	r0, #0
   1c788:	beq	1c7b0 <flatcc_verify_struct_as_nested_root@@Base+0x17c>
   1c78c:	ldr	r0, [fp, #-4]
   1c790:	ldr	r0, [r0]
   1c794:	ldr	r1, [fp, #-4]
   1c798:	ldr	r1, [r1, #16]
   1c79c:	add	r0, r0, r1
   1c7a0:	ldrh	r1, [sp, #8]
   1c7a4:	add	r0, r0, r1
   1c7a8:	str	r0, [sp, #4]
   1c7ac:	b	1c7bc <flatcc_verify_struct_as_nested_root@@Base+0x188>
   1c7b0:	movw	r0, #0
   1c7b4:	str	r0, [sp, #4]
   1c7b8:	b	1c7bc <flatcc_verify_struct_as_nested_root@@Base+0x188>
   1c7bc:	ldr	r0, [sp, #4]
   1c7c0:	mov	sp, fp
   1c7c4:	pop	{fp, pc}

0001c7c8 <flatcc_verify_table_as_nested_root@@Base>:
   1c7c8:	push	{r4, sl, fp, lr}
   1c7cc:	add	fp, sp, #8
   1c7d0:	sub	sp, sp, #72	; 0x48
   1c7d4:	ldr	ip, [fp, #12]
   1c7d8:	ldr	lr, [fp, #8]
   1c7dc:	str	r0, [fp, #-16]
   1c7e0:	strh	r1, [fp, #-18]	; 0xffffffee
   1c7e4:	str	r2, [fp, #-24]	; 0xffffffe8
   1c7e8:	str	r3, [fp, #-28]	; 0xffffffe4
   1c7ec:	strh	lr, [fp, #-30]	; 0xffffffe2
   1c7f0:	ldr	r0, [fp, #-16]
   1c7f4:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c7f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c7fc:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   1c800:	uxth	r1, r1
   1c804:	movw	lr, #1
   1c808:	uxth	lr, lr
   1c80c:	str	lr, [sp]
   1c810:	mvn	lr, #0
   1c814:	str	lr, [sp, #4]
   1c818:	str	ip, [sp, #36]	; 0x24
   1c81c:	bl	1b270 <flatcc_verify_vector_field@@Base>
   1c820:	cmp	r0, #0
   1c824:	beq	1c85c <flatcc_verify_table_as_nested_root@@Base+0x94>
   1c828:	ldr	r0, [fp, #-16]
   1c82c:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c830:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c834:	ldrh	r3, [fp, #-30]	; 0xffffffe2
   1c838:	uxth	r1, r1
   1c83c:	movw	ip, #1
   1c840:	uxth	ip, ip
   1c844:	str	ip, [sp]
   1c848:	mvn	ip, #0
   1c84c:	str	ip, [sp, #4]
   1c850:	bl	1b270 <flatcc_verify_vector_field@@Base>
   1c854:	str	r0, [fp, #-12]
   1c858:	b	1c964 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   1c85c:	ldr	r0, [fp, #-16]
   1c860:	ldrh	r1, [fp, #-18]	; 0xffffffee
   1c864:	bl	1c75c <flatcc_verify_struct_as_nested_root@@Base+0x128>
   1c868:	str	r0, [fp, #-36]	; 0xffffffdc
   1c86c:	movw	r1, #0
   1c870:	cmp	r1, r0
   1c874:	bne	1c884 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1c878:	movw	r0, #0
   1c87c:	str	r0, [fp, #-12]
   1c880:	b	1c964 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   1c884:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c888:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c88c:	str	r0, [sp, #32]
   1c890:	mov	r0, r1
   1c894:	movw	r1, #0
   1c898:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c89c:	ldr	r1, [sp, #32]
   1c8a0:	add	r0, r1, r0
   1c8a4:	str	r0, [fp, #-36]	; 0xffffffdc
   1c8a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8ac:	movw	r1, #0
   1c8b0:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c8b4:	str	r0, [sp, #40]	; 0x28
   1c8b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8bc:	add	r0, r0, #4
   1c8c0:	str	r0, [fp, #-36]	; 0xffffffdc
   1c8c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8c8:	ldr	r1, [sp, #40]	; 0x28
   1c8cc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c8d0:	bl	1c060 <flatcc_verify_buffer_header@@Base>
   1c8d4:	cmp	r0, #0
   1c8d8:	beq	1c8f4 <flatcc_verify_table_as_nested_root@@Base+0x12c>
   1c8dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8e0:	ldr	r1, [sp, #40]	; 0x28
   1c8e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c8e8:	bl	1c060 <flatcc_verify_buffer_header@@Base>
   1c8ec:	str	r0, [fp, #-12]
   1c8f0:	b	1c964 <flatcc_verify_table_as_nested_root@@Base+0x19c>
   1c8f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c8f8:	ldr	r1, [sp, #40]	; 0x28
   1c8fc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c900:	str	r0, [sp, #28]
   1c904:	mov	r0, r2
   1c908:	movw	r2, #0
   1c90c:	str	r1, [sp, #24]
   1c910:	mov	r1, r2
   1c914:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1c918:	ldr	r1, [fp, #-16]
   1c91c:	ldr	r1, [r1, #8]
   1c920:	ldr	r2, [fp, #12]
   1c924:	ldr	r3, [sp, #28]
   1c928:	str	r0, [sp, #20]
   1c92c:	mov	r0, r3
   1c930:	ldr	ip, [sp, #24]
   1c934:	str	r1, [sp, #16]
   1c938:	mov	r1, ip
   1c93c:	movw	lr, #0
   1c940:	str	r2, [sp, #12]
   1c944:	mov	r2, lr
   1c948:	ldr	r3, [sp, #20]
   1c94c:	ldr	lr, [sp, #16]
   1c950:	str	lr, [sp]
   1c954:	ldr	r4, [sp, #12]
   1c958:	str	r4, [sp, #4]
   1c95c:	bl	1b814 <flatcc_verify_table_field@@Base+0xf0>
   1c960:	str	r0, [fp, #-12]
   1c964:	ldr	r0, [fp, #-12]
   1c968:	sub	sp, fp, #8
   1c96c:	pop	{r4, sl, fp, pc}

0001c970 <flatcc_verify_union_field@@Base>:
   1c970:	push	{fp, lr}
   1c974:	mov	fp, sp
   1c978:	sub	sp, sp, #88	; 0x58
   1c97c:	str	r0, [fp, #-8]
   1c980:	strh	r1, [fp, #-10]
   1c984:	str	r2, [fp, #-16]
   1c988:	str	r3, [fp, #-20]	; 0xffffffec
   1c98c:	ldr	r0, [fp, #-8]
   1c990:	ldrh	r1, [fp, #-10]
   1c994:	sub	r1, r1, #1
   1c998:	uxth	r1, r1
   1c99c:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1c9a0:	strh	r0, [fp, #-22]	; 0xffffffea
   1c9a4:	uxth	r0, r0
   1c9a8:	movw	r1, #0
   1c9ac:	cmp	r1, r0
   1c9b0:	bne	1ca44 <flatcc_verify_union_field@@Base+0xd4>
   1c9b4:	ldr	r0, [fp, #-8]
   1c9b8:	ldrh	r1, [fp, #-10]
   1c9bc:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1c9c0:	strh	r0, [fp, #-24]	; 0xffffffe8
   1c9c4:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   1c9c8:	cmp	r0, #0
   1c9cc:	movw	r0, #0
   1c9d0:	moveq	r0, #1
   1c9d4:	and	r0, r0, #1
   1c9d8:	str	r0, [sp, #28]
   1c9dc:	ldr	r0, [sp, #28]
   1c9e0:	cmp	r0, #0
   1c9e4:	bne	1c9f4 <flatcc_verify_union_field@@Base+0x84>
   1c9e8:	movw	r0, #23
   1c9ec:	str	r0, [fp, #-4]
   1c9f0:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1c9f4:	b	1c9f8 <flatcc_verify_union_field@@Base+0x88>
   1c9f8:	b	1c9fc <flatcc_verify_union_field@@Base+0x8c>
   1c9fc:	ldr	r0, [fp, #-16]
   1ca00:	cmp	r0, #0
   1ca04:	movw	r0, #0
   1ca08:	movne	r0, #1
   1ca0c:	mvn	r1, #0
   1ca10:	eor	r0, r0, r1
   1ca14:	and	r0, r0, #1
   1ca18:	str	r0, [sp, #24]
   1ca1c:	ldr	r0, [sp, #24]
   1ca20:	cmp	r0, #0
   1ca24:	bne	1ca34 <flatcc_verify_union_field@@Base+0xc4>
   1ca28:	movw	r0, #21
   1ca2c:	str	r0, [fp, #-4]
   1ca30:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1ca34:	b	1ca38 <flatcc_verify_union_field@@Base+0xc8>
   1ca38:	movw	r0, #0
   1ca3c:	str	r0, [fp, #-4]
   1ca40:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1ca44:	ldr	r0, [fp, #-8]
   1ca48:	ldrh	r1, [fp, #-10]
   1ca4c:	sub	r1, r1, #1
   1ca50:	uxth	r1, r1
   1ca54:	movw	r2, #0
   1ca58:	movw	r3, #1
   1ca5c:	movw	ip, #1
   1ca60:	uxth	ip, ip
   1ca64:	str	ip, [sp]
   1ca68:	bl	1ad88 <flatcc_verify_field@@Base+0x80>
   1ca6c:	cmp	r0, #0
   1ca70:	beq	1caa4 <flatcc_verify_union_field@@Base+0x134>
   1ca74:	ldr	r0, [fp, #-8]
   1ca78:	ldrh	r1, [fp, #-10]
   1ca7c:	sub	r1, r1, #1
   1ca80:	uxth	r1, r1
   1ca84:	movw	r2, #0
   1ca88:	movw	r3, #1
   1ca8c:	movw	ip, #1
   1ca90:	uxth	ip, ip
   1ca94:	str	ip, [sp]
   1ca98:	bl	1ad88 <flatcc_verify_field@@Base+0x80>
   1ca9c:	str	r0, [fp, #-4]
   1caa0:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1caa4:	ldr	r0, [fp, #-8]
   1caa8:	ldrh	r1, [fp, #-10]
   1caac:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1cab0:	strh	r0, [fp, #-24]	; 0xffffffe8
   1cab4:	ldr	r0, [fp, #-8]
   1cab8:	ldr	r0, [r0]
   1cabc:	ldr	r1, [fp, #-8]
   1cac0:	ldr	r1, [r1, #16]
   1cac4:	add	r0, r0, r1
   1cac8:	ldrh	r1, [fp, #-22]	; 0xffffffea
   1cacc:	add	r0, r0, r1
   1cad0:	str	r0, [fp, #-28]	; 0xffffffe4
   1cad4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cad8:	ldrb	r0, [r0]
   1cadc:	cmp	r0, #0
   1cae0:	movw	r0, #1
   1cae4:	str	r0, [sp, #12]
   1cae8:	bne	1cb00 <flatcc_verify_union_field@@Base+0x190>
   1caec:	ldrh	r0, [fp, #-24]	; 0xffffffe8
   1caf0:	cmp	r0, #0
   1caf4:	movw	r0, #0
   1caf8:	moveq	r0, #1
   1cafc:	str	r0, [sp, #12]
   1cb00:	ldr	r0, [sp, #12]
   1cb04:	and	r0, r0, #1
   1cb08:	str	r0, [sp, #20]
   1cb0c:	ldr	r0, [sp, #20]
   1cb10:	cmp	r0, #0
   1cb14:	bne	1cb24 <flatcc_verify_union_field@@Base+0x1b4>
   1cb18:	movw	r0, #24
   1cb1c:	str	r0, [fp, #-4]
   1cb20:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1cb24:	b	1cb28 <flatcc_verify_union_field@@Base+0x1b8>
   1cb28:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cb2c:	ldrb	r0, [r0]
   1cb30:	cmp	r0, #0
   1cb34:	bne	1cb44 <flatcc_verify_union_field@@Base+0x1d4>
   1cb38:	movw	r0, #0
   1cb3c:	str	r0, [fp, #-4]
   1cb40:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1cb44:	b	1cb48 <flatcc_verify_union_field@@Base+0x1d8>
   1cb48:	ldr	r0, [fp, #-8]
   1cb4c:	ldrh	r1, [fp, #-10]
   1cb50:	ldr	r2, [fp, #-16]
   1cb54:	uxth	r1, r1
   1cb58:	sub	r3, fp, #32
   1cb5c:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1cb60:	str	r0, [sp, #16]
   1cb64:	ldr	r0, [sp, #16]
   1cb68:	cmp	r0, #0
   1cb6c:	bne	1cb7c <flatcc_verify_union_field@@Base+0x20c>
   1cb70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cb74:	cmp	r0, #0
   1cb78:	bne	1cb88 <flatcc_verify_union_field@@Base+0x218>
   1cb7c:	ldr	r0, [sp, #16]
   1cb80:	str	r0, [fp, #-4]
   1cb84:	b	1cbf4 <flatcc_verify_union_field@@Base+0x284>
   1cb88:	b	1cb8c <flatcc_verify_union_field@@Base+0x21c>
   1cb8c:	ldr	r0, [fp, #-8]
   1cb90:	ldr	r0, [r0]
   1cb94:	str	r0, [sp, #32]
   1cb98:	ldr	r0, [fp, #-8]
   1cb9c:	ldr	r0, [r0, #4]
   1cba0:	str	r0, [sp, #36]	; 0x24
   1cba4:	ldr	r0, [fp, #-8]
   1cba8:	ldr	r0, [r0, #8]
   1cbac:	str	r0, [sp, #40]	; 0x28
   1cbb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cbb4:	str	r0, [sp, #48]	; 0x30
   1cbb8:	ldr	r0, [fp, #-8]
   1cbbc:	ldr	r0, [r0]
   1cbc0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1cbc4:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1cbc8:	str	r0, [sp, #52]	; 0x34
   1cbcc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cbd0:	ldrb	r0, [r0]
   1cbd4:	strb	r0, [sp, #44]	; 0x2c
   1cbd8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1cbdc:	add	r1, sp, #32
   1cbe0:	str	r0, [sp, #8]
   1cbe4:	mov	r0, r1
   1cbe8:	ldr	r1, [sp, #8]
   1cbec:	blx	r1
   1cbf0:	str	r0, [fp, #-4]
   1cbf4:	ldr	r0, [fp, #-4]
   1cbf8:	mov	sp, fp
   1cbfc:	pop	{fp, pc}
   1cc00:	push	{fp, lr}
   1cc04:	mov	fp, sp
   1cc08:	sub	sp, sp, #16
   1cc0c:	str	r0, [sp, #8]
   1cc10:	strh	r1, [sp, #6]
   1cc14:	ldrh	r0, [sp, #6]
   1cc18:	add	r0, r0, #2
   1cc1c:	lsl	r0, r0, #1
   1cc20:	strh	r0, [sp, #4]
   1cc24:	ldrh	r0, [sp, #4]
   1cc28:	ldr	r1, [sp, #8]
   1cc2c:	ldrh	r1, [r1, #22]
   1cc30:	cmp	r0, r1
   1cc34:	blt	1cc44 <flatcc_verify_union_field@@Base+0x2d4>
   1cc38:	movw	r0, #0
   1cc3c:	str	r0, [fp, #-4]
   1cc40:	b	1cc5c <flatcc_verify_union_field@@Base+0x2ec>
   1cc44:	ldr	r0, [sp, #8]
   1cc48:	ldr	r0, [r0, #12]
   1cc4c:	ldrh	r1, [sp, #4]
   1cc50:	bl	1d350 <flatcc_verify_union_vector_field@@Base+0x6e8>
   1cc54:	uxth	r0, r0
   1cc58:	str	r0, [fp, #-4]
   1cc5c:	ldr	r0, [fp, #-4]
   1cc60:	mov	sp, fp
   1cc64:	pop	{fp, pc}

0001cc68 <flatcc_verify_union_vector_field@@Base>:
   1cc68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1cc6c:	add	fp, sp, #24
   1cc70:	sub	sp, sp, #96	; 0x60
   1cc74:	str	r0, [fp, #-32]	; 0xffffffe0
   1cc78:	strh	r1, [fp, #-34]	; 0xffffffde
   1cc7c:	str	r2, [fp, #-40]	; 0xffffffd8
   1cc80:	str	r3, [fp, #-44]	; 0xffffffd4
   1cc84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cc88:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cc8c:	sub	r1, r1, #1
   1cc90:	uxth	r1, r1
   1cc94:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1cc98:	strh	r0, [fp, #-46]	; 0xffffffd2
   1cc9c:	uxth	r0, r0
   1cca0:	movw	r1, #0
   1cca4:	cmp	r1, r0
   1cca8:	bne	1cd14 <flatcc_verify_union_vector_field@@Base+0xac>
   1ccac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ccb0:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1ccb4:	bl	1cc00 <flatcc_verify_union_field@@Base+0x290>
   1ccb8:	strh	r0, [fp, #-48]	; 0xffffffd0
   1ccbc:	uxth	r0, r0
   1ccc0:	movw	r1, #0
   1ccc4:	cmp	r1, r0
   1ccc8:	bne	1cd10 <flatcc_verify_union_vector_field@@Base+0xa8>
   1cccc:	b	1ccd0 <flatcc_verify_union_vector_field@@Base+0x68>
   1ccd0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ccd4:	cmp	r0, #0
   1ccd8:	movw	r0, #0
   1ccdc:	movne	r0, #1
   1cce0:	mvn	r1, #0
   1cce4:	eor	r0, r0, r1
   1cce8:	and	r0, r0, #1
   1ccec:	str	r0, [sp, #52]	; 0x34
   1ccf0:	ldr	r0, [sp, #52]	; 0x34
   1ccf4:	cmp	r0, #0
   1ccf8:	bne	1cd08 <flatcc_verify_union_vector_field@@Base+0xa0>
   1ccfc:	movw	r0, #22
   1cd00:	str	r0, [fp, #-28]	; 0xffffffe4
   1cd04:	b	1cee0 <flatcc_verify_union_vector_field@@Base+0x278>
   1cd08:	b	1cd0c <flatcc_verify_union_vector_field@@Base+0xa4>
   1cd0c:	b	1cd10 <flatcc_verify_union_vector_field@@Base+0xa8>
   1cd10:	b	1cd14 <flatcc_verify_union_vector_field@@Base+0xac>
   1cd14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cd18:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cd1c:	sub	r1, r1, #1
   1cd20:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cd24:	uxth	r1, r1
   1cd28:	movw	r3, #1
   1cd2c:	movw	ip, #1
   1cd30:	uxth	ip, ip
   1cd34:	str	ip, [sp]
   1cd38:	mvn	ip, #0
   1cd3c:	str	ip, [sp, #4]
   1cd40:	bl	1b270 <flatcc_verify_vector_field@@Base>
   1cd44:	cmp	r0, #0
   1cd48:	beq	1cd84 <flatcc_verify_union_vector_field@@Base+0x11c>
   1cd4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cd50:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cd54:	sub	r1, r1, #1
   1cd58:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1cd5c:	uxth	r1, r1
   1cd60:	movw	r3, #1
   1cd64:	movw	ip, #1
   1cd68:	uxth	ip, ip
   1cd6c:	str	ip, [sp]
   1cd70:	mvn	ip, #0
   1cd74:	str	ip, [sp, #4]
   1cd78:	bl	1b270 <flatcc_verify_vector_field@@Base>
   1cd7c:	str	r0, [fp, #-28]	; 0xffffffe4
   1cd80:	b	1cee0 <flatcc_verify_union_vector_field@@Base+0x278>
   1cd84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cd88:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1cd8c:	sub	r1, r1, #1
   1cd90:	uxth	r1, r1
   1cd94:	bl	1c75c <flatcc_verify_struct_as_nested_root@@Base+0x128>
   1cd98:	str	r0, [fp, #-52]	; 0xffffffcc
   1cd9c:	movw	r1, #0
   1cda0:	cmp	r1, r0
   1cda4:	bne	1cdb4 <flatcc_verify_union_vector_field@@Base+0x14c>
   1cda8:	movw	r0, #0
   1cdac:	str	r0, [fp, #-28]	; 0xffffffe4
   1cdb0:	b	1cee0 <flatcc_verify_union_vector_field@@Base+0x278>
   1cdb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cdb8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1cdbc:	str	r0, [sp, #44]	; 0x2c
   1cdc0:	mov	r0, r1
   1cdc4:	movw	r1, #0
   1cdc8:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1cdcc:	ldr	r1, [sp, #44]	; 0x2c
   1cdd0:	add	r0, r1, r0
   1cdd4:	str	r0, [fp, #-52]	; 0xffffffcc
   1cdd8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cddc:	movw	r1, #0
   1cde0:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1cde4:	str	r0, [sp, #60]	; 0x3c
   1cde8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cdec:	add	r0, r0, #4
   1cdf0:	str	r0, [fp, #-52]	; 0xffffffcc
   1cdf4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cdf8:	str	r0, [fp, #-56]	; 0xffffffc8
   1cdfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce00:	ldrh	r1, [fp, #-34]	; 0xffffffde
   1ce04:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ce08:	uxth	r1, r1
   1ce0c:	add	r3, sp, #56	; 0x38
   1ce10:	bl	1afd4 <flatcc_verify_string_field@@Base+0xc0>
   1ce14:	str	r0, [sp, #48]	; 0x30
   1ce18:	ldr	r0, [sp, #48]	; 0x30
   1ce1c:	cmp	r0, #0
   1ce20:	bne	1ce30 <flatcc_verify_union_vector_field@@Base+0x1c8>
   1ce24:	ldr	r0, [sp, #56]	; 0x38
   1ce28:	cmp	r0, #0
   1ce2c:	bne	1ce3c <flatcc_verify_union_vector_field@@Base+0x1d4>
   1ce30:	ldr	r0, [sp, #48]	; 0x30
   1ce34:	str	r0, [fp, #-28]	; 0xffffffe4
   1ce38:	b	1cee0 <flatcc_verify_union_vector_field@@Base+0x278>
   1ce3c:	b	1ce40 <flatcc_verify_union_vector_field@@Base+0x1d8>
   1ce40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce44:	ldr	r0, [r0]
   1ce48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ce4c:	ldr	r1, [r1, #4]
   1ce50:	ldr	r2, [sp, #56]	; 0x38
   1ce54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce58:	ldr	r3, [r3]
   1ce5c:	ldr	ip, [sp, #56]	; 0x38
   1ce60:	str	r0, [sp, #40]	; 0x28
   1ce64:	mov	r0, r3
   1ce68:	str	r1, [sp, #36]	; 0x24
   1ce6c:	mov	r1, ip
   1ce70:	str	r2, [sp, #32]
   1ce74:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1ce78:	ldr	r1, [sp, #60]	; 0x3c
   1ce7c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ce80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ce84:	ldr	r3, [r3, #8]
   1ce88:	ldr	ip, [fp, #-44]	; 0xffffffd4
   1ce8c:	ldr	lr, [sp, #40]	; 0x28
   1ce90:	str	r0, [sp, #28]
   1ce94:	mov	r0, lr
   1ce98:	ldr	r4, [sp, #36]	; 0x24
   1ce9c:	str	r1, [sp, #24]
   1cea0:	mov	r1, r4
   1cea4:	ldr	r5, [sp, #32]
   1cea8:	str	r2, [sp, #20]
   1ceac:	mov	r2, r5
   1ceb0:	ldr	r6, [sp, #28]
   1ceb4:	str	r3, [sp, #16]
   1ceb8:	mov	r3, r6
   1cebc:	ldr	r7, [sp, #24]
   1cec0:	str	r7, [sp]
   1cec4:	ldr	r8, [sp, #20]
   1cec8:	str	r8, [sp, #4]
   1cecc:	ldr	r9, [sp, #16]
   1ced0:	str	r9, [sp, #8]
   1ced4:	str	ip, [sp, #12]
   1ced8:	bl	1ceec <flatcc_verify_union_vector_field@@Base+0x284>
   1cedc:	str	r0, [fp, #-28]	; 0xffffffe4
   1cee0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cee4:	sub	sp, fp, #24
   1cee8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ceec:	push	{r4, r5, fp, lr}
   1cef0:	add	fp, sp, #8
   1cef4:	sub	sp, sp, #104	; 0x68
   1cef8:	ldr	ip, [fp, #20]
   1cefc:	ldr	lr, [fp, #16]
   1cf00:	ldr	r4, [fp, #12]
   1cf04:	ldr	r5, [fp, #8]
   1cf08:	str	r0, [fp, #-16]
   1cf0c:	str	r1, [fp, #-20]	; 0xffffffec
   1cf10:	str	r2, [fp, #-24]	; 0xffffffe8
   1cf14:	str	r3, [fp, #-28]	; 0xffffffe4
   1cf18:	ldr	r0, [fp, #16]
   1cf1c:	mvn	r1, #0
   1cf20:	add	r1, r0, r1
   1cf24:	str	r1, [fp, #16]
   1cf28:	cmp	r0, #0
   1cf2c:	movw	r0, #0
   1cf30:	movgt	r0, #1
   1cf34:	and	r0, r0, #1
   1cf38:	str	r0, [sp, #44]	; 0x2c
   1cf3c:	ldr	r0, [sp, #44]	; 0x2c
   1cf40:	cmp	r0, #0
   1cf44:	bne	1cf54 <flatcc_verify_union_vector_field@@Base+0x2ec>
   1cf48:	movw	r0, #3
   1cf4c:	str	r0, [fp, #-12]
   1cf50:	b	1d1c4 <flatcc_verify_union_vector_field@@Base+0x55c>
   1cf54:	b	1cf58 <flatcc_verify_union_vector_field@@Base+0x2f0>
   1cf58:	ldr	r0, [pc, #624]	; 1d1d0 <flatcc_verify_union_vector_field@@Base+0x568>
   1cf5c:	ldr	r1, [fp, #-16]
   1cf60:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cf64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cf68:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1cf6c:	str	r0, [sp, #28]
   1cf70:	mov	r0, r1
   1cf74:	mov	r1, r2
   1cf78:	mov	r2, r3
   1cf7c:	mov	r3, ip
   1cf80:	movw	ip, #4
   1cf84:	str	ip, [sp]
   1cf88:	movw	ip, #4
   1cf8c:	uxth	ip, ip
   1cf90:	str	ip, [sp, #4]
   1cf94:	ldr	ip, [sp, #28]
   1cf98:	str	ip, [sp, #8]
   1cf9c:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1cfa0:	cmp	r0, #0
   1cfa4:	beq	1cff8 <flatcc_verify_union_vector_field@@Base+0x390>
   1cfa8:	ldr	r0, [pc, #544]	; 1d1d0 <flatcc_verify_union_vector_field@@Base+0x568>
   1cfac:	ldr	r1, [fp, #-16]
   1cfb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1cfb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cfb8:	ldr	ip, [fp, #-28]	; 0xffffffe4
   1cfbc:	str	r0, [sp, #24]
   1cfc0:	mov	r0, r1
   1cfc4:	mov	r1, r2
   1cfc8:	mov	r2, r3
   1cfcc:	mov	r3, ip
   1cfd0:	movw	ip, #4
   1cfd4:	str	ip, [sp]
   1cfd8:	movw	ip, #4
   1cfdc:	uxth	ip, ip
   1cfe0:	str	ip, [sp, #4]
   1cfe4:	ldr	ip, [sp, #24]
   1cfe8:	str	ip, [sp, #8]
   1cfec:	bl	1b380 <flatcc_verify_vector_field@@Base+0x110>
   1cff0:	str	r0, [fp, #-12]
   1cff4:	b	1d1c4 <flatcc_verify_union_vector_field@@Base+0x55c>
   1cff8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1cffc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d000:	add	r0, r1, r0
   1d004:	str	r0, [fp, #-24]	; 0xffffffe8
   1d008:	ldr	r0, [fp, #-16]
   1d00c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d010:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1d014:	str	r0, [fp, #-36]	; 0xffffffdc
   1d018:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d01c:	ldr	r1, [fp, #8]
   1d020:	cmp	r0, r1
   1d024:	movw	r0, #0
   1d028:	moveq	r0, #1
   1d02c:	and	r0, r0, #1
   1d030:	str	r0, [sp, #40]	; 0x28
   1d034:	ldr	r0, [sp, #40]	; 0x28
   1d038:	cmp	r0, #0
   1d03c:	bne	1d04c <flatcc_verify_union_vector_field@@Base+0x3e4>
   1d040:	movw	r0, #34	; 0x22
   1d044:	str	r0, [fp, #-12]
   1d048:	b	1d1c4 <flatcc_verify_union_vector_field@@Base+0x55c>
   1d04c:	b	1d050 <flatcc_verify_union_vector_field@@Base+0x3e8>
   1d050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d054:	add	r0, r0, #4
   1d058:	str	r0, [fp, #-24]	; 0xffffffe8
   1d05c:	ldr	r0, [fp, #-16]
   1d060:	str	r0, [sp, #48]	; 0x30
   1d064:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d068:	str	r0, [sp, #52]	; 0x34
   1d06c:	ldr	r0, [fp, #16]
   1d070:	str	r0, [sp, #56]	; 0x38
   1d074:	movw	r0, #0
   1d078:	str	r0, [fp, #-32]	; 0xffffffe0
   1d07c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d080:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d084:	cmp	r0, r1
   1d088:	bcs	1d1bc <flatcc_verify_union_vector_field@@Base+0x554>
   1d08c:	ldr	r0, [fp, #-16]
   1d090:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d094:	bl	1b244 <flatcc_verify_string_field@@Base+0x330>
   1d098:	str	r0, [fp, #-40]	; 0xffffffd8
   1d09c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d0a0:	cmp	r0, #0
   1d0a4:	bne	1d0f0 <flatcc_verify_union_vector_field@@Base+0x488>
   1d0a8:	b	1d0ac <flatcc_verify_union_vector_field@@Base+0x444>
   1d0ac:	ldr	r0, [fp, #12]
   1d0b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d0b4:	add	r0, r0, r1
   1d0b8:	ldrb	r0, [r0]
   1d0bc:	cmp	r0, #0
   1d0c0:	movw	r0, #0
   1d0c4:	moveq	r0, #1
   1d0c8:	and	r0, r0, #1
   1d0cc:	str	r0, [sp, #36]	; 0x24
   1d0d0:	ldr	r0, [sp, #36]	; 0x24
   1d0d4:	cmp	r0, #0
   1d0d8:	bne	1d0e8 <flatcc_verify_union_vector_field@@Base+0x480>
   1d0dc:	movw	r0, #32
   1d0e0:	str	r0, [fp, #-12]
   1d0e4:	b	1d1c4 <flatcc_verify_union_vector_field@@Base+0x55c>
   1d0e8:	b	1d0ec <flatcc_verify_union_vector_field@@Base+0x484>
   1d0ec:	b	1d19c <flatcc_verify_union_vector_field@@Base+0x534>
   1d0f0:	b	1d0f4 <flatcc_verify_union_vector_field@@Base+0x48c>
   1d0f4:	ldr	r0, [fp, #12]
   1d0f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d0fc:	add	r0, r0, r1
   1d100:	ldrb	r0, [r0]
   1d104:	cmp	r0, #0
   1d108:	movw	r0, #0
   1d10c:	movne	r0, #1
   1d110:	and	r0, r0, #1
   1d114:	str	r0, [sp, #32]
   1d118:	ldr	r0, [sp, #32]
   1d11c:	cmp	r0, #0
   1d120:	bne	1d130 <flatcc_verify_union_vector_field@@Base+0x4c8>
   1d124:	movw	r0, #33	; 0x21
   1d128:	str	r0, [fp, #-12]
   1d12c:	b	1d1c4 <flatcc_verify_union_vector_field@@Base+0x55c>
   1d130:	b	1d134 <flatcc_verify_union_vector_field@@Base+0x4cc>
   1d134:	ldr	r0, [fp, #12]
   1d138:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1d13c:	add	r0, r0, r1
   1d140:	ldrb	r0, [r0]
   1d144:	strb	r0, [sp, #60]	; 0x3c
   1d148:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d14c:	str	r0, [sp, #64]	; 0x40
   1d150:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d154:	str	r0, [sp, #68]	; 0x44
   1d158:	ldr	r0, [fp, #20]
   1d15c:	add	r1, sp, #48	; 0x30
   1d160:	str	r0, [sp, #20]
   1d164:	mov	r0, r1
   1d168:	ldr	r1, [sp, #20]
   1d16c:	blx	r1
   1d170:	cmp	r0, #0
   1d174:	beq	1d198 <flatcc_verify_union_vector_field@@Base+0x530>
   1d178:	ldr	r0, [fp, #20]
   1d17c:	add	r1, sp, #48	; 0x30
   1d180:	str	r0, [sp, #16]
   1d184:	mov	r0, r1
   1d188:	ldr	r1, [sp, #16]
   1d18c:	blx	r1
   1d190:	str	r0, [fp, #-12]
   1d194:	b	1d1c4 <flatcc_verify_union_vector_field@@Base+0x55c>
   1d198:	b	1d19c <flatcc_verify_union_vector_field@@Base+0x534>
   1d19c:	b	1d1a0 <flatcc_verify_union_vector_field@@Base+0x538>
   1d1a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d1a4:	add	r0, r0, #1
   1d1a8:	str	r0, [fp, #-32]	; 0xffffffe0
   1d1ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d1b0:	add	r0, r0, #4
   1d1b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1d1b8:	b	1d07c <flatcc_verify_union_vector_field@@Base+0x414>
   1d1bc:	movw	r0, #0
   1d1c0:	str	r0, [fp, #-12]
   1d1c4:	ldr	r0, [fp, #-12]
   1d1c8:	sub	sp, fp, #8
   1d1cc:	pop	{r4, r5, fp, pc}
   1d1d0:	svccc	0x00ffffff
   1d1d4:	sub	sp, sp, #20
   1d1d8:	str	r0, [sp, #16]
   1d1dc:	str	r1, [sp, #12]
   1d1e0:	str	r2, [sp, #8]
   1d1e4:	ldr	r0, [sp, #12]
   1d1e8:	ldr	r1, [sp, #8]
   1d1ec:	add	r0, r0, r1
   1d1f0:	str	r0, [sp, #4]
   1d1f4:	ldr	r0, [sp, #4]
   1d1f8:	ldr	r1, [sp, #12]
   1d1fc:	cmp	r0, r1
   1d200:	movw	r0, #0
   1d204:	str	r0, [sp]
   1d208:	bls	1d248 <flatcc_verify_union_vector_field@@Base+0x5e0>
   1d20c:	ldr	r0, [sp, #4]
   1d210:	add	r0, r0, #4
   1d214:	ldr	r1, [sp, #16]
   1d218:	cmp	r0, r1
   1d21c:	movw	r0, #0
   1d220:	str	r0, [sp]
   1d224:	bhi	1d248 <flatcc_verify_union_vector_field@@Base+0x5e0>
   1d228:	ldr	r0, [sp, #4]
   1d22c:	and	r0, r0, #3
   1d230:	cmp	r0, #0
   1d234:	movw	r0, #0
   1d238:	movne	r0, #1
   1d23c:	mvn	r1, #0
   1d240:	eor	r0, r0, r1
   1d244:	str	r0, [sp]
   1d248:	ldr	r0, [sp]
   1d24c:	and	r0, r0, #1
   1d250:	add	sp, sp, #20
   1d254:	bx	lr
   1d258:	push	{fp, lr}
   1d25c:	mov	fp, sp
   1d260:	sub	sp, sp, #8
   1d264:	str	r0, [sp, #4]
   1d268:	ldr	r0, [sp, #4]
   1d26c:	ldr	r0, [r0]
   1d270:	bl	1d27c <flatcc_verify_union_vector_field@@Base+0x614>
   1d274:	mov	sp, fp
   1d278:	pop	{fp, pc}
   1d27c:	sub	sp, sp, #4
   1d280:	str	r0, [sp]
   1d284:	ldr	r0, [sp]
   1d288:	add	sp, sp, #4
   1d28c:	bx	lr
   1d290:	sub	sp, sp, #28
   1d294:	str	r0, [sp, #24]
   1d298:	str	r1, [sp, #20]
   1d29c:	str	r2, [sp, #16]
   1d2a0:	strh	r3, [sp, #14]
   1d2a4:	ldr	r0, [sp, #20]
   1d2a8:	ldr	r1, [sp, #16]
   1d2ac:	add	r0, r0, r1
   1d2b0:	str	r0, [sp, #8]
   1d2b4:	ldrh	r0, [sp, #14]
   1d2b8:	cmp	r0, #4
   1d2bc:	bcs	1d2cc <flatcc_verify_union_vector_field@@Base+0x664>
   1d2c0:	movw	r0, #4
   1d2c4:	str	r0, [sp, #4]
   1d2c8:	b	1d2d4 <flatcc_verify_union_vector_field@@Base+0x66c>
   1d2cc:	ldrh	r0, [sp, #14]
   1d2d0:	str	r0, [sp, #4]
   1d2d4:	ldr	r0, [sp, #4]
   1d2d8:	strh	r0, [sp, #14]
   1d2dc:	ldr	r0, [sp, #8]
   1d2e0:	ldr	r1, [sp, #20]
   1d2e4:	cmp	r0, r1
   1d2e8:	movw	r0, #0
   1d2ec:	str	r0, [sp]
   1d2f0:	bls	1d340 <flatcc_verify_union_vector_field@@Base+0x6d8>
   1d2f4:	ldr	r0, [sp, #8]
   1d2f8:	add	r0, r0, #4
   1d2fc:	ldr	r1, [sp, #24]
   1d300:	cmp	r0, r1
   1d304:	movw	r0, #0
   1d308:	str	r0, [sp]
   1d30c:	bhi	1d340 <flatcc_verify_union_vector_field@@Base+0x6d8>
   1d310:	ldr	r0, [sp, #8]
   1d314:	add	r0, r0, #4
   1d318:	ldrh	r1, [sp, #14]
   1d31c:	sub	r1, r1, #1
   1d320:	orr	r1, r1, #3
   1d324:	and	r0, r0, r1
   1d328:	cmp	r0, #0
   1d32c:	movw	r0, #0
   1d330:	movne	r0, #1
   1d334:	mvn	r1, #0
   1d338:	eor	r0, r0, r1
   1d33c:	str	r0, [sp]
   1d340:	ldr	r0, [sp]
   1d344:	and	r0, r0, #1
   1d348:	add	sp, sp, #28
   1d34c:	bx	lr
   1d350:	push	{fp, lr}
   1d354:	mov	fp, sp
   1d358:	sub	sp, sp, #8
   1d35c:	str	r0, [sp, #4]
   1d360:	str	r1, [sp]
   1d364:	ldr	r0, [sp, #4]
   1d368:	ldr	r1, [sp]
   1d36c:	add	r0, r0, r1
   1d370:	bl	1d380 <flatcc_verify_union_vector_field@@Base+0x718>
   1d374:	uxth	r0, r0
   1d378:	mov	sp, fp
   1d37c:	pop	{fp, pc}
   1d380:	push	{fp, lr}
   1d384:	mov	fp, sp
   1d388:	sub	sp, sp, #8
   1d38c:	str	r0, [sp, #4]
   1d390:	ldr	r0, [sp, #4]
   1d394:	ldrh	r0, [r0]
   1d398:	bl	1d3a8 <flatcc_verify_union_vector_field@@Base+0x740>
   1d39c:	uxth	r0, r0
   1d3a0:	mov	sp, fp
   1d3a4:	pop	{fp, pc}
   1d3a8:	sub	sp, sp, #4
   1d3ac:	strh	r0, [sp, #2]
   1d3b0:	ldrh	r0, [sp, #2]
   1d3b4:	add	sp, sp, #4
   1d3b8:	bx	lr
   1d3bc:	sub	sp, sp, #4
   1d3c0:	str	r0, [sp]
   1d3c4:	ldr	r0, [sp]
   1d3c8:	add	sp, sp, #4
   1d3cc:	bx	lr
   1d3d0:	push	{fp, lr}
   1d3d4:	mov	fp, sp
   1d3d8:	sub	sp, sp, #8
   1d3dc:	str	r0, [sp, #4]
   1d3e0:	ldr	r0, [sp, #4]
   1d3e4:	ldr	r0, [r0]
   1d3e8:	bl	1d3f4 <flatcc_verify_union_vector_field@@Base+0x78c>
   1d3ec:	mov	sp, fp
   1d3f0:	pop	{fp, pc}
   1d3f4:	sub	sp, sp, #4
   1d3f8:	str	r0, [sp]
   1d3fc:	ldr	r0, [sp]
   1d400:	add	sp, sp, #4
   1d404:	bx	lr

0001d408 <__libc_csu_init@@Base>:
   1d408:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d40c:	mov	r7, r0
   1d410:	ldr	r6, [pc, #72]	; 1d460 <__libc_csu_init@@Base+0x58>
   1d414:	ldr	r5, [pc, #72]	; 1d464 <__libc_csu_init@@Base+0x5c>
   1d418:	add	r6, pc, r6
   1d41c:	add	r5, pc, r5
   1d420:	sub	r6, r6, r5
   1d424:	mov	r8, r1
   1d428:	mov	r9, r2
   1d42c:	bl	126ec <free@plt-0x20>
   1d430:	asrs	r6, r6, #2
   1d434:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d438:	mov	r4, #0
   1d43c:	add	r4, r4, #1
   1d440:	ldr	r3, [r5], #4
   1d444:	mov	r2, r9
   1d448:	mov	r1, r8
   1d44c:	mov	r0, r7
   1d450:	blx	r3
   1d454:	cmp	r6, r4
   1d458:	bne	1d43c <__libc_csu_init@@Base+0x34>
   1d45c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d460:	andeq	r1, r1, ip, ror #21
   1d464:	andeq	r1, r1, r4, ror #21

0001d468 <__libc_csu_fini@@Base>:
   1d468:	bx	lr

Disassembly of section .fini:

0001d46c <.fini>:
   1d46c:	push	{r3, lr}
   1d470:	pop	{r3, pc}
