
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f34 <.init>:
   11f34:	push	{r3, lr}
   11f38:	bl	12050 <_start@@Base+0x3c>
   11f3c:	pop	{r3, pc}

Disassembly of section .plt:

00011f40 <strcmp@plt-0x14>:
   11f40:	push	{lr}		; (str lr, [sp, #-4]!)
   11f44:	ldr	lr, [pc, #4]	; 11f50 <strcmp@plt-0x4>
   11f48:	add	lr, pc, lr
   11f4c:	ldr	pc, [lr, #8]!
   11f50:	strheq	ip, [r1], -r0

00011f54 <strcmp@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #28, 20	; 0x1c000
   11f5c:	ldr	pc, [ip, #176]!	; 0xb0

00011f60 <free@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #28, 20	; 0x1c000
   11f68:	ldr	pc, [ip, #168]!	; 0xa8

00011f6c <memcpy@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #28, 20	; 0x1c000
   11f74:	ldr	pc, [ip, #160]!	; 0xa0

00011f78 <memcmp@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #28, 20	; 0x1c000
   11f80:	ldr	pc, [ip, #152]!	; 0x98

00011f84 <realloc@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #28, 20	; 0x1c000
   11f8c:	ldr	pc, [ip, #144]!	; 0x90

00011f90 <puts@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #28, 20	; 0x1c000
   11f98:	ldr	pc, [ip, #136]!	; 0x88

00011f9c <malloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #28, 20	; 0x1c000
   11fa4:	ldr	pc, [ip, #128]!	; 0x80

00011fa8 <__libc_start_main@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #28, 20	; 0x1c000
   11fb0:	ldr	pc, [ip, #120]!	; 0x78

00011fb4 <__gmon_start__@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #28, 20	; 0x1c000
   11fbc:	ldr	pc, [ip, #112]!	; 0x70

00011fc0 <strlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #28, 20	; 0x1c000
   11fc8:	ldr	pc, [ip, #104]!	; 0x68

00011fcc <posix_memalign@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #28, 20	; 0x1c000
   11fd4:	ldr	pc, [ip, #96]!	; 0x60

00011fd8 <memset@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #28, 20	; 0x1c000
   11fe0:	ldr	pc, [ip, #88]!	; 0x58

00011fe4 <strncpy@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #28, 20	; 0x1c000
   11fec:	ldr	pc, [ip, #80]!	; 0x50

00011ff0 <memchr@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #28, 20	; 0x1c000
   11ff8:	ldr	pc, [ip, #72]!	; 0x48

00011ffc <abort@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #28, 20	; 0x1c000
   12004:	ldr	pc, [ip, #64]!	; 0x40

00012008 <__assert_fail@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #28, 20	; 0x1c000
   12010:	ldr	pc, [ip, #56]!	; 0x38

Disassembly of section .text:

00012014 <_start@@Base>:
   12014:	mov	fp, #0
   12018:	mov	lr, #0
   1201c:	pop	{r1}		; (ldr r1, [sp], #4)
   12020:	mov	r2, sp
   12024:	push	{r2}		; (str r2, [sp, #-4]!)
   12028:	push	{r0}		; (str r0, [sp, #-4]!)
   1202c:	ldr	ip, [pc, #16]	; 12044 <_start@@Base+0x30>
   12030:	push	{ip}		; (str ip, [sp, #-4]!)
   12034:	ldr	r0, [pc, #12]	; 12048 <_start@@Base+0x34>
   12038:	ldr	r3, [pc, #12]	; 1204c <_start@@Base+0x38>
   1203c:	bl	11fa8 <__libc_start_main@plt>
   12040:	bl	11ffc <abort@plt>
   12044:	andeq	ip, r1, r0, lsr #13
   12048:	andeq	r5, r1, r8, lsl #4
   1204c:	andeq	ip, r1, r0, asr #12
   12050:	ldr	r3, [pc, #20]	; 1206c <_start@@Base+0x58>
   12054:	ldr	r2, [pc, #20]	; 12070 <_start@@Base+0x5c>
   12058:	add	r3, pc, r3
   1205c:	ldr	r2, [r3, r2]
   12060:	cmp	r2, #0
   12064:	bxeq	lr
   12068:	b	11fb4 <__gmon_start__@plt>
   1206c:	andeq	fp, r1, r0, lsr #31
   12070:	andeq	r0, r0, r0, asr r0
   12074:	ldr	r0, [pc, #24]	; 12094 <_start@@Base+0x80>
   12078:	ldr	r3, [pc, #24]	; 12098 <_start@@Base+0x84>
   1207c:	cmp	r3, r0
   12080:	bxeq	lr
   12084:	ldr	r3, [pc, #16]	; 1209c <_start@@Base+0x88>
   12088:	cmp	r3, #0
   1208c:	bxeq	lr
   12090:	bx	r3
   12094:	andeq	lr, r2, ip, rrx
   12098:	andeq	lr, r2, ip, rrx
   1209c:	andeq	r0, r0, r0
   120a0:	ldr	r0, [pc, #36]	; 120cc <_start@@Base+0xb8>
   120a4:	ldr	r1, [pc, #36]	; 120d0 <_start@@Base+0xbc>
   120a8:	sub	r1, r1, r0
   120ac:	asr	r1, r1, #2
   120b0:	add	r1, r1, r1, lsr #31
   120b4:	asrs	r1, r1, #1
   120b8:	bxeq	lr
   120bc:	ldr	r3, [pc, #16]	; 120d4 <_start@@Base+0xc0>
   120c0:	cmp	r3, #0
   120c4:	bxeq	lr
   120c8:	bx	r3
   120cc:	andeq	lr, r2, ip, rrx
   120d0:	andeq	lr, r2, ip, rrx
   120d4:	andeq	r0, r0, r0
   120d8:	push	{r4, lr}
   120dc:	ldr	r4, [pc, #24]	; 120fc <_start@@Base+0xe8>
   120e0:	ldrb	r3, [r4]
   120e4:	cmp	r3, #0
   120e8:	popne	{r4, pc}
   120ec:	bl	12074 <_start@@Base+0x60>
   120f0:	mov	r3, #1
   120f4:	strb	r3, [r4]
   120f8:	pop	{r4, pc}
   120fc:	andeq	lr, r2, ip, rrx
   12100:	b	120a0 <_start@@Base+0x8c>
   12104:	push	{fp}		; (str fp, [sp, #-4]!)
   12108:	add	fp, sp, #0
   1210c:	sub	sp, sp, #12
   12110:	mov	r3, r0
   12114:	strb	r3, [fp, #-5]
   12118:	ldrb	r3, [fp, #-5]
   1211c:	mov	r0, r3
   12120:	add	sp, fp, #0
   12124:	pop	{fp}		; (ldr fp, [sp], #4)
   12128:	bx	lr
   1212c:	str	fp, [sp, #-8]!
   12130:	str	lr, [sp, #4]
   12134:	add	fp, sp, #4
   12138:	sub	sp, sp, #8
   1213c:	str	r0, [fp, #-8]
   12140:	ldr	r3, [fp, #-8]
   12144:	ldrb	r3, [r3]
   12148:	mov	r0, r3
   1214c:	bl	12104 <_start@@Base+0xf0>
   12150:	mov	r3, r0
   12154:	mov	r0, r3
   12158:	sub	sp, fp, #4
   1215c:	ldr	fp, [sp]
   12160:	add	sp, sp, #4
   12164:	pop	{pc}		; (ldr pc, [sp], #4)
   12168:	push	{fp}		; (str fp, [sp, #-4]!)
   1216c:	add	fp, sp, #0
   12170:	sub	sp, sp, #12
   12174:	mov	r3, r0
   12178:	strh	r3, [fp, #-6]
   1217c:	ldrsh	r3, [fp, #-6]
   12180:	mov	r0, r3
   12184:	add	sp, fp, #0
   12188:	pop	{fp}		; (ldr fp, [sp], #4)
   1218c:	bx	lr
   12190:	push	{fp}		; (str fp, [sp, #-4]!)
   12194:	add	fp, sp, #0
   12198:	sub	sp, sp, #12
   1219c:	mov	r3, r0
   121a0:	strh	r3, [fp, #-6]
   121a4:	ldrsh	r3, [fp, #-6]
   121a8:	mov	r0, r3
   121ac:	add	sp, fp, #0
   121b0:	pop	{fp}		; (ldr fp, [sp], #4)
   121b4:	bx	lr
   121b8:	str	fp, [sp, #-8]!
   121bc:	str	lr, [sp, #4]
   121c0:	add	fp, sp, #4
   121c4:	sub	sp, sp, #8
   121c8:	str	r0, [fp, #-8]
   121cc:	ldr	r3, [fp, #-8]
   121d0:	ldrsh	r3, [r3]
   121d4:	mov	r0, r3
   121d8:	bl	12168 <_start@@Base+0x154>
   121dc:	mov	r3, r0
   121e0:	mov	r0, r3
   121e4:	sub	sp, fp, #4
   121e8:	ldr	fp, [sp]
   121ec:	add	sp, sp, #4
   121f0:	pop	{pc}		; (ldr pc, [sp], #4)
   121f4:	push	{fp}		; (str fp, [sp, #-4]!)
   121f8:	add	fp, sp, #0
   121fc:	sub	sp, sp, #20
   12200:	vstr	s0, [fp, #-16]
   12204:	ldr	r3, [fp, #-16]
   12208:	str	r3, [fp, #-8]
   1220c:	ldr	r3, [fp, #-8]
   12210:	str	r3, [fp, #-8]
   12214:	ldr	r3, [fp, #-8]
   12218:	vmov	s15, r3
   1221c:	vmov.f32	s0, s15
   12220:	add	sp, fp, #0
   12224:	pop	{fp}		; (ldr fp, [sp], #4)
   12228:	bx	lr
   1222c:	push	{fp}		; (str fp, [sp, #-4]!)
   12230:	add	fp, sp, #0
   12234:	sub	sp, sp, #20
   12238:	vstr	s0, [fp, #-16]
   1223c:	ldr	r3, [fp, #-16]
   12240:	str	r3, [fp, #-8]
   12244:	ldr	r3, [fp, #-8]
   12248:	str	r3, [fp, #-8]
   1224c:	ldr	r3, [fp, #-8]
   12250:	vmov	s15, r3
   12254:	vmov.f32	s0, s15
   12258:	add	sp, fp, #0
   1225c:	pop	{fp}		; (ldr fp, [sp], #4)
   12260:	bx	lr
   12264:	str	fp, [sp, #-8]!
   12268:	str	lr, [sp, #4]
   1226c:	add	fp, sp, #4
   12270:	sub	sp, sp, #8
   12274:	str	r0, [fp, #-8]
   12278:	ldr	r3, [fp, #-8]
   1227c:	vldr	s15, [r3]
   12280:	vmov.f32	s0, s15
   12284:	bl	121f4 <_start@@Base+0x1e0>
   12288:	vmov.f32	s15, s0
   1228c:	vmov.f32	s0, s15
   12290:	sub	sp, fp, #4
   12294:	ldr	fp, [sp]
   12298:	add	sp, sp, #4
   1229c:	pop	{pc}		; (ldr pc, [sp], #4)
   122a0:	push	{fp}		; (str fp, [sp, #-4]!)
   122a4:	add	fp, sp, #0
   122a8:	sub	sp, sp, #12
   122ac:	str	r0, [fp, #-8]
   122b0:	ldr	r3, [fp, #-8]
   122b4:	mov	r0, r3
   122b8:	add	sp, fp, #0
   122bc:	pop	{fp}		; (ldr fp, [sp], #4)
   122c0:	bx	lr
   122c4:	str	fp, [sp, #-8]!
   122c8:	str	lr, [sp, #4]
   122cc:	add	fp, sp, #4
   122d0:	sub	sp, sp, #8
   122d4:	str	r0, [fp, #-8]
   122d8:	ldr	r3, [fp, #-8]
   122dc:	ldr	r3, [r3]
   122e0:	mov	r0, r3
   122e4:	bl	122a0 <_start@@Base+0x28c>
   122e8:	mov	r3, r0
   122ec:	mov	r0, r3
   122f0:	sub	sp, fp, #4
   122f4:	ldr	fp, [sp]
   122f8:	add	sp, sp, #4
   122fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12300:	push	{fp}		; (str fp, [sp, #-4]!)
   12304:	add	fp, sp, #0
   12308:	sub	sp, sp, #12
   1230c:	str	r0, [fp, #-8]
   12310:	ldr	r3, [fp, #-8]
   12314:	mov	r0, r3
   12318:	add	sp, fp, #0
   1231c:	pop	{fp}		; (ldr fp, [sp], #4)
   12320:	bx	lr
   12324:	str	fp, [sp, #-8]!
   12328:	str	lr, [sp, #4]
   1232c:	add	fp, sp, #4
   12330:	sub	sp, sp, #8
   12334:	str	r0, [fp, #-8]
   12338:	ldr	r3, [fp, #-8]
   1233c:	ldr	r3, [r3]
   12340:	mov	r0, r3
   12344:	bl	12300 <_start@@Base+0x2ec>
   12348:	mov	r3, r0
   1234c:	mov	r0, r3
   12350:	sub	sp, fp, #4
   12354:	ldr	fp, [sp]
   12358:	add	sp, sp, #4
   1235c:	pop	{pc}		; (ldr pc, [sp], #4)
   12360:	push	{fp}		; (str fp, [sp, #-4]!)
   12364:	add	fp, sp, #0
   12368:	sub	sp, sp, #12
   1236c:	mov	r3, r0
   12370:	strh	r3, [fp, #-6]
   12374:	ldrh	r3, [fp, #-6]
   12378:	mov	r0, r3
   1237c:	add	sp, fp, #0
   12380:	pop	{fp}		; (ldr fp, [sp], #4)
   12384:	bx	lr
   12388:	str	fp, [sp, #-8]!
   1238c:	str	lr, [sp, #4]
   12390:	add	fp, sp, #4
   12394:	sub	sp, sp, #8
   12398:	str	r0, [fp, #-8]
   1239c:	ldr	r3, [fp, #-8]
   123a0:	ldrh	r3, [r3]
   123a4:	mov	r0, r3
   123a8:	bl	12360 <_start@@Base+0x34c>
   123ac:	mov	r3, r0
   123b0:	mov	r0, r3
   123b4:	sub	sp, fp, #4
   123b8:	ldr	fp, [sp]
   123bc:	add	sp, sp, #4
   123c0:	pop	{pc}		; (ldr pc, [sp], #4)
   123c4:	push	{fp}		; (str fp, [sp, #-4]!)
   123c8:	add	fp, sp, #0
   123cc:	sub	sp, sp, #12
   123d0:	mov	r3, r0
   123d4:	strb	r3, [fp, #-5]
   123d8:	ldrb	r3, [fp, #-5]
   123dc:	mov	r0, r3
   123e0:	add	sp, fp, #0
   123e4:	pop	{fp}		; (ldr fp, [sp], #4)
   123e8:	bx	lr
   123ec:	str	fp, [sp, #-8]!
   123f0:	str	lr, [sp, #4]
   123f4:	add	fp, sp, #4
   123f8:	sub	sp, sp, #8
   123fc:	str	r0, [fp, #-8]
   12400:	ldr	r3, [fp, #-8]
   12404:	ldrb	r3, [r3]
   12408:	mov	r0, r3
   1240c:	bl	123c4 <_start@@Base+0x3b0>
   12410:	mov	r3, r0
   12414:	mov	r0, r3
   12418:	sub	sp, fp, #4
   1241c:	ldr	fp, [sp]
   12420:	add	sp, sp, #4
   12424:	pop	{pc}		; (ldr pc, [sp], #4)
   12428:	push	{fp}		; (str fp, [sp, #-4]!)
   1242c:	add	fp, sp, #0
   12430:	sub	sp, sp, #12
   12434:	str	r0, [fp, #-8]
   12438:	ldr	r3, [fp, #-8]
   1243c:	mov	r0, r3
   12440:	add	sp, fp, #0
   12444:	pop	{fp}		; (ldr fp, [sp], #4)
   12448:	bx	lr
   1244c:	push	{fp}		; (str fp, [sp, #-4]!)
   12450:	add	fp, sp, #0
   12454:	sub	sp, sp, #12
   12458:	str	r0, [fp, #-8]
   1245c:	ldr	r3, [fp, #-8]
   12460:	mov	r0, r3
   12464:	add	sp, fp, #0
   12468:	pop	{fp}		; (ldr fp, [sp], #4)
   1246c:	bx	lr
   12470:	str	fp, [sp, #-8]!
   12474:	str	lr, [sp, #4]
   12478:	add	fp, sp, #4
   1247c:	sub	sp, sp, #8
   12480:	str	r0, [fp, #-8]
   12484:	ldr	r3, [fp, #-8]
   12488:	ldr	r3, [r3]
   1248c:	mov	r0, r3
   12490:	bl	12428 <_start@@Base+0x414>
   12494:	mov	r3, r0
   12498:	mov	r0, r3
   1249c:	sub	sp, fp, #4
   124a0:	ldr	fp, [sp]
   124a4:	add	sp, sp, #4
   124a8:	pop	{pc}		; (ldr pc, [sp], #4)
   124ac:	str	fp, [sp, #-8]!
   124b0:	str	lr, [sp, #4]
   124b4:	add	fp, sp, #4
   124b8:	sub	sp, sp, #8
   124bc:	str	r0, [fp, #-8]
   124c0:	ldr	r3, [fp, #-8]
   124c4:	cmp	r3, #0
   124c8:	beq	124e4 <_start@@Base+0x4d0>
   124cc:	ldr	r3, [fp, #-8]
   124d0:	sub	r3, r3, #4
   124d4:	mov	r0, r3
   124d8:	bl	122c4 <_start@@Base+0x2b0>
   124dc:	mov	r3, r0
   124e0:	b	124e8 <_start@@Base+0x4d4>
   124e4:	mov	r3, #0
   124e8:	mov	r0, r3
   124ec:	sub	sp, fp, #4
   124f0:	ldr	fp, [sp]
   124f4:	add	sp, sp, #4
   124f8:	pop	{pc}		; (ldr pc, [sp], #4)
   124fc:	str	fp, [sp, #-8]!
   12500:	str	lr, [sp, #4]
   12504:	add	fp, sp, #4
   12508:	sub	sp, sp, #8
   1250c:	str	r0, [fp, #-8]
   12510:	ldr	r3, [fp, #-8]
   12514:	cmp	r3, #0
   12518:	beq	12534 <_start@@Base+0x520>
   1251c:	ldr	r3, [fp, #-8]
   12520:	sub	r3, r3, #4
   12524:	mov	r0, r3
   12528:	bl	122c4 <_start@@Base+0x2b0>
   1252c:	mov	r3, r0
   12530:	b	12538 <_start@@Base+0x524>
   12534:	mov	r3, #0
   12538:	mov	r0, r3
   1253c:	sub	sp, fp, #4
   12540:	ldr	fp, [sp]
   12544:	add	sp, sp, #4
   12548:	pop	{pc}		; (ldr pc, [sp], #4)
   1254c:	str	fp, [sp, #-8]!
   12550:	str	lr, [sp, #4]
   12554:	add	fp, sp, #4
   12558:	sub	sp, sp, #8
   1255c:	str	r0, [fp, #-8]
   12560:	ldr	r0, [fp, #-8]
   12564:	bl	124ac <_start@@Base+0x498>
   12568:	mov	r3, r0
   1256c:	mov	r0, r3
   12570:	sub	sp, fp, #4
   12574:	ldr	fp, [sp]
   12578:	add	sp, sp, #4
   1257c:	pop	{pc}		; (ldr pc, [sp], #4)
   12580:	str	fp, [sp, #-8]!
   12584:	str	lr, [sp, #4]
   12588:	add	fp, sp, #4
   1258c:	sub	sp, sp, #8
   12590:	str	r0, [fp, #-8]
   12594:	str	r1, [fp, #-12]
   12598:	ldr	r0, [fp, #-8]
   1259c:	bl	124ac <_start@@Base+0x498>
   125a0:	mov	r2, r0
   125a4:	ldr	r3, [fp, #-12]
   125a8:	cmp	r3, r2
   125ac:	bcc	125d0 <_start@@Base+0x5bc>
   125b0:	ldr	r3, [pc, #68]	; 125fc <_start@@Base+0x5e8>
   125b4:	add	r3, pc, r3
   125b8:	movw	r2, #395	; 0x18b
   125bc:	ldr	r1, [pc, #60]	; 12600 <_start@@Base+0x5ec>
   125c0:	add	r1, pc, r1
   125c4:	ldr	r0, [pc, #56]	; 12604 <_start@@Base+0x5f0>
   125c8:	add	r0, pc, r0
   125cc:	bl	12008 <__assert_fail@plt>
   125d0:	ldr	r2, [fp, #-8]
   125d4:	ldr	r3, [fp, #-12]
   125d8:	add	r3, r2, r3
   125dc:	mov	r0, r3
   125e0:	bl	1212c <_start@@Base+0x118>
   125e4:	mov	r3, r0
   125e8:	mov	r0, r3
   125ec:	sub	sp, fp, #4
   125f0:	ldr	fp, [sp]
   125f4:	add	sp, sp, #4
   125f8:	pop	{pc}		; (ldr pc, [sp], #4)
   125fc:	strdeq	sl, [r0], -r8
   12600:	andeq	sl, r0, ip, ror #1
   12604:	andeq	sl, r0, r4, ror #2
   12608:	str	fp, [sp, #-8]!
   1260c:	str	lr, [sp, #4]
   12610:	add	fp, sp, #4
   12614:	sub	sp, sp, #16
   12618:	str	r0, [fp, #-16]
   1261c:	str	r1, [fp, #-20]	; 0xffffffec
   12620:	mov	r3, #0
   12624:	str	r3, [fp, #-12]
   12628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1262c:	cmp	r3, #0
   12630:	bne	1263c <_start@@Base+0x628>
   12634:	mov	r3, #1
   12638:	b	126a0 <_start@@Base+0x68c>
   1263c:	sub	r3, fp, #12
   12640:	mov	r2, #4
   12644:	ldr	r1, [fp, #-20]	; 0xffffffec
   12648:	mov	r0, r3
   1264c:	bl	11fe4 <strncpy@plt>
   12650:	ldr	r3, [fp, #-12]
   12654:	mov	r0, r3
   12658:	bl	1244c <_start@@Base+0x438>
   1265c:	mov	r3, r0
   12660:	str	r3, [fp, #-12]
   12664:	ldr	r3, [fp, #-16]
   12668:	add	r3, r3, #4
   1266c:	mov	r0, r3
   12670:	bl	12470 <_start@@Base+0x45c>
   12674:	str	r0, [fp, #-8]
   12678:	ldr	r3, [fp, #-12]
   1267c:	cmp	r3, #0
   12680:	beq	12694 <_start@@Base+0x680>
   12684:	ldr	r3, [fp, #-12]
   12688:	ldr	r2, [fp, #-8]
   1268c:	cmp	r2, r3
   12690:	bne	1269c <_start@@Base+0x688>
   12694:	mov	r3, #1
   12698:	b	126a0 <_start@@Base+0x68c>
   1269c:	mov	r3, #0
   126a0:	mov	r0, r3
   126a4:	sub	sp, fp, #4
   126a8:	ldr	fp, [sp]
   126ac:	add	sp, sp, #4
   126b0:	pop	{pc}		; (ldr pc, [sp], #4)
   126b4:	push	{fp}		; (str fp, [sp, #-4]!)
   126b8:	add	fp, sp, #0
   126bc:	sub	sp, sp, #12
   126c0:	mov	r3, r0
   126c4:	strb	r3, [fp, #-5]
   126c8:	ldrsb	r3, [fp, #-5]
   126cc:	mov	r0, r3
   126d0:	add	sp, fp, #0
   126d4:	pop	{fp}		; (ldr fp, [sp], #4)
   126d8:	bx	lr
   126dc:	str	fp, [sp, #-8]!
   126e0:	str	lr, [sp, #4]
   126e4:	add	fp, sp, #4
   126e8:	sub	sp, sp, #8
   126ec:	str	r0, [fp, #-8]
   126f0:	ldr	r3, [fp, #-8]
   126f4:	cmp	r3, #0
   126f8:	beq	12710 <_start@@Base+0x6fc>
   126fc:	ldr	r3, [fp, #-8]
   12700:	mov	r0, r3
   12704:	bl	12264 <_start@@Base+0x250>
   12708:	vmov.f32	s15, s0
   1270c:	b	12714 <_start@@Base+0x700>
   12710:	vldr	s15, [pc, #16]	; 12728 <_start@@Base+0x714>
   12714:	vmov.f32	s0, s15
   12718:	sub	sp, fp, #4
   1271c:	ldr	fp, [sp]
   12720:	add	sp, sp, #4
   12724:	pop	{pc}		; (ldr pc, [sp], #4)
   12728:	andeq	r0, r0, r0
   1272c:	str	fp, [sp, #-8]!
   12730:	str	lr, [sp, #4]
   12734:	add	fp, sp, #4
   12738:	sub	sp, sp, #8
   1273c:	str	r0, [fp, #-8]
   12740:	ldr	r3, [fp, #-8]
   12744:	cmp	r3, #0
   12748:	beq	12764 <_start@@Base+0x750>
   1274c:	ldr	r3, [fp, #-8]
   12750:	add	r3, r3, #4
   12754:	mov	r0, r3
   12758:	bl	12264 <_start@@Base+0x250>
   1275c:	vmov.f32	s15, s0
   12760:	b	12768 <_start@@Base+0x754>
   12764:	vldr	s15, [pc, #16]	; 1277c <_start@@Base+0x768>
   12768:	vmov.f32	s0, s15
   1276c:	sub	sp, fp, #4
   12770:	ldr	fp, [sp]
   12774:	add	sp, sp, #4
   12778:	pop	{pc}		; (ldr pc, [sp], #4)
   1277c:	andeq	r0, r0, r0
   12780:	str	fp, [sp, #-8]!
   12784:	str	lr, [sp, #4]
   12788:	add	fp, sp, #4
   1278c:	sub	sp, sp, #8
   12790:	str	r0, [fp, #-8]
   12794:	ldr	r3, [fp, #-8]
   12798:	cmp	r3, #0
   1279c:	beq	127b8 <_start@@Base+0x7a4>
   127a0:	ldr	r3, [fp, #-8]
   127a4:	add	r3, r3, #8
   127a8:	mov	r0, r3
   127ac:	bl	12264 <_start@@Base+0x250>
   127b0:	vmov.f32	s15, s0
   127b4:	b	127bc <_start@@Base+0x7a8>
   127b8:	vldr	s15, [pc, #16]	; 127d0 <_start@@Base+0x7bc>
   127bc:	vmov.f32	s0, s15
   127c0:	sub	sp, fp, #4
   127c4:	ldr	fp, [sp]
   127c8:	add	sp, sp, #4
   127cc:	pop	{pc}		; (ldr pc, [sp], #4)
   127d0:	andeq	r0, r0, r0
   127d4:	str	fp, [sp, #-8]!
   127d8:	str	lr, [sp, #4]
   127dc:	add	fp, sp, #4
   127e0:	sub	sp, sp, #16
   127e4:	str	r0, [fp, #-16]
   127e8:	mov	r3, #0
   127ec:	str	r3, [fp, #-8]
   127f0:	ldr	r3, [fp, #-16]
   127f4:	cmp	r3, #0
   127f8:	beq	1282c <_start@@Base+0x818>
   127fc:	ldr	r1, [fp, #-8]
   12800:	ldr	r0, [fp, #-16]
   12804:	bl	12608 <_start@@Base+0x5f4>
   12808:	mov	r3, r0
   1280c:	cmp	r3, #0
   12810:	beq	1282c <_start@@Base+0x818>
   12814:	ldr	r0, [fp, #-16]
   12818:	bl	122c4 <_start@@Base+0x2b0>
   1281c:	mov	r2, r0
   12820:	ldr	r3, [fp, #-16]
   12824:	add	r3, r3, r2
   12828:	b	12830 <_start@@Base+0x81c>
   1282c:	mov	r3, #0
   12830:	mov	r0, r3
   12834:	sub	sp, fp, #4
   12838:	ldr	fp, [sp]
   1283c:	add	sp, sp, #4
   12840:	pop	{pc}		; (ldr pc, [sp], #4)
   12844:	str	fp, [sp, #-8]!
   12848:	str	lr, [sp, #4]
   1284c:	add	fp, sp, #4
   12850:	sub	sp, sp, #16
   12854:	str	r0, [fp, #-16]
   12858:	mov	r3, #0
   1285c:	strh	r3, [fp, #-6]
   12860:	ldr	r3, [fp, #-16]
   12864:	cmp	r3, #0
   12868:	bne	1288c <_start@@Base+0x878>
   1286c:	ldr	r3, [pc, #184]	; 1292c <_start@@Base+0x918>
   12870:	add	r3, pc, r3
   12874:	mov	r2, #129	; 0x81
   12878:	ldr	r1, [pc, #176]	; 12930 <_start@@Base+0x91c>
   1287c:	add	r1, pc, r1
   12880:	ldr	r0, [pc, #172]	; 12934 <_start@@Base+0x920>
   12884:	add	r0, pc, r0
   12888:	bl	12008 <__assert_fail@plt>
   1288c:	mov	r3, #0
   12890:	strh	r3, [fp, #-8]
   12894:	ldr	r0, [fp, #-16]
   12898:	bl	12324 <_start@@Base+0x310>
   1289c:	mov	r3, r0
   128a0:	rsb	r3, r3, #0
   128a4:	ldr	r2, [fp, #-16]
   128a8:	add	r3, r2, r3
   128ac:	str	r3, [fp, #-12]
   128b0:	ldr	r0, [fp, #-12]
   128b4:	bl	12388 <_start@@Base+0x374>
   128b8:	mov	r3, r0
   128bc:	mov	r2, r3
   128c0:	ldrh	r3, [fp, #-8]
   128c4:	add	r3, r3, #3
   128c8:	lsl	r3, r3, #1
   128cc:	cmp	r2, r3
   128d0:	bcc	128f8 <_start@@Base+0x8e4>
   128d4:	ldrh	r3, [fp, #-8]
   128d8:	add	r3, r3, #2
   128dc:	lsl	r3, r3, #1
   128e0:	ldr	r2, [fp, #-12]
   128e4:	add	r3, r2, r3
   128e8:	mov	r0, r3
   128ec:	bl	12388 <_start@@Base+0x374>
   128f0:	mov	r3, r0
   128f4:	strh	r3, [fp, #-6]
   128f8:	ldrh	r3, [fp, #-6]
   128fc:	cmp	r3, #0
   12900:	beq	12914 <_start@@Base+0x900>
   12904:	ldrh	r3, [fp, #-6]
   12908:	ldr	r2, [fp, #-16]
   1290c:	add	r3, r2, r3
   12910:	b	12918 <_start@@Base+0x904>
   12914:	mov	r3, #0
   12918:	mov	r0, r3
   1291c:	sub	sp, fp, #4
   12920:	ldr	fp, [sp]
   12924:	add	sp, sp, #4
   12928:	pop	{pc}		; (ldr pc, [sp], #4)
   1292c:	andeq	sl, r0, r0, lsl #6
   12930:	andeq	r9, r0, r8, ror #29
   12934:	andeq	r9, r0, r4, asr pc
   12938:	str	fp, [sp, #-8]!
   1293c:	str	lr, [sp, #4]
   12940:	add	fp, sp, #4
   12944:	sub	sp, sp, #16
   12948:	str	r0, [fp, #-16]
   1294c:	mov	r3, #0
   12950:	strh	r3, [fp, #-6]
   12954:	ldr	r3, [fp, #-16]
   12958:	cmp	r3, #0
   1295c:	bne	12980 <_start@@Base+0x96c>
   12960:	ldr	r3, [pc, #196]	; 12a2c <_start@@Base+0xa18>
   12964:	add	r3, pc, r3
   12968:	mov	r2, #130	; 0x82
   1296c:	ldr	r1, [pc, #188]	; 12a30 <_start@@Base+0xa1c>
   12970:	add	r1, pc, r1
   12974:	ldr	r0, [pc, #184]	; 12a34 <_start@@Base+0xa20>
   12978:	add	r0, pc, r0
   1297c:	bl	12008 <__assert_fail@plt>
   12980:	mov	r3, #1
   12984:	strh	r3, [fp, #-8]
   12988:	ldr	r0, [fp, #-16]
   1298c:	bl	12324 <_start@@Base+0x310>
   12990:	mov	r3, r0
   12994:	rsb	r3, r3, #0
   12998:	ldr	r2, [fp, #-16]
   1299c:	add	r3, r2, r3
   129a0:	str	r3, [fp, #-12]
   129a4:	ldr	r0, [fp, #-12]
   129a8:	bl	12388 <_start@@Base+0x374>
   129ac:	mov	r3, r0
   129b0:	mov	r2, r3
   129b4:	ldrh	r3, [fp, #-8]
   129b8:	add	r3, r3, #3
   129bc:	lsl	r3, r3, #1
   129c0:	cmp	r2, r3
   129c4:	bcc	129ec <_start@@Base+0x9d8>
   129c8:	ldrh	r3, [fp, #-8]
   129cc:	add	r3, r3, #2
   129d0:	lsl	r3, r3, #1
   129d4:	ldr	r2, [fp, #-12]
   129d8:	add	r3, r2, r3
   129dc:	mov	r0, r3
   129e0:	bl	12388 <_start@@Base+0x374>
   129e4:	mov	r3, r0
   129e8:	strh	r3, [fp, #-6]
   129ec:	ldrh	r3, [fp, #-6]
   129f0:	cmp	r3, #0
   129f4:	beq	12a14 <_start@@Base+0xa00>
   129f8:	ldrh	r3, [fp, #-6]
   129fc:	ldr	r2, [fp, #-16]
   12a00:	add	r3, r2, r3
   12a04:	mov	r0, r3
   12a08:	bl	121b8 <_start@@Base+0x1a4>
   12a0c:	mov	r3, r0
   12a10:	b	12a18 <_start@@Base+0xa04>
   12a14:	mov	r3, #150	; 0x96
   12a18:	mov	r0, r3
   12a1c:	sub	sp, fp, #4
   12a20:	ldr	fp, [sp]
   12a24:	add	sp, sp, #4
   12a28:	pop	{pc}		; (ldr pc, [sp], #4)
   12a2c:	andeq	sl, r0, r8, lsl #3
   12a30:	strdeq	r9, [r0], -r4
   12a34:	andeq	r9, r0, r0, ror #28
   12a38:	str	fp, [sp, #-8]!
   12a3c:	str	lr, [sp, #4]
   12a40:	add	fp, sp, #4
   12a44:	sub	sp, sp, #16
   12a48:	str	r0, [fp, #-16]
   12a4c:	mov	r3, #0
   12a50:	strh	r3, [fp, #-6]
   12a54:	ldr	r3, [fp, #-16]
   12a58:	cmp	r3, #0
   12a5c:	bne	12a80 <_start@@Base+0xa6c>
   12a60:	ldr	r3, [pc, #172]	; 12b14 <_start@@Base+0xb00>
   12a64:	add	r3, pc, r3
   12a68:	mov	r2, #130	; 0x82
   12a6c:	ldr	r1, [pc, #164]	; 12b18 <_start@@Base+0xb04>
   12a70:	add	r1, pc, r1
   12a74:	ldr	r0, [pc, #160]	; 12b1c <_start@@Base+0xb08>
   12a78:	add	r0, pc, r0
   12a7c:	bl	12008 <__assert_fail@plt>
   12a80:	mov	r3, #1
   12a84:	strh	r3, [fp, #-8]
   12a88:	ldr	r0, [fp, #-16]
   12a8c:	bl	12324 <_start@@Base+0x310>
   12a90:	mov	r3, r0
   12a94:	rsb	r3, r3, #0
   12a98:	ldr	r2, [fp, #-16]
   12a9c:	add	r3, r2, r3
   12aa0:	str	r3, [fp, #-12]
   12aa4:	ldr	r0, [fp, #-12]
   12aa8:	bl	12388 <_start@@Base+0x374>
   12aac:	mov	r3, r0
   12ab0:	mov	r2, r3
   12ab4:	ldrh	r3, [fp, #-8]
   12ab8:	add	r3, r3, #3
   12abc:	lsl	r3, r3, #1
   12ac0:	cmp	r2, r3
   12ac4:	bcc	12aec <_start@@Base+0xad8>
   12ac8:	ldrh	r3, [fp, #-8]
   12acc:	add	r3, r3, #2
   12ad0:	lsl	r3, r3, #1
   12ad4:	ldr	r2, [fp, #-12]
   12ad8:	add	r3, r2, r3
   12adc:	mov	r0, r3
   12ae0:	bl	12388 <_start@@Base+0x374>
   12ae4:	mov	r3, r0
   12ae8:	strh	r3, [fp, #-6]
   12aec:	ldrh	r3, [fp, #-6]
   12af0:	cmp	r3, #0
   12af4:	movne	r3, #1
   12af8:	moveq	r3, #0
   12afc:	uxtb	r3, r3
   12b00:	mov	r0, r3
   12b04:	sub	sp, fp, #4
   12b08:	ldr	fp, [sp]
   12b0c:	add	sp, sp, #4
   12b10:	pop	{pc}		; (ldr pc, [sp], #4)
   12b14:	andeq	sl, r0, r4, ror #1
   12b18:	strdeq	r9, [r0], -r4
   12b1c:	andeq	r9, r0, r0, ror #26
   12b20:	str	fp, [sp, #-8]!
   12b24:	str	lr, [sp, #4]
   12b28:	add	fp, sp, #4
   12b2c:	sub	sp, sp, #16
   12b30:	str	r0, [fp, #-16]
   12b34:	mov	r3, #0
   12b38:	strh	r3, [fp, #-6]
   12b3c:	ldr	r3, [fp, #-16]
   12b40:	cmp	r3, #0
   12b44:	bne	12b68 <_start@@Base+0xb54>
   12b48:	ldr	r3, [pc, #196]	; 12c14 <_start@@Base+0xc00>
   12b4c:	add	r3, pc, r3
   12b50:	mov	r2, #131	; 0x83
   12b54:	ldr	r1, [pc, #188]	; 12c18 <_start@@Base+0xc04>
   12b58:	add	r1, pc, r1
   12b5c:	ldr	r0, [pc, #184]	; 12c1c <_start@@Base+0xc08>
   12b60:	add	r0, pc, r0
   12b64:	bl	12008 <__assert_fail@plt>
   12b68:	mov	r3, #2
   12b6c:	strh	r3, [fp, #-8]
   12b70:	ldr	r0, [fp, #-16]
   12b74:	bl	12324 <_start@@Base+0x310>
   12b78:	mov	r3, r0
   12b7c:	rsb	r3, r3, #0
   12b80:	ldr	r2, [fp, #-16]
   12b84:	add	r3, r2, r3
   12b88:	str	r3, [fp, #-12]
   12b8c:	ldr	r0, [fp, #-12]
   12b90:	bl	12388 <_start@@Base+0x374>
   12b94:	mov	r3, r0
   12b98:	mov	r2, r3
   12b9c:	ldrh	r3, [fp, #-8]
   12ba0:	add	r3, r3, #3
   12ba4:	lsl	r3, r3, #1
   12ba8:	cmp	r2, r3
   12bac:	bcc	12bd4 <_start@@Base+0xbc0>
   12bb0:	ldrh	r3, [fp, #-8]
   12bb4:	add	r3, r3, #2
   12bb8:	lsl	r3, r3, #1
   12bbc:	ldr	r2, [fp, #-12]
   12bc0:	add	r3, r2, r3
   12bc4:	mov	r0, r3
   12bc8:	bl	12388 <_start@@Base+0x374>
   12bcc:	mov	r3, r0
   12bd0:	strh	r3, [fp, #-6]
   12bd4:	ldrh	r3, [fp, #-6]
   12bd8:	cmp	r3, #0
   12bdc:	beq	12bfc <_start@@Base+0xbe8>
   12be0:	ldrh	r3, [fp, #-6]
   12be4:	ldr	r2, [fp, #-16]
   12be8:	add	r3, r2, r3
   12bec:	mov	r0, r3
   12bf0:	bl	121b8 <_start@@Base+0x1a4>
   12bf4:	mov	r3, r0
   12bf8:	b	12c00 <_start@@Base+0xbec>
   12bfc:	mov	r3, #100	; 0x64
   12c00:	mov	r0, r3
   12c04:	sub	sp, fp, #4
   12c08:	ldr	fp, [sp]
   12c0c:	add	sp, sp, #4
   12c10:	pop	{pc}		; (ldr pc, [sp], #4)
   12c14:	andeq	r9, r0, r4, lsl #31
   12c18:	andeq	r9, r0, ip, lsl #24
   12c1c:	andeq	r9, r0, r8, ror ip
   12c20:	str	fp, [sp, #-8]!
   12c24:	str	lr, [sp, #4]
   12c28:	add	fp, sp, #4
   12c2c:	sub	sp, sp, #16
   12c30:	str	r0, [fp, #-16]
   12c34:	mov	r3, #0
   12c38:	strh	r3, [fp, #-6]
   12c3c:	ldr	r3, [fp, #-16]
   12c40:	cmp	r3, #0
   12c44:	bne	12c68 <_start@@Base+0xc54>
   12c48:	ldr	r3, [pc, #172]	; 12cfc <_start@@Base+0xce8>
   12c4c:	add	r3, pc, r3
   12c50:	mov	r2, #131	; 0x83
   12c54:	ldr	r1, [pc, #164]	; 12d00 <_start@@Base+0xcec>
   12c58:	add	r1, pc, r1
   12c5c:	ldr	r0, [pc, #160]	; 12d04 <_start@@Base+0xcf0>
   12c60:	add	r0, pc, r0
   12c64:	bl	12008 <__assert_fail@plt>
   12c68:	mov	r3, #2
   12c6c:	strh	r3, [fp, #-8]
   12c70:	ldr	r0, [fp, #-16]
   12c74:	bl	12324 <_start@@Base+0x310>
   12c78:	mov	r3, r0
   12c7c:	rsb	r3, r3, #0
   12c80:	ldr	r2, [fp, #-16]
   12c84:	add	r3, r2, r3
   12c88:	str	r3, [fp, #-12]
   12c8c:	ldr	r0, [fp, #-12]
   12c90:	bl	12388 <_start@@Base+0x374>
   12c94:	mov	r3, r0
   12c98:	mov	r2, r3
   12c9c:	ldrh	r3, [fp, #-8]
   12ca0:	add	r3, r3, #3
   12ca4:	lsl	r3, r3, #1
   12ca8:	cmp	r2, r3
   12cac:	bcc	12cd4 <_start@@Base+0xcc0>
   12cb0:	ldrh	r3, [fp, #-8]
   12cb4:	add	r3, r3, #2
   12cb8:	lsl	r3, r3, #1
   12cbc:	ldr	r2, [fp, #-12]
   12cc0:	add	r3, r2, r3
   12cc4:	mov	r0, r3
   12cc8:	bl	12388 <_start@@Base+0x374>
   12ccc:	mov	r3, r0
   12cd0:	strh	r3, [fp, #-6]
   12cd4:	ldrh	r3, [fp, #-6]
   12cd8:	cmp	r3, #0
   12cdc:	movne	r3, #1
   12ce0:	moveq	r3, #0
   12ce4:	uxtb	r3, r3
   12ce8:	mov	r0, r3
   12cec:	sub	sp, fp, #4
   12cf0:	ldr	fp, [sp]
   12cf4:	add	sp, sp, #4
   12cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cfc:	ldrdeq	r9, [r0], -r8
   12d00:	andeq	r9, r0, ip, lsl #22
   12d04:	andeq	r9, r0, r8, ror fp
   12d08:	str	fp, [sp, #-8]!
   12d0c:	str	lr, [sp, #4]
   12d10:	add	fp, sp, #4
   12d14:	sub	sp, sp, #24
   12d18:	str	r0, [fp, #-24]	; 0xffffffe8
   12d1c:	mov	r3, #0
   12d20:	strh	r3, [fp, #-6]
   12d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d28:	cmp	r3, #0
   12d2c:	bne	12d50 <_start@@Base+0xd3c>
   12d30:	ldr	r3, [pc, #212]	; 12e0c <_start@@Base+0xdf8>
   12d34:	add	r3, pc, r3
   12d38:	mov	r2, #132	; 0x84
   12d3c:	ldr	r1, [pc, #204]	; 12e10 <_start@@Base+0xdfc>
   12d40:	add	r1, pc, r1
   12d44:	ldr	r0, [pc, #200]	; 12e14 <_start@@Base+0xe00>
   12d48:	add	r0, pc, r0
   12d4c:	bl	12008 <__assert_fail@plt>
   12d50:	mov	r3, #3
   12d54:	strh	r3, [fp, #-8]
   12d58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d5c:	bl	12324 <_start@@Base+0x310>
   12d60:	mov	r3, r0
   12d64:	rsb	r3, r3, #0
   12d68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12d6c:	add	r3, r2, r3
   12d70:	str	r3, [fp, #-12]
   12d74:	ldr	r0, [fp, #-12]
   12d78:	bl	12388 <_start@@Base+0x374>
   12d7c:	mov	r3, r0
   12d80:	mov	r2, r3
   12d84:	ldrh	r3, [fp, #-8]
   12d88:	add	r3, r3, #3
   12d8c:	lsl	r3, r3, #1
   12d90:	cmp	r2, r3
   12d94:	bcc	12dbc <_start@@Base+0xda8>
   12d98:	ldrh	r3, [fp, #-8]
   12d9c:	add	r3, r3, #2
   12da0:	lsl	r3, r3, #1
   12da4:	ldr	r2, [fp, #-12]
   12da8:	add	r3, r2, r3
   12dac:	mov	r0, r3
   12db0:	bl	12388 <_start@@Base+0x374>
   12db4:	mov	r3, r0
   12db8:	strh	r3, [fp, #-6]
   12dbc:	ldrh	r3, [fp, #-6]
   12dc0:	cmp	r3, #0
   12dc4:	beq	12df4 <_start@@Base+0xde0>
   12dc8:	ldrh	r3, [fp, #-6]
   12dcc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12dd0:	add	r3, r2, r3
   12dd4:	str	r3, [fp, #-16]
   12dd8:	ldr	r0, [fp, #-16]
   12ddc:	bl	122c4 <_start@@Base+0x2b0>
   12de0:	mov	r3, r0
   12de4:	add	r3, r3, #4
   12de8:	ldr	r2, [fp, #-16]
   12dec:	add	r3, r2, r3
   12df0:	b	12df8 <_start@@Base+0xde4>
   12df4:	mov	r3, #0
   12df8:	mov	r0, r3
   12dfc:	sub	sp, fp, #4
   12e00:	ldr	fp, [sp]
   12e04:	add	sp, sp, #4
   12e08:	pop	{pc}		; (ldr pc, [sp], #4)
   12e0c:	ldrdeq	r9, [r0], -r4
   12e10:	andeq	r9, r0, r4, lsr #20
   12e14:	muleq	r0, r0, sl
   12e18:	str	fp, [sp, #-8]!
   12e1c:	str	lr, [sp, #4]
   12e20:	add	fp, sp, #4
   12e24:	sub	sp, sp, #24
   12e28:	str	r0, [fp, #-24]	; 0xffffffe8
   12e2c:	mov	r3, #0
   12e30:	strh	r3, [fp, #-6]
   12e34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e38:	cmp	r3, #0
   12e3c:	bne	12e60 <_start@@Base+0xe4c>
   12e40:	ldr	r3, [pc, #212]	; 12f1c <_start@@Base+0xf08>
   12e44:	add	r3, pc, r3
   12e48:	mov	r2, #135	; 0x87
   12e4c:	ldr	r1, [pc, #204]	; 12f20 <_start@@Base+0xf0c>
   12e50:	add	r1, pc, r1
   12e54:	ldr	r0, [pc, #200]	; 12f24 <_start@@Base+0xf10>
   12e58:	add	r0, pc, r0
   12e5c:	bl	12008 <__assert_fail@plt>
   12e60:	mov	r3, #5
   12e64:	strh	r3, [fp, #-8]
   12e68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e6c:	bl	12324 <_start@@Base+0x310>
   12e70:	mov	r3, r0
   12e74:	rsb	r3, r3, #0
   12e78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12e7c:	add	r3, r2, r3
   12e80:	str	r3, [fp, #-12]
   12e84:	ldr	r0, [fp, #-12]
   12e88:	bl	12388 <_start@@Base+0x374>
   12e8c:	mov	r3, r0
   12e90:	mov	r2, r3
   12e94:	ldrh	r3, [fp, #-8]
   12e98:	add	r3, r3, #3
   12e9c:	lsl	r3, r3, #1
   12ea0:	cmp	r2, r3
   12ea4:	bcc	12ecc <_start@@Base+0xeb8>
   12ea8:	ldrh	r3, [fp, #-8]
   12eac:	add	r3, r3, #2
   12eb0:	lsl	r3, r3, #1
   12eb4:	ldr	r2, [fp, #-12]
   12eb8:	add	r3, r2, r3
   12ebc:	mov	r0, r3
   12ec0:	bl	12388 <_start@@Base+0x374>
   12ec4:	mov	r3, r0
   12ec8:	strh	r3, [fp, #-6]
   12ecc:	ldrh	r3, [fp, #-6]
   12ed0:	cmp	r3, #0
   12ed4:	beq	12f04 <_start@@Base+0xef0>
   12ed8:	ldrh	r3, [fp, #-6]
   12edc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ee0:	add	r3, r2, r3
   12ee4:	str	r3, [fp, #-16]
   12ee8:	ldr	r0, [fp, #-16]
   12eec:	bl	122c4 <_start@@Base+0x2b0>
   12ef0:	mov	r3, r0
   12ef4:	add	r3, r3, #4
   12ef8:	ldr	r2, [fp, #-16]
   12efc:	add	r3, r2, r3
   12f00:	b	12f08 <_start@@Base+0xef4>
   12f04:	mov	r3, #0
   12f08:	mov	r0, r3
   12f0c:	sub	sp, fp, #4
   12f10:	ldr	fp, [sp]
   12f14:	add	sp, sp, #4
   12f18:	pop	{pc}		; (ldr pc, [sp], #4)
   12f1c:	andeq	r9, r0, r8, asr #26
   12f20:	andeq	r9, r0, r4, lsl r9
   12f24:	andeq	r9, r0, r0, lsl #19
   12f28:	str	fp, [sp, #-8]!
   12f2c:	str	lr, [sp, #4]
   12f30:	add	fp, sp, #4
   12f34:	sub	sp, sp, #24
   12f38:	str	r0, [fp, #-24]	; 0xffffffe8
   12f3c:	mov	r3, #0
   12f40:	strh	r3, [fp, #-6]
   12f44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f48:	cmp	r3, #0
   12f4c:	bne	12f70 <_start@@Base+0xf5c>
   12f50:	ldr	r3, [pc, #212]	; 1302c <_start@@Base+0x1018>
   12f54:	add	r3, pc, r3
   12f58:	mov	r2, #137	; 0x89
   12f5c:	ldr	r1, [pc, #204]	; 13030 <_start@@Base+0x101c>
   12f60:	add	r1, pc, r1
   12f64:	ldr	r0, [pc, #200]	; 13034 <_start@@Base+0x1020>
   12f68:	add	r0, pc, r0
   12f6c:	bl	12008 <__assert_fail@plt>
   12f70:	mov	r3, #7
   12f74:	strh	r3, [fp, #-8]
   12f78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12f7c:	bl	12324 <_start@@Base+0x310>
   12f80:	mov	r3, r0
   12f84:	rsb	r3, r3, #0
   12f88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12f8c:	add	r3, r2, r3
   12f90:	str	r3, [fp, #-12]
   12f94:	ldr	r0, [fp, #-12]
   12f98:	bl	12388 <_start@@Base+0x374>
   12f9c:	mov	r3, r0
   12fa0:	mov	r2, r3
   12fa4:	ldrh	r3, [fp, #-8]
   12fa8:	add	r3, r3, #3
   12fac:	lsl	r3, r3, #1
   12fb0:	cmp	r2, r3
   12fb4:	bcc	12fdc <_start@@Base+0xfc8>
   12fb8:	ldrh	r3, [fp, #-8]
   12fbc:	add	r3, r3, #2
   12fc0:	lsl	r3, r3, #1
   12fc4:	ldr	r2, [fp, #-12]
   12fc8:	add	r3, r2, r3
   12fcc:	mov	r0, r3
   12fd0:	bl	12388 <_start@@Base+0x374>
   12fd4:	mov	r3, r0
   12fd8:	strh	r3, [fp, #-6]
   12fdc:	ldrh	r3, [fp, #-6]
   12fe0:	cmp	r3, #0
   12fe4:	beq	13014 <_start@@Base+0x1000>
   12fe8:	ldrh	r3, [fp, #-6]
   12fec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ff0:	add	r3, r2, r3
   12ff4:	str	r3, [fp, #-16]
   12ff8:	ldr	r0, [fp, #-16]
   12ffc:	bl	122c4 <_start@@Base+0x2b0>
   13000:	mov	r3, r0
   13004:	add	r3, r3, #4
   13008:	ldr	r2, [fp, #-16]
   1300c:	add	r3, r2, r3
   13010:	b	13018 <_start@@Base+0x1004>
   13014:	mov	r3, #0
   13018:	mov	r0, r3
   1301c:	sub	sp, fp, #4
   13020:	ldr	fp, [sp]
   13024:	add	sp, sp, #4
   13028:	pop	{pc}		; (ldr pc, [sp], #4)
   1302c:	andeq	r9, r0, r4, ror ip
   13030:	andeq	r9, r0, r4, lsl #16
   13034:	andeq	r9, r0, r0, ror r8
   13038:	str	fp, [sp, #-8]!
   1303c:	str	lr, [sp, #4]
   13040:	add	fp, sp, #4
   13044:	sub	sp, sp, #16
   13048:	str	r0, [fp, #-16]
   1304c:	mov	r3, #0
   13050:	strh	r3, [fp, #-6]
   13054:	ldr	r3, [fp, #-16]
   13058:	cmp	r3, #0
   1305c:	bne	13080 <_start@@Base+0x106c>
   13060:	ldr	r3, [pc, #196]	; 1312c <_start@@Base+0x1118>
   13064:	add	r3, pc, r3
   13068:	mov	r2, #138	; 0x8a
   1306c:	ldr	r1, [pc, #188]	; 13130 <_start@@Base+0x111c>
   13070:	add	r1, pc, r1
   13074:	ldr	r0, [pc, #184]	; 13134 <_start@@Base+0x1120>
   13078:	add	r0, pc, r0
   1307c:	bl	12008 <__assert_fail@plt>
   13080:	mov	r3, #8
   13084:	strh	r3, [fp, #-8]
   13088:	ldr	r0, [fp, #-16]
   1308c:	bl	12324 <_start@@Base+0x310>
   13090:	mov	r3, r0
   13094:	rsb	r3, r3, #0
   13098:	ldr	r2, [fp, #-16]
   1309c:	add	r3, r2, r3
   130a0:	str	r3, [fp, #-12]
   130a4:	ldr	r0, [fp, #-12]
   130a8:	bl	12388 <_start@@Base+0x374>
   130ac:	mov	r3, r0
   130b0:	mov	r2, r3
   130b4:	ldrh	r3, [fp, #-8]
   130b8:	add	r3, r3, #3
   130bc:	lsl	r3, r3, #1
   130c0:	cmp	r2, r3
   130c4:	bcc	130ec <_start@@Base+0x10d8>
   130c8:	ldrh	r3, [fp, #-8]
   130cc:	add	r3, r3, #2
   130d0:	lsl	r3, r3, #1
   130d4:	ldr	r2, [fp, #-12]
   130d8:	add	r3, r2, r3
   130dc:	mov	r0, r3
   130e0:	bl	12388 <_start@@Base+0x374>
   130e4:	mov	r3, r0
   130e8:	strh	r3, [fp, #-6]
   130ec:	ldrh	r3, [fp, #-6]
   130f0:	cmp	r3, #0
   130f4:	beq	13114 <_start@@Base+0x1100>
   130f8:	ldrh	r3, [fp, #-6]
   130fc:	ldr	r2, [fp, #-16]
   13100:	add	r3, r2, r3
   13104:	mov	r0, r3
   13108:	bl	123ec <_start@@Base+0x3d8>
   1310c:	mov	r3, r0
   13110:	b	13118 <_start@@Base+0x1104>
   13114:	mov	r3, #0
   13118:	mov	r0, r3
   1311c:	sub	sp, fp, #4
   13120:	ldr	fp, [sp]
   13124:	add	sp, sp, #4
   13128:	pop	{pc}		; (ldr pc, [sp], #4)
   1312c:	andeq	r9, r0, r0, lsr #23
   13130:	strdeq	r9, [r0], -r4
   13134:	andeq	r9, r0, r0, ror #14
   13138:	str	fp, [sp, #-8]!
   1313c:	str	lr, [sp, #4]
   13140:	add	fp, sp, #4
   13144:	sub	sp, sp, #24
   13148:	str	r0, [fp, #-24]	; 0xffffffe8
   1314c:	mov	r3, #0
   13150:	strh	r3, [fp, #-6]
   13154:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13158:	cmp	r3, #0
   1315c:	bne	13180 <_start@@Base+0x116c>
   13160:	ldr	r3, [pc, #208]	; 13238 <_start@@Base+0x1224>
   13164:	add	r3, pc, r3
   13168:	mov	r2, #138	; 0x8a
   1316c:	ldr	r1, [pc, #200]	; 1323c <_start@@Base+0x1228>
   13170:	add	r1, pc, r1
   13174:	ldr	r0, [pc, #196]	; 13240 <_start@@Base+0x122c>
   13178:	add	r0, pc, r0
   1317c:	bl	12008 <__assert_fail@plt>
   13180:	mov	r3, #9
   13184:	strh	r3, [fp, #-8]
   13188:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1318c:	bl	12324 <_start@@Base+0x310>
   13190:	mov	r3, r0
   13194:	rsb	r3, r3, #0
   13198:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1319c:	add	r3, r2, r3
   131a0:	str	r3, [fp, #-12]
   131a4:	ldr	r0, [fp, #-12]
   131a8:	bl	12388 <_start@@Base+0x374>
   131ac:	mov	r3, r0
   131b0:	mov	r2, r3
   131b4:	ldrh	r3, [fp, #-8]
   131b8:	add	r3, r3, #3
   131bc:	lsl	r3, r3, #1
   131c0:	cmp	r2, r3
   131c4:	bcc	131ec <_start@@Base+0x11d8>
   131c8:	ldrh	r3, [fp, #-8]
   131cc:	add	r3, r3, #2
   131d0:	lsl	r3, r3, #1
   131d4:	ldr	r2, [fp, #-12]
   131d8:	add	r3, r2, r3
   131dc:	mov	r0, r3
   131e0:	bl	12388 <_start@@Base+0x374>
   131e4:	mov	r3, r0
   131e8:	strh	r3, [fp, #-6]
   131ec:	ldrh	r3, [fp, #-6]
   131f0:	cmp	r3, #0
   131f4:	beq	13220 <_start@@Base+0x120c>
   131f8:	ldrh	r3, [fp, #-6]
   131fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13200:	add	r3, r2, r3
   13204:	str	r3, [fp, #-16]
   13208:	ldr	r0, [fp, #-16]
   1320c:	bl	122c4 <_start@@Base+0x2b0>
   13210:	mov	r2, r0
   13214:	ldr	r3, [fp, #-16]
   13218:	add	r3, r3, r2
   1321c:	b	13224 <_start@@Base+0x1210>
   13220:	mov	r3, #0
   13224:	mov	r0, r3
   13228:	sub	sp, fp, #4
   1322c:	ldr	fp, [sp]
   13230:	add	sp, sp, #4
   13234:	pop	{pc}		; (ldr pc, [sp], #4)
   13238:	andeq	r9, r0, r4, asr #21
   1323c:	strdeq	r9, [r0], -r4
   13240:	andeq	r9, r0, r0, ror #12
   13244:	str	fp, [sp, #-8]!
   13248:	str	lr, [sp, #4]
   1324c:	add	fp, sp, #4
   13250:	sub	sp, sp, #8
   13254:	str	r0, [fp, #-8]
   13258:	ldr	r3, [fp, #-8]
   1325c:	cmp	r3, #0
   13260:	beq	1327c <_start@@Base+0x1268>
   13264:	ldr	r3, [fp, #-8]
   13268:	sub	r3, r3, #4
   1326c:	mov	r0, r3
   13270:	bl	122c4 <_start@@Base+0x2b0>
   13274:	mov	r3, r0
   13278:	b	13280 <_start@@Base+0x126c>
   1327c:	mov	r3, #0
   13280:	mov	r0, r3
   13284:	sub	sp, fp, #4
   13288:	ldr	fp, [sp]
   1328c:	add	sp, sp, #4
   13290:	pop	{pc}		; (ldr pc, [sp], #4)
   13294:	str	fp, [sp, #-8]!
   13298:	str	lr, [sp, #4]
   1329c:	add	fp, sp, #4
   132a0:	sub	sp, sp, #16
   132a4:	str	r0, [fp, #-16]
   132a8:	str	r1, [fp, #-20]	; 0xffffffec
   132ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   132b0:	lsl	r3, r3, #2
   132b4:	ldr	r2, [fp, #-16]
   132b8:	add	r3, r2, r3
   132bc:	str	r3, [fp, #-8]
   132c0:	ldr	r0, [fp, #-16]
   132c4:	bl	124ac <_start@@Base+0x498>
   132c8:	mov	r2, r0
   132cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   132d0:	cmp	r3, r2
   132d4:	bcc	132f8 <_start@@Base+0x12e4>
   132d8:	ldr	r3, [pc, #64]	; 13320 <_start@@Base+0x130c>
   132dc:	add	r3, pc, r3
   132e0:	mov	r2, #145	; 0x91
   132e4:	ldr	r1, [pc, #56]	; 13324 <_start@@Base+0x1310>
   132e8:	add	r1, pc, r1
   132ec:	ldr	r0, [pc, #52]	; 13328 <_start@@Base+0x1314>
   132f0:	add	r0, pc, r0
   132f4:	bl	12008 <__assert_fail@plt>
   132f8:	ldr	r0, [fp, #-8]
   132fc:	bl	122c4 <_start@@Base+0x2b0>
   13300:	mov	r2, r0
   13304:	ldr	r3, [fp, #-8]
   13308:	add	r3, r3, r2
   1330c:	mov	r0, r3
   13310:	sub	sp, fp, #4
   13314:	ldr	fp, [sp]
   13318:	add	sp, sp, #4
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)
   13320:	andeq	r9, r0, ip, lsl #18
   13324:	andeq	r9, r0, ip, ror r4
   13328:	andeq	r9, r0, ip, lsr r4
   1332c:	str	fp, [sp, #-8]!
   13330:	str	lr, [sp, #4]
   13334:	add	fp, sp, #4
   13338:	sub	sp, sp, #24
   1333c:	str	r0, [fp, #-24]	; 0xffffffe8
   13340:	mov	r3, #0
   13344:	strh	r3, [fp, #-6]
   13348:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1334c:	cmp	r3, #0
   13350:	bne	13374 <_start@@Base+0x1360>
   13354:	ldr	r3, [pc, #212]	; 13430 <_start@@Base+0x141c>
   13358:	add	r3, pc, r3
   1335c:	mov	r2, #148	; 0x94
   13360:	ldr	r1, [pc, #204]	; 13434 <_start@@Base+0x1420>
   13364:	add	r1, pc, r1
   13368:	ldr	r0, [pc, #200]	; 13438 <_start@@Base+0x1424>
   1336c:	add	r0, pc, r0
   13370:	bl	12008 <__assert_fail@plt>
   13374:	mov	r3, #0
   13378:	strh	r3, [fp, #-8]
   1337c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13380:	bl	12324 <_start@@Base+0x310>
   13384:	mov	r3, r0
   13388:	rsb	r3, r3, #0
   1338c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13390:	add	r3, r2, r3
   13394:	str	r3, [fp, #-12]
   13398:	ldr	r0, [fp, #-12]
   1339c:	bl	12388 <_start@@Base+0x374>
   133a0:	mov	r3, r0
   133a4:	mov	r2, r3
   133a8:	ldrh	r3, [fp, #-8]
   133ac:	add	r3, r3, #3
   133b0:	lsl	r3, r3, #1
   133b4:	cmp	r2, r3
   133b8:	bcc	133e0 <_start@@Base+0x13cc>
   133bc:	ldrh	r3, [fp, #-8]
   133c0:	add	r3, r3, #2
   133c4:	lsl	r3, r3, #1
   133c8:	ldr	r2, [fp, #-12]
   133cc:	add	r3, r2, r3
   133d0:	mov	r0, r3
   133d4:	bl	12388 <_start@@Base+0x374>
   133d8:	mov	r3, r0
   133dc:	strh	r3, [fp, #-6]
   133e0:	ldrh	r3, [fp, #-6]
   133e4:	cmp	r3, #0
   133e8:	beq	13418 <_start@@Base+0x1404>
   133ec:	ldrh	r3, [fp, #-6]
   133f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   133f4:	add	r3, r2, r3
   133f8:	str	r3, [fp, #-16]
   133fc:	ldr	r0, [fp, #-16]
   13400:	bl	122c4 <_start@@Base+0x2b0>
   13404:	mov	r3, r0
   13408:	add	r3, r3, #4
   1340c:	ldr	r2, [fp, #-16]
   13410:	add	r3, r2, r3
   13414:	b	1341c <_start@@Base+0x1408>
   13418:	mov	r3, #0
   1341c:	mov	r0, r3
   13420:	sub	sp, fp, #4
   13424:	ldr	fp, [sp]
   13428:	add	sp, sp, #4
   1342c:	pop	{pc}		; (ldr pc, [sp], #4)
   13430:	strdeq	r9, [r0], -r0
   13434:	andeq	r9, r0, r0, lsl #8
   13438:	andeq	r9, r0, ip, ror #8
   1343c:	str	fp, [sp, #-8]!
   13440:	str	lr, [sp, #4]
   13444:	add	fp, sp, #4
   13448:	sub	sp, sp, #16
   1344c:	str	r0, [fp, #-16]
   13450:	mov	r3, #0
   13454:	strh	r3, [fp, #-6]
   13458:	ldr	r3, [fp, #-16]
   1345c:	cmp	r3, #0
   13460:	bne	13484 <_start@@Base+0x1470>
   13464:	ldr	r3, [pc, #196]	; 13530 <_start@@Base+0x151c>
   13468:	add	r3, pc, r3
   1346c:	mov	r2, #149	; 0x95
   13470:	ldr	r1, [pc, #188]	; 13534 <_start@@Base+0x1520>
   13474:	add	r1, pc, r1
   13478:	ldr	r0, [pc, #184]	; 13538 <_start@@Base+0x1524>
   1347c:	add	r0, pc, r0
   13480:	bl	12008 <__assert_fail@plt>
   13484:	mov	r3, #1
   13488:	strh	r3, [fp, #-8]
   1348c:	ldr	r0, [fp, #-16]
   13490:	bl	12324 <_start@@Base+0x310>
   13494:	mov	r3, r0
   13498:	rsb	r3, r3, #0
   1349c:	ldr	r2, [fp, #-16]
   134a0:	add	r3, r2, r3
   134a4:	str	r3, [fp, #-12]
   134a8:	ldr	r0, [fp, #-12]
   134ac:	bl	12388 <_start@@Base+0x374>
   134b0:	mov	r3, r0
   134b4:	mov	r2, r3
   134b8:	ldrh	r3, [fp, #-8]
   134bc:	add	r3, r3, #3
   134c0:	lsl	r3, r3, #1
   134c4:	cmp	r2, r3
   134c8:	bcc	134f0 <_start@@Base+0x14dc>
   134cc:	ldrh	r3, [fp, #-8]
   134d0:	add	r3, r3, #2
   134d4:	lsl	r3, r3, #1
   134d8:	ldr	r2, [fp, #-12]
   134dc:	add	r3, r2, r3
   134e0:	mov	r0, r3
   134e4:	bl	12388 <_start@@Base+0x374>
   134e8:	mov	r3, r0
   134ec:	strh	r3, [fp, #-6]
   134f0:	ldrh	r3, [fp, #-6]
   134f4:	cmp	r3, #0
   134f8:	beq	13518 <_start@@Base+0x1504>
   134fc:	ldrh	r3, [fp, #-6]
   13500:	ldr	r2, [fp, #-16]
   13504:	add	r3, r2, r3
   13508:	mov	r0, r3
   1350c:	bl	121b8 <_start@@Base+0x1a4>
   13510:	mov	r3, r0
   13514:	b	1351c <_start@@Base+0x1508>
   13518:	mov	r3, #0
   1351c:	mov	r0, r3
   13520:	sub	sp, fp, #4
   13524:	ldr	fp, [sp]
   13528:	add	sp, sp, #4
   1352c:	pop	{pc}		; (ldr pc, [sp], #4)
   13530:	strdeq	r9, [r0], -ip
   13534:	strdeq	r9, [r0], -r0
   13538:	andeq	r9, r0, ip, asr r3
   1353c:	str	fp, [sp, #-8]!
   13540:	str	lr, [sp, #4]
   13544:	add	fp, sp, #4
   13548:	sub	sp, sp, #24
   1354c:	str	r0, [fp, #-8]
   13550:	str	r1, [fp, #-12]
   13554:	str	r2, [fp, #-16]
   13558:	mvn	r3, #0
   1355c:	str	r3, [sp, #4]
   13560:	mov	r3, #1
   13564:	str	r3, [sp]
   13568:	mov	r3, #1
   1356c:	ldr	r2, [fp, #-16]
   13570:	ldr	r1, [fp, #-12]
   13574:	ldr	r0, [fp, #-8]
   13578:	bl	196f0 <flatcc_builder_create_vector@@Base>
   1357c:	mov	r3, r0
   13580:	mov	r0, r3
   13584:	sub	sp, fp, #4
   13588:	ldr	fp, [sp]
   1358c:	add	sp, sp, #4
   13590:	pop	{pc}		; (ldr pc, [sp], #4)
   13594:	str	fp, [sp, #-8]!
   13598:	str	lr, [sp, #4]
   1359c:	add	fp, sp, #4
   135a0:	sub	sp, sp, #8
   135a4:	str	r0, [fp, #-8]
   135a8:	mov	r3, r1
   135ac:	strh	r3, [fp, #-10]
   135b0:	ldrsh	r3, [fp, #-10]
   135b4:	mov	r0, r3
   135b8:	bl	12190 <_start@@Base+0x17c>
   135bc:	mov	r3, r0
   135c0:	mov	r2, r3
   135c4:	ldr	r3, [fp, #-8]
   135c8:	strh	r2, [r3]
   135cc:	ldr	r3, [fp, #-8]
   135d0:	mov	r0, r3
   135d4:	sub	sp, fp, #4
   135d8:	ldr	fp, [sp]
   135dc:	add	sp, sp, #4
   135e0:	pop	{pc}		; (ldr pc, [sp], #4)
   135e4:	str	fp, [sp, #-8]!
   135e8:	str	lr, [sp, #4]
   135ec:	add	fp, sp, #4
   135f0:	sub	sp, sp, #8
   135f4:	str	r0, [fp, #-8]
   135f8:	str	r1, [fp, #-12]
   135fc:	ldr	r3, [fp, #-12]
   13600:	vldr	s15, [r3]
   13604:	vmov.f32	s0, s15
   13608:	bl	121f4 <_start@@Base+0x1e0>
   1360c:	vmov.f32	s15, s0
   13610:	ldr	r3, [fp, #-8]
   13614:	vstr	s15, [r3]
   13618:	ldr	r3, [fp, #-8]
   1361c:	mov	r0, r3
   13620:	sub	sp, fp, #4
   13624:	ldr	fp, [sp]
   13628:	add	sp, sp, #4
   1362c:	pop	{pc}		; (ldr pc, [sp], #4)
   13630:	str	fp, [sp, #-8]!
   13634:	str	lr, [sp, #4]
   13638:	add	fp, sp, #4
   1363c:	sub	sp, sp, #8
   13640:	str	r0, [fp, #-8]
   13644:	str	r1, [fp, #-12]
   13648:	ldr	r3, [fp, #-12]
   1364c:	vldr	s15, [r3]
   13650:	vmov.f32	s0, s15
   13654:	bl	1222c <_start@@Base+0x218>
   13658:	vmov.f32	s15, s0
   1365c:	ldr	r3, [fp, #-8]
   13660:	vstr	s15, [r3]
   13664:	ldr	r3, [fp, #-8]
   13668:	mov	r0, r3
   1366c:	sub	sp, fp, #4
   13670:	ldr	fp, [sp]
   13674:	add	sp, sp, #4
   13678:	pop	{pc}		; (ldr pc, [sp], #4)
   1367c:	str	fp, [sp, #-8]!
   13680:	str	lr, [sp, #4]
   13684:	add	fp, sp, #4
   13688:	sub	sp, sp, #8
   1368c:	str	r0, [fp, #-8]
   13690:	vstr	s0, [fp, #-12]
   13694:	vldr	s0, [fp, #-12]
   13698:	bl	1222c <_start@@Base+0x218>
   1369c:	vmov.f32	s15, s0
   136a0:	ldr	r3, [fp, #-8]
   136a4:	vstr	s15, [r3]
   136a8:	ldr	r3, [fp, #-8]
   136ac:	mov	r0, r3
   136b0:	sub	sp, fp, #4
   136b4:	ldr	fp, [sp]
   136b8:	add	sp, sp, #4
   136bc:	pop	{pc}		; (ldr pc, [sp], #4)
   136c0:	str	fp, [sp, #-8]!
   136c4:	str	lr, [sp, #4]
   136c8:	add	fp, sp, #4
   136cc:	sub	sp, sp, #8
   136d0:	str	r0, [fp, #-8]
   136d4:	str	r1, [fp, #-12]
   136d8:	ldr	r1, [fp, #-12]
   136dc:	ldr	r0, [fp, #-8]
   136e0:	bl	1ad18 <flatcc_builder_create_string_str@@Base>
   136e4:	mov	r3, r0
   136e8:	mov	r0, r3
   136ec:	sub	sp, fp, #4
   136f0:	ldr	fp, [sp]
   136f4:	add	sp, sp, #4
   136f8:	pop	{pc}		; (ldr pc, [sp], #4)
   136fc:	str	fp, [sp, #-8]!
   13700:	str	lr, [sp, #4]
   13704:	add	fp, sp, #4
   13708:	sub	sp, sp, #8
   1370c:	str	r0, [fp, #-8]
   13710:	str	r1, [fp, #-12]
   13714:	mov	r3, #0
   13718:	mov	r2, #0
   1371c:	ldr	r1, [fp, #-12]
   13720:	ldr	r0, [fp, #-8]
   13724:	bl	177c0 <flatcc_builder_start_buffer@@Base>
   13728:	mov	r3, r0
   1372c:	mov	r0, r3
   13730:	sub	sp, fp, #4
   13734:	ldr	fp, [sp]
   13738:	add	sp, sp, #4
   1373c:	pop	{pc}		; (ldr pc, [sp], #4)
   13740:	str	fp, [sp, #-8]!
   13744:	str	lr, [sp, #4]
   13748:	add	fp, sp, #4
   1374c:	sub	sp, sp, #8
   13750:	str	r0, [fp, #-8]
   13754:	str	r1, [fp, #-12]
   13758:	ldr	r1, [fp, #-12]
   1375c:	ldr	r0, [fp, #-8]
   13760:	bl	17930 <flatcc_builder_end_buffer@@Base>
   13764:	mov	r3, r0
   13768:	mov	r0, r3
   1376c:	sub	sp, fp, #4
   13770:	ldr	fp, [sp]
   13774:	add	sp, sp, #4
   13778:	pop	{pc}		; (ldr pc, [sp], #4)
   1377c:	str	fp, [sp, #-8]!
   13780:	str	lr, [sp, #4]
   13784:	add	fp, sp, #4
   13788:	sub	sp, sp, #8
   1378c:	str	r0, [fp, #-8]
   13790:	mov	r3, r1
   13794:	strb	r3, [fp, #-9]
   13798:	ldrsb	r3, [fp, #-9]
   1379c:	mov	r0, r3
   137a0:	bl	126b4 <_start@@Base+0x6a0>
   137a4:	mov	r3, r0
   137a8:	mov	r2, r3
   137ac:	ldr	r3, [fp, #-8]
   137b0:	strb	r2, [r3]
   137b4:	ldr	r3, [fp, #-8]
   137b8:	mov	r0, r3
   137bc:	sub	sp, fp, #4
   137c0:	ldr	fp, [sp]
   137c4:	add	sp, sp, #4
   137c8:	pop	{pc}		; (ldr pc, [sp], #4)
   137cc:	str	fp, [sp, #-8]!
   137d0:	str	lr, [sp, #4]
   137d4:	add	fp, sp, #4
   137d8:	sub	sp, sp, #16
   137dc:	str	r0, [fp, #-8]
   137e0:	vstr	s0, [fp, #-12]
   137e4:	vstr	s1, [fp, #-16]
   137e8:	vstr	s2, [fp, #-20]	; 0xffffffec
   137ec:	ldr	r3, [fp, #-8]
   137f0:	vldr	s0, [fp, #-12]
   137f4:	mov	r0, r3
   137f8:	bl	1367c <_start@@Base+0x1668>
   137fc:	ldr	r3, [fp, #-8]
   13800:	add	r3, r3, #4
   13804:	vldr	s0, [fp, #-16]
   13808:	mov	r0, r3
   1380c:	bl	1367c <_start@@Base+0x1668>
   13810:	ldr	r3, [fp, #-8]
   13814:	add	r3, r3, #8
   13818:	vldr	s0, [fp, #-20]	; 0xffffffec
   1381c:	mov	r0, r3
   13820:	bl	1367c <_start@@Base+0x1668>
   13824:	ldr	r3, [fp, #-8]
   13828:	mov	r0, r3
   1382c:	sub	sp, fp, #4
   13830:	ldr	fp, [sp]
   13834:	add	sp, sp, #4
   13838:	pop	{pc}		; (ldr pc, [sp], #4)
   1383c:	str	fp, [sp, #-8]!
   13840:	str	lr, [sp, #4]
   13844:	add	fp, sp, #4
   13848:	sub	sp, sp, #8
   1384c:	str	r0, [fp, #-8]
   13850:	str	r1, [fp, #-12]
   13854:	ldr	r3, [fp, #-8]
   13858:	ldr	r2, [fp, #-12]
   1385c:	mov	r1, r2
   13860:	mov	r0, r3
   13864:	bl	13630 <_start@@Base+0x161c>
   13868:	ldr	r3, [fp, #-8]
   1386c:	add	r2, r3, #4
   13870:	ldr	r3, [fp, #-12]
   13874:	add	r3, r3, #4
   13878:	mov	r1, r3
   1387c:	mov	r0, r2
   13880:	bl	13630 <_start@@Base+0x161c>
   13884:	ldr	r3, [fp, #-8]
   13888:	add	r2, r3, #8
   1388c:	ldr	r3, [fp, #-12]
   13890:	add	r3, r3, #8
   13894:	mov	r1, r3
   13898:	mov	r0, r2
   1389c:	bl	13630 <_start@@Base+0x161c>
   138a0:	ldr	r3, [fp, #-8]
   138a4:	mov	r0, r3
   138a8:	sub	sp, fp, #4
   138ac:	ldr	fp, [sp]
   138b0:	add	sp, sp, #4
   138b4:	pop	{pc}		; (ldr pc, [sp], #4)
   138b8:	str	fp, [sp, #-8]!
   138bc:	str	lr, [sp, #4]
   138c0:	add	fp, sp, #4
   138c4:	sub	sp, sp, #8
   138c8:	str	r0, [fp, #-8]
   138cc:	str	r1, [fp, #-12]
   138d0:	ldr	r3, [fp, #-8]
   138d4:	ldr	r2, [fp, #-12]
   138d8:	mov	r1, r2
   138dc:	mov	r0, r3
   138e0:	bl	135e4 <_start@@Base+0x15d0>
   138e4:	ldr	r3, [fp, #-8]
   138e8:	add	r2, r3, #4
   138ec:	ldr	r3, [fp, #-12]
   138f0:	add	r3, r3, #4
   138f4:	mov	r1, r3
   138f8:	mov	r0, r2
   138fc:	bl	135e4 <_start@@Base+0x15d0>
   13900:	ldr	r3, [fp, #-8]
   13904:	add	r2, r3, #8
   13908:	ldr	r3, [fp, #-12]
   1390c:	add	r3, r3, #8
   13910:	mov	r1, r3
   13914:	mov	r0, r2
   13918:	bl	135e4 <_start@@Base+0x15d0>
   1391c:	ldr	r3, [fp, #-8]
   13920:	mov	r0, r3
   13924:	sub	sp, fp, #4
   13928:	ldr	fp, [sp]
   1392c:	add	sp, sp, #4
   13930:	pop	{pc}		; (ldr pc, [sp], #4)
   13934:	str	fp, [sp, #-8]!
   13938:	str	lr, [sp, #4]
   1393c:	add	fp, sp, #4
   13940:	sub	sp, sp, #8
   13944:	str	r0, [fp, #-8]
   13948:	mov	r1, #10
   1394c:	ldr	r0, [fp, #-8]
   13950:	bl	188f8 <flatcc_builder_start_table@@Base>
   13954:	mov	r3, r0
   13958:	mov	r0, r3
   1395c:	sub	sp, fp, #4
   13960:	ldr	fp, [sp]
   13964:	add	sp, sp, #4
   13968:	pop	{pc}		; (ldr pc, [sp], #4)
   1396c:	str	fp, [sp, #-8]!
   13970:	str	lr, [sp, #4]
   13974:	add	fp, sp, #4
   13978:	sub	sp, sp, #8
   1397c:	str	r0, [fp, #-8]
   13980:	mov	r2, #0
   13984:	ldr	r3, [pc, #88]	; 139e4 <_start@@Base+0x19d0>
   13988:	add	r3, pc, r3
   1398c:	mov	r1, r3
   13990:	ldr	r0, [fp, #-8]
   13994:	bl	193b8 <flatcc_builder_check_required@@Base>
   13998:	mov	r3, r0
   1399c:	cmp	r3, #0
   139a0:	bne	139c4 <_start@@Base+0x19b0>
   139a4:	ldr	r3, [pc, #60]	; 139e8 <_start@@Base+0x19d4>
   139a8:	add	r3, pc, r3
   139ac:	mov	r2, #50	; 0x32
   139b0:	ldr	r1, [pc, #52]	; 139ec <_start@@Base+0x19d8>
   139b4:	add	r1, pc, r1
   139b8:	ldr	r0, [pc, #48]	; 139f0 <_start@@Base+0x19dc>
   139bc:	add	r0, pc, r0
   139c0:	bl	12008 <__assert_fail@plt>
   139c4:	ldr	r0, [fp, #-8]
   139c8:	bl	194ac <flatcc_builder_end_table@@Base>
   139cc:	mov	r3, r0
   139d0:	mov	r0, r3
   139d4:	sub	sp, fp, #4
   139d8:	ldr	fp, [sp]
   139dc:	add	sp, sp, #4
   139e0:	pop	{pc}		; (ldr pc, [sp], #4)
   139e4:	andeq	r8, r0, r8, ror lr
   139e8:	strdeq	r9, [r0], -r4
   139ec:	andeq	r8, r0, r0, asr lr
   139f0:			; <UNDEFINED> instruction: 0x00008ebc
   139f4:	str	fp, [sp, #-8]!
   139f8:	str	lr, [sp, #4]
   139fc:	add	fp, sp, #4
   13a00:	sub	sp, sp, #8
   13a04:	str	r0, [fp, #-8]
   13a08:	mov	r1, #2
   13a0c:	ldr	r0, [fp, #-8]
   13a10:	bl	188f8 <flatcc_builder_start_table@@Base>
   13a14:	mov	r3, r0
   13a18:	mov	r0, r3
   13a1c:	sub	sp, fp, #4
   13a20:	ldr	fp, [sp]
   13a24:	add	sp, sp, #4
   13a28:	pop	{pc}		; (ldr pc, [sp], #4)
   13a2c:	str	fp, [sp, #-8]!
   13a30:	str	lr, [sp, #4]
   13a34:	add	fp, sp, #4
   13a38:	sub	sp, sp, #8
   13a3c:	str	r0, [fp, #-8]
   13a40:	mov	r2, #0
   13a44:	ldr	r3, [pc, #88]	; 13aa4 <_start@@Base+0x1a90>
   13a48:	add	r3, pc, r3
   13a4c:	mov	r1, r3
   13a50:	ldr	r0, [fp, #-8]
   13a54:	bl	193b8 <flatcc_builder_check_required@@Base>
   13a58:	mov	r3, r0
   13a5c:	cmp	r3, #0
   13a60:	bne	13a84 <_start@@Base+0x1a70>
   13a64:	ldr	r3, [pc, #60]	; 13aa8 <_start@@Base+0x1a94>
   13a68:	add	r3, pc, r3
   13a6c:	mov	r2, #52	; 0x34
   13a70:	ldr	r1, [pc, #52]	; 13aac <_start@@Base+0x1a98>
   13a74:	add	r1, pc, r1
   13a78:	ldr	r0, [pc, #48]	; 13ab0 <_start@@Base+0x1a9c>
   13a7c:	add	r0, pc, r0
   13a80:	bl	12008 <__assert_fail@plt>
   13a84:	ldr	r0, [fp, #-8]
   13a88:	bl	194ac <flatcc_builder_end_table@@Base>
   13a8c:	mov	r3, r0
   13a90:	mov	r0, r3
   13a94:	sub	sp, fp, #4
   13a98:	ldr	fp, [sp]
   13a9c:	add	sp, sp, #4
   13aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   13aa4:	ldrdeq	r8, [r0], -r0
   13aa8:	andeq	r9, r0, r8, lsl r0
   13aac:	muleq	r0, r0, sp
   13ab0:	andeq	r8, r0, r0, lsr #29
   13ab4:	str	fp, [sp, #-8]!
   13ab8:	str	lr, [sp, #4]
   13abc:	add	fp, sp, #4
   13ac0:	sub	sp, sp, #8
   13ac4:	str	r0, [fp, #-8]
   13ac8:	ldr	r0, [fp, #-8]
   13acc:	bl	186e0 <flatcc_builder_start_offset_vector@@Base>
   13ad0:	mov	r3, r0
   13ad4:	mov	r0, r3
   13ad8:	sub	sp, fp, #4
   13adc:	ldr	fp, [sp]
   13ae0:	add	sp, sp, #4
   13ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae8:	str	fp, [sp, #-8]!
   13aec:	str	lr, [sp, #4]
   13af0:	add	fp, sp, #4
   13af4:	sub	sp, sp, #8
   13af8:	str	r0, [fp, #-8]
   13afc:	ldr	r0, [fp, #-8]
   13b00:	bl	19de8 <flatcc_builder_end_offset_vector@@Base>
   13b04:	mov	r3, r0
   13b08:	mov	r0, r3
   13b0c:	sub	sp, fp, #4
   13b10:	ldr	fp, [sp]
   13b14:	add	sp, sp, #4
   13b18:	pop	{pc}		; (ldr pc, [sp], #4)
   13b1c:	str	fp, [sp, #-8]!
   13b20:	str	lr, [sp, #4]
   13b24:	add	fp, sp, #4
   13b28:	sub	sp, sp, #8
   13b2c:	str	r0, [fp, #-8]
   13b30:	str	r1, [fp, #-12]
   13b34:	ldr	r3, [fp, #-12]
   13b38:	cmp	r3, #0
   13b3c:	beq	13b54 <_start@@Base+0x1b40>
   13b40:	ldr	r1, [fp, #-12]
   13b44:	ldr	r0, [fp, #-8]
   13b48:	bl	17f8c <flatcc_builder_offset_vector_push@@Base>
   13b4c:	mov	r3, r0
   13b50:	b	13b58 <_start@@Base+0x1b44>
   13b54:	mov	r3, #0
   13b58:	mov	r0, r3
   13b5c:	sub	sp, fp, #4
   13b60:	ldr	fp, [sp]
   13b64:	add	sp, sp, #4
   13b68:	pop	{pc}		; (ldr pc, [sp], #4)
   13b6c:	push	{fp}		; (str fp, [sp, #-4]!)
   13b70:	add	fp, sp, #0
   13b74:	sub	sp, sp, #20
   13b78:	str	r0, [fp, #-16]
   13b7c:	str	r1, [fp, #-20]	; 0xffffffec
   13b80:	mov	r3, #1
   13b84:	strb	r3, [fp, #-12]
   13b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b8c:	str	r3, [fp, #-8]
   13b90:	ldr	r3, [fp, #-16]
   13b94:	mov	r1, r3
   13b98:	sub	r3, fp, #12
   13b9c:	ldrd	r2, [r3]
   13ba0:	strd	r2, [r1]
   13ba4:	ldr	r0, [fp, #-16]
   13ba8:	add	sp, fp, #0
   13bac:	pop	{fp}		; (ldr fp, [sp], #4)
   13bb0:	bx	lr
   13bb4:	str	fp, [sp, #-8]!
   13bb8:	str	lr, [sp, #4]
   13bbc:	add	fp, sp, #4
   13bc0:	sub	sp, sp, #8
   13bc4:	str	r0, [fp, #-8]
   13bc8:	mov	r3, #4
   13bcc:	mov	r2, #12
   13bd0:	mov	r1, #0
   13bd4:	ldr	r0, [fp, #-8]
   13bd8:	bl	1aefc <flatcc_builder_table_add@@Base>
   13bdc:	mov	r3, r0
   13be0:	mov	r0, r3
   13be4:	sub	sp, fp, #4
   13be8:	ldr	fp, [sp]
   13bec:	add	sp, sp, #4
   13bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf4:	str	fp, [sp, #-8]!
   13bf8:	str	lr, [sp, #4]
   13bfc:	add	fp, sp, #4
   13c00:	sub	sp, sp, #24
   13c04:	str	r0, [fp, #-16]
   13c08:	vstr	s0, [fp, #-20]	; 0xffffffec
   13c0c:	vstr	s1, [fp, #-24]	; 0xffffffe8
   13c10:	vstr	s2, [fp, #-28]	; 0xffffffe4
   13c14:	ldr	r0, [fp, #-16]
   13c18:	bl	13bb4 <_start@@Base+0x1ba0>
   13c1c:	str	r0, [fp, #-8]
   13c20:	ldr	r3, [fp, #-8]
   13c24:	cmp	r3, #0
   13c28:	bne	13c34 <_start@@Base+0x1c20>
   13c2c:	mov	r3, #0
   13c30:	b	13c4c <_start@@Base+0x1c38>
   13c34:	vldr	s2, [fp, #-28]	; 0xffffffe4
   13c38:	vldr	s1, [fp, #-24]	; 0xffffffe8
   13c3c:	vldr	s0, [fp, #-20]	; 0xffffffec
   13c40:	ldr	r0, [fp, #-8]
   13c44:	bl	137cc <_start@@Base+0x17b8>
   13c48:	mov	r3, #0
   13c4c:	mov	r0, r3
   13c50:	sub	sp, fp, #4
   13c54:	ldr	fp, [sp]
   13c58:	add	sp, sp, #4
   13c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c60:	str	fp, [sp, #-8]!
   13c64:	str	lr, [sp, #4]
   13c68:	add	fp, sp, #4
   13c6c:	sub	sp, sp, #16
   13c70:	str	r0, [fp, #-16]
   13c74:	str	r1, [fp, #-20]	; 0xffffffec
   13c78:	ldr	r0, [fp, #-16]
   13c7c:	bl	13bb4 <_start@@Base+0x1ba0>
   13c80:	str	r0, [fp, #-8]
   13c84:	ldr	r3, [fp, #-8]
   13c88:	cmp	r3, #0
   13c8c:	bne	13c98 <_start@@Base+0x1c84>
   13c90:	mvn	r3, #0
   13c94:	b	13ca8 <_start@@Base+0x1c94>
   13c98:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c9c:	ldr	r0, [fp, #-8]
   13ca0:	bl	1383c <_start@@Base+0x1828>
   13ca4:	mov	r3, #0
   13ca8:	mov	r0, r3
   13cac:	sub	sp, fp, #4
   13cb0:	ldr	fp, [sp]
   13cb4:	add	sp, sp, #4
   13cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   13cbc:	str	fp, [sp, #-8]!
   13cc0:	str	lr, [sp, #4]
   13cc4:	add	fp, sp, #4
   13cc8:	sub	sp, sp, #16
   13ccc:	str	r0, [fp, #-16]
   13cd0:	mov	r3, r1
   13cd4:	strh	r3, [fp, #-18]	; 0xffffffee
   13cd8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13cdc:	cmp	r3, #150	; 0x96
   13ce0:	bne	13cec <_start@@Base+0x1cd8>
   13ce4:	mov	r3, #0
   13ce8:	b	13d2c <_start@@Base+0x1d18>
   13cec:	mov	r3, #2
   13cf0:	mov	r2, #2
   13cf4:	mov	r1, #1
   13cf8:	ldr	r0, [fp, #-16]
   13cfc:	bl	1aefc <flatcc_builder_table_add@@Base>
   13d00:	str	r0, [fp, #-8]
   13d04:	ldr	r3, [fp, #-8]
   13d08:	cmp	r3, #0
   13d0c:	bne	13d18 <_start@@Base+0x1d04>
   13d10:	mvn	r3, #0
   13d14:	b	13d2c <_start@@Base+0x1d18>
   13d18:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13d1c:	mov	r1, r3
   13d20:	ldr	r0, [fp, #-8]
   13d24:	bl	13594 <_start@@Base+0x1580>
   13d28:	mov	r3, #0
   13d2c:	mov	r0, r3
   13d30:	sub	sp, fp, #4
   13d34:	ldr	fp, [sp]
   13d38:	add	sp, sp, #4
   13d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d40:	str	fp, [sp, #-8]!
   13d44:	str	lr, [sp, #4]
   13d48:	add	fp, sp, #4
   13d4c:	sub	sp, sp, #16
   13d50:	str	r0, [fp, #-16]
   13d54:	mov	r3, r1
   13d58:	strh	r3, [fp, #-18]	; 0xffffffee
   13d5c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13d60:	cmp	r3, #100	; 0x64
   13d64:	bne	13d70 <_start@@Base+0x1d5c>
   13d68:	mov	r3, #0
   13d6c:	b	13db0 <_start@@Base+0x1d9c>
   13d70:	mov	r3, #2
   13d74:	mov	r2, #2
   13d78:	mov	r1, #2
   13d7c:	ldr	r0, [fp, #-16]
   13d80:	bl	1aefc <flatcc_builder_table_add@@Base>
   13d84:	str	r0, [fp, #-8]
   13d88:	ldr	r3, [fp, #-8]
   13d8c:	cmp	r3, #0
   13d90:	bne	13d9c <_start@@Base+0x1d88>
   13d94:	mvn	r3, #0
   13d98:	b	13db0 <_start@@Base+0x1d9c>
   13d9c:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   13da0:	mov	r1, r3
   13da4:	ldr	r0, [fp, #-8]
   13da8:	bl	13594 <_start@@Base+0x1580>
   13dac:	mov	r3, #0
   13db0:	mov	r0, r3
   13db4:	sub	sp, fp, #4
   13db8:	ldr	fp, [sp]
   13dbc:	add	sp, sp, #4
   13dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc4:	str	fp, [sp, #-8]!
   13dc8:	str	lr, [sp, #4]
   13dcc:	add	fp, sp, #4
   13dd0:	sub	sp, sp, #16
   13dd4:	str	r0, [fp, #-16]
   13dd8:	str	r1, [fp, #-20]	; 0xffffffec
   13ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13de0:	cmp	r3, #0
   13de4:	beq	13e18 <_start@@Base+0x1e04>
   13de8:	mov	r1, #3
   13dec:	ldr	r0, [fp, #-16]
   13df0:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   13df4:	str	r0, [fp, #-8]
   13df8:	ldr	r3, [fp, #-8]
   13dfc:	cmp	r3, #0
   13e00:	beq	13e18 <_start@@Base+0x1e04>
   13e04:	ldr	r3, [fp, #-8]
   13e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e0c:	str	r2, [r3]
   13e10:	mov	r3, #0
   13e14:	b	13e1c <_start@@Base+0x1e08>
   13e18:	mvn	r3, #0
   13e1c:	mov	r0, r3
   13e20:	sub	sp, fp, #4
   13e24:	ldr	fp, [sp]
   13e28:	add	sp, sp, #4
   13e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e30:	str	fp, [sp, #-8]!
   13e34:	str	lr, [sp, #4]
   13e38:	add	fp, sp, #4
   13e3c:	sub	sp, sp, #8
   13e40:	str	r0, [fp, #-8]
   13e44:	str	r1, [fp, #-12]
   13e48:	ldr	r1, [fp, #-12]
   13e4c:	ldr	r0, [fp, #-8]
   13e50:	bl	1ad18 <flatcc_builder_create_string_str@@Base>
   13e54:	mov	r3, r0
   13e58:	mov	r1, r3
   13e5c:	ldr	r0, [fp, #-8]
   13e60:	bl	13dc4 <_start@@Base+0x1db0>
   13e64:	mov	r3, r0
   13e68:	mov	r0, r3
   13e6c:	sub	sp, fp, #4
   13e70:	ldr	fp, [sp]
   13e74:	add	sp, sp, #4
   13e78:	pop	{pc}		; (ldr pc, [sp], #4)
   13e7c:	str	fp, [sp, #-8]!
   13e80:	str	lr, [sp, #4]
   13e84:	add	fp, sp, #4
   13e88:	sub	sp, sp, #16
   13e8c:	str	r0, [fp, #-16]
   13e90:	str	r1, [fp, #-20]	; 0xffffffec
   13e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e98:	cmp	r3, #0
   13e9c:	beq	13ed0 <_start@@Base+0x1ebc>
   13ea0:	mov	r1, #5
   13ea4:	ldr	r0, [fp, #-16]
   13ea8:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   13eac:	str	r0, [fp, #-8]
   13eb0:	ldr	r3, [fp, #-8]
   13eb4:	cmp	r3, #0
   13eb8:	beq	13ed0 <_start@@Base+0x1ebc>
   13ebc:	ldr	r3, [fp, #-8]
   13ec0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ec4:	str	r2, [r3]
   13ec8:	mov	r3, #0
   13ecc:	b	13ed4 <_start@@Base+0x1ec0>
   13ed0:	mvn	r3, #0
   13ed4:	mov	r0, r3
   13ed8:	sub	sp, fp, #4
   13edc:	ldr	fp, [sp]
   13ee0:	add	sp, sp, #4
   13ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ee8:	str	fp, [sp, #-8]!
   13eec:	str	lr, [sp, #4]
   13ef0:	add	fp, sp, #4
   13ef4:	sub	sp, sp, #16
   13ef8:	str	r0, [fp, #-8]
   13efc:	str	r1, [fp, #-12]
   13f00:	str	r2, [fp, #-16]
   13f04:	ldr	r2, [fp, #-16]
   13f08:	ldr	r1, [fp, #-12]
   13f0c:	ldr	r0, [fp, #-8]
   13f10:	bl	1353c <_start@@Base+0x1528>
   13f14:	mov	r3, r0
   13f18:	mov	r1, r3
   13f1c:	ldr	r0, [fp, #-8]
   13f20:	bl	13e7c <_start@@Base+0x1e68>
   13f24:	mov	r3, r0
   13f28:	mov	r0, r3
   13f2c:	sub	sp, fp, #4
   13f30:	ldr	fp, [sp]
   13f34:	add	sp, sp, #4
   13f38:	pop	{pc}		; (ldr pc, [sp], #4)
   13f3c:	str	fp, [sp, #-8]!
   13f40:	str	lr, [sp, #4]
   13f44:	add	fp, sp, #4
   13f48:	sub	sp, sp, #16
   13f4c:	str	r0, [fp, #-16]
   13f50:	mov	r3, r1
   13f54:	strb	r3, [fp, #-17]	; 0xffffffef
   13f58:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   13f5c:	cmp	r3, #2
   13f60:	bne	13f6c <_start@@Base+0x1f58>
   13f64:	mov	r3, #0
   13f68:	b	13fac <_start@@Base+0x1f98>
   13f6c:	mov	r3, #1
   13f70:	mov	r2, #1
   13f74:	mov	r1, #6
   13f78:	ldr	r0, [fp, #-16]
   13f7c:	bl	1aefc <flatcc_builder_table_add@@Base>
   13f80:	str	r0, [fp, #-8]
   13f84:	ldr	r3, [fp, #-8]
   13f88:	cmp	r3, #0
   13f8c:	bne	13f98 <_start@@Base+0x1f84>
   13f90:	mvn	r3, #0
   13f94:	b	13fac <_start@@Base+0x1f98>
   13f98:	ldrsb	r3, [fp, #-17]	; 0xffffffef
   13f9c:	mov	r1, r3
   13fa0:	ldr	r0, [fp, #-8]
   13fa4:	bl	1377c <_start@@Base+0x1768>
   13fa8:	mov	r3, #0
   13fac:	mov	r0, r3
   13fb0:	sub	sp, fp, #4
   13fb4:	ldr	fp, [sp]
   13fb8:	add	sp, sp, #4
   13fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fc0:	str	fp, [sp, #-8]!
   13fc4:	str	lr, [sp, #4]
   13fc8:	add	fp, sp, #4
   13fcc:	sub	sp, sp, #16
   13fd0:	str	r0, [fp, #-16]
   13fd4:	str	r1, [fp, #-20]	; 0xffffffec
   13fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fdc:	cmp	r3, #0
   13fe0:	beq	14014 <_start@@Base+0x2000>
   13fe4:	mov	r1, #7
   13fe8:	ldr	r0, [fp, #-16]
   13fec:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   13ff0:	str	r0, [fp, #-8]
   13ff4:	ldr	r3, [fp, #-8]
   13ff8:	cmp	r3, #0
   13ffc:	beq	14014 <_start@@Base+0x2000>
   14000:	ldr	r3, [fp, #-8]
   14004:	ldr	r2, [fp, #-20]	; 0xffffffec
   14008:	str	r2, [r3]
   1400c:	mov	r3, #0
   14010:	b	14018 <_start@@Base+0x2004>
   14014:	mvn	r3, #0
   14018:	mov	r0, r3
   1401c:	sub	sp, fp, #4
   14020:	ldr	fp, [sp]
   14024:	add	sp, sp, #4
   14028:	pop	{pc}		; (ldr pc, [sp], #4)
   1402c:	str	fp, [sp, #-8]!
   14030:	str	lr, [sp, #4]
   14034:	add	fp, sp, #4
   14038:	sub	sp, sp, #8
   1403c:	str	r0, [fp, #-8]
   14040:	ldr	r0, [fp, #-8]
   14044:	bl	186e0 <flatcc_builder_start_offset_vector@@Base>
   14048:	mov	r3, r0
   1404c:	mov	r0, r3
   14050:	sub	sp, fp, #4
   14054:	ldr	fp, [sp]
   14058:	add	sp, sp, #4
   1405c:	pop	{pc}		; (ldr pc, [sp], #4)
   14060:	str	fp, [sp, #-8]!
   14064:	str	lr, [sp, #4]
   14068:	add	fp, sp, #4
   1406c:	sub	sp, sp, #8
   14070:	str	r0, [fp, #-8]
   14074:	ldr	r0, [fp, #-8]
   14078:	bl	19de8 <flatcc_builder_end_offset_vector@@Base>
   1407c:	mov	r3, r0
   14080:	mov	r1, r3
   14084:	ldr	r0, [fp, #-8]
   14088:	bl	13fc0 <_start@@Base+0x1fac>
   1408c:	mov	r3, r0
   14090:	mov	r0, r3
   14094:	sub	sp, fp, #4
   14098:	ldr	fp, [sp]
   1409c:	add	sp, sp, #4
   140a0:	pop	{pc}		; (ldr pc, [sp], #4)
   140a4:	str	fp, [sp, #-8]!
   140a8:	str	lr, [sp, #4]
   140ac:	add	fp, sp, #4
   140b0:	sub	sp, sp, #8
   140b4:	str	r0, [fp, #-8]
   140b8:	str	r1, [fp, #-12]
   140bc:	ldr	r3, [fp, #-12]
   140c0:	cmp	r3, #0
   140c4:	beq	140dc <_start@@Base+0x20c8>
   140c8:	ldr	r1, [fp, #-12]
   140cc:	ldr	r0, [fp, #-8]
   140d0:	bl	17f8c <flatcc_builder_offset_vector_push@@Base>
   140d4:	mov	r3, r0
   140d8:	b	140e0 <_start@@Base+0x20cc>
   140dc:	mov	r3, #0
   140e0:	mov	r0, r3
   140e4:	sub	sp, fp, #4
   140e8:	ldr	fp, [sp]
   140ec:	add	sp, sp, #4
   140f0:	pop	{pc}		; (ldr pc, [sp], #4)
   140f4:	str	fp, [sp, #-8]!
   140f8:	str	lr, [sp, #4]
   140fc:	add	fp, sp, #4
   14100:	sub	sp, sp, #16
   14104:	str	r0, [fp, #-8]
   14108:	str	r1, [fp, #-12]
   1410c:	mov	r3, r2
   14110:	strh	r3, [fp, #-14]
   14114:	ldrsh	r3, [fp, #-14]
   14118:	mov	r2, r3
   1411c:	ldr	r1, [fp, #-12]
   14120:	ldr	r0, [fp, #-8]
   14124:	bl	146f8 <_start@@Base+0x26e4>
   14128:	mov	r3, r0
   1412c:	mov	r1, r3
   14130:	ldr	r0, [fp, #-8]
   14134:	bl	140a4 <_start@@Base+0x2090>
   14138:	mov	r3, r0
   1413c:	mov	r0, r3
   14140:	sub	sp, fp, #4
   14144:	ldr	fp, [sp]
   14148:	add	sp, sp, #4
   1414c:	pop	{pc}		; (ldr pc, [sp], #4)
   14150:	str	fp, [sp, #-8]!
   14154:	str	lr, [sp, #4]
   14158:	add	fp, sp, #4
   1415c:	sub	sp, sp, #24
   14160:	str	r0, [fp, #-16]
   14164:	sub	r3, fp, #24
   14168:	stm	r3, {r1, r2}
   1416c:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   14170:	cmp	r3, #0
   14174:	bne	14180 <_start@@Base+0x216c>
   14178:	mov	r3, #0
   1417c:	b	141f8 <_start@@Base+0x21e4>
   14180:	ldr	r3, [fp, #-20]	; 0xffffffec
   14184:	cmp	r3, #0
   14188:	bne	14194 <_start@@Base+0x2180>
   1418c:	mvn	r3, #0
   14190:	b	141f8 <_start@@Base+0x21e4>
   14194:	mov	r3, #1
   14198:	mov	r2, #1
   1419c:	mov	r1, #8
   141a0:	ldr	r0, [fp, #-16]
   141a4:	bl	1aefc <flatcc_builder_table_add@@Base>
   141a8:	str	r0, [fp, #-8]
   141ac:	ldr	r3, [fp, #-8]
   141b0:	cmp	r3, #0
   141b4:	beq	141d4 <_start@@Base+0x21c0>
   141b8:	mov	r1, #9
   141bc:	ldr	r0, [fp, #-16]
   141c0:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   141c4:	str	r0, [fp, #-12]
   141c8:	ldr	r3, [fp, #-12]
   141cc:	cmp	r3, #0
   141d0:	bne	141dc <_start@@Base+0x21c8>
   141d4:	mvn	r3, #0
   141d8:	b	141f8 <_start@@Base+0x21e4>
   141dc:	ldrb	r2, [fp, #-24]	; 0xffffffe8
   141e0:	ldr	r3, [fp, #-8]
   141e4:	strb	r2, [r3]
   141e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   141ec:	ldr	r3, [fp, #-12]
   141f0:	str	r2, [r3]
   141f4:	mov	r3, #0
   141f8:	mov	r0, r3
   141fc:	sub	sp, fp, #4
   14200:	ldr	fp, [sp]
   14204:	add	sp, sp, #4
   14208:	pop	{pc}		; (ldr pc, [sp], #4)
   1420c:	str	fp, [sp, #-8]!
   14210:	str	lr, [sp, #4]
   14214:	add	fp, sp, #4
   14218:	sub	sp, sp, #16
   1421c:	str	r0, [fp, #-16]
   14220:	mov	r3, r1
   14224:	strb	r3, [fp, #-17]	; 0xffffffef
   14228:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1422c:	cmp	r3, #0
   14230:	bne	1423c <_start@@Base+0x2228>
   14234:	mov	r3, #0
   14238:	b	14278 <_start@@Base+0x2264>
   1423c:	mov	r3, #1
   14240:	mov	r2, #1
   14244:	mov	r1, #8
   14248:	ldr	r0, [fp, #-16]
   1424c:	bl	1aefc <flatcc_builder_table_add@@Base>
   14250:	str	r0, [fp, #-8]
   14254:	ldr	r3, [fp, #-8]
   14258:	cmp	r3, #0
   1425c:	beq	14274 <_start@@Base+0x2260>
   14260:	ldr	r3, [fp, #-8]
   14264:	ldrb	r2, [fp, #-17]	; 0xffffffef
   14268:	strb	r2, [r3]
   1426c:	mov	r3, #0
   14270:	b	14278 <_start@@Base+0x2264>
   14274:	mvn	r3, #0
   14278:	mov	r0, r3
   1427c:	sub	sp, fp, #4
   14280:	ldr	fp, [sp]
   14284:	add	sp, sp, #4
   14288:	pop	{pc}		; (ldr pc, [sp], #4)
   1428c:	str	fp, [sp, #-8]!
   14290:	str	lr, [sp, #4]
   14294:	add	fp, sp, #4
   14298:	sub	sp, sp, #24
   1429c:	str	r0, [fp, #-16]
   142a0:	sub	r3, fp, #24
   142a4:	stm	r3, {r1, r2}
   142a8:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   142ac:	cmp	r3, #0
   142b0:	bne	142bc <_start@@Base+0x22a8>
   142b4:	mov	r3, #0
   142b8:	b	142f0 <_start@@Base+0x22dc>
   142bc:	mov	r1, #9
   142c0:	ldr	r0, [fp, #-16]
   142c4:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   142c8:	str	r0, [fp, #-8]
   142cc:	ldr	r3, [fp, #-8]
   142d0:	cmp	r3, #0
   142d4:	beq	142ec <_start@@Base+0x22d8>
   142d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   142dc:	ldr	r3, [fp, #-8]
   142e0:	str	r2, [r3]
   142e4:	mov	r3, #0
   142e8:	b	142f0 <_start@@Base+0x22dc>
   142ec:	mvn	r3, #0
   142f0:	mov	r0, r3
   142f4:	sub	sp, fp, #4
   142f8:	ldr	fp, [sp]
   142fc:	add	sp, sp, #4
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	str	fp, [sp, #-8]!
   14308:	str	lr, [sp, #4]
   1430c:	add	fp, sp, #4
   14310:	sub	sp, sp, #16
   14314:	str	r0, [fp, #-16]
   14318:	str	r1, [fp, #-20]	; 0xffffffec
   1431c:	sub	r3, fp, #12
   14320:	ldr	r1, [fp, #-20]	; 0xffffffec
   14324:	mov	r0, r3
   14328:	bl	13b6c <_start@@Base+0x1b58>
   1432c:	sub	r3, fp, #12
   14330:	ldm	r3, {r1, r2}
   14334:	ldr	r0, [fp, #-16]
   14338:	bl	14150 <_start@@Base+0x213c>
   1433c:	mov	r3, r0
   14340:	mov	r0, r3
   14344:	sub	sp, fp, #4
   14348:	ldr	fp, [sp]
   1434c:	add	sp, sp, #4
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	str	fp, [sp, #-8]!
   14358:	str	lr, [sp, #4]
   1435c:	add	fp, sp, #4
   14360:	sub	sp, sp, #16
   14364:	str	r0, [fp, #-8]
   14368:	str	r1, [fp, #-12]
   1436c:	mov	r1, r2
   14370:	mov	r2, r3
   14374:	mov	r3, r1
   14378:	strh	r3, [fp, #-14]
   1437c:	mov	r3, r2
   14380:	strh	r3, [fp, #-16]
   14384:	ldr	r0, [fp, #-8]
   14388:	bl	13934 <_start@@Base+0x1920>
   1438c:	mov	r3, r0
   14390:	cmp	r3, #0
   14394:	bne	14484 <_start@@Base+0x2470>
   14398:	ldr	r1, [fp, #-12]
   1439c:	ldr	r0, [fp, #-8]
   143a0:	bl	13c60 <_start@@Base+0x1c4c>
   143a4:	mov	r3, r0
   143a8:	cmp	r3, #0
   143ac:	bne	14484 <_start@@Base+0x2470>
   143b0:	ldr	r1, [fp, #4]
   143b4:	ldr	r0, [fp, #-8]
   143b8:	bl	13dc4 <_start@@Base+0x1db0>
   143bc:	mov	r3, r0
   143c0:	cmp	r3, #0
   143c4:	bne	14484 <_start@@Base+0x2470>
   143c8:	ldr	r1, [fp, #8]
   143cc:	ldr	r0, [fp, #-8]
   143d0:	bl	13e7c <_start@@Base+0x1e68>
   143d4:	mov	r3, r0
   143d8:	cmp	r3, #0
   143dc:	bne	14484 <_start@@Base+0x2470>
   143e0:	ldr	r1, [fp, #16]
   143e4:	ldr	r0, [fp, #-8]
   143e8:	bl	13fc0 <_start@@Base+0x1fac>
   143ec:	mov	r3, r0
   143f0:	cmp	r3, #0
   143f4:	bne	14484 <_start@@Base+0x2470>
   143f8:	add	r3, fp, #20
   143fc:	ldm	r3, {r1, r2}
   14400:	ldr	r0, [fp, #-8]
   14404:	bl	1428c <_start@@Base+0x2278>
   14408:	mov	r3, r0
   1440c:	cmp	r3, #0
   14410:	bne	14484 <_start@@Base+0x2470>
   14414:	ldrsh	r3, [fp, #-14]
   14418:	mov	r1, r3
   1441c:	ldr	r0, [fp, #-8]
   14420:	bl	13cbc <_start@@Base+0x1ca8>
   14424:	mov	r3, r0
   14428:	cmp	r3, #0
   1442c:	bne	14484 <_start@@Base+0x2470>
   14430:	ldrsh	r3, [fp, #-16]
   14434:	mov	r1, r3
   14438:	ldr	r0, [fp, #-8]
   1443c:	bl	13d40 <_start@@Base+0x1d2c>
   14440:	mov	r3, r0
   14444:	cmp	r3, #0
   14448:	bne	14484 <_start@@Base+0x2470>
   1444c:	ldrsb	r3, [fp, #12]
   14450:	mov	r1, r3
   14454:	ldr	r0, [fp, #-8]
   14458:	bl	13f3c <_start@@Base+0x1f28>
   1445c:	mov	r3, r0
   14460:	cmp	r3, #0
   14464:	bne	14484 <_start@@Base+0x2470>
   14468:	ldrb	r3, [fp, #20]
   1446c:	mov	r1, r3
   14470:	ldr	r0, [fp, #-8]
   14474:	bl	1420c <_start@@Base+0x21f8>
   14478:	mov	r3, r0
   1447c:	cmp	r3, #0
   14480:	beq	1448c <_start@@Base+0x2478>
   14484:	mov	r3, #0
   14488:	b	14498 <_start@@Base+0x2484>
   1448c:	ldr	r0, [fp, #-8]
   14490:	bl	1396c <_start@@Base+0x1958>
   14494:	mov	r3, r0
   14498:	mov	r0, r3
   1449c:	sub	sp, fp, #4
   144a0:	ldr	fp, [sp]
   144a4:	add	sp, sp, #4
   144a8:	pop	{pc}		; (ldr pc, [sp], #4)
   144ac:	str	fp, [sp, #-8]!
   144b0:	str	lr, [sp, #4]
   144b4:	add	fp, sp, #4
   144b8:	sub	sp, sp, #8
   144bc:	str	r0, [fp, #-8]
   144c0:	mov	r1, #0
   144c4:	ldr	r0, [fp, #-8]
   144c8:	bl	136fc <_start@@Base+0x16e8>
   144cc:	mov	r3, r0
   144d0:	cmp	r3, #0
   144d4:	bne	144e8 <_start@@Base+0x24d4>
   144d8:	ldr	r0, [fp, #-8]
   144dc:	bl	13934 <_start@@Base+0x1920>
   144e0:	mov	r3, r0
   144e4:	b	144ec <_start@@Base+0x24d8>
   144e8:	mvn	r3, #0
   144ec:	mov	r0, r3
   144f0:	sub	sp, fp, #4
   144f4:	ldr	fp, [sp]
   144f8:	add	sp, sp, #4
   144fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14500:	str	fp, [sp, #-8]!
   14504:	str	lr, [sp, #4]
   14508:	add	fp, sp, #4
   1450c:	sub	sp, sp, #8
   14510:	str	r0, [fp, #-8]
   14514:	ldr	r0, [fp, #-8]
   14518:	bl	1396c <_start@@Base+0x1958>
   1451c:	mov	r3, r0
   14520:	mov	r1, r3
   14524:	ldr	r0, [fp, #-8]
   14528:	bl	13740 <_start@@Base+0x172c>
   1452c:	mov	r3, r0
   14530:	mov	r0, r3
   14534:	sub	sp, fp, #4
   14538:	ldr	fp, [sp]
   1453c:	add	sp, sp, #4
   14540:	pop	{pc}		; (ldr pc, [sp], #4)
   14544:	str	fp, [sp, #-8]!
   14548:	str	lr, [sp, #4]
   1454c:	add	fp, sp, #4
   14550:	sub	sp, sp, #40	; 0x28
   14554:	str	r0, [fp, #-8]
   14558:	str	r1, [fp, #-12]
   1455c:	mov	r1, r2
   14560:	mov	r2, r3
   14564:	mov	r3, r1
   14568:	strh	r3, [fp, #-14]
   1456c:	mov	r3, r2
   14570:	strh	r3, [fp, #-16]
   14574:	mov	r1, #0
   14578:	ldr	r0, [fp, #-8]
   1457c:	bl	136fc <_start@@Base+0x16e8>
   14580:	mov	r3, r0
   14584:	cmp	r3, #0
   14588:	beq	14594 <_start@@Base+0x2580>
   1458c:	mov	r3, #0
   14590:	b	145f4 <_start@@Base+0x25e0>
   14594:	ldrsh	ip, [fp, #-16]
   14598:	ldrsh	r0, [fp, #-14]
   1459c:	add	r1, sp, #16
   145a0:	add	r3, fp, #20
   145a4:	ldrd	r2, [r3]
   145a8:	strd	r2, [r1]
   145ac:	ldr	r3, [fp, #16]
   145b0:	str	r3, [sp, #12]
   145b4:	ldrsb	r3, [fp, #12]
   145b8:	str	r3, [sp, #8]
   145bc:	ldr	r3, [fp, #8]
   145c0:	str	r3, [sp, #4]
   145c4:	ldr	r3, [fp, #4]
   145c8:	str	r3, [sp]
   145cc:	mov	r3, ip
   145d0:	mov	r2, r0
   145d4:	ldr	r1, [fp, #-12]
   145d8:	ldr	r0, [fp, #-8]
   145dc:	bl	14354 <_start@@Base+0x2340>
   145e0:	mov	r3, r0
   145e4:	mov	r1, r3
   145e8:	ldr	r0, [fp, #-8]
   145ec:	bl	13740 <_start@@Base+0x172c>
   145f0:	mov	r3, r0
   145f4:	mov	r0, r3
   145f8:	sub	sp, fp, #4
   145fc:	ldr	fp, [sp]
   14600:	add	sp, sp, #4
   14604:	pop	{pc}		; (ldr pc, [sp], #4)
   14608:	str	fp, [sp, #-8]!
   1460c:	str	lr, [sp, #4]
   14610:	add	fp, sp, #4
   14614:	sub	sp, sp, #16
   14618:	str	r0, [fp, #-16]
   1461c:	str	r1, [fp, #-20]	; 0xffffffec
   14620:	ldr	r3, [fp, #-20]	; 0xffffffec
   14624:	cmp	r3, #0
   14628:	beq	1465c <_start@@Base+0x2648>
   1462c:	mov	r1, #0
   14630:	ldr	r0, [fp, #-16]
   14634:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   14638:	str	r0, [fp, #-8]
   1463c:	ldr	r3, [fp, #-8]
   14640:	cmp	r3, #0
   14644:	beq	1465c <_start@@Base+0x2648>
   14648:	ldr	r3, [fp, #-8]
   1464c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14650:	str	r2, [r3]
   14654:	mov	r3, #0
   14658:	b	14660 <_start@@Base+0x264c>
   1465c:	mvn	r3, #0
   14660:	mov	r0, r3
   14664:	sub	sp, fp, #4
   14668:	ldr	fp, [sp]
   1466c:	add	sp, sp, #4
   14670:	pop	{pc}		; (ldr pc, [sp], #4)
   14674:	str	fp, [sp, #-8]!
   14678:	str	lr, [sp, #4]
   1467c:	add	fp, sp, #4
   14680:	sub	sp, sp, #16
   14684:	str	r0, [fp, #-16]
   14688:	mov	r3, r1
   1468c:	strh	r3, [fp, #-18]	; 0xffffffee
   14690:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   14694:	cmp	r3, #0
   14698:	bne	146a4 <_start@@Base+0x2690>
   1469c:	mov	r3, #0
   146a0:	b	146e4 <_start@@Base+0x26d0>
   146a4:	mov	r3, #2
   146a8:	mov	r2, #2
   146ac:	mov	r1, #1
   146b0:	ldr	r0, [fp, #-16]
   146b4:	bl	1aefc <flatcc_builder_table_add@@Base>
   146b8:	str	r0, [fp, #-8]
   146bc:	ldr	r3, [fp, #-8]
   146c0:	cmp	r3, #0
   146c4:	bne	146d0 <_start@@Base+0x26bc>
   146c8:	mvn	r3, #0
   146cc:	b	146e4 <_start@@Base+0x26d0>
   146d0:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   146d4:	mov	r1, r3
   146d8:	ldr	r0, [fp, #-8]
   146dc:	bl	13594 <_start@@Base+0x1580>
   146e0:	mov	r3, #0
   146e4:	mov	r0, r3
   146e8:	sub	sp, fp, #4
   146ec:	ldr	fp, [sp]
   146f0:	add	sp, sp, #4
   146f4:	pop	{pc}		; (ldr pc, [sp], #4)
   146f8:	str	fp, [sp, #-8]!
   146fc:	str	lr, [sp, #4]
   14700:	add	fp, sp, #4
   14704:	sub	sp, sp, #16
   14708:	str	r0, [fp, #-8]
   1470c:	str	r1, [fp, #-12]
   14710:	mov	r3, r2
   14714:	strh	r3, [fp, #-14]
   14718:	ldr	r0, [fp, #-8]
   1471c:	bl	139f4 <_start@@Base+0x19e0>
   14720:	mov	r3, r0
   14724:	cmp	r3, #0
   14728:	bne	14760 <_start@@Base+0x274c>
   1472c:	ldr	r1, [fp, #-12]
   14730:	ldr	r0, [fp, #-8]
   14734:	bl	14608 <_start@@Base+0x25f4>
   14738:	mov	r3, r0
   1473c:	cmp	r3, #0
   14740:	bne	14760 <_start@@Base+0x274c>
   14744:	ldrsh	r3, [fp, #-14]
   14748:	mov	r1, r3
   1474c:	ldr	r0, [fp, #-8]
   14750:	bl	14674 <_start@@Base+0x2660>
   14754:	mov	r3, r0
   14758:	cmp	r3, #0
   1475c:	beq	14768 <_start@@Base+0x2754>
   14760:	mov	r3, #0
   14764:	b	14774 <_start@@Base+0x2760>
   14768:	ldr	r0, [fp, #-8]
   1476c:	bl	13a2c <_start@@Base+0x1a18>
   14770:	mov	r3, r0
   14774:	mov	r0, r3
   14778:	sub	sp, fp, #4
   1477c:	ldr	fp, [sp]
   14780:	add	sp, sp, #4
   14784:	pop	{pc}		; (ldr pc, [sp], #4)

00014788 <create_monster_bottom_up@@Base>:
   14788:	str	fp, [sp, #-8]!
   1478c:	str	lr, [sp, #4]
   14790:	add	fp, sp, #4
   14794:	sub	sp, sp, #104	; 0x68
   14798:	str	r0, [fp, #-80]	; 0xffffffb0
   1479c:	str	r1, [fp, #-84]	; 0xffffffac
   147a0:	ldr	r3, [pc, #540]	; 149c4 <create_monster_bottom_up@@Base+0x23c>
   147a4:	add	r3, pc, r3
   147a8:	mov	r1, r3
   147ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   147b0:	bl	136c0 <_start@@Base+0x16ac>
   147b4:	str	r0, [fp, #-8]
   147b8:	mov	r3, #3
   147bc:	strh	r3, [fp, #-10]
   147c0:	ldr	r3, [pc, #512]	; 149c8 <create_monster_bottom_up@@Base+0x240>
   147c4:	add	r3, pc, r3
   147c8:	mov	r1, r3
   147cc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   147d0:	bl	136c0 <_start@@Base+0x16ac>
   147d4:	str	r0, [fp, #-16]
   147d8:	mov	r3, #5
   147dc:	strh	r3, [fp, #-18]	; 0xffffffee
   147e0:	ldrsh	r3, [fp, #-10]
   147e4:	mov	r2, r3
   147e8:	ldr	r1, [fp, #-8]
   147ec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   147f0:	bl	146f8 <_start@@Base+0x26e4>
   147f4:	str	r0, [fp, #-24]	; 0xffffffe8
   147f8:	ldrsh	r3, [fp, #-18]	; 0xffffffee
   147fc:	mov	r2, r3
   14800:	ldr	r1, [fp, #-16]
   14804:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14808:	bl	146f8 <_start@@Base+0x26e4>
   1480c:	str	r0, [fp, #-28]	; 0xffffffe4
   14810:	ldr	r3, [pc, #436]	; 149cc <create_monster_bottom_up@@Base+0x244>
   14814:	add	r3, pc, r3
   14818:	mov	r1, r3
   1481c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14820:	bl	136c0 <_start@@Base+0x16ac>
   14824:	str	r0, [fp, #-32]	; 0xffffffe0
   14828:	ldr	r3, [pc, #416]	; 149d0 <create_monster_bottom_up@@Base+0x248>
   1482c:	add	r3, pc, r3
   14830:	sub	r1, fp, #56	; 0x38
   14834:	mov	r0, r3
   14838:	ldrd	r2, [r0]
   1483c:	strd	r2, [r1]
   14840:	ldrh	r3, [r0, #8]
   14844:	strh	r3, [r1, #8]
   14848:	sub	r3, fp, #56	; 0x38
   1484c:	mov	r2, #10
   14850:	mov	r1, r3
   14854:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14858:	bl	1353c <_start@@Base+0x1528>
   1485c:	str	r0, [fp, #-36]	; 0xffffffdc
   14860:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14864:	bl	13ab4 <_start@@Base+0x1aa0>
   14868:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1486c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14870:	bl	13b1c <_start@@Base+0x1b08>
   14874:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14878:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1487c:	bl	13b1c <_start@@Base+0x1b08>
   14880:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14884:	bl	13ae8 <_start@@Base+0x1ad4>
   14888:	str	r0, [fp, #-40]	; 0xffffffd8
   1488c:	ldr	r3, [pc, #320]	; 149d4 <create_monster_bottom_up@@Base+0x24c>
   14890:	add	r3, pc, r3
   14894:	sub	r1, fp, #68	; 0x44
   14898:	mov	r0, r3
   1489c:	ldrd	r2, [r0]
   148a0:	strd	r2, [r1]
   148a4:	ldr	r3, [r0, #8]
   148a8:	str	r3, [r1, #8]
   148ac:	mov	r3, #300	; 0x12c
   148b0:	strh	r3, [fp, #-42]	; 0xffffffd6
   148b4:	mov	r3, #150	; 0x96
   148b8:	strh	r3, [fp, #-44]	; 0xffffffd4
   148bc:	sub	r3, fp, #76	; 0x4c
   148c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   148c4:	mov	r0, r3
   148c8:	bl	13b6c <_start@@Base+0x1b58>
   148cc:	ldr	r3, [fp, #-84]	; 0xffffffac
   148d0:	cmp	r3, #0
   148d4:	bne	1492c <create_monster_bottom_up@@Base+0x1a4>
   148d8:	ldrsh	ip, [fp, #-44]	; 0xffffffd4
   148dc:	ldrsh	lr, [fp, #-42]	; 0xffffffd6
   148e0:	sub	r0, fp, #68	; 0x44
   148e4:	add	r1, sp, #16
   148e8:	sub	r3, fp, #76	; 0x4c
   148ec:	ldrd	r2, [r3]
   148f0:	strd	r2, [r1]
   148f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   148f8:	str	r3, [sp, #12]
   148fc:	mov	r3, #0
   14900:	str	r3, [sp, #8]
   14904:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14908:	str	r3, [sp, #4]
   1490c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14910:	str	r3, [sp]
   14914:	mov	r3, lr
   14918:	mov	r2, ip
   1491c:	mov	r1, r0
   14920:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14924:	bl	14544 <_start@@Base+0x2530>
   14928:	b	149a0 <create_monster_bottom_up@@Base+0x218>
   1492c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14930:	bl	144ac <_start@@Base+0x2498>
   14934:	vldr	s2, [pc, #124]	; 149b8 <create_monster_bottom_up@@Base+0x230>
   14938:	vldr	s1, [pc, #124]	; 149bc <create_monster_bottom_up@@Base+0x234>
   1493c:	vldr	s0, [pc, #124]	; 149c0 <create_monster_bottom_up@@Base+0x238>
   14940:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14944:	bl	13bf4 <_start@@Base+0x1be0>
   14948:	ldrsh	r3, [fp, #-42]	; 0xffffffd6
   1494c:	mov	r1, r3
   14950:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14954:	bl	13d40 <_start@@Base+0x1d2c>
   14958:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1495c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14960:	bl	13dc4 <_start@@Base+0x1db0>
   14964:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14968:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1496c:	bl	13e7c <_start@@Base+0x1e68>
   14970:	mov	r1, #0
   14974:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14978:	bl	13f3c <_start@@Base+0x1f28>
   1497c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14980:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14984:	bl	13fc0 <_start@@Base+0x1fac>
   14988:	sub	r3, fp, #76	; 0x4c
   1498c:	ldm	r3, {r1, r2}
   14990:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14994:	bl	14150 <_start@@Base+0x213c>
   14998:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1499c:	bl	14500 <_start@@Base+0x24ec>
   149a0:	mov	r3, #0
   149a4:	mov	r0, r3
   149a8:	sub	sp, fp, #4
   149ac:	ldr	fp, [sp]
   149b0:	add	sp, sp, #4
   149b4:	pop	{pc}		; (ldr pc, [sp], #4)
   149b8:	submi	r0, r0, r0
   149bc:	andmi	r0, r0, r0
   149c0:	svccc	0x00800000
   149c4:	andeq	r8, r0, r4, lsl r2
   149c8:	strdeq	r8, [r0], -ip
   149cc:			; <UNDEFINED> instruction: 0x000081b0
   149d0:	muleq	r0, ip, r1
   149d4:	andeq	r8, r0, r4, asr #2

000149d8 <create_monster_top_down@@Base>:
   149d8:	str	fp, [sp, #-8]!
   149dc:	str	lr, [sp, #4]
   149e0:	add	fp, sp, #4
   149e4:	sub	sp, sp, #32
   149e8:	str	r0, [fp, #-32]	; 0xffffffe0
   149ec:	ldr	r3, [pc, #288]	; 14b14 <create_monster_top_down@@Base+0x13c>
   149f0:	add	r3, pc, r3
   149f4:	sub	r1, fp, #24
   149f8:	mov	r0, r3
   149fc:	ldrd	r2, [r0]
   14a00:	strd	r2, [r1]
   14a04:	ldrh	r3, [r0, #8]
   14a08:	strh	r3, [r1, #8]
   14a0c:	mov	r3, #10
   14a10:	str	r3, [fp, #-8]
   14a14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a18:	bl	144ac <_start@@Base+0x2498>
   14a1c:	vldr	s2, [pc, #228]	; 14b08 <create_monster_top_down@@Base+0x130>
   14a20:	vldr	s1, [pc, #228]	; 14b0c <create_monster_top_down@@Base+0x134>
   14a24:	vldr	s0, [pc, #228]	; 14b10 <create_monster_top_down@@Base+0x138>
   14a28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a2c:	bl	13bf4 <_start@@Base+0x1be0>
   14a30:	mov	r1, #300	; 0x12c
   14a34:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a38:	bl	13d40 <_start@@Base+0x1d2c>
   14a3c:	ldr	r3, [pc, #212]	; 14b18 <create_monster_top_down@@Base+0x140>
   14a40:	add	r3, pc, r3
   14a44:	mov	r1, r3
   14a48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a4c:	bl	13e30 <_start@@Base+0x1e1c>
   14a50:	sub	r3, fp, #24
   14a54:	ldr	r2, [fp, #-8]
   14a58:	mov	r1, r3
   14a5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a60:	bl	13ee8 <_start@@Base+0x1ed4>
   14a64:	mov	r1, #0
   14a68:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a6c:	bl	13f3c <_start@@Base+0x1f28>
   14a70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a74:	bl	1402c <_start@@Base+0x2018>
   14a78:	ldr	r3, [pc, #156]	; 14b1c <create_monster_top_down@@Base+0x144>
   14a7c:	add	r3, pc, r3
   14a80:	mov	r1, r3
   14a84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a88:	bl	136c0 <_start@@Base+0x16ac>
   14a8c:	mov	r3, r0
   14a90:	mov	r2, #3
   14a94:	mov	r1, r3
   14a98:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a9c:	bl	140f4 <_start@@Base+0x20e0>
   14aa0:	ldr	r3, [pc, #120]	; 14b20 <create_monster_top_down@@Base+0x148>
   14aa4:	add	r3, pc, r3
   14aa8:	mov	r1, r3
   14aac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ab0:	bl	136c0 <_start@@Base+0x16ac>
   14ab4:	mov	r3, r0
   14ab8:	mov	r2, #5
   14abc:	mov	r1, r3
   14ac0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ac4:	bl	140f4 <_start@@Base+0x20e0>
   14ac8:	mov	r3, r0
   14acc:	ldr	r3, [r3]
   14ad0:	str	r3, [fp, #-12]
   14ad4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ad8:	bl	14060 <_start@@Base+0x204c>
   14adc:	ldr	r1, [fp, #-12]
   14ae0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ae4:	bl	14304 <_start@@Base+0x22f0>
   14ae8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14aec:	bl	14500 <_start@@Base+0x24ec>
   14af0:	mov	r3, #0
   14af4:	mov	r0, r3
   14af8:	sub	sp, fp, #4
   14afc:	ldr	fp, [sp]
   14b00:	add	sp, sp, #4
   14b04:	pop	{pc}		; (ldr pc, [sp], #4)
   14b08:	submi	r0, r0, r0
   14b0c:	andmi	r0, r0, r0
   14b10:	svccc	0x00800000
   14b14:	ldrdeq	r7, [r0], -r8
   14b18:	andeq	r7, r0, r4, lsl #31
   14b1c:	andeq	r7, r0, ip, lsr pc
   14b20:	andeq	r7, r0, ip, lsl pc

00014b24 <access_monster_buffer@@Base>:
   14b24:	str	fp, [sp, #-8]!
   14b28:	str	lr, [sp, #4]
   14b2c:	add	fp, sp, #4
   14b30:	sub	sp, sp, #104	; 0x68
   14b34:	str	r0, [fp, #-104]	; 0xffffff98
   14b38:	ldr	r0, [fp, #-104]	; 0xffffff98
   14b3c:	bl	127d4 <_start@@Base+0x7c0>
   14b40:	str	r0, [fp, #-8]
   14b44:	ldr	r3, [fp, #-8]
   14b48:	cmp	r3, #0
   14b4c:	bne	14b70 <access_monster_buffer@@Base+0x4c>
   14b50:	ldr	r3, [pc, #1436]	; 150f4 <access_monster_buffer@@Base+0x5d0>
   14b54:	add	r3, pc, r3
   14b58:	mov	r2, #211	; 0xd3
   14b5c:	ldr	r1, [pc, #1428]	; 150f8 <access_monster_buffer@@Base+0x5d4>
   14b60:	add	r1, pc, r1
   14b64:	ldr	r0, [pc, #1424]	; 150fc <access_monster_buffer@@Base+0x5d8>
   14b68:	add	r0, pc, r0
   14b6c:	bl	12008 <__assert_fail@plt>
   14b70:	ldr	r0, [fp, #-8]
   14b74:	bl	12b20 <_start@@Base+0xb0c>
   14b78:	mov	r3, r0
   14b7c:	strh	r3, [fp, #-10]
   14b80:	ldr	r0, [fp, #-8]
   14b84:	bl	12938 <_start@@Base+0x924>
   14b88:	mov	r3, r0
   14b8c:	strh	r3, [fp, #-12]
   14b90:	ldr	r0, [fp, #-8]
   14b94:	bl	12d08 <_start@@Base+0xcf4>
   14b98:	str	r0, [fp, #-16]
   14b9c:	ldr	r0, [fp, #-16]
   14ba0:	bl	124fc <_start@@Base+0x4e8>
   14ba4:	str	r0, [fp, #-20]	; 0xffffffec
   14ba8:	ldrh	r3, [fp, #-10]
   14bac:	cmp	r3, #300	; 0x12c
   14bb0:	beq	14bd4 <access_monster_buffer@@Base+0xb0>
   14bb4:	ldr	r3, [pc, #1348]	; 15100 <access_monster_buffer@@Base+0x5dc>
   14bb8:	add	r3, pc, r3
   14bbc:	mov	r2, #219	; 0xdb
   14bc0:	ldr	r1, [pc, #1340]	; 15104 <access_monster_buffer@@Base+0x5e0>
   14bc4:	add	r1, pc, r1
   14bc8:	ldr	r0, [pc, #1336]	; 15108 <access_monster_buffer@@Base+0x5e4>
   14bcc:	add	r0, pc, r0
   14bd0:	bl	12008 <__assert_fail@plt>
   14bd4:	ldrh	r3, [fp, #-12]
   14bd8:	cmp	r3, #150	; 0x96
   14bdc:	beq	14c00 <access_monster_buffer@@Base+0xdc>
   14be0:	ldr	r3, [pc, #1316]	; 1510c <access_monster_buffer@@Base+0x5e8>
   14be4:	add	r3, pc, r3
   14be8:	mov	r2, #221	; 0xdd
   14bec:	ldr	r1, [pc, #1308]	; 15110 <access_monster_buffer@@Base+0x5ec>
   14bf0:	add	r1, pc, r1
   14bf4:	ldr	r0, [pc, #1304]	; 15114 <access_monster_buffer@@Base+0x5f0>
   14bf8:	add	r0, pc, r0
   14bfc:	bl	12008 <__assert_fail@plt>
   14c00:	ldr	r3, [pc, #1296]	; 15118 <access_monster_buffer@@Base+0x5f4>
   14c04:	add	r3, pc, r3
   14c08:	mov	r1, r3
   14c0c:	ldr	r0, [fp, #-16]
   14c10:	bl	11f54 <strcmp@plt>
   14c14:	mov	r3, r0
   14c18:	cmp	r3, #0
   14c1c:	beq	14c40 <access_monster_buffer@@Base+0x11c>
   14c20:	ldr	r3, [pc, #1268]	; 1511c <access_monster_buffer@@Base+0x5f8>
   14c24:	add	r3, pc, r3
   14c28:	mov	r2, #222	; 0xde
   14c2c:	ldr	r1, [pc, #1260]	; 15120 <access_monster_buffer@@Base+0x5fc>
   14c30:	add	r1, pc, r1
   14c34:	ldr	r0, [pc, #1256]	; 15124 <access_monster_buffer@@Base+0x600>
   14c38:	add	r0, pc, r0
   14c3c:	bl	12008 <__assert_fail@plt>
   14c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c44:	cmp	r3, #3
   14c48:	beq	14c6c <access_monster_buffer@@Base+0x148>
   14c4c:	ldr	r3, [pc, #1236]	; 15128 <access_monster_buffer@@Base+0x604>
   14c50:	add	r3, pc, r3
   14c54:	mov	r2, #223	; 0xdf
   14c58:	ldr	r1, [pc, #1228]	; 1512c <access_monster_buffer@@Base+0x608>
   14c5c:	add	r1, pc, r1
   14c60:	ldr	r0, [pc, #1224]	; 15130 <access_monster_buffer@@Base+0x60c>
   14c64:	add	r0, pc, r0
   14c68:	bl	12008 <__assert_fail@plt>
   14c6c:	ldr	r0, [fp, #-8]
   14c70:	bl	12c20 <_start@@Base+0xc0c>
   14c74:	str	r0, [fp, #-24]	; 0xffffffe8
   14c78:	ldr	r0, [fp, #-8]
   14c7c:	bl	12a38 <_start@@Base+0xa24>
   14c80:	str	r0, [fp, #-28]	; 0xffffffe4
   14c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14c88:	cmp	r3, #0
   14c8c:	bne	14cb0 <access_monster_buffer@@Base+0x18c>
   14c90:	ldr	r3, [pc, #1180]	; 15134 <access_monster_buffer@@Base+0x610>
   14c94:	add	r3, pc, r3
   14c98:	mov	r2, #227	; 0xe3
   14c9c:	ldr	r1, [pc, #1172]	; 15138 <access_monster_buffer@@Base+0x614>
   14ca0:	add	r1, pc, r1
   14ca4:	ldr	r0, [pc, #1168]	; 1513c <access_monster_buffer@@Base+0x618>
   14ca8:	add	r0, pc, r0
   14cac:	bl	12008 <__assert_fail@plt>
   14cb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14cb4:	cmp	r3, #0
   14cb8:	beq	14cdc <access_monster_buffer@@Base+0x1b8>
   14cbc:	ldr	r3, [pc, #1148]	; 15140 <access_monster_buffer@@Base+0x61c>
   14cc0:	add	r3, pc, r3
   14cc4:	mov	r2, #228	; 0xe4
   14cc8:	ldr	r1, [pc, #1140]	; 15144 <access_monster_buffer@@Base+0x620>
   14ccc:	add	r1, pc, r1
   14cd0:	ldr	r0, [pc, #1136]	; 15148 <access_monster_buffer@@Base+0x624>
   14cd4:	add	r0, pc, r0
   14cd8:	bl	12008 <__assert_fail@plt>
   14cdc:	ldr	r0, [fp, #-8]
   14ce0:	bl	12844 <_start@@Base+0x830>
   14ce4:	str	r0, [fp, #-32]	; 0xffffffe0
   14ce8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14cec:	cmp	r3, #0
   14cf0:	bne	14d14 <access_monster_buffer@@Base+0x1f0>
   14cf4:	ldr	r3, [pc, #1104]	; 1514c <access_monster_buffer@@Base+0x628>
   14cf8:	add	r3, pc, r3
   14cfc:	mov	r2, #232	; 0xe8
   14d00:	ldr	r1, [pc, #1096]	; 15150 <access_monster_buffer@@Base+0x62c>
   14d04:	add	r1, pc, r1
   14d08:	ldr	r0, [pc, #1092]	; 15154 <access_monster_buffer@@Base+0x630>
   14d0c:	add	r0, pc, r0
   14d10:	bl	12008 <__assert_fail@plt>
   14d14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d18:	bl	126dc <_start@@Base+0x6c8>
   14d1c:	vstr	s0, [fp, #-36]	; 0xffffffdc
   14d20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d24:	bl	1272c <_start@@Base+0x718>
   14d28:	vstr	s0, [fp, #-40]	; 0xffffffd8
   14d2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d30:	bl	12780 <_start@@Base+0x76c>
   14d34:	vstr	s0, [fp, #-44]	; 0xffffffd4
   14d38:	vldr	s15, [fp, #-36]	; 0xffffffdc
   14d3c:	vldr	s14, [pc, #932]	; 150e8 <access_monster_buffer@@Base+0x5c4>
   14d40:	vcmp.f32	s15, s14
   14d44:	vmrs	APSR_nzcv, fpscr
   14d48:	beq	14d6c <access_monster_buffer@@Base+0x248>
   14d4c:	ldr	r3, [pc, #1028]	; 15158 <access_monster_buffer@@Base+0x634>
   14d50:	add	r3, pc, r3
   14d54:	mov	r2, #240	; 0xf0
   14d58:	ldr	r1, [pc, #1020]	; 1515c <access_monster_buffer@@Base+0x638>
   14d5c:	add	r1, pc, r1
   14d60:	ldr	r0, [pc, #1016]	; 15160 <access_monster_buffer@@Base+0x63c>
   14d64:	add	r0, pc, r0
   14d68:	bl	12008 <__assert_fail@plt>
   14d6c:	vldr	s15, [fp, #-40]	; 0xffffffd8
   14d70:	vldr	s14, [pc, #884]	; 150ec <access_monster_buffer@@Base+0x5c8>
   14d74:	vcmp.f32	s15, s14
   14d78:	vmrs	APSR_nzcv, fpscr
   14d7c:	beq	14da0 <access_monster_buffer@@Base+0x27c>
   14d80:	ldr	r3, [pc, #988]	; 15164 <access_monster_buffer@@Base+0x640>
   14d84:	add	r3, pc, r3
   14d88:	mov	r2, #241	; 0xf1
   14d8c:	ldr	r1, [pc, #980]	; 15168 <access_monster_buffer@@Base+0x644>
   14d90:	add	r1, pc, r1
   14d94:	ldr	r0, [pc, #976]	; 1516c <access_monster_buffer@@Base+0x648>
   14d98:	add	r0, pc, r0
   14d9c:	bl	12008 <__assert_fail@plt>
   14da0:	vldr	s15, [fp, #-44]	; 0xffffffd4
   14da4:	vldr	s14, [pc, #836]	; 150f0 <access_monster_buffer@@Base+0x5cc>
   14da8:	vcmp.f32	s15, s14
   14dac:	vmrs	APSR_nzcv, fpscr
   14db0:	beq	14dd4 <access_monster_buffer@@Base+0x2b0>
   14db4:	ldr	r3, [pc, #948]	; 15170 <access_monster_buffer@@Base+0x64c>
   14db8:	add	r3, pc, r3
   14dbc:	mov	r2, #242	; 0xf2
   14dc0:	ldr	r1, [pc, #940]	; 15174 <access_monster_buffer@@Base+0x650>
   14dc4:	add	r1, pc, r1
   14dc8:	ldr	r0, [pc, #936]	; 15178 <access_monster_buffer@@Base+0x654>
   14dcc:	add	r0, pc, r0
   14dd0:	bl	12008 <__assert_fail@plt>
   14dd4:	sub	r3, fp, #96	; 0x60
   14dd8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14ddc:	mov	r0, r3
   14de0:	bl	138b8 <_start@@Base+0x18a4>
   14de4:	vldr	s15, [fp, #-96]	; 0xffffffa0
   14de8:	vldr	s14, [pc, #760]	; 150e8 <access_monster_buffer@@Base+0x5c4>
   14dec:	vcmp.f32	s15, s14
   14df0:	vmrs	APSR_nzcv, fpscr
   14df4:	beq	14e18 <access_monster_buffer@@Base+0x2f4>
   14df8:	ldr	r3, [pc, #892]	; 1517c <access_monster_buffer@@Base+0x658>
   14dfc:	add	r3, pc, r3
   14e00:	mov	r2, #250	; 0xfa
   14e04:	ldr	r1, [pc, #884]	; 15180 <access_monster_buffer@@Base+0x65c>
   14e08:	add	r1, pc, r1
   14e0c:	ldr	r0, [pc, #880]	; 15184 <access_monster_buffer@@Base+0x660>
   14e10:	add	r0, pc, r0
   14e14:	bl	12008 <__assert_fail@plt>
   14e18:	vldr	s15, [fp, #-92]	; 0xffffffa4
   14e1c:	vldr	s14, [pc, #712]	; 150ec <access_monster_buffer@@Base+0x5c8>
   14e20:	vcmp.f32	s15, s14
   14e24:	vmrs	APSR_nzcv, fpscr
   14e28:	beq	14e4c <access_monster_buffer@@Base+0x328>
   14e2c:	ldr	r3, [pc, #852]	; 15188 <access_monster_buffer@@Base+0x664>
   14e30:	add	r3, pc, r3
   14e34:	mov	r2, #251	; 0xfb
   14e38:	ldr	r1, [pc, #844]	; 1518c <access_monster_buffer@@Base+0x668>
   14e3c:	add	r1, pc, r1
   14e40:	ldr	r0, [pc, #840]	; 15190 <access_monster_buffer@@Base+0x66c>
   14e44:	add	r0, pc, r0
   14e48:	bl	12008 <__assert_fail@plt>
   14e4c:	vldr	s15, [fp, #-88]	; 0xffffffa8
   14e50:	vldr	s14, [pc, #664]	; 150f0 <access_monster_buffer@@Base+0x5cc>
   14e54:	vcmp.f32	s15, s14
   14e58:	vmrs	APSR_nzcv, fpscr
   14e5c:	beq	14e80 <access_monster_buffer@@Base+0x35c>
   14e60:	ldr	r3, [pc, #812]	; 15194 <access_monster_buffer@@Base+0x670>
   14e64:	add	r3, pc, r3
   14e68:	mov	r2, #252	; 0xfc
   14e6c:	ldr	r1, [pc, #804]	; 15198 <access_monster_buffer@@Base+0x674>
   14e70:	add	r1, pc, r1
   14e74:	ldr	r0, [pc, #800]	; 1519c <access_monster_buffer@@Base+0x678>
   14e78:	add	r0, pc, r0
   14e7c:	bl	12008 <__assert_fail@plt>
   14e80:	ldr	r0, [fp, #-8]
   14e84:	bl	12e18 <_start@@Base+0xe04>
   14e88:	str	r0, [fp, #-48]	; 0xffffffd0
   14e8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14e90:	bl	1254c <_start@@Base+0x538>
   14e94:	str	r0, [fp, #-52]	; 0xffffffcc
   14e98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e9c:	cmp	r3, #0
   14ea0:	bne	14ec4 <access_monster_buffer@@Base+0x3a0>
   14ea4:	ldr	r3, [pc, #756]	; 151a0 <access_monster_buffer@@Base+0x67c>
   14ea8:	add	r3, pc, r3
   14eac:	movw	r2, #261	; 0x105
   14eb0:	ldr	r1, [pc, #748]	; 151a4 <access_monster_buffer@@Base+0x680>
   14eb4:	add	r1, pc, r1
   14eb8:	ldr	r0, [pc, #744]	; 151a8 <access_monster_buffer@@Base+0x684>
   14ebc:	add	r0, pc, r0
   14ec0:	bl	12008 <__assert_fail@plt>
   14ec4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14ec8:	cmp	r3, #10
   14ecc:	beq	14ef0 <access_monster_buffer@@Base+0x3cc>
   14ed0:	ldr	r3, [pc, #724]	; 151ac <access_monster_buffer@@Base+0x688>
   14ed4:	add	r3, pc, r3
   14ed8:	movw	r2, #263	; 0x107
   14edc:	ldr	r1, [pc, #716]	; 151b0 <access_monster_buffer@@Base+0x68c>
   14ee0:	add	r1, pc, r1
   14ee4:	ldr	r0, [pc, #712]	; 151b4 <access_monster_buffer@@Base+0x690>
   14ee8:	add	r0, pc, r0
   14eec:	bl	12008 <__assert_fail@plt>
   14ef0:	mov	r1, #2
   14ef4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14ef8:	bl	12580 <_start@@Base+0x56c>
   14efc:	mov	r3, r0
   14f00:	strb	r3, [fp, #-53]	; 0xffffffcb
   14f04:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   14f08:	cmp	r3, #2
   14f0c:	beq	14f30 <access_monster_buffer@@Base+0x40c>
   14f10:	ldr	r3, [pc, #672]	; 151b8 <access_monster_buffer@@Base+0x694>
   14f14:	add	r3, pc, r3
   14f18:	movw	r2, #267	; 0x10b
   14f1c:	ldr	r1, [pc, #664]	; 151bc <access_monster_buffer@@Base+0x698>
   14f20:	add	r1, pc, r1
   14f24:	ldr	r0, [pc, #660]	; 151c0 <access_monster_buffer@@Base+0x69c>
   14f28:	add	r0, pc, r0
   14f2c:	bl	12008 <__assert_fail@plt>
   14f30:	ldr	r0, [fp, #-8]
   14f34:	bl	12f28 <_start@@Base+0xf14>
   14f38:	str	r0, [fp, #-60]	; 0xffffffc4
   14f3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14f40:	bl	13244 <_start@@Base+0x1230>
   14f44:	str	r0, [fp, #-64]	; 0xffffffc0
   14f48:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14f4c:	cmp	r3, #2
   14f50:	beq	14f74 <access_monster_buffer@@Base+0x450>
   14f54:	ldr	r3, [pc, #616]	; 151c4 <access_monster_buffer@@Base+0x6a0>
   14f58:	add	r3, pc, r3
   14f5c:	movw	r2, #271	; 0x10f
   14f60:	ldr	r1, [pc, #608]	; 151c8 <access_monster_buffer@@Base+0x6a4>
   14f64:	add	r1, pc, r1
   14f68:	ldr	r0, [pc, #604]	; 151cc <access_monster_buffer@@Base+0x6a8>
   14f6c:	add	r0, pc, r0
   14f70:	bl	12008 <__assert_fail@plt>
   14f74:	mov	r1, #1
   14f78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14f7c:	bl	13294 <_start@@Base+0x1280>
   14f80:	mov	r3, r0
   14f84:	mov	r0, r3
   14f88:	bl	1332c <_start@@Base+0x1318>
   14f8c:	str	r0, [fp, #-68]	; 0xffffffbc
   14f90:	mov	r1, #1
   14f94:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14f98:	bl	13294 <_start@@Base+0x1280>
   14f9c:	mov	r3, r0
   14fa0:	mov	r0, r3
   14fa4:	bl	1343c <_start@@Base+0x1428>
   14fa8:	mov	r3, r0
   14fac:	strh	r3, [fp, #-70]	; 0xffffffba
   14fb0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14fb4:	cmp	r3, #0
   14fb8:	beq	14fdc <access_monster_buffer@@Base+0x4b8>
   14fbc:	ldr	r3, [pc, #524]	; 151d0 <access_monster_buffer@@Base+0x6ac>
   14fc0:	add	r3, pc, r3
   14fc4:	mov	r1, r3
   14fc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fcc:	bl	11f54 <strcmp@plt>
   14fd0:	mov	r3, r0
   14fd4:	cmp	r3, #0
   14fd8:	beq	14ffc <access_monster_buffer@@Base+0x4d8>
   14fdc:	ldr	r3, [pc, #496]	; 151d4 <access_monster_buffer@@Base+0x6b0>
   14fe0:	add	r3, pc, r3
   14fe4:	movw	r2, #275	; 0x113
   14fe8:	ldr	r1, [pc, #488]	; 151d8 <access_monster_buffer@@Base+0x6b4>
   14fec:	add	r1, pc, r1
   14ff0:	ldr	r0, [pc, #484]	; 151dc <access_monster_buffer@@Base+0x6b8>
   14ff4:	add	r0, pc, r0
   14ff8:	bl	12008 <__assert_fail@plt>
   14ffc:	ldrh	r3, [fp, #-70]	; 0xffffffba
   15000:	cmp	r3, #5
   15004:	beq	15028 <access_monster_buffer@@Base+0x504>
   15008:	ldr	r3, [pc, #464]	; 151e0 <access_monster_buffer@@Base+0x6bc>
   1500c:	add	r3, pc, r3
   15010:	mov	r2, #276	; 0x114
   15014:	ldr	r1, [pc, #456]	; 151e4 <access_monster_buffer@@Base+0x6c0>
   15018:	add	r1, pc, r1
   1501c:	ldr	r0, [pc, #452]	; 151e8 <access_monster_buffer@@Base+0x6c4>
   15020:	add	r0, pc, r0
   15024:	bl	12008 <__assert_fail@plt>
   15028:	ldr	r0, [fp, #-8]
   1502c:	bl	13038 <_start@@Base+0x1024>
   15030:	mov	r3, r0
   15034:	cmp	r3, #1
   15038:	bne	150d0 <access_monster_buffer@@Base+0x5ac>
   1503c:	ldr	r0, [fp, #-8]
   15040:	bl	13138 <_start@@Base+0x1124>
   15044:	str	r0, [fp, #-76]	; 0xffffffb4
   15048:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1504c:	bl	1332c <_start@@Base+0x1318>
   15050:	str	r0, [fp, #-80]	; 0xffffffb0
   15054:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15058:	bl	1343c <_start@@Base+0x1428>
   1505c:	mov	r3, r0
   15060:	strh	r3, [fp, #-82]	; 0xffffffae
   15064:	ldr	r3, [pc, #384]	; 151ec <access_monster_buffer@@Base+0x6c8>
   15068:	add	r3, pc, r3
   1506c:	mov	r1, r3
   15070:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15074:	bl	11f54 <strcmp@plt>
   15078:	mov	r3, r0
   1507c:	cmp	r3, #0
   15080:	beq	150a4 <access_monster_buffer@@Base+0x580>
   15084:	ldr	r3, [pc, #356]	; 151f0 <access_monster_buffer@@Base+0x6cc>
   15088:	add	r3, pc, r3
   1508c:	movw	r2, #286	; 0x11e
   15090:	ldr	r1, [pc, #348]	; 151f4 <access_monster_buffer@@Base+0x6d0>
   15094:	add	r1, pc, r1
   15098:	ldr	r0, [pc, #344]	; 151f8 <access_monster_buffer@@Base+0x6d4>
   1509c:	add	r0, pc, r0
   150a0:	bl	12008 <__assert_fail@plt>
   150a4:	ldrh	r3, [fp, #-82]	; 0xffffffae
   150a8:	cmp	r3, #5
   150ac:	beq	150d0 <access_monster_buffer@@Base+0x5ac>
   150b0:	ldr	r3, [pc, #324]	; 151fc <access_monster_buffer@@Base+0x6d8>
   150b4:	add	r3, pc, r3
   150b8:	movw	r2, #287	; 0x11f
   150bc:	ldr	r1, [pc, #316]	; 15200 <access_monster_buffer@@Base+0x6dc>
   150c0:	add	r1, pc, r1
   150c4:	ldr	r0, [pc, #312]	; 15204 <access_monster_buffer@@Base+0x6e0>
   150c8:	add	r0, pc, r0
   150cc:	bl	12008 <__assert_fail@plt>
   150d0:	mov	r3, #0
   150d4:	mov	r0, r3
   150d8:	sub	sp, fp, #4
   150dc:	ldr	fp, [sp]
   150e0:	add	sp, sp, #4
   150e4:	pop	{pc}		; (ldr pc, [sp], #4)
   150e8:	svccc	0x00800000
   150ec:	andmi	r0, r0, r0
   150f0:	submi	r0, r0, r0
   150f4:	andeq	r7, r0, r4, ror #30
   150f8:	andeq	r7, r0, r0, lsl #29
   150fc:	ldrdeq	r7, [r0], -ip
   15100:	andeq	r7, r0, r0, lsl #30
   15104:	andeq	r7, r0, ip, lsl lr
   15108:	andeq	r7, r0, r8, ror lr
   1510c:	ldrdeq	r7, [r0], -r4
   15110:	strdeq	r7, [r0], -r0
   15114:	andeq	r7, r0, ip, asr #28
   15118:	andeq	r7, r0, r0, asr #27
   1511c:	muleq	r0, r4, lr
   15120:			; <UNDEFINED> instruction: 0x00007db0
   15124:	andeq	r7, r0, ip, lsl #28
   15128:	andeq	r7, r0, r8, ror #28
   1512c:	andeq	r7, r0, r4, lsl #27
   15130:	andeq	r7, r0, r0, ror #27
   15134:	andeq	r7, r0, r4, lsr #28
   15138:	andeq	r7, r0, r0, asr #26
   1513c:	muleq	r0, ip, sp
   15140:	strdeq	r7, [r0], -r8
   15144:	andeq	r7, r0, r4, lsl sp
   15148:	andeq	r7, r0, r0, ror sp
   1514c:	andeq	r7, r0, r0, asr #27
   15150:	ldrdeq	r7, [r0], -ip
   15154:	andeq	r7, r0, r8, lsr sp
   15158:	andeq	r7, r0, r8, ror #26
   1515c:	andeq	r7, r0, r4, lsl #25
   15160:	andeq	r7, r0, r0, ror #25
   15164:	andeq	r7, r0, r4, lsr sp
   15168:	andeq	r7, r0, r0, asr ip
   1516c:	andeq	r7, r0, ip, lsr #25
   15170:	andeq	r7, r0, r0, lsl #26
   15174:	andeq	r7, r0, ip, lsl ip
   15178:	andeq	r7, r0, r8, ror ip
   1517c:			; <UNDEFINED> instruction: 0x00007cbc
   15180:	ldrdeq	r7, [r0], -r8
   15184:	andeq	r7, r0, r4, lsr ip
   15188:	andeq	r7, r0, r8, lsl #25
   1518c:	andeq	r7, r0, r4, lsr #23
   15190:	andeq	r7, r0, r0, lsl #24
   15194:	andeq	r7, r0, r4, asr ip
   15198:	andeq	r7, r0, r0, ror fp
   1519c:	andeq	r7, r0, ip, asr #23
   151a0:	andeq	r7, r0, r0, lsl ip
   151a4:	andeq	r7, r0, ip, lsr #22
   151a8:	andeq	r7, r0, r8, lsl #23
   151ac:	andeq	r7, r0, r4, ror #23
   151b0:	andeq	r7, r0, r0, lsl #22
   151b4:	andeq	r7, r0, ip, asr fp
   151b8:	andeq	r7, r0, r4, lsr #23
   151bc:	andeq	r7, r0, r0, asr #21
   151c0:	andeq	r7, r0, ip, lsl fp
   151c4:	andeq	r7, r0, r0, ror #22
   151c8:	andeq	r7, r0, ip, ror sl
   151cc:	ldrdeq	r7, [r0], -r8
   151d0:	andeq	r7, r0, r0, lsl #20
   151d4:	ldrdeq	r7, [r0], -r8
   151d8:	strdeq	r7, [r0], -r4
   151dc:	andeq	r7, r0, r0, asr sl
   151e0:	andeq	r7, r0, ip, lsr #21
   151e4:	andeq	r7, r0, r8, asr #19
   151e8:	andeq	r7, r0, r4, lsr #20
   151ec:	andeq	r7, r0, r8, asr r9
   151f0:	andeq	r7, r0, r0, lsr sl
   151f4:	andeq	r7, r0, ip, asr #18
   151f8:	andeq	r7, r0, r8, lsr #19
   151fc:	andeq	r7, r0, r4, lsl #20
   15200:	andeq	r7, r0, r0, lsr #18
   15204:	andeq	r7, r0, ip, ror r9

00015208 <main@@Base>:
   15208:	str	fp, [sp, #-8]!
   1520c:	str	lr, [sp, #4]
   15210:	add	fp, sp, #4
   15214:	sub	sp, sp, #248	; 0xf8
   15218:	str	r0, [fp, #-248]	; 0xffffff08
   1521c:	str	r1, [fp, #-252]	; 0xffffff04
   15220:	sub	r3, fp, #240	; 0xf0
   15224:	mov	r0, r3
   15228:	bl	161b8 <flatcc_builder_init@@Base>
   1522c:	sub	r3, fp, #240	; 0xf0
   15230:	mov	r1, #0
   15234:	mov	r0, r3
   15238:	bl	14788 <create_monster_bottom_up@@Base>
   1523c:	mov	r3, r0
   15240:	cmp	r3, #0
   15244:	beq	15268 <main@@Base+0x60>
   15248:	ldr	r3, [pc, #328]	; 15398 <main@@Base+0x190>
   1524c:	add	r3, pc, r3
   15250:	mov	r2, #308	; 0x134
   15254:	ldr	r1, [pc, #320]	; 1539c <main@@Base+0x194>
   15258:	add	r1, pc, r1
   1525c:	ldr	r0, [pc, #316]	; 153a0 <main@@Base+0x198>
   15260:	add	r0, pc, r0
   15264:	bl	12008 <__assert_fail@plt>
   15268:	sub	r2, fp, #244	; 0xf4
   1526c:	sub	r3, fp, #240	; 0xf0
   15270:	mov	r1, r2
   15274:	mov	r0, r3
   15278:	bl	1b84c <flatcc_builder_finalize_aligned_buffer@@Base>
   1527c:	str	r0, [fp, #-8]
   15280:	ldr	r0, [fp, #-8]
   15284:	bl	1b988 <flatcc_builder_aligned_free@@Base>
   15288:	sub	r3, fp, #240	; 0xf0
   1528c:	mov	r0, r3
   15290:	bl	16458 <flatcc_builder_reset@@Base>
   15294:	sub	r3, fp, #240	; 0xf0
   15298:	mov	r1, #1
   1529c:	mov	r0, r3
   152a0:	bl	14788 <create_monster_bottom_up@@Base>
   152a4:	mov	r3, r0
   152a8:	cmp	r3, #0
   152ac:	beq	152d0 <main@@Base+0xc8>
   152b0:	ldr	r3, [pc, #236]	; 153a4 <main@@Base+0x19c>
   152b4:	add	r3, pc, r3
   152b8:	movw	r2, #335	; 0x14f
   152bc:	ldr	r1, [pc, #228]	; 153a8 <main@@Base+0x1a0>
   152c0:	add	r1, pc, r1
   152c4:	ldr	r0, [pc, #224]	; 153ac <main@@Base+0x1a4>
   152c8:	add	r0, pc, r0
   152cc:	bl	12008 <__assert_fail@plt>
   152d0:	sub	r2, fp, #244	; 0xf4
   152d4:	sub	r3, fp, #240	; 0xf0
   152d8:	mov	r1, r2
   152dc:	mov	r0, r3
   152e0:	bl	1b84c <flatcc_builder_finalize_aligned_buffer@@Base>
   152e4:	str	r0, [fp, #-8]
   152e8:	ldr	r0, [fp, #-8]
   152ec:	bl	14b24 <access_monster_buffer@@Base>
   152f0:	ldr	r0, [fp, #-8]
   152f4:	bl	1b988 <flatcc_builder_aligned_free@@Base>
   152f8:	sub	r3, fp, #240	; 0xf0
   152fc:	mov	r0, r3
   15300:	bl	16458 <flatcc_builder_reset@@Base>
   15304:	sub	r3, fp, #240	; 0xf0
   15308:	mov	r0, r3
   1530c:	bl	149d8 <create_monster_top_down@@Base>
   15310:	sub	r2, fp, #244	; 0xf4
   15314:	sub	r3, fp, #240	; 0xf0
   15318:	mov	r1, r2
   1531c:	mov	r0, r3
   15320:	bl	1b740 <flatcc_builder_finalize_buffer@@Base>
   15324:	str	r0, [fp, #-8]
   15328:	ldr	r0, [fp, #-8]
   1532c:	bl	14b24 <access_monster_buffer@@Base>
   15330:	mov	r3, r0
   15334:	cmp	r3, #0
   15338:	beq	1535c <main@@Base+0x154>
   1533c:	ldr	r3, [pc, #108]	; 153b0 <main@@Base+0x1a8>
   15340:	add	r3, pc, r3
   15344:	movw	r2, #342	; 0x156
   15348:	ldr	r1, [pc, #100]	; 153b4 <main@@Base+0x1ac>
   1534c:	add	r1, pc, r1
   15350:	ldr	r0, [pc, #96]	; 153b8 <main@@Base+0x1b0>
   15354:	add	r0, pc, r0
   15358:	bl	12008 <__assert_fail@plt>
   1535c:	ldr	r0, [fp, #-8]
   15360:	bl	11f60 <free@plt>
   15364:	sub	r3, fp, #240	; 0xf0
   15368:	mov	r0, r3
   1536c:	bl	16494 <flatcc_builder_clear@@Base>
   15370:	ldr	r3, [pc, #68]	; 153bc <main@@Base+0x1b4>
   15374:	add	r3, pc, r3
   15378:	mov	r0, r3
   1537c:	bl	11f90 <puts@plt>
   15380:	mov	r3, #0
   15384:	mov	r0, r3
   15388:	sub	sp, fp, #4
   1538c:	ldr	fp, [sp]
   15390:	add	sp, sp, #4
   15394:	pop	{pc}		; (ldr pc, [sp], #4)
   15398:	andeq	r7, r0, r4, lsr sl
   1539c:	andeq	r7, r0, r8, lsl #15
   153a0:	andeq	r7, r0, r4, ror #15
   153a4:	andeq	r7, r0, ip, asr #19
   153a8:	andeq	r7, r0, r0, lsr #14
   153ac:	andeq	r7, r0, ip, ror r7
   153b0:	andeq	r7, r0, r0, asr #18
   153b4:	muleq	r0, r4, r6
   153b8:	strdeq	r7, [r0], -r0
   153bc:	ldrdeq	r7, [r0], -r4
   153c0:	str	fp, [sp, #-8]!
   153c4:	str	lr, [sp, #4]
   153c8:	add	fp, sp, #4
   153cc:	sub	sp, sp, #16
   153d0:	str	r0, [fp, #-16]
   153d4:	str	r1, [fp, #-20]	; 0xffffffec
   153d8:	mov	r3, #0
   153dc:	str	r3, [fp, #-12]
   153e0:	ldr	r3, [fp, #-16]
   153e4:	cmp	r3, #3
   153e8:	bhi	153f4 <main@@Base+0x1ec>
   153ec:	mov	r3, #4
   153f0:	str	r3, [fp, #-16]
   153f4:	sub	r3, fp, #12
   153f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   153fc:	ldr	r1, [fp, #-16]
   15400:	mov	r0, r3
   15404:	bl	11fcc <posix_memalign@plt>
   15408:	str	r0, [fp, #-8]
   1540c:	ldr	r3, [fp, #-8]
   15410:	cmp	r3, #0
   15414:	beq	15438 <main@@Base+0x230>
   15418:	ldr	r3, [fp, #-12]
   1541c:	cmp	r3, #0
   15420:	beq	15438 <main@@Base+0x230>
   15424:	ldr	r3, [fp, #-12]
   15428:	mov	r0, r3
   1542c:	bl	11f60 <free@plt>
   15430:	mov	r3, #0
   15434:	str	r3, [fp, #-12]
   15438:	ldr	r3, [fp, #-12]
   1543c:	mov	r0, r3
   15440:	sub	sp, fp, #4
   15444:	ldr	fp, [sp]
   15448:	add	sp, sp, #4
   1544c:	pop	{pc}		; (ldr pc, [sp], #4)
   15450:	push	{fp}		; (str fp, [sp, #-4]!)
   15454:	add	fp, sp, #0
   15458:	sub	sp, sp, #12
   1545c:	str	r0, [fp, #-8]
   15460:	ldr	r3, [fp, #-8]
   15464:	mov	r0, r3
   15468:	add	sp, fp, #0
   1546c:	pop	{fp}		; (ldr fp, [sp], #4)
   15470:	bx	lr
   15474:	push	{fp}		; (str fp, [sp, #-4]!)
   15478:	add	fp, sp, #0
   1547c:	sub	sp, sp, #12
   15480:	mov	r3, r0
   15484:	strb	r3, [fp, #-5]
   15488:	ldrb	r3, [fp, #-5]
   1548c:	mov	r0, r3
   15490:	add	sp, fp, #0
   15494:	pop	{fp}		; (ldr fp, [sp], #4)
   15498:	bx	lr
   1549c:	push	{fp}		; (str fp, [sp, #-4]!)
   154a0:	add	fp, sp, #0
   154a4:	sub	sp, sp, #12
   154a8:	str	r0, [fp, #-8]
   154ac:	ldr	r3, [fp, #-8]
   154b0:	mov	r0, r3
   154b4:	add	sp, fp, #0
   154b8:	pop	{fp}		; (ldr fp, [sp], #4)
   154bc:	bx	lr
   154c0:	push	{fp}		; (str fp, [sp, #-4]!)
   154c4:	add	fp, sp, #0
   154c8:	sub	sp, sp, #12
   154cc:	str	r0, [fp, #-8]
   154d0:	str	r1, [fp, #-12]
   154d4:	ldr	r3, [fp, #-8]
   154d8:	ldr	r2, [r3]
   154dc:	ldr	r3, [fp, #-8]
   154e0:	ldr	r3, [r3, #4]
   154e4:	cmp	r2, r3
   154e8:	bne	15514 <main@@Base+0x30c>
   154ec:	ldr	r3, [fp, #-12]
   154f0:	cmp	r3, #0
   154f4:	beq	15508 <main@@Base+0x300>
   154f8:	ldr	r3, [fp, #-8]
   154fc:	ldr	r2, [r3, #24]
   15500:	ldr	r3, [fp, #-12]
   15504:	str	r2, [r3]
   15508:	ldr	r3, [fp, #-8]
   1550c:	ldr	r3, [r3, #8]
   15510:	b	15530 <main@@Base+0x328>
   15514:	ldr	r3, [fp, #-12]
   15518:	cmp	r3, #0
   1551c:	beq	1552c <main@@Base+0x324>
   15520:	ldr	r3, [fp, #-12]
   15524:	mov	r2, #0
   15528:	str	r2, [r3]
   1552c:	mov	r3, #0
   15530:	mov	r0, r3
   15534:	add	sp, fp, #0
   15538:	pop	{fp}		; (ldr fp, [sp], #4)
   1553c:	bx	lr
   15540:	str	fp, [sp, #-8]!
   15544:	str	lr, [sp, #4]
   15548:	add	fp, sp, #4
   1554c:	sub	sp, sp, #16
   15550:	str	r0, [fp, #-16]
   15554:	str	r1, [fp, #-20]	; 0xffffffec
   15558:	ldr	r2, [fp, #-20]	; 0xffffffec
   1555c:	mov	r1, #0
   15560:	ldr	r0, [fp, #-16]
   15564:	bl	11ff0 <memchr@plt>
   15568:	str	r0, [fp, #-8]
   1556c:	ldr	r3, [fp, #-8]
   15570:	cmp	r3, #0
   15574:	beq	15588 <main@@Base+0x380>
   15578:	ldr	r2, [fp, #-8]
   1557c:	ldr	r3, [fp, #-16]
   15580:	sub	r3, r2, r3
   15584:	b	1558c <main@@Base+0x384>
   15588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1558c:	mov	r0, r3
   15590:	sub	sp, fp, #4
   15594:	ldr	fp, [sp]
   15598:	add	sp, sp, #4
   1559c:	pop	{pc}		; (ldr pc, [sp], #4)

000155a0 <flatcc_builder_default_alloc@@Base>:
   155a0:	str	fp, [sp, #-8]!
   155a4:	str	lr, [sp, #4]
   155a8:	add	fp, sp, #4
   155ac:	sub	sp, sp, #24
   155b0:	str	r0, [fp, #-16]
   155b4:	str	r1, [fp, #-20]	; 0xffffffec
   155b8:	str	r2, [fp, #-24]	; 0xffffffe8
   155bc:	str	r3, [fp, #-28]	; 0xffffffe4
   155c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155c4:	cmp	r3, #0
   155c8:	bne	1560c <flatcc_builder_default_alloc@@Base+0x6c>
   155cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   155d0:	ldr	r3, [r3]
   155d4:	cmp	r3, #0
   155d8:	beq	15604 <flatcc_builder_default_alloc@@Base+0x64>
   155dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   155e0:	ldr	r3, [r3]
   155e4:	mov	r0, r3
   155e8:	bl	11f60 <free@plt>
   155ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   155f0:	mov	r2, #0
   155f4:	str	r2, [r3]
   155f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   155fc:	mov	r2, #0
   15600:	str	r2, [r3, #4]
   15604:	mov	r3, #0
   15608:	b	15760 <flatcc_builder_default_alloc@@Base+0x1c0>
   1560c:	ldr	r3, [fp, #4]
   15610:	sub	r3, r3, #1
   15614:	cmp	r3, #6
   15618:	addls	pc, pc, r3, lsl #2
   1561c:	b	1566c <flatcc_builder_default_alloc@@Base+0xcc>
   15620:	b	1563c <flatcc_builder_default_alloc@@Base+0x9c>
   15624:	b	1566c <flatcc_builder_default_alloc@@Base+0xcc>
   15628:	b	1566c <flatcc_builder_default_alloc@@Base+0xcc>
   1562c:	b	15654 <flatcc_builder_default_alloc@@Base+0xb4>
   15630:	b	15648 <flatcc_builder_default_alloc@@Base+0xa8>
   15634:	b	1566c <flatcc_builder_default_alloc@@Base+0xcc>
   15638:	b	15660 <flatcc_builder_default_alloc@@Base+0xc0>
   1563c:	mov	r3, #256	; 0x100
   15640:	str	r3, [fp, #-8]
   15644:	b	15678 <flatcc_builder_default_alloc@@Base+0xd8>
   15648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1564c:	str	r3, [fp, #-8]
   15650:	b	15678 <flatcc_builder_default_alloc@@Base+0xd8>
   15654:	mov	r3, #288	; 0x120
   15658:	str	r3, [fp, #-8]
   1565c:	b	15678 <flatcc_builder_default_alloc@@Base+0xd8>
   15660:	mov	r3, #64	; 0x40
   15664:	str	r3, [fp, #-8]
   15668:	b	15678 <flatcc_builder_default_alloc@@Base+0xd8>
   1566c:	mov	r3, #32
   15670:	str	r3, [fp, #-8]
   15674:	nop	{0}
   15678:	b	15688 <flatcc_builder_default_alloc@@Base+0xe8>
   1567c:	ldr	r3, [fp, #-8]
   15680:	lsl	r3, r3, #1
   15684:	str	r3, [fp, #-8]
   15688:	ldr	r2, [fp, #-8]
   1568c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15690:	cmp	r2, r3
   15694:	bcc	1567c <flatcc_builder_default_alloc@@Base+0xdc>
   15698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1569c:	ldr	r3, [r3, #4]
   156a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   156a4:	cmp	r2, r3
   156a8:	bhi	156cc <flatcc_builder_default_alloc@@Base+0x12c>
   156ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   156b0:	ldr	r3, [r3, #4]
   156b4:	lsr	r3, r3, #1
   156b8:	ldr	r2, [fp, #-8]
   156bc:	cmp	r2, r3
   156c0:	bhi	156cc <flatcc_builder_default_alloc@@Base+0x12c>
   156c4:	mov	r3, #0
   156c8:	b	15760 <flatcc_builder_default_alloc@@Base+0x1c0>
   156cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   156d0:	ldr	r3, [r3]
   156d4:	ldr	r1, [fp, #-8]
   156d8:	mov	r0, r3
   156dc:	bl	11f84 <realloc@plt>
   156e0:	str	r0, [fp, #-12]
   156e4:	ldr	r3, [fp, #-12]
   156e8:	cmp	r3, #0
   156ec:	bne	156f8 <flatcc_builder_default_alloc@@Base+0x158>
   156f0:	mvn	r3, #0
   156f4:	b	15760 <flatcc_builder_default_alloc@@Base+0x1c0>
   156f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156fc:	cmp	r3, #0
   15700:	beq	15744 <flatcc_builder_default_alloc@@Base+0x1a4>
   15704:	ldr	r3, [fp, #-20]	; 0xffffffec
   15708:	ldr	r3, [r3, #4]
   1570c:	ldr	r2, [fp, #-8]
   15710:	cmp	r2, r3
   15714:	bls	15744 <flatcc_builder_default_alloc@@Base+0x1a4>
   15718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1571c:	ldr	r3, [r3, #4]
   15720:	ldr	r2, [fp, #-12]
   15724:	add	r0, r2, r3
   15728:	ldr	r3, [fp, #-20]	; 0xffffffec
   1572c:	ldr	r3, [r3, #4]
   15730:	ldr	r2, [fp, #-8]
   15734:	sub	r3, r2, r3
   15738:	mov	r2, r3
   1573c:	mov	r1, #0
   15740:	bl	11fd8 <memset@plt>
   15744:	ldr	r3, [fp, #-20]	; 0xffffffec
   15748:	ldr	r2, [fp, #-12]
   1574c:	str	r2, [r3]
   15750:	ldr	r3, [fp, #-20]	; 0xffffffec
   15754:	ldr	r2, [fp, #-8]
   15758:	str	r2, [r3, #4]
   1575c:	mov	r3, #0
   15760:	mov	r0, r3
   15764:	sub	sp, fp, #4
   15768:	ldr	fp, [sp]
   1576c:	add	sp, sp, #4
   15770:	pop	{pc}		; (ldr pc, [sp], #4)
   15774:	push	{fp}		; (str fp, [sp, #-4]!)
   15778:	add	fp, sp, #0
   1577c:	sub	sp, sp, #20
   15780:	str	r0, [fp, #-16]
   15784:	str	r1, [fp, #-20]	; 0xffffffec
   15788:	ldr	r3, [fp, #-16]
   1578c:	add	r3, r3, #52	; 0x34
   15790:	add	r3, r3, #8
   15794:	str	r3, [fp, #-8]
   15798:	ldr	r3, [fp, #-16]
   1579c:	ldr	r2, [r3, #60]	; 0x3c
   157a0:	ldr	r3, [fp, #-16]
   157a4:	ldr	r3, [r3, #28]
   157a8:	add	r2, r2, r3
   157ac:	ldr	r3, [fp, #-16]
   157b0:	str	r2, [r3, #16]
   157b4:	ldr	r3, [fp, #-8]
   157b8:	ldr	r2, [r3, #4]
   157bc:	ldr	r3, [fp, #-16]
   157c0:	ldr	r3, [r3, #28]
   157c4:	sub	r2, r2, r3
   157c8:	ldr	r3, [fp, #-16]
   157cc:	str	r2, [r3, #24]
   157d0:	ldr	r3, [fp, #-16]
   157d4:	ldr	r3, [r3, #24]
   157d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   157dc:	cmp	r2, r3
   157e0:	bcs	157f0 <flatcc_builder_default_alloc@@Base+0x250>
   157e4:	ldr	r3, [fp, #-16]
   157e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   157ec:	str	r2, [r3, #24]
   157f0:	ldr	r3, [fp, #-16]
   157f4:	ldr	r3, [r3, #32]
   157f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   157fc:	str	r2, [r3, #4]
   15800:	nop	{0}
   15804:	add	sp, fp, #0
   15808:	pop	{fp}		; (ldr fp, [sp], #4)
   1580c:	bx	lr
   15810:	str	r4, [sp, #-12]!
   15814:	str	fp, [sp, #4]
   15818:	str	lr, [sp, #8]
   1581c:	add	fp, sp, #8
   15820:	sub	sp, sp, #36	; 0x24
   15824:	str	r0, [fp, #-24]	; 0xffffffe8
   15828:	str	r1, [fp, #-28]	; 0xffffffe4
   1582c:	str	r2, [fp, #-32]	; 0xffffffe0
   15830:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15834:	add	r3, r3, #52	; 0x34
   15838:	add	r3, r3, #8
   1583c:	str	r3, [fp, #-16]
   15840:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15844:	ldr	r4, [r3, #48]	; 0x30
   15848:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1584c:	ldr	r0, [r3, #40]	; 0x28
   15850:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15854:	ldr	r2, [r3, #28]
   15858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1585c:	add	r2, r2, r3
   15860:	mov	r3, #1
   15864:	str	r3, [sp]
   15868:	mov	r3, #1
   1586c:	ldr	r1, [fp, #-16]
   15870:	blx	r4
   15874:	mov	r3, r0
   15878:	cmp	r3, #0
   1587c:	beq	15888 <flatcc_builder_default_alloc@@Base+0x2e8>
   15880:	mvn	r3, #0
   15884:	b	15898 <flatcc_builder_default_alloc@@Base+0x2f8>
   15888:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1588c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15890:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   15894:	mov	r3, #0
   15898:	mov	r0, r3
   1589c:	sub	sp, fp, #8
   158a0:	ldr	r4, [sp]
   158a4:	ldr	fp, [sp, #4]
   158a8:	add	sp, sp, #8
   158ac:	pop	{pc}		; (ldr pc, [sp], #4)
   158b0:	str	fp, [sp, #-8]!
   158b4:	str	lr, [sp, #4]
   158b8:	add	fp, sp, #4
   158bc:	sub	sp, sp, #16
   158c0:	str	r0, [fp, #-16]
   158c4:	str	r1, [fp, #-20]	; 0xffffffec
   158c8:	ldr	r3, [fp, #-16]
   158cc:	ldr	r3, [r3, #20]
   158d0:	str	r3, [fp, #-8]
   158d4:	ldr	r3, [fp, #-16]
   158d8:	ldr	r2, [r3, #20]
   158dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   158e0:	add	r2, r2, r3
   158e4:	ldr	r3, [fp, #-16]
   158e8:	str	r2, [r3, #20]
   158ec:	ldr	r3, [fp, #-16]
   158f0:	ldr	r2, [r3, #20]
   158f4:	ldr	r3, [fp, #-16]
   158f8:	ldr	r3, [r3, #24]
   158fc:	cmp	r2, r3
   15900:	bcc	15934 <flatcc_builder_default_alloc@@Base+0x394>
   15904:	ldr	r3, [fp, #-16]
   15908:	ldr	r3, [r3, #20]
   1590c:	add	r3, r3, #1
   15910:	mvn	r2, #3
   15914:	mov	r1, r3
   15918:	ldr	r0, [fp, #-16]
   1591c:	bl	15810 <flatcc_builder_default_alloc@@Base+0x270>
   15920:	mov	r3, r0
   15924:	cmp	r3, #0
   15928:	beq	15934 <flatcc_builder_default_alloc@@Base+0x394>
   1592c:	mov	r3, #0
   15930:	b	15944 <flatcc_builder_default_alloc@@Base+0x3a4>
   15934:	ldr	r3, [fp, #-16]
   15938:	ldr	r2, [r3, #16]
   1593c:	ldr	r3, [fp, #-8]
   15940:	add	r3, r2, r3
   15944:	mov	r0, r3
   15948:	sub	sp, fp, #4
   1594c:	ldr	fp, [sp]
   15950:	add	sp, sp, #4
   15954:	pop	{pc}		; (ldr pc, [sp], #4)
   15958:	str	fp, [sp, #-8]!
   1595c:	str	lr, [sp, #4]
   15960:	add	fp, sp, #4
   15964:	sub	sp, sp, #8
   15968:	str	r0, [fp, #-8]
   1596c:	str	r1, [fp, #-12]
   15970:	ldr	r3, [fp, #-8]
   15974:	ldr	r2, [r3, #20]
   15978:	ldr	r3, [fp, #-12]
   1597c:	sub	r2, r2, r3
   15980:	ldr	r3, [fp, #-8]
   15984:	str	r2, [r3, #20]
   15988:	ldr	r3, [fp, #-8]
   1598c:	ldr	r2, [r3, #16]
   15990:	ldr	r3, [fp, #-8]
   15994:	ldr	r3, [r3, #20]
   15998:	add	r3, r2, r3
   1599c:	ldr	r2, [fp, #-12]
   159a0:	mov	r1, #0
   159a4:	mov	r0, r3
   159a8:	bl	11fd8 <memset@plt>
   159ac:	nop	{0}
   159b0:	sub	sp, fp, #4
   159b4:	ldr	fp, [sp]
   159b8:	add	sp, sp, #4
   159bc:	pop	{pc}		; (ldr pc, [sp], #4)
   159c0:	str	fp, [sp, #-8]!
   159c4:	str	lr, [sp, #4]
   159c8:	add	fp, sp, #4
   159cc:	sub	sp, sp, #24
   159d0:	str	r0, [fp, #-16]
   159d4:	str	r1, [fp, #-20]	; 0xffffffec
   159d8:	str	r2, [fp, #-24]	; 0xffffffe8
   159dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   159e0:	ldr	r0, [fp, #-16]
   159e4:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   159e8:	str	r0, [fp, #-8]
   159ec:	ldr	r3, [fp, #-8]
   159f0:	cmp	r3, #0
   159f4:	bne	15a00 <flatcc_builder_default_alloc@@Base+0x460>
   159f8:	mov	r3, #0
   159fc:	b	15a14 <flatcc_builder_default_alloc@@Base+0x474>
   15a00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15a04:	ldr	r1, [fp, #-20]	; 0xffffffec
   15a08:	ldr	r0, [fp, #-8]
   15a0c:	bl	11f6c <memcpy@plt>
   15a10:	ldr	r3, [fp, #-8]
   15a14:	mov	r0, r3
   15a18:	sub	sp, fp, #4
   15a1c:	ldr	fp, [sp]
   15a20:	add	sp, sp, #4
   15a24:	pop	{pc}		; (ldr pc, [sp], #4)
   15a28:	str	fp, [sp, #-8]!
   15a2c:	str	lr, [sp, #4]
   15a30:	add	fp, sp, #4
   15a34:	sub	sp, sp, #24
   15a38:	str	r0, [fp, #-16]
   15a3c:	str	r1, [fp, #-20]	; 0xffffffec
   15a40:	mov	r1, r2
   15a44:	mov	r2, r3
   15a48:	mov	r3, r1
   15a4c:	strh	r3, [fp, #-22]	; 0xffffffea
   15a50:	mov	r3, r2
   15a54:	strh	r3, [fp, #-24]	; 0xffffffe8
   15a58:	ldr	r3, [fp, #-16]
   15a5c:	ldr	r2, [r3, #20]
   15a60:	ldrh	r3, [fp, #-22]	; 0xffffffea
   15a64:	add	r3, r2, r3
   15a68:	sub	r3, r3, #1
   15a6c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15a70:	rsb	r2, r2, #0
   15a74:	and	r3, r3, r2
   15a78:	str	r3, [fp, #-8]
   15a7c:	ldr	r2, [fp, #-8]
   15a80:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a84:	add	r2, r2, r3
   15a88:	ldr	r3, [fp, #-16]
   15a8c:	str	r2, [r3, #20]
   15a90:	ldr	r3, [fp, #-16]
   15a94:	ldr	r2, [r3, #20]
   15a98:	ldr	r3, [fp, #-16]
   15a9c:	ldr	r3, [r3, #24]
   15aa0:	cmp	r2, r3
   15aa4:	bcc	15ad8 <flatcc_builder_default_alloc@@Base+0x538>
   15aa8:	ldr	r3, [fp, #-16]
   15aac:	ldr	r3, [r3, #20]
   15ab0:	add	r3, r3, #1
   15ab4:	movw	r2, #65532	; 0xfffc
   15ab8:	mov	r1, r3
   15abc:	ldr	r0, [fp, #-16]
   15ac0:	bl	15810 <flatcc_builder_default_alloc@@Base+0x270>
   15ac4:	mov	r3, r0
   15ac8:	cmp	r3, #0
   15acc:	beq	15ad8 <flatcc_builder_default_alloc@@Base+0x538>
   15ad0:	mov	r3, #0
   15ad4:	b	15b38 <flatcc_builder_default_alloc@@Base+0x598>
   15ad8:	ldr	r3, [fp, #-8]
   15adc:	uxth	r2, r3
   15ae0:	ldr	r3, [fp, #-16]
   15ae4:	ldr	r1, [r3, #4]
   15ae8:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   15aec:	lsl	r3, r3, #1
   15af0:	add	r3, r1, r3
   15af4:	add	r2, r2, #4
   15af8:	uxth	r2, r2
   15afc:	strh	r2, [r3]
   15b00:	ldr	r3, [fp, #-16]
   15b04:	ldrh	r3, [r3, #8]
   15b08:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   15b0c:	cmp	r2, r3
   15b10:	bcc	15b28 <flatcc_builder_default_alloc@@Base+0x588>
   15b14:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   15b18:	add	r3, r3, #1
   15b1c:	uxth	r2, r3
   15b20:	ldr	r3, [fp, #-16]
   15b24:	strh	r2, [r3, #8]
   15b28:	ldr	r3, [fp, #-16]
   15b2c:	ldr	r2, [r3, #16]
   15b30:	ldr	r3, [fp, #-8]
   15b34:	add	r3, r2, r3
   15b38:	mov	r0, r3
   15b3c:	sub	sp, fp, #4
   15b40:	ldr	fp, [sp]
   15b44:	add	sp, sp, #4
   15b48:	pop	{pc}		; (ldr pc, [sp], #4)
   15b4c:	str	fp, [sp, #-8]!
   15b50:	str	lr, [sp, #4]
   15b54:	add	fp, sp, #4
   15b58:	sub	sp, sp, #16
   15b5c:	str	r0, [fp, #-16]
   15b60:	mov	r3, r1
   15b64:	strh	r3, [fp, #-18]	; 0xffffffee
   15b68:	ldr	r3, [fp, #-16]
   15b6c:	ldr	r3, [r3, #20]
   15b70:	add	r3, r3, #3
   15b74:	bic	r3, r3, #3
   15b78:	str	r3, [fp, #-8]
   15b7c:	ldr	r3, [fp, #-8]
   15b80:	add	r2, r3, #4
   15b84:	ldr	r3, [fp, #-16]
   15b88:	str	r2, [r3, #20]
   15b8c:	ldr	r3, [fp, #-16]
   15b90:	ldr	r2, [r3, #20]
   15b94:	ldr	r3, [fp, #-16]
   15b98:	ldr	r3, [r3, #24]
   15b9c:	cmp	r2, r3
   15ba0:	bls	15bd0 <flatcc_builder_default_alloc@@Base+0x630>
   15ba4:	ldr	r3, [fp, #-16]
   15ba8:	ldr	r3, [r3, #20]
   15bac:	movw	r2, #65532	; 0xfffc
   15bb0:	mov	r1, r3
   15bb4:	ldr	r0, [fp, #-16]
   15bb8:	bl	15810 <flatcc_builder_default_alloc@@Base+0x270>
   15bbc:	mov	r3, r0
   15bc0:	cmp	r3, #0
   15bc4:	beq	15bd0 <flatcc_builder_default_alloc@@Base+0x630>
   15bc8:	mov	r3, #0
   15bcc:	b	15c50 <flatcc_builder_default_alloc@@Base+0x6b0>
   15bd0:	ldr	r3, [fp, #-8]
   15bd4:	uxth	r2, r3
   15bd8:	ldr	r3, [fp, #-16]
   15bdc:	ldr	r1, [r3, #4]
   15be0:	ldrh	r3, [fp, #-18]	; 0xffffffee
   15be4:	lsl	r3, r3, #1
   15be8:	add	r3, r1, r3
   15bec:	add	r2, r2, #4
   15bf0:	uxth	r2, r2
   15bf4:	strh	r2, [r3]
   15bf8:	ldr	r3, [fp, #-16]
   15bfc:	ldrh	r3, [r3, #8]
   15c00:	ldrh	r2, [fp, #-18]	; 0xffffffee
   15c04:	cmp	r2, r3
   15c08:	bcc	15c20 <flatcc_builder_default_alloc@@Base+0x680>
   15c0c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   15c10:	add	r3, r3, #1
   15c14:	uxth	r2, r3
   15c18:	ldr	r3, [fp, #-16]
   15c1c:	strh	r2, [r3, #8]
   15c20:	ldr	r3, [fp, #-16]
   15c24:	ldr	r3, [r3]
   15c28:	add	r1, r3, #2
   15c2c:	ldr	r2, [fp, #-16]
   15c30:	str	r1, [r2]
   15c34:	ldr	r2, [fp, #-8]
   15c38:	uxth	r2, r2
   15c3c:	strh	r2, [r3]
   15c40:	ldr	r3, [fp, #-16]
   15c44:	ldr	r2, [r3, #16]
   15c48:	ldr	r3, [fp, #-8]
   15c4c:	add	r3, r2, r3
   15c50:	mov	r0, r3
   15c54:	sub	sp, fp, #4
   15c58:	ldr	fp, [sp]
   15c5c:	add	sp, sp, #4
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	str	r4, [sp, #-12]!
   15c68:	str	fp, [sp, #4]
   15c6c:	str	lr, [sp, #8]
   15c70:	add	fp, sp, #8
   15c74:	sub	sp, sp, #36	; 0x24
   15c78:	str	r0, [fp, #-24]	; 0xffffffe8
   15c7c:	str	r1, [fp, #-28]	; 0xffffffe4
   15c80:	str	r2, [fp, #-32]	; 0xffffffe0
   15c84:	str	r3, [fp, #-36]	; 0xffffffdc
   15c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c8c:	add	r2, r3, #52	; 0x34
   15c90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15c94:	lsl	r3, r3, #3
   15c98:	add	r3, r2, r3
   15c9c:	str	r3, [fp, #-16]
   15ca0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ca4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ca8:	add	r2, r2, r3
   15cac:	ldr	r3, [fp, #-16]
   15cb0:	ldr	r3, [r3, #4]
   15cb4:	cmp	r2, r3
   15cb8:	bls	15d18 <flatcc_builder_default_alloc@@Base+0x778>
   15cbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cc0:	ldr	r4, [r3, #48]	; 0x30
   15cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cc8:	ldr	r0, [r3, #40]	; 0x28
   15ccc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15cd0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cd4:	add	r2, r2, r3
   15cd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15cdc:	str	r3, [sp]
   15ce0:	ldr	r3, [fp, #4]
   15ce4:	ldr	r1, [fp, #-16]
   15ce8:	blx	r4
   15cec:	mov	r3, r0
   15cf0:	cmp	r3, #0
   15cf4:	beq	15d18 <flatcc_builder_default_alloc@@Base+0x778>
   15cf8:	ldr	r3, [pc, #68]	; 15d44 <flatcc_builder_default_alloc@@Base+0x7a4>
   15cfc:	add	r3, pc, r3
   15d00:	mov	r2, #308	; 0x134
   15d04:	ldr	r1, [pc, #60]	; 15d48 <flatcc_builder_default_alloc@@Base+0x7a8>
   15d08:	add	r1, pc, r1
   15d0c:	ldr	r0, [pc, #56]	; 15d4c <flatcc_builder_default_alloc@@Base+0x7ac>
   15d10:	add	r0, pc, r0
   15d14:	bl	12008 <__assert_fail@plt>
   15d18:	ldr	r3, [fp, #-16]
   15d1c:	ldr	r3, [r3]
   15d20:	mov	r2, r3
   15d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15d28:	add	r3, r2, r3
   15d2c:	mov	r0, r3
   15d30:	sub	sp, fp, #8
   15d34:	ldr	r4, [sp]
   15d38:	ldr	fp, [sp, #4]
   15d3c:	add	sp, sp, #8
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	andeq	r7, r0, r4, asr #11
   15d48:	andeq	r7, r0, r4, lsl #3
   15d4c:	ldrdeq	r7, [r0], -ip
   15d50:	str	fp, [sp, #-8]!
   15d54:	str	lr, [sp, #4]
   15d58:	add	fp, sp, #4
   15d5c:	sub	sp, sp, #24
   15d60:	str	r0, [fp, #-16]
   15d64:	str	r1, [fp, #-20]	; 0xffffffec
   15d68:	ldr	r3, [fp, #-16]
   15d6c:	ldr	r3, [r3, #32]
   15d70:	ldr	r2, [r3, #16]
   15d74:	ldr	r3, [fp, #-16]
   15d78:	ldr	r3, [r3, #32]
   15d7c:	ldrh	r3, [r3, #28]
   15d80:	lsl	r3, r3, #1
   15d84:	add	r3, r2, r3
   15d88:	str	r3, [fp, #-8]
   15d8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d90:	add	r3, r3, #2
   15d94:	lsl	r3, r3, #1
   15d98:	str	r3, [fp, #-12]
   15d9c:	mov	r3, #1
   15da0:	str	r3, [sp]
   15da4:	ldr	r3, [fp, #-12]
   15da8:	ldr	r2, [fp, #-8]
   15dac:	mov	r1, #0
   15db0:	ldr	r0, [fp, #-16]
   15db4:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   15db8:	mov	r2, r0
   15dbc:	ldr	r3, [fp, #-16]
   15dc0:	str	r2, [r3, #4]
   15dc4:	ldr	r3, [fp, #-16]
   15dc8:	ldr	r3, [r3, #4]
   15dcc:	cmp	r3, #0
   15dd0:	bne	15ddc <flatcc_builder_default_alloc@@Base+0x83c>
   15dd4:	mvn	r3, #0
   15dd8:	b	15e54 <flatcc_builder_default_alloc@@Base+0x8b4>
   15ddc:	ldr	r3, [fp, #-16]
   15de0:	ldr	r3, [r3, #4]
   15de4:	add	r2, r3, #4
   15de8:	ldr	r3, [fp, #-16]
   15dec:	str	r2, [r3, #4]
   15df0:	ldr	r3, [fp, #-16]
   15df4:	ldr	r3, [r3, #32]
   15df8:	ldr	r3, [r3, #20]
   15dfc:	str	r3, [fp, #-8]
   15e00:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e04:	lsl	r3, r3, #1
   15e08:	add	r3, r3, #1
   15e0c:	str	r3, [fp, #-12]
   15e10:	mov	r3, #0
   15e14:	str	r3, [sp]
   15e18:	ldr	r3, [fp, #-12]
   15e1c:	ldr	r2, [fp, #-8]
   15e20:	mov	r1, #3
   15e24:	ldr	r0, [fp, #-16]
   15e28:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   15e2c:	mov	r2, r0
   15e30:	ldr	r3, [fp, #-16]
   15e34:	str	r2, [r3]
   15e38:	ldr	r3, [fp, #-16]
   15e3c:	ldr	r3, [r3]
   15e40:	cmp	r3, #0
   15e44:	bne	15e50 <flatcc_builder_default_alloc@@Base+0x8b0>
   15e48:	mvn	r3, #0
   15e4c:	b	15e54 <flatcc_builder_default_alloc@@Base+0x8b4>
   15e50:	mov	r3, #0
   15e54:	mov	r0, r3
   15e58:	sub	sp, fp, #4
   15e5c:	ldr	fp, [sp]
   15e60:	add	sp, sp, #4
   15e64:	pop	{pc}		; (ldr pc, [sp], #4)
   15e68:	str	r4, [sp, #-12]!
   15e6c:	str	fp, [sp, #4]
   15e70:	str	lr, [sp, #8]
   15e74:	add	fp, sp, #8
   15e78:	sub	sp, sp, #36	; 0x24
   15e7c:	str	r0, [fp, #-32]	; 0xffffffe0
   15e80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e84:	add	r3, r3, #52	; 0x34
   15e88:	add	r3, r3, #40	; 0x28
   15e8c:	str	r3, [fp, #-24]	; 0xffffffe8
   15e90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e94:	ldr	r3, [r3, #124]	; 0x7c
   15e98:	cmp	r3, #0
   15e9c:	beq	15ec0 <flatcc_builder_default_alloc@@Base+0x920>
   15ea0:	ldr	r3, [pc, #292]	; 15fcc <flatcc_builder_default_alloc@@Base+0xa2c>
   15ea4:	add	r3, pc, r3
   15ea8:	movw	r2, #342	; 0x156
   15eac:	ldr	r1, [pc, #284]	; 15fd0 <flatcc_builder_default_alloc@@Base+0xa30>
   15eb0:	add	r1, pc, r1
   15eb4:	ldr	r0, [pc, #280]	; 15fd4 <flatcc_builder_default_alloc@@Base+0xa34>
   15eb8:	add	r0, pc, r0
   15ebc:	bl	12008 <__assert_fail@plt>
   15ec0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ec4:	ldr	r2, [r3, #124]	; 0x7c
   15ec8:	mov	r3, #0
   15ecc:	str	r3, [sp]
   15ed0:	mov	r3, #16
   15ed4:	mov	r1, #6
   15ed8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15edc:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   15ee0:	mov	r3, r0
   15ee4:	cmp	r3, #0
   15ee8:	bne	15ef4 <flatcc_builder_default_alloc@@Base+0x954>
   15eec:	mvn	r3, #0
   15ef0:	b	15fb4 <flatcc_builder_default_alloc@@Base+0xa14>
   15ef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ef8:	mov	r2, #16
   15efc:	str	r2, [r3, #124]	; 0x7c
   15f00:	mov	r3, #256	; 0x100
   15f04:	str	r3, [fp, #-16]
   15f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f0c:	ldr	r4, [r3, #48]	; 0x30
   15f10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f14:	ldr	r0, [r3, #40]	; 0x28
   15f18:	mov	r3, #5
   15f1c:	str	r3, [sp]
   15f20:	mov	r3, #1
   15f24:	ldr	r2, [fp, #-16]
   15f28:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15f2c:	blx	r4
   15f30:	mov	r3, r0
   15f34:	cmp	r3, #0
   15f38:	beq	15f50 <flatcc_builder_default_alloc@@Base+0x9b0>
   15f3c:	mvn	r3, #0
   15f40:	b	15fb4 <flatcc_builder_default_alloc@@Base+0xa14>
   15f44:	ldr	r3, [fp, #-16]
   15f48:	lsl	r3, r3, #1
   15f4c:	str	r3, [fp, #-16]
   15f50:	ldr	r3, [fp, #-16]
   15f54:	lsl	r2, r3, #1
   15f58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f5c:	ldr	r3, [r3, #4]
   15f60:	cmp	r2, r3
   15f64:	bls	15f44 <flatcc_builder_default_alloc@@Base+0x9a4>
   15f68:	ldr	r3, [fp, #-16]
   15f6c:	lsr	r3, r3, #2
   15f70:	str	r3, [fp, #-16]
   15f74:	mov	r3, #0
   15f78:	str	r3, [fp, #-20]	; 0xffffffec
   15f7c:	b	15f8c <flatcc_builder_default_alloc@@Base+0x9ec>
   15f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f84:	add	r3, r3, #1
   15f88:	str	r3, [fp, #-20]	; 0xffffffec
   15f8c:	mov	r2, #1
   15f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f94:	lsl	r3, r2, r3
   15f98:	ldr	r2, [fp, #-16]
   15f9c:	cmp	r2, r3
   15fa0:	bhi	15f80 <flatcc_builder_default_alloc@@Base+0x9e0>
   15fa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15fa8:	ldr	r2, [fp, #-20]	; 0xffffffec
   15fac:	str	r2, [r3, #116]	; 0x74
   15fb0:	mov	r3, #0
   15fb4:	mov	r0, r3
   15fb8:	sub	sp, fp, #8
   15fbc:	ldr	r4, [sp]
   15fc0:	ldr	fp, [sp, #4]
   15fc4:	add	sp, sp, #8
   15fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fcc:	andeq	r7, r0, r0, lsl r4
   15fd0:	ldrdeq	r6, [r0], -ip
   15fd4:	andeq	r7, r0, r8, lsr r0
   15fd8:	str	fp, [sp, #-8]!
   15fdc:	str	lr, [sp, #4]
   15fe0:	add	fp, sp, #4
   15fe4:	sub	sp, sp, #16
   15fe8:	str	r0, [fp, #-16]
   15fec:	str	r1, [fp, #-20]	; 0xffffffec
   15ff0:	ldr	r3, [fp, #-16]
   15ff4:	ldr	r3, [r3, #116]	; 0x74
   15ff8:	cmp	r3, #0
   15ffc:	bne	1601c <flatcc_builder_default_alloc@@Base+0xa7c>
   16000:	ldr	r0, [fp, #-16]
   16004:	bl	15e68 <flatcc_builder_default_alloc@@Base+0x8c8>
   16008:	mov	r3, r0
   1600c:	cmp	r3, #0
   16010:	beq	1601c <flatcc_builder_default_alloc@@Base+0xa7c>
   16014:	mov	r3, #0
   16018:	b	16048 <flatcc_builder_default_alloc@@Base+0xaa8>
   1601c:	ldr	r3, [fp, #-16]
   16020:	ldr	r3, [r3, #92]	; 0x5c
   16024:	str	r3, [fp, #-8]
   16028:	ldr	r3, [fp, #-16]
   1602c:	ldr	r3, [r3, #116]	; 0x74
   16030:	rsb	r3, r3, #32
   16034:	ldr	r2, [fp, #-20]	; 0xffffffec
   16038:	lsr	r3, r2, r3
   1603c:	lsl	r3, r3, #2
   16040:	ldr	r2, [fp, #-8]
   16044:	add	r3, r2, r3
   16048:	mov	r0, r3
   1604c:	sub	sp, fp, #4
   16050:	ldr	fp, [sp]
   16054:	add	sp, sp, #4
   16058:	pop	{pc}		; (ldr pc, [sp], #4)

0001605c <flatcc_builder_flush_vtable_cache@@Base>:
   1605c:	str	fp, [sp, #-8]!
   16060:	str	lr, [sp, #4]
   16064:	add	fp, sp, #4
   16068:	sub	sp, sp, #16
   1606c:	str	r0, [fp, #-16]
   16070:	ldr	r3, [fp, #-16]
   16074:	add	r3, r3, #52	; 0x34
   16078:	add	r3, r3, #40	; 0x28
   1607c:	str	r3, [fp, #-8]
   16080:	ldr	r3, [fp, #-16]
   16084:	ldr	r3, [r3, #116]	; 0x74
   16088:	cmp	r3, #0
   1608c:	beq	160c8 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   16090:	ldr	r3, [fp, #-8]
   16094:	ldr	r0, [r3]
   16098:	ldr	r3, [fp, #-8]
   1609c:	ldr	r3, [r3, #4]
   160a0:	mov	r2, r3
   160a4:	mov	r1, #0
   160a8:	bl	11fd8 <memset@plt>
   160ac:	ldr	r3, [fp, #-16]
   160b0:	mov	r2, #16
   160b4:	str	r2, [r3, #124]	; 0x7c
   160b8:	ldr	r3, [fp, #-16]
   160bc:	mov	r2, #0
   160c0:	str	r2, [r3, #120]	; 0x78
   160c4:	b	160cc <flatcc_builder_flush_vtable_cache@@Base+0x70>
   160c8:	nop	{0}
   160cc:	sub	sp, fp, #4
   160d0:	ldr	fp, [sp]
   160d4:	add	sp, sp, #4
   160d8:	pop	{pc}		; (ldr pc, [sp], #4)

000160dc <flatcc_builder_custom_init@@Base>:
   160dc:	str	r4, [sp, #-12]!
   160e0:	str	fp, [sp, #4]
   160e4:	str	lr, [sp, #8]
   160e8:	add	fp, sp, #8
   160ec:	sub	sp, sp, #20
   160f0:	str	r0, [fp, #-16]
   160f4:	str	r1, [fp, #-20]	; 0xffffffec
   160f8:	str	r2, [fp, #-24]	; 0xffffffe8
   160fc:	str	r3, [fp, #-28]	; 0xffffffe4
   16100:	ldr	r4, [pc, #164]	; 161ac <flatcc_builder_custom_init@@Base+0xd0>
   16104:	add	r4, pc, r4
   16108:	mov	r2, #232	; 0xe8
   1610c:	mov	r1, #0
   16110:	ldr	r0, [fp, #-16]
   16114:	bl	11fd8 <memset@plt>
   16118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1611c:	cmp	r3, #0
   16120:	bne	16148 <flatcc_builder_custom_init@@Base+0x6c>
   16124:	ldr	r3, [fp, #-16]
   16128:	mov	r2, #1
   1612c:	str	r2, [r3, #184]	; 0xb8
   16130:	ldr	r3, [pc, #120]	; 161b0 <flatcc_builder_custom_init@@Base+0xd4>
   16134:	ldr	r3, [r4, r3]
   16138:	str	r3, [fp, #-20]	; 0xffffffec
   1613c:	ldr	r3, [fp, #-16]
   16140:	add	r3, r3, #188	; 0xbc
   16144:	str	r3, [fp, #-24]	; 0xffffffe8
   16148:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1614c:	cmp	r3, #0
   16150:	bne	16160 <flatcc_builder_custom_init@@Base+0x84>
   16154:	ldr	r3, [pc, #88]	; 161b4 <flatcc_builder_custom_init@@Base+0xd8>
   16158:	ldr	r3, [r4, r3]
   1615c:	str	r3, [fp, #-28]	; 0xffffffe4
   16160:	ldr	r3, [fp, #-16]
   16164:	ldr	r2, [fp, #4]
   16168:	str	r2, [r3, #40]	; 0x28
   1616c:	ldr	r3, [fp, #-16]
   16170:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16174:	str	r2, [r3, #48]	; 0x30
   16178:	ldr	r3, [fp, #-16]
   1617c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16180:	str	r2, [r3, #36]	; 0x24
   16184:	ldr	r3, [fp, #-16]
   16188:	ldr	r2, [fp, #-20]	; 0xffffffec
   1618c:	str	r2, [r3, #44]	; 0x2c
   16190:	mov	r3, #0
   16194:	mov	r0, r3
   16198:	sub	sp, fp, #8
   1619c:	ldr	r4, [sp]
   161a0:	ldr	fp, [sp, #4]
   161a4:	add	sp, sp, #8
   161a8:	pop	{pc}		; (ldr pc, [sp], #4)
   161ac:	strdeq	r7, [r1], -r4
   161b0:	andeq	r0, r0, r8, asr r0
   161b4:	andeq	r0, r0, r4, asr r0

000161b8 <flatcc_builder_init@@Base>:
   161b8:	str	fp, [sp, #-8]!
   161bc:	str	lr, [sp, #4]
   161c0:	add	fp, sp, #4
   161c4:	sub	sp, sp, #16
   161c8:	str	r0, [fp, #-8]
   161cc:	mov	r3, #0
   161d0:	str	r3, [sp]
   161d4:	mov	r3, #0
   161d8:	mov	r2, #0
   161dc:	mov	r1, #0
   161e0:	ldr	r0, [fp, #-8]
   161e4:	bl	160dc <flatcc_builder_custom_init@@Base>
   161e8:	mov	r3, r0
   161ec:	mov	r0, r3
   161f0:	sub	sp, fp, #4
   161f4:	ldr	fp, [sp]
   161f8:	add	sp, sp, #4
   161fc:	pop	{pc}		; (ldr pc, [sp], #4)

00016200 <flatcc_builder_custom_reset@@Base>:
   16200:	str	r4, [sp, #-12]!
   16204:	str	fp, [sp, #4]
   16208:	str	lr, [sp, #8]
   1620c:	add	fp, sp, #8
   16210:	sub	sp, sp, #36	; 0x24
   16214:	str	r0, [fp, #-24]	; 0xffffffe8
   16218:	str	r1, [fp, #-28]	; 0xffffffe4
   1621c:	str	r2, [fp, #-32]	; 0xffffffe0
   16220:	mov	r3, #0
   16224:	str	r3, [fp, #-16]
   16228:	b	16304 <flatcc_builder_custom_reset@@Base+0x104>
   1622c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16230:	add	r2, r3, #52	; 0x34
   16234:	ldr	r3, [fp, #-16]
   16238:	lsl	r3, r3, #3
   1623c:	add	r3, r2, r3
   16240:	str	r3, [fp, #-20]	; 0xffffffec
   16244:	ldr	r3, [fp, #-20]	; 0xffffffec
   16248:	ldr	r3, [r3]
   1624c:	cmp	r3, #0
   16250:	beq	162c8 <flatcc_builder_custom_reset@@Base+0xc8>
   16254:	ldr	r3, [fp, #-16]
   16258:	cmp	r3, #5
   1625c:	beq	162a8 <flatcc_builder_custom_reset@@Base+0xa8>
   16260:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16264:	cmp	r3, #0
   16268:	beq	162a8 <flatcc_builder_custom_reset@@Base+0xa8>
   1626c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16270:	ldr	r4, [r3, #48]	; 0x30
   16274:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16278:	ldr	r0, [r3, #40]	; 0x28
   1627c:	ldr	r3, [fp, #-16]
   16280:	str	r3, [sp]
   16284:	mov	r3, #1
   16288:	mov	r2, #1
   1628c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16290:	blx	r4
   16294:	mov	r3, r0
   16298:	cmp	r3, #0
   1629c:	beq	162a8 <flatcc_builder_custom_reset@@Base+0xa8>
   162a0:	mvn	r3, #0
   162a4:	b	16434 <flatcc_builder_custom_reset@@Base+0x234>
   162a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   162ac:	ldr	r0, [r3]
   162b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   162b4:	ldr	r3, [r3, #4]
   162b8:	mov	r2, r3
   162bc:	mov	r1, #0
   162c0:	bl	11fd8 <memset@plt>
   162c4:	b	162f8 <flatcc_builder_custom_reset@@Base+0xf8>
   162c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   162cc:	ldr	r3, [r3, #4]
   162d0:	cmp	r3, #0
   162d4:	beq	162f8 <flatcc_builder_custom_reset@@Base+0xf8>
   162d8:	ldr	r3, [pc, #364]	; 1644c <flatcc_builder_custom_reset@@Base+0x24c>
   162dc:	add	r3, pc, r3
   162e0:	movw	r2, #434	; 0x1b2
   162e4:	ldr	r1, [pc, #356]	; 16450 <flatcc_builder_custom_reset@@Base+0x250>
   162e8:	add	r1, pc, r1
   162ec:	ldr	r0, [pc, #352]	; 16454 <flatcc_builder_custom_reset@@Base+0x254>
   162f0:	add	r0, pc, r0
   162f4:	bl	12008 <__assert_fail@plt>
   162f8:	ldr	r3, [fp, #-16]
   162fc:	add	r3, r3, #1
   16300:	str	r3, [fp, #-16]
   16304:	ldr	r3, [fp, #-16]
   16308:	cmp	r3, #7
   1630c:	ble	1622c <flatcc_builder_custom_reset@@Base+0x2c>
   16310:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16314:	mov	r2, #0
   16318:	str	r2, [r3, #120]	; 0x78
   1631c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16320:	ldr	r3, [r3, #124]	; 0x7c
   16324:	cmp	r3, #0
   16328:	beq	16338 <flatcc_builder_custom_reset@@Base+0x138>
   1632c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16330:	mov	r2, #16
   16334:	str	r2, [r3, #124]	; 0x7c
   16338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1633c:	mov	r2, #0
   16340:	strh	r2, [r3, #128]	; 0x80
   16344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16348:	mov	r2, #0
   1634c:	str	r2, [r3, #136]	; 0x88
   16350:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16354:	mov	r2, #0
   16358:	str	r2, [r3, #140]	; 0x8c
   1635c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16360:	mov	r2, #0
   16364:	str	r2, [r3, #156]	; 0x9c
   16368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1636c:	mov	r2, #0
   16370:	str	r2, [r3, #160]	; 0xa0
   16374:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16378:	mov	r2, #0
   1637c:	str	r2, [r3, #20]
   16380:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16384:	mov	r2, #0
   16388:	str	r2, [r3, #24]
   1638c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16390:	mov	r2, #0
   16394:	str	r2, [r3, #148]	; 0x94
   16398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1639c:	mov	r2, #0
   163a0:	str	r2, [r3, #152]	; 0x98
   163a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163a8:	ldr	r2, [r3, #60]	; 0x3c
   163ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163b0:	str	r2, [r3, #16]
   163b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163b8:	ldr	r2, [r3, #76]	; 0x4c
   163bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163c0:	str	r2, [r3]
   163c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163c8:	ldr	r2, [r3, #52]	; 0x34
   163cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163d0:	str	r2, [r3, #4]
   163d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163d8:	mov	r2, #0
   163dc:	str	r2, [r3, #32]
   163e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   163e4:	cmp	r3, #0
   163e8:	beq	16410 <flatcc_builder_custom_reset@@Base+0x210>
   163ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163f0:	mov	r2, #0
   163f4:	str	r2, [r3, #172]	; 0xac
   163f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163fc:	mov	r2, #0
   16400:	str	r2, [r3, #176]	; 0xb0
   16404:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16408:	mov	r2, #0
   1640c:	str	r2, [r3, #180]	; 0xb4
   16410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16414:	ldr	r3, [r3, #184]	; 0xb8
   16418:	cmp	r3, #0
   1641c:	beq	16430 <flatcc_builder_custom_reset@@Base+0x230>
   16420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16424:	add	r3, r3, #188	; 0xbc
   16428:	mov	r0, r3
   1642c:	bl	1c094 <flatcc_emitter_reset@@Base>
   16430:	mov	r3, #0
   16434:	mov	r0, r3
   16438:	sub	sp, fp, #8
   1643c:	ldr	r4, [sp]
   16440:	ldr	fp, [sp, #4]
   16444:	add	sp, sp, #8
   16448:	pop	{pc}		; (ldr pc, [sp], #4)
   1644c:	strdeq	r6, [r0], -r4
   16450:	andeq	r6, r0, r4, lsr #23
   16454:	andeq	r6, r0, r0, lsl ip

00016458 <flatcc_builder_reset@@Base>:
   16458:	str	fp, [sp, #-8]!
   1645c:	str	lr, [sp, #4]
   16460:	add	fp, sp, #4
   16464:	sub	sp, sp, #8
   16468:	str	r0, [fp, #-8]
   1646c:	mov	r2, #0
   16470:	mov	r1, #0
   16474:	ldr	r0, [fp, #-8]
   16478:	bl	16200 <flatcc_builder_custom_reset@@Base>
   1647c:	mov	r3, r0
   16480:	mov	r0, r3
   16484:	sub	sp, fp, #4
   16488:	ldr	fp, [sp]
   1648c:	add	sp, sp, #4
   16490:	pop	{pc}		; (ldr pc, [sp], #4)

00016494 <flatcc_builder_clear@@Base>:
   16494:	str	r4, [sp, #-12]!
   16498:	str	fp, [sp, #4]
   1649c:	str	lr, [sp, #8]
   164a0:	add	fp, sp, #8
   164a4:	sub	sp, sp, #28
   164a8:	str	r0, [fp, #-24]	; 0xffffffe8
   164ac:	mov	r3, #0
   164b0:	str	r3, [fp, #-16]
   164b4:	b	16504 <flatcc_builder_clear@@Base+0x70>
   164b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164bc:	add	r2, r3, #52	; 0x34
   164c0:	ldr	r3, [fp, #-16]
   164c4:	lsl	r3, r3, #3
   164c8:	add	r3, r2, r3
   164cc:	str	r3, [fp, #-20]	; 0xffffffec
   164d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164d4:	ldr	r4, [r3, #48]	; 0x30
   164d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164dc:	ldr	r0, [r3, #40]	; 0x28
   164e0:	ldr	r3, [fp, #-16]
   164e4:	str	r3, [sp]
   164e8:	mov	r3, #0
   164ec:	mov	r2, #0
   164f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   164f4:	blx	r4
   164f8:	ldr	r3, [fp, #-16]
   164fc:	add	r3, r3, #1
   16500:	str	r3, [fp, #-16]
   16504:	ldr	r3, [fp, #-16]
   16508:	cmp	r3, #7
   1650c:	ble	164b8 <flatcc_builder_clear@@Base+0x24>
   16510:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16514:	ldr	r3, [r3, #184]	; 0xb8
   16518:	cmp	r3, #0
   1651c:	beq	16530 <flatcc_builder_clear@@Base+0x9c>
   16520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16524:	add	r3, r3, #188	; 0xbc
   16528:	mov	r0, r3
   1652c:	bl	1c230 <flatcc_emitter_clear@@Base>
   16530:	mov	r2, #232	; 0xe8
   16534:	mov	r1, #0
   16538:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1653c:	bl	11fd8 <memset@plt>
   16540:	nop	{0}
   16544:	sub	sp, fp, #8
   16548:	ldr	r4, [sp]
   1654c:	ldr	fp, [sp, #4]
   16550:	add	sp, sp, #8
   16554:	pop	{pc}		; (ldr pc, [sp], #4)
   16558:	push	{fp}		; (str fp, [sp, #-4]!)
   1655c:	add	fp, sp, #0
   16560:	sub	sp, sp, #12
   16564:	str	r0, [fp, #-8]
   16568:	mov	r3, r1
   1656c:	strh	r3, [fp, #-10]
   16570:	ldr	r3, [fp, #-8]
   16574:	ldrh	r3, [r3, #128]	; 0x80
   16578:	ldrh	r2, [fp, #-10]
   1657c:	cmp	r2, r3
   16580:	bls	16590 <flatcc_builder_clear@@Base+0xfc>
   16584:	ldr	r3, [fp, #-8]
   16588:	ldrh	r2, [fp, #-10]
   1658c:	strh	r2, [r3, #128]	; 0x80
   16590:	nop	{0}
   16594:	add	sp, fp, #0
   16598:	pop	{fp}		; (ldr fp, [sp], #4)
   1659c:	bx	lr
   165a0:	push	{fp}		; (str fp, [sp, #-4]!)
   165a4:	add	fp, sp, #0
   165a8:	sub	sp, sp, #12
   165ac:	str	r0, [fp, #-8]
   165b0:	mov	r3, r1
   165b4:	strh	r3, [fp, #-10]
   165b8:	ldr	r3, [fp, #-8]
   165bc:	ldrh	r3, [r3]
   165c0:	ldrh	r2, [fp, #-10]
   165c4:	cmp	r2, r3
   165c8:	bls	165d8 <flatcc_builder_clear@@Base+0x144>
   165cc:	ldr	r3, [fp, #-8]
   165d0:	ldrh	r2, [fp, #-10]
   165d4:	strh	r2, [r3]
   165d8:	nop	{0}
   165dc:	add	sp, fp, #0
   165e0:	pop	{fp}		; (ldr fp, [sp], #4)
   165e4:	bx	lr

000165e8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   165e8:	str	fp, [sp, #-8]!
   165ec:	str	lr, [sp, #4]
   165f0:	add	fp, sp, #4
   165f4:	sub	sp, sp, #24
   165f8:	str	r0, [fp, #-16]
   165fc:	str	r1, [fp, #-20]	; 0xffffffec
   16600:	ldr	r3, [fp, #-20]	; 0xffffffec
   16604:	add	r3, r3, #3
   16608:	bic	r3, r3, #3
   1660c:	add	r3, r3, #4
   16610:	str	r3, [fp, #-20]	; 0xffffffec
   16614:	ldr	r3, [fp, #-16]
   16618:	ldr	r2, [r3, #228]	; 0xe4
   1661c:	mov	r3, #0
   16620:	str	r3, [sp]
   16624:	ldr	r3, [fp, #-20]	; 0xffffffec
   16628:	mov	r1, #7
   1662c:	ldr	r0, [fp, #-16]
   16630:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   16634:	str	r0, [fp, #-8]
   16638:	ldr	r3, [fp, #-8]
   1663c:	cmp	r3, #0
   16640:	bne	1664c <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   16644:	mov	r3, #0
   16648:	b	166a4 <flatcc_builder_enter_user_frame_ptr@@Base+0xbc>
   1664c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16650:	mov	r1, #0
   16654:	ldr	r0, [fp, #-8]
   16658:	bl	11fd8 <memset@plt>
   1665c:	ldr	r3, [fp, #-8]
   16660:	add	r2, r3, #4
   16664:	str	r2, [fp, #-8]
   16668:	ldr	r2, [fp, #-16]
   1666c:	ldr	r2, [r2, #224]	; 0xe0
   16670:	str	r2, [r3]
   16674:	ldr	r3, [fp, #-16]
   16678:	ldr	r3, [r3, #228]	; 0xe4
   1667c:	add	r2, r3, #4
   16680:	ldr	r3, [fp, #-16]
   16684:	str	r2, [r3, #224]	; 0xe0
   16688:	ldr	r3, [fp, #-16]
   1668c:	ldr	r2, [r3, #228]	; 0xe4
   16690:	ldr	r3, [fp, #-20]	; 0xffffffec
   16694:	add	r2, r2, r3
   16698:	ldr	r3, [fp, #-16]
   1669c:	str	r2, [r3, #228]	; 0xe4
   166a0:	ldr	r3, [fp, #-8]
   166a4:	mov	r0, r3
   166a8:	sub	sp, fp, #4
   166ac:	ldr	fp, [sp]
   166b0:	add	sp, sp, #4
   166b4:	pop	{pc}		; (ldr pc, [sp], #4)

000166b8 <flatcc_builder_enter_user_frame@@Base>:
   166b8:	str	fp, [sp, #-8]!
   166bc:	str	lr, [sp, #4]
   166c0:	add	fp, sp, #4
   166c4:	sub	sp, sp, #24
   166c8:	str	r0, [fp, #-16]
   166cc:	str	r1, [fp, #-20]	; 0xffffffec
   166d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   166d4:	add	r3, r3, #3
   166d8:	bic	r3, r3, #3
   166dc:	add	r3, r3, #4
   166e0:	str	r3, [fp, #-20]	; 0xffffffec
   166e4:	ldr	r3, [fp, #-16]
   166e8:	ldr	r2, [r3, #228]	; 0xe4
   166ec:	mov	r3, #0
   166f0:	str	r3, [sp]
   166f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   166f8:	mov	r1, #7
   166fc:	ldr	r0, [fp, #-16]
   16700:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   16704:	str	r0, [fp, #-8]
   16708:	ldr	r3, [fp, #-8]
   1670c:	cmp	r3, #0
   16710:	bne	1671c <flatcc_builder_enter_user_frame@@Base+0x64>
   16714:	mov	r3, #0
   16718:	b	16778 <flatcc_builder_enter_user_frame@@Base+0xc0>
   1671c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16720:	mov	r1, #0
   16724:	ldr	r0, [fp, #-8]
   16728:	bl	11fd8 <memset@plt>
   1672c:	ldr	r3, [fp, #-8]
   16730:	add	r2, r3, #4
   16734:	str	r2, [fp, #-8]
   16738:	ldr	r2, [fp, #-16]
   1673c:	ldr	r2, [r2, #224]	; 0xe0
   16740:	str	r2, [r3]
   16744:	ldr	r3, [fp, #-16]
   16748:	ldr	r3, [r3, #228]	; 0xe4
   1674c:	add	r2, r3, #4
   16750:	ldr	r3, [fp, #-16]
   16754:	str	r2, [r3, #224]	; 0xe0
   16758:	ldr	r3, [fp, #-16]
   1675c:	ldr	r2, [r3, #228]	; 0xe4
   16760:	ldr	r3, [fp, #-20]	; 0xffffffec
   16764:	add	r2, r2, r3
   16768:	ldr	r3, [fp, #-16]
   1676c:	str	r2, [r3, #228]	; 0xe4
   16770:	ldr	r3, [fp, #-16]
   16774:	ldr	r3, [r3, #224]	; 0xe0
   16778:	mov	r0, r3
   1677c:	sub	sp, fp, #4
   16780:	ldr	fp, [sp]
   16784:	add	sp, sp, #4
   16788:	pop	{pc}		; (ldr pc, [sp], #4)

0001678c <flatcc_builder_exit_user_frame@@Base>:
   1678c:	str	fp, [sp, #-8]!
   16790:	str	lr, [sp, #4]
   16794:	add	fp, sp, #4
   16798:	sub	sp, sp, #16
   1679c:	str	r0, [fp, #-16]
   167a0:	ldr	r3, [fp, #-16]
   167a4:	ldr	r3, [r3, #224]	; 0xe0
   167a8:	cmp	r3, #0
   167ac:	bne	167d0 <flatcc_builder_exit_user_frame@@Base+0x44>
   167b0:	ldr	r3, [pc, #112]	; 16828 <flatcc_builder_exit_user_frame@@Base+0x9c>
   167b4:	add	r3, pc, r3
   167b8:	movw	r2, #542	; 0x21e
   167bc:	ldr	r1, [pc, #104]	; 1682c <flatcc_builder_exit_user_frame@@Base+0xa0>
   167c0:	add	r1, pc, r1
   167c4:	ldr	r0, [pc, #100]	; 16830 <flatcc_builder_exit_user_frame@@Base+0xa4>
   167c8:	add	r0, pc, r0
   167cc:	bl	12008 <__assert_fail@plt>
   167d0:	ldr	r3, [fp, #-16]
   167d4:	ldr	r2, [r3, #108]	; 0x6c
   167d8:	ldr	r3, [fp, #-16]
   167dc:	ldr	r3, [r3, #224]	; 0xe0
   167e0:	add	r3, r2, r3
   167e4:	str	r3, [fp, #-8]
   167e8:	ldr	r3, [fp, #-16]
   167ec:	ldr	r3, [r3, #224]	; 0xe0
   167f0:	sub	r2, r3, #4
   167f4:	ldr	r3, [fp, #-16]
   167f8:	str	r2, [r3, #228]	; 0xe4
   167fc:	ldr	r3, [fp, #-8]
   16800:	ldr	r2, [r3, #-4]
   16804:	ldr	r3, [fp, #-16]
   16808:	str	r2, [r3, #224]	; 0xe0
   1680c:	ldr	r3, [fp, #-16]
   16810:	ldr	r3, [r3, #224]	; 0xe0
   16814:	mov	r0, r3
   16818:	sub	sp, fp, #4
   1681c:	ldr	fp, [sp]
   16820:	add	sp, sp, #4
   16824:	pop	{pc}		; (ldr pc, [sp], #4)
   16828:	andeq	r6, r0, r8, lsr fp
   1682c:	andeq	r6, r0, ip, asr #13
   16830:	andeq	r6, r0, ip, asr #14

00016834 <flatcc_builder_exit_user_frame_at@@Base>:
   16834:	str	fp, [sp, #-8]!
   16838:	str	lr, [sp, #4]
   1683c:	add	fp, sp, #4
   16840:	sub	sp, sp, #8
   16844:	str	r0, [fp, #-8]
   16848:	str	r1, [fp, #-12]
   1684c:	ldr	r3, [fp, #-8]
   16850:	ldr	r3, [r3, #224]	; 0xe0
   16854:	ldr	r2, [fp, #-12]
   16858:	cmp	r2, r3
   1685c:	bls	16880 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   16860:	ldr	r3, [pc, #68]	; 168ac <flatcc_builder_exit_user_frame_at@@Base+0x78>
   16864:	add	r3, pc, r3
   16868:	movw	r2, #551	; 0x227
   1686c:	ldr	r1, [pc, #60]	; 168b0 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   16870:	add	r1, pc, r1
   16874:	ldr	r0, [pc, #56]	; 168b4 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   16878:	add	r0, pc, r0
   1687c:	bl	12008 <__assert_fail@plt>
   16880:	ldr	r3, [fp, #-8]
   16884:	ldr	r2, [fp, #-12]
   16888:	str	r2, [r3, #224]	; 0xe0
   1688c:	ldr	r0, [fp, #-8]
   16890:	bl	1678c <flatcc_builder_exit_user_frame@@Base>
   16894:	mov	r3, r0
   16898:	mov	r0, r3
   1689c:	sub	sp, fp, #4
   168a0:	ldr	fp, [sp]
   168a4:	add	sp, sp, #4
   168a8:	pop	{pc}		; (ldr pc, [sp], #4)
   168ac:	andeq	r6, r0, r8, lsr #21
   168b0:	andeq	r6, r0, ip, lsl r6
   168b4:			; <UNDEFINED> instruction: 0x000066b8

000168b8 <flatcc_builder_get_current_user_frame@@Base>:
   168b8:	push	{fp}		; (str fp, [sp, #-4]!)
   168bc:	add	fp, sp, #0
   168c0:	sub	sp, sp, #12
   168c4:	str	r0, [fp, #-8]
   168c8:	ldr	r3, [fp, #-8]
   168cc:	ldr	r3, [r3, #224]	; 0xe0
   168d0:	mov	r0, r3
   168d4:	add	sp, fp, #0
   168d8:	pop	{fp}		; (ldr fp, [sp], #4)
   168dc:	bx	lr

000168e0 <flatcc_builder_get_user_frame_ptr@@Base>:
   168e0:	push	{fp}		; (str fp, [sp, #-4]!)
   168e4:	add	fp, sp, #0
   168e8:	sub	sp, sp, #12
   168ec:	str	r0, [fp, #-8]
   168f0:	str	r1, [fp, #-12]
   168f4:	ldr	r3, [fp, #-8]
   168f8:	ldr	r2, [r3, #108]	; 0x6c
   168fc:	ldr	r3, [fp, #-12]
   16900:	add	r3, r2, r3
   16904:	mov	r0, r3
   16908:	add	sp, fp, #0
   1690c:	pop	{fp}		; (ldr fp, [sp], #4)
   16910:	bx	lr
   16914:	str	fp, [sp, #-8]!
   16918:	str	lr, [sp, #4]
   1691c:	add	fp, sp, #4
   16920:	sub	sp, sp, #16
   16924:	str	r0, [fp, #-8]
   16928:	mov	r3, r1
   1692c:	strh	r3, [fp, #-10]
   16930:	ldr	r3, [fp, #-8]
   16934:	ldr	r3, [r3, #156]	; 0x9c
   16938:	add	r2, r3, #1
   1693c:	ldr	r3, [fp, #-8]
   16940:	str	r2, [r3, #156]	; 0x9c
   16944:	ldr	r3, [fp, #-8]
   16948:	ldr	r2, [r3, #156]	; 0x9c
   1694c:	ldr	r3, [fp, #-8]
   16950:	ldr	r3, [r3, #160]	; 0xa0
   16954:	cmp	r2, r3
   16958:	ble	16a4c <flatcc_builder_get_user_frame_ptr@@Base+0x16c>
   1695c:	ldr	r3, [fp, #-8]
   16960:	ldr	r3, [r3, #176]	; 0xb0
   16964:	cmp	r3, #0
   16968:	ble	1698c <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   1696c:	ldr	r3, [fp, #-8]
   16970:	ldr	r2, [r3, #156]	; 0x9c
   16974:	ldr	r3, [fp, #-8]
   16978:	ldr	r3, [r3, #176]	; 0xb0
   1697c:	cmp	r2, r3
   16980:	ble	1698c <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   16984:	mvn	r3, #0
   16988:	b	16aec <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   1698c:	ldr	r3, [fp, #-8]
   16990:	ldr	r3, [r3, #156]	; 0x9c
   16994:	sub	r3, r3, #1
   16998:	mov	r2, r3
   1699c:	mov	r3, r2
   169a0:	lsl	r3, r3, #3
   169a4:	add	r3, r3, r2
   169a8:	lsl	r3, r3, #2
   169ac:	mov	r2, r3
   169b0:	mov	r3, #0
   169b4:	str	r3, [sp]
   169b8:	mov	r3, #36	; 0x24
   169bc:	mov	r1, #4
   169c0:	ldr	r0, [fp, #-8]
   169c4:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   169c8:	mov	r2, r0
   169cc:	ldr	r3, [fp, #-8]
   169d0:	str	r2, [r3, #32]
   169d4:	ldr	r3, [fp, #-8]
   169d8:	ldr	r3, [r3, #32]
   169dc:	cmp	r3, #0
   169e0:	bne	169ec <flatcc_builder_get_user_frame_ptr@@Base+0x10c>
   169e4:	mvn	r3, #0
   169e8:	b	16aec <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   169ec:	ldr	r3, [fp, #-8]
   169f0:	ldr	r2, [r3, #88]	; 0x58
   169f4:	movw	r3, #36409	; 0x8e39
   169f8:	movt	r3, #14563	; 0x38e3
   169fc:	umull	r2, r3, r3, r2
   16a00:	lsr	r3, r3, #3
   16a04:	mov	r2, r3
   16a08:	ldr	r3, [fp, #-8]
   16a0c:	str	r2, [r3, #160]	; 0xa0
   16a10:	ldr	r3, [fp, #-8]
   16a14:	ldr	r3, [r3, #176]	; 0xb0
   16a18:	cmp	r3, #0
   16a1c:	ble	16a60 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   16a20:	ldr	r3, [fp, #-8]
   16a24:	ldr	r2, [r3, #176]	; 0xb0
   16a28:	ldr	r3, [fp, #-8]
   16a2c:	ldr	r3, [r3, #160]	; 0xa0
   16a30:	cmp	r2, r3
   16a34:	bge	16a60 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   16a38:	ldr	r3, [fp, #-8]
   16a3c:	ldr	r2, [r3, #176]	; 0xb0
   16a40:	ldr	r3, [fp, #-8]
   16a44:	str	r2, [r3, #160]	; 0xa0
   16a48:	b	16a60 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   16a4c:	ldr	r3, [fp, #-8]
   16a50:	ldr	r3, [r3, #32]
   16a54:	add	r2, r3, #36	; 0x24
   16a58:	ldr	r3, [fp, #-8]
   16a5c:	str	r2, [r3, #32]
   16a60:	ldr	r3, [fp, #-8]
   16a64:	ldr	r3, [r3, #32]
   16a68:	ldr	r2, [fp, #-8]
   16a6c:	ldr	r2, [r2, #20]
   16a70:	str	r2, [r3, #8]
   16a74:	ldr	r3, [fp, #-8]
   16a78:	ldr	r3, [r3, #32]
   16a7c:	ldr	r2, [fp, #-8]
   16a80:	ldrh	r2, [r2, #130]	; 0x82
   16a84:	strh	r2, [r3, #12]
   16a88:	ldr	r3, [fp, #-8]
   16a8c:	ldrh	r2, [fp, #-10]
   16a90:	strh	r2, [r3, #130]	; 0x82
   16a94:	ldr	r3, [fp, #-8]
   16a98:	ldr	r3, [r3, #32]
   16a9c:	ldr	r2, [fp, #-8]
   16aa0:	ldr	r2, [r2, #28]
   16aa4:	str	r2, [r3]
   16aa8:	ldr	r3, [fp, #-8]
   16aac:	ldr	r3, [r3, #32]
   16ab0:	mvn	r2, #3
   16ab4:	str	r2, [r3, #4]
   16ab8:	ldr	r3, [fp, #-8]
   16abc:	ldr	r2, [r3, #28]
   16ac0:	ldr	r3, [fp, #-8]
   16ac4:	ldr	r3, [r3, #20]
   16ac8:	add	r3, r2, r3
   16acc:	add	r3, r3, #7
   16ad0:	bic	r2, r3, #7
   16ad4:	ldr	r3, [fp, #-8]
   16ad8:	str	r2, [r3, #28]
   16adc:	ldr	r3, [fp, #-8]
   16ae0:	mov	r2, #0
   16ae4:	str	r2, [r3, #20]
   16ae8:	mov	r3, #0
   16aec:	mov	r0, r3
   16af0:	sub	sp, fp, #4
   16af4:	ldr	fp, [sp]
   16af8:	add	sp, sp, #4
   16afc:	pop	{pc}		; (ldr pc, [sp], #4)
   16b00:	str	fp, [sp, #-8]!
   16b04:	str	lr, [sp, #4]
   16b08:	add	fp, sp, #4
   16b0c:	sub	sp, sp, #8
   16b10:	str	r0, [fp, #-8]
   16b14:	ldr	r3, [fp, #-8]
   16b18:	ldr	r0, [r3, #16]
   16b1c:	ldr	r3, [fp, #-8]
   16b20:	ldr	r3, [r3, #20]
   16b24:	mov	r2, r3
   16b28:	mov	r1, #0
   16b2c:	bl	11fd8 <memset@plt>
   16b30:	ldr	r3, [fp, #-8]
   16b34:	ldr	r3, [r3, #32]
   16b38:	ldr	r2, [r3, #8]
   16b3c:	ldr	r3, [fp, #-8]
   16b40:	str	r2, [r3, #20]
   16b44:	ldr	r3, [fp, #-8]
   16b48:	ldr	r3, [r3, #32]
   16b4c:	ldr	r2, [r3]
   16b50:	ldr	r3, [fp, #-8]
   16b54:	str	r2, [r3, #28]
   16b58:	ldr	r3, [fp, #-8]
   16b5c:	ldr	r3, [r3, #32]
   16b60:	ldr	r3, [r3, #4]
   16b64:	mov	r1, r3
   16b68:	ldr	r0, [fp, #-8]
   16b6c:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   16b70:	ldr	r3, [fp, #-8]
   16b74:	ldrh	r3, [r3, #130]	; 0x82
   16b78:	mov	r1, r3
   16b7c:	ldr	r0, [fp, #-8]
   16b80:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   16b84:	ldr	r3, [fp, #-8]
   16b88:	ldr	r3, [r3, #32]
   16b8c:	ldrh	r2, [r3, #12]
   16b90:	ldr	r3, [fp, #-8]
   16b94:	strh	r2, [r3, #130]	; 0x82
   16b98:	ldr	r3, [fp, #-8]
   16b9c:	ldr	r3, [r3, #32]
   16ba0:	sub	r2, r3, #36	; 0x24
   16ba4:	ldr	r3, [fp, #-8]
   16ba8:	str	r2, [r3, #32]
   16bac:	ldr	r3, [fp, #-8]
   16bb0:	ldr	r3, [r3, #156]	; 0x9c
   16bb4:	sub	r2, r3, #1
   16bb8:	ldr	r3, [fp, #-8]
   16bbc:	str	r2, [r3, #156]	; 0x9c
   16bc0:	nop	{0}
   16bc4:	sub	sp, fp, #4
   16bc8:	ldr	fp, [sp]
   16bcc:	add	sp, sp, #4
   16bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16bd4:	push	{fp}		; (str fp, [sp, #-4]!)
   16bd8:	add	fp, sp, #0
   16bdc:	sub	sp, sp, #20
   16be0:	str	r0, [fp, #-8]
   16be4:	str	r1, [fp, #-12]
   16be8:	mov	r3, r2
   16bec:	strh	r3, [fp, #-14]
   16bf0:	ldr	r3, [fp, #-8]
   16bf4:	ldr	r3, [r3, #136]	; 0x88
   16bf8:	mov	r2, r3
   16bfc:	ldr	r3, [fp, #-12]
   16c00:	sub	r3, r2, r3
   16c04:	ldrh	r2, [fp, #-14]
   16c08:	sub	r2, r2, #1
   16c0c:	and	r3, r3, r2
   16c10:	mov	r0, r3
   16c14:	add	sp, fp, #0
   16c18:	pop	{fp}		; (ldr fp, [sp], #4)
   16c1c:	bx	lr
   16c20:	push	{fp}		; (str fp, [sp, #-4]!)
   16c24:	add	fp, sp, #0
   16c28:	sub	sp, sp, #12
   16c2c:	str	r0, [fp, #-8]
   16c30:	mov	r3, r1
   16c34:	strh	r3, [fp, #-10]
   16c38:	ldr	r3, [fp, #-8]
   16c3c:	ldr	r2, [r3, #140]	; 0x8c
   16c40:	ldrh	r3, [fp, #-10]
   16c44:	sub	r3, r3, #1
   16c48:	and	r3, r3, r2
   16c4c:	mov	r0, r3
   16c50:	add	sp, fp, #0
   16c54:	pop	{fp}		; (ldr fp, [sp], #4)
   16c58:	bx	lr
   16c5c:	str	r4, [sp, #-12]!
   16c60:	str	fp, [sp, #4]
   16c64:	str	lr, [sp, #8]
   16c68:	add	fp, sp, #8
   16c6c:	sub	sp, sp, #28
   16c70:	str	r0, [fp, #-24]	; 0xffffffe8
   16c74:	str	r1, [fp, #-28]	; 0xffffffe4
   16c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c7c:	ldr	r3, [r3, #136]	; 0x88
   16c80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16c84:	ldr	r2, [r2]
   16c88:	sub	r3, r3, r2
   16c8c:	str	r3, [fp, #-16]
   16c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c94:	ldr	r3, [r3, #136]	; 0x88
   16c98:	ldr	r2, [fp, #-16]
   16c9c:	cmp	r2, r3
   16ca0:	blt	16cc4 <flatcc_builder_get_user_frame_ptr@@Base+0x3e4>
   16ca4:	ldr	r3, [pc, #164]	; 16d50 <flatcc_builder_get_user_frame_ptr@@Base+0x470>
   16ca8:	add	r3, pc, r3
   16cac:	movw	r2, #647	; 0x287
   16cb0:	ldr	r1, [pc, #156]	; 16d54 <flatcc_builder_get_user_frame_ptr@@Base+0x474>
   16cb4:	add	r1, pc, r1
   16cb8:	ldr	r0, [pc, #152]	; 16d58 <flatcc_builder_get_user_frame_ptr@@Base+0x478>
   16cbc:	add	r0, pc, r0
   16cc0:	bl	12008 <__assert_fail@plt>
   16cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cc8:	ldr	r4, [r3, #44]	; 0x2c
   16ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cd0:	ldr	r0, [r3, #36]	; 0x24
   16cd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16cd8:	add	r1, r3, #8
   16cdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ce0:	ldr	r2, [r3, #4]
   16ce4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ce8:	ldr	r3, [r3]
   16cec:	str	r3, [sp]
   16cf0:	ldr	r3, [fp, #-16]
   16cf4:	blx	r4
   16cf8:	mov	r3, r0
   16cfc:	cmp	r3, #0
   16d00:	beq	16d24 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   16d04:	ldr	r3, [pc, #80]	; 16d5c <flatcc_builder_get_user_frame_ptr@@Base+0x47c>
   16d08:	add	r3, pc, r3
   16d0c:	movw	r2, #651	; 0x28b
   16d10:	ldr	r1, [pc, #72]	; 16d60 <flatcc_builder_get_user_frame_ptr@@Base+0x480>
   16d14:	add	r1, pc, r1
   16d18:	ldr	r0, [pc, #68]	; 16d64 <flatcc_builder_get_user_frame_ptr@@Base+0x484>
   16d1c:	add	r0, pc, r0
   16d20:	bl	12008 <__assert_fail@plt>
   16d24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d28:	ldr	r2, [fp, #-16]
   16d2c:	str	r2, [r3, #136]	; 0x88
   16d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d34:	ldr	r3, [r3, #136]	; 0x88
   16d38:	mov	r0, r3
   16d3c:	sub	sp, fp, #8
   16d40:	ldr	r4, [sp]
   16d44:	ldr	fp, [sp, #4]
   16d48:	add	sp, sp, #8
   16d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d50:	andeq	r6, r0, r4, lsr #13
   16d54:	ldrdeq	r6, [r0], -r8
   16d58:	andeq	r6, r0, r0, lsr r2
   16d5c:	andeq	r6, r0, r4, asr #12
   16d60:	andeq	r6, r0, r8, ror r1
   16d64:	ldrdeq	r6, [r0], -r0
   16d68:	str	r4, [sp, #-12]!
   16d6c:	str	fp, [sp, #4]
   16d70:	str	lr, [sp, #8]
   16d74:	add	fp, sp, #8
   16d78:	sub	sp, sp, #28
   16d7c:	str	r0, [fp, #-24]	; 0xffffffe8
   16d80:	str	r1, [fp, #-28]	; 0xffffffe4
   16d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d88:	ldr	r3, [r3, #140]	; 0x8c
   16d8c:	str	r3, [fp, #-16]
   16d90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d94:	ldr	r3, [r3]
   16d98:	mov	r2, r3
   16d9c:	ldr	r3, [fp, #-16]
   16da0:	add	r2, r2, r3
   16da4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16da8:	str	r2, [r3, #140]	; 0x8c
   16dac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16db0:	ldr	r3, [r3, #140]	; 0x8c
   16db4:	ldr	r2, [fp, #-16]
   16db8:	cmp	r2, r3
   16dbc:	ble	16de0 <flatcc_builder_get_user_frame_ptr@@Base+0x500>
   16dc0:	ldr	r3, [pc, #152]	; 16e60 <flatcc_builder_get_user_frame_ptr@@Base+0x580>
   16dc4:	add	r3, pc, r3
   16dc8:	movw	r2, #673	; 0x2a1
   16dcc:	ldr	r1, [pc, #144]	; 16e64 <flatcc_builder_get_user_frame_ptr@@Base+0x584>
   16dd0:	add	r1, pc, r1
   16dd4:	ldr	r0, [pc, #140]	; 16e68 <flatcc_builder_get_user_frame_ptr@@Base+0x588>
   16dd8:	add	r0, pc, r0
   16ddc:	bl	12008 <__assert_fail@plt>
   16de0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16de4:	ldr	r4, [r3, #44]	; 0x2c
   16de8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dec:	ldr	r0, [r3, #36]	; 0x24
   16df0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16df4:	add	r1, r3, #8
   16df8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16dfc:	ldr	r2, [r3, #4]
   16e00:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e04:	ldr	r3, [r3]
   16e08:	str	r3, [sp]
   16e0c:	ldr	r3, [fp, #-16]
   16e10:	blx	r4
   16e14:	mov	r3, r0
   16e18:	cmp	r3, #0
   16e1c:	beq	16e40 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   16e20:	ldr	r3, [pc, #68]	; 16e6c <flatcc_builder_get_user_frame_ptr@@Base+0x58c>
   16e24:	add	r3, pc, r3
   16e28:	movw	r2, #677	; 0x2a5
   16e2c:	ldr	r1, [pc, #60]	; 16e70 <flatcc_builder_get_user_frame_ptr@@Base+0x590>
   16e30:	add	r1, pc, r1
   16e34:	ldr	r0, [pc, #56]	; 16e74 <flatcc_builder_get_user_frame_ptr@@Base+0x594>
   16e38:	add	r0, pc, r0
   16e3c:	bl	12008 <__assert_fail@plt>
   16e40:	ldr	r3, [fp, #-16]
   16e44:	add	r3, r3, #1
   16e48:	mov	r0, r3
   16e4c:	sub	sp, fp, #8
   16e50:	ldr	r4, [sp]
   16e54:	ldr	fp, [sp, #4]
   16e58:	add	sp, sp, #8
   16e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e60:	andeq	r6, r0, ip, ror r5
   16e64:	strheq	r6, [r0], -ip
   16e68:	andeq	r6, r0, r4, lsl r1
   16e6c:	andeq	r6, r0, ip, lsl r5
   16e70:	andeq	r6, r0, ip, asr r0
   16e74:	strheq	r6, [r0], -r4
   16e78:	str	r4, [sp, #-12]!
   16e7c:	str	fp, [sp, #4]
   16e80:	str	lr, [sp, #8]
   16e84:	add	fp, sp, #8
   16e88:	sub	sp, sp, #100	; 0x64
   16e8c:	str	r0, [fp, #-96]	; 0xffffffa0
   16e90:	str	r1, [fp, #-100]	; 0xffffff9c
   16e94:	str	r3, [fp, #-108]	; 0xffffff94
   16e98:	mov	r3, r2
   16e9c:	strh	r3, [fp, #-102]	; 0xffffff9a
   16ea0:	ldr	r4, [pc, #332]	; 16ff4 <flatcc_builder_get_user_frame_ptr@@Base+0x714>
   16ea4:	add	r4, pc, r4
   16ea8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   16eac:	cmp	r3, #0
   16eb0:	bne	16ed8 <flatcc_builder_get_user_frame_ptr@@Base+0x5f8>
   16eb4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16eb8:	ldrh	r3, [r3, #132]	; 0x84
   16ebc:	cmp	r3, #0
   16ec0:	beq	16ed0 <flatcc_builder_get_user_frame_ptr@@Base+0x5f0>
   16ec4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16ec8:	ldrh	r3, [r3, #132]	; 0x84
   16ecc:	b	16edc <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   16ed0:	mov	r3, #1
   16ed4:	b	16edc <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   16ed8:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   16edc:	strh	r3, [fp, #-102]	; 0xffffff9a
   16ee0:	mov	r1, #4
   16ee4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16ee8:	bl	165a0 <flatcc_builder_clear@@Base+0x10c>
   16eec:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   16ef0:	mov	r1, r3
   16ef4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   16ef8:	bl	165a0 <flatcc_builder_clear@@Base+0x10c>
   16efc:	ldr	r3, [fp, #-108]	; 0xffffff94
   16f00:	cmp	r3, #0
   16f04:	bne	16fd8 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   16f08:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   16f0c:	mov	r1, r3
   16f10:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16f14:	bl	16c20 <flatcc_builder_get_user_frame_ptr@@Base+0x340>
   16f18:	str	r0, [fp, #-16]
   16f1c:	ldr	r3, [fp, #-16]
   16f20:	cmp	r3, #0
   16f24:	beq	16fd8 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   16f28:	mov	r3, #0
   16f2c:	str	r3, [fp, #-88]	; 0xffffffa8
   16f30:	mov	r3, #0
   16f34:	str	r3, [fp, #-84]	; 0xffffffac
   16f38:	ldr	r3, [fp, #-16]
   16f3c:	cmp	r3, #0
   16f40:	beq	16f9c <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   16f44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16f48:	ldr	r3, [fp, #-16]
   16f4c:	add	r3, r2, r3
   16f50:	str	r3, [fp, #-88]	; 0xffffffa8
   16f54:	ldr	r3, [fp, #-84]	; 0xffffffac
   16f58:	add	r3, r3, #1
   16f5c:	lsl	r3, r3, #3
   16f60:	sub	r2, fp, #12
   16f64:	add	r3, r2, r3
   16f68:	ldr	r2, [pc, #136]	; 16ff8 <flatcc_builder_get_user_frame_ptr@@Base+0x718>
   16f6c:	ldr	r2, [r4, r2]
   16f70:	str	r2, [r3, #-76]	; 0xffffffb4
   16f74:	ldr	r3, [fp, #-84]	; 0xffffffac
   16f78:	add	r3, r3, #1
   16f7c:	lsl	r3, r3, #3
   16f80:	sub	r2, fp, #12
   16f84:	add	r3, r2, r3
   16f88:	ldr	r2, [fp, #-16]
   16f8c:	str	r2, [r3, #-72]	; 0xffffffb8
   16f90:	ldr	r3, [fp, #-84]	; 0xffffffac
   16f94:	add	r3, r3, #1
   16f98:	str	r3, [fp, #-84]	; 0xffffffac
   16f9c:	sub	r3, fp, #88	; 0x58
   16fa0:	mov	r1, r3
   16fa4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   16fa8:	bl	16d68 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   16fac:	mov	r3, r0
   16fb0:	cmp	r3, #0
   16fb4:	bne	16fd8 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   16fb8:	ldr	r3, [pc, #60]	; 16ffc <flatcc_builder_get_user_frame_ptr@@Base+0x71c>
   16fbc:	add	r3, pc, r3
   16fc0:	movw	r2, #702	; 0x2be
   16fc4:	ldr	r1, [pc, #52]	; 17000 <flatcc_builder_get_user_frame_ptr@@Base+0x720>
   16fc8:	add	r1, pc, r1
   16fcc:	ldr	r0, [pc, #48]	; 17004 <flatcc_builder_get_user_frame_ptr@@Base+0x724>
   16fd0:	add	r0, pc, r0
   16fd4:	bl	12008 <__assert_fail@plt>
   16fd8:	mov	r3, #0
   16fdc:	mov	r0, r3
   16fe0:	sub	sp, fp, #8
   16fe4:	ldr	r4, [sp]
   16fe8:	ldr	fp, [sp, #4]
   16fec:	add	sp, sp, #8
   16ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ff4:	andeq	r7, r1, r4, asr r1
   16ff8:	andeq	r0, r0, ip, asr #32
   16ffc:	andeq	r6, r0, r4, ror r3
   17000:	andeq	r5, r0, r4, asr #29
   17004:	andeq	r5, r0, ip, lsl pc

00017008 <flatcc_builder_embed_buffer@@Base>:
   17008:	str	r4, [sp, #-12]!
   1700c:	str	fp, [sp, #4]
   17010:	str	lr, [sp, #8]
   17014:	add	fp, sp, #8
   17018:	sub	sp, sp, #108	; 0x6c
   1701c:	str	r0, [fp, #-104]	; 0xffffff98
   17020:	str	r2, [fp, #-112]	; 0xffffff90
   17024:	str	r3, [fp, #-116]	; 0xffffff8c
   17028:	mov	r3, r1
   1702c:	strh	r3, [fp, #-106]	; 0xffffff96
   17030:	ldr	r4, [pc, #504]	; 17230 <flatcc_builder_embed_buffer@@Base+0x228>
   17034:	add	r4, pc, r4
   17038:	ldr	r3, [fp, #8]
   1703c:	and	r3, r3, #2
   17040:	str	r3, [fp, #-16]
   17044:	ldr	r3, [fp, #-104]	; 0xffffff98
   17048:	ldr	r3, [r3, #152]	; 0x98
   1704c:	cmp	r3, #0
   17050:	movne	r3, #1
   17054:	moveq	r3, #0
   17058:	uxtb	r3, r3
   1705c:	ldrh	r2, [fp, #-106]	; 0xffffff96
   17060:	add	r1, fp, #4
   17064:	ldr	r0, [fp, #-104]	; 0xffffff98
   17068:	bl	16e78 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   1706c:	mov	r3, r0
   17070:	cmp	r3, #0
   17074:	beq	17080 <flatcc_builder_embed_buffer@@Base+0x78>
   17078:	mov	r3, #0
   1707c:	b	17218 <flatcc_builder_embed_buffer@@Base+0x210>
   17080:	ldr	r3, [fp, #-16]
   17084:	cmp	r3, #0
   17088:	beq	17094 <flatcc_builder_embed_buffer@@Base+0x8c>
   1708c:	mov	r2, #4
   17090:	b	17098 <flatcc_builder_embed_buffer@@Base+0x90>
   17094:	mov	r2, #0
   17098:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1709c:	add	r3, r2, r3
   170a0:	ldrh	r2, [fp, #4]
   170a4:	mov	r1, r3
   170a8:	ldr	r0, [fp, #-104]	; 0xffffff98
   170ac:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   170b0:	str	r0, [fp, #-20]	; 0xffffffec
   170b4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   170b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   170bc:	add	r3, r2, r3
   170c0:	mov	r0, r3
   170c4:	bl	15450 <main@@Base+0x248>
   170c8:	mov	r3, r0
   170cc:	str	r3, [fp, #-24]	; 0xffffffe8
   170d0:	mov	r3, #0
   170d4:	str	r3, [fp, #-96]	; 0xffffffa0
   170d8:	mov	r3, #0
   170dc:	str	r3, [fp, #-92]	; 0xffffffa4
   170e0:	ldr	r3, [fp, #-104]	; 0xffffff98
   170e4:	ldr	r3, [r3, #152]	; 0x98
   170e8:	cmp	r3, #0
   170ec:	beq	17140 <flatcc_builder_embed_buffer@@Base+0x138>
   170f0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   170f4:	add	r3, r3, #4
   170f8:	str	r3, [fp, #-96]	; 0xffffffa0
   170fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17100:	add	r3, r3, #1
   17104:	lsl	r3, r3, #3
   17108:	sub	r2, fp, #12
   1710c:	add	r3, r2, r3
   17110:	sub	r2, fp, #24
   17114:	str	r2, [r3, #-84]	; 0xffffffac
   17118:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1711c:	add	r3, r3, #1
   17120:	lsl	r3, r3, #3
   17124:	sub	r2, fp, #12
   17128:	add	r3, r2, r3
   1712c:	mov	r2, #4
   17130:	str	r2, [r3, #-80]	; 0xffffffb0
   17134:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17138:	add	r3, r3, #1
   1713c:	str	r3, [fp, #-92]	; 0xffffffa4
   17140:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17144:	cmp	r3, #0
   17148:	beq	171a0 <flatcc_builder_embed_buffer@@Base+0x198>
   1714c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17150:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17154:	add	r3, r2, r3
   17158:	str	r3, [fp, #-96]	; 0xffffffa0
   1715c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17160:	add	r3, r3, #1
   17164:	lsl	r3, r3, #3
   17168:	sub	r2, fp, #12
   1716c:	add	r3, r2, r3
   17170:	ldr	r2, [fp, #-112]	; 0xffffff90
   17174:	str	r2, [r3, #-84]	; 0xffffffac
   17178:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1717c:	add	r3, r3, #1
   17180:	lsl	r3, r3, #3
   17184:	sub	r2, fp, #12
   17188:	add	r3, r2, r3
   1718c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17190:	str	r2, [r3, #-80]	; 0xffffffb0
   17194:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17198:	add	r3, r3, #1
   1719c:	str	r3, [fp, #-92]	; 0xffffffa4
   171a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   171a4:	cmp	r3, #0
   171a8:	beq	17204 <flatcc_builder_embed_buffer@@Base+0x1fc>
   171ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   171b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   171b4:	add	r3, r2, r3
   171b8:	str	r3, [fp, #-96]	; 0xffffffa0
   171bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171c0:	add	r3, r3, #1
   171c4:	lsl	r3, r3, #3
   171c8:	sub	r2, fp, #12
   171cc:	add	r3, r2, r3
   171d0:	ldr	r2, [pc, #92]	; 17234 <flatcc_builder_embed_buffer@@Base+0x22c>
   171d4:	ldr	r2, [r4, r2]
   171d8:	str	r2, [r3, #-84]	; 0xffffffac
   171dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171e0:	add	r3, r3, #1
   171e4:	lsl	r3, r3, #3
   171e8:	sub	r2, fp, #12
   171ec:	add	r3, r2, r3
   171f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   171f4:	str	r2, [r3, #-80]	; 0xffffffb0
   171f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171fc:	add	r3, r3, #1
   17200:	str	r3, [fp, #-92]	; 0xffffffa4
   17204:	sub	r3, fp, #96	; 0x60
   17208:	mov	r1, r3
   1720c:	ldr	r0, [fp, #-104]	; 0xffffff98
   17210:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   17214:	mov	r3, r0
   17218:	mov	r0, r3
   1721c:	sub	sp, fp, #8
   17220:	ldr	r4, [sp]
   17224:	ldr	fp, [sp, #4]
   17228:	add	sp, sp, #8
   1722c:	pop	{pc}		; (ldr pc, [sp], #4)
   17230:	andeq	r6, r1, r4, asr #31
   17234:	andeq	r0, r0, ip, asr #32

00017238 <flatcc_builder_create_buffer@@Base>:
   17238:	str	r4, [sp, #-12]!
   1723c:	str	fp, [sp, #4]
   17240:	str	lr, [sp, #8]
   17244:	add	fp, sp, #8
   17248:	sub	sp, sp, #132	; 0x84
   1724c:	str	r0, [fp, #-128]	; 0xffffff80
   17250:	str	r1, [fp, #-132]	; 0xffffff7c
   17254:	str	r3, [fp, #-140]	; 0xffffff74
   17258:	mov	r3, r2
   1725c:	strh	r3, [fp, #-134]	; 0xffffff7a
   17260:	ldr	r4, [pc, #944]	; 17618 <flatcc_builder_create_buffer@@Base+0x3e0>
   17264:	add	r4, pc, r4
   17268:	mov	r3, #0
   1726c:	str	r3, [fp, #-16]
   17270:	mov	r3, #0
   17274:	str	r3, [fp, #-120]	; 0xffffff88
   17278:	ldr	r3, [fp, #8]
   1727c:	and	r3, r3, #1
   17280:	cmp	r3, #0
   17284:	movne	r3, #1
   17288:	moveq	r3, #0
   1728c:	uxtb	r3, r3
   17290:	str	r3, [fp, #-20]	; 0xffffffec
   17294:	ldr	r3, [fp, #8]
   17298:	and	r3, r3, #2
   1729c:	cmp	r3, #0
   172a0:	movne	r3, #1
   172a4:	moveq	r3, #0
   172a8:	uxtb	r3, r3
   172ac:	str	r3, [fp, #-24]	; 0xffffffe8
   172b0:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   172b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172b8:	add	r1, fp, #4
   172bc:	ldr	r0, [fp, #-128]	; 0xffffff80
   172c0:	bl	16e78 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   172c4:	mov	r3, r0
   172c8:	cmp	r3, #0
   172cc:	beq	172d8 <flatcc_builder_create_buffer@@Base+0xa0>
   172d0:	mov	r3, #0
   172d4:	b	17600 <flatcc_builder_create_buffer@@Base+0x3c8>
   172d8:	ldrh	r3, [fp, #4]
   172dc:	mov	r1, r3
   172e0:	ldr	r0, [fp, #-128]	; 0xffffff80
   172e4:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   172e8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   172ec:	cmp	r3, #0
   172f0:	beq	17328 <flatcc_builder_create_buffer@@Base+0xf0>
   172f4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   172f8:	ldr	r3, [r3]
   172fc:	str	r3, [fp, #-120]	; 0xffffff88
   17300:	ldr	r3, [fp, #-120]	; 0xffffff88
   17304:	mov	r0, r3
   17308:	bl	1549c <main@@Base+0x294>
   1730c:	mov	r3, r0
   17310:	str	r3, [fp, #-120]	; 0xffffff88
   17314:	ldr	r3, [fp, #-120]	; 0xffffff88
   17318:	mov	r0, r3
   1731c:	bl	15450 <main@@Base+0x248>
   17320:	mov	r3, r0
   17324:	str	r3, [fp, #-120]	; 0xffffff88
   17328:	ldr	r3, [fp, #-120]	; 0xffffff88
   1732c:	cmp	r3, #0
   17330:	beq	1733c <flatcc_builder_create_buffer@@Base+0x104>
   17334:	mov	r3, #4
   17338:	b	17340 <flatcc_builder_create_buffer@@Base+0x108>
   1733c:	mov	r3, #0
   17340:	str	r3, [fp, #-16]
   17344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17348:	cmp	r3, #0
   1734c:	beq	17358 <flatcc_builder_create_buffer@@Base+0x120>
   17350:	mov	r2, #4
   17354:	b	1735c <flatcc_builder_create_buffer@@Base+0x124>
   17358:	mov	r2, #0
   1735c:	ldr	r3, [fp, #-16]
   17360:	add	r3, r2, r3
   17364:	add	r3, r3, #4
   17368:	ldrh	r2, [fp, #4]
   1736c:	mov	r1, r3
   17370:	ldr	r0, [fp, #-128]	; 0xffffff80
   17374:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   17378:	str	r0, [fp, #-28]	; 0xffffffe4
   1737c:	mov	r3, #0
   17380:	str	r3, [fp, #-116]	; 0xffffff8c
   17384:	mov	r3, #0
   17388:	str	r3, [fp, #-112]	; 0xffffff90
   1738c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17390:	cmp	r3, #0
   17394:	bne	173a4 <flatcc_builder_create_buffer@@Base+0x16c>
   17398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1739c:	cmp	r3, #0
   173a0:	beq	173f4 <flatcc_builder_create_buffer@@Base+0x1bc>
   173a4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   173a8:	add	r3, r3, #4
   173ac:	str	r3, [fp, #-116]	; 0xffffff8c
   173b0:	ldr	r3, [fp, #-112]	; 0xffffff90
   173b4:	add	r3, r3, #1
   173b8:	lsl	r3, r3, #3
   173bc:	sub	r2, fp, #12
   173c0:	add	r3, r2, r3
   173c4:	sub	r2, fp, #44	; 0x2c
   173c8:	str	r2, [r3, #-104]	; 0xffffff98
   173cc:	ldr	r3, [fp, #-112]	; 0xffffff90
   173d0:	add	r3, r3, #1
   173d4:	lsl	r3, r3, #3
   173d8:	sub	r2, fp, #12
   173dc:	add	r3, r2, r3
   173e0:	mov	r2, #4
   173e4:	str	r2, [r3, #-100]	; 0xffffff9c
   173e8:	ldr	r3, [fp, #-112]	; 0xffffff90
   173ec:	add	r3, r3, #1
   173f0:	str	r3, [fp, #-112]	; 0xffffff90
   173f4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   173f8:	add	r3, r3, #4
   173fc:	str	r3, [fp, #-116]	; 0xffffff8c
   17400:	ldr	r3, [fp, #-112]	; 0xffffff90
   17404:	add	r3, r3, #1
   17408:	lsl	r3, r3, #3
   1740c:	sub	r2, fp, #12
   17410:	add	r3, r2, r3
   17414:	sub	r2, fp, #40	; 0x28
   17418:	str	r2, [r3, #-104]	; 0xffffff98
   1741c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17420:	add	r3, r3, #1
   17424:	lsl	r3, r3, #3
   17428:	sub	r2, fp, #12
   1742c:	add	r3, r2, r3
   17430:	mov	r2, #4
   17434:	str	r2, [r3, #-100]	; 0xffffff9c
   17438:	ldr	r3, [fp, #-112]	; 0xffffff90
   1743c:	add	r3, r3, #1
   17440:	str	r3, [fp, #-112]	; 0xffffff90
   17444:	ldr	r3, [fp, #-16]
   17448:	cmp	r3, #0
   1744c:	beq	174a4 <flatcc_builder_create_buffer@@Base+0x26c>
   17450:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17454:	ldr	r3, [fp, #-16]
   17458:	add	r3, r2, r3
   1745c:	str	r3, [fp, #-116]	; 0xffffff8c
   17460:	ldr	r3, [fp, #-112]	; 0xffffff90
   17464:	add	r3, r3, #1
   17468:	lsl	r3, r3, #3
   1746c:	sub	r2, fp, #12
   17470:	add	r3, r2, r3
   17474:	sub	r2, fp, #120	; 0x78
   17478:	str	r2, [r3, #-104]	; 0xffffff98
   1747c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17480:	add	r3, r3, #1
   17484:	lsl	r3, r3, #3
   17488:	sub	r2, fp, #12
   1748c:	add	r3, r2, r3
   17490:	ldr	r2, [fp, #-16]
   17494:	str	r2, [r3, #-100]	; 0xffffff9c
   17498:	ldr	r3, [fp, #-112]	; 0xffffff90
   1749c:	add	r3, r3, #1
   174a0:	str	r3, [fp, #-112]	; 0xffffff90
   174a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174a8:	cmp	r3, #0
   174ac:	beq	17508 <flatcc_builder_create_buffer@@Base+0x2d0>
   174b0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   174b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174b8:	add	r3, r2, r3
   174bc:	str	r3, [fp, #-116]	; 0xffffff8c
   174c0:	ldr	r3, [fp, #-112]	; 0xffffff90
   174c4:	add	r3, r3, #1
   174c8:	lsl	r3, r3, #3
   174cc:	sub	r2, fp, #12
   174d0:	add	r3, r2, r3
   174d4:	ldr	r2, [pc, #320]	; 1761c <flatcc_builder_create_buffer@@Base+0x3e4>
   174d8:	ldr	r2, [r4, r2]
   174dc:	str	r2, [r3, #-104]	; 0xffffff98
   174e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   174e4:	add	r3, r3, #1
   174e8:	lsl	r3, r3, #3
   174ec:	sub	r2, fp, #12
   174f0:	add	r3, r2, r3
   174f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   174f8:	str	r2, [r3, #-100]	; 0xffffff9c
   174fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   17500:	add	r3, r3, #1
   17504:	str	r3, [fp, #-112]	; 0xffffff90
   17508:	ldr	r3, [fp, #-128]	; 0xffffff80
   1750c:	ldr	r3, [r3, #136]	; 0x88
   17510:	mov	r2, r3
   17514:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17518:	sub	r3, r2, r3
   1751c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17520:	cmp	r2, #0
   17524:	bne	17534 <flatcc_builder_create_buffer@@Base+0x2fc>
   17528:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1752c:	cmp	r2, #0
   17530:	beq	1753c <flatcc_builder_create_buffer@@Base+0x304>
   17534:	mov	r2, #4
   17538:	b	17540 <flatcc_builder_create_buffer@@Base+0x308>
   1753c:	mov	r2, #0
   17540:	add	r3, r2, r3
   17544:	str	r3, [fp, #-32]	; 0xffffffe0
   17548:	ldr	r3, [fp, #-20]	; 0xffffffec
   1754c:	cmp	r3, #0
   17550:	beq	1757c <flatcc_builder_create_buffer@@Base+0x344>
   17554:	ldr	r3, [fp, #-128]	; 0xffffff80
   17558:	ldr	r3, [r3, #144]	; 0x90
   1755c:	mov	r2, r3
   17560:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17564:	sub	r3, r2, r3
   17568:	mov	r0, r3
   1756c:	bl	15450 <main@@Base+0x248>
   17570:	mov	r3, r0
   17574:	str	r3, [fp, #-44]	; 0xffffffd4
   17578:	b	175a0 <flatcc_builder_create_buffer@@Base+0x368>
   1757c:	ldr	r3, [fp, #-128]	; 0xffffff80
   17580:	ldr	r3, [r3, #140]	; 0x8c
   17584:	mov	r2, r3
   17588:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1758c:	sub	r3, r2, r3
   17590:	mov	r0, r3
   17594:	bl	15450 <main@@Base+0x248>
   17598:	mov	r3, r0
   1759c:	str	r3, [fp, #-44]	; 0xffffffd4
   175a0:	ldr	r2, [fp, #-140]	; 0xffffff74
   175a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   175a8:	sub	r3, r2, r3
   175ac:	mov	r0, r3
   175b0:	bl	15450 <main@@Base+0x248>
   175b4:	mov	r3, r0
   175b8:	str	r3, [fp, #-40]	; 0xffffffd8
   175bc:	sub	r3, fp, #116	; 0x74
   175c0:	mov	r1, r3
   175c4:	ldr	r0, [fp, #-128]	; 0xffffff80
   175c8:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   175cc:	str	r0, [fp, #-36]	; 0xffffffdc
   175d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   175d4:	cmp	r3, #0
   175d8:	bne	175fc <flatcc_builder_create_buffer@@Base+0x3c4>
   175dc:	ldr	r3, [pc, #60]	; 17620 <flatcc_builder_create_buffer@@Base+0x3e8>
   175e0:	add	r3, pc, r3
   175e4:	mov	r2, #772	; 0x304
   175e8:	ldr	r1, [pc, #52]	; 17624 <flatcc_builder_create_buffer@@Base+0x3ec>
   175ec:	add	r1, pc, r1
   175f0:	ldr	r0, [pc, #48]	; 17628 <flatcc_builder_create_buffer@@Base+0x3f0>
   175f4:	add	r0, pc, r0
   175f8:	bl	12008 <__assert_fail@plt>
   175fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17600:	mov	r0, r3
   17604:	sub	sp, fp, #8
   17608:	ldr	r4, [sp]
   1760c:	ldr	fp, [sp, #4]
   17610:	add	sp, sp, #8
   17614:	pop	{pc}		; (ldr pc, [sp], #4)
   17618:	muleq	r1, r4, sp
   1761c:	andeq	r0, r0, ip, asr #32
   17620:	andeq	r5, r0, r8, ror sp
   17624:	andeq	r5, r0, r0, lsr #17
   17628:	strdeq	r5, [r0], -r8

0001762c <flatcc_builder_create_struct@@Base>:
   1762c:	str	r4, [sp, #-12]!
   17630:	str	fp, [sp, #4]
   17634:	str	lr, [sp, #8]
   17638:	add	fp, sp, #8
   1763c:	sub	sp, sp, #100	; 0x64
   17640:	str	r0, [fp, #-96]	; 0xffffffa0
   17644:	str	r1, [fp, #-100]	; 0xffffff9c
   17648:	str	r2, [fp, #-104]	; 0xffffff98
   1764c:	strh	r3, [fp, #-106]	; 0xffffff96
   17650:	ldr	r4, [pc, #340]	; 177ac <flatcc_builder_create_struct@@Base+0x180>
   17654:	add	r4, pc, r4
   17658:	ldrh	r3, [fp, #-106]	; 0xffffff96
   1765c:	cmp	r3, #0
   17660:	bne	17684 <flatcc_builder_create_struct@@Base+0x58>
   17664:	ldr	r3, [pc, #324]	; 177b0 <flatcc_builder_create_struct@@Base+0x184>
   17668:	add	r3, pc, r3
   1766c:	movw	r2, #783	; 0x30f
   17670:	ldr	r1, [pc, #316]	; 177b4 <flatcc_builder_create_struct@@Base+0x188>
   17674:	add	r1, pc, r1
   17678:	ldr	r0, [pc, #312]	; 177b8 <flatcc_builder_create_struct@@Base+0x18c>
   1767c:	add	r0, pc, r0
   17680:	bl	12008 <__assert_fail@plt>
   17684:	ldrh	r3, [fp, #-106]	; 0xffffff96
   17688:	mov	r1, r3
   1768c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17690:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   17694:	ldrh	r3, [fp, #-106]	; 0xffffff96
   17698:	mov	r2, r3
   1769c:	ldr	r1, [fp, #-104]	; 0xffffff98
   176a0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   176a4:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   176a8:	str	r0, [fp, #-16]
   176ac:	mov	r3, #0
   176b0:	str	r3, [fp, #-88]	; 0xffffffa8
   176b4:	mov	r3, #0
   176b8:	str	r3, [fp, #-84]	; 0xffffffac
   176bc:	ldr	r3, [fp, #-104]	; 0xffffff98
   176c0:	cmp	r3, #0
   176c4:	beq	1771c <flatcc_builder_create_struct@@Base+0xf0>
   176c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   176cc:	ldr	r3, [fp, #-104]	; 0xffffff98
   176d0:	add	r3, r2, r3
   176d4:	str	r3, [fp, #-88]	; 0xffffffa8
   176d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   176dc:	add	r3, r3, #1
   176e0:	lsl	r3, r3, #3
   176e4:	sub	r2, fp, #12
   176e8:	add	r3, r2, r3
   176ec:	ldr	r2, [fp, #-100]	; 0xffffff9c
   176f0:	str	r2, [r3, #-76]	; 0xffffffb4
   176f4:	ldr	r3, [fp, #-84]	; 0xffffffac
   176f8:	add	r3, r3, #1
   176fc:	lsl	r3, r3, #3
   17700:	sub	r2, fp, #12
   17704:	add	r3, r2, r3
   17708:	ldr	r2, [fp, #-104]	; 0xffffff98
   1770c:	str	r2, [r3, #-72]	; 0xffffffb8
   17710:	ldr	r3, [fp, #-84]	; 0xffffffac
   17714:	add	r3, r3, #1
   17718:	str	r3, [fp, #-84]	; 0xffffffac
   1771c:	ldr	r3, [fp, #-16]
   17720:	cmp	r3, #0
   17724:	beq	17780 <flatcc_builder_create_struct@@Base+0x154>
   17728:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1772c:	ldr	r3, [fp, #-16]
   17730:	add	r3, r2, r3
   17734:	str	r3, [fp, #-88]	; 0xffffffa8
   17738:	ldr	r3, [fp, #-84]	; 0xffffffac
   1773c:	add	r3, r3, #1
   17740:	lsl	r3, r3, #3
   17744:	sub	r2, fp, #12
   17748:	add	r3, r2, r3
   1774c:	ldr	r2, [pc, #104]	; 177bc <flatcc_builder_create_struct@@Base+0x190>
   17750:	ldr	r2, [r4, r2]
   17754:	str	r2, [r3, #-76]	; 0xffffffb4
   17758:	ldr	r3, [fp, #-84]	; 0xffffffac
   1775c:	add	r3, r3, #1
   17760:	lsl	r3, r3, #3
   17764:	sub	r2, fp, #12
   17768:	add	r3, r2, r3
   1776c:	ldr	r2, [fp, #-16]
   17770:	str	r2, [r3, #-72]	; 0xffffffb8
   17774:	ldr	r3, [fp, #-84]	; 0xffffffac
   17778:	add	r3, r3, #1
   1777c:	str	r3, [fp, #-84]	; 0xffffffac
   17780:	sub	r3, fp, #88	; 0x58
   17784:	mov	r1, r3
   17788:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1778c:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   17790:	mov	r3, r0
   17794:	mov	r0, r3
   17798:	sub	sp, fp, #8
   1779c:	ldr	r4, [sp]
   177a0:	ldr	fp, [sp, #4]
   177a4:	add	sp, sp, #8
   177a8:	pop	{pc}		; (ldr pc, [sp], #4)
   177ac:	andeq	r6, r1, r4, lsr #19
   177b0:	andeq	r5, r0, r0, lsl sp
   177b4:	andeq	r5, r0, r8, lsl r8
   177b8:	ldrdeq	r5, [r0], -r4
   177bc:	andeq	r0, r0, ip, asr #32

000177c0 <flatcc_builder_start_buffer@@Base>:
   177c0:	str	r4, [sp, #-12]!
   177c4:	str	fp, [sp, #4]
   177c8:	str	lr, [sp, #8]
   177cc:	add	fp, sp, #8
   177d0:	sub	sp, sp, #20
   177d4:	str	r0, [fp, #-16]
   177d8:	str	r1, [fp, #-20]	; 0xffffffec
   177dc:	str	r3, [fp, #-28]	; 0xffffffe4
   177e0:	mov	r3, r2
   177e4:	strh	r3, [fp, #-22]	; 0xffffffea
   177e8:	ldr	r4, [pc, #312]	; 17928 <flatcc_builder_start_buffer@@Base+0x168>
   177ec:	add	r4, pc, r4
   177f0:	ldr	r3, [fp, #-16]
   177f4:	ldrh	r3, [r3, #128]	; 0x80
   177f8:	mov	r1, r3
   177fc:	ldr	r0, [fp, #-16]
   17800:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   17804:	mov	r3, r0
   17808:	cmp	r3, #0
   1780c:	beq	17818 <flatcc_builder_start_buffer@@Base+0x58>
   17810:	mvn	r3, #0
   17814:	b	17910 <flatcc_builder_start_buffer@@Base+0x150>
   17818:	ldr	r3, [fp, #-16]
   1781c:	mov	r2, #1
   17820:	strh	r2, [r3, #128]	; 0x80
   17824:	ldr	r3, [fp, #-16]
   17828:	ldr	r3, [r3, #32]
   1782c:	ldr	r2, [fp, #-16]
   17830:	ldrh	r2, [r2, #132]	; 0x84
   17834:	strh	r2, [r3, #34]	; 0x22
   17838:	ldr	r3, [fp, #-16]
   1783c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   17840:	strh	r2, [r3, #132]	; 0x84
   17844:	ldr	r3, [fp, #-16]
   17848:	ldr	r3, [r3, #32]
   1784c:	ldr	r2, [fp, #-16]
   17850:	ldrh	r2, [r2, #164]	; 0xa4
   17854:	strh	r2, [r3, #32]
   17858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1785c:	uxth	r2, r3
   17860:	ldr	r3, [fp, #-16]
   17864:	strh	r2, [r3, #164]	; 0xa4
   17868:	ldr	r3, [fp, #-16]
   1786c:	ldr	r3, [r3, #32]
   17870:	ldr	r2, [fp, #-16]
   17874:	ldr	r2, [r2, #144]	; 0x90
   17878:	str	r2, [r3, #20]
   1787c:	ldr	r3, [fp, #-16]
   17880:	ldr	r3, [r3, #32]
   17884:	ldr	r2, [fp, #-16]
   17888:	ldr	r2, [r2, #152]	; 0x98
   1788c:	str	r2, [r3, #28]
   17890:	ldr	r3, [fp, #-16]
   17894:	ldr	r2, [r3, #136]	; 0x88
   17898:	ldr	r3, [fp, #-16]
   1789c:	str	r2, [r3, #144]	; 0x90
   178a0:	ldr	r3, [fp, #-16]
   178a4:	ldr	r3, [r3, #148]	; 0x94
   178a8:	add	r1, r3, #1
   178ac:	ldr	r2, [fp, #-16]
   178b0:	str	r1, [r2, #148]	; 0x94
   178b4:	ldr	r2, [fp, #-16]
   178b8:	str	r3, [r2, #152]	; 0x98
   178bc:	ldr	r3, [fp, #-16]
   178c0:	ldr	r3, [r3, #32]
   178c4:	ldr	r2, [fp, #-16]
   178c8:	ldr	r2, [r2, #168]	; 0xa8
   178cc:	str	r2, [r3, #16]
   178d0:	ldr	r3, [fp, #-16]
   178d4:	add	r2, r3, #168	; 0xa8
   178d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   178dc:	cmp	r3, #0
   178e0:	beq	178ec <flatcc_builder_start_buffer@@Base+0x12c>
   178e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   178e8:	b	178f4 <flatcc_builder_start_buffer@@Base+0x134>
   178ec:	ldr	r3, [pc, #56]	; 1792c <flatcc_builder_start_buffer@@Base+0x16c>
   178f0:	ldr	r3, [r4, r3]
   178f4:	ldr	r3, [r3]
   178f8:	str	r3, [r2]
   178fc:	ldr	r3, [fp, #-16]
   17900:	ldr	r3, [r3, #32]
   17904:	mov	r2, #1
   17908:	strh	r2, [r3, #14]
   1790c:	mov	r3, #0
   17910:	mov	r0, r3
   17914:	sub	sp, fp, #8
   17918:	ldr	r4, [sp]
   1791c:	ldr	fp, [sp, #4]
   17920:	add	sp, sp, #8
   17924:	pop	{pc}		; (ldr pc, [sp], #4)
   17928:	andeq	r6, r1, ip, lsl #16
   1792c:	andeq	r0, r0, ip, asr #32

00017930 <flatcc_builder_end_buffer@@Base>:
   17930:	str	fp, [sp, #-8]!
   17934:	str	lr, [sp, #4]
   17938:	add	fp, sp, #4
   1793c:	sub	sp, sp, #24
   17940:	str	r0, [fp, #-16]
   17944:	str	r1, [fp, #-20]	; 0xffffffec
   17948:	ldr	r3, [fp, #-16]
   1794c:	ldrh	r3, [r3, #164]	; 0xa4
   17950:	and	r3, r3, #2
   17954:	str	r3, [fp, #-8]
   17958:	ldr	r3, [fp, #-16]
   1795c:	ldr	r3, [r3, #152]	; 0x98
   17960:	cmp	r3, #0
   17964:	movne	r3, #1
   17968:	moveq	r3, #0
   1796c:	uxtb	r3, r3
   17970:	mov	r2, r3
   17974:	ldr	r3, [fp, #-8]
   17978:	orr	r3, r3, r2
   1797c:	str	r3, [fp, #-8]
   17980:	ldr	r3, [fp, #-16]
   17984:	ldr	r3, [r3, #32]
   17988:	ldrh	r3, [r3, #14]
   1798c:	cmp	r3, #1
   17990:	beq	179b4 <flatcc_builder_end_buffer@@Base+0x84>
   17994:	ldr	r3, [pc, #232]	; 17a84 <flatcc_builder_end_buffer@@Base+0x154>
   17998:	add	r3, pc, r3
   1799c:	movw	r2, #838	; 0x346
   179a0:	ldr	r1, [pc, #224]	; 17a88 <flatcc_builder_end_buffer@@Base+0x158>
   179a4:	add	r1, pc, r1
   179a8:	ldr	r0, [pc, #220]	; 17a8c <flatcc_builder_end_buffer@@Base+0x15c>
   179ac:	add	r0, pc, r0
   179b0:	bl	12008 <__assert_fail@plt>
   179b4:	ldr	r3, [fp, #-16]
   179b8:	ldrh	r3, [r3, #132]	; 0x84
   179bc:	mov	r1, r3
   179c0:	ldr	r0, [fp, #-16]
   179c4:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   179c8:	ldr	r3, [fp, #-16]
   179cc:	add	r1, r3, #168	; 0xa8
   179d0:	ldr	r3, [fp, #-16]
   179d4:	ldrh	r0, [r3, #132]	; 0x84
   179d8:	ldr	r3, [fp, #-16]
   179dc:	ldrh	r3, [r3, #128]	; 0x80
   179e0:	ldr	r2, [fp, #-8]
   179e4:	str	r2, [sp, #4]
   179e8:	str	r3, [sp]
   179ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   179f0:	mov	r2, r0
   179f4:	ldr	r0, [fp, #-16]
   179f8:	bl	17238 <flatcc_builder_create_buffer@@Base>
   179fc:	str	r0, [fp, #-12]
   17a00:	ldr	r3, [fp, #-12]
   17a04:	cmp	r3, #0
   17a08:	bne	17a14 <flatcc_builder_end_buffer@@Base+0xe4>
   17a0c:	mov	r3, #0
   17a10:	b	17a70 <flatcc_builder_end_buffer@@Base+0x140>
   17a14:	ldr	r3, [fp, #-16]
   17a18:	ldr	r3, [r3, #32]
   17a1c:	ldr	r2, [r3, #20]
   17a20:	ldr	r3, [fp, #-16]
   17a24:	str	r2, [r3, #144]	; 0x90
   17a28:	ldr	r3, [fp, #-16]
   17a2c:	ldr	r3, [r3, #32]
   17a30:	ldr	r2, [r3, #28]
   17a34:	ldr	r3, [fp, #-16]
   17a38:	str	r2, [r3, #152]	; 0x98
   17a3c:	ldr	r3, [fp, #-16]
   17a40:	ldr	r3, [r3, #32]
   17a44:	ldr	r2, [r3, #16]
   17a48:	ldr	r3, [fp, #-16]
   17a4c:	str	r2, [r3, #168]	; 0xa8
   17a50:	ldr	r3, [fp, #-16]
   17a54:	ldr	r3, [r3, #32]
   17a58:	ldrh	r2, [r3, #32]
   17a5c:	ldr	r3, [fp, #-16]
   17a60:	strh	r2, [r3, #164]	; 0xa4
   17a64:	ldr	r0, [fp, #-16]
   17a68:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   17a6c:	ldr	r3, [fp, #-12]
   17a70:	mov	r0, r3
   17a74:	sub	sp, fp, #4
   17a78:	ldr	fp, [sp]
   17a7c:	add	sp, sp, #4
   17a80:	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	andeq	r5, r0, r0, lsl #20
   17a88:	andeq	r5, r0, r8, ror #9
   17a8c:			; <UNDEFINED> instruction: 0x000055b0

00017a90 <flatcc_builder_start_struct@@Base>:
   17a90:	str	fp, [sp, #-8]!
   17a94:	str	lr, [sp, #4]
   17a98:	add	fp, sp, #4
   17a9c:	sub	sp, sp, #16
   17aa0:	str	r0, [fp, #-8]
   17aa4:	str	r1, [fp, #-12]
   17aa8:	mov	r3, r2
   17aac:	strh	r3, [fp, #-14]
   17ab0:	ldrh	r3, [fp, #-14]
   17ab4:	mov	r1, r3
   17ab8:	ldr	r0, [fp, #-8]
   17abc:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   17ac0:	mov	r3, r0
   17ac4:	cmp	r3, #0
   17ac8:	beq	17ad4 <flatcc_builder_start_struct@@Base+0x44>
   17acc:	mov	r3, #0
   17ad0:	b	17b00 <flatcc_builder_start_struct@@Base+0x70>
   17ad4:	ldr	r3, [fp, #-8]
   17ad8:	ldr	r3, [r3, #32]
   17adc:	mov	r2, #2
   17ae0:	strh	r2, [r3, #14]
   17ae4:	mvn	r1, #3
   17ae8:	ldr	r0, [fp, #-8]
   17aec:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   17af0:	ldr	r1, [fp, #-12]
   17af4:	ldr	r0, [fp, #-8]
   17af8:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   17afc:	mov	r3, r0
   17b00:	mov	r0, r3
   17b04:	sub	sp, fp, #4
   17b08:	ldr	fp, [sp]
   17b0c:	add	sp, sp, #4
   17b10:	pop	{pc}		; (ldr pc, [sp], #4)

00017b14 <flatcc_builder_struct_edit@@Base>:
   17b14:	push	{fp}		; (str fp, [sp, #-4]!)
   17b18:	add	fp, sp, #0
   17b1c:	sub	sp, sp, #12
   17b20:	str	r0, [fp, #-8]
   17b24:	ldr	r3, [fp, #-8]
   17b28:	ldr	r3, [r3, #16]
   17b2c:	mov	r0, r3
   17b30:	add	sp, fp, #0
   17b34:	pop	{fp}		; (ldr fp, [sp], #4)
   17b38:	bx	lr

00017b3c <flatcc_builder_end_struct@@Base>:
   17b3c:	str	fp, [sp, #-8]!
   17b40:	str	lr, [sp, #4]
   17b44:	add	fp, sp, #4
   17b48:	sub	sp, sp, #16
   17b4c:	str	r0, [fp, #-16]
   17b50:	ldr	r3, [fp, #-16]
   17b54:	ldr	r3, [r3, #32]
   17b58:	ldrh	r3, [r3, #14]
   17b5c:	cmp	r3, #2
   17b60:	beq	17b84 <flatcc_builder_end_struct@@Base+0x48>
   17b64:	ldr	r3, [pc, #112]	; 17bdc <flatcc_builder_end_struct@@Base+0xa0>
   17b68:	add	r3, pc, r3
   17b6c:	mov	r2, #872	; 0x368
   17b70:	ldr	r1, [pc, #104]	; 17be0 <flatcc_builder_end_struct@@Base+0xa4>
   17b74:	add	r1, pc, r1
   17b78:	ldr	r0, [pc, #100]	; 17be4 <flatcc_builder_end_struct@@Base+0xa8>
   17b7c:	add	r0, pc, r0
   17b80:	bl	12008 <__assert_fail@plt>
   17b84:	ldr	r3, [fp, #-16]
   17b88:	ldr	r1, [r3, #16]
   17b8c:	ldr	r3, [fp, #-16]
   17b90:	ldr	r2, [r3, #20]
   17b94:	ldr	r3, [fp, #-16]
   17b98:	ldrh	r3, [r3, #130]	; 0x82
   17b9c:	ldr	r0, [fp, #-16]
   17ba0:	bl	1762c <flatcc_builder_create_struct@@Base>
   17ba4:	str	r0, [fp, #-8]
   17ba8:	ldr	r3, [fp, #-8]
   17bac:	cmp	r3, #0
   17bb0:	bne	17bbc <flatcc_builder_end_struct@@Base+0x80>
   17bb4:	mov	r3, #0
   17bb8:	b	17bc8 <flatcc_builder_end_struct@@Base+0x8c>
   17bbc:	ldr	r0, [fp, #-16]
   17bc0:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   17bc4:	ldr	r3, [fp, #-8]
   17bc8:	mov	r0, r3
   17bcc:	sub	sp, fp, #4
   17bd0:	ldr	fp, [sp]
   17bd4:	add	sp, sp, #4
   17bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bdc:	andeq	r5, r0, ip, asr #16
   17be0:	andeq	r5, r0, r8, lsl r3
   17be4:	andeq	r5, r0, ip, lsl #8
   17be8:	str	fp, [sp, #-8]!
   17bec:	str	lr, [sp, #4]
   17bf0:	add	fp, sp, #4
   17bf4:	sub	sp, sp, #24
   17bf8:	str	r0, [fp, #-16]
   17bfc:	str	r1, [fp, #-20]	; 0xffffffec
   17c00:	str	r2, [fp, #-24]	; 0xffffffe8
   17c04:	ldr	r3, [fp, #-16]
   17c08:	ldr	r3, [r3, #32]
   17c0c:	ldr	r3, [r3, #20]
   17c10:	str	r3, [fp, #-8]
   17c14:	ldr	r2, [fp, #-8]
   17c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c1c:	add	r3, r2, r3
   17c20:	str	r3, [fp, #-12]
   17c24:	ldr	r2, [fp, #-8]
   17c28:	ldr	r3, [fp, #-12]
   17c2c:	cmp	r2, r3
   17c30:	bhi	17c44 <flatcc_builder_end_struct@@Base+0x108>
   17c34:	ldr	r2, [fp, #-12]
   17c38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c3c:	cmp	r2, r3
   17c40:	bls	17c8c <flatcc_builder_end_struct@@Base+0x150>
   17c44:	ldr	r2, [fp, #-8]
   17c48:	ldr	r3, [fp, #-12]
   17c4c:	cmp	r2, r3
   17c50:	bhi	17c64 <flatcc_builder_end_struct@@Base+0x128>
   17c54:	ldr	r2, [fp, #-12]
   17c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c5c:	cmp	r2, r3
   17c60:	bls	17c84 <flatcc_builder_end_struct@@Base+0x148>
   17c64:	ldr	r3, [pc, #72]	; 17cb4 <flatcc_builder_end_struct@@Base+0x178>
   17c68:	add	r3, pc, r3
   17c6c:	mov	r2, #892	; 0x37c
   17c70:	ldr	r1, [pc, #64]	; 17cb8 <flatcc_builder_end_struct@@Base+0x17c>
   17c74:	add	r1, pc, r1
   17c78:	ldr	r0, [pc, #60]	; 17cbc <flatcc_builder_end_struct@@Base+0x180>
   17c7c:	add	r0, pc, r0
   17c80:	bl	12008 <__assert_fail@plt>
   17c84:	mvn	r3, #0
   17c88:	b	17ca0 <flatcc_builder_end_struct@@Base+0x164>
   17c8c:	ldr	r3, [fp, #-16]
   17c90:	ldr	r3, [r3, #32]
   17c94:	ldr	r2, [fp, #-12]
   17c98:	str	r2, [r3, #20]
   17c9c:	mov	r3, #0
   17ca0:	mov	r0, r3
   17ca4:	sub	sp, fp, #4
   17ca8:	ldr	fp, [sp]
   17cac:	add	sp, sp, #4
   17cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb4:	andeq	r5, r0, r8, ror #14
   17cb8:	andeq	r5, r0, r8, lsl r2
   17cbc:	andeq	r5, r0, r8, lsr r3

00017cc0 <flatcc_builder_extend_vector@@Base>:
   17cc0:	str	fp, [sp, #-8]!
   17cc4:	str	lr, [sp, #4]
   17cc8:	add	fp, sp, #4
   17ccc:	sub	sp, sp, #8
   17cd0:	str	r0, [fp, #-8]
   17cd4:	str	r1, [fp, #-12]
   17cd8:	ldr	r3, [fp, #-8]
   17cdc:	ldr	r3, [r3, #32]
   17ce0:	ldr	r3, [r3, #24]
   17ce4:	mov	r2, r3
   17ce8:	ldr	r1, [fp, #-12]
   17cec:	ldr	r0, [fp, #-8]
   17cf0:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   17cf4:	mov	r3, r0
   17cf8:	cmp	r3, #0
   17cfc:	beq	17d08 <flatcc_builder_extend_vector@@Base+0x48>
   17d00:	mov	r3, #0
   17d04:	b	17d2c <flatcc_builder_extend_vector@@Base+0x6c>
   17d08:	ldr	r3, [fp, #-8]
   17d0c:	ldr	r3, [r3, #32]
   17d10:	ldr	r3, [r3, #16]
   17d14:	ldr	r2, [fp, #-12]
   17d18:	mul	r3, r2, r3
   17d1c:	mov	r1, r3
   17d20:	ldr	r0, [fp, #-8]
   17d24:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   17d28:	mov	r3, r0
   17d2c:	mov	r0, r3
   17d30:	sub	sp, fp, #4
   17d34:	ldr	fp, [sp]
   17d38:	add	sp, sp, #4
   17d3c:	pop	{pc}		; (ldr pc, [sp], #4)

00017d40 <flatcc_builder_vector_push@@Base>:
   17d40:	str	fp, [sp, #-8]!
   17d44:	str	lr, [sp, #4]
   17d48:	add	fp, sp, #4
   17d4c:	sub	sp, sp, #8
   17d50:	str	r0, [fp, #-8]
   17d54:	str	r1, [fp, #-12]
   17d58:	ldr	r3, [fp, #-8]
   17d5c:	ldr	r3, [r3, #32]
   17d60:	ldrh	r3, [r3, #14]
   17d64:	cmp	r3, #4
   17d68:	beq	17d8c <flatcc_builder_vector_push@@Base+0x4c>
   17d6c:	ldr	r3, [pc, #208]	; 17e44 <flatcc_builder_vector_push@@Base+0x104>
   17d70:	add	r3, pc, r3
   17d74:	movw	r2, #907	; 0x38b
   17d78:	ldr	r1, [pc, #200]	; 17e48 <flatcc_builder_vector_push@@Base+0x108>
   17d7c:	add	r1, pc, r1
   17d80:	ldr	r0, [pc, #196]	; 17e4c <flatcc_builder_vector_push@@Base+0x10c>
   17d84:	add	r0, pc, r0
   17d88:	bl	12008 <__assert_fail@plt>
   17d8c:	ldr	r3, [fp, #-8]
   17d90:	ldr	r3, [r3, #32]
   17d94:	ldr	r2, [r3, #20]
   17d98:	ldr	r3, [fp, #-8]
   17d9c:	ldr	r3, [r3, #32]
   17da0:	ldr	r3, [r3, #24]
   17da4:	cmp	r2, r3
   17da8:	bls	17df4 <flatcc_builder_vector_push@@Base+0xb4>
   17dac:	ldr	r3, [fp, #-8]
   17db0:	ldr	r3, [r3, #32]
   17db4:	ldr	r2, [r3, #20]
   17db8:	ldr	r3, [fp, #-8]
   17dbc:	ldr	r3, [r3, #32]
   17dc0:	ldr	r3, [r3, #24]
   17dc4:	cmp	r2, r3
   17dc8:	bls	17dec <flatcc_builder_vector_push@@Base+0xac>
   17dcc:	ldr	r3, [pc, #124]	; 17e50 <flatcc_builder_vector_push@@Base+0x110>
   17dd0:	add	r3, pc, r3
   17dd4:	mov	r2, #908	; 0x38c
   17dd8:	ldr	r1, [pc, #116]	; 17e54 <flatcc_builder_vector_push@@Base+0x114>
   17ddc:	add	r1, pc, r1
   17de0:	ldr	r0, [pc, #112]	; 17e58 <flatcc_builder_vector_push@@Base+0x118>
   17de4:	add	r0, pc, r0
   17de8:	bl	12008 <__assert_fail@plt>
   17dec:	mov	r3, #0
   17df0:	b	17e30 <flatcc_builder_vector_push@@Base+0xf0>
   17df4:	ldr	r3, [fp, #-8]
   17df8:	ldr	r3, [r3, #32]
   17dfc:	ldr	r2, [r3, #20]
   17e00:	ldr	r3, [fp, #-8]
   17e04:	ldr	r3, [r3, #32]
   17e08:	add	r2, r2, #1
   17e0c:	str	r2, [r3, #20]
   17e10:	ldr	r3, [fp, #-8]
   17e14:	ldr	r3, [r3, #32]
   17e18:	ldr	r3, [r3, #16]
   17e1c:	mov	r2, r3
   17e20:	ldr	r1, [fp, #-12]
   17e24:	ldr	r0, [fp, #-8]
   17e28:	bl	159c0 <flatcc_builder_default_alloc@@Base+0x420>
   17e2c:	mov	r3, r0
   17e30:	mov	r0, r3
   17e34:	sub	sp, fp, #4
   17e38:	ldr	fp, [sp]
   17e3c:	add	sp, sp, #4
   17e40:	pop	{pc}		; (ldr pc, [sp], #4)
   17e44:	andeq	r5, r0, r4, ror r6
   17e48:	andeq	r5, r0, r0, lsl r1
   17e4c:	andeq	r5, r0, ip, asr #4
   17e50:	andeq	r5, r0, r4, lsl r6
   17e54:	strheq	r5, [r0], -r0
   17e58:	andeq	r5, r0, r8, lsl r2

00017e5c <flatcc_builder_append_vector@@Base>:
   17e5c:	str	fp, [sp, #-8]!
   17e60:	str	lr, [sp, #4]
   17e64:	add	fp, sp, #4
   17e68:	sub	sp, sp, #16
   17e6c:	str	r0, [fp, #-8]
   17e70:	str	r1, [fp, #-12]
   17e74:	str	r2, [fp, #-16]
   17e78:	ldr	r3, [fp, #-8]
   17e7c:	ldr	r3, [r3, #32]
   17e80:	ldrh	r3, [r3, #14]
   17e84:	cmp	r3, #4
   17e88:	beq	17eac <flatcc_builder_append_vector@@Base+0x50>
   17e8c:	ldr	r3, [pc, #132]	; 17f18 <flatcc_builder_append_vector@@Base+0xbc>
   17e90:	add	r3, pc, r3
   17e94:	movw	r2, #915	; 0x393
   17e98:	ldr	r1, [pc, #124]	; 17f1c <flatcc_builder_append_vector@@Base+0xc0>
   17e9c:	add	r1, pc, r1
   17ea0:	ldr	r0, [pc, #120]	; 17f20 <flatcc_builder_append_vector@@Base+0xc4>
   17ea4:	add	r0, pc, r0
   17ea8:	bl	12008 <__assert_fail@plt>
   17eac:	ldr	r3, [fp, #-8]
   17eb0:	ldr	r3, [r3, #32]
   17eb4:	ldr	r3, [r3, #24]
   17eb8:	mov	r2, r3
   17ebc:	ldr	r1, [fp, #-16]
   17ec0:	ldr	r0, [fp, #-8]
   17ec4:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   17ec8:	mov	r3, r0
   17ecc:	cmp	r3, #0
   17ed0:	beq	17edc <flatcc_builder_append_vector@@Base+0x80>
   17ed4:	mov	r3, #0
   17ed8:	b	17f04 <flatcc_builder_append_vector@@Base+0xa8>
   17edc:	ldr	r3, [fp, #-8]
   17ee0:	ldr	r3, [r3, #32]
   17ee4:	ldr	r3, [r3, #16]
   17ee8:	ldr	r2, [fp, #-16]
   17eec:	mul	r3, r2, r3
   17ef0:	mov	r2, r3
   17ef4:	ldr	r1, [fp, #-12]
   17ef8:	ldr	r0, [fp, #-8]
   17efc:	bl	159c0 <flatcc_builder_default_alloc@@Base+0x420>
   17f00:	mov	r3, r0
   17f04:	mov	r0, r3
   17f08:	sub	sp, fp, #4
   17f0c:	ldr	fp, [sp]
   17f10:	add	sp, sp, #4
   17f14:	pop	{pc}		; (ldr pc, [sp], #4)
   17f18:	andeq	r5, r0, r0, ror r5
   17f1c:	strdeq	r4, [r0], -r0
   17f20:	andeq	r5, r0, ip, lsr #2

00017f24 <flatcc_builder_extend_offset_vector@@Base>:
   17f24:	str	fp, [sp, #-8]!
   17f28:	str	lr, [sp, #4]
   17f2c:	add	fp, sp, #4
   17f30:	sub	sp, sp, #8
   17f34:	str	r0, [fp, #-8]
   17f38:	str	r1, [fp, #-12]
   17f3c:	mvn	r2, #-1073741824	; 0xc0000000
   17f40:	ldr	r1, [fp, #-12]
   17f44:	ldr	r0, [fp, #-8]
   17f48:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   17f4c:	mov	r3, r0
   17f50:	cmp	r3, #0
   17f54:	beq	17f60 <flatcc_builder_extend_offset_vector@@Base+0x3c>
   17f58:	mov	r3, #0
   17f5c:	b	17f78 <flatcc_builder_extend_offset_vector@@Base+0x54>
   17f60:	ldr	r3, [fp, #-12]
   17f64:	lsl	r3, r3, #2
   17f68:	mov	r1, r3
   17f6c:	ldr	r0, [fp, #-8]
   17f70:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   17f74:	mov	r3, r0
   17f78:	mov	r0, r3
   17f7c:	sub	sp, fp, #4
   17f80:	ldr	fp, [sp]
   17f84:	add	sp, sp, #4
   17f88:	pop	{pc}		; (ldr pc, [sp], #4)

00017f8c <flatcc_builder_offset_vector_push@@Base>:
   17f8c:	str	fp, [sp, #-8]!
   17f90:	str	lr, [sp, #4]
   17f94:	add	fp, sp, #4
   17f98:	sub	sp, sp, #16
   17f9c:	str	r0, [fp, #-16]
   17fa0:	str	r1, [fp, #-20]	; 0xffffffec
   17fa4:	ldr	r3, [fp, #-16]
   17fa8:	ldr	r3, [r3, #32]
   17fac:	ldrh	r3, [r3, #14]
   17fb0:	cmp	r3, #5
   17fb4:	beq	17fd8 <flatcc_builder_offset_vector_push@@Base+0x4c>
   17fb8:	ldr	r3, [pc, #152]	; 18058 <flatcc_builder_offset_vector_push@@Base+0xcc>
   17fbc:	add	r3, pc, r3
   17fc0:	movw	r2, #934	; 0x3a6
   17fc4:	ldr	r1, [pc, #144]	; 1805c <flatcc_builder_offset_vector_push@@Base+0xd0>
   17fc8:	add	r1, pc, r1
   17fcc:	ldr	r0, [pc, #140]	; 18060 <flatcc_builder_offset_vector_push@@Base+0xd4>
   17fd0:	add	r0, pc, r0
   17fd4:	bl	12008 <__assert_fail@plt>
   17fd8:	ldr	r3, [fp, #-16]
   17fdc:	ldr	r3, [r3, #32]
   17fe0:	ldr	r3, [r3, #20]
   17fe4:	cmn	r3, #-1073741823	; 0xc0000001
   17fe8:	bne	17ff4 <flatcc_builder_offset_vector_push@@Base+0x68>
   17fec:	mov	r3, #0
   17ff0:	b	18044 <flatcc_builder_offset_vector_push@@Base+0xb8>
   17ff4:	ldr	r3, [fp, #-16]
   17ff8:	ldr	r3, [r3, #32]
   17ffc:	ldr	r2, [r3, #20]
   18000:	ldr	r3, [fp, #-16]
   18004:	ldr	r3, [r3, #32]
   18008:	add	r2, r2, #1
   1800c:	str	r2, [r3, #20]
   18010:	mov	r1, #4
   18014:	ldr	r0, [fp, #-16]
   18018:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   1801c:	str	r0, [fp, #-8]
   18020:	ldr	r3, [fp, #-8]
   18024:	cmp	r3, #0
   18028:	bne	18034 <flatcc_builder_offset_vector_push@@Base+0xa8>
   1802c:	mov	r3, #0
   18030:	b	18044 <flatcc_builder_offset_vector_push@@Base+0xb8>
   18034:	ldr	r3, [fp, #-8]
   18038:	ldr	r2, [fp, #-20]	; 0xffffffec
   1803c:	str	r2, [r3]
   18040:	ldr	r3, [fp, #-8]
   18044:	mov	r0, r3
   18048:	sub	sp, fp, #4
   1804c:	ldr	fp, [sp]
   18050:	add	sp, sp, #4
   18054:	pop	{pc}		; (ldr pc, [sp], #4)
   18058:	andeq	r5, r0, r4, ror #8
   1805c:	andeq	r4, r0, r4, asr #29
   18060:	andeq	r5, r0, ip, rrx

00018064 <flatcc_builder_append_offset_vector@@Base>:
   18064:	str	fp, [sp, #-8]!
   18068:	str	lr, [sp, #4]
   1806c:	add	fp, sp, #4
   18070:	sub	sp, sp, #16
   18074:	str	r0, [fp, #-8]
   18078:	str	r1, [fp, #-12]
   1807c:	str	r2, [fp, #-16]
   18080:	ldr	r3, [fp, #-8]
   18084:	ldr	r3, [r3, #32]
   18088:	ldrh	r3, [r3, #14]
   1808c:	cmp	r3, #5
   18090:	beq	180b4 <flatcc_builder_append_offset_vector@@Base+0x50>
   18094:	ldr	r3, [pc, #108]	; 18108 <flatcc_builder_append_offset_vector@@Base+0xa4>
   18098:	add	r3, pc, r3
   1809c:	mov	r2, #948	; 0x3b4
   180a0:	ldr	r1, [pc, #100]	; 1810c <flatcc_builder_append_offset_vector@@Base+0xa8>
   180a4:	add	r1, pc, r1
   180a8:	ldr	r0, [pc, #96]	; 18110 <flatcc_builder_append_offset_vector@@Base+0xac>
   180ac:	add	r0, pc, r0
   180b0:	bl	12008 <__assert_fail@plt>
   180b4:	mvn	r2, #-1073741824	; 0xc0000000
   180b8:	ldr	r1, [fp, #-16]
   180bc:	ldr	r0, [fp, #-8]
   180c0:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   180c4:	mov	r3, r0
   180c8:	cmp	r3, #0
   180cc:	beq	180d8 <flatcc_builder_append_offset_vector@@Base+0x74>
   180d0:	mov	r3, #0
   180d4:	b	180f4 <flatcc_builder_append_offset_vector@@Base+0x90>
   180d8:	ldr	r3, [fp, #-16]
   180dc:	lsl	r3, r3, #2
   180e0:	mov	r2, r3
   180e4:	ldr	r1, [fp, #-12]
   180e8:	ldr	r0, [fp, #-8]
   180ec:	bl	159c0 <flatcc_builder_default_alloc@@Base+0x420>
   180f0:	mov	r3, r0
   180f4:	mov	r0, r3
   180f8:	sub	sp, fp, #4
   180fc:	ldr	fp, [sp]
   18100:	add	sp, sp, #4
   18104:	pop	{pc}		; (ldr pc, [sp], #4)
   18108:	andeq	r5, r0, ip, lsr #7
   1810c:	andeq	r4, r0, r8, ror #27
   18110:	muleq	r0, r0, pc	; <UNPREDICTABLE>

00018114 <flatcc_builder_extend_string@@Base>:
   18114:	str	fp, [sp, #-8]!
   18118:	str	lr, [sp, #4]
   1811c:	add	fp, sp, #4
   18120:	sub	sp, sp, #8
   18124:	str	r0, [fp, #-8]
   18128:	str	r1, [fp, #-12]
   1812c:	ldr	r3, [fp, #-8]
   18130:	ldr	r3, [r3, #32]
   18134:	ldrh	r3, [r3, #14]
   18138:	cmp	r3, #6
   1813c:	beq	18160 <flatcc_builder_extend_string@@Base+0x4c>
   18140:	ldr	r3, [pc, #96]	; 181a8 <flatcc_builder_extend_string@@Base+0x94>
   18144:	add	r3, pc, r3
   18148:	movw	r2, #957	; 0x3bd
   1814c:	ldr	r1, [pc, #88]	; 181ac <flatcc_builder_extend_string@@Base+0x98>
   18150:	add	r1, pc, r1
   18154:	ldr	r0, [pc, #84]	; 181b0 <flatcc_builder_extend_string@@Base+0x9c>
   18158:	add	r0, pc, r0
   1815c:	bl	12008 <__assert_fail@plt>
   18160:	mvn	r2, #0
   18164:	ldr	r1, [fp, #-12]
   18168:	ldr	r0, [fp, #-8]
   1816c:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   18170:	mov	r3, r0
   18174:	cmp	r3, #0
   18178:	beq	18184 <flatcc_builder_extend_string@@Base+0x70>
   1817c:	mov	r3, #0
   18180:	b	18194 <flatcc_builder_extend_string@@Base+0x80>
   18184:	ldr	r1, [fp, #-12]
   18188:	ldr	r0, [fp, #-8]
   1818c:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   18190:	mov	r3, r0
   18194:	mov	r0, r3
   18198:	sub	sp, fp, #4
   1819c:	ldr	fp, [sp]
   181a0:	add	sp, sp, #4
   181a4:	pop	{pc}		; (ldr pc, [sp], #4)
   181a8:	andeq	r5, r0, r4, lsr #6
   181ac:	andeq	r4, r0, ip, lsr sp
   181b0:	andeq	r4, r0, r8, lsl pc

000181b4 <flatcc_builder_append_string@@Base>:
   181b4:	str	fp, [sp, #-8]!
   181b8:	str	lr, [sp, #4]
   181bc:	add	fp, sp, #4
   181c0:	sub	sp, sp, #16
   181c4:	str	r0, [fp, #-8]
   181c8:	str	r1, [fp, #-12]
   181cc:	str	r2, [fp, #-16]
   181d0:	ldr	r3, [fp, #-8]
   181d4:	ldr	r3, [r3, #32]
   181d8:	ldrh	r3, [r3, #14]
   181dc:	cmp	r3, #6
   181e0:	beq	18204 <flatcc_builder_append_string@@Base+0x50>
   181e4:	ldr	r3, [pc, #100]	; 18250 <flatcc_builder_append_string@@Base+0x9c>
   181e8:	add	r3, pc, r3
   181ec:	movw	r2, #966	; 0x3c6
   181f0:	ldr	r1, [pc, #92]	; 18254 <flatcc_builder_append_string@@Base+0xa0>
   181f4:	add	r1, pc, r1
   181f8:	ldr	r0, [pc, #88]	; 18258 <flatcc_builder_append_string@@Base+0xa4>
   181fc:	add	r0, pc, r0
   18200:	bl	12008 <__assert_fail@plt>
   18204:	mvn	r2, #0
   18208:	ldr	r1, [fp, #-16]
   1820c:	ldr	r0, [fp, #-8]
   18210:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   18214:	mov	r3, r0
   18218:	cmp	r3, #0
   1821c:	beq	18228 <flatcc_builder_append_string@@Base+0x74>
   18220:	mov	r3, #0
   18224:	b	1823c <flatcc_builder_append_string@@Base+0x88>
   18228:	ldr	r2, [fp, #-16]
   1822c:	ldr	r1, [fp, #-12]
   18230:	ldr	r0, [fp, #-8]
   18234:	bl	159c0 <flatcc_builder_default_alloc@@Base+0x420>
   18238:	mov	r3, r0
   1823c:	mov	r0, r3
   18240:	sub	sp, fp, #4
   18244:	ldr	fp, [sp]
   18248:	add	sp, sp, #4
   1824c:	pop	{pc}		; (ldr pc, [sp], #4)
   18250:	andeq	r5, r0, r0, lsr #5
   18254:	muleq	r0, r8, ip
   18258:	andeq	r4, r0, r4, ror lr

0001825c <flatcc_builder_append_string_str@@Base>:
   1825c:	str	fp, [sp, #-8]!
   18260:	str	lr, [sp, #4]
   18264:	add	fp, sp, #4
   18268:	sub	sp, sp, #8
   1826c:	str	r0, [fp, #-8]
   18270:	str	r1, [fp, #-12]
   18274:	ldr	r0, [fp, #-12]
   18278:	bl	11fc0 <strlen@plt>
   1827c:	mov	r3, r0
   18280:	mov	r2, r3
   18284:	ldr	r1, [fp, #-12]
   18288:	ldr	r0, [fp, #-8]
   1828c:	bl	181b4 <flatcc_builder_append_string@@Base>
   18290:	mov	r3, r0
   18294:	mov	r0, r3
   18298:	sub	sp, fp, #4
   1829c:	ldr	fp, [sp]
   182a0:	add	sp, sp, #4
   182a4:	pop	{pc}		; (ldr pc, [sp], #4)

000182a8 <flatcc_builder_append_string_strn@@Base>:
   182a8:	str	fp, [sp, #-8]!
   182ac:	str	lr, [sp, #4]
   182b0:	add	fp, sp, #4
   182b4:	sub	sp, sp, #16
   182b8:	str	r0, [fp, #-8]
   182bc:	str	r1, [fp, #-12]
   182c0:	str	r2, [fp, #-16]
   182c4:	ldr	r1, [fp, #-16]
   182c8:	ldr	r0, [fp, #-12]
   182cc:	bl	15540 <main@@Base+0x338>
   182d0:	mov	r3, r0
   182d4:	mov	r2, r3
   182d8:	ldr	r1, [fp, #-12]
   182dc:	ldr	r0, [fp, #-8]
   182e0:	bl	181b4 <flatcc_builder_append_string@@Base>
   182e4:	mov	r3, r0
   182e8:	mov	r0, r3
   182ec:	sub	sp, fp, #4
   182f0:	ldr	fp, [sp]
   182f4:	add	sp, sp, #4
   182f8:	pop	{pc}		; (ldr pc, [sp], #4)

000182fc <flatcc_builder_truncate_vector@@Base>:
   182fc:	str	fp, [sp, #-8]!
   18300:	str	lr, [sp, #4]
   18304:	add	fp, sp, #4
   18308:	sub	sp, sp, #8
   1830c:	str	r0, [fp, #-8]
   18310:	str	r1, [fp, #-12]
   18314:	ldr	r3, [fp, #-8]
   18318:	ldr	r3, [r3, #32]
   1831c:	ldrh	r3, [r3, #14]
   18320:	cmp	r3, #4
   18324:	beq	18348 <flatcc_builder_truncate_vector@@Base+0x4c>
   18328:	ldr	r3, [pc, #200]	; 183f8 <flatcc_builder_truncate_vector@@Base+0xfc>
   1832c:	add	r3, pc, r3
   18330:	movw	r2, #985	; 0x3d9
   18334:	ldr	r1, [pc, #192]	; 183fc <flatcc_builder_truncate_vector@@Base+0x100>
   18338:	add	r1, pc, r1
   1833c:	ldr	r0, [pc, #188]	; 18400 <flatcc_builder_truncate_vector@@Base+0x104>
   18340:	add	r0, pc, r0
   18344:	bl	12008 <__assert_fail@plt>
   18348:	ldr	r3, [fp, #-8]
   1834c:	ldr	r3, [r3, #32]
   18350:	ldr	r3, [r3, #20]
   18354:	ldr	r2, [fp, #-12]
   18358:	cmp	r2, r3
   1835c:	bls	183a0 <flatcc_builder_truncate_vector@@Base+0xa4>
   18360:	ldr	r3, [fp, #-8]
   18364:	ldr	r3, [r3, #32]
   18368:	ldr	r3, [r3, #20]
   1836c:	ldr	r2, [fp, #-12]
   18370:	cmp	r2, r3
   18374:	bls	18398 <flatcc_builder_truncate_vector@@Base+0x9c>
   18378:	ldr	r3, [pc, #132]	; 18404 <flatcc_builder_truncate_vector@@Base+0x108>
   1837c:	add	r3, pc, r3
   18380:	movw	r2, #986	; 0x3da
   18384:	ldr	r1, [pc, #124]	; 18408 <flatcc_builder_truncate_vector@@Base+0x10c>
   18388:	add	r1, pc, r1
   1838c:	ldr	r0, [pc, #120]	; 1840c <flatcc_builder_truncate_vector@@Base+0x110>
   18390:	add	r0, pc, r0
   18394:	bl	12008 <__assert_fail@plt>
   18398:	mvn	r3, #0
   1839c:	b	183e4 <flatcc_builder_truncate_vector@@Base+0xe8>
   183a0:	ldr	r3, [fp, #-8]
   183a4:	ldr	r3, [r3, #32]
   183a8:	ldr	r1, [r3, #20]
   183ac:	ldr	r3, [fp, #-8]
   183b0:	ldr	r3, [r3, #32]
   183b4:	ldr	r2, [fp, #-12]
   183b8:	sub	r2, r1, r2
   183bc:	str	r2, [r3, #20]
   183c0:	ldr	r3, [fp, #-8]
   183c4:	ldr	r3, [r3, #32]
   183c8:	ldr	r3, [r3, #16]
   183cc:	ldr	r2, [fp, #-12]
   183d0:	mul	r3, r2, r3
   183d4:	mov	r1, r3
   183d8:	ldr	r0, [fp, #-8]
   183dc:	bl	15958 <flatcc_builder_default_alloc@@Base+0x3b8>
   183e0:	mov	r3, #0
   183e4:	mov	r0, r3
   183e8:	sub	sp, fp, #4
   183ec:	ldr	fp, [sp]
   183f0:	add	sp, sp, #4
   183f4:	pop	{pc}		; (ldr pc, [sp], #4)
   183f8:	andeq	r5, r0, ip, ror r1
   183fc:	andeq	r4, r0, r4, asr fp
   18400:	muleq	r0, r0, ip
   18404:	andeq	r5, r0, ip, lsr #2
   18408:	andeq	r4, r0, r4, lsl #22
   1840c:	andeq	r4, r0, ip, lsl #26

00018410 <flatcc_builder_truncate_offset_vector@@Base>:
   18410:	str	fp, [sp, #-8]!
   18414:	str	lr, [sp, #4]
   18418:	add	fp, sp, #4
   1841c:	sub	sp, sp, #8
   18420:	str	r0, [fp, #-8]
   18424:	str	r1, [fp, #-12]
   18428:	ldr	r3, [fp, #-8]
   1842c:	ldr	r3, [r3, #32]
   18430:	ldrh	r3, [r3, #14]
   18434:	cmp	r3, #5
   18438:	beq	1845c <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   1843c:	ldr	r3, [pc, #200]	; 1850c <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   18440:	add	r3, pc, r3
   18444:	movw	r2, #994	; 0x3e2
   18448:	ldr	r1, [pc, #192]	; 18510 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   1844c:	add	r1, pc, r1
   18450:	ldr	r0, [pc, #188]	; 18514 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   18454:	add	r0, pc, r0
   18458:	bl	12008 <__assert_fail@plt>
   1845c:	ldr	r3, [fp, #-8]
   18460:	ldr	r3, [r3, #32]
   18464:	ldr	r3, [r3, #20]
   18468:	ldr	r2, [fp, #-12]
   1846c:	cmp	r2, r3
   18470:	bls	184b4 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   18474:	ldr	r3, [fp, #-8]
   18478:	ldr	r3, [r3, #32]
   1847c:	ldr	r3, [r3, #20]
   18480:	ldr	r2, [fp, #-12]
   18484:	cmp	r2, r3
   18488:	bls	184ac <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   1848c:	ldr	r3, [pc, #132]	; 18518 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   18490:	add	r3, pc, r3
   18494:	movw	r2, #995	; 0x3e3
   18498:	ldr	r1, [pc, #124]	; 1851c <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   1849c:	add	r1, pc, r1
   184a0:	ldr	r0, [pc, #120]	; 18520 <flatcc_builder_truncate_offset_vector@@Base+0x110>
   184a4:	add	r0, pc, r0
   184a8:	bl	12008 <__assert_fail@plt>
   184ac:	mvn	r3, #0
   184b0:	b	184f8 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   184b4:	ldr	r3, [fp, #-8]
   184b8:	ldr	r3, [r3, #32]
   184bc:	ldr	r1, [r3, #20]
   184c0:	ldr	r3, [fp, #-8]
   184c4:	ldr	r3, [r3, #32]
   184c8:	ldr	r2, [fp, #-12]
   184cc:	sub	r2, r1, r2
   184d0:	str	r2, [r3, #20]
   184d4:	ldr	r3, [fp, #-8]
   184d8:	ldr	r3, [r3, #32]
   184dc:	ldr	r3, [r3, #16]
   184e0:	ldr	r2, [fp, #-12]
   184e4:	mul	r3, r2, r3
   184e8:	mov	r1, r3
   184ec:	ldr	r0, [fp, #-8]
   184f0:	bl	15958 <flatcc_builder_default_alloc@@Base+0x3b8>
   184f4:	mov	r3, #0
   184f8:	mov	r0, r3
   184fc:	sub	sp, fp, #4
   18500:	ldr	fp, [sp]
   18504:	add	sp, sp, #4
   18508:	pop	{pc}		; (ldr pc, [sp], #4)
   1850c:	andeq	r5, r0, r8, lsl #1
   18510:	andeq	r4, r0, r0, asr #20
   18514:	andeq	r4, r0, r8, ror #23
   18518:	andeq	r5, r0, r8, lsr r0
   1851c:	strdeq	r4, [r0], -r0
   18520:	andeq	r4, r0, ip, lsl ip

00018524 <flatcc_builder_truncate_string@@Base>:
   18524:	str	fp, [sp, #-8]!
   18528:	str	lr, [sp, #4]
   1852c:	add	fp, sp, #4
   18530:	sub	sp, sp, #8
   18534:	str	r0, [fp, #-8]
   18538:	str	r1, [fp, #-12]
   1853c:	ldr	r3, [fp, #-8]
   18540:	ldr	r3, [r3, #32]
   18544:	ldrh	r3, [r3, #14]
   18548:	cmp	r3, #6
   1854c:	beq	18570 <flatcc_builder_truncate_string@@Base+0x4c>
   18550:	ldr	r3, [pc, #180]	; 1860c <flatcc_builder_truncate_string@@Base+0xe8>
   18554:	add	r3, pc, r3
   18558:	movw	r2, #1003	; 0x3eb
   1855c:	ldr	r1, [pc, #172]	; 18610 <flatcc_builder_truncate_string@@Base+0xec>
   18560:	add	r1, pc, r1
   18564:	ldr	r0, [pc, #168]	; 18614 <flatcc_builder_truncate_string@@Base+0xf0>
   18568:	add	r0, pc, r0
   1856c:	bl	12008 <__assert_fail@plt>
   18570:	ldr	r3, [fp, #-8]
   18574:	ldr	r3, [r3, #32]
   18578:	ldr	r3, [r3, #20]
   1857c:	ldr	r2, [fp, #-12]
   18580:	cmp	r2, r3
   18584:	bls	185c8 <flatcc_builder_truncate_string@@Base+0xa4>
   18588:	ldr	r3, [fp, #-8]
   1858c:	ldr	r3, [r3, #32]
   18590:	ldr	r3, [r3, #20]
   18594:	ldr	r2, [fp, #-12]
   18598:	cmp	r2, r3
   1859c:	bls	185c0 <flatcc_builder_truncate_string@@Base+0x9c>
   185a0:	ldr	r3, [pc, #112]	; 18618 <flatcc_builder_truncate_string@@Base+0xf4>
   185a4:	add	r3, pc, r3
   185a8:	mov	r2, #1004	; 0x3ec
   185ac:	ldr	r1, [pc, #104]	; 1861c <flatcc_builder_truncate_string@@Base+0xf8>
   185b0:	add	r1, pc, r1
   185b4:	ldr	r0, [pc, #100]	; 18620 <flatcc_builder_truncate_string@@Base+0xfc>
   185b8:	add	r0, pc, r0
   185bc:	bl	12008 <__assert_fail@plt>
   185c0:	mvn	r3, #0
   185c4:	b	185f8 <flatcc_builder_truncate_string@@Base+0xd4>
   185c8:	ldr	r3, [fp, #-8]
   185cc:	ldr	r3, [r3, #32]
   185d0:	ldr	r1, [r3, #20]
   185d4:	ldr	r3, [fp, #-8]
   185d8:	ldr	r3, [r3, #32]
   185dc:	ldr	r2, [fp, #-12]
   185e0:	sub	r2, r1, r2
   185e4:	str	r2, [r3, #20]
   185e8:	ldr	r1, [fp, #-12]
   185ec:	ldr	r0, [fp, #-8]
   185f0:	bl	15958 <flatcc_builder_default_alloc@@Base+0x3b8>
   185f4:	mov	r3, #0
   185f8:	mov	r0, r3
   185fc:	sub	sp, fp, #4
   18600:	ldr	fp, [sp]
   18604:	add	sp, sp, #4
   18608:	pop	{pc}		; (ldr pc, [sp], #4)
   1860c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   18610:	andeq	r4, r0, ip, lsr #18
   18614:	andeq	r4, r0, r8, lsl #22
   18618:	andeq	r4, r0, ip, asr #30
   1861c:	ldrdeq	r4, [r0], -ip
   18620:	andeq	r4, r0, r4, asr #22

00018624 <flatcc_builder_start_vector@@Base>:
   18624:	str	fp, [sp, #-8]!
   18628:	str	lr, [sp, #4]
   1862c:	add	fp, sp, #4
   18630:	sub	sp, sp, #16
   18634:	str	r0, [fp, #-8]
   18638:	str	r1, [fp, #-12]
   1863c:	str	r3, [fp, #-20]	; 0xffffffec
   18640:	mov	r3, r2
   18644:	strh	r3, [fp, #-14]
   18648:	sub	r3, fp, #14
   1864c:	mov	r1, #4
   18650:	mov	r0, r3
   18654:	bl	165a0 <flatcc_builder_clear@@Base+0x10c>
   18658:	ldrh	r3, [fp, #-14]
   1865c:	mov	r1, r3
   18660:	ldr	r0, [fp, #-8]
   18664:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18668:	mov	r3, r0
   1866c:	cmp	r3, #0
   18670:	beq	1867c <flatcc_builder_start_vector@@Base+0x58>
   18674:	mvn	r3, #0
   18678:	b	186cc <flatcc_builder_start_vector@@Base+0xa8>
   1867c:	ldr	r3, [fp, #-8]
   18680:	ldr	r3, [r3, #32]
   18684:	ldr	r2, [fp, #-12]
   18688:	str	r2, [r3, #16]
   1868c:	ldr	r3, [fp, #-8]
   18690:	ldr	r3, [r3, #32]
   18694:	mov	r2, #0
   18698:	str	r2, [r3, #20]
   1869c:	ldr	r3, [fp, #-8]
   186a0:	ldr	r3, [r3, #32]
   186a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   186a8:	str	r2, [r3, #24]
   186ac:	ldr	r3, [fp, #-8]
   186b0:	ldr	r3, [r3, #32]
   186b4:	mov	r2, #4
   186b8:	strh	r2, [r3, #14]
   186bc:	mvn	r1, #3
   186c0:	ldr	r0, [fp, #-8]
   186c4:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   186c8:	mov	r3, #0
   186cc:	mov	r0, r3
   186d0:	sub	sp, fp, #4
   186d4:	ldr	fp, [sp]
   186d8:	add	sp, sp, #4
   186dc:	pop	{pc}		; (ldr pc, [sp], #4)

000186e0 <flatcc_builder_start_offset_vector@@Base>:
   186e0:	str	fp, [sp, #-8]!
   186e4:	str	lr, [sp, #4]
   186e8:	add	fp, sp, #4
   186ec:	sub	sp, sp, #8
   186f0:	str	r0, [fp, #-8]
   186f4:	mov	r1, #4
   186f8:	ldr	r0, [fp, #-8]
   186fc:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18700:	mov	r3, r0
   18704:	cmp	r3, #0
   18708:	beq	18714 <flatcc_builder_start_offset_vector@@Base+0x34>
   1870c:	mvn	r3, #0
   18710:	b	18754 <flatcc_builder_start_offset_vector@@Base+0x74>
   18714:	ldr	r3, [fp, #-8]
   18718:	ldr	r3, [r3, #32]
   1871c:	mov	r2, #4
   18720:	str	r2, [r3, #16]
   18724:	ldr	r3, [fp, #-8]
   18728:	ldr	r3, [r3, #32]
   1872c:	mov	r2, #0
   18730:	str	r2, [r3, #20]
   18734:	ldr	r3, [fp, #-8]
   18738:	ldr	r3, [r3, #32]
   1873c:	mov	r2, #5
   18740:	strh	r2, [r3, #14]
   18744:	mvn	r1, #3
   18748:	ldr	r0, [fp, #-8]
   1874c:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   18750:	mov	r3, #0
   18754:	mov	r0, r3
   18758:	sub	sp, fp, #4
   1875c:	ldr	fp, [sp]
   18760:	add	sp, sp, #4
   18764:	pop	{pc}		; (ldr pc, [sp], #4)

00018768 <flatcc_builder_create_offset_vector@@Base>:
   18768:	str	fp, [sp, #-8]!
   1876c:	str	lr, [sp, #4]
   18770:	add	fp, sp, #4
   18774:	sub	sp, sp, #24
   18778:	str	r0, [fp, #-16]
   1877c:	str	r1, [fp, #-20]	; 0xffffffec
   18780:	str	r2, [fp, #-24]	; 0xffffffe8
   18784:	ldr	r0, [fp, #-16]
   18788:	bl	186e0 <flatcc_builder_start_offset_vector@@Base>
   1878c:	mov	r3, r0
   18790:	cmp	r3, #0
   18794:	beq	187a0 <flatcc_builder_create_offset_vector@@Base+0x38>
   18798:	mov	r3, #0
   1879c:	b	187e8 <flatcc_builder_create_offset_vector@@Base+0x80>
   187a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   187a4:	ldr	r0, [fp, #-16]
   187a8:	bl	17f24 <flatcc_builder_extend_offset_vector@@Base>
   187ac:	str	r0, [fp, #-8]
   187b0:	ldr	r3, [fp, #-8]
   187b4:	cmp	r3, #0
   187b8:	bne	187c4 <flatcc_builder_create_offset_vector@@Base+0x5c>
   187bc:	mov	r3, #0
   187c0:	b	187e8 <flatcc_builder_create_offset_vector@@Base+0x80>
   187c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187c8:	lsl	r3, r3, #2
   187cc:	mov	r2, r3
   187d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   187d4:	ldr	r0, [fp, #-8]
   187d8:	bl	11f6c <memcpy@plt>
   187dc:	ldr	r0, [fp, #-16]
   187e0:	bl	19de8 <flatcc_builder_end_offset_vector@@Base>
   187e4:	mov	r3, r0
   187e8:	mov	r0, r3
   187ec:	sub	sp, fp, #4
   187f0:	ldr	fp, [sp]
   187f4:	add	sp, sp, #4
   187f8:	pop	{pc}		; (ldr pc, [sp], #4)

000187fc <flatcc_builder_start_string@@Base>:
   187fc:	str	fp, [sp, #-8]!
   18800:	str	lr, [sp, #4]
   18804:	add	fp, sp, #4
   18808:	sub	sp, sp, #8
   1880c:	str	r0, [fp, #-8]
   18810:	mov	r1, #1
   18814:	ldr	r0, [fp, #-8]
   18818:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1881c:	mov	r3, r0
   18820:	cmp	r3, #0
   18824:	beq	18830 <flatcc_builder_start_string@@Base+0x34>
   18828:	mvn	r3, #0
   1882c:	b	18870 <flatcc_builder_start_string@@Base+0x74>
   18830:	ldr	r3, [fp, #-8]
   18834:	ldr	r3, [r3, #32]
   18838:	mov	r2, #1
   1883c:	str	r2, [r3, #16]
   18840:	ldr	r3, [fp, #-8]
   18844:	ldr	r3, [r3, #32]
   18848:	mov	r2, #0
   1884c:	str	r2, [r3, #20]
   18850:	ldr	r3, [fp, #-8]
   18854:	ldr	r3, [r3, #32]
   18858:	mov	r2, #6
   1885c:	strh	r2, [r3, #14]
   18860:	mvn	r1, #3
   18864:	ldr	r0, [fp, #-8]
   18868:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   1886c:	mov	r3, #0
   18870:	mov	r0, r3
   18874:	sub	sp, fp, #4
   18878:	ldr	fp, [sp]
   1887c:	add	sp, sp, #4
   18880:	pop	{pc}		; (ldr pc, [sp], #4)

00018884 <flatcc_builder_reserve_table@@Base>:
   18884:	str	fp, [sp, #-8]!
   18888:	str	lr, [sp, #4]
   1888c:	add	fp, sp, #4
   18890:	sub	sp, sp, #8
   18894:	str	r0, [fp, #-8]
   18898:	str	r1, [fp, #-12]
   1889c:	ldr	r3, [fp, #-12]
   188a0:	cmp	r3, #0
   188a4:	bge	188c8 <flatcc_builder_reserve_table@@Base+0x44>
   188a8:	ldr	r3, [pc, #60]	; 188ec <flatcc_builder_reserve_table@@Base+0x68>
   188ac:	add	r3, pc, r3
   188b0:	movw	r2, #1065	; 0x429
   188b4:	ldr	r1, [pc, #52]	; 188f0 <flatcc_builder_reserve_table@@Base+0x6c>
   188b8:	add	r1, pc, r1
   188bc:	ldr	r0, [pc, #48]	; 188f4 <flatcc_builder_reserve_table@@Base+0x70>
   188c0:	add	r0, pc, r0
   188c4:	bl	12008 <__assert_fail@plt>
   188c8:	ldr	r1, [fp, #-12]
   188cc:	ldr	r0, [fp, #-8]
   188d0:	bl	15d50 <flatcc_builder_default_alloc@@Base+0x7b0>
   188d4:	mov	r3, r0
   188d8:	mov	r0, r3
   188dc:	sub	sp, fp, #4
   188e0:	ldr	fp, [sp]
   188e4:	add	sp, sp, #4
   188e8:	pop	{pc}		; (ldr pc, [sp], #4)
   188ec:	andeq	r4, r0, r4, ror #24
   188f0:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   188f4:	andeq	r4, r0, r0, ror #16

000188f8 <flatcc_builder_start_table@@Base>:
   188f8:	str	fp, [sp, #-8]!
   188fc:	str	lr, [sp, #4]
   18900:	add	fp, sp, #4
   18904:	sub	sp, sp, #8
   18908:	str	r0, [fp, #-8]
   1890c:	str	r1, [fp, #-12]
   18910:	mov	r1, #4
   18914:	ldr	r0, [fp, #-8]
   18918:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1891c:	mov	r3, r0
   18920:	cmp	r3, #0
   18924:	beq	18930 <flatcc_builder_start_table@@Base+0x38>
   18928:	mvn	r3, #0
   1892c:	b	18a10 <flatcc_builder_start_table@@Base+0x118>
   18930:	ldr	r3, [fp, #-8]
   18934:	ldr	r3, [r3, #4]
   18938:	mov	r1, r3
   1893c:	ldr	r3, [fp, #-8]
   18940:	ldr	r3, [r3, #52]	; 0x34
   18944:	mov	r2, r3
   18948:	ldr	r3, [fp, #-8]
   1894c:	ldr	r3, [r3, #32]
   18950:	sub	r2, r1, r2
   18954:	str	r2, [r3, #16]
   18958:	ldr	r3, [fp, #-8]
   1895c:	ldr	r3, [r3]
   18960:	mov	r1, r3
   18964:	ldr	r3, [fp, #-8]
   18968:	ldr	r3, [r3, #76]	; 0x4c
   1896c:	mov	r2, r3
   18970:	ldr	r3, [fp, #-8]
   18974:	ldr	r3, [r3, #32]
   18978:	sub	r2, r1, r2
   1897c:	str	r2, [r3, #20]
   18980:	ldr	r3, [fp, #-8]
   18984:	ldr	r3, [r3, #32]
   18988:	ldr	r2, [fp, #-8]
   1898c:	ldr	r2, [r2, #12]
   18990:	str	r2, [r3, #24]
   18994:	ldr	r3, [fp, #-8]
   18998:	ldr	r3, [r3, #32]
   1899c:	ldr	r2, [fp, #-8]
   189a0:	ldrh	r2, [r2, #8]
   189a4:	strh	r2, [r3, #28]
   189a8:	ldr	r3, [fp, #-8]
   189ac:	mov	r2, #0
   189b0:	str	r2, [r3, #12]
   189b4:	ldr	r2, [fp, #-8]
   189b8:	movw	r3, #15186	; 0x3b52
   189bc:	movt	r3, #12137	; 0x2f69
   189c0:	str	r3, [r2, #12]
   189c4:	ldr	r3, [fp, #-8]
   189c8:	mov	r2, #0
   189cc:	strh	r2, [r3, #8]
   189d0:	ldr	r3, [fp, #-8]
   189d4:	ldr	r3, [r3, #32]
   189d8:	mov	r2, #3
   189dc:	strh	r2, [r3, #14]
   189e0:	ldr	r1, [fp, #-12]
   189e4:	ldr	r0, [fp, #-8]
   189e8:	bl	15d50 <flatcc_builder_default_alloc@@Base+0x7b0>
   189ec:	mov	r3, r0
   189f0:	cmp	r3, #0
   189f4:	beq	18a00 <flatcc_builder_start_table@@Base+0x108>
   189f8:	mvn	r3, #0
   189fc:	b	18a10 <flatcc_builder_start_table@@Base+0x118>
   18a00:	movw	r1, #65532	; 0xfffc
   18a04:	ldr	r0, [fp, #-8]
   18a08:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   18a0c:	mov	r3, #0
   18a10:	mov	r0, r3
   18a14:	sub	sp, fp, #4
   18a18:	ldr	fp, [sp]
   18a1c:	add	sp, sp, #4
   18a20:	pop	{pc}		; (ldr pc, [sp], #4)

00018a24 <flatcc_builder_create_vtable@@Base>:
   18a24:	str	fp, [sp, #-8]!
   18a28:	str	lr, [sp, #4]
   18a2c:	add	fp, sp, #4
   18a30:	sub	sp, sp, #96	; 0x60
   18a34:	str	r0, [fp, #-88]	; 0xffffffa8
   18a38:	str	r1, [fp, #-92]	; 0xffffffa4
   18a3c:	mov	r3, r2
   18a40:	strh	r3, [fp, #-94]	; 0xffffffa2
   18a44:	mov	r3, #0
   18a48:	str	r3, [fp, #-80]	; 0xffffffb0
   18a4c:	mov	r3, #0
   18a50:	str	r3, [fp, #-76]	; 0xffffffb4
   18a54:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   18a58:	cmp	r3, #0
   18a5c:	beq	18ab4 <flatcc_builder_create_vtable@@Base+0x90>
   18a60:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18a64:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   18a68:	add	r3, r2, r3
   18a6c:	str	r3, [fp, #-80]	; 0xffffffb0
   18a70:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18a74:	add	r3, r3, #1
   18a78:	lsl	r3, r3, #3
   18a7c:	sub	r2, fp, #4
   18a80:	add	r3, r2, r3
   18a84:	ldr	r2, [fp, #-92]	; 0xffffffa4
   18a88:	str	r2, [r3, #-76]	; 0xffffffb4
   18a8c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18a90:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   18a94:	add	r3, r3, #1
   18a98:	lsl	r3, r3, #3
   18a9c:	sub	r1, fp, #4
   18aa0:	add	r3, r1, r3
   18aa4:	str	r2, [r3, #-72]	; 0xffffffb8
   18aa8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18aac:	add	r3, r3, #1
   18ab0:	str	r3, [fp, #-76]	; 0xffffffb4
   18ab4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18ab8:	ldr	r3, [r3, #152]	; 0x98
   18abc:	cmp	r3, #0
   18ac0:	bne	18afc <flatcc_builder_create_vtable@@Base+0xd8>
   18ac4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18ac8:	ldr	r3, [r3, #180]	; 0xb4
   18acc:	cmp	r3, #0
   18ad0:	bne	18afc <flatcc_builder_create_vtable@@Base+0xd8>
   18ad4:	sub	r3, fp, #80	; 0x50
   18ad8:	mov	r1, r3
   18adc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18ae0:	bl	16d68 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   18ae4:	str	r0, [fp, #-8]
   18ae8:	ldr	r3, [fp, #-8]
   18aec:	cmp	r3, #0
   18af0:	bne	18b30 <flatcc_builder_create_vtable@@Base+0x10c>
   18af4:	mov	r3, #0
   18af8:	b	18b34 <flatcc_builder_create_vtable@@Base+0x110>
   18afc:	sub	r3, fp, #80	; 0x50
   18b00:	mov	r1, r3
   18b04:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18b08:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   18b0c:	str	r0, [fp, #-8]
   18b10:	ldr	r3, [fp, #-8]
   18b14:	cmp	r3, #0
   18b18:	bne	18b24 <flatcc_builder_create_vtable@@Base+0x100>
   18b1c:	mov	r3, #0
   18b20:	b	18b34 <flatcc_builder_create_vtable@@Base+0x110>
   18b24:	ldr	r3, [fp, #-8]
   18b28:	add	r3, r3, #1
   18b2c:	str	r3, [fp, #-8]
   18b30:	ldr	r3, [fp, #-8]
   18b34:	mov	r0, r3
   18b38:	sub	sp, fp, #4
   18b3c:	ldr	fp, [sp]
   18b40:	add	sp, sp, #4
   18b44:	pop	{pc}		; (ldr pc, [sp], #4)

00018b48 <flatcc_builder_create_cached_vtable@@Base>:
   18b48:	str	fp, [sp, #-8]!
   18b4c:	str	lr, [sp, #4]
   18b50:	add	fp, sp, #4
   18b54:	sub	sp, sp, #48	; 0x30
   18b58:	str	r0, [fp, #-32]	; 0xffffffe0
   18b5c:	str	r1, [fp, #-36]	; 0xffffffdc
   18b60:	str	r3, [fp, #-44]	; 0xffffffd4
   18b64:	mov	r3, r2
   18b68:	strh	r3, [fp, #-38]	; 0xffffffda
   18b6c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18b70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18b74:	bl	15fd8 <flatcc_builder_default_alloc@@Base+0xa38>
   18b78:	str	r0, [fp, #-20]	; 0xffffffec
   18b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b80:	cmp	r3, #0
   18b84:	bne	18b90 <flatcc_builder_create_cached_vtable@@Base+0x48>
   18b88:	mov	r3, #0
   18b8c:	b	18e54 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   18b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b94:	str	r3, [fp, #-12]
   18b98:	ldr	r3, [fp, #-12]
   18b9c:	ldr	r3, [r3]
   18ba0:	str	r3, [fp, #-16]
   18ba4:	mov	r3, #0
   18ba8:	str	r3, [fp, #-8]
   18bac:	b	18cb0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   18bb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18bb4:	ldr	r2, [r3, #100]	; 0x64
   18bb8:	ldr	r3, [fp, #-16]
   18bbc:	add	r3, r2, r3
   18bc0:	str	r3, [fp, #-24]	; 0xffffffe8
   18bc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18bc8:	ldr	r2, [r3, #68]	; 0x44
   18bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18bd0:	ldr	r3, [r3, #8]
   18bd4:	add	r3, r2, r3
   18bd8:	str	r3, [fp, #-28]	; 0xffffffe4
   18bdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18be0:	ldrh	r3, [r3]
   18be4:	ldrh	r2, [fp, #-38]	; 0xffffffda
   18be8:	cmp	r2, r3
   18bec:	bne	18c10 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   18bf0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   18bf4:	mov	r2, r3
   18bf8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18bfc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18c00:	bl	11f78 <memcmp@plt>
   18c04:	mov	r3, r0
   18c08:	cmp	r3, #0
   18c0c:	beq	18c2c <flatcc_builder_create_cached_vtable@@Base+0xe4>
   18c10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c14:	add	r3, r3, #12
   18c18:	str	r3, [fp, #-12]
   18c1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c20:	ldr	r3, [r3, #12]
   18c24:	str	r3, [fp, #-16]
   18c28:	b	18cb0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   18c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c30:	ldr	r2, [r3, #4]
   18c34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18c38:	ldr	r3, [r3, #152]	; 0x98
   18c3c:	cmp	r2, r3
   18c40:	beq	18c68 <flatcc_builder_create_cached_vtable@@Base+0x120>
   18c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c48:	str	r3, [fp, #-8]
   18c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c50:	add	r3, r3, #12
   18c54:	str	r3, [fp, #-12]
   18c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c5c:	ldr	r3, [r3, #12]
   18c60:	str	r3, [fp, #-16]
   18c64:	b	18cb0 <flatcc_builder_create_cached_vtable@@Base+0x168>
   18c68:	ldr	r2, [fp, #-12]
   18c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c70:	cmp	r2, r3
   18c74:	beq	18ca4 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   18c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c7c:	ldr	r2, [r3, #12]
   18c80:	ldr	r3, [fp, #-12]
   18c84:	str	r2, [r3]
   18c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c8c:	ldr	r2, [r3]
   18c90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c94:	str	r2, [r3, #12]
   18c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c9c:	ldr	r2, [fp, #-16]
   18ca0:	str	r2, [r3]
   18ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ca8:	ldr	r3, [r3]
   18cac:	b	18e54 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   18cb0:	ldr	r3, [fp, #-16]
   18cb4:	cmp	r3, #0
   18cb8:	bne	18bb0 <flatcc_builder_create_cached_vtable@@Base+0x68>
   18cbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18cc0:	ldr	r2, [r3, #124]	; 0x7c
   18cc4:	mov	r3, #0
   18cc8:	str	r3, [sp]
   18ccc:	mov	r3, #16
   18cd0:	mov	r1, #6
   18cd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18cd8:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   18cdc:	str	r0, [fp, #-24]	; 0xffffffe8
   18ce0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18ce4:	cmp	r3, #0
   18ce8:	bne	18cf4 <flatcc_builder_create_cached_vtable@@Base+0x1ac>
   18cec:	mov	r3, #0
   18cf0:	b	18e54 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   18cf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18cf8:	ldr	r3, [r3, #124]	; 0x7c
   18cfc:	str	r3, [fp, #-16]
   18d00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d04:	ldr	r3, [r3, #124]	; 0x7c
   18d08:	add	r2, r3, #16
   18d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d10:	str	r2, [r3, #124]	; 0x7c
   18d14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d18:	ldr	r2, [r3, #152]	; 0x98
   18d1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d20:	str	r2, [r3, #4]
   18d24:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d28:	ldr	r2, [r3]
   18d2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d30:	str	r2, [r3, #12]
   18d34:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d38:	ldr	r2, [fp, #-16]
   18d3c:	str	r2, [r3]
   18d40:	ldrh	r3, [fp, #-38]	; 0xffffffda
   18d44:	mov	r2, r3
   18d48:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18d4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18d50:	bl	18a24 <flatcc_builder_create_vtable@@Base>
   18d54:	mov	r2, r0
   18d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d5c:	str	r2, [r3]
   18d60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d64:	ldr	r3, [r3]
   18d68:	cmp	r3, #0
   18d6c:	bne	18d78 <flatcc_builder_create_cached_vtable@@Base+0x230>
   18d70:	mov	r3, #0
   18d74:	b	18e54 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   18d78:	ldr	r3, [fp, #-8]
   18d7c:	cmp	r3, #0
   18d80:	beq	18d98 <flatcc_builder_create_cached_vtable@@Base+0x250>
   18d84:	ldr	r3, [fp, #-8]
   18d88:	ldr	r2, [r3, #8]
   18d8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d90:	str	r2, [r3, #8]
   18d94:	b	18e4c <flatcc_builder_create_cached_vtable@@Base+0x304>
   18d98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18d9c:	ldr	r3, [r3, #172]	; 0xac
   18da0:	cmp	r3, #0
   18da4:	beq	18dd4 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   18da8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18dac:	ldr	r2, [r3, #172]	; 0xac
   18db0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18db4:	ldr	r1, [r3, #120]	; 0x78
   18db8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   18dbc:	add	r3, r1, r3
   18dc0:	cmp	r2, r3
   18dc4:	bcs	18dd4 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   18dc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18dcc:	bl	1605c <flatcc_builder_flush_vtable_cache@@Base>
   18dd0:	b	18e4c <flatcc_builder_create_cached_vtable@@Base+0x304>
   18dd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18dd8:	ldr	r2, [r3, #120]	; 0x78
   18ddc:	ldrh	r1, [fp, #-38]	; 0xffffffda
   18de0:	mov	r3, #0
   18de4:	str	r3, [sp]
   18de8:	mov	r3, r1
   18dec:	mov	r1, #2
   18df0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18df4:	bl	15c64 <flatcc_builder_default_alloc@@Base+0x6c4>
   18df8:	str	r0, [fp, #-28]	; 0xffffffe4
   18dfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18e00:	cmp	r3, #0
   18e04:	bne	18e10 <flatcc_builder_create_cached_vtable@@Base+0x2c8>
   18e08:	mvn	r3, #0
   18e0c:	b	18e54 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   18e10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e14:	ldr	r2, [r3, #120]	; 0x78
   18e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e1c:	str	r2, [r3, #8]
   18e20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e24:	ldr	r2, [r3, #120]	; 0x78
   18e28:	ldrh	r3, [fp, #-38]	; 0xffffffda
   18e2c:	add	r2, r2, r3
   18e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e34:	str	r2, [r3, #120]	; 0x78
   18e38:	ldrh	r3, [fp, #-38]	; 0xffffffda
   18e3c:	mov	r2, r3
   18e40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18e44:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18e48:	bl	11f6c <memcpy@plt>
   18e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e50:	ldr	r3, [r3]
   18e54:	mov	r0, r3
   18e58:	sub	sp, fp, #4
   18e5c:	ldr	fp, [sp]
   18e60:	add	sp, sp, #4
   18e64:	pop	{pc}		; (ldr pc, [sp], #4)

00018e68 <flatcc_builder_create_table@@Base>:
   18e68:	str	r4, [sp, #-12]!
   18e6c:	str	fp, [sp, #4]
   18e70:	str	lr, [sp, #8]
   18e74:	add	fp, sp, #8
   18e78:	sub	sp, sp, #124	; 0x7c
   18e7c:	str	r0, [fp, #-120]	; 0xffffff88
   18e80:	str	r1, [fp, #-124]	; 0xffffff84
   18e84:	str	r2, [fp, #-128]	; 0xffffff80
   18e88:	strh	r3, [fp, #-130]	; 0xffffff7e
   18e8c:	ldr	r4, [pc, #740]	; 19178 <flatcc_builder_create_table@@Base+0x310>
   18e90:	add	r4, pc, r4
   18e94:	ldr	r3, [fp, #8]
   18e98:	cmp	r3, #0
   18e9c:	bge	18ec0 <flatcc_builder_create_table@@Base+0x58>
   18ea0:	ldr	r3, [pc, #724]	; 1917c <flatcc_builder_create_table@@Base+0x314>
   18ea4:	add	r3, pc, r3
   18ea8:	movw	r2, #1237	; 0x4d5
   18eac:	ldr	r1, [pc, #716]	; 19180 <flatcc_builder_create_table@@Base+0x318>
   18eb0:	add	r1, pc, r1
   18eb4:	ldr	r0, [pc, #712]	; 19184 <flatcc_builder_create_table@@Base+0x31c>
   18eb8:	add	r0, pc, r0
   18ebc:	bl	12008 <__assert_fail@plt>
   18ec0:	ldr	r3, [fp, #12]
   18ec4:	and	r3, r3, #1
   18ec8:	cmp	r3, #0
   18ecc:	bne	18ef0 <flatcc_builder_create_table@@Base+0x88>
   18ed0:	ldr	r3, [pc, #688]	; 19188 <flatcc_builder_create_table@@Base+0x320>
   18ed4:	add	r3, pc, r3
   18ed8:	movw	r2, #1243	; 0x4db
   18edc:	ldr	r1, [pc, #680]	; 1918c <flatcc_builder_create_table@@Base+0x324>
   18ee0:	add	r1, pc, r1
   18ee4:	ldr	r0, [pc, #676]	; 19190 <flatcc_builder_create_table@@Base+0x328>
   18ee8:	add	r0, pc, r0
   18eec:	bl	12008 <__assert_fail@plt>
   18ef0:	sub	r3, fp, #130	; 0x82
   18ef4:	mov	r1, #4
   18ef8:	mov	r0, r3
   18efc:	bl	165a0 <flatcc_builder_clear@@Base+0x10c>
   18f00:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   18f04:	mov	r1, r3
   18f08:	ldr	r0, [fp, #-120]	; 0xffffff88
   18f0c:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   18f10:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   18f14:	mov	r2, r3
   18f18:	ldr	r1, [fp, #-128]	; 0xffffff80
   18f1c:	ldr	r0, [fp, #-120]	; 0xffffff88
   18f20:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   18f24:	str	r0, [fp, #-20]	; 0xffffffec
   18f28:	ldr	r3, [fp, #-120]	; 0xffffff88
   18f2c:	ldr	r3, [r3, #136]	; 0x88
   18f30:	mov	r1, r3
   18f34:	ldr	r2, [fp, #-20]	; 0xffffffec
   18f38:	ldr	r3, [fp, #-128]	; 0xffffff80
   18f3c:	add	r3, r2, r3
   18f40:	sub	r3, r1, r3
   18f44:	sub	r3, r3, #4
   18f48:	str	r3, [fp, #-24]	; 0xffffffe8
   18f4c:	ldr	r3, [fp, #12]
   18f50:	sub	r3, r3, #1
   18f54:	str	r3, [fp, #-28]	; 0xffffffe4
   18f58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18f5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18f60:	sub	r3, r2, r3
   18f64:	str	r3, [fp, #-32]	; 0xffffffe0
   18f68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18f6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18f70:	sub	r3, r2, r3
   18f74:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18f78:	cmp	r2, r3
   18f7c:	beq	18f88 <flatcc_builder_create_table@@Base+0x120>
   18f80:	mvn	r3, #0
   18f84:	b	19160 <flatcc_builder_create_table@@Base+0x2f8>
   18f88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18f8c:	bl	15450 <main@@Base+0x248>
   18f90:	mov	r3, r0
   18f94:	str	r3, [fp, #-44]	; 0xffffffd4
   18f98:	mov	r3, #0
   18f9c:	str	r3, [fp, #-16]
   18fa0:	b	19018 <flatcc_builder_create_table@@Base+0x1b0>
   18fa4:	ldr	r3, [fp, #-16]
   18fa8:	lsl	r3, r3, #1
   18fac:	ldr	r2, [fp, #4]
   18fb0:	add	r3, r2, r3
   18fb4:	ldrh	r3, [r3]
   18fb8:	mov	r2, r3
   18fbc:	ldr	r3, [fp, #-124]	; 0xffffff84
   18fc0:	add	r3, r2, r3
   18fc4:	str	r3, [fp, #-36]	; 0xffffffdc
   18fc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18fcc:	ldr	r2, [r3]
   18fd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18fd4:	sub	r3, r2, r3
   18fd8:	ldr	r2, [fp, #-16]
   18fdc:	lsl	r2, r2, #1
   18fe0:	ldr	r1, [fp, #4]
   18fe4:	add	r2, r1, r2
   18fe8:	ldrh	r2, [r2]
   18fec:	sub	r3, r3, r2
   18ff0:	sub	r3, r3, #4
   18ff4:	str	r3, [fp, #-40]	; 0xffffffd8
   18ff8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18ffc:	bl	15450 <main@@Base+0x248>
   19000:	mov	r2, r0
   19004:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19008:	str	r2, [r3]
   1900c:	ldr	r3, [fp, #-16]
   19010:	add	r3, r3, #1
   19014:	str	r3, [fp, #-16]
   19018:	ldr	r2, [fp, #-16]
   1901c:	ldr	r3, [fp, #8]
   19020:	cmp	r2, r3
   19024:	blt	18fa4 <flatcc_builder_create_table@@Base+0x13c>
   19028:	mov	r3, #0
   1902c:	str	r3, [fp, #-116]	; 0xffffff8c
   19030:	mov	r3, #0
   19034:	str	r3, [fp, #-112]	; 0xffffff90
   19038:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1903c:	add	r3, r3, #4
   19040:	str	r3, [fp, #-116]	; 0xffffff8c
   19044:	ldr	r3, [fp, #-112]	; 0xffffff90
   19048:	add	r3, r3, #1
   1904c:	lsl	r3, r3, #3
   19050:	sub	r2, fp, #12
   19054:	add	r3, r2, r3
   19058:	sub	r2, fp, #44	; 0x2c
   1905c:	str	r2, [r3, #-104]	; 0xffffff98
   19060:	ldr	r3, [fp, #-112]	; 0xffffff90
   19064:	add	r3, r3, #1
   19068:	lsl	r3, r3, #3
   1906c:	sub	r2, fp, #12
   19070:	add	r3, r2, r3
   19074:	mov	r2, #4
   19078:	str	r2, [r3, #-100]	; 0xffffff9c
   1907c:	ldr	r3, [fp, #-112]	; 0xffffff90
   19080:	add	r3, r3, #1
   19084:	str	r3, [fp, #-112]	; 0xffffff90
   19088:	ldr	r3, [fp, #-128]	; 0xffffff80
   1908c:	cmp	r3, #0
   19090:	beq	190e8 <flatcc_builder_create_table@@Base+0x280>
   19094:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19098:	ldr	r3, [fp, #-128]	; 0xffffff80
   1909c:	add	r3, r2, r3
   190a0:	str	r3, [fp, #-116]	; 0xffffff8c
   190a4:	ldr	r3, [fp, #-112]	; 0xffffff90
   190a8:	add	r3, r3, #1
   190ac:	lsl	r3, r3, #3
   190b0:	sub	r2, fp, #12
   190b4:	add	r3, r2, r3
   190b8:	ldr	r2, [fp, #-124]	; 0xffffff84
   190bc:	str	r2, [r3, #-104]	; 0xffffff98
   190c0:	ldr	r3, [fp, #-112]	; 0xffffff90
   190c4:	add	r3, r3, #1
   190c8:	lsl	r3, r3, #3
   190cc:	sub	r2, fp, #12
   190d0:	add	r3, r2, r3
   190d4:	ldr	r2, [fp, #-128]	; 0xffffff80
   190d8:	str	r2, [r3, #-100]	; 0xffffff9c
   190dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   190e0:	add	r3, r3, #1
   190e4:	str	r3, [fp, #-112]	; 0xffffff90
   190e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   190ec:	cmp	r3, #0
   190f0:	beq	1914c <flatcc_builder_create_table@@Base+0x2e4>
   190f4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   190f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   190fc:	add	r3, r2, r3
   19100:	str	r3, [fp, #-116]	; 0xffffff8c
   19104:	ldr	r3, [fp, #-112]	; 0xffffff90
   19108:	add	r3, r3, #1
   1910c:	lsl	r3, r3, #3
   19110:	sub	r2, fp, #12
   19114:	add	r3, r2, r3
   19118:	ldr	r2, [pc, #116]	; 19194 <flatcc_builder_create_table@@Base+0x32c>
   1911c:	ldr	r2, [r4, r2]
   19120:	str	r2, [r3, #-104]	; 0xffffff98
   19124:	ldr	r3, [fp, #-112]	; 0xffffff90
   19128:	add	r3, r3, #1
   1912c:	lsl	r3, r3, #3
   19130:	sub	r2, fp, #12
   19134:	add	r3, r2, r3
   19138:	ldr	r2, [fp, #-20]	; 0xffffffec
   1913c:	str	r2, [r3, #-100]	; 0xffffff9c
   19140:	ldr	r3, [fp, #-112]	; 0xffffff90
   19144:	add	r3, r3, #1
   19148:	str	r3, [fp, #-112]	; 0xffffff90
   1914c:	sub	r3, fp, #116	; 0x74
   19150:	mov	r1, r3
   19154:	ldr	r0, [fp, #-120]	; 0xffffff88
   19158:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1915c:	mov	r3, r0
   19160:	mov	r0, r3
   19164:	sub	sp, fp, #8
   19168:	ldr	r4, [sp]
   1916c:	ldr	fp, [sp, #4]
   19170:	add	sp, sp, #8
   19174:	pop	{pc}		; (ldr pc, [sp], #4)
   19178:	andeq	r5, r1, r8, ror #2
   1917c:	andeq	r4, r0, ip, lsl #13
   19180:	ldrdeq	r3, [r0], -ip
   19184:	andeq	r4, r0, r4, ror r2
   19188:	andeq	r4, r0, ip, asr r6
   1918c:	andeq	r3, r0, ip, lsr #31
   19190:	andeq	r4, r0, r8, asr r2
   19194:	andeq	r0, r0, ip, asr #32

00019198 <flatcc_builder_check_required_field@@Base>:
   19198:	str	fp, [sp, #-8]!
   1919c:	str	lr, [sp, #4]
   191a0:	add	fp, sp, #4
   191a4:	sub	sp, sp, #8
   191a8:	str	r0, [fp, #-8]
   191ac:	mov	r3, r1
   191b0:	strh	r3, [fp, #-10]
   191b4:	ldr	r3, [fp, #-8]
   191b8:	ldr	r3, [r3, #32]
   191bc:	ldrh	r3, [r3, #14]
   191c0:	cmp	r3, #3
   191c4:	beq	191e8 <flatcc_builder_check_required_field@@Base+0x50>
   191c8:	ldr	r3, [pc, #108]	; 1923c <flatcc_builder_check_required_field@@Base+0xa4>
   191cc:	add	r3, pc, r3
   191d0:	movw	r2, #1272	; 0x4f8
   191d4:	ldr	r1, [pc, #100]	; 19240 <flatcc_builder_check_required_field@@Base+0xa8>
   191d8:	add	r1, pc, r1
   191dc:	ldr	r0, [pc, #96]	; 19244 <flatcc_builder_check_required_field@@Base+0xac>
   191e0:	add	r0, pc, r0
   191e4:	bl	12008 <__assert_fail@plt>
   191e8:	ldr	r3, [fp, #-8]
   191ec:	ldrh	r3, [r3, #8]
   191f0:	ldrh	r2, [fp, #-10]
   191f4:	cmp	r2, r3
   191f8:	bcs	19224 <flatcc_builder_check_required_field@@Base+0x8c>
   191fc:	ldr	r3, [fp, #-8]
   19200:	ldr	r2, [r3, #4]
   19204:	ldrh	r3, [fp, #-10]
   19208:	lsl	r3, r3, #1
   1920c:	add	r3, r2, r3
   19210:	ldrh	r3, [r3]
   19214:	cmp	r3, #0
   19218:	beq	19224 <flatcc_builder_check_required_field@@Base+0x8c>
   1921c:	mov	r3, #1
   19220:	b	19228 <flatcc_builder_check_required_field@@Base+0x90>
   19224:	mov	r3, #0
   19228:	mov	r0, r3
   1922c:	sub	sp, fp, #4
   19230:	ldr	fp, [sp]
   19234:	add	sp, sp, #4
   19238:	pop	{pc}		; (ldr pc, [sp], #4)
   1923c:	andeq	r4, r0, r0, lsl #7
   19240:			; <UNDEFINED> instruction: 0x00003cb4
   19244:	andeq	r3, r0, ip, ror #30

00019248 <flatcc_builder_check_union_field@@Base>:
   19248:	str	fp, [sp, #-8]!
   1924c:	str	lr, [sp, #4]
   19250:	add	fp, sp, #4
   19254:	sub	sp, sp, #8
   19258:	str	r0, [fp, #-8]
   1925c:	mov	r3, r1
   19260:	strh	r3, [fp, #-10]
   19264:	ldr	r3, [fp, #-8]
   19268:	ldr	r3, [r3, #32]
   1926c:	ldrh	r3, [r3, #14]
   19270:	cmp	r3, #3
   19274:	beq	19298 <flatcc_builder_check_union_field@@Base+0x50>
   19278:	ldr	r3, [pc, #300]	; 193ac <flatcc_builder_check_union_field@@Base+0x164>
   1927c:	add	r3, pc, r3
   19280:	movw	r2, #1279	; 0x4ff
   19284:	ldr	r1, [pc, #292]	; 193b0 <flatcc_builder_check_union_field@@Base+0x168>
   19288:	add	r1, pc, r1
   1928c:	ldr	r0, [pc, #288]	; 193b4 <flatcc_builder_check_union_field@@Base+0x16c>
   19290:	add	r0, pc, r0
   19294:	bl	12008 <__assert_fail@plt>
   19298:	ldrh	r3, [fp, #-10]
   1929c:	cmp	r3, #0
   192a0:	beq	192b8 <flatcc_builder_check_union_field@@Base+0x70>
   192a4:	ldr	r3, [fp, #-8]
   192a8:	ldrh	r3, [r3, #8]
   192ac:	ldrh	r2, [fp, #-10]
   192b0:	cmp	r2, r3
   192b4:	bcc	192c0 <flatcc_builder_check_union_field@@Base+0x78>
   192b8:	mov	r3, #0
   192bc:	b	19398 <flatcc_builder_check_union_field@@Base+0x150>
   192c0:	ldr	r3, [fp, #-8]
   192c4:	ldr	r2, [r3, #4]
   192c8:	ldrh	r3, [fp, #-10]
   192cc:	sub	r3, r3, #-2147483647	; 0x80000001
   192d0:	lsl	r3, r3, #1
   192d4:	add	r3, r2, r3
   192d8:	ldrh	r3, [r3]
   192dc:	cmp	r3, #0
   192e0:	bne	19310 <flatcc_builder_check_union_field@@Base+0xc8>
   192e4:	ldr	r3, [fp, #-8]
   192e8:	ldr	r2, [r3, #4]
   192ec:	ldrh	r3, [fp, #-10]
   192f0:	lsl	r3, r3, #1
   192f4:	add	r3, r2, r3
   192f8:	ldrh	r3, [r3]
   192fc:	cmp	r3, #0
   19300:	moveq	r3, #1
   19304:	movne	r3, #0
   19308:	uxtb	r3, r3
   1930c:	b	19398 <flatcc_builder_check_union_field@@Base+0x150>
   19310:	ldr	r3, [fp, #-8]
   19314:	ldr	r3, [r3, #16]
   19318:	ldr	r2, [fp, #-8]
   1931c:	ldr	r1, [r2, #4]
   19320:	ldrh	r2, [fp, #-10]
   19324:	sub	r2, r2, #-2147483647	; 0x80000001
   19328:	lsl	r2, r2, #1
   1932c:	add	r2, r1, r2
   19330:	ldrh	r2, [r2]
   19334:	add	r3, r3, r2
   19338:	ldrb	r3, [r3]
   1933c:	cmp	r3, #0
   19340:	beq	19370 <flatcc_builder_check_union_field@@Base+0x128>
   19344:	ldr	r3, [fp, #-8]
   19348:	ldr	r2, [r3, #4]
   1934c:	ldrh	r3, [fp, #-10]
   19350:	lsl	r3, r3, #1
   19354:	add	r3, r2, r3
   19358:	ldrh	r3, [r3]
   1935c:	cmp	r3, #0
   19360:	movne	r3, #1
   19364:	moveq	r3, #0
   19368:	uxtb	r3, r3
   1936c:	b	19398 <flatcc_builder_check_union_field@@Base+0x150>
   19370:	ldr	r3, [fp, #-8]
   19374:	ldr	r2, [r3, #4]
   19378:	ldrh	r3, [fp, #-10]
   1937c:	lsl	r3, r3, #1
   19380:	add	r3, r2, r3
   19384:	ldrh	r3, [r3]
   19388:	cmp	r3, #0
   1938c:	moveq	r3, #1
   19390:	movne	r3, #0
   19394:	uxtb	r3, r3
   19398:	mov	r0, r3
   1939c:	sub	sp, fp, #4
   193a0:	ldr	fp, [sp]
   193a4:	add	sp, sp, #4
   193a8:	pop	{pc}		; (ldr pc, [sp], #4)
   193ac:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   193b0:	andeq	r3, r0, r4, lsl #24
   193b4:			; <UNDEFINED> instruction: 0x00003ebc

000193b8 <flatcc_builder_check_required@@Base>:
   193b8:	str	fp, [sp, #-8]!
   193bc:	str	lr, [sp, #4]
   193c0:	add	fp, sp, #4
   193c4:	sub	sp, sp, #24
   193c8:	str	r0, [fp, #-16]
   193cc:	str	r1, [fp, #-20]	; 0xffffffec
   193d0:	str	r2, [fp, #-24]	; 0xffffffe8
   193d4:	ldr	r3, [fp, #-16]
   193d8:	ldr	r3, [r3, #32]
   193dc:	ldrh	r3, [r3, #14]
   193e0:	cmp	r3, #3
   193e4:	beq	19408 <flatcc_builder_check_required@@Base+0x50>
   193e8:	ldr	r3, [pc, #176]	; 194a0 <flatcc_builder_check_required@@Base+0xe8>
   193ec:	add	r3, pc, r3
   193f0:	movw	r2, #1297	; 0x511
   193f4:	ldr	r1, [pc, #168]	; 194a4 <flatcc_builder_check_required@@Base+0xec>
   193f8:	add	r1, pc, r1
   193fc:	ldr	r0, [pc, #164]	; 194a8 <flatcc_builder_check_required@@Base+0xf0>
   19400:	add	r0, pc, r0
   19404:	bl	12008 <__assert_fail@plt>
   19408:	ldr	r3, [fp, #-16]
   1940c:	ldrh	r3, [r3, #8]
   19410:	mov	r2, r3
   19414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19418:	cmp	r3, r2
   1941c:	ble	19428 <flatcc_builder_check_required@@Base+0x70>
   19420:	mov	r3, #0
   19424:	b	1948c <flatcc_builder_check_required@@Base+0xd4>
   19428:	mov	r3, #0
   1942c:	str	r3, [fp, #-8]
   19430:	b	19478 <flatcc_builder_check_required@@Base+0xc0>
   19434:	ldr	r3, [fp, #-16]
   19438:	ldr	r2, [r3, #4]
   1943c:	ldr	r3, [fp, #-8]
   19440:	lsl	r3, r3, #1
   19444:	ldr	r1, [fp, #-20]	; 0xffffffec
   19448:	add	r3, r1, r3
   1944c:	ldrh	r3, [r3]
   19450:	lsl	r3, r3, #1
   19454:	add	r3, r2, r3
   19458:	ldrh	r3, [r3]
   1945c:	cmp	r3, #0
   19460:	bne	1946c <flatcc_builder_check_required@@Base+0xb4>
   19464:	mov	r3, #0
   19468:	b	1948c <flatcc_builder_check_required@@Base+0xd4>
   1946c:	ldr	r3, [fp, #-8]
   19470:	add	r3, r3, #1
   19474:	str	r3, [fp, #-8]
   19478:	ldr	r2, [fp, #-8]
   1947c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19480:	cmp	r2, r3
   19484:	blt	19434 <flatcc_builder_check_required@@Base+0x7c>
   19488:	mov	r3, #1
   1948c:	mov	r0, r3
   19490:	sub	sp, fp, #4
   19494:	ldr	fp, [sp]
   19498:	add	sp, sp, #4
   1949c:	pop	{pc}		; (ldr pc, [sp], #4)
   194a0:	andeq	r4, r0, r8, lsr #3
   194a4:	muleq	r0, r4, sl
   194a8:	andeq	r3, r0, ip, asr #26

000194ac <flatcc_builder_end_table@@Base>:
   194ac:	str	fp, [sp, #-8]!
   194b0:	str	lr, [sp, #4]
   194b4:	add	fp, sp, #4
   194b8:	sub	sp, sp, #48	; 0x30
   194bc:	str	r0, [fp, #-32]	; 0xffffffe0
   194c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   194c4:	ldr	r3, [r3, #32]
   194c8:	ldrh	r3, [r3, #14]
   194cc:	cmp	r3, #3
   194d0:	beq	194f4 <flatcc_builder_end_table@@Base+0x48>
   194d4:	ldr	r3, [pc, #520]	; 196e4 <flatcc_builder_end_table@@Base+0x238>
   194d8:	add	r3, pc, r3
   194dc:	movw	r2, #1317	; 0x525
   194e0:	ldr	r1, [pc, #512]	; 196e8 <flatcc_builder_end_table@@Base+0x23c>
   194e4:	add	r1, pc, r1
   194e8:	ldr	r0, [pc, #508]	; 196ec <flatcc_builder_end_table@@Base+0x240>
   194ec:	add	r0, pc, r0
   194f0:	bl	12008 <__assert_fail@plt>
   194f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   194f8:	ldr	r3, [r3, #4]
   194fc:	sub	r3, r3, #4
   19500:	str	r3, [fp, #-8]
   19504:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19508:	ldrh	r3, [r3, #8]
   1950c:	add	r3, r3, #2
   19510:	uxth	r3, r3
   19514:	lsl	r3, r3, #1
   19518:	strh	r3, [fp, #-10]
   1951c:	ldr	r3, [fp, #-8]
   19520:	ldrh	r2, [fp, #-10]
   19524:	strh	r2, [r3]
   19528:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1952c:	ldr	r3, [r3, #20]
   19530:	uxth	r2, r3
   19534:	ldr	r3, [fp, #-8]
   19538:	add	r3, r3, #2
   1953c:	add	r2, r2, #4
   19540:	uxth	r2, r2
   19544:	strh	r2, [r3]
   19548:	ldr	r3, [fp, #-8]
   1954c:	ldrh	r3, [r3]
   19550:	mov	r2, r3
   19554:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19558:	ldr	r3, [r3, #12]
   1955c:	eor	r2, r2, r3
   19560:	movw	r3, #31153	; 0x79b1
   19564:	movt	r3, #40503	; 0x9e37
   19568:	mul	r3, r3, r2
   1956c:	ldr	r2, [fp, #-8]
   19570:	add	r2, r2, #2
   19574:	ldrh	r2, [r2]
   19578:	eor	r2, r2, r3
   1957c:	movw	r3, #31153	; 0x79b1
   19580:	movt	r3, #40503	; 0x9e37
   19584:	mul	r2, r3, r2
   19588:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1958c:	str	r2, [r3, #12]
   19590:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19594:	ldr	r3, [r3, #12]
   19598:	ldrh	r2, [fp, #-10]
   1959c:	ldr	r1, [fp, #-8]
   195a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   195a4:	bl	18b48 <flatcc_builder_create_cached_vtable@@Base>
   195a8:	str	r0, [fp, #-16]
   195ac:	ldr	r3, [fp, #-16]
   195b0:	cmp	r3, #0
   195b4:	bne	195c0 <flatcc_builder_end_table@@Base+0x114>
   195b8:	mov	r3, #0
   195bc:	b	196d0 <flatcc_builder_end_table@@Base+0x224>
   195c0:	ldrh	r3, [fp, #-10]
   195c4:	mov	r2, r3
   195c8:	mov	r1, #0
   195cc:	ldr	r0, [fp, #-8]
   195d0:	bl	11fd8 <memset@plt>
   195d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195d8:	ldr	r2, [r3, #76]	; 0x4c
   195dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195e0:	ldr	r3, [r3, #32]
   195e4:	ldr	r3, [r3, #20]
   195e8:	add	r3, r2, r3
   195ec:	str	r3, [fp, #-20]	; 0xffffffec
   195f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   195f4:	ldr	r2, [r3]
   195f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   195fc:	sub	r3, r2, r3
   19600:	asr	r3, r3, #1
   19604:	str	r3, [fp, #-24]	; 0xffffffe8
   19608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1960c:	ldr	r1, [r3, #16]
   19610:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19614:	ldr	r2, [r3, #20]
   19618:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1961c:	ldrh	r0, [r3, #130]	; 0x82
   19620:	ldr	r3, [fp, #-16]
   19624:	str	r3, [sp, #8]
   19628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1962c:	str	r3, [sp, #4]
   19630:	ldr	r3, [fp, #-20]	; 0xffffffec
   19634:	str	r3, [sp]
   19638:	mov	r3, r0
   1963c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19640:	bl	18e68 <flatcc_builder_create_table@@Base>
   19644:	str	r0, [fp, #-28]	; 0xffffffe4
   19648:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1964c:	cmp	r3, #0
   19650:	bne	1965c <flatcc_builder_end_table@@Base+0x1b0>
   19654:	mov	r3, #0
   19658:	b	196d0 <flatcc_builder_end_table@@Base+0x224>
   1965c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19660:	ldr	r3, [r3, #32]
   19664:	ldr	r2, [r3, #24]
   19668:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1966c:	str	r2, [r3, #12]
   19670:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19674:	ldr	r3, [r3, #32]
   19678:	ldrh	r2, [r3, #28]
   1967c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19680:	strh	r2, [r3, #8]
   19684:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19688:	ldr	r2, [r3, #52]	; 0x34
   1968c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19690:	ldr	r3, [r3, #32]
   19694:	ldr	r3, [r3, #16]
   19698:	add	r2, r2, r3
   1969c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   196a0:	str	r2, [r3, #4]
   196a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   196a8:	ldr	r2, [r3, #76]	; 0x4c
   196ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   196b0:	ldr	r3, [r3, #32]
   196b4:	ldr	r3, [r3, #20]
   196b8:	add	r2, r2, r3
   196bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   196c0:	str	r2, [r3]
   196c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   196c8:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   196cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   196d0:	mov	r0, r3
   196d4:	sub	sp, fp, #4
   196d8:	ldr	fp, [sp]
   196dc:	add	sp, sp, #4
   196e0:	pop	{pc}		; (ldr pc, [sp], #4)
   196e4:	ldrdeq	r4, [r0], -ip
   196e8:	andeq	r3, r0, r8, lsr #19
   196ec:	andeq	r3, r0, r0, ror #24

000196f0 <flatcc_builder_create_vector@@Base>:
   196f0:	str	r4, [sp, #-12]!
   196f4:	str	fp, [sp, #4]
   196f8:	str	lr, [sp, #8]
   196fc:	add	fp, sp, #8
   19700:	sub	sp, sp, #108	; 0x6c
   19704:	str	r0, [fp, #-104]	; 0xffffff98
   19708:	str	r1, [fp, #-108]	; 0xffffff94
   1970c:	str	r2, [fp, #-112]	; 0xffffff90
   19710:	str	r3, [fp, #-116]	; 0xffffff8c
   19714:	ldr	r4, [pc, #496]	; 1990c <flatcc_builder_create_vector@@Base+0x21c>
   19718:	add	r4, pc, r4
   1971c:	ldr	r2, [fp, #-112]	; 0xffffff90
   19720:	ldr	r3, [fp, #8]
   19724:	cmp	r2, r3
   19728:	bls	19764 <flatcc_builder_create_vector@@Base+0x74>
   1972c:	ldr	r2, [fp, #-112]	; 0xffffff90
   19730:	ldr	r3, [fp, #8]
   19734:	cmp	r2, r3
   19738:	bls	1975c <flatcc_builder_create_vector@@Base+0x6c>
   1973c:	ldr	r3, [pc, #460]	; 19910 <flatcc_builder_create_vector@@Base+0x220>
   19740:	add	r3, pc, r3
   19744:	movw	r2, #1365	; 0x555
   19748:	ldr	r1, [pc, #452]	; 19914 <flatcc_builder_create_vector@@Base+0x224>
   1974c:	add	r1, pc, r1
   19750:	ldr	r0, [pc, #448]	; 19918 <flatcc_builder_create_vector@@Base+0x228>
   19754:	add	r0, pc, r0
   19758:	bl	12008 <__assert_fail@plt>
   1975c:	mov	r3, #0
   19760:	b	198f4 <flatcc_builder_create_vector@@Base+0x204>
   19764:	mov	r1, #4
   19768:	add	r3, fp, #4
   1976c:	mov	r0, r3
   19770:	bl	165a0 <flatcc_builder_clear@@Base+0x10c>
   19774:	ldrh	r3, [fp, #4]
   19778:	mov	r1, r3
   1977c:	ldr	r0, [fp, #-104]	; 0xffffff98
   19780:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   19784:	ldr	r3, [fp, #-112]	; 0xffffff90
   19788:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1978c:	mul	r3, r2, r3
   19790:	str	r3, [fp, #-16]
   19794:	ldr	r0, [fp, #-112]	; 0xffffff90
   19798:	bl	15450 <main@@Base+0x248>
   1979c:	mov	r3, r0
   197a0:	str	r3, [fp, #-24]	; 0xffffffe8
   197a4:	ldrh	r3, [fp, #4]
   197a8:	mov	r2, r3
   197ac:	ldr	r1, [fp, #-16]
   197b0:	ldr	r0, [fp, #-104]	; 0xffffff98
   197b4:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   197b8:	str	r0, [fp, #-20]	; 0xffffffec
   197bc:	mov	r3, #0
   197c0:	str	r3, [fp, #-96]	; 0xffffffa0
   197c4:	mov	r3, #0
   197c8:	str	r3, [fp, #-92]	; 0xffffffa4
   197cc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   197d0:	add	r3, r3, #4
   197d4:	str	r3, [fp, #-96]	; 0xffffffa0
   197d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   197dc:	add	r3, r3, #1
   197e0:	lsl	r3, r3, #3
   197e4:	sub	r2, fp, #12
   197e8:	add	r3, r2, r3
   197ec:	sub	r2, fp, #24
   197f0:	str	r2, [r3, #-84]	; 0xffffffac
   197f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   197f8:	add	r3, r3, #1
   197fc:	lsl	r3, r3, #3
   19800:	sub	r2, fp, #12
   19804:	add	r3, r2, r3
   19808:	mov	r2, #4
   1980c:	str	r2, [r3, #-80]	; 0xffffffb0
   19810:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19814:	add	r3, r3, #1
   19818:	str	r3, [fp, #-92]	; 0xffffffa4
   1981c:	ldr	r3, [fp, #-16]
   19820:	cmp	r3, #0
   19824:	beq	1987c <flatcc_builder_create_vector@@Base+0x18c>
   19828:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1982c:	ldr	r3, [fp, #-16]
   19830:	add	r3, r2, r3
   19834:	str	r3, [fp, #-96]	; 0xffffffa0
   19838:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1983c:	add	r3, r3, #1
   19840:	lsl	r3, r3, #3
   19844:	sub	r2, fp, #12
   19848:	add	r3, r2, r3
   1984c:	ldr	r2, [fp, #-108]	; 0xffffff94
   19850:	str	r2, [r3, #-84]	; 0xffffffac
   19854:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19858:	add	r3, r3, #1
   1985c:	lsl	r3, r3, #3
   19860:	sub	r2, fp, #12
   19864:	add	r3, r2, r3
   19868:	ldr	r2, [fp, #-16]
   1986c:	str	r2, [r3, #-80]	; 0xffffffb0
   19870:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19874:	add	r3, r3, #1
   19878:	str	r3, [fp, #-92]	; 0xffffffa4
   1987c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19880:	cmp	r3, #0
   19884:	beq	198e0 <flatcc_builder_create_vector@@Base+0x1f0>
   19888:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1988c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19890:	add	r3, r2, r3
   19894:	str	r3, [fp, #-96]	; 0xffffffa0
   19898:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1989c:	add	r3, r3, #1
   198a0:	lsl	r3, r3, #3
   198a4:	sub	r2, fp, #12
   198a8:	add	r3, r2, r3
   198ac:	ldr	r2, [pc, #104]	; 1991c <flatcc_builder_create_vector@@Base+0x22c>
   198b0:	ldr	r2, [r4, r2]
   198b4:	str	r2, [r3, #-84]	; 0xffffffac
   198b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198bc:	add	r3, r3, #1
   198c0:	lsl	r3, r3, #3
   198c4:	sub	r2, fp, #12
   198c8:	add	r3, r2, r3
   198cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   198d0:	str	r2, [r3, #-80]	; 0xffffffb0
   198d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   198d8:	add	r3, r3, #1
   198dc:	str	r3, [fp, #-92]	; 0xffffffa4
   198e0:	sub	r3, fp, #96	; 0x60
   198e4:	mov	r1, r3
   198e8:	ldr	r0, [fp, #-104]	; 0xffffff98
   198ec:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   198f0:	mov	r3, r0
   198f4:	mov	r0, r3
   198f8:	sub	sp, fp, #8
   198fc:	ldr	r4, [sp]
   19900:	ldr	fp, [sp, #4]
   19904:	add	sp, sp, #8
   19908:	pop	{pc}		; (ldr pc, [sp], #4)
   1990c:	andeq	r4, r1, r0, ror #17
   19910:	muleq	r0, r0, lr
   19914:	andeq	r3, r0, r0, asr #14
   19918:	andeq	r3, r0, r4, lsr #20
   1991c:	andeq	r0, r0, ip, asr #32

00019920 <flatcc_builder_end_vector@@Base>:
   19920:	str	fp, [sp, #-8]!
   19924:	str	lr, [sp, #4]
   19928:	add	fp, sp, #4
   1992c:	sub	sp, sp, #24
   19930:	str	r0, [fp, #-16]
   19934:	ldr	r3, [fp, #-16]
   19938:	ldr	r3, [r3, #32]
   1993c:	ldrh	r3, [r3, #14]
   19940:	cmp	r3, #4
   19944:	beq	19968 <flatcc_builder_end_vector@@Base+0x48>
   19948:	ldr	r3, [pc, #156]	; 199ec <flatcc_builder_end_vector@@Base+0xcc>
   1994c:	add	r3, pc, r3
   19950:	movw	r2, #1400	; 0x578
   19954:	ldr	r1, [pc, #148]	; 199f0 <flatcc_builder_end_vector@@Base+0xd0>
   19958:	add	r1, pc, r1
   1995c:	ldr	r0, [pc, #144]	; 199f4 <flatcc_builder_end_vector@@Base+0xd4>
   19960:	add	r0, pc, r0
   19964:	bl	12008 <__assert_fail@plt>
   19968:	ldr	r3, [fp, #-16]
   1996c:	ldr	r1, [r3, #16]
   19970:	ldr	r3, [fp, #-16]
   19974:	ldr	r3, [r3, #32]
   19978:	ldr	r0, [r3, #20]
   1997c:	ldr	r3, [fp, #-16]
   19980:	ldr	r3, [r3, #32]
   19984:	ldr	ip, [r3, #16]
   19988:	ldr	r3, [fp, #-16]
   1998c:	ldrh	r3, [r3, #130]	; 0x82
   19990:	ldr	r2, [fp, #-16]
   19994:	ldr	r2, [r2, #32]
   19998:	ldr	r2, [r2, #24]
   1999c:	str	r2, [sp, #4]
   199a0:	str	r3, [sp]
   199a4:	mov	r3, ip
   199a8:	mov	r2, r0
   199ac:	ldr	r0, [fp, #-16]
   199b0:	bl	196f0 <flatcc_builder_create_vector@@Base>
   199b4:	str	r0, [fp, #-8]
   199b8:	ldr	r3, [fp, #-8]
   199bc:	cmp	r3, #0
   199c0:	bne	199cc <flatcc_builder_end_vector@@Base+0xac>
   199c4:	mov	r3, #0
   199c8:	b	199d8 <flatcc_builder_end_vector@@Base+0xb8>
   199cc:	ldr	r0, [fp, #-16]
   199d0:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   199d4:	ldr	r3, [fp, #-8]
   199d8:	mov	r0, r3
   199dc:	sub	sp, fp, #4
   199e0:	ldr	fp, [sp]
   199e4:	add	sp, sp, #4
   199e8:	pop	{pc}		; (ldr pc, [sp], #4)
   199ec:	andeq	r3, r0, r4, lsr #25
   199f0:	andeq	r3, r0, r4, lsr r5
   199f4:	andeq	r3, r0, r0, ror r6

000199f8 <flatcc_builder_vector_count@@Base>:
   199f8:	push	{fp}		; (str fp, [sp, #-4]!)
   199fc:	add	fp, sp, #0
   19a00:	sub	sp, sp, #12
   19a04:	str	r0, [fp, #-8]
   19a08:	ldr	r3, [fp, #-8]
   19a0c:	ldr	r3, [r3, #32]
   19a10:	ldr	r3, [r3, #20]
   19a14:	mov	r0, r3
   19a18:	add	sp, fp, #0
   19a1c:	pop	{fp}		; (ldr fp, [sp], #4)
   19a20:	bx	lr

00019a24 <flatcc_builder_vector_edit@@Base>:
   19a24:	push	{fp}		; (str fp, [sp, #-4]!)
   19a28:	add	fp, sp, #0
   19a2c:	sub	sp, sp, #12
   19a30:	str	r0, [fp, #-8]
   19a34:	ldr	r3, [fp, #-8]
   19a38:	ldr	r3, [r3, #16]
   19a3c:	mov	r0, r3
   19a40:	add	sp, fp, #0
   19a44:	pop	{fp}		; (ldr fp, [sp], #4)
   19a48:	bx	lr
   19a4c:	str	r4, [sp, #-12]!
   19a50:	str	fp, [sp, #4]
   19a54:	str	lr, [sp, #8]
   19a58:	add	fp, sp, #8
   19a5c:	sub	sp, sp, #116	; 0x74
   19a60:	str	r0, [fp, #-112]	; 0xffffff90
   19a64:	str	r1, [fp, #-116]	; 0xffffff8c
   19a68:	str	r2, [fp, #-120]	; 0xffffff88
   19a6c:	str	r3, [fp, #-124]	; 0xffffff84
   19a70:	ldr	r4, [pc, #764]	; 19d74 <flatcc_builder_vector_edit@@Base+0x350>
   19a74:	add	r4, pc, r4
   19a78:	ldr	r3, [fp, #-120]	; 0xffffff88
   19a7c:	cmn	r3, #-1073741823	; 0xc0000001
   19a80:	bls	19a8c <flatcc_builder_vector_edit@@Base+0x68>
   19a84:	mov	r3, #0
   19a88:	b	19d5c <flatcc_builder_vector_edit@@Base+0x338>
   19a8c:	mov	r1, #4
   19a90:	ldr	r0, [fp, #-112]	; 0xffffff90
   19a94:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   19a98:	ldr	r3, [fp, #-120]	; 0xffffff88
   19a9c:	lsl	r3, r3, #2
   19aa0:	str	r3, [fp, #-20]	; 0xffffffec
   19aa4:	ldr	r0, [fp, #-120]	; 0xffffff88
   19aa8:	bl	15450 <main@@Base+0x248>
   19aac:	mov	r3, r0
   19ab0:	str	r3, [fp, #-36]	; 0xffffffdc
   19ab4:	mov	r2, #4
   19ab8:	ldr	r1, [fp, #-20]	; 0xffffffec
   19abc:	ldr	r0, [fp, #-112]	; 0xffffff90
   19ac0:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   19ac4:	str	r0, [fp, #-24]	; 0xffffffe8
   19ac8:	mov	r3, #0
   19acc:	str	r3, [fp, #-108]	; 0xffffff94
   19ad0:	mov	r3, #0
   19ad4:	str	r3, [fp, #-104]	; 0xffffff98
   19ad8:	ldr	r3, [fp, #-108]	; 0xffffff94
   19adc:	add	r3, r3, #4
   19ae0:	str	r3, [fp, #-108]	; 0xffffff94
   19ae4:	ldr	r3, [fp, #-104]	; 0xffffff98
   19ae8:	add	r3, r3, #1
   19aec:	lsl	r3, r3, #3
   19af0:	sub	r2, fp, #12
   19af4:	add	r3, r2, r3
   19af8:	sub	r2, fp, #36	; 0x24
   19afc:	str	r2, [r3, #-96]	; 0xffffffa0
   19b00:	ldr	r3, [fp, #-104]	; 0xffffff98
   19b04:	add	r3, r3, #1
   19b08:	lsl	r3, r3, #3
   19b0c:	sub	r2, fp, #12
   19b10:	add	r3, r2, r3
   19b14:	mov	r2, #4
   19b18:	str	r2, [r3, #-92]	; 0xffffffa4
   19b1c:	ldr	r3, [fp, #-104]	; 0xffffff98
   19b20:	add	r3, r3, #1
   19b24:	str	r3, [fp, #-104]	; 0xffffff98
   19b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b2c:	cmp	r3, #0
   19b30:	beq	19b88 <flatcc_builder_vector_edit@@Base+0x164>
   19b34:	ldr	r2, [fp, #-108]	; 0xffffff94
   19b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b3c:	add	r3, r2, r3
   19b40:	str	r3, [fp, #-108]	; 0xffffff94
   19b44:	ldr	r3, [fp, #-104]	; 0xffffff98
   19b48:	add	r3, r3, #1
   19b4c:	lsl	r3, r3, #3
   19b50:	sub	r2, fp, #12
   19b54:	add	r3, r2, r3
   19b58:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19b5c:	str	r2, [r3, #-96]	; 0xffffffa0
   19b60:	ldr	r3, [fp, #-104]	; 0xffffff98
   19b64:	add	r3, r3, #1
   19b68:	lsl	r3, r3, #3
   19b6c:	sub	r2, fp, #12
   19b70:	add	r3, r2, r3
   19b74:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b78:	str	r2, [r3, #-92]	; 0xffffffa4
   19b7c:	ldr	r3, [fp, #-104]	; 0xffffff98
   19b80:	add	r3, r3, #1
   19b84:	str	r3, [fp, #-104]	; 0xffffff98
   19b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b8c:	cmp	r3, #0
   19b90:	beq	19bec <flatcc_builder_vector_edit@@Base+0x1c8>
   19b94:	ldr	r2, [fp, #-108]	; 0xffffff94
   19b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b9c:	add	r3, r2, r3
   19ba0:	str	r3, [fp, #-108]	; 0xffffff94
   19ba4:	ldr	r3, [fp, #-104]	; 0xffffff98
   19ba8:	add	r3, r3, #1
   19bac:	lsl	r3, r3, #3
   19bb0:	sub	r2, fp, #12
   19bb4:	add	r3, r2, r3
   19bb8:	ldr	r2, [pc, #440]	; 19d78 <flatcc_builder_vector_edit@@Base+0x354>
   19bbc:	ldr	r2, [r4, r2]
   19bc0:	str	r2, [r3, #-96]	; 0xffffffa0
   19bc4:	ldr	r3, [fp, #-104]	; 0xffffff98
   19bc8:	add	r3, r3, #1
   19bcc:	lsl	r3, r3, #3
   19bd0:	sub	r2, fp, #12
   19bd4:	add	r3, r2, r3
   19bd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19bdc:	str	r2, [r3, #-92]	; 0xffffffa4
   19be0:	ldr	r3, [fp, #-104]	; 0xffffff98
   19be4:	add	r3, r3, #1
   19be8:	str	r3, [fp, #-104]	; 0xffffff98
   19bec:	ldr	r3, [fp, #-112]	; 0xffffff90
   19bf0:	ldr	r3, [r3, #136]	; 0x88
   19bf4:	mov	r2, r3
   19bf8:	ldr	r3, [fp, #-108]	; 0xffffff94
   19bfc:	sub	r3, r2, r3
   19c00:	str	r3, [fp, #-28]	; 0xffffffe4
   19c04:	mov	r3, #0
   19c08:	str	r3, [fp, #-16]
   19c0c:	b	19d38 <flatcc_builder_vector_edit@@Base+0x314>
   19c10:	ldr	r3, [fp, #-16]
   19c14:	lsl	r3, r3, #2
   19c18:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19c1c:	add	r3, r2, r3
   19c20:	ldr	r3, [r3]
   19c24:	cmp	r3, #0
   19c28:	beq	19cc8 <flatcc_builder_vector_edit@@Base+0x2a4>
   19c2c:	ldr	r3, [fp, #-16]
   19c30:	lsl	r3, r3, #2
   19c34:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19c38:	add	r3, r2, r3
   19c3c:	ldr	r3, [r3]
   19c40:	mov	r2, r3
   19c44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19c48:	sub	r2, r2, r3
   19c4c:	ldr	r3, [fp, #-16]
   19c50:	lsl	r3, r3, #2
   19c54:	sub	r3, r2, r3
   19c58:	sub	r3, r3, #4
   19c5c:	str	r3, [fp, #-32]	; 0xffffffe0
   19c60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19c64:	bl	15450 <main@@Base+0x248>
   19c68:	mov	r1, r0
   19c6c:	ldr	r3, [fp, #-16]
   19c70:	lsl	r3, r3, #2
   19c74:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19c78:	add	r3, r2, r3
   19c7c:	mov	r2, r1
   19c80:	str	r2, [r3]
   19c84:	ldr	r3, [fp, #-124]	; 0xffffff84
   19c88:	cmp	r3, #0
   19c8c:	beq	19d2c <flatcc_builder_vector_edit@@Base+0x308>
   19c90:	ldr	r2, [fp, #-124]	; 0xffffff84
   19c94:	ldr	r3, [fp, #-16]
   19c98:	add	r3, r2, r3
   19c9c:	ldrb	r3, [r3]
   19ca0:	cmp	r3, #0
   19ca4:	bne	19d2c <flatcc_builder_vector_edit@@Base+0x308>
   19ca8:	ldr	r3, [pc, #204]	; 19d7c <flatcc_builder_vector_edit@@Base+0x358>
   19cac:	add	r3, pc, r3
   19cb0:	movw	r2, #1457	; 0x5b1
   19cb4:	ldr	r1, [pc, #196]	; 19d80 <flatcc_builder_vector_edit@@Base+0x35c>
   19cb8:	add	r1, pc, r1
   19cbc:	ldr	r0, [pc, #192]	; 19d84 <flatcc_builder_vector_edit@@Base+0x360>
   19cc0:	add	r0, pc, r0
   19cc4:	bl	12008 <__assert_fail@plt>
   19cc8:	ldr	r3, [fp, #-124]	; 0xffffff84
   19ccc:	cmp	r3, #0
   19cd0:	beq	19d0c <flatcc_builder_vector_edit@@Base+0x2e8>
   19cd4:	ldr	r2, [fp, #-124]	; 0xffffff84
   19cd8:	ldr	r3, [fp, #-16]
   19cdc:	add	r3, r2, r3
   19ce0:	ldrb	r3, [r3]
   19ce4:	cmp	r3, #0
   19ce8:	beq	19d2c <flatcc_builder_vector_edit@@Base+0x308>
   19cec:	ldr	r3, [pc, #148]	; 19d88 <flatcc_builder_vector_edit@@Base+0x364>
   19cf0:	add	r3, pc, r3
   19cf4:	movw	r2, #1461	; 0x5b5
   19cf8:	ldr	r1, [pc, #140]	; 19d8c <flatcc_builder_vector_edit@@Base+0x368>
   19cfc:	add	r1, pc, r1
   19d00:	ldr	r0, [pc, #136]	; 19d90 <flatcc_builder_vector_edit@@Base+0x36c>
   19d04:	add	r0, pc, r0
   19d08:	bl	12008 <__assert_fail@plt>
   19d0c:	ldr	r3, [pc, #128]	; 19d94 <flatcc_builder_vector_edit@@Base+0x370>
   19d10:	add	r3, pc, r3
   19d14:	movw	r2, #1463	; 0x5b7
   19d18:	ldr	r1, [pc, #120]	; 19d98 <flatcc_builder_vector_edit@@Base+0x374>
   19d1c:	add	r1, pc, r1
   19d20:	ldr	r0, [pc, #116]	; 19d9c <flatcc_builder_vector_edit@@Base+0x378>
   19d24:	add	r0, pc, r0
   19d28:	bl	12008 <__assert_fail@plt>
   19d2c:	ldr	r3, [fp, #-16]
   19d30:	add	r3, r3, #1
   19d34:	str	r3, [fp, #-16]
   19d38:	ldr	r2, [fp, #-16]
   19d3c:	ldr	r3, [fp, #-120]	; 0xffffff88
   19d40:	cmp	r2, r3
   19d44:	bcc	19c10 <flatcc_builder_vector_edit@@Base+0x1ec>
   19d48:	sub	r3, fp, #108	; 0x6c
   19d4c:	mov	r1, r3
   19d50:	ldr	r0, [fp, #-112]	; 0xffffff90
   19d54:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   19d58:	mov	r3, r0
   19d5c:	mov	r0, r3
   19d60:	sub	sp, fp, #8
   19d64:	ldr	r4, [sp]
   19d68:	ldr	fp, [sp, #4]
   19d6c:	add	sp, sp, #8
   19d70:	pop	{pc}		; (ldr pc, [sp], #4)
   19d74:	andeq	r4, r1, r4, lsl #11
   19d78:	andeq	r0, r0, ip, asr #32
   19d7c:	andeq	r3, r0, r0, ror #18
   19d80:	ldrdeq	r3, [r0], -r4
   19d84:	andeq	r3, r0, ip, asr #9
   19d88:	andeq	r3, r0, ip, lsl r9
   19d8c:	muleq	r0, r0, r1
   19d90:	muleq	r0, r8, r4
   19d94:	strdeq	r3, [r0], -ip
   19d98:	andeq	r3, r0, r0, ror r1
   19d9c:	andeq	r3, r0, r8, asr #3

00019da0 <flatcc_builder_create_offset_vector_direct@@Base>:
   19da0:	str	fp, [sp, #-8]!
   19da4:	str	lr, [sp, #4]
   19da8:	add	fp, sp, #4
   19dac:	sub	sp, sp, #16
   19db0:	str	r0, [fp, #-8]
   19db4:	str	r1, [fp, #-12]
   19db8:	str	r2, [fp, #-16]
   19dbc:	mov	r3, #0
   19dc0:	ldr	r2, [fp, #-16]
   19dc4:	ldr	r1, [fp, #-12]
   19dc8:	ldr	r0, [fp, #-8]
   19dcc:	bl	19a4c <flatcc_builder_vector_edit@@Base+0x28>
   19dd0:	mov	r3, r0
   19dd4:	mov	r0, r3
   19dd8:	sub	sp, fp, #4
   19ddc:	ldr	fp, [sp]
   19de0:	add	sp, sp, #4
   19de4:	pop	{pc}		; (ldr pc, [sp], #4)

00019de8 <flatcc_builder_end_offset_vector@@Base>:
   19de8:	str	fp, [sp, #-8]!
   19dec:	str	lr, [sp, #4]
   19df0:	add	fp, sp, #4
   19df4:	sub	sp, sp, #16
   19df8:	str	r0, [fp, #-16]
   19dfc:	ldr	r3, [fp, #-16]
   19e00:	ldr	r3, [r3, #32]
   19e04:	ldrh	r3, [r3, #14]
   19e08:	cmp	r3, #5
   19e0c:	beq	19e30 <flatcc_builder_end_offset_vector@@Base+0x48>
   19e10:	ldr	r3, [pc, #112]	; 19e88 <flatcc_builder_end_offset_vector@@Base+0xa0>
   19e14:	add	r3, pc, r3
   19e18:	movw	r2, #1480	; 0x5c8
   19e1c:	ldr	r1, [pc, #104]	; 19e8c <flatcc_builder_end_offset_vector@@Base+0xa4>
   19e20:	add	r1, pc, r1
   19e24:	ldr	r0, [pc, #100]	; 19e90 <flatcc_builder_end_offset_vector@@Base+0xa8>
   19e28:	add	r0, pc, r0
   19e2c:	bl	12008 <__assert_fail@plt>
   19e30:	ldr	r3, [fp, #-16]
   19e34:	ldr	r1, [r3, #16]
   19e38:	ldr	r3, [fp, #-16]
   19e3c:	ldr	r3, [r3, #32]
   19e40:	ldr	r3, [r3, #20]
   19e44:	mov	r2, r3
   19e48:	ldr	r0, [fp, #-16]
   19e4c:	bl	19da0 <flatcc_builder_create_offset_vector_direct@@Base>
   19e50:	str	r0, [fp, #-8]
   19e54:	ldr	r3, [fp, #-8]
   19e58:	cmp	r3, #0
   19e5c:	bne	19e68 <flatcc_builder_end_offset_vector@@Base+0x80>
   19e60:	mov	r3, #0
   19e64:	b	19e74 <flatcc_builder_end_offset_vector@@Base+0x8c>
   19e68:	ldr	r0, [fp, #-16]
   19e6c:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   19e70:	ldr	r3, [fp, #-8]
   19e74:	mov	r0, r3
   19e78:	sub	sp, fp, #4
   19e7c:	ldr	fp, [sp]
   19e80:	add	sp, sp, #4
   19e84:	pop	{pc}		; (ldr pc, [sp], #4)
   19e88:	andeq	r3, r0, r8, lsl r8
   19e8c:	andeq	r3, r0, ip, rrx
   19e90:	andeq	r3, r0, r4, lsl r2

00019e94 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   19e94:	str	fp, [sp, #-8]!
   19e98:	str	lr, [sp, #4]
   19e9c:	add	fp, sp, #4
   19ea0:	sub	sp, sp, #16
   19ea4:	str	r0, [fp, #-16]
   19ea8:	str	r1, [fp, #-20]	; 0xffffffec
   19eac:	ldr	r3, [fp, #-16]
   19eb0:	ldr	r3, [r3, #32]
   19eb4:	ldrh	r3, [r3, #14]
   19eb8:	cmp	r3, #5
   19ebc:	beq	19ee0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   19ec0:	ldr	r3, [pc, #112]	; 19f38 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   19ec4:	add	r3, pc, r3
   19ec8:	movw	r2, #1493	; 0x5d5
   19ecc:	ldr	r1, [pc, #104]	; 19f3c <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   19ed0:	add	r1, pc, r1
   19ed4:	ldr	r0, [pc, #100]	; 19f40 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   19ed8:	add	r0, pc, r0
   19edc:	bl	12008 <__assert_fail@plt>
   19ee0:	ldr	r3, [fp, #-16]
   19ee4:	ldr	r1, [r3, #16]
   19ee8:	ldr	r3, [fp, #-16]
   19eec:	ldr	r3, [r3, #32]
   19ef0:	ldr	r2, [r3, #20]
   19ef4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ef8:	ldr	r0, [fp, #-16]
   19efc:	bl	19a4c <flatcc_builder_vector_edit@@Base+0x28>
   19f00:	str	r0, [fp, #-8]
   19f04:	ldr	r3, [fp, #-8]
   19f08:	cmp	r3, #0
   19f0c:	bne	19f18 <flatcc_builder_end_offset_vector_for_unions@@Base+0x84>
   19f10:	mov	r3, #0
   19f14:	b	19f24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x90>
   19f18:	ldr	r0, [fp, #-16]
   19f1c:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   19f20:	ldr	r3, [fp, #-8]
   19f24:	mov	r0, r3
   19f28:	sub	sp, fp, #4
   19f2c:	ldr	fp, [sp]
   19f30:	add	sp, sp, #4
   19f34:	pop	{pc}		; (ldr pc, [sp], #4)
   19f38:	andeq	r3, r0, ip, lsl #15
   19f3c:			; <UNDEFINED> instruction: 0x00002fbc
   19f40:	andeq	r3, r0, r4, ror #2

00019f44 <flatcc_builder_offset_vector_edit@@Base>:
   19f44:	push	{fp}		; (str fp, [sp, #-4]!)
   19f48:	add	fp, sp, #0
   19f4c:	sub	sp, sp, #12
   19f50:	str	r0, [fp, #-8]
   19f54:	ldr	r3, [fp, #-8]
   19f58:	ldr	r3, [r3, #16]
   19f5c:	mov	r0, r3
   19f60:	add	sp, fp, #0
   19f64:	pop	{fp}		; (ldr fp, [sp], #4)
   19f68:	bx	lr

00019f6c <flatcc_builder_offset_vector_count@@Base>:
   19f6c:	push	{fp}		; (str fp, [sp, #-4]!)
   19f70:	add	fp, sp, #0
   19f74:	sub	sp, sp, #12
   19f78:	str	r0, [fp, #-8]
   19f7c:	ldr	r3, [fp, #-8]
   19f80:	ldr	r3, [r3, #32]
   19f84:	ldr	r3, [r3, #20]
   19f88:	mov	r0, r3
   19f8c:	add	sp, fp, #0
   19f90:	pop	{fp}		; (ldr fp, [sp], #4)
   19f94:	bx	lr

00019f98 <flatcc_builder_table_add_union@@Base>:
   19f98:	str	fp, [sp, #-8]!
   19f9c:	str	lr, [sp, #4]
   19fa0:	add	fp, sp, #4
   19fa4:	sub	sp, sp, #24
   19fa8:	str	r0, [fp, #-16]
   19fac:	str	r1, [fp, #-20]	; 0xffffffec
   19fb0:	sub	r1, fp, #28
   19fb4:	stm	r1, {r2, r3}
   19fb8:	ldr	r3, [fp, #-16]
   19fbc:	ldr	r3, [r3, #32]
   19fc0:	ldrh	r3, [r3, #14]
   19fc4:	cmp	r3, #3
   19fc8:	beq	19fec <flatcc_builder_table_add_union@@Base+0x54>
   19fcc:	ldr	r3, [pc, #360]	; 1a13c <flatcc_builder_table_add_union@@Base+0x1a4>
   19fd0:	add	r3, pc, r3
   19fd4:	movw	r2, #1518	; 0x5ee
   19fd8:	ldr	r1, [pc, #352]	; 1a140 <flatcc_builder_table_add_union@@Base+0x1a8>
   19fdc:	add	r1, pc, r1
   19fe0:	ldr	r0, [pc, #348]	; 1a144 <flatcc_builder_table_add_union@@Base+0x1ac>
   19fe4:	add	r0, pc, r0
   19fe8:	bl	12008 <__assert_fail@plt>
   19fec:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   19ff0:	cmp	r3, #0
   19ff4:	bne	1a044 <flatcc_builder_table_add_union@@Base+0xac>
   19ff8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ffc:	cmp	r3, #0
   1a000:	beq	1a044 <flatcc_builder_table_add_union@@Base+0xac>
   1a004:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1a008:	cmp	r3, #0
   1a00c:	bne	1a03c <flatcc_builder_table_add_union@@Base+0xa4>
   1a010:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a014:	cmp	r3, #0
   1a018:	beq	1a03c <flatcc_builder_table_add_union@@Base+0xa4>
   1a01c:	ldr	r3, [pc, #292]	; 1a148 <flatcc_builder_table_add_union@@Base+0x1b0>
   1a020:	add	r3, pc, r3
   1a024:	movw	r2, #1519	; 0x5ef
   1a028:	ldr	r1, [pc, #284]	; 1a14c <flatcc_builder_table_add_union@@Base+0x1b4>
   1a02c:	add	r1, pc, r1
   1a030:	ldr	r0, [pc, #280]	; 1a150 <flatcc_builder_table_add_union@@Base+0x1b8>
   1a034:	add	r0, pc, r0
   1a038:	bl	12008 <__assert_fail@plt>
   1a03c:	mvn	r3, #0
   1a040:	b	1a128 <flatcc_builder_table_add_union@@Base+0x190>
   1a044:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a048:	cmp	r3, #0
   1a04c:	beq	1a0ac <flatcc_builder_table_add_union@@Base+0x114>
   1a050:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a054:	ldr	r0, [fp, #-16]
   1a058:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   1a05c:	str	r0, [fp, #-8]
   1a060:	ldr	r3, [fp, #-8]
   1a064:	cmp	r3, #0
   1a068:	bne	1a0a0 <flatcc_builder_table_add_union@@Base+0x108>
   1a06c:	ldr	r3, [fp, #-8]
   1a070:	cmp	r3, #0
   1a074:	bne	1a098 <flatcc_builder_table_add_union@@Base+0x100>
   1a078:	ldr	r3, [pc, #212]	; 1a154 <flatcc_builder_table_add_union@@Base+0x1bc>
   1a07c:	add	r3, pc, r3
   1a080:	movw	r2, #1522	; 0x5f2
   1a084:	ldr	r1, [pc, #204]	; 1a158 <flatcc_builder_table_add_union@@Base+0x1c0>
   1a088:	add	r1, pc, r1
   1a08c:	ldr	r0, [pc, #200]	; 1a15c <flatcc_builder_table_add_union@@Base+0x1c4>
   1a090:	add	r0, pc, r0
   1a094:	bl	12008 <__assert_fail@plt>
   1a098:	mvn	r3, #0
   1a09c:	b	1a128 <flatcc_builder_table_add_union@@Base+0x190>
   1a0a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a0a4:	ldr	r3, [fp, #-8]
   1a0a8:	str	r2, [r3]
   1a0ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0b0:	sub	r1, r3, #1
   1a0b4:	mov	r3, #1
   1a0b8:	mov	r2, #1
   1a0bc:	ldr	r0, [fp, #-16]
   1a0c0:	bl	1aefc <flatcc_builder_table_add@@Base>
   1a0c4:	str	r0, [fp, #-12]
   1a0c8:	ldr	r3, [fp, #-12]
   1a0cc:	cmp	r3, #0
   1a0d0:	bne	1a108 <flatcc_builder_table_add_union@@Base+0x170>
   1a0d4:	ldr	r3, [fp, #-12]
   1a0d8:	cmp	r3, #0
   1a0dc:	bne	1a100 <flatcc_builder_table_add_union@@Base+0x168>
   1a0e0:	ldr	r3, [pc, #120]	; 1a160 <flatcc_builder_table_add_union@@Base+0x1c8>
   1a0e4:	add	r3, pc, r3
   1a0e8:	movw	r2, #1526	; 0x5f6
   1a0ec:	ldr	r1, [pc, #112]	; 1a164 <flatcc_builder_table_add_union@@Base+0x1cc>
   1a0f0:	add	r1, pc, r1
   1a0f4:	ldr	r0, [pc, #108]	; 1a168 <flatcc_builder_table_add_union@@Base+0x1d0>
   1a0f8:	add	r0, pc, r0
   1a0fc:	bl	12008 <__assert_fail@plt>
   1a100:	mvn	r3, #0
   1a104:	b	1a128 <flatcc_builder_table_add_union@@Base+0x190>
   1a108:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1a10c:	mov	r0, r3
   1a110:	bl	15474 <main@@Base+0x26c>
   1a114:	mov	r3, r0
   1a118:	mov	r2, r3
   1a11c:	ldr	r3, [fp, #-12]
   1a120:	strb	r2, [r3]
   1a124:	mov	r3, #0
   1a128:	mov	r0, r3
   1a12c:	sub	sp, fp, #4
   1a130:	ldr	fp, [sp]
   1a134:	add	sp, sp, #4
   1a138:	pop	{pc}		; (ldr pc, [sp], #4)
   1a13c:	andeq	r3, r0, ip, lsr #13
   1a140:			; <UNDEFINED> instruction: 0x00002eb0
   1a144:	andeq	r3, r0, r8, ror #2
   1a148:	andeq	r3, r0, ip, asr r6
   1a14c:	andeq	r2, r0, r0, ror #28
   1a150:	andeq	r3, r0, r8, ror r1
   1a154:	andeq	r3, r0, r0, lsl #12
   1a158:	andeq	r2, r0, r4, lsl #28
   1a15c:	andeq	r3, r0, r0, asr #2
   1a160:	muleq	r0, r8, r5
   1a164:	muleq	r0, ip, sp
   1a168:	andeq	r3, r0, r4, ror #1

0001a16c <flatcc_builder_table_add_union_vector@@Base>:
   1a16c:	str	fp, [sp, #-8]!
   1a170:	str	lr, [sp, #4]
   1a174:	add	fp, sp, #4
   1a178:	sub	sp, sp, #24
   1a17c:	str	r0, [fp, #-16]
   1a180:	str	r1, [fp, #-20]	; 0xffffffec
   1a184:	sub	r1, fp, #28
   1a188:	stm	r1, {r2, r3}
   1a18c:	ldr	r3, [fp, #-16]
   1a190:	ldr	r3, [r3, #32]
   1a194:	ldrh	r3, [r3, #14]
   1a198:	cmp	r3, #3
   1a19c:	beq	1a1c0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   1a1a0:	ldr	r3, [pc, #404]	; 1a33c <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   1a1a4:	add	r3, pc, r3
   1a1a8:	mov	r2, #1536	; 0x600
   1a1ac:	ldr	r1, [pc, #396]	; 1a340 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1a1b0:	add	r1, pc, r1
   1a1b4:	ldr	r0, [pc, #392]	; 1a344 <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   1a1b8:	add	r0, pc, r0
   1a1bc:	bl	12008 <__assert_fail@plt>
   1a1c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1c4:	cmp	r3, #0
   1a1c8:	moveq	r3, #1
   1a1cc:	movne	r3, #0
   1a1d0:	uxtb	r2, r3
   1a1d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a1d8:	cmp	r3, #0
   1a1dc:	moveq	r3, #1
   1a1e0:	movne	r3, #0
   1a1e4:	uxtb	r3, r3
   1a1e8:	eor	r3, r3, r2
   1a1ec:	uxtb	r3, r3
   1a1f0:	cmp	r3, #0
   1a1f4:	beq	1a258 <flatcc_builder_table_add_union_vector@@Base+0xec>
   1a1f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1fc:	cmp	r3, #0
   1a200:	movne	r3, #1
   1a204:	moveq	r3, #0
   1a208:	uxtb	r2, r3
   1a20c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a210:	cmp	r3, #0
   1a214:	moveq	r3, #1
   1a218:	movne	r3, #0
   1a21c:	uxtb	r3, r3
   1a220:	eor	r3, r3, r2
   1a224:	uxtb	r3, r3
   1a228:	cmp	r3, #0
   1a22c:	bne	1a250 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1a230:	ldr	r3, [pc, #272]	; 1a348 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   1a234:	add	r3, pc, r3
   1a238:	movw	r2, #1537	; 0x601
   1a23c:	ldr	r1, [pc, #264]	; 1a34c <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   1a240:	add	r1, pc, r1
   1a244:	ldr	r0, [pc, #260]	; 1a350 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   1a248:	add	r0, pc, r0
   1a24c:	bl	12008 <__assert_fail@plt>
   1a250:	mvn	r3, #0
   1a254:	b	1a328 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1a258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a25c:	cmp	r3, #0
   1a260:	beq	1a324 <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1a264:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a268:	sub	r3, r3, #1
   1a26c:	mov	r1, r3
   1a270:	ldr	r0, [fp, #-16]
   1a274:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   1a278:	str	r0, [fp, #-8]
   1a27c:	ldr	r3, [fp, #-8]
   1a280:	cmp	r3, #0
   1a284:	bne	1a2bc <flatcc_builder_table_add_union_vector@@Base+0x150>
   1a288:	ldr	r3, [fp, #-8]
   1a28c:	cmp	r3, #0
   1a290:	bne	1a2b4 <flatcc_builder_table_add_union_vector@@Base+0x148>
   1a294:	ldr	r3, [pc, #184]	; 1a354 <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   1a298:	add	r3, pc, r3
   1a29c:	movw	r2, #1540	; 0x604
   1a2a0:	ldr	r1, [pc, #176]	; 1a358 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   1a2a4:	add	r1, pc, r1
   1a2a8:	ldr	r0, [pc, #172]	; 1a35c <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1a2ac:	add	r0, pc, r0
   1a2b0:	bl	12008 <__assert_fail@plt>
   1a2b4:	mvn	r3, #0
   1a2b8:	b	1a328 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1a2bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a2c0:	ldr	r3, [fp, #-8]
   1a2c4:	str	r2, [r3]
   1a2c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a2cc:	ldr	r0, [fp, #-16]
   1a2d0:	bl	1b16c <flatcc_builder_table_add_offset@@Base>
   1a2d4:	str	r0, [fp, #-8]
   1a2d8:	ldr	r3, [fp, #-8]
   1a2dc:	cmp	r3, #0
   1a2e0:	bne	1a318 <flatcc_builder_table_add_union_vector@@Base+0x1ac>
   1a2e4:	ldr	r3, [fp, #-8]
   1a2e8:	cmp	r3, #0
   1a2ec:	bne	1a310 <flatcc_builder_table_add_union_vector@@Base+0x1a4>
   1a2f0:	ldr	r3, [pc, #104]	; 1a360 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   1a2f4:	add	r3, pc, r3
   1a2f8:	movw	r2, #1544	; 0x608
   1a2fc:	ldr	r1, [pc, #96]	; 1a364 <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   1a300:	add	r1, pc, r1
   1a304:	ldr	r0, [pc, #92]	; 1a368 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   1a308:	add	r0, pc, r0
   1a30c:	bl	12008 <__assert_fail@plt>
   1a310:	mvn	r3, #0
   1a314:	b	1a328 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1a318:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a31c:	ldr	r3, [fp, #-8]
   1a320:	str	r2, [r3]
   1a324:	mov	r3, #0
   1a328:	mov	r0, r3
   1a32c:	sub	sp, fp, #4
   1a330:	ldr	fp, [sp]
   1a334:	add	sp, sp, #4
   1a338:	pop	{pc}		; (ldr pc, [sp], #4)
   1a33c:	strdeq	r3, [r0], -r8
   1a340:	ldrdeq	r2, [r0], -ip
   1a344:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1a348:	andeq	r3, r0, r8, ror #8
   1a34c:	andeq	r2, r0, ip, asr #24
   1a350:	andeq	r2, r0, r0, lsr #31
   1a354:	andeq	r3, r0, r4, lsl #8
   1a358:	andeq	r2, r0, r8, ror #23
   1a35c:	andeq	r2, r0, r4, lsr #30
   1a360:	andeq	r3, r0, r8, lsr #7
   1a364:	andeq	r2, r0, ip, lsl #23
   1a368:	andeq	r2, r0, r8, asr #29

0001a36c <flatcc_builder_create_union_vector@@Base>:
   1a36c:	str	fp, [sp, #-8]!
   1a370:	str	lr, [sp, #4]
   1a374:	add	fp, sp, #4
   1a378:	sub	sp, sp, #48	; 0x30
   1a37c:	str	r0, [fp, #-32]	; 0xffffffe0
   1a380:	str	r1, [fp, #-36]	; 0xffffffdc
   1a384:	str	r2, [fp, #-40]	; 0xffffffd8
   1a388:	str	r3, [fp, #-44]	; 0xffffffd4
   1a38c:	mov	r3, #0
   1a390:	str	r3, [fp, #-24]	; 0xffffffe8
   1a394:	mov	r3, #0
   1a398:	str	r3, [fp, #-20]	; 0xffffffec
   1a39c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a3a0:	bl	186e0 <flatcc_builder_start_offset_vector@@Base>
   1a3a4:	mov	r3, r0
   1a3a8:	cmp	r3, #0
   1a3ac:	beq	1a3c8 <flatcc_builder_create_union_vector@@Base+0x5c>
   1a3b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a3b4:	mov	r1, r3
   1a3b8:	sub	r3, fp, #24
   1a3bc:	ldrd	r2, [r3]
   1a3c0:	strd	r2, [r1]
   1a3c4:	b	1a4e4 <flatcc_builder_create_union_vector@@Base+0x178>
   1a3c8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1a3cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a3d0:	bl	17f24 <flatcc_builder_extend_offset_vector@@Base>
   1a3d4:	mov	r3, r0
   1a3d8:	cmp	r3, #0
   1a3dc:	bne	1a3f8 <flatcc_builder_create_union_vector@@Base+0x8c>
   1a3e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a3e4:	mov	r1, r3
   1a3e8:	sub	r3, fp, #24
   1a3ec:	ldrd	r2, [r3]
   1a3f0:	strd	r2, [r1]
   1a3f4:	b	1a4e4 <flatcc_builder_create_union_vector@@Base+0x178>
   1a3f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1a3fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a400:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   1a404:	str	r0, [fp, #-12]
   1a408:	ldr	r3, [fp, #-12]
   1a40c:	cmp	r3, #0
   1a410:	bne	1a42c <flatcc_builder_create_union_vector@@Base+0xc0>
   1a414:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a418:	mov	r1, r3
   1a41c:	sub	r3, fp, #24
   1a420:	ldrd	r2, [r3]
   1a424:	strd	r2, [r1]
   1a428:	b	1a4e4 <flatcc_builder_create_union_vector@@Base+0x178>
   1a42c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a430:	bl	19f44 <flatcc_builder_offset_vector_edit@@Base>
   1a434:	str	r0, [fp, #-16]
   1a438:	mov	r3, #0
   1a43c:	str	r3, [fp, #-8]
   1a440:	b	1a49c <flatcc_builder_create_union_vector@@Base+0x130>
   1a444:	ldr	r3, [fp, #-8]
   1a448:	lsl	r3, r3, #3
   1a44c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a450:	add	r2, r2, r3
   1a454:	ldr	r1, [fp, #-12]
   1a458:	ldr	r3, [fp, #-8]
   1a45c:	add	r3, r1, r3
   1a460:	ldrb	r2, [r2]
   1a464:	strb	r2, [r3]
   1a468:	ldr	r3, [fp, #-8]
   1a46c:	lsl	r3, r3, #3
   1a470:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a474:	add	r2, r2, r3
   1a478:	ldr	r3, [fp, #-8]
   1a47c:	lsl	r3, r3, #2
   1a480:	ldr	r1, [fp, #-16]
   1a484:	add	r3, r1, r3
   1a488:	ldr	r2, [r2, #4]
   1a48c:	str	r2, [r3]
   1a490:	ldr	r3, [fp, #-8]
   1a494:	add	r3, r3, #1
   1a498:	str	r3, [fp, #-8]
   1a49c:	ldr	r2, [fp, #-8]
   1a4a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a4a4:	cmp	r2, r3
   1a4a8:	bcc	1a444 <flatcc_builder_create_union_vector@@Base+0xd8>
   1a4ac:	sub	r0, fp, #24
   1a4b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a4b4:	str	r3, [sp]
   1a4b8:	ldr	r3, [fp, #-16]
   1a4bc:	ldr	r2, [fp, #-12]
   1a4c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a4c4:	bl	1a4f8 <flatcc_builder_create_union_vector_direct@@Base>
   1a4c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a4cc:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1a4d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a4d4:	mov	r1, r3
   1a4d8:	sub	r3, fp, #24
   1a4dc:	ldrd	r2, [r3]
   1a4e0:	strd	r2, [r1]
   1a4e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a4e8:	sub	sp, fp, #4
   1a4ec:	ldr	fp, [sp]
   1a4f0:	add	sp, sp, #4
   1a4f4:	pop	{pc}		; (ldr pc, [sp], #4)

0001a4f8 <flatcc_builder_create_union_vector_direct@@Base>:
   1a4f8:	str	fp, [sp, #-8]!
   1a4fc:	str	lr, [sp, #4]
   1a500:	add	fp, sp, #4
   1a504:	sub	sp, sp, #32
   1a508:	str	r0, [fp, #-16]
   1a50c:	str	r1, [fp, #-20]	; 0xffffffec
   1a510:	str	r2, [fp, #-24]	; 0xffffffe8
   1a514:	str	r3, [fp, #-28]	; 0xffffffe4
   1a518:	mov	r3, #0
   1a51c:	str	r3, [fp, #-12]
   1a520:	mov	r3, #0
   1a524:	str	r3, [fp, #-8]
   1a528:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a52c:	ldr	r2, [fp, #4]
   1a530:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a534:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a538:	bl	19a4c <flatcc_builder_vector_edit@@Base+0x28>
   1a53c:	mov	r3, r0
   1a540:	str	r3, [fp, #-8]
   1a544:	ldr	r3, [fp, #-8]
   1a548:	cmp	r3, #0
   1a54c:	bne	1a568 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   1a550:	ldr	r3, [fp, #-16]
   1a554:	mov	r1, r3
   1a558:	sub	r3, fp, #12
   1a55c:	ldrd	r2, [r3]
   1a560:	strd	r2, [r1]
   1a564:	b	1a5cc <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   1a568:	mvn	r3, #0
   1a56c:	str	r3, [sp, #4]
   1a570:	mov	r3, #1
   1a574:	str	r3, [sp]
   1a578:	mov	r3, #1
   1a57c:	ldr	r2, [fp, #4]
   1a580:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a584:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a588:	bl	196f0 <flatcc_builder_create_vector@@Base>
   1a58c:	mov	r3, r0
   1a590:	str	r3, [fp, #-12]
   1a594:	ldr	r3, [fp, #-12]
   1a598:	cmp	r3, #0
   1a59c:	bne	1a5b8 <flatcc_builder_create_union_vector_direct@@Base+0xc0>
   1a5a0:	ldr	r3, [fp, #-16]
   1a5a4:	mov	r1, r3
   1a5a8:	sub	r3, fp, #12
   1a5ac:	ldrd	r2, [r3]
   1a5b0:	strd	r2, [r1]
   1a5b4:	b	1a5cc <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   1a5b8:	ldr	r3, [fp, #-16]
   1a5bc:	mov	r1, r3
   1a5c0:	sub	r3, fp, #12
   1a5c4:	ldrd	r2, [r3]
   1a5c8:	strd	r2, [r1]
   1a5cc:	ldr	r0, [fp, #-16]
   1a5d0:	sub	sp, fp, #4
   1a5d4:	ldr	fp, [sp]
   1a5d8:	add	sp, sp, #4
   1a5dc:	pop	{pc}		; (ldr pc, [sp], #4)

0001a5e0 <flatcc_builder_start_union_vector@@Base>:
   1a5e0:	str	fp, [sp, #-8]!
   1a5e4:	str	lr, [sp, #4]
   1a5e8:	add	fp, sp, #4
   1a5ec:	sub	sp, sp, #8
   1a5f0:	str	r0, [fp, #-8]
   1a5f4:	mov	r1, #4
   1a5f8:	ldr	r0, [fp, #-8]
   1a5fc:	bl	16914 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1a600:	mov	r3, r0
   1a604:	cmp	r3, #0
   1a608:	beq	1a614 <flatcc_builder_start_union_vector@@Base+0x34>
   1a60c:	mvn	r3, #0
   1a610:	b	1a654 <flatcc_builder_start_union_vector@@Base+0x74>
   1a614:	ldr	r3, [fp, #-8]
   1a618:	ldr	r3, [r3, #32]
   1a61c:	mov	r2, #8
   1a620:	str	r2, [r3, #16]
   1a624:	ldr	r3, [fp, #-8]
   1a628:	ldr	r3, [r3, #32]
   1a62c:	mov	r2, #0
   1a630:	str	r2, [r3, #20]
   1a634:	ldr	r3, [fp, #-8]
   1a638:	ldr	r3, [r3, #32]
   1a63c:	mov	r2, #7
   1a640:	strh	r2, [r3, #14]
   1a644:	mvn	r1, #3
   1a648:	ldr	r0, [fp, #-8]
   1a64c:	bl	15774 <flatcc_builder_default_alloc@@Base+0x1d4>
   1a650:	mov	r3, #0
   1a654:	mov	r0, r3
   1a658:	sub	sp, fp, #4
   1a65c:	ldr	fp, [sp]
   1a660:	add	sp, sp, #4
   1a664:	pop	{pc}		; (ldr pc, [sp], #4)

0001a668 <flatcc_builder_end_union_vector@@Base>:
   1a668:	str	fp, [sp, #-8]!
   1a66c:	str	lr, [sp, #4]
   1a670:	add	fp, sp, #4
   1a674:	sub	sp, sp, #48	; 0x30
   1a678:	str	r0, [fp, #-40]	; 0xffffffd8
   1a67c:	str	r1, [fp, #-44]	; 0xffffffd4
   1a680:	mov	r3, #0
   1a684:	str	r3, [fp, #-32]	; 0xffffffe0
   1a688:	mov	r3, #0
   1a68c:	str	r3, [fp, #-28]	; 0xffffffe4
   1a690:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a694:	ldr	r3, [r3, #32]
   1a698:	ldrh	r3, [r3, #14]
   1a69c:	cmp	r3, #7
   1a6a0:	beq	1a6c4 <flatcc_builder_end_union_vector@@Base+0x5c>
   1a6a4:	ldr	r3, [pc, #328]	; 1a7f4 <flatcc_builder_end_union_vector@@Base+0x18c>
   1a6a8:	add	r3, pc, r3
   1a6ac:	movw	r2, #1617	; 0x651
   1a6b0:	ldr	r1, [pc, #320]	; 1a7f8 <flatcc_builder_end_union_vector@@Base+0x190>
   1a6b4:	add	r1, pc, r1
   1a6b8:	ldr	r0, [pc, #316]	; 1a7fc <flatcc_builder_end_union_vector@@Base+0x194>
   1a6bc:	add	r0, pc, r0
   1a6c0:	bl	12008 <__assert_fail@plt>
   1a6c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a6c8:	bl	1a828 <flatcc_builder_union_vector_count@@Base>
   1a6cc:	str	r0, [fp, #-12]
   1a6d0:	ldr	r2, [fp, #-12]
   1a6d4:	mov	r3, r2
   1a6d8:	lsl	r3, r3, #2
   1a6dc:	add	r3, r3, r2
   1a6e0:	mov	r1, r3
   1a6e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a6e8:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   1a6ec:	str	r0, [fp, #-16]
   1a6f0:	ldr	r3, [fp, #-16]
   1a6f4:	cmp	r3, #0
   1a6f8:	bne	1a714 <flatcc_builder_end_union_vector@@Base+0xac>
   1a6fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a700:	mov	r1, r3
   1a704:	sub	r3, fp, #32
   1a708:	ldrd	r2, [r3]
   1a70c:	strd	r2, [r1]
   1a710:	b	1a7e0 <flatcc_builder_end_union_vector@@Base+0x178>
   1a714:	ldr	r3, [fp, #-12]
   1a718:	lsl	r3, r3, #2
   1a71c:	ldr	r2, [fp, #-16]
   1a720:	add	r3, r2, r3
   1a724:	str	r3, [fp, #-20]	; 0xffffffec
   1a728:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a72c:	bl	1a800 <flatcc_builder_union_vector_edit@@Base>
   1a730:	str	r0, [fp, #-24]	; 0xffffffe8
   1a734:	mov	r3, #0
   1a738:	str	r3, [fp, #-8]
   1a73c:	b	1a798 <flatcc_builder_end_union_vector@@Base+0x130>
   1a740:	ldr	r3, [fp, #-8]
   1a744:	lsl	r3, r3, #3
   1a748:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a74c:	add	r2, r2, r3
   1a750:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a754:	ldr	r3, [fp, #-8]
   1a758:	add	r3, r1, r3
   1a75c:	ldrb	r2, [r2]
   1a760:	strb	r2, [r3]
   1a764:	ldr	r3, [fp, #-8]
   1a768:	lsl	r3, r3, #3
   1a76c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a770:	add	r2, r2, r3
   1a774:	ldr	r3, [fp, #-8]
   1a778:	lsl	r3, r3, #2
   1a77c:	ldr	r1, [fp, #-16]
   1a780:	add	r3, r1, r3
   1a784:	ldr	r2, [r2, #4]
   1a788:	str	r2, [r3]
   1a78c:	ldr	r3, [fp, #-8]
   1a790:	add	r3, r3, #1
   1a794:	str	r3, [fp, #-8]
   1a798:	ldr	r2, [fp, #-8]
   1a79c:	ldr	r3, [fp, #-12]
   1a7a0:	cmp	r2, r3
   1a7a4:	bcc	1a740 <flatcc_builder_end_union_vector@@Base+0xd8>
   1a7a8:	sub	r0, fp, #32
   1a7ac:	ldr	r3, [fp, #-12]
   1a7b0:	str	r3, [sp]
   1a7b4:	ldr	r3, [fp, #-16]
   1a7b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a7bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1a7c0:	bl	1a4f8 <flatcc_builder_create_union_vector_direct@@Base>
   1a7c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a7c8:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1a7cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a7d0:	mov	r1, r3
   1a7d4:	sub	r3, fp, #32
   1a7d8:	ldrd	r2, [r3]
   1a7dc:	strd	r2, [r1]
   1a7e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a7e4:	sub	sp, fp, #4
   1a7e8:	ldr	fp, [sp]
   1a7ec:	add	sp, sp, #4
   1a7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7f4:	andeq	r3, r0, ip, lsl r0
   1a7f8:	ldrdeq	r2, [r0], -r8
   1a7fc:	andeq	r2, r0, r4, asr fp

0001a800 <flatcc_builder_union_vector_edit@@Base>:
   1a800:	push	{fp}		; (str fp, [sp, #-4]!)
   1a804:	add	fp, sp, #0
   1a808:	sub	sp, sp, #12
   1a80c:	str	r0, [fp, #-8]
   1a810:	ldr	r3, [fp, #-8]
   1a814:	ldr	r3, [r3, #16]
   1a818:	mov	r0, r3
   1a81c:	add	sp, fp, #0
   1a820:	pop	{fp}		; (ldr fp, [sp], #4)
   1a824:	bx	lr

0001a828 <flatcc_builder_union_vector_count@@Base>:
   1a828:	push	{fp}		; (str fp, [sp, #-4]!)
   1a82c:	add	fp, sp, #0
   1a830:	sub	sp, sp, #12
   1a834:	str	r0, [fp, #-8]
   1a838:	ldr	r3, [fp, #-8]
   1a83c:	ldr	r3, [r3, #32]
   1a840:	ldr	r3, [r3, #20]
   1a844:	mov	r0, r3
   1a848:	add	sp, fp, #0
   1a84c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a850:	bx	lr

0001a854 <flatcc_builder_extend_union_vector@@Base>:
   1a854:	str	fp, [sp, #-8]!
   1a858:	str	lr, [sp, #4]
   1a85c:	add	fp, sp, #4
   1a860:	sub	sp, sp, #8
   1a864:	str	r0, [fp, #-8]
   1a868:	str	r1, [fp, #-12]
   1a86c:	mvn	r2, #-536870912	; 0xe0000000
   1a870:	ldr	r1, [fp, #-12]
   1a874:	ldr	r0, [fp, #-8]
   1a878:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   1a87c:	mov	r3, r0
   1a880:	cmp	r3, #0
   1a884:	beq	1a890 <flatcc_builder_extend_union_vector@@Base+0x3c>
   1a888:	mov	r3, #0
   1a88c:	b	1a8a8 <flatcc_builder_extend_union_vector@@Base+0x54>
   1a890:	ldr	r3, [fp, #-12]
   1a894:	lsl	r3, r3, #3
   1a898:	mov	r1, r3
   1a89c:	ldr	r0, [fp, #-8]
   1a8a0:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   1a8a4:	mov	r3, r0
   1a8a8:	mov	r0, r3
   1a8ac:	sub	sp, fp, #4
   1a8b0:	ldr	fp, [sp]
   1a8b4:	add	sp, sp, #4
   1a8b8:	pop	{pc}		; (ldr pc, [sp], #4)

0001a8bc <flatcc_builder_truncate_union_vector@@Base>:
   1a8bc:	str	fp, [sp, #-8]!
   1a8c0:	str	lr, [sp, #4]
   1a8c4:	add	fp, sp, #4
   1a8c8:	sub	sp, sp, #8
   1a8cc:	str	r0, [fp, #-8]
   1a8d0:	str	r1, [fp, #-12]
   1a8d4:	ldr	r3, [fp, #-8]
   1a8d8:	ldr	r3, [r3, #32]
   1a8dc:	ldrh	r3, [r3, #14]
   1a8e0:	cmp	r3, #7
   1a8e4:	beq	1a908 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   1a8e8:	ldr	r3, [pc, #200]	; 1a9b8 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   1a8ec:	add	r3, pc, r3
   1a8f0:	movw	r2, #1665	; 0x681
   1a8f4:	ldr	r1, [pc, #192]	; 1a9bc <flatcc_builder_truncate_union_vector@@Base+0x100>
   1a8f8:	add	r1, pc, r1
   1a8fc:	ldr	r0, [pc, #188]	; 1a9c0 <flatcc_builder_truncate_union_vector@@Base+0x104>
   1a900:	add	r0, pc, r0
   1a904:	bl	12008 <__assert_fail@plt>
   1a908:	ldr	r3, [fp, #-8]
   1a90c:	ldr	r3, [r3, #32]
   1a910:	ldr	r3, [r3, #20]
   1a914:	ldr	r2, [fp, #-12]
   1a918:	cmp	r2, r3
   1a91c:	bls	1a960 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   1a920:	ldr	r3, [fp, #-8]
   1a924:	ldr	r3, [r3, #32]
   1a928:	ldr	r3, [r3, #20]
   1a92c:	ldr	r2, [fp, #-12]
   1a930:	cmp	r2, r3
   1a934:	bls	1a958 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1a938:	ldr	r3, [pc, #132]	; 1a9c4 <flatcc_builder_truncate_union_vector@@Base+0x108>
   1a93c:	add	r3, pc, r3
   1a940:	movw	r2, #1666	; 0x682
   1a944:	ldr	r1, [pc, #124]	; 1a9c8 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   1a948:	add	r1, pc, r1
   1a94c:	ldr	r0, [pc, #120]	; 1a9cc <flatcc_builder_truncate_union_vector@@Base+0x110>
   1a950:	add	r0, pc, r0
   1a954:	bl	12008 <__assert_fail@plt>
   1a958:	mvn	r3, #0
   1a95c:	b	1a9a4 <flatcc_builder_truncate_union_vector@@Base+0xe8>
   1a960:	ldr	r3, [fp, #-8]
   1a964:	ldr	r3, [r3, #32]
   1a968:	ldr	r1, [r3, #20]
   1a96c:	ldr	r3, [fp, #-8]
   1a970:	ldr	r3, [r3, #32]
   1a974:	ldr	r2, [fp, #-12]
   1a978:	sub	r2, r1, r2
   1a97c:	str	r2, [r3, #20]
   1a980:	ldr	r3, [fp, #-8]
   1a984:	ldr	r3, [r3, #32]
   1a988:	ldr	r3, [r3, #16]
   1a98c:	ldr	r2, [fp, #-12]
   1a990:	mul	r3, r2, r3
   1a994:	mov	r1, r3
   1a998:	ldr	r0, [fp, #-8]
   1a99c:	bl	15958 <flatcc_builder_default_alloc@@Base+0x3b8>
   1a9a0:	mov	r3, #0
   1a9a4:	mov	r0, r3
   1a9a8:	sub	sp, fp, #4
   1a9ac:	ldr	fp, [sp]
   1a9b0:	add	sp, sp, #4
   1a9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9b8:	strdeq	r2, [r0], -r8
   1a9bc:	muleq	r0, r4, r5
   1a9c0:	andeq	r2, r0, r0, lsl r9
   1a9c4:	andeq	r2, r0, r8, lsr #27
   1a9c8:	andeq	r2, r0, r4, asr #10
   1a9cc:	andeq	r2, r0, r0, ror r7

0001a9d0 <flatcc_builder_union_vector_push@@Base>:
   1a9d0:	str	fp, [sp, #-8]!
   1a9d4:	str	lr, [sp, #4]
   1a9d8:	add	fp, sp, #4
   1a9dc:	sub	sp, sp, #24
   1a9e0:	str	r0, [fp, #-16]
   1a9e4:	sub	r3, fp, #24
   1a9e8:	stm	r3, {r1, r2}
   1a9ec:	ldr	r3, [fp, #-16]
   1a9f0:	ldr	r3, [r3, #32]
   1a9f4:	ldrh	r3, [r3, #14]
   1a9f8:	cmp	r3, #7
   1a9fc:	beq	1aa20 <flatcc_builder_union_vector_push@@Base+0x50>
   1aa00:	ldr	r3, [pc, #160]	; 1aaa8 <flatcc_builder_union_vector_push@@Base+0xd8>
   1aa04:	add	r3, pc, r3
   1aa08:	movw	r2, #1677	; 0x68d
   1aa0c:	ldr	r1, [pc, #152]	; 1aaac <flatcc_builder_union_vector_push@@Base+0xdc>
   1aa10:	add	r1, pc, r1
   1aa14:	ldr	r0, [pc, #148]	; 1aab0 <flatcc_builder_union_vector_push@@Base+0xe0>
   1aa18:	add	r0, pc, r0
   1aa1c:	bl	12008 <__assert_fail@plt>
   1aa20:	ldr	r3, [fp, #-16]
   1aa24:	ldr	r3, [r3, #32]
   1aa28:	ldr	r3, [r3, #20]
   1aa2c:	cmn	r3, #-536870911	; 0xe0000001
   1aa30:	bne	1aa3c <flatcc_builder_union_vector_push@@Base+0x6c>
   1aa34:	mov	r3, #0
   1aa38:	b	1aa94 <flatcc_builder_union_vector_push@@Base+0xc4>
   1aa3c:	ldr	r3, [fp, #-16]
   1aa40:	ldr	r3, [r3, #32]
   1aa44:	ldr	r2, [r3, #20]
   1aa48:	ldr	r3, [fp, #-16]
   1aa4c:	ldr	r3, [r3, #32]
   1aa50:	add	r2, r2, #1
   1aa54:	str	r2, [r3, #20]
   1aa58:	mov	r1, #8
   1aa5c:	ldr	r0, [fp, #-16]
   1aa60:	bl	158b0 <flatcc_builder_default_alloc@@Base+0x310>
   1aa64:	str	r0, [fp, #-8]
   1aa68:	ldr	r3, [fp, #-8]
   1aa6c:	cmp	r3, #0
   1aa70:	bne	1aa7c <flatcc_builder_union_vector_push@@Base+0xac>
   1aa74:	mov	r3, #0
   1aa78:	b	1aa94 <flatcc_builder_union_vector_push@@Base+0xc4>
   1aa7c:	ldr	r3, [fp, #-8]
   1aa80:	mov	r1, r3
   1aa84:	sub	r3, fp, #24
   1aa88:	ldrd	r2, [r3]
   1aa8c:	strd	r2, [r1]
   1aa90:	ldr	r3, [fp, #-8]
   1aa94:	mov	r0, r3
   1aa98:	sub	sp, fp, #4
   1aa9c:	ldr	fp, [sp]
   1aaa0:	add	sp, sp, #4
   1aaa4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa8:	andeq	r2, r0, r8, lsl #26
   1aaac:	andeq	r2, r0, ip, ror r4
   1aab0:	strdeq	r2, [r0], -r8

0001aab4 <flatcc_builder_append_union_vector@@Base>:
   1aab4:	str	fp, [sp, #-8]!
   1aab8:	str	lr, [sp, #4]
   1aabc:	add	fp, sp, #4
   1aac0:	sub	sp, sp, #16
   1aac4:	str	r0, [fp, #-8]
   1aac8:	str	r1, [fp, #-12]
   1aacc:	str	r2, [fp, #-16]
   1aad0:	ldr	r3, [fp, #-8]
   1aad4:	ldr	r3, [r3, #32]
   1aad8:	ldrh	r3, [r3, #14]
   1aadc:	cmp	r3, #7
   1aae0:	beq	1ab04 <flatcc_builder_append_union_vector@@Base+0x50>
   1aae4:	ldr	r3, [pc, #108]	; 1ab58 <flatcc_builder_append_union_vector@@Base+0xa4>
   1aae8:	add	r3, pc, r3
   1aaec:	movw	r2, #1692	; 0x69c
   1aaf0:	ldr	r1, [pc, #100]	; 1ab5c <flatcc_builder_append_union_vector@@Base+0xa8>
   1aaf4:	add	r1, pc, r1
   1aaf8:	ldr	r0, [pc, #96]	; 1ab60 <flatcc_builder_append_union_vector@@Base+0xac>
   1aafc:	add	r0, pc, r0
   1ab00:	bl	12008 <__assert_fail@plt>
   1ab04:	mvn	r2, #-536870912	; 0xe0000000
   1ab08:	ldr	r1, [fp, #-16]
   1ab0c:	ldr	r0, [fp, #-8]
   1ab10:	bl	17be8 <flatcc_builder_end_struct@@Base+0xac>
   1ab14:	mov	r3, r0
   1ab18:	cmp	r3, #0
   1ab1c:	beq	1ab28 <flatcc_builder_append_union_vector@@Base+0x74>
   1ab20:	mov	r3, #0
   1ab24:	b	1ab44 <flatcc_builder_append_union_vector@@Base+0x90>
   1ab28:	ldr	r3, [fp, #-16]
   1ab2c:	lsl	r3, r3, #3
   1ab30:	mov	r2, r3
   1ab34:	ldr	r1, [fp, #-12]
   1ab38:	ldr	r0, [fp, #-8]
   1ab3c:	bl	159c0 <flatcc_builder_default_alloc@@Base+0x420>
   1ab40:	mov	r3, r0
   1ab44:	mov	r0, r3
   1ab48:	sub	sp, fp, #4
   1ab4c:	ldr	fp, [sp]
   1ab50:	add	sp, sp, #4
   1ab54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab58:	andeq	r2, r0, r8, asr #24
   1ab5c:	muleq	r0, r8, r3
   1ab60:	andeq	r2, r0, r4, lsl r7

0001ab64 <flatcc_builder_create_string@@Base>:
   1ab64:	str	r4, [sp, #-12]!
   1ab68:	str	fp, [sp, #4]
   1ab6c:	str	lr, [sp, #8]
   1ab70:	add	fp, sp, #8
   1ab74:	sub	sp, sp, #100	; 0x64
   1ab78:	str	r0, [fp, #-96]	; 0xffffffa0
   1ab7c:	str	r1, [fp, #-100]	; 0xffffff9c
   1ab80:	str	r2, [fp, #-104]	; 0xffffff98
   1ab84:	ldr	r4, [pc, #388]	; 1ad10 <flatcc_builder_create_string@@Base+0x1ac>
   1ab88:	add	r4, pc, r4
   1ab8c:	ldr	r0, [fp, #-104]	; 0xffffff98
   1ab90:	bl	15450 <main@@Base+0x248>
   1ab94:	mov	r3, r0
   1ab98:	str	r3, [fp, #-20]	; 0xffffffec
   1ab9c:	ldr	r3, [fp, #-104]	; 0xffffff98
   1aba0:	add	r3, r3, #1
   1aba4:	mov	r2, #4
   1aba8:	mov	r1, r3
   1abac:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1abb0:	bl	16bd4 <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1abb4:	mov	r3, r0
   1abb8:	add	r3, r3, #1
   1abbc:	str	r3, [fp, #-16]
   1abc0:	mov	r3, #0
   1abc4:	str	r3, [fp, #-92]	; 0xffffffa4
   1abc8:	mov	r3, #0
   1abcc:	str	r3, [fp, #-88]	; 0xffffffa8
   1abd0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1abd4:	add	r3, r3, #4
   1abd8:	str	r3, [fp, #-92]	; 0xffffffa4
   1abdc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1abe0:	add	r3, r3, #1
   1abe4:	lsl	r3, r3, #3
   1abe8:	sub	r2, fp, #12
   1abec:	add	r3, r2, r3
   1abf0:	sub	r2, fp, #20
   1abf4:	str	r2, [r3, #-80]	; 0xffffffb0
   1abf8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1abfc:	add	r3, r3, #1
   1ac00:	lsl	r3, r3, #3
   1ac04:	sub	r2, fp, #12
   1ac08:	add	r3, r2, r3
   1ac0c:	mov	r2, #4
   1ac10:	str	r2, [r3, #-76]	; 0xffffffb4
   1ac14:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1ac18:	add	r3, r3, #1
   1ac1c:	str	r3, [fp, #-88]	; 0xffffffa8
   1ac20:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ac24:	cmp	r3, #0
   1ac28:	beq	1ac80 <flatcc_builder_create_string@@Base+0x11c>
   1ac2c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1ac30:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ac34:	add	r3, r2, r3
   1ac38:	str	r3, [fp, #-92]	; 0xffffffa4
   1ac3c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1ac40:	add	r3, r3, #1
   1ac44:	lsl	r3, r3, #3
   1ac48:	sub	r2, fp, #12
   1ac4c:	add	r3, r2, r3
   1ac50:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1ac54:	str	r2, [r3, #-80]	; 0xffffffb0
   1ac58:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1ac5c:	add	r3, r3, #1
   1ac60:	lsl	r3, r3, #3
   1ac64:	sub	r2, fp, #12
   1ac68:	add	r3, r2, r3
   1ac6c:	ldr	r2, [fp, #-104]	; 0xffffff98
   1ac70:	str	r2, [r3, #-76]	; 0xffffffb4
   1ac74:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1ac78:	add	r3, r3, #1
   1ac7c:	str	r3, [fp, #-88]	; 0xffffffa8
   1ac80:	ldr	r3, [fp, #-16]
   1ac84:	cmp	r3, #0
   1ac88:	beq	1ace4 <flatcc_builder_create_string@@Base+0x180>
   1ac8c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1ac90:	ldr	r3, [fp, #-16]
   1ac94:	add	r3, r2, r3
   1ac98:	str	r3, [fp, #-92]	; 0xffffffa4
   1ac9c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1aca0:	add	r3, r3, #1
   1aca4:	lsl	r3, r3, #3
   1aca8:	sub	r2, fp, #12
   1acac:	add	r3, r2, r3
   1acb0:	ldr	r2, [pc, #92]	; 1ad14 <flatcc_builder_create_string@@Base+0x1b0>
   1acb4:	ldr	r2, [r4, r2]
   1acb8:	str	r2, [r3, #-80]	; 0xffffffb0
   1acbc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1acc0:	add	r3, r3, #1
   1acc4:	lsl	r3, r3, #3
   1acc8:	sub	r2, fp, #12
   1accc:	add	r3, r2, r3
   1acd0:	ldr	r2, [fp, #-16]
   1acd4:	str	r2, [r3, #-76]	; 0xffffffb4
   1acd8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1acdc:	add	r3, r3, #1
   1ace0:	str	r3, [fp, #-88]	; 0xffffffa8
   1ace4:	sub	r3, fp, #92	; 0x5c
   1ace8:	mov	r1, r3
   1acec:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1acf0:	bl	16c5c <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1acf4:	mov	r3, r0
   1acf8:	mov	r0, r3
   1acfc:	sub	sp, fp, #8
   1ad00:	ldr	r4, [sp]
   1ad04:	ldr	fp, [sp, #4]
   1ad08:	add	sp, sp, #8
   1ad0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad10:	andeq	r3, r1, r0, ror r4
   1ad14:	andeq	r0, r0, ip, asr #32

0001ad18 <flatcc_builder_create_string_str@@Base>:
   1ad18:	str	fp, [sp, #-8]!
   1ad1c:	str	lr, [sp, #4]
   1ad20:	add	fp, sp, #4
   1ad24:	sub	sp, sp, #8
   1ad28:	str	r0, [fp, #-8]
   1ad2c:	str	r1, [fp, #-12]
   1ad30:	ldr	r0, [fp, #-12]
   1ad34:	bl	11fc0 <strlen@plt>
   1ad38:	mov	r3, r0
   1ad3c:	mov	r2, r3
   1ad40:	ldr	r1, [fp, #-12]
   1ad44:	ldr	r0, [fp, #-8]
   1ad48:	bl	1ab64 <flatcc_builder_create_string@@Base>
   1ad4c:	mov	r3, r0
   1ad50:	mov	r0, r3
   1ad54:	sub	sp, fp, #4
   1ad58:	ldr	fp, [sp]
   1ad5c:	add	sp, sp, #4
   1ad60:	pop	{pc}		; (ldr pc, [sp], #4)

0001ad64 <flatcc_builder_create_string_strn@@Base>:
   1ad64:	str	fp, [sp, #-8]!
   1ad68:	str	lr, [sp, #4]
   1ad6c:	add	fp, sp, #4
   1ad70:	sub	sp, sp, #16
   1ad74:	str	r0, [fp, #-8]
   1ad78:	str	r1, [fp, #-12]
   1ad7c:	str	r2, [fp, #-16]
   1ad80:	ldr	r1, [fp, #-16]
   1ad84:	ldr	r0, [fp, #-12]
   1ad88:	bl	15540 <main@@Base+0x338>
   1ad8c:	mov	r3, r0
   1ad90:	mov	r2, r3
   1ad94:	ldr	r1, [fp, #-12]
   1ad98:	ldr	r0, [fp, #-8]
   1ad9c:	bl	1ab64 <flatcc_builder_create_string@@Base>
   1ada0:	mov	r3, r0
   1ada4:	mov	r0, r3
   1ada8:	sub	sp, fp, #4
   1adac:	ldr	fp, [sp]
   1adb0:	add	sp, sp, #4
   1adb4:	pop	{pc}		; (ldr pc, [sp], #4)

0001adb8 <flatcc_builder_end_string@@Base>:
   1adb8:	str	fp, [sp, #-8]!
   1adbc:	str	lr, [sp, #4]
   1adc0:	add	fp, sp, #4
   1adc4:	sub	sp, sp, #16
   1adc8:	str	r0, [fp, #-16]
   1adcc:	ldr	r3, [fp, #-16]
   1add0:	ldr	r3, [r3, #32]
   1add4:	ldrh	r3, [r3, #14]
   1add8:	cmp	r3, #6
   1addc:	beq	1ae00 <flatcc_builder_end_string@@Base+0x48>
   1ade0:	ldr	r3, [pc, #168]	; 1ae90 <flatcc_builder_end_string@@Base+0xd8>
   1ade4:	add	r3, pc, r3
   1ade8:	movw	r2, #1732	; 0x6c4
   1adec:	ldr	r1, [pc, #160]	; 1ae94 <flatcc_builder_end_string@@Base+0xdc>
   1adf0:	add	r1, pc, r1
   1adf4:	ldr	r0, [pc, #156]	; 1ae98 <flatcc_builder_end_string@@Base+0xe0>
   1adf8:	add	r0, pc, r0
   1adfc:	bl	12008 <__assert_fail@plt>
   1ae00:	ldr	r3, [fp, #-16]
   1ae04:	ldr	r3, [r3, #32]
   1ae08:	ldr	r2, [r3, #20]
   1ae0c:	ldr	r3, [fp, #-16]
   1ae10:	ldr	r3, [r3, #20]
   1ae14:	cmp	r2, r3
   1ae18:	beq	1ae3c <flatcc_builder_end_string@@Base+0x84>
   1ae1c:	ldr	r3, [pc, #120]	; 1ae9c <flatcc_builder_end_string@@Base+0xe4>
   1ae20:	add	r3, pc, r3
   1ae24:	movw	r2, #1733	; 0x6c5
   1ae28:	ldr	r1, [pc, #112]	; 1aea0 <flatcc_builder_end_string@@Base+0xe8>
   1ae2c:	add	r1, pc, r1
   1ae30:	ldr	r0, [pc, #108]	; 1aea4 <flatcc_builder_end_string@@Base+0xec>
   1ae34:	add	r0, pc, r0
   1ae38:	bl	12008 <__assert_fail@plt>
   1ae3c:	ldr	r3, [fp, #-16]
   1ae40:	ldr	r1, [r3, #16]
   1ae44:	ldr	r3, [fp, #-16]
   1ae48:	ldr	r3, [r3, #20]
   1ae4c:	mov	r2, r3
   1ae50:	ldr	r0, [fp, #-16]
   1ae54:	bl	1ab64 <flatcc_builder_create_string@@Base>
   1ae58:	str	r0, [fp, #-8]
   1ae5c:	ldr	r3, [fp, #-8]
   1ae60:	cmp	r3, #0
   1ae64:	bne	1ae70 <flatcc_builder_end_string@@Base+0xb8>
   1ae68:	mov	r3, #0
   1ae6c:	b	1ae7c <flatcc_builder_end_string@@Base+0xc4>
   1ae70:	ldr	r0, [fp, #-16]
   1ae74:	bl	16b00 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1ae78:	ldr	r3, [fp, #-8]
   1ae7c:	mov	r0, r3
   1ae80:	sub	sp, fp, #4
   1ae84:	ldr	fp, [sp]
   1ae88:	add	sp, sp, #4
   1ae8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae90:	andeq	r2, r0, r0, ror r9
   1ae94:	muleq	r0, ip, r0
   1ae98:	andeq	r2, r0, r8, ror r2
   1ae9c:	andeq	r2, r0, r4, lsr r9
   1aea0:	andeq	r2, r0, r0, rrx
   1aea4:	andeq	r2, r0, r0, lsl r4

0001aea8 <flatcc_builder_string_edit@@Base>:
   1aea8:	push	{fp}		; (str fp, [sp, #-4]!)
   1aeac:	add	fp, sp, #0
   1aeb0:	sub	sp, sp, #12
   1aeb4:	str	r0, [fp, #-8]
   1aeb8:	ldr	r3, [fp, #-8]
   1aebc:	ldr	r3, [r3, #16]
   1aec0:	mov	r0, r3
   1aec4:	add	sp, fp, #0
   1aec8:	pop	{fp}		; (ldr fp, [sp], #4)
   1aecc:	bx	lr

0001aed0 <flatcc_builder_string_len@@Base>:
   1aed0:	push	{fp}		; (str fp, [sp, #-4]!)
   1aed4:	add	fp, sp, #0
   1aed8:	sub	sp, sp, #12
   1aedc:	str	r0, [fp, #-8]
   1aee0:	ldr	r3, [fp, #-8]
   1aee4:	ldr	r3, [r3, #32]
   1aee8:	ldr	r3, [r3, #20]
   1aeec:	mov	r0, r3
   1aef0:	add	sp, fp, #0
   1aef4:	pop	{fp}		; (ldr fp, [sp], #4)
   1aef8:	bx	lr

0001aefc <flatcc_builder_table_add@@Base>:
   1aefc:	str	fp, [sp, #-8]!
   1af00:	str	lr, [sp, #4]
   1af04:	add	fp, sp, #4
   1af08:	sub	sp, sp, #16
   1af0c:	str	r0, [fp, #-8]
   1af10:	str	r1, [fp, #-12]
   1af14:	str	r2, [fp, #-16]
   1af18:	strh	r3, [fp, #-18]	; 0xffffffee
   1af1c:	ldr	r3, [fp, #-8]
   1af20:	ldr	r3, [r3, #32]
   1af24:	ldrh	r3, [r3, #14]
   1af28:	cmp	r3, #3
   1af2c:	beq	1af50 <flatcc_builder_table_add@@Base+0x54>
   1af30:	ldr	r3, [pc, #284]	; 1b054 <flatcc_builder_table_add@@Base+0x158>
   1af34:	add	r3, pc, r3
   1af38:	movw	r2, #1773	; 0x6ed
   1af3c:	ldr	r1, [pc, #276]	; 1b058 <flatcc_builder_table_add@@Base+0x15c>
   1af40:	add	r1, pc, r1
   1af44:	ldr	r0, [pc, #272]	; 1b05c <flatcc_builder_table_add@@Base+0x160>
   1af48:	add	r0, pc, r0
   1af4c:	bl	12008 <__assert_fail@plt>
   1af50:	ldr	r3, [fp, #-12]
   1af54:	cmp	r3, #0
   1af58:	blt	1af6c <flatcc_builder_table_add@@Base+0x70>
   1af5c:	ldr	r3, [fp, #-12]
   1af60:	movw	r2, #32764	; 0x7ffc
   1af64:	cmp	r3, r2
   1af68:	ble	1af8c <flatcc_builder_table_add@@Base+0x90>
   1af6c:	ldr	r3, [pc, #236]	; 1b060 <flatcc_builder_table_add@@Base+0x164>
   1af70:	add	r3, pc, r3
   1af74:	movw	r2, #1774	; 0x6ee
   1af78:	ldr	r1, [pc, #228]	; 1b064 <flatcc_builder_table_add@@Base+0x168>
   1af7c:	add	r1, pc, r1
   1af80:	ldr	r0, [pc, #224]	; 1b068 <flatcc_builder_table_add@@Base+0x16c>
   1af84:	add	r0, pc, r0
   1af88:	bl	12008 <__assert_fail@plt>
   1af8c:	ldr	r3, [fp, #-8]
   1af90:	ldrh	r3, [r3, #130]	; 0x82
   1af94:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1af98:	cmp	r2, r3
   1af9c:	bls	1afac <flatcc_builder_table_add@@Base+0xb0>
   1afa0:	ldr	r3, [fp, #-8]
   1afa4:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1afa8:	strh	r2, [r3, #130]	; 0x82
   1afac:	ldr	r3, [fp, #-8]
   1afb0:	ldr	r2, [r3, #4]
   1afb4:	ldr	r3, [fp, #-12]
   1afb8:	lsl	r3, r3, #1
   1afbc:	add	r3, r2, r3
   1afc0:	ldrh	r3, [r3]
   1afc4:	cmp	r3, #0
   1afc8:	beq	1afec <flatcc_builder_table_add@@Base+0xf0>
   1afcc:	ldr	r3, [pc, #152]	; 1b06c <flatcc_builder_table_add@@Base+0x170>
   1afd0:	add	r3, pc, r3
   1afd4:	movw	r2, #1784	; 0x6f8
   1afd8:	ldr	r1, [pc, #144]	; 1b070 <flatcc_builder_table_add@@Base+0x174>
   1afdc:	add	r1, pc, r1
   1afe0:	ldr	r0, [pc, #140]	; 1b074 <flatcc_builder_table_add@@Base+0x178>
   1afe4:	add	r0, pc, r0
   1afe8:	bl	12008 <__assert_fail@plt>
   1afec:	ldr	r3, [fp, #-8]
   1aff0:	ldr	r2, [r3, #12]
   1aff4:	ldr	r3, [fp, #-12]
   1aff8:	eor	r2, r2, r3
   1affc:	movw	r3, #31153	; 0x79b1
   1b000:	movt	r3, #40503	; 0x9e37
   1b004:	mul	r2, r3, r2
   1b008:	ldr	r3, [fp, #-16]
   1b00c:	eor	r2, r2, r3
   1b010:	movw	r3, #31153	; 0x79b1
   1b014:	movt	r3, #40503	; 0x9e37
   1b018:	mul	r2, r3, r2
   1b01c:	ldr	r3, [fp, #-8]
   1b020:	str	r2, [r3, #12]
   1b024:	ldr	r3, [fp, #-12]
   1b028:	uxth	r3, r3
   1b02c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1b030:	ldr	r1, [fp, #-16]
   1b034:	ldr	r0, [fp, #-8]
   1b038:	bl	15a28 <flatcc_builder_default_alloc@@Base+0x488>
   1b03c:	mov	r3, r0
   1b040:	mov	r0, r3
   1b044:	sub	sp, fp, #4
   1b048:	ldr	fp, [sp]
   1b04c:	add	sp, sp, #4
   1b050:	pop	{pc}		; (ldr pc, [sp], #4)
   1b054:	andeq	r2, r0, ip, lsr r8
   1b058:	andeq	r1, r0, ip, asr #30
   1b05c:	andeq	r2, r0, r4, lsl #4
   1b060:	andeq	r2, r0, r0, lsl #16
   1b064:	andeq	r1, r0, r0, lsl pc
   1b068:	andeq	r2, r0, r4, ror #5
   1b06c:	andeq	r2, r0, r0, lsr #15
   1b070:			; <UNDEFINED> instruction: 0x00001eb0
   1b074:	andeq	r1, r0, r8, lsl #30

0001b078 <flatcc_builder_table_edit@@Base>:
   1b078:	str	fp, [sp, #-8]!
   1b07c:	str	lr, [sp, #4]
   1b080:	add	fp, sp, #4
   1b084:	sub	sp, sp, #8
   1b088:	str	r0, [fp, #-8]
   1b08c:	str	r1, [fp, #-12]
   1b090:	ldr	r3, [fp, #-8]
   1b094:	ldr	r3, [r3, #32]
   1b098:	ldrh	r3, [r3, #14]
   1b09c:	cmp	r3, #3
   1b0a0:	beq	1b0c4 <flatcc_builder_table_edit@@Base+0x4c>
   1b0a4:	ldr	r3, [pc, #72]	; 1b0f4 <flatcc_builder_table_edit@@Base+0x7c>
   1b0a8:	add	r3, pc, r3
   1b0ac:	movw	r2, #1794	; 0x702
   1b0b0:	ldr	r1, [pc, #64]	; 1b0f8 <flatcc_builder_table_edit@@Base+0x80>
   1b0b4:	add	r1, pc, r1
   1b0b8:	ldr	r0, [pc, #60]	; 1b0fc <flatcc_builder_table_edit@@Base+0x84>
   1b0bc:	add	r0, pc, r0
   1b0c0:	bl	12008 <__assert_fail@plt>
   1b0c4:	ldr	r3, [fp, #-8]
   1b0c8:	ldr	r2, [r3, #16]
   1b0cc:	ldr	r3, [fp, #-8]
   1b0d0:	ldr	r1, [r3, #20]
   1b0d4:	ldr	r3, [fp, #-12]
   1b0d8:	sub	r3, r1, r3
   1b0dc:	add	r3, r2, r3
   1b0e0:	mov	r0, r3
   1b0e4:	sub	sp, fp, #4
   1b0e8:	ldr	fp, [sp]
   1b0ec:	add	sp, sp, #4
   1b0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0f4:	andeq	r2, r0, r4, ror #13
   1b0f8:	ldrdeq	r1, [r0], -r8
   1b0fc:	muleq	r0, r0, r0

0001b100 <flatcc_builder_table_add_copy@@Base>:
   1b100:	str	fp, [sp, #-8]!
   1b104:	str	lr, [sp, #4]
   1b108:	add	fp, sp, #4
   1b10c:	sub	sp, sp, #24
   1b110:	str	r0, [fp, #-16]
   1b114:	str	r1, [fp, #-20]	; 0xffffffec
   1b118:	str	r2, [fp, #-24]	; 0xffffffe8
   1b11c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b120:	ldrh	r3, [fp, #4]
   1b124:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b128:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b12c:	ldr	r0, [fp, #-16]
   1b130:	bl	1aefc <flatcc_builder_table_add@@Base>
   1b134:	str	r0, [fp, #-8]
   1b138:	ldr	r3, [fp, #-8]
   1b13c:	cmp	r3, #0
   1b140:	beq	1b154 <flatcc_builder_table_add_copy@@Base+0x54>
   1b144:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b148:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b14c:	ldr	r0, [fp, #-8]
   1b150:	bl	11f6c <memcpy@plt>
   1b154:	ldr	r3, [fp, #-8]
   1b158:	mov	r0, r3
   1b15c:	sub	sp, fp, #4
   1b160:	ldr	fp, [sp]
   1b164:	add	sp, sp, #4
   1b168:	pop	{pc}		; (ldr pc, [sp], #4)

0001b16c <flatcc_builder_table_add_offset@@Base>:
   1b16c:	str	fp, [sp, #-8]!
   1b170:	str	lr, [sp, #4]
   1b174:	add	fp, sp, #4
   1b178:	sub	sp, sp, #8
   1b17c:	str	r0, [fp, #-8]
   1b180:	str	r1, [fp, #-12]
   1b184:	ldr	r3, [fp, #-8]
   1b188:	ldr	r3, [r3, #32]
   1b18c:	ldrh	r3, [r3, #14]
   1b190:	cmp	r3, #3
   1b194:	beq	1b1b8 <flatcc_builder_table_add_offset@@Base+0x4c>
   1b198:	ldr	r3, [pc, #244]	; 1b294 <flatcc_builder_table_add_offset@@Base+0x128>
   1b19c:	add	r3, pc, r3
   1b1a0:	movw	r2, #1811	; 0x713
   1b1a4:	ldr	r1, [pc, #236]	; 1b298 <flatcc_builder_table_add_offset@@Base+0x12c>
   1b1a8:	add	r1, pc, r1
   1b1ac:	ldr	r0, [pc, #232]	; 1b29c <flatcc_builder_table_add_offset@@Base+0x130>
   1b1b0:	add	r0, pc, r0
   1b1b4:	bl	12008 <__assert_fail@plt>
   1b1b8:	ldr	r3, [fp, #-12]
   1b1bc:	cmp	r3, #0
   1b1c0:	blt	1b1d4 <flatcc_builder_table_add_offset@@Base+0x68>
   1b1c4:	ldr	r3, [fp, #-12]
   1b1c8:	movw	r2, #32764	; 0x7ffc
   1b1cc:	cmp	r3, r2
   1b1d0:	ble	1b1f4 <flatcc_builder_table_add_offset@@Base+0x88>
   1b1d4:	ldr	r3, [pc, #196]	; 1b2a0 <flatcc_builder_table_add_offset@@Base+0x134>
   1b1d8:	add	r3, pc, r3
   1b1dc:	movw	r2, #1812	; 0x714
   1b1e0:	ldr	r1, [pc, #188]	; 1b2a4 <flatcc_builder_table_add_offset@@Base+0x138>
   1b1e4:	add	r1, pc, r1
   1b1e8:	ldr	r0, [pc, #184]	; 1b2a8 <flatcc_builder_table_add_offset@@Base+0x13c>
   1b1ec:	add	r0, pc, r0
   1b1f0:	bl	12008 <__assert_fail@plt>
   1b1f4:	ldr	r3, [fp, #-8]
   1b1f8:	ldr	r2, [r3, #4]
   1b1fc:	ldr	r3, [fp, #-12]
   1b200:	lsl	r3, r3, #1
   1b204:	add	r3, r2, r3
   1b208:	ldrh	r3, [r3]
   1b20c:	cmp	r3, #0
   1b210:	beq	1b234 <flatcc_builder_table_add_offset@@Base+0xc8>
   1b214:	ldr	r3, [pc, #144]	; 1b2ac <flatcc_builder_table_add_offset@@Base+0x140>
   1b218:	add	r3, pc, r3
   1b21c:	movw	r2, #1819	; 0x71b
   1b220:	ldr	r1, [pc, #136]	; 1b2b0 <flatcc_builder_table_add_offset@@Base+0x144>
   1b224:	add	r1, pc, r1
   1b228:	ldr	r0, [pc, #132]	; 1b2b4 <flatcc_builder_table_add_offset@@Base+0x148>
   1b22c:	add	r0, pc, r0
   1b230:	bl	12008 <__assert_fail@plt>
   1b234:	ldr	r3, [fp, #-8]
   1b238:	ldr	r2, [r3, #12]
   1b23c:	ldr	r3, [fp, #-12]
   1b240:	eor	r2, r2, r3
   1b244:	movw	r3, #31153	; 0x79b1
   1b248:	movt	r3, #40503	; 0x9e37
   1b24c:	mul	r3, r3, r2
   1b250:	eor	r2, r3, #4
   1b254:	movw	r3, #31153	; 0x79b1
   1b258:	movt	r3, #40503	; 0x9e37
   1b25c:	mul	r2, r3, r2
   1b260:	ldr	r3, [fp, #-8]
   1b264:	str	r2, [r3, #12]
   1b268:	ldr	r3, [fp, #-12]
   1b26c:	uxth	r3, r3
   1b270:	mov	r1, r3
   1b274:	ldr	r0, [fp, #-8]
   1b278:	bl	15b4c <flatcc_builder_default_alloc@@Base+0x5ac>
   1b27c:	mov	r3, r0
   1b280:	mov	r0, r3
   1b284:	sub	sp, fp, #4
   1b288:	ldr	fp, [sp]
   1b28c:	add	sp, sp, #4
   1b290:	pop	{pc}		; (ldr pc, [sp], #4)
   1b294:	andeq	r2, r0, ip, lsl #12
   1b298:	andeq	r1, r0, r4, ror #25
   1b29c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1b2a0:	ldrdeq	r2, [r0], -r0
   1b2a4:	andeq	r1, r0, r8, lsr #25
   1b2a8:	andeq	r2, r0, ip, ror r0
   1b2ac:	muleq	r0, r0, r5
   1b2b0:	andeq	r1, r0, r8, ror #24
   1b2b4:	andeq	r1, r0, r0, asr #25

0001b2b8 <flatcc_builder_push_buffer_alignment@@Base>:
   1b2b8:	push	{fp}		; (str fp, [sp, #-4]!)
   1b2bc:	add	fp, sp, #0
   1b2c0:	sub	sp, sp, #20
   1b2c4:	str	r0, [fp, #-16]
   1b2c8:	ldr	r3, [fp, #-16]
   1b2cc:	ldrh	r3, [r3, #128]	; 0x80
   1b2d0:	strh	r3, [fp, #-6]
   1b2d4:	ldr	r3, [fp, #-16]
   1b2d8:	mov	r2, #4
   1b2dc:	strh	r2, [r3, #128]	; 0x80
   1b2e0:	ldrh	r3, [fp, #-6]
   1b2e4:	mov	r0, r3
   1b2e8:	add	sp, fp, #0
   1b2ec:	pop	{fp}		; (ldr fp, [sp], #4)
   1b2f0:	bx	lr

0001b2f4 <flatcc_builder_pop_buffer_alignment@@Base>:
   1b2f4:	str	fp, [sp, #-8]!
   1b2f8:	str	lr, [sp, #4]
   1b2fc:	add	fp, sp, #4
   1b300:	sub	sp, sp, #8
   1b304:	str	r0, [fp, #-8]
   1b308:	mov	r3, r1
   1b30c:	strh	r3, [fp, #-10]
   1b310:	ldrh	r3, [fp, #-10]
   1b314:	mov	r1, r3
   1b318:	ldr	r0, [fp, #-8]
   1b31c:	bl	16558 <flatcc_builder_clear@@Base+0xc4>
   1b320:	nop	{0}
   1b324:	sub	sp, fp, #4
   1b328:	ldr	fp, [sp]
   1b32c:	add	sp, sp, #4
   1b330:	pop	{pc}		; (ldr pc, [sp], #4)

0001b334 <flatcc_builder_get_buffer_alignment@@Base>:
   1b334:	push	{fp}		; (str fp, [sp, #-4]!)
   1b338:	add	fp, sp, #0
   1b33c:	sub	sp, sp, #12
   1b340:	str	r0, [fp, #-8]
   1b344:	ldr	r3, [fp, #-8]
   1b348:	ldrh	r3, [r3, #128]	; 0x80
   1b34c:	mov	r0, r3
   1b350:	add	sp, fp, #0
   1b354:	pop	{fp}		; (ldr fp, [sp], #4)
   1b358:	bx	lr

0001b35c <flatcc_builder_set_vtable_clustering@@Base>:
   1b35c:	push	{fp}		; (str fp, [sp, #-4]!)
   1b360:	add	fp, sp, #0
   1b364:	sub	sp, sp, #12
   1b368:	str	r0, [fp, #-8]
   1b36c:	str	r1, [fp, #-12]
   1b370:	ldr	r3, [fp, #-12]
   1b374:	cmp	r3, #0
   1b378:	moveq	r3, #1
   1b37c:	movne	r3, #0
   1b380:	uxtb	r3, r3
   1b384:	mov	r2, r3
   1b388:	ldr	r3, [fp, #-8]
   1b38c:	str	r2, [r3, #180]	; 0xb4
   1b390:	nop	{0}
   1b394:	add	sp, fp, #0
   1b398:	pop	{fp}		; (ldr fp, [sp], #4)
   1b39c:	bx	lr

0001b3a0 <flatcc_builder_set_block_align@@Base>:
   1b3a0:	push	{fp}		; (str fp, [sp, #-4]!)
   1b3a4:	add	fp, sp, #0
   1b3a8:	sub	sp, sp, #12
   1b3ac:	str	r0, [fp, #-8]
   1b3b0:	mov	r3, r1
   1b3b4:	strh	r3, [fp, #-10]
   1b3b8:	ldr	r3, [fp, #-8]
   1b3bc:	ldrh	r2, [fp, #-10]
   1b3c0:	strh	r2, [r3, #132]	; 0x84
   1b3c4:	nop	{0}
   1b3c8:	add	sp, fp, #0
   1b3cc:	pop	{fp}		; (ldr fp, [sp], #4)
   1b3d0:	bx	lr

0001b3d4 <flatcc_builder_get_level@@Base>:
   1b3d4:	push	{fp}		; (str fp, [sp, #-4]!)
   1b3d8:	add	fp, sp, #0
   1b3dc:	sub	sp, sp, #12
   1b3e0:	str	r0, [fp, #-8]
   1b3e4:	ldr	r3, [fp, #-8]
   1b3e8:	ldr	r3, [r3, #156]	; 0x9c
   1b3ec:	mov	r0, r3
   1b3f0:	add	sp, fp, #0
   1b3f4:	pop	{fp}		; (ldr fp, [sp], #4)
   1b3f8:	bx	lr

0001b3fc <flatcc_builder_set_max_level@@Base>:
   1b3fc:	push	{fp}		; (str fp, [sp, #-4]!)
   1b400:	add	fp, sp, #0
   1b404:	sub	sp, sp, #12
   1b408:	str	r0, [fp, #-8]
   1b40c:	str	r1, [fp, #-12]
   1b410:	ldr	r3, [fp, #-8]
   1b414:	ldr	r2, [fp, #-12]
   1b418:	str	r2, [r3, #176]	; 0xb0
   1b41c:	ldr	r3, [fp, #-8]
   1b420:	ldr	r2, [r3, #160]	; 0xa0
   1b424:	ldr	r3, [fp, #-8]
   1b428:	ldr	r3, [r3, #176]	; 0xb0
   1b42c:	cmp	r2, r3
   1b430:	bge	1b444 <flatcc_builder_set_max_level@@Base+0x48>
   1b434:	ldr	r3, [fp, #-8]
   1b438:	ldr	r2, [r3, #176]	; 0xb0
   1b43c:	ldr	r3, [fp, #-8]
   1b440:	str	r2, [r3, #160]	; 0xa0
   1b444:	nop	{0}
   1b448:	add	sp, fp, #0
   1b44c:	pop	{fp}		; (ldr fp, [sp], #4)
   1b450:	bx	lr

0001b454 <flatcc_builder_get_buffer_size@@Base>:
   1b454:	push	{fp}		; (str fp, [sp, #-4]!)
   1b458:	add	fp, sp, #0
   1b45c:	sub	sp, sp, #12
   1b460:	str	r0, [fp, #-8]
   1b464:	ldr	r3, [fp, #-8]
   1b468:	ldr	r2, [r3, #140]	; 0x8c
   1b46c:	ldr	r3, [fp, #-8]
   1b470:	ldr	r3, [r3, #136]	; 0x88
   1b474:	sub	r3, r2, r3
   1b478:	mov	r0, r3
   1b47c:	add	sp, fp, #0
   1b480:	pop	{fp}		; (ldr fp, [sp], #4)
   1b484:	bx	lr

0001b488 <flatcc_builder_get_buffer_start@@Base>:
   1b488:	push	{fp}		; (str fp, [sp, #-4]!)
   1b48c:	add	fp, sp, #0
   1b490:	sub	sp, sp, #12
   1b494:	str	r0, [fp, #-8]
   1b498:	ldr	r3, [fp, #-8]
   1b49c:	ldr	r3, [r3, #136]	; 0x88
   1b4a0:	mov	r0, r3
   1b4a4:	add	sp, fp, #0
   1b4a8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b4ac:	bx	lr

0001b4b0 <flatcc_builder_get_buffer_end@@Base>:
   1b4b0:	push	{fp}		; (str fp, [sp, #-4]!)
   1b4b4:	add	fp, sp, #0
   1b4b8:	sub	sp, sp, #12
   1b4bc:	str	r0, [fp, #-8]
   1b4c0:	ldr	r3, [fp, #-8]
   1b4c4:	ldr	r3, [r3, #140]	; 0x8c
   1b4c8:	mov	r0, r3
   1b4cc:	add	sp, fp, #0
   1b4d0:	pop	{fp}		; (ldr fp, [sp], #4)
   1b4d4:	bx	lr

0001b4d8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   1b4d8:	push	{fp}		; (str fp, [sp, #-4]!)
   1b4dc:	add	fp, sp, #0
   1b4e0:	sub	sp, sp, #12
   1b4e4:	str	r0, [fp, #-8]
   1b4e8:	str	r1, [fp, #-12]
   1b4ec:	ldr	r3, [fp, #-8]
   1b4f0:	ldr	r2, [fp, #-12]
   1b4f4:	str	r2, [r3, #172]	; 0xac
   1b4f8:	nop	{0}
   1b4fc:	add	sp, fp, #0
   1b500:	pop	{fp}		; (ldr fp, [sp], #4)
   1b504:	bx	lr

0001b508 <flatcc_builder_set_identifier@@Base>:
   1b508:	push	{fp}		; (str fp, [sp, #-4]!)
   1b50c:	add	fp, sp, #0
   1b510:	sub	sp, sp, #12
   1b514:	str	r0, [fp, #-8]
   1b518:	str	r1, [fp, #-12]
   1b51c:	ldr	r1, [pc, #60]	; 1b560 <flatcc_builder_set_identifier@@Base+0x58>
   1b520:	add	r1, pc, r1
   1b524:	ldr	r3, [fp, #-8]
   1b528:	add	r2, r3, #168	; 0xa8
   1b52c:	ldr	r3, [fp, #-12]
   1b530:	cmp	r3, #0
   1b534:	beq	1b540 <flatcc_builder_set_identifier@@Base+0x38>
   1b538:	ldr	r3, [fp, #-12]
   1b53c:	b	1b548 <flatcc_builder_set_identifier@@Base+0x40>
   1b540:	ldr	r3, [pc, #28]	; 1b564 <flatcc_builder_set_identifier@@Base+0x5c>
   1b544:	ldr	r3, [r1, r3]
   1b548:	ldr	r3, [r3]
   1b54c:	str	r3, [r2]
   1b550:	nop	{0}
   1b554:	add	sp, fp, #0
   1b558:	pop	{fp}		; (ldr fp, [sp], #4)
   1b55c:	bx	lr
   1b560:	ldrdeq	r2, [r1], -r8
   1b564:	andeq	r0, r0, ip, asr #32

0001b568 <flatcc_builder_get_type@@Base>:
   1b568:	push	{fp}		; (str fp, [sp, #-4]!)
   1b56c:	add	fp, sp, #0
   1b570:	sub	sp, sp, #12
   1b574:	str	r0, [fp, #-8]
   1b578:	ldr	r3, [fp, #-8]
   1b57c:	ldr	r3, [r3, #32]
   1b580:	cmp	r3, #0
   1b584:	beq	1b598 <flatcc_builder_get_type@@Base+0x30>
   1b588:	ldr	r3, [fp, #-8]
   1b58c:	ldr	r3, [r3, #32]
   1b590:	ldrh	r3, [r3, #14]
   1b594:	b	1b59c <flatcc_builder_get_type@@Base+0x34>
   1b598:	mov	r3, #0
   1b59c:	mov	r0, r3
   1b5a0:	add	sp, fp, #0
   1b5a4:	pop	{fp}		; (ldr fp, [sp], #4)
   1b5a8:	bx	lr

0001b5ac <flatcc_builder_get_type_at@@Base>:
   1b5ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1b5b0:	add	fp, sp, #0
   1b5b4:	sub	sp, sp, #12
   1b5b8:	str	r0, [fp, #-8]
   1b5bc:	str	r1, [fp, #-12]
   1b5c0:	ldr	r3, [fp, #-12]
   1b5c4:	cmp	r3, #0
   1b5c8:	ble	1b5e0 <flatcc_builder_get_type_at@@Base+0x34>
   1b5cc:	ldr	r3, [fp, #-8]
   1b5d0:	ldr	r3, [r3, #156]	; 0x9c
   1b5d4:	ldr	r2, [fp, #-12]
   1b5d8:	cmp	r2, r3
   1b5dc:	ble	1b5e8 <flatcc_builder_get_type_at@@Base+0x3c>
   1b5e0:	mov	r3, #0
   1b5e4:	b	1b61c <flatcc_builder_get_type_at@@Base+0x70>
   1b5e8:	ldr	r3, [fp, #-8]
   1b5ec:	ldr	r2, [r3, #32]
   1b5f0:	ldr	r3, [fp, #-8]
   1b5f4:	ldr	r3, [r3, #156]	; 0x9c
   1b5f8:	ldr	r1, [fp, #-12]
   1b5fc:	sub	r3, r1, r3
   1b600:	mov	r1, r3
   1b604:	mov	r3, r1
   1b608:	lsl	r3, r3, #3
   1b60c:	add	r3, r3, r1
   1b610:	lsl	r3, r3, #2
   1b614:	add	r3, r2, r3
   1b618:	ldrh	r3, [r3, #14]
   1b61c:	mov	r0, r3
   1b620:	add	sp, fp, #0
   1b624:	pop	{fp}		; (ldr fp, [sp], #4)
   1b628:	bx	lr

0001b62c <flatcc_builder_get_direct_buffer@@Base>:
   1b62c:	str	fp, [sp, #-8]!
   1b630:	str	lr, [sp, #4]
   1b634:	add	fp, sp, #4
   1b638:	sub	sp, sp, #8
   1b63c:	str	r0, [fp, #-8]
   1b640:	str	r1, [fp, #-12]
   1b644:	ldr	r3, [fp, #-8]
   1b648:	ldr	r3, [r3, #184]	; 0xb8
   1b64c:	cmp	r3, #0
   1b650:	beq	1b670 <flatcc_builder_get_direct_buffer@@Base+0x44>
   1b654:	ldr	r3, [fp, #-8]
   1b658:	add	r3, r3, #188	; 0xbc
   1b65c:	ldr	r1, [fp, #-12]
   1b660:	mov	r0, r3
   1b664:	bl	154c0 <main@@Base+0x2b8>
   1b668:	mov	r3, r0
   1b66c:	b	1b68c <flatcc_builder_get_direct_buffer@@Base+0x60>
   1b670:	ldr	r3, [fp, #-12]
   1b674:	cmp	r3, #0
   1b678:	beq	1b688 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   1b67c:	ldr	r3, [fp, #-12]
   1b680:	mov	r2, #0
   1b684:	str	r2, [r3]
   1b688:	mov	r3, #0
   1b68c:	mov	r0, r3
   1b690:	sub	sp, fp, #4
   1b694:	ldr	fp, [sp]
   1b698:	add	sp, sp, #4
   1b69c:	pop	{pc}		; (ldr pc, [sp], #4)

0001b6a0 <flatcc_builder_copy_buffer@@Base>:
   1b6a0:	str	fp, [sp, #-8]!
   1b6a4:	str	lr, [sp, #4]
   1b6a8:	add	fp, sp, #4
   1b6ac:	sub	sp, sp, #16
   1b6b0:	str	r0, [fp, #-8]
   1b6b4:	str	r1, [fp, #-12]
   1b6b8:	str	r2, [fp, #-16]
   1b6bc:	ldr	r3, [fp, #-8]
   1b6c0:	ldr	r3, [r3, #184]	; 0xb8
   1b6c4:	cmp	r3, #0
   1b6c8:	bne	1b6d4 <flatcc_builder_copy_buffer@@Base+0x34>
   1b6cc:	mov	r3, #0
   1b6d0:	b	1b720 <flatcc_builder_copy_buffer@@Base+0x80>
   1b6d4:	ldr	r3, [fp, #-8]
   1b6d8:	add	r3, r3, #188	; 0xbc
   1b6dc:	ldr	r2, [fp, #-16]
   1b6e0:	ldr	r1, [fp, #-12]
   1b6e4:	mov	r0, r3
   1b6e8:	bl	1c4f4 <flatcc_emitter_copy_buffer@@Base>
   1b6ec:	str	r0, [fp, #-12]
   1b6f0:	ldr	r3, [fp, #-12]
   1b6f4:	cmp	r3, #0
   1b6f8:	bne	1b71c <flatcc_builder_copy_buffer@@Base+0x7c>
   1b6fc:	ldr	r3, [pc, #48]	; 1b734 <flatcc_builder_copy_buffer@@Base+0x94>
   1b700:	add	r3, pc, r3
   1b704:	movw	r2, #1926	; 0x786
   1b708:	ldr	r1, [pc, #40]	; 1b738 <flatcc_builder_copy_buffer@@Base+0x98>
   1b70c:	add	r1, pc, r1
   1b710:	ldr	r0, [pc, #36]	; 1b73c <flatcc_builder_copy_buffer@@Base+0x9c>
   1b714:	add	r0, pc, r0
   1b718:	bl	12008 <__assert_fail@plt>
   1b71c:	ldr	r3, [fp, #-12]
   1b720:	mov	r0, r3
   1b724:	sub	sp, fp, #4
   1b728:	ldr	fp, [sp]
   1b72c:	add	sp, sp, #4
   1b730:	pop	{pc}		; (ldr pc, [sp], #4)
   1b734:	andeq	r2, r0, r8, asr #1
   1b738:	andeq	r1, r0, r0, lsl #15
   1b73c:	muleq	r0, r8, fp

0001b740 <flatcc_builder_finalize_buffer@@Base>:
   1b740:	str	fp, [sp, #-8]!
   1b744:	str	lr, [sp, #4]
   1b748:	add	fp, sp, #4
   1b74c:	sub	sp, sp, #16
   1b750:	str	r0, [fp, #-16]
   1b754:	str	r1, [fp, #-20]	; 0xffffffec
   1b758:	ldr	r0, [fp, #-16]
   1b75c:	bl	1b454 <flatcc_builder_get_buffer_size@@Base>
   1b760:	str	r0, [fp, #-8]
   1b764:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b768:	cmp	r3, #0
   1b76c:	beq	1b77c <flatcc_builder_finalize_buffer@@Base+0x3c>
   1b770:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b774:	ldr	r2, [fp, #-8]
   1b778:	str	r2, [r3]
   1b77c:	ldr	r0, [fp, #-8]
   1b780:	bl	11f9c <malloc@plt>
   1b784:	mov	r3, r0
   1b788:	str	r3, [fp, #-12]
   1b78c:	ldr	r3, [fp, #-12]
   1b790:	cmp	r3, #0
   1b794:	bne	1b7b8 <flatcc_builder_finalize_buffer@@Base+0x78>
   1b798:	ldr	r3, [pc, #148]	; 1b834 <flatcc_builder_finalize_buffer@@Base+0xf4>
   1b79c:	add	r3, pc, r3
   1b7a0:	movw	r2, #1944	; 0x798
   1b7a4:	ldr	r1, [pc, #140]	; 1b838 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1b7a8:	add	r1, pc, r1
   1b7ac:	ldr	r0, [pc, #136]	; 1b83c <flatcc_builder_finalize_buffer@@Base+0xfc>
   1b7b0:	add	r0, pc, r0
   1b7b4:	bl	12008 <__assert_fail@plt>
   1b7b8:	ldr	r2, [fp, #-8]
   1b7bc:	ldr	r1, [fp, #-12]
   1b7c0:	ldr	r0, [fp, #-16]
   1b7c4:	bl	1b6a0 <flatcc_builder_copy_buffer@@Base>
   1b7c8:	mov	r3, r0
   1b7cc:	cmp	r3, #0
   1b7d0:	bne	1b7f4 <flatcc_builder_finalize_buffer@@Base+0xb4>
   1b7d4:	ldr	r3, [pc, #100]	; 1b840 <flatcc_builder_finalize_buffer@@Base+0x100>
   1b7d8:	add	r3, pc, r3
   1b7dc:	movw	r2, #1948	; 0x79c
   1b7e0:	ldr	r1, [pc, #92]	; 1b844 <flatcc_builder_finalize_buffer@@Base+0x104>
   1b7e4:	add	r1, pc, r1
   1b7e8:	ldr	r0, [pc, #88]	; 1b848 <flatcc_builder_finalize_buffer@@Base+0x108>
   1b7ec:	add	r0, pc, r0
   1b7f0:	bl	12008 <__assert_fail@plt>
   1b7f4:	nop	{0}
   1b7f8:	ldr	r3, [fp, #-12]
   1b7fc:	cmp	r3, #0
   1b800:	bne	1b81c <flatcc_builder_finalize_buffer@@Base+0xdc>
   1b804:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b808:	cmp	r3, #0
   1b80c:	beq	1b81c <flatcc_builder_finalize_buffer@@Base+0xdc>
   1b810:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b814:	mov	r2, #0
   1b818:	str	r2, [r3]
   1b81c:	ldr	r3, [fp, #-12]
   1b820:	mov	r0, r3
   1b824:	sub	sp, fp, #4
   1b828:	ldr	fp, [sp]
   1b82c:	add	sp, sp, #4
   1b830:	pop	{pc}		; (ldr pc, [sp], #4)
   1b834:	andeq	r2, r0, r8, asr #32
   1b838:	andeq	r1, r0, r4, ror #13
   1b83c:	andeq	r1, r0, ip, lsr r7
   1b840:	andeq	r2, r0, ip
   1b844:	andeq	r1, r0, r8, lsr #13
   1b848:	andeq	r1, r0, r0, lsl #14

0001b84c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1b84c:	str	fp, [sp, #-8]!
   1b850:	str	lr, [sp, #4]
   1b854:	add	fp, sp, #4
   1b858:	sub	sp, sp, #24
   1b85c:	str	r0, [fp, #-24]	; 0xffffffe8
   1b860:	str	r1, [fp, #-28]	; 0xffffffe4
   1b864:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b868:	bl	1b454 <flatcc_builder_get_buffer_size@@Base>
   1b86c:	str	r0, [fp, #-12]
   1b870:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b874:	cmp	r3, #0
   1b878:	beq	1b888 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1b87c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b880:	ldr	r2, [fp, #-12]
   1b884:	str	r2, [r3]
   1b888:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b88c:	bl	1b334 <flatcc_builder_get_buffer_alignment@@Base>
   1b890:	mov	r3, r0
   1b894:	str	r3, [fp, #-16]
   1b898:	ldr	r2, [fp, #-12]
   1b89c:	ldr	r3, [fp, #-16]
   1b8a0:	add	r3, r2, r3
   1b8a4:	sub	r2, r3, #1
   1b8a8:	ldr	r3, [fp, #-16]
   1b8ac:	rsb	r3, r3, #0
   1b8b0:	and	r3, r3, r2
   1b8b4:	str	r3, [fp, #-12]
   1b8b8:	ldr	r1, [fp, #-12]
   1b8bc:	ldr	r0, [fp, #-16]
   1b8c0:	bl	153c0 <main@@Base+0x1b8>
   1b8c4:	str	r0, [fp, #-8]
   1b8c8:	ldr	r3, [fp, #-8]
   1b8cc:	cmp	r3, #0
   1b8d0:	beq	1b904 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1b8d4:	ldr	r2, [fp, #-12]
   1b8d8:	ldr	r1, [fp, #-8]
   1b8dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b8e0:	bl	1b6a0 <flatcc_builder_copy_buffer@@Base>
   1b8e4:	mov	r3, r0
   1b8e8:	cmp	r3, #0
   1b8ec:	bne	1b90c <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   1b8f0:	ldr	r0, [fp, #-8]
   1b8f4:	bl	11f60 <free@plt>
   1b8f8:	mov	r3, #0
   1b8fc:	str	r3, [fp, #-8]
   1b900:	b	1b910 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   1b904:	nop	{0}
   1b908:	b	1b910 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   1b90c:	nop	{0}
   1b910:	ldr	r3, [fp, #-8]
   1b914:	cmp	r3, #0
   1b918:	bne	1b934 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   1b91c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b920:	cmp	r3, #0
   1b924:	beq	1b934 <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   1b928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b92c:	mov	r2, #0
   1b930:	str	r2, [r3]
   1b934:	ldr	r3, [fp, #-8]
   1b938:	mov	r0, r3
   1b93c:	sub	sp, fp, #4
   1b940:	ldr	fp, [sp]
   1b944:	add	sp, sp, #4
   1b948:	pop	{pc}		; (ldr pc, [sp], #4)

0001b94c <flatcc_builder_aligned_alloc@@Base>:
   1b94c:	str	fp, [sp, #-8]!
   1b950:	str	lr, [sp, #4]
   1b954:	add	fp, sp, #4
   1b958:	sub	sp, sp, #8
   1b95c:	str	r0, [fp, #-8]
   1b960:	str	r1, [fp, #-12]
   1b964:	ldr	r1, [fp, #-12]
   1b968:	ldr	r0, [fp, #-8]
   1b96c:	bl	153c0 <main@@Base+0x1b8>
   1b970:	mov	r3, r0
   1b974:	mov	r0, r3
   1b978:	sub	sp, fp, #4
   1b97c:	ldr	fp, [sp]
   1b980:	add	sp, sp, #4
   1b984:	pop	{pc}		; (ldr pc, [sp], #4)

0001b988 <flatcc_builder_aligned_free@@Base>:
   1b988:	str	fp, [sp, #-8]!
   1b98c:	str	lr, [sp, #4]
   1b990:	add	fp, sp, #4
   1b994:	sub	sp, sp, #8
   1b998:	str	r0, [fp, #-8]
   1b99c:	ldr	r0, [fp, #-8]
   1b9a0:	bl	11f60 <free@plt>
   1b9a4:	nop	{0}
   1b9a8:	sub	sp, fp, #4
   1b9ac:	ldr	fp, [sp]
   1b9b0:	add	sp, sp, #4
   1b9b4:	pop	{pc}		; (ldr pc, [sp], #4)

0001b9b8 <flatcc_builder_get_emit_context@@Base>:
   1b9b8:	push	{fp}		; (str fp, [sp, #-4]!)
   1b9bc:	add	fp, sp, #0
   1b9c0:	sub	sp, sp, #12
   1b9c4:	str	r0, [fp, #-8]
   1b9c8:	ldr	r3, [fp, #-8]
   1b9cc:	ldr	r3, [r3, #36]	; 0x24
   1b9d0:	mov	r0, r3
   1b9d4:	add	sp, fp, #0
   1b9d8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b9dc:	bx	lr
   1b9e0:	str	fp, [sp, #-8]!
   1b9e4:	str	lr, [sp, #4]
   1b9e8:	add	fp, sp, #4
   1b9ec:	sub	sp, sp, #16
   1b9f0:	str	r0, [fp, #-16]
   1b9f4:	mov	r3, #0
   1b9f8:	str	r3, [fp, #-8]
   1b9fc:	ldr	r3, [fp, #-16]
   1ba00:	ldr	r3, [r3]
   1ba04:	cmp	r3, #0
   1ba08:	beq	1ba60 <flatcc_builder_get_emit_context@@Base+0xa8>
   1ba0c:	ldr	r3, [fp, #-16]
   1ba10:	ldr	r3, [r3]
   1ba14:	ldr	r2, [r3, #2948]	; 0xb84
   1ba18:	ldr	r3, [fp, #-16]
   1ba1c:	ldr	r3, [r3, #4]
   1ba20:	cmp	r2, r3
   1ba24:	beq	1ba60 <flatcc_builder_get_emit_context@@Base+0xa8>
   1ba28:	ldr	r3, [fp, #-16]
   1ba2c:	ldr	r3, [r3]
   1ba30:	ldr	r2, [r3, #2952]	; 0xb88
   1ba34:	ldr	r3, [fp, #-16]
   1ba38:	ldr	r3, [r3]
   1ba3c:	ldr	r3, [r3, #2948]	; 0xb84
   1ba40:	sub	r2, r2, #2944	; 0xb80
   1ba44:	str	r2, [r3, #2952]	; 0xb88
   1ba48:	ldr	r3, [fp, #-16]
   1ba4c:	ldr	r3, [r3]
   1ba50:	ldr	r2, [r3, #2948]	; 0xb84
   1ba54:	ldr	r3, [fp, #-16]
   1ba58:	str	r2, [r3]
   1ba5c:	b	1bb88 <flatcc_builder_get_emit_context@@Base+0x1d0>
   1ba60:	movw	r0, #2956	; 0xb8c
   1ba64:	bl	11f9c <malloc@plt>
   1ba68:	mov	r3, r0
   1ba6c:	str	r3, [fp, #-8]
   1ba70:	ldr	r3, [fp, #-8]
   1ba74:	cmp	r3, #0
   1ba78:	bne	1ba84 <flatcc_builder_get_emit_context@@Base+0xcc>
   1ba7c:	mvn	r3, #0
   1ba80:	b	1bbcc <flatcc_builder_get_emit_context@@Base+0x214>
   1ba84:	ldr	r3, [fp, #-16]
   1ba88:	ldr	r3, [r3, #28]
   1ba8c:	add	r2, r3, #2944	; 0xb80
   1ba90:	ldr	r3, [fp, #-16]
   1ba94:	str	r2, [r3, #28]
   1ba98:	ldr	r3, [fp, #-16]
   1ba9c:	ldr	r3, [r3]
   1baa0:	cmp	r3, #0
   1baa4:	beq	1baf8 <flatcc_builder_get_emit_context@@Base+0x140>
   1baa8:	ldr	r3, [fp, #-16]
   1baac:	ldr	r2, [r3, #4]
   1bab0:	ldr	r3, [fp, #-8]
   1bab4:	str	r2, [r3, #2948]	; 0xb84
   1bab8:	ldr	r3, [fp, #-16]
   1babc:	ldr	r2, [r3]
   1bac0:	ldr	r3, [fp, #-8]
   1bac4:	str	r2, [r3, #2944]	; 0xb80
   1bac8:	ldr	r3, [fp, #-16]
   1bacc:	ldr	r3, [r3]
   1bad0:	ldr	r2, [fp, #-8]
   1bad4:	str	r2, [r3, #2948]	; 0xb84
   1bad8:	ldr	r3, [fp, #-16]
   1badc:	ldr	r3, [r3, #4]
   1bae0:	ldr	r2, [fp, #-8]
   1bae4:	str	r2, [r3, #2944]	; 0xb80
   1bae8:	ldr	r3, [fp, #-16]
   1baec:	ldr	r2, [fp, #-8]
   1baf0:	str	r2, [r3]
   1baf4:	b	1bb88 <flatcc_builder_get_emit_context@@Base+0x1d0>
   1baf8:	ldr	r3, [fp, #-16]
   1bafc:	ldr	r2, [fp, #-8]
   1bb00:	str	r2, [r3]
   1bb04:	ldr	r3, [fp, #-16]
   1bb08:	ldr	r2, [fp, #-8]
   1bb0c:	str	r2, [r3, #4]
   1bb10:	ldr	r3, [fp, #-8]
   1bb14:	ldr	r2, [fp, #-8]
   1bb18:	str	r2, [r3, #2944]	; 0xb80
   1bb1c:	ldr	r3, [fp, #-8]
   1bb20:	ldr	r2, [fp, #-8]
   1bb24:	str	r2, [r3, #2948]	; 0xb84
   1bb28:	ldr	r3, [fp, #-16]
   1bb2c:	ldr	r3, [r3]
   1bb30:	add	r2, r3, #1472	; 0x5c0
   1bb34:	ldr	r3, [fp, #-16]
   1bb38:	str	r2, [r3, #8]
   1bb3c:	ldr	r3, [fp, #-16]
   1bb40:	ldr	r2, [r3, #8]
   1bb44:	ldr	r3, [fp, #-16]
   1bb48:	str	r2, [r3, #16]
   1bb4c:	ldr	r3, [fp, #-16]
   1bb50:	mov	r2, #1472	; 0x5c0
   1bb54:	str	r2, [r3, #12]
   1bb58:	ldr	r3, [fp, #-16]
   1bb5c:	ldr	r3, [r3, #12]
   1bb60:	rsb	r2, r3, #2944	; 0xb80
   1bb64:	ldr	r3, [fp, #-16]
   1bb68:	str	r2, [r3, #20]
   1bb6c:	ldr	r3, [fp, #-16]
   1bb70:	ldr	r3, [r3, #12]
   1bb74:	rsb	r2, r3, #0
   1bb78:	ldr	r3, [fp, #-8]
   1bb7c:	str	r2, [r3, #2952]	; 0xb88
   1bb80:	mov	r3, #0
   1bb84:	b	1bbcc <flatcc_builder_get_emit_context@@Base+0x214>
   1bb88:	ldr	r3, [fp, #-16]
   1bb8c:	ldr	r3, [r3]
   1bb90:	add	r2, r3, #2944	; 0xb80
   1bb94:	ldr	r3, [fp, #-16]
   1bb98:	str	r2, [r3, #8]
   1bb9c:	ldr	r3, [fp, #-16]
   1bba0:	mov	r2, #2944	; 0xb80
   1bba4:	str	r2, [r3, #12]
   1bba8:	ldr	r3, [fp, #-16]
   1bbac:	ldr	r3, [r3]
   1bbb0:	ldr	r3, [r3, #2944]	; 0xb80
   1bbb4:	ldr	r2, [r3, #2952]	; 0xb88
   1bbb8:	ldr	r3, [fp, #-16]
   1bbbc:	ldr	r3, [r3]
   1bbc0:	sub	r2, r2, #2944	; 0xb80
   1bbc4:	str	r2, [r3, #2952]	; 0xb88
   1bbc8:	mov	r3, #0
   1bbcc:	mov	r0, r3
   1bbd0:	sub	sp, fp, #4
   1bbd4:	ldr	fp, [sp]
   1bbd8:	add	sp, sp, #4
   1bbdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbe0:	str	fp, [sp, #-8]!
   1bbe4:	str	lr, [sp, #4]
   1bbe8:	add	fp, sp, #4
   1bbec:	sub	sp, sp, #16
   1bbf0:	str	r0, [fp, #-16]
   1bbf4:	mov	r3, #0
   1bbf8:	str	r3, [fp, #-8]
   1bbfc:	ldr	r3, [fp, #-16]
   1bc00:	ldr	r3, [r3, #4]
   1bc04:	cmp	r3, #0
   1bc08:	beq	1bc40 <flatcc_builder_get_emit_context@@Base+0x288>
   1bc0c:	ldr	r3, [fp, #-16]
   1bc10:	ldr	r3, [r3, #4]
   1bc14:	ldr	r2, [r3, #2944]	; 0xb80
   1bc18:	ldr	r3, [fp, #-16]
   1bc1c:	ldr	r3, [r3]
   1bc20:	cmp	r2, r3
   1bc24:	beq	1bc40 <flatcc_builder_get_emit_context@@Base+0x288>
   1bc28:	ldr	r3, [fp, #-16]
   1bc2c:	ldr	r3, [r3, #4]
   1bc30:	ldr	r2, [r3, #2944]	; 0xb80
   1bc34:	ldr	r3, [fp, #-16]
   1bc38:	str	r2, [r3, #4]
   1bc3c:	b	1bd68 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1bc40:	movw	r0, #2956	; 0xb8c
   1bc44:	bl	11f9c <malloc@plt>
   1bc48:	mov	r3, r0
   1bc4c:	str	r3, [fp, #-8]
   1bc50:	ldr	r3, [fp, #-8]
   1bc54:	cmp	r3, #0
   1bc58:	bne	1bc64 <flatcc_builder_get_emit_context@@Base+0x2ac>
   1bc5c:	mvn	r3, #0
   1bc60:	b	1bdac <flatcc_builder_get_emit_context@@Base+0x3f4>
   1bc64:	ldr	r3, [fp, #-16]
   1bc68:	ldr	r3, [r3, #28]
   1bc6c:	add	r2, r3, #2944	; 0xb80
   1bc70:	ldr	r3, [fp, #-16]
   1bc74:	str	r2, [r3, #28]
   1bc78:	ldr	r3, [fp, #-16]
   1bc7c:	ldr	r3, [r3, #4]
   1bc80:	cmp	r3, #0
   1bc84:	beq	1bcd8 <flatcc_builder_get_emit_context@@Base+0x320>
   1bc88:	ldr	r3, [fp, #-16]
   1bc8c:	ldr	r2, [r3, #4]
   1bc90:	ldr	r3, [fp, #-8]
   1bc94:	str	r2, [r3, #2948]	; 0xb84
   1bc98:	ldr	r3, [fp, #-16]
   1bc9c:	ldr	r2, [r3]
   1bca0:	ldr	r3, [fp, #-8]
   1bca4:	str	r2, [r3, #2944]	; 0xb80
   1bca8:	ldr	r3, [fp, #-16]
   1bcac:	ldr	r3, [r3]
   1bcb0:	ldr	r2, [fp, #-8]
   1bcb4:	str	r2, [r3, #2948]	; 0xb84
   1bcb8:	ldr	r3, [fp, #-16]
   1bcbc:	ldr	r3, [r3, #4]
   1bcc0:	ldr	r2, [fp, #-8]
   1bcc4:	str	r2, [r3, #2944]	; 0xb80
   1bcc8:	ldr	r3, [fp, #-16]
   1bccc:	ldr	r2, [fp, #-8]
   1bcd0:	str	r2, [r3, #4]
   1bcd4:	b	1bd68 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1bcd8:	ldr	r3, [fp, #-16]
   1bcdc:	ldr	r2, [fp, #-8]
   1bce0:	str	r2, [r3]
   1bce4:	ldr	r3, [fp, #-16]
   1bce8:	ldr	r2, [fp, #-8]
   1bcec:	str	r2, [r3, #4]
   1bcf0:	ldr	r3, [fp, #-8]
   1bcf4:	ldr	r2, [fp, #-8]
   1bcf8:	str	r2, [r3, #2944]	; 0xb80
   1bcfc:	ldr	r3, [fp, #-8]
   1bd00:	ldr	r2, [fp, #-8]
   1bd04:	str	r2, [r3, #2948]	; 0xb84
   1bd08:	ldr	r3, [fp, #-16]
   1bd0c:	ldr	r3, [r3]
   1bd10:	add	r2, r3, #1472	; 0x5c0
   1bd14:	ldr	r3, [fp, #-16]
   1bd18:	str	r2, [r3, #8]
   1bd1c:	ldr	r3, [fp, #-16]
   1bd20:	ldr	r2, [r3, #8]
   1bd24:	ldr	r3, [fp, #-16]
   1bd28:	str	r2, [r3, #16]
   1bd2c:	ldr	r3, [fp, #-16]
   1bd30:	mov	r2, #1472	; 0x5c0
   1bd34:	str	r2, [r3, #12]
   1bd38:	ldr	r3, [fp, #-16]
   1bd3c:	ldr	r3, [r3, #12]
   1bd40:	rsb	r2, r3, #2944	; 0xb80
   1bd44:	ldr	r3, [fp, #-16]
   1bd48:	str	r2, [r3, #20]
   1bd4c:	ldr	r3, [fp, #-16]
   1bd50:	ldr	r3, [r3, #12]
   1bd54:	rsb	r2, r3, #0
   1bd58:	ldr	r3, [fp, #-8]
   1bd5c:	str	r2, [r3, #2952]	; 0xb88
   1bd60:	mov	r3, #0
   1bd64:	b	1bdac <flatcc_builder_get_emit_context@@Base+0x3f4>
   1bd68:	ldr	r3, [fp, #-16]
   1bd6c:	ldr	r3, [r3, #4]
   1bd70:	mov	r2, r3
   1bd74:	ldr	r3, [fp, #-16]
   1bd78:	str	r2, [r3, #16]
   1bd7c:	ldr	r3, [fp, #-16]
   1bd80:	mov	r2, #2944	; 0xb80
   1bd84:	str	r2, [r3, #20]
   1bd88:	ldr	r3, [fp, #-16]
   1bd8c:	ldr	r3, [r3, #4]
   1bd90:	ldr	r3, [r3, #2948]	; 0xb84
   1bd94:	ldr	r2, [r3, #2952]	; 0xb88
   1bd98:	ldr	r3, [fp, #-16]
   1bd9c:	ldr	r3, [r3, #4]
   1bda0:	add	r2, r2, #2944	; 0xb80
   1bda4:	str	r2, [r3, #2952]	; 0xb88
   1bda8:	mov	r3, #0
   1bdac:	mov	r0, r3
   1bdb0:	sub	sp, fp, #4
   1bdb4:	ldr	fp, [sp]
   1bdb8:	add	sp, sp, #4
   1bdbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdc0:	str	fp, [sp, #-8]!
   1bdc4:	str	lr, [sp, #4]
   1bdc8:	add	fp, sp, #4
   1bdcc:	sub	sp, sp, #24
   1bdd0:	str	r0, [fp, #-16]
   1bdd4:	str	r1, [fp, #-20]	; 0xffffffec
   1bdd8:	str	r2, [fp, #-24]	; 0xffffffe8
   1bddc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bde0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bde4:	add	r3, r2, r3
   1bde8:	str	r3, [fp, #-20]	; 0xffffffec
   1bdec:	b	1beb0 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1bdf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bdf4:	str	r3, [fp, #-8]
   1bdf8:	ldr	r3, [fp, #-16]
   1bdfc:	ldr	r3, [r3, #12]
   1be00:	ldr	r2, [fp, #-8]
   1be04:	cmp	r2, r3
   1be08:	bls	1be40 <flatcc_builder_get_emit_context@@Base+0x488>
   1be0c:	ldr	r3, [fp, #-16]
   1be10:	ldr	r3, [r3, #12]
   1be14:	str	r3, [fp, #-8]
   1be18:	ldr	r3, [fp, #-8]
   1be1c:	cmp	r3, #0
   1be20:	bne	1be40 <flatcc_builder_get_emit_context@@Base+0x488>
   1be24:	ldr	r0, [fp, #-16]
   1be28:	bl	1b9e0 <flatcc_builder_get_emit_context@@Base+0x28>
   1be2c:	mov	r3, r0
   1be30:	cmp	r3, #0
   1be34:	beq	1beb0 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1be38:	mvn	r3, #0
   1be3c:	b	1bec0 <flatcc_builder_get_emit_context@@Base+0x508>
   1be40:	ldr	r3, [fp, #-16]
   1be44:	ldr	r2, [r3, #8]
   1be48:	ldr	r3, [fp, #-8]
   1be4c:	rsb	r3, r3, #0
   1be50:	add	r2, r2, r3
   1be54:	ldr	r3, [fp, #-16]
   1be58:	str	r2, [r3, #8]
   1be5c:	ldr	r3, [fp, #-16]
   1be60:	ldr	r2, [r3, #12]
   1be64:	ldr	r3, [fp, #-8]
   1be68:	sub	r2, r2, r3
   1be6c:	ldr	r3, [fp, #-16]
   1be70:	str	r2, [r3, #12]
   1be74:	ldr	r3, [fp, #-8]
   1be78:	rsb	r3, r3, #0
   1be7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1be80:	add	r3, r2, r3
   1be84:	str	r3, [fp, #-20]	; 0xffffffec
   1be88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1be8c:	ldr	r3, [fp, #-8]
   1be90:	sub	r3, r2, r3
   1be94:	str	r3, [fp, #-24]	; 0xffffffe8
   1be98:	ldr	r3, [fp, #-16]
   1be9c:	ldr	r3, [r3, #8]
   1bea0:	ldr	r2, [fp, #-8]
   1bea4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bea8:	mov	r0, r3
   1beac:	bl	11f6c <memcpy@plt>
   1beb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1beb4:	cmp	r3, #0
   1beb8:	bne	1bdf0 <flatcc_builder_get_emit_context@@Base+0x438>
   1bebc:	mov	r3, #0
   1bec0:	mov	r0, r3
   1bec4:	sub	sp, fp, #4
   1bec8:	ldr	fp, [sp]
   1becc:	add	sp, sp, #4
   1bed0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bed4:	str	fp, [sp, #-8]!
   1bed8:	str	lr, [sp, #4]
   1bedc:	add	fp, sp, #4
   1bee0:	sub	sp, sp, #24
   1bee4:	str	r0, [fp, #-16]
   1bee8:	str	r1, [fp, #-20]	; 0xffffffec
   1beec:	str	r2, [fp, #-24]	; 0xffffffe8
   1bef0:	b	1bfac <flatcc_builder_get_emit_context@@Base+0x5f4>
   1bef4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bef8:	str	r3, [fp, #-8]
   1befc:	ldr	r3, [fp, #-16]
   1bf00:	ldr	r3, [r3, #20]
   1bf04:	ldr	r2, [fp, #-8]
   1bf08:	cmp	r2, r3
   1bf0c:	bls	1bf44 <flatcc_builder_get_emit_context@@Base+0x58c>
   1bf10:	ldr	r3, [fp, #-16]
   1bf14:	ldr	r3, [r3, #20]
   1bf18:	str	r3, [fp, #-8]
   1bf1c:	ldr	r3, [fp, #-8]
   1bf20:	cmp	r3, #0
   1bf24:	bne	1bf44 <flatcc_builder_get_emit_context@@Base+0x58c>
   1bf28:	ldr	r0, [fp, #-16]
   1bf2c:	bl	1bbe0 <flatcc_builder_get_emit_context@@Base+0x228>
   1bf30:	mov	r3, r0
   1bf34:	cmp	r3, #0
   1bf38:	beq	1bfac <flatcc_builder_get_emit_context@@Base+0x5f4>
   1bf3c:	mvn	r3, #0
   1bf40:	b	1bfbc <flatcc_builder_get_emit_context@@Base+0x604>
   1bf44:	ldr	r3, [fp, #-16]
   1bf48:	ldr	r3, [r3, #16]
   1bf4c:	ldr	r2, [fp, #-8]
   1bf50:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bf54:	mov	r0, r3
   1bf58:	bl	11f6c <memcpy@plt>
   1bf5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bf60:	ldr	r3, [fp, #-8]
   1bf64:	sub	r3, r2, r3
   1bf68:	str	r3, [fp, #-24]	; 0xffffffe8
   1bf6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1bf70:	ldr	r3, [fp, #-8]
   1bf74:	add	r3, r2, r3
   1bf78:	str	r3, [fp, #-20]	; 0xffffffec
   1bf7c:	ldr	r3, [fp, #-16]
   1bf80:	ldr	r2, [r3, #16]
   1bf84:	ldr	r3, [fp, #-8]
   1bf88:	add	r2, r2, r3
   1bf8c:	ldr	r3, [fp, #-16]
   1bf90:	str	r2, [r3, #16]
   1bf94:	ldr	r3, [fp, #-16]
   1bf98:	ldr	r2, [r3, #20]
   1bf9c:	ldr	r3, [fp, #-8]
   1bfa0:	sub	r2, r2, r3
   1bfa4:	ldr	r3, [fp, #-16]
   1bfa8:	str	r2, [r3, #20]
   1bfac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bfb0:	cmp	r3, #0
   1bfb4:	bne	1bef4 <flatcc_builder_get_emit_context@@Base+0x53c>
   1bfb8:	mov	r3, #0
   1bfbc:	mov	r0, r3
   1bfc0:	sub	sp, fp, #4
   1bfc4:	ldr	fp, [sp]
   1bfc8:	add	sp, sp, #4
   1bfcc:	pop	{pc}		; (ldr pc, [sp], #4)

0001bfd0 <flatcc_emitter_recycle_page@@Base>:
   1bfd0:	push	{fp}		; (str fp, [sp, #-4]!)
   1bfd4:	add	fp, sp, #0
   1bfd8:	sub	sp, sp, #12
   1bfdc:	str	r0, [fp, #-8]
   1bfe0:	str	r1, [fp, #-12]
   1bfe4:	ldr	r3, [fp, #-8]
   1bfe8:	ldr	r3, [r3]
   1bfec:	ldr	r2, [fp, #-12]
   1bff0:	cmp	r2, r3
   1bff4:	beq	1c00c <flatcc_emitter_recycle_page@@Base+0x3c>
   1bff8:	ldr	r3, [fp, #-8]
   1bffc:	ldr	r3, [r3, #4]
   1c000:	ldr	r2, [fp, #-12]
   1c004:	cmp	r2, r3
   1c008:	bne	1c014 <flatcc_emitter_recycle_page@@Base+0x44>
   1c00c:	mvn	r3, #0
   1c010:	b	1c084 <flatcc_emitter_recycle_page@@Base+0xb4>
   1c014:	ldr	r3, [fp, #-12]
   1c018:	ldr	r3, [r3, #2944]	; 0xb80
   1c01c:	ldr	r2, [fp, #-12]
   1c020:	ldr	r2, [r2, #2948]	; 0xb84
   1c024:	str	r2, [r3, #2948]	; 0xb84
   1c028:	ldr	r3, [fp, #-12]
   1c02c:	ldr	r3, [r3, #2948]	; 0xb84
   1c030:	ldr	r2, [fp, #-12]
   1c034:	ldr	r2, [r2, #2944]	; 0xb80
   1c038:	str	r2, [r3, #2944]	; 0xb80
   1c03c:	ldr	r3, [fp, #-8]
   1c040:	ldr	r3, [r3]
   1c044:	ldr	r2, [r3, #2948]	; 0xb84
   1c048:	ldr	r3, [fp, #-12]
   1c04c:	str	r2, [r3, #2948]	; 0xb84
   1c050:	ldr	r3, [fp, #-8]
   1c054:	ldr	r2, [r3]
   1c058:	ldr	r3, [fp, #-12]
   1c05c:	str	r2, [r3, #2944]	; 0xb80
   1c060:	ldr	r3, [fp, #-12]
   1c064:	ldr	r3, [r3, #2948]	; 0xb84
   1c068:	ldr	r2, [fp, #-12]
   1c06c:	str	r2, [r3, #2944]	; 0xb80
   1c070:	ldr	r3, [fp, #-12]
   1c074:	ldr	r3, [r3, #2944]	; 0xb80
   1c078:	ldr	r2, [fp, #-12]
   1c07c:	str	r2, [r3, #2948]	; 0xb84
   1c080:	mov	r3, #0
   1c084:	mov	r0, r3
   1c088:	add	sp, fp, #0
   1c08c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c090:	bx	lr

0001c094 <flatcc_emitter_reset@@Base>:
   1c094:	str	fp, [sp, #-8]!
   1c098:	str	lr, [sp, #4]
   1c09c:	add	fp, sp, #4
   1c0a0:	sub	sp, sp, #16
   1c0a4:	str	r0, [fp, #-16]
   1c0a8:	ldr	r3, [fp, #-16]
   1c0ac:	ldr	r3, [r3]
   1c0b0:	str	r3, [fp, #-8]
   1c0b4:	ldr	r3, [fp, #-16]
   1c0b8:	ldr	r3, [r3]
   1c0bc:	cmp	r3, #0
   1c0c0:	beq	1c21c <flatcc_emitter_reset@@Base+0x188>
   1c0c4:	ldr	r3, [fp, #-16]
   1c0c8:	ldr	r2, [r3]
   1c0cc:	ldr	r3, [fp, #-16]
   1c0d0:	str	r2, [r3, #4]
   1c0d4:	ldr	r3, [fp, #-16]
   1c0d8:	ldr	r3, [r3]
   1c0dc:	add	r2, r3, #1472	; 0x5c0
   1c0e0:	ldr	r3, [fp, #-16]
   1c0e4:	str	r2, [r3, #8]
   1c0e8:	ldr	r3, [fp, #-16]
   1c0ec:	ldr	r2, [r3, #8]
   1c0f0:	ldr	r3, [fp, #-16]
   1c0f4:	str	r2, [r3, #16]
   1c0f8:	ldr	r3, [fp, #-16]
   1c0fc:	mov	r2, #1472	; 0x5c0
   1c100:	str	r2, [r3, #12]
   1c104:	ldr	r3, [fp, #-16]
   1c108:	mov	r2, #1472	; 0x5c0
   1c10c:	str	r2, [r3, #20]
   1c110:	ldr	r3, [fp, #-16]
   1c114:	ldr	r3, [r3, #12]
   1c118:	mov	r2, r3
   1c11c:	ldr	r3, [fp, #-16]
   1c120:	ldr	r3, [r3]
   1c124:	rsb	r2, r2, #0
   1c128:	str	r2, [r3, #2952]	; 0xb88
   1c12c:	ldr	r3, [fp, #-16]
   1c130:	ldr	r3, [r3, #32]
   1c134:	cmp	r3, #0
   1c138:	bne	1c14c <flatcc_emitter_reset@@Base+0xb8>
   1c13c:	ldr	r3, [fp, #-16]
   1c140:	ldr	r2, [r3, #24]
   1c144:	ldr	r3, [fp, #-16]
   1c148:	str	r2, [r3, #32]
   1c14c:	ldr	r3, [fp, #-16]
   1c150:	ldr	r2, [r3, #32]
   1c154:	mov	r3, r2
   1c158:	lsl	r3, r3, #1
   1c15c:	add	r3, r3, r2
   1c160:	lsr	r2, r3, #2
   1c164:	ldr	r3, [fp, #-16]
   1c168:	ldr	r3, [r3, #24]
   1c16c:	lsr	r3, r3, #2
   1c170:	add	r2, r2, r3
   1c174:	ldr	r3, [fp, #-16]
   1c178:	str	r2, [r3, #32]
   1c17c:	ldr	r3, [fp, #-16]
   1c180:	mov	r2, #0
   1c184:	str	r2, [r3, #24]
   1c188:	b	1c1e0 <flatcc_emitter_reset@@Base+0x14c>
   1c18c:	ldr	r3, [fp, #-16]
   1c190:	ldr	r3, [r3, #4]
   1c194:	ldr	r3, [r3, #2944]	; 0xb80
   1c198:	str	r3, [fp, #-8]
   1c19c:	ldr	r3, [fp, #-16]
   1c1a0:	ldr	r3, [r3, #4]
   1c1a4:	ldr	r2, [fp, #-8]
   1c1a8:	ldr	r2, [r2, #2944]	; 0xb80
   1c1ac:	str	r2, [r3, #2944]	; 0xb80
   1c1b0:	ldr	r3, [fp, #-8]
   1c1b4:	ldr	r3, [r3, #2944]	; 0xb80
   1c1b8:	ldr	r2, [fp, #-16]
   1c1bc:	ldr	r2, [r2, #4]
   1c1c0:	str	r2, [r3, #2948]	; 0xb84
   1c1c4:	ldr	r0, [fp, #-8]
   1c1c8:	bl	11f60 <free@plt>
   1c1cc:	ldr	r3, [fp, #-16]
   1c1d0:	ldr	r3, [r3, #28]
   1c1d4:	sub	r2, r3, #2944	; 0xb80
   1c1d8:	ldr	r3, [fp, #-16]
   1c1dc:	str	r2, [r3, #28]
   1c1e0:	ldr	r3, [fp, #-16]
   1c1e4:	ldr	r3, [r3, #32]
   1c1e8:	lsl	r2, r3, #1
   1c1ec:	ldr	r3, [fp, #-16]
   1c1f0:	ldr	r3, [r3, #28]
   1c1f4:	cmp	r2, r3
   1c1f8:	bcs	1c220 <flatcc_emitter_reset@@Base+0x18c>
   1c1fc:	ldr	r3, [fp, #-16]
   1c200:	ldr	r3, [r3, #4]
   1c204:	ldr	r2, [r3, #2944]	; 0xb80
   1c208:	ldr	r3, [fp, #-16]
   1c20c:	ldr	r3, [r3]
   1c210:	cmp	r2, r3
   1c214:	bne	1c18c <flatcc_emitter_reset@@Base+0xf8>
   1c218:	b	1c220 <flatcc_emitter_reset@@Base+0x18c>
   1c21c:	nop	{0}
   1c220:	sub	sp, fp, #4
   1c224:	ldr	fp, [sp]
   1c228:	add	sp, sp, #4
   1c22c:	pop	{pc}		; (ldr pc, [sp], #4)

0001c230 <flatcc_emitter_clear@@Base>:
   1c230:	str	fp, [sp, #-8]!
   1c234:	str	lr, [sp, #4]
   1c238:	add	fp, sp, #4
   1c23c:	sub	sp, sp, #16
   1c240:	str	r0, [fp, #-16]
   1c244:	ldr	r3, [fp, #-16]
   1c248:	ldr	r3, [r3]
   1c24c:	str	r3, [fp, #-8]
   1c250:	ldr	r3, [fp, #-8]
   1c254:	cmp	r3, #0
   1c258:	beq	1c2b8 <flatcc_emitter_clear@@Base+0x88>
   1c25c:	ldr	r3, [fp, #-8]
   1c260:	ldr	r3, [r3, #2948]	; 0xb84
   1c264:	mov	r2, #0
   1c268:	str	r2, [r3, #2944]	; 0xb80
   1c26c:	b	1c28c <flatcc_emitter_clear@@Base+0x5c>
   1c270:	ldr	r3, [fp, #-8]
   1c274:	ldr	r3, [r3, #2944]	; 0xb80
   1c278:	str	r3, [fp, #-8]
   1c27c:	ldr	r3, [fp, #-8]
   1c280:	ldr	r3, [r3, #2948]	; 0xb84
   1c284:	mov	r0, r3
   1c288:	bl	11f60 <free@plt>
   1c28c:	ldr	r3, [fp, #-8]
   1c290:	ldr	r3, [r3, #2944]	; 0xb80
   1c294:	cmp	r3, #0
   1c298:	bne	1c270 <flatcc_emitter_clear@@Base+0x40>
   1c29c:	ldr	r0, [fp, #-8]
   1c2a0:	bl	11f60 <free@plt>
   1c2a4:	mov	r2, #36	; 0x24
   1c2a8:	mov	r1, #0
   1c2ac:	ldr	r0, [fp, #-16]
   1c2b0:	bl	11fd8 <memset@plt>
   1c2b4:	b	1c2bc <flatcc_emitter_clear@@Base+0x8c>
   1c2b8:	nop	{0}
   1c2bc:	sub	sp, fp, #4
   1c2c0:	ldr	fp, [sp]
   1c2c4:	add	sp, sp, #4
   1c2c8:	pop	{pc}		; (ldr pc, [sp], #4)

0001c2cc <flatcc_emitter@@Base>:
   1c2cc:	str	fp, [sp, #-8]!
   1c2d0:	str	lr, [sp, #4]
   1c2d4:	add	fp, sp, #4
   1c2d8:	sub	sp, sp, #24
   1c2dc:	str	r0, [fp, #-16]
   1c2e0:	str	r1, [fp, #-20]	; 0xffffffec
   1c2e4:	str	r2, [fp, #-24]	; 0xffffffe8
   1c2e8:	str	r3, [fp, #-28]	; 0xffffffe4
   1c2ec:	ldr	r3, [fp, #-16]
   1c2f0:	str	r3, [fp, #-12]
   1c2f4:	ldr	r3, [fp, #-12]
   1c2f8:	ldr	r2, [r3, #24]
   1c2fc:	ldr	r3, [fp, #4]
   1c300:	add	r2, r2, r3
   1c304:	ldr	r3, [fp, #-12]
   1c308:	str	r2, [r3, #24]
   1c30c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c310:	cmp	r3, #0
   1c314:	bge	1c3dc <flatcc_emitter@@Base+0x110>
   1c318:	ldr	r3, [fp, #-12]
   1c31c:	ldr	r3, [r3, #12]
   1c320:	ldr	r2, [fp, #4]
   1c324:	cmp	r2, r3
   1c328:	bhi	1c370 <flatcc_emitter@@Base+0xa4>
   1c32c:	ldr	r3, [fp, #-12]
   1c330:	ldr	r2, [r3, #8]
   1c334:	ldr	r3, [fp, #4]
   1c338:	rsb	r3, r3, #0
   1c33c:	add	r2, r2, r3
   1c340:	ldr	r3, [fp, #-12]
   1c344:	str	r2, [r3, #8]
   1c348:	ldr	r3, [fp, #-12]
   1c34c:	ldr	r2, [r3, #12]
   1c350:	ldr	r3, [fp, #4]
   1c354:	sub	r2, r2, r3
   1c358:	ldr	r3, [fp, #-12]
   1c35c:	str	r2, [r3, #12]
   1c360:	ldr	r3, [fp, #-12]
   1c364:	ldr	r3, [r3, #8]
   1c368:	str	r3, [fp, #-8]
   1c36c:	b	1c488 <flatcc_emitter@@Base+0x1bc>
   1c370:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c374:	lsl	r3, r3, #3
   1c378:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c37c:	add	r3, r2, r3
   1c380:	str	r3, [fp, #-20]	; 0xffffffec
   1c384:	b	1c3c4 <flatcc_emitter@@Base+0xf8>
   1c388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c38c:	sub	r3, r3, #8
   1c390:	str	r3, [fp, #-20]	; 0xffffffec
   1c394:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c398:	ldr	r1, [r3]
   1c39c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c3a0:	ldr	r3, [r3, #4]
   1c3a4:	mov	r2, r3
   1c3a8:	ldr	r0, [fp, #-12]
   1c3ac:	bl	1bdc0 <flatcc_builder_get_emit_context@@Base+0x408>
   1c3b0:	mov	r3, r0
   1c3b4:	cmp	r3, #0
   1c3b8:	beq	1c3c4 <flatcc_emitter@@Base+0xf8>
   1c3bc:	mvn	r3, #0
   1c3c0:	b	1c4e0 <flatcc_emitter@@Base+0x214>
   1c3c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c3c8:	sub	r2, r3, #1
   1c3cc:	str	r2, [fp, #-24]	; 0xffffffe8
   1c3d0:	cmp	r3, #0
   1c3d4:	bne	1c388 <flatcc_emitter@@Base+0xbc>
   1c3d8:	b	1c480 <flatcc_emitter@@Base+0x1b4>
   1c3dc:	ldr	r3, [fp, #-12]
   1c3e0:	ldr	r3, [r3, #20]
   1c3e4:	ldr	r2, [fp, #4]
   1c3e8:	cmp	r2, r3
   1c3ec:	bhi	1c46c <flatcc_emitter@@Base+0x1a0>
   1c3f0:	ldr	r3, [fp, #-12]
   1c3f4:	ldr	r3, [r3, #16]
   1c3f8:	str	r3, [fp, #-8]
   1c3fc:	ldr	r3, [fp, #-12]
   1c400:	ldr	r2, [r3, #16]
   1c404:	ldr	r3, [fp, #4]
   1c408:	add	r2, r2, r3
   1c40c:	ldr	r3, [fp, #-12]
   1c410:	str	r2, [r3, #16]
   1c414:	ldr	r3, [fp, #-12]
   1c418:	ldr	r2, [r3, #20]
   1c41c:	ldr	r3, [fp, #4]
   1c420:	sub	r2, r2, r3
   1c424:	ldr	r3, [fp, #-12]
   1c428:	str	r2, [r3, #20]
   1c42c:	b	1c488 <flatcc_emitter@@Base+0x1bc>
   1c430:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c434:	ldr	r1, [r3]
   1c438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c43c:	ldr	r3, [r3, #4]
   1c440:	mov	r2, r3
   1c444:	ldr	r0, [fp, #-12]
   1c448:	bl	1bed4 <flatcc_builder_get_emit_context@@Base+0x51c>
   1c44c:	mov	r3, r0
   1c450:	cmp	r3, #0
   1c454:	beq	1c460 <flatcc_emitter@@Base+0x194>
   1c458:	mvn	r3, #0
   1c45c:	b	1c4e0 <flatcc_emitter@@Base+0x214>
   1c460:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c464:	add	r3, r3, #8
   1c468:	str	r3, [fp, #-20]	; 0xffffffec
   1c46c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c470:	sub	r2, r3, #1
   1c474:	str	r2, [fp, #-24]	; 0xffffffe8
   1c478:	cmp	r3, #0
   1c47c:	bne	1c430 <flatcc_emitter@@Base+0x164>
   1c480:	mov	r3, #0
   1c484:	b	1c4e0 <flatcc_emitter@@Base+0x214>
   1c488:	b	1c4c8 <flatcc_emitter@@Base+0x1fc>
   1c48c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c490:	ldr	r1, [r3]
   1c494:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c498:	ldr	r3, [r3, #4]
   1c49c:	mov	r2, r3
   1c4a0:	ldr	r0, [fp, #-8]
   1c4a4:	bl	11f6c <memcpy@plt>
   1c4a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4ac:	ldr	r3, [r3, #4]
   1c4b0:	ldr	r2, [fp, #-8]
   1c4b4:	add	r3, r2, r3
   1c4b8:	str	r3, [fp, #-8]
   1c4bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4c0:	add	r3, r3, #8
   1c4c4:	str	r3, [fp, #-20]	; 0xffffffec
   1c4c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c4cc:	sub	r2, r3, #1
   1c4d0:	str	r2, [fp, #-24]	; 0xffffffe8
   1c4d4:	cmp	r3, #0
   1c4d8:	bne	1c48c <flatcc_emitter@@Base+0x1c0>
   1c4dc:	mov	r3, #0
   1c4e0:	mov	r0, r3
   1c4e4:	sub	sp, fp, #4
   1c4e8:	ldr	fp, [sp]
   1c4ec:	add	sp, sp, #4
   1c4f0:	pop	{pc}		; (ldr pc, [sp], #4)

0001c4f4 <flatcc_emitter_copy_buffer@@Base>:
   1c4f4:	str	fp, [sp, #-8]!
   1c4f8:	str	lr, [sp, #4]
   1c4fc:	add	fp, sp, #4
   1c500:	sub	sp, sp, #24
   1c504:	str	r0, [fp, #-16]
   1c508:	str	r1, [fp, #-20]	; 0xffffffec
   1c50c:	str	r2, [fp, #-24]	; 0xffffffe8
   1c510:	ldr	r3, [fp, #-16]
   1c514:	ldr	r3, [r3, #24]
   1c518:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c51c:	cmp	r2, r3
   1c520:	bcs	1c52c <flatcc_emitter_copy_buffer@@Base+0x38>
   1c524:	mov	r3, #0
   1c528:	b	1c62c <flatcc_emitter_copy_buffer@@Base+0x138>
   1c52c:	ldr	r3, [fp, #-16]
   1c530:	ldr	r3, [r3]
   1c534:	cmp	r3, #0
   1c538:	bne	1c544 <flatcc_emitter_copy_buffer@@Base+0x50>
   1c53c:	mov	r3, #0
   1c540:	b	1c62c <flatcc_emitter_copy_buffer@@Base+0x138>
   1c544:	ldr	r3, [fp, #-16]
   1c548:	ldr	r2, [r3]
   1c54c:	ldr	r3, [fp, #-16]
   1c550:	ldr	r3, [r3, #4]
   1c554:	cmp	r2, r3
   1c558:	bne	1c580 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1c55c:	ldr	r3, [fp, #-16]
   1c560:	ldr	r1, [r3, #8]
   1c564:	ldr	r3, [fp, #-16]
   1c568:	ldr	r3, [r3, #24]
   1c56c:	mov	r2, r3
   1c570:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c574:	bl	11f6c <memcpy@plt>
   1c578:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c57c:	b	1c62c <flatcc_emitter_copy_buffer@@Base+0x138>
   1c580:	ldr	r3, [fp, #-16]
   1c584:	ldr	r3, [r3, #12]
   1c588:	rsb	r3, r3, #2944	; 0xb80
   1c58c:	str	r3, [fp, #-12]
   1c590:	ldr	r3, [fp, #-16]
   1c594:	ldr	r3, [r3, #8]
   1c598:	ldr	r2, [fp, #-12]
   1c59c:	mov	r1, r3
   1c5a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c5a4:	bl	11f6c <memcpy@plt>
   1c5a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c5ac:	ldr	r3, [fp, #-12]
   1c5b0:	add	r3, r2, r3
   1c5b4:	str	r3, [fp, #-20]	; 0xffffffec
   1c5b8:	ldr	r3, [fp, #-16]
   1c5bc:	ldr	r3, [r3]
   1c5c0:	ldr	r3, [r3, #2944]	; 0xb80
   1c5c4:	str	r3, [fp, #-8]
   1c5c8:	b	1c5f8 <flatcc_emitter_copy_buffer@@Base+0x104>
   1c5cc:	ldr	r3, [fp, #-8]
   1c5d0:	mov	r2, #2944	; 0xb80
   1c5d4:	mov	r1, r3
   1c5d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c5dc:	bl	11f6c <memcpy@plt>
   1c5e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c5e4:	add	r3, r3, #2944	; 0xb80
   1c5e8:	str	r3, [fp, #-20]	; 0xffffffec
   1c5ec:	ldr	r3, [fp, #-8]
   1c5f0:	ldr	r3, [r3, #2944]	; 0xb80
   1c5f4:	str	r3, [fp, #-8]
   1c5f8:	ldr	r3, [fp, #-16]
   1c5fc:	ldr	r3, [r3, #4]
   1c600:	ldr	r2, [fp, #-8]
   1c604:	cmp	r2, r3
   1c608:	bne	1c5cc <flatcc_emitter_copy_buffer@@Base+0xd8>
   1c60c:	ldr	r1, [fp, #-8]
   1c610:	ldr	r3, [fp, #-16]
   1c614:	ldr	r3, [r3, #20]
   1c618:	rsb	r3, r3, #2944	; 0xb80
   1c61c:	mov	r2, r3
   1c620:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c624:	bl	11f6c <memcpy@plt>
   1c628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c62c:	mov	r0, r3
   1c630:	sub	sp, fp, #4
   1c634:	ldr	fp, [sp]
   1c638:	add	sp, sp, #4
   1c63c:	pop	{pc}		; (ldr pc, [sp], #4)

0001c640 <__libc_csu_init@@Base>:
   1c640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c644:	mov	r7, r0
   1c648:	ldr	r6, [pc, #72]	; 1c698 <__libc_csu_init@@Base+0x58>
   1c64c:	ldr	r5, [pc, #72]	; 1c69c <__libc_csu_init@@Base+0x5c>
   1c650:	add	r6, pc, r6
   1c654:	add	r5, pc, r5
   1c658:	sub	r6, r6, r5
   1c65c:	mov	r8, r1
   1c660:	mov	r9, r2
   1c664:	bl	11f34 <strcmp@plt-0x20>
   1c668:	asrs	r6, r6, #2
   1c66c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c670:	mov	r4, #0
   1c674:	add	r4, r4, #1
   1c678:	ldr	r3, [r5], #4
   1c67c:	mov	r2, r9
   1c680:	mov	r1, r8
   1c684:	mov	r0, r7
   1c688:	blx	r3
   1c68c:	cmp	r6, r4
   1c690:	bne	1c674 <__libc_csu_init@@Base+0x34>
   1c694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c698:			; <UNDEFINED> instruction: 0x000118bc
   1c69c:			; <UNDEFINED> instruction: 0x000118b4

0001c6a0 <__libc_csu_fini@@Base>:
   1c6a0:	bx	lr

Disassembly of section .fini:

0001c6a4 <.fini>:
   1c6a4:	push	{r3, lr}
   1c6a8:	pop	{r3, pc}
