
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d4 <.init>:
   128d4:	push	{r3, lr}
   128d8:	bl	12a0c <_start@@Base+0x3c>
   128dc:	pop	{r3, pc}

Disassembly of section .plt:

000128e0 <free@plt-0x14>:
   128e0:	push	{lr}		; (str lr, [sp, #-4]!)
   128e4:	ldr	lr, [pc, #4]	; 128f0 <free@plt-0x4>
   128e8:	add	lr, pc, lr
   128ec:	ldr	pc, [lr, #8]!
   128f0:	andeq	lr, r1, r0, lsl r7

000128f4 <free@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #122880	; 0x1e000
   128fc:	ldr	pc, [ip, #1808]!	; 0x710

00012900 <memcpy@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #122880	; 0x1e000
   12908:	ldr	pc, [ip, #1800]!	; 0x708

0001290c <memcmp@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #122880	; 0x1e000
   12914:	ldr	pc, [ip, #1792]!	; 0x700

00012918 <__isinff@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #122880	; 0x1e000
   12920:	ldr	pc, [ip, #1784]!	; 0x6f8

00012924 <__isinf@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #122880	; 0x1e000
   1292c:	ldr	pc, [ip, #1776]!	; 0x6f0

00012930 <realloc@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #122880	; 0x1e000
   12938:	ldr	pc, [ip, #1768]!	; 0x6e8

0001293c <fwrite@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #122880	; 0x1e000
   12944:	ldr	pc, [ip, #1760]!	; 0x6e0

00012948 <malloc@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #122880	; 0x1e000
   12950:	ldr	pc, [ip, #1752]!	; 0x6d8

00012954 <__libc_start_main@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #122880	; 0x1e000
   1295c:	ldr	pc, [ip, #1744]!	; 0x6d0

00012960 <__gmon_start__@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #122880	; 0x1e000
   12968:	ldr	pc, [ip, #1736]!	; 0x6c8

0001296c <strlen@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #122880	; 0x1e000
   12974:	ldr	pc, [ip, #1728]!	; 0x6c0

00012978 <fprintf@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #122880	; 0x1e000
   12980:	ldr	pc, [ip, #1720]!	; 0x6b8

00012984 <posix_memalign@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #122880	; 0x1e000
   1298c:	ldr	pc, [ip, #1712]!	; 0x6b0

00012990 <memset@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #122880	; 0x1e000
   12998:	ldr	pc, [ip, #1704]!	; 0x6a8

0001299c <strtod@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #122880	; 0x1e000
   129a4:	ldr	pc, [ip, #1696]!	; 0x6a0

000129a8 <memchr@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #122880	; 0x1e000
   129b0:	ldr	pc, [ip, #1688]!	; 0x698

000129b4 <abort@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #122880	; 0x1e000
   129bc:	ldr	pc, [ip, #1680]!	; 0x690

000129c0 <__assert_fail@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #122880	; 0x1e000
   129c8:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12954 <__libc_start_main@plt>
   129fc:	bl	129b4 <abort@plt>
   12a00:	andeq	sp, r1, ip, asr #26
   12a04:	andeq	r3, r1, r4, lsr #29
   12a08:	andeq	sp, r1, ip, ror #25
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12960 <__gmon_start__@plt>
   12a28:	andeq	lr, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r0, rrx
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	r1, r3, r4, ror r0
   12a54:	andeq	r1, r3, r4, ror r0
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	r1, r3, r4, ror r0
   12a8c:	andeq	r1, r3, r4, ror r0
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	r1, r3, r4, ror r0
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #84	; 0x54
   12acc:	mov	r9, r0
   12ad0:	add	r0, sp, #24
   12ad4:	mov	r4, r1
   12ad8:	vmov.i32	q8, #0	; 0x00000000
   12adc:	str	r3, [sp, #8]
   12ae0:	mov	r5, r2
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	add	r1, r0, #16
   12af0:	vst1.64	{d16-d17}, [r1]
   12af4:	mov	r1, #28
   12af8:	vst1.64	{d16-d17}, [r0], r1
   12afc:	vst1.32	{d16-d17}, [r0]
   12b00:	mov	r0, #1
   12b04:	str	r0, [sp, #40]	; 0x28
   12b08:	str	r4, [sp, #28]
   12b0c:	mov	r0, r9
   12b10:	ldr	r1, [pc, #4040]	; 13ae0 <test@@Base+0x1020>
   12b14:	add	r1, pc, r1
   12b18:	bl	14e60 <flatcc_builder_start_buffer@@Base>
   12b1c:	sub	r0, r5, r4
   12b20:	cmp	r0, #2
   12b24:	blt	12b90 <test@@Base+0xd0>
   12b28:	ldrb	r0, [r4]
   12b2c:	cmp	r0, #32
   12b30:	bls	12b7c <test@@Base+0xbc>
   12b34:	mov	r6, r4
   12b38:	cmp	r6, r5
   12b3c:	beq	13c3c <test@@Base+0x117c>
   12b40:	bcs	13c74 <test@@Base+0x11b4>
   12b44:	ldrb	r0, [r6]
   12b48:	cmp	r0, #123	; 0x7b
   12b4c:	bne	13c74 <test@@Base+0x11b4>
   12b50:	add	r1, r6, #1
   12b54:	sub	r0, r5, r1
   12b58:	cmp	r0, #2
   12b5c:	blt	12bc0 <test@@Base+0x100>
   12b60:	ldrb	r0, [r1]
   12b64:	cmp	r0, #32
   12b68:	bls	12bb0 <test@@Base+0xf0>
   12b6c:	mov	r6, r1
   12b70:	cmp	r6, r5
   12b74:	bne	12bd8 <test@@Base+0x118>
   12b78:	b	13c3c <test@@Base+0x117c>
   12b7c:	bne	12b90 <test@@Base+0xd0>
   12b80:	mov	r6, r4
   12b84:	ldrb	r0, [r6, #1]!
   12b88:	cmp	r0, #32
   12b8c:	bhi	12ba4 <test@@Base+0xe4>
   12b90:	add	r0, sp, #24
   12b94:	mov	r1, r4
   12b98:	mov	r2, r5
   12b9c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   12ba0:	mov	r6, r0
   12ba4:	cmp	r6, r5
   12ba8:	bne	12b40 <test@@Base+0x80>
   12bac:	b	13c3c <test@@Base+0x117c>
   12bb0:	bne	12bc0 <test@@Base+0x100>
   12bb4:	ldrb	r0, [r6, #2]!
   12bb8:	cmp	r0, #32
   12bbc:	bhi	12bd0 <test@@Base+0x110>
   12bc0:	add	r0, sp, #24
   12bc4:	mov	r2, r5
   12bc8:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   12bcc:	mov	r6, r0
   12bd0:	cmp	r6, r5
   12bd4:	beq	13c3c <test@@Base+0x117c>
   12bd8:	mov	r0, r9
   12bdc:	mov	r1, #11
   12be0:	bl	16438 <flatcc_builder_start_table@@Base>
   12be4:	add	r0, sp, #20
   12be8:	movw	r8, #25455	; 0x636f
   12bec:	add	r4, sp, #24
   12bf0:	str	r9, [sp, #12]
   12bf4:	str	r5, [sp, #16]
   12bf8:	add	r0, r0, #1
   12bfc:	movt	r8, #29541	; 0x7365
   12c00:	str	r0, [sp, #4]
   12c04:	cmp	r6, r5
   12c08:	mov	r9, r5
   12c0c:	beq	12c58 <test@@Base+0x198>
   12c10:	ldrb	r0, [r6]
   12c14:	cmp	r0, #46	; 0x2e
   12c18:	beq	12c30 <test@@Base+0x170>
   12c1c:	cmp	r0, #34	; 0x22
   12c20:	bne	12c4c <test@@Base+0x18c>
   12c24:	mov	r0, #0
   12c28:	add	r9, r6, #1
   12c2c:	b	12c54 <test@@Base+0x194>
   12c30:	mov	r0, r4
   12c34:	mov	r1, r6
   12c38:	mov	r2, r5
   12c3c:	mov	r3, #5
   12c40:	bl	19770 <flatcc_json_parser_set_error@@Base>
   12c44:	mov	r9, r0
   12c48:	b	12c58 <test@@Base+0x198>
   12c4c:	mov	r0, #1
   12c50:	mov	r9, r6
   12c54:	str	r0, [sp, #36]	; 0x24
   12c58:	sub	r3, r5, r9
   12c5c:	mov	r0, #8
   12c60:	cmp	r3, #8
   12c64:	movcc	r0, r3
   12c68:	and	r0, r0, #15
   12c6c:	sub	r0, r0, #1
   12c70:	cmp	r0, #7
   12c74:	bhi	13c64 <test@@Base+0x11a4>
   12c78:	add	r2, pc, #36	; 0x24
   12c7c:	mov	sl, #0
   12c80:	mov	ip, #0
   12c84:	mov	lr, #0
   12c88:	mov	r6, #0
   12c8c:	mov	r4, #0
   12c90:	mov	r1, #0
   12c94:	mov	r5, #0
   12c98:	ldr	r7, [r2, r0, lsl #2]
   12c9c:	mov	r0, #0
   12ca0:	add	pc, r2, r7
   12ca4:	andeq	r0, r0, r4, rrx
   12ca8:	andeq	r0, r0, ip, asr r0
   12cac:	andeq	r0, r0, r4, asr r0
   12cb0:	andeq	r0, r0, ip, asr #32
   12cb4:	andeq	r0, r0, r0, asr #32
   12cb8:	andeq	r0, r0, r4, lsr r0
   12cbc:	andeq	r0, r0, r4, lsr #32
   12cc0:	andeq	r0, r0, r0, lsr #32
   12cc4:	ldrb	ip, [r9, #7]
   12cc8:	ldrb	r0, [r9, #6]
   12ccc:	mov	lr, sl
   12cd0:	orr	r0, ip, r0, lsl #8
   12cd4:	mov	sl, r0
   12cd8:	ldrb	r0, [r9, #5]
   12cdc:	orr	sl, sl, r0, lsl #16
   12ce0:	mov	r0, lr
   12ce4:	ldrb	r1, [r9, #4]
   12ce8:	mov	r6, r0
   12cec:	orr	sl, sl, r1, lsl #24
   12cf0:	ldrb	r0, [r9, #3]
   12cf4:	orr	r4, r0, r6
   12cf8:	ldrb	r0, [r9, #2]
   12cfc:	orr	r1, r4, r0, lsl #8
   12d00:	ldrb	r0, [r9, #1]
   12d04:	orr	r5, r1, r0, lsl #16
   12d08:	mov	r1, r9
   12d0c:	ldr	r2, [sp, #16]
   12d10:	cmp	r3, #8
   12d14:	ldrb	r0, [r1], #8
   12d18:	movle	r1, r2
   12d1c:	movw	r2, #0
   12d20:	orr	r3, r5, r0, lsl #24
   12d24:	mov	r0, sl
   12d28:	bfc	r0, #0, #16
   12d2c:	movt	r2, #28260	; 0x6e64
   12d30:	subs	r2, r0, r2
   12d34:	sbcs	r2, r3, r8
   12d38:	bcs	12dfc <test@@Base+0x33c>
   12d3c:	movw	r0, #29299	; 0x7273
   12d40:	ldr	r5, [sp, #16]
   12d44:	and	r1, sl, #-16777216	; 0xff000000
   12d48:	add	r4, sp, #24
   12d4c:	movt	r0, #26217	; 0x6669
   12d50:	eor	r1, r1, #1946157056	; 0x74000000
   12d54:	eor	r0, r3, r0
   12d58:	orrs	r0, r1, r0
   12d5c:	bne	13c64 <test@@Base+0x11a4>
   12d60:	ldr	r0, [sp, #36]	; 0x24
   12d64:	add	r1, r9, #5
   12d68:	cmp	r0, #0
   12d6c:	beq	12f90 <test@@Base+0x4d0>
   12d70:	cmp	r1, r5
   12d74:	mov	r3, r5
   12d78:	beq	132c4 <test@@Base+0x804>
   12d7c:	ldrb	r3, [r1]
   12d80:	cmp	r3, #33	; 0x21
   12d84:	bcc	12df4 <test@@Base+0x334>
   12d88:	add	r0, r9, #6
   12d8c:	uxtb	r2, r3
   12d90:	cmp	r2, #46	; 0x2e
   12d94:	cmpne	r2, #95	; 0x5f
   12d98:	bne	12db8 <test@@Base+0x2f8>
   12d9c:	cmp	r5, r0
   12da0:	beq	13268 <test@@Base+0x7a8>
   12da4:	ldrb	r3, [r0], #1
   12da8:	add	r1, r1, #1
   12dac:	cmp	r3, #33	; 0x21
   12db0:	bcs	12d8c <test@@Base+0x2cc>
   12db4:	b	1326c <test@@Base+0x7ac>
   12db8:	sxtb	r7, r3
   12dbc:	cmp	r7, #0
   12dc0:	blt	12d9c <test@@Base+0x2dc>
   12dc4:	sub	r7, r3, #48	; 0x30
   12dc8:	uxtb	r7, r7
   12dcc:	cmp	r7, #9
   12dd0:	bls	12d9c <test@@Base+0x2dc>
   12dd4:	orr	r3, r3, #32
   12dd8:	sub	r3, r3, #97	; 0x61
   12ddc:	uxtb	r3, r3
   12de0:	cmp	r3, #26
   12de4:	bcc	12d9c <test@@Base+0x2dc>
   12de8:	sub	r1, r0, #1
   12dec:	cmp	r2, #46	; 0x2e
   12df0:	beq	13274 <test@@Base+0x7b4>
   12df4:	mov	r3, r1
   12df8:	b	132c4 <test@@Base+0x804>
   12dfc:	movw	r2, #27764	; 0x6c74
   12e00:	movt	r2, #31349	; 0x7a75
   12e04:	cmp	r3, r2
   12e08:	bhi	12edc <test@@Base+0x41c>
   12e0c:	movw	r7, #29472	; 0x7320
   12e10:	movt	r7, #28260	; 0x6e64
   12e14:	subs	r2, sl, r7
   12e18:	sbcs	r2, r3, r8
   12e1c:	bcs	12fd8 <test@@Base+0x518>
   12e20:	movw	r1, #0
   12e24:	movt	r1, #28260	; 0x6e64
   12e28:	eor	r0, r0, r1
   12e2c:	eor	r1, r3, r8
   12e30:	orrs	r0, r0, r1
   12e34:	bne	13cc0 <test@@Base+0x1200>
   12e38:	ldr	r0, [sp, #36]	; 0x24
   12e3c:	ldr	r5, [sp, #16]
   12e40:	add	r1, r9, #6
   12e44:	cmp	r0, #0
   12e48:	beq	1321c <test@@Base+0x75c>
   12e4c:	cmp	r1, r5
   12e50:	mov	r3, r5
   12e54:	add	r4, sp, #24
   12e58:	beq	13818 <test@@Base+0xd58>
   12e5c:	ldrb	r3, [r1]
   12e60:	cmp	r3, #33	; 0x21
   12e64:	bcc	12ed4 <test@@Base+0x414>
   12e68:	add	r0, r9, #7
   12e6c:	uxtb	r2, r3
   12e70:	cmp	r2, #46	; 0x2e
   12e74:	cmpne	r2, #95	; 0x5f
   12e78:	bne	12e98 <test@@Base+0x3d8>
   12e7c:	cmp	r5, r0
   12e80:	beq	135a8 <test@@Base+0xae8>
   12e84:	ldrb	r3, [r0], #1
   12e88:	add	r1, r1, #1
   12e8c:	cmp	r3, #33	; 0x21
   12e90:	bcs	12e6c <test@@Base+0x3ac>
   12e94:	b	135ac <test@@Base+0xaec>
   12e98:	sxtb	r7, r3
   12e9c:	cmp	r7, #0
   12ea0:	blt	12e7c <test@@Base+0x3bc>
   12ea4:	sub	r7, r3, #48	; 0x30
   12ea8:	uxtb	r7, r7
   12eac:	cmp	r7, #9
   12eb0:	bls	12e7c <test@@Base+0x3bc>
   12eb4:	orr	r3, r3, #32
   12eb8:	sub	r3, r3, #97	; 0x61
   12ebc:	uxtb	r3, r3
   12ec0:	cmp	r3, #26
   12ec4:	bcc	12e7c <test@@Base+0x3bc>
   12ec8:	sub	r1, r0, #1
   12ecc:	cmp	r2, #46	; 0x2e
   12ed0:	beq	135b4 <test@@Base+0xaf4>
   12ed4:	mov	r3, r1
   12ed8:	b	13818 <test@@Base+0xd58>
   12edc:	movw	r0, #27765	; 0x6c75
   12ee0:	movt	r0, #31349	; 0x7a75
   12ee4:	teq	r3, r0
   12ee8:	bne	13cc0 <test@@Base+0x1200>
   12eec:	ldr	r0, [sp, #36]	; 0x24
   12ef0:	ldr	r5, [sp, #16]
   12ef4:	add	r1, r9, #4
   12ef8:	cmp	r0, #0
   12efc:	beq	1311c <test@@Base+0x65c>
   12f00:	cmp	r1, r5
   12f04:	mov	r3, r5
   12f08:	add	r4, sp, #24
   12f0c:	beq	135e0 <test@@Base+0xb20>
   12f10:	ldrb	r3, [r1]
   12f14:	cmp	r3, #33	; 0x21
   12f18:	bcc	12f88 <test@@Base+0x4c8>
   12f1c:	add	r0, r9, #5
   12f20:	uxtb	r2, r3
   12f24:	cmp	r2, #46	; 0x2e
   12f28:	cmpne	r2, #95	; 0x5f
   12f2c:	bne	12f4c <test@@Base+0x48c>
   12f30:	cmp	r5, r0
   12f34:	beq	1328c <test@@Base+0x7cc>
   12f38:	ldrb	r3, [r0], #1
   12f3c:	add	r1, r1, #1
   12f40:	cmp	r3, #33	; 0x21
   12f44:	bcs	12f20 <test@@Base+0x460>
   12f48:	b	13290 <test@@Base+0x7d0>
   12f4c:	sxtb	r7, r3
   12f50:	cmp	r7, #0
   12f54:	blt	12f30 <test@@Base+0x470>
   12f58:	sub	r7, r3, #48	; 0x30
   12f5c:	uxtb	r7, r7
   12f60:	cmp	r7, #9
   12f64:	bls	12f30 <test@@Base+0x470>
   12f68:	orr	r3, r3, #32
   12f6c:	sub	r3, r3, #97	; 0x61
   12f70:	uxtb	r3, r3
   12f74:	cmp	r3, #26
   12f78:	bcc	12f30 <test@@Base+0x470>
   12f7c:	sub	r1, r0, #1
   12f80:	cmp	r2, #46	; 0x2e
   12f84:	beq	13298 <test@@Base+0x7d8>
   12f88:	mov	r3, r1
   12f8c:	b	135e0 <test@@Base+0xb20>
   12f90:	cmp	r1, r5
   12f94:	mov	r2, r5
   12f98:	beq	132ac <test@@Base+0x7ec>
   12f9c:	ldrb	r0, [r1]
   12fa0:	cmp	r0, #92	; 0x5c
   12fa4:	beq	12fb4 <test@@Base+0x4f4>
   12fa8:	cmp	r0, #34	; 0x22
   12fac:	bne	12fc4 <test@@Base+0x504>
   12fb0:	b	13214 <test@@Base+0x754>
   12fb4:	sub	r0, r5, r1
   12fb8:	cmp	r0, #2
   12fbc:	blt	132a8 <test@@Base+0x7e8>
   12fc0:	add	r1, r1, #1
   12fc4:	add	r1, r1, #1
   12fc8:	cmp	r1, r5
   12fcc:	bne	12f9c <test@@Base+0x4dc>
   12fd0:	mov	r2, r5
   12fd4:	b	132ac <test@@Base+0x7ec>
   12fd8:	eor	r0, sl, r7
   12fdc:	eor	r2, r3, r8
   12fe0:	orrs	r0, r0, r2
   12fe4:	bne	13cc0 <test@@Base+0x1200>
   12fe8:	ldr	r5, [sp, #16]
   12fec:	mov	r2, #8
   12ff0:	ldr	r9, [sp, #12]
   12ff4:	add	r4, sp, #24
   12ff8:	sub	r0, r5, r1
   12ffc:	cmp	r0, #8
   13000:	movcs	r0, r2
   13004:	and	r0, r0, #15
   13008:	sub	r2, r0, #1
   1300c:	cmp	r2, #7
   13010:	bhi	13dfc <test@@Base+0x133c>
   13014:	add	r3, pc, #8
   13018:	mov	r0, #0
   1301c:	ldr	r2, [r3, r2, lsl #2]
   13020:	add	pc, r3, r2
   13024:	andeq	r0, r0, r4, lsr r0
   13028:	andeq	r0, r0, ip, lsr #32
   1302c:	andeq	r0, r0, r4, lsr #32
   13030:	andeq	r0, r0, r0, lsr #32
   13034:	andeq	r0, r0, r0, lsr #32
   13038:	andeq	r0, r0, r0, lsr #32
   1303c:	andeq	r0, r0, r0, lsr #32
   13040:	andeq	r0, r0, r0, lsr #32
   13044:	ldrb	r0, [r1, #3]
   13048:	ldrb	r2, [r1, #2]
   1304c:	orr	r0, r0, r2, lsl #8
   13050:	ldrb	r2, [r1, #1]
   13054:	orr	r0, r0, r2, lsl #16
   13058:	ldrb	r2, [r1]
   1305c:	orr	r0, r0, r2, lsl #24
   13060:	movw	r2, #26227	; 0x6673
   13064:	movt	r2, #27749	; 0x6c65
   13068:	cmp	r0, r2
   1306c:	bhi	13168 <test@@Base+0x6a8>
   13070:	movw	r2, #24932	; 0x6164
   13074:	movt	r2, #27749	; 0x6c65
   13078:	teq	r0, r2
   1307c:	bne	13dfc <test@@Base+0x133c>
   13080:	ldr	r0, [sp, #36]	; 0x24
   13084:	add	r2, r1, #4
   13088:	cmp	r0, #0
   1308c:	beq	13510 <test@@Base+0xa50>
   13090:	cmp	r2, r5
   13094:	mov	r3, r5
   13098:	beq	13980 <test@@Base+0xec0>
   1309c:	ldrb	r3, [r2]
   130a0:	cmp	r3, #33	; 0x21
   130a4:	bcc	13114 <test@@Base+0x654>
   130a8:	add	r0, r1, #5
   130ac:	uxtb	r1, r3
   130b0:	cmp	r1, #46	; 0x2e
   130b4:	cmpne	r1, #95	; 0x5f
   130b8:	bne	130d8 <test@@Base+0x618>
   130bc:	cmp	r5, r0
   130c0:	beq	13928 <test@@Base+0xe68>
   130c4:	ldrb	r3, [r0], #1
   130c8:	add	r2, r2, #1
   130cc:	cmp	r3, #33	; 0x21
   130d0:	bcs	130ac <test@@Base+0x5ec>
   130d4:	b	1392c <test@@Base+0xe6c>
   130d8:	sxtb	r7, r3
   130dc:	cmp	r7, #0
   130e0:	blt	130bc <test@@Base+0x5fc>
   130e4:	sub	r7, r3, #48	; 0x30
   130e8:	uxtb	r7, r7
   130ec:	cmp	r7, #9
   130f0:	bls	130bc <test@@Base+0x5fc>
   130f4:	orr	r3, r3, #32
   130f8:	sub	r3, r3, #97	; 0x61
   130fc:	uxtb	r3, r3
   13100:	cmp	r3, #26
   13104:	bcc	130bc <test@@Base+0x5fc>
   13108:	sub	r2, r0, #1
   1310c:	cmp	r1, #46	; 0x2e
   13110:	beq	13934 <test@@Base+0xe74>
   13114:	mov	r3, r2
   13118:	b	13980 <test@@Base+0xec0>
   1311c:	cmp	r1, r5
   13120:	mov	r2, r5
   13124:	add	r4, sp, #24
   13128:	beq	135c8 <test@@Base+0xb08>
   1312c:	ldrb	r0, [r1]
   13130:	cmp	r0, #92	; 0x5c
   13134:	beq	13144 <test@@Base+0x684>
   13138:	cmp	r0, #34	; 0x22
   1313c:	bne	13154 <test@@Base+0x694>
   13140:	b	13284 <test@@Base+0x7c4>
   13144:	sub	r0, r5, r1
   13148:	cmp	r0, #2
   1314c:	blt	135c4 <test@@Base+0xb04>
   13150:	add	r1, r1, #1
   13154:	add	r1, r1, #1
   13158:	cmp	r1, r5
   1315c:	bne	1312c <test@@Base+0x66c>
   13160:	mov	r2, r5
   13164:	b	135c8 <test@@Base+0xb08>
   13168:	movw	r2, #26228	; 0x6674
   1316c:	movt	r2, #27749	; 0x6c65
   13170:	teq	r0, r2
   13174:	bne	13dfc <test@@Base+0x133c>
   13178:	ldr	r0, [sp, #36]	; 0x24
   1317c:	add	r2, r1, #4
   13180:	cmp	r0, #0
   13184:	beq	13558 <test@@Base+0xa98>
   13188:	cmp	r2, r5
   1318c:	mov	r3, r5
   13190:	beq	13afc <test@@Base+0x103c>
   13194:	ldrb	r3, [r2]
   13198:	cmp	r3, #33	; 0x21
   1319c:	bcc	1320c <test@@Base+0x74c>
   131a0:	add	r0, r1, #5
   131a4:	uxtb	r1, r3
   131a8:	cmp	r1, #46	; 0x2e
   131ac:	cmpne	r1, #95	; 0x5f
   131b0:	bne	131d0 <test@@Base+0x710>
   131b4:	cmp	r5, r0
   131b8:	beq	13948 <test@@Base+0xe88>
   131bc:	ldrb	r3, [r0], #1
   131c0:	add	r2, r2, #1
   131c4:	cmp	r3, #33	; 0x21
   131c8:	bcs	131a4 <test@@Base+0x6e4>
   131cc:	b	1394c <test@@Base+0xe8c>
   131d0:	sxtb	r7, r3
   131d4:	cmp	r7, #0
   131d8:	blt	131b4 <test@@Base+0x6f4>
   131dc:	sub	r7, r3, #48	; 0x30
   131e0:	uxtb	r7, r7
   131e4:	cmp	r7, #9
   131e8:	bls	131b4 <test@@Base+0x6f4>
   131ec:	orr	r3, r3, #32
   131f0:	sub	r3, r3, #97	; 0x61
   131f4:	uxtb	r3, r3
   131f8:	cmp	r3, #26
   131fc:	bcc	131b4 <test@@Base+0x6f4>
   13200:	sub	r2, r0, #1
   13204:	cmp	r1, #46	; 0x2e
   13208:	beq	13954 <test@@Base+0xe94>
   1320c:	mov	r3, r2
   13210:	b	13afc <test@@Base+0x103c>
   13214:	add	r3, r1, #1
   13218:	b	132c4 <test@@Base+0x804>
   1321c:	cmp	r1, r5
   13220:	mov	r2, r5
   13224:	add	r4, sp, #24
   13228:	beq	13800 <test@@Base+0xd40>
   1322c:	ldrb	r0, [r1]
   13230:	cmp	r0, #92	; 0x5c
   13234:	beq	13244 <test@@Base+0x784>
   13238:	cmp	r0, #34	; 0x22
   1323c:	bne	13254 <test@@Base+0x794>
   13240:	b	135a0 <test@@Base+0xae0>
   13244:	sub	r0, r5, r1
   13248:	cmp	r0, #2
   1324c:	blt	137fc <test@@Base+0xd3c>
   13250:	add	r1, r1, #1
   13254:	add	r1, r1, #1
   13258:	cmp	r1, r5
   1325c:	bne	1322c <test@@Base+0x76c>
   13260:	mov	r2, r5
   13264:	b	13800 <test@@Base+0xd40>
   13268:	mov	r1, r5
   1326c:	cmp	r2, #46	; 0x2e
   13270:	bne	12df4 <test@@Base+0x334>
   13274:	mov	r0, r4
   13278:	mov	r2, r5
   1327c:	mov	r3, #5
   13280:	b	132bc <test@@Base+0x7fc>
   13284:	add	r3, r1, #1
   13288:	b	135e0 <test@@Base+0xb20>
   1328c:	mov	r1, r5
   13290:	cmp	r2, #46	; 0x2e
   13294:	bne	12f88 <test@@Base+0x4c8>
   13298:	mov	r0, r4
   1329c:	mov	r2, r5
   132a0:	mov	r3, #5
   132a4:	b	135d8 <test@@Base+0xb18>
   132a8:	mov	r2, r1
   132ac:	mov	r1, r2
   132b0:	mov	r0, r4
   132b4:	mov	r2, r5
   132b8:	mov	r3, #20
   132bc:	bl	19770 <flatcc_json_parser_set_error@@Base>
   132c0:	mov	r3, r0
   132c4:	ldr	r9, [sp, #12]
   132c8:	sub	r0, r5, r3
   132cc:	cmp	r0, #2
   132d0:	blt	1333c <test@@Base+0x87c>
   132d4:	ldrb	r0, [r3]
   132d8:	cmp	r0, #32
   132dc:	bls	13328 <test@@Base+0x868>
   132e0:	mov	sl, r3
   132e4:	cmp	sl, r5
   132e8:	beq	13c3c <test@@Base+0x117c>
   132ec:	bcs	13c90 <test@@Base+0x11d0>
   132f0:	ldrb	r0, [sl]
   132f4:	cmp	r0, #58	; 0x3a
   132f8:	bne	13c90 <test@@Base+0x11d0>
   132fc:	add	r1, sl, #1
   13300:	sub	r0, r5, r1
   13304:	cmp	r0, #2
   13308:	blt	1336c <test@@Base+0x8ac>
   1330c:	ldrb	r0, [r1]
   13310:	cmp	r0, #32
   13314:	bls	1335c <test@@Base+0x89c>
   13318:	mov	sl, r1
   1331c:	cmp	sl, r5
   13320:	bne	13384 <test@@Base+0x8c4>
   13324:	b	13c3c <test@@Base+0x117c>
   13328:	bne	1333c <test@@Base+0x87c>
   1332c:	mov	sl, r3
   13330:	ldrb	r0, [sl, #1]!
   13334:	cmp	r0, #32
   13338:	bhi	13350 <test@@Base+0x890>
   1333c:	mov	r0, r4
   13340:	mov	r1, r3
   13344:	mov	r2, r5
   13348:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1334c:	mov	sl, r0
   13350:	cmp	sl, r5
   13354:	bne	132ec <test@@Base+0x82c>
   13358:	b	13c3c <test@@Base+0x117c>
   1335c:	bne	1336c <test@@Base+0x8ac>
   13360:	ldrb	r0, [sl, #2]!
   13364:	cmp	r0, #32
   13368:	bhi	1337c <test@@Base+0x8bc>
   1336c:	mov	r0, r4
   13370:	mov	r2, r5
   13374:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13378:	mov	sl, r0
   1337c:	cmp	sl, r5
   13380:	beq	13c3c <test@@Base+0x117c>
   13384:	mov	r0, r9
   13388:	mov	r1, #0
   1338c:	mov	r2, #1
   13390:	mov	r3, #1
   13394:	bl	178dc <flatcc_builder_table_add@@Base>
   13398:	cmp	r0, #0
   1339c:	beq	13d78 <test@@Base+0x12b8>
   133a0:	mov	r6, r0
   133a4:	mov	r0, #0
   133a8:	mov	r1, sl
   133ac:	mov	r2, r5
   133b0:	sub	r3, fp, #44	; 0x2c
   133b4:	str	r0, [fp, #-36]	; 0xffffffdc
   133b8:	str	r0, [fp, #-40]	; 0xffffffd8
   133bc:	str	r0, [fp, #-44]	; 0xffffffd4
   133c0:	strb	r0, [r6]
   133c4:	sub	r0, fp, #40	; 0x28
   133c8:	str	r0, [sp]
   133cc:	mov	r0, r4
   133d0:	bl	1bb08 <flatcc_json_parser_integer@@Base>
   133d4:	cmp	r0, sl
   133d8:	mov	r1, sl
   133dc:	beq	13444 <test@@Base+0x984>
   133e0:	mov	r2, r0
   133e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   133e8:	cmp	r0, #0
   133ec:	beq	13404 <test@@Base+0x944>
   133f0:	mov	r1, r2
   133f4:	mov	r0, r4
   133f8:	mov	r2, r5
   133fc:	mov	r3, #8
   13400:	b	13428 <test@@Base+0x968>
   13404:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13408:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1340c:	subs	r3, r0, #256	; 0x100
   13410:	sbcs	r1, r1, #0
   13414:	bcc	1343c <test@@Base+0x97c>
   13418:	mov	r1, r2
   1341c:	mov	r0, r4
   13420:	mov	r2, r5
   13424:	mov	r3, #7
   13428:	bl	19770 <flatcc_json_parser_set_error@@Base>
   1342c:	mov	r1, r0
   13430:	cmp	sl, r1
   13434:	bne	1344c <test@@Base+0x98c>
   13438:	b	13d78 <test@@Base+0x12b8>
   1343c:	strb	r0, [r6]
   13440:	mov	r1, r2
   13444:	cmp	sl, r1
   13448:	beq	13d78 <test@@Base+0x12b8>
   1344c:	sub	r0, r5, r1
   13450:	cmp	r0, #2
   13454:	blt	13488 <test@@Base+0x9c8>
   13458:	ldrb	r0, [r1]
   1345c:	cmp	r0, #32
   13460:	bls	13474 <test@@Base+0x9b4>
   13464:	mov	r6, r1
   13468:	cmp	r6, r5
   1346c:	bne	134a0 <test@@Base+0x9e0>
   13470:	b	13c3c <test@@Base+0x117c>
   13474:	bne	13488 <test@@Base+0x9c8>
   13478:	mov	r6, r1
   1347c:	ldrb	r0, [r6, #1]!
   13480:	cmp	r0, #32
   13484:	bhi	13498 <test@@Base+0x9d8>
   13488:	mov	r0, r4
   1348c:	mov	r2, r5
   13490:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13494:	mov	r6, r0
   13498:	cmp	r6, r5
   1349c:	beq	13c3c <test@@Base+0x117c>
   134a0:	ldrb	r0, [r6]
   134a4:	cmp	r0, #44	; 0x2c
   134a8:	bne	13ce0 <test@@Base+0x1220>
   134ac:	add	r1, r6, #1
   134b0:	sub	r0, r5, r1
   134b4:	cmp	r0, #2
   134b8:	blt	134e8 <test@@Base+0xa28>
   134bc:	ldrb	r0, [r1]
   134c0:	cmp	r0, #32
   134c4:	bls	134d8 <test@@Base+0xa18>
   134c8:	mov	r6, r1
   134cc:	cmp	r6, r5
   134d0:	bne	13500 <test@@Base+0xa40>
   134d4:	b	13c3c <test@@Base+0x117c>
   134d8:	bne	134e8 <test@@Base+0xa28>
   134dc:	ldrb	r0, [r6, #2]!
   134e0:	cmp	r0, #32
   134e4:	bhi	134f8 <test@@Base+0xa38>
   134e8:	mov	r0, r4
   134ec:	mov	r2, r5
   134f0:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   134f4:	mov	r6, r0
   134f8:	cmp	r6, r5
   134fc:	beq	13c3c <test@@Base+0x117c>
   13500:	ldrb	r0, [r6]
   13504:	cmp	r0, #125	; 0x7d
   13508:	bne	12c04 <test@@Base+0x144>
   1350c:	b	13cdc <test@@Base+0x121c>
   13510:	cmp	r2, r5
   13514:	mov	r1, r5
   13518:	beq	1396c <test@@Base+0xeac>
   1351c:	ldrb	r0, [r2]
   13520:	cmp	r0, #92	; 0x5c
   13524:	beq	13534 <test@@Base+0xa74>
   13528:	cmp	r0, #34	; 0x22
   1352c:	bne	13544 <test@@Base+0xa84>
   13530:	b	13918 <test@@Base+0xe58>
   13534:	sub	r0, r5, r2
   13538:	cmp	r0, #2
   1353c:	blt	13968 <test@@Base+0xea8>
   13540:	add	r2, r2, #1
   13544:	add	r2, r2, #1
   13548:	cmp	r2, r5
   1354c:	bne	1351c <test@@Base+0xa5c>
   13550:	mov	r1, r5
   13554:	b	1396c <test@@Base+0xeac>
   13558:	cmp	r2, r5
   1355c:	mov	r1, r5
   13560:	beq	13ae8 <test@@Base+0x1028>
   13564:	ldrb	r0, [r2]
   13568:	cmp	r0, #92	; 0x5c
   1356c:	beq	1357c <test@@Base+0xabc>
   13570:	cmp	r0, #34	; 0x22
   13574:	bne	1358c <test@@Base+0xacc>
   13578:	b	13920 <test@@Base+0xe60>
   1357c:	sub	r0, r5, r2
   13580:	cmp	r0, #2
   13584:	blt	13ae4 <test@@Base+0x1024>
   13588:	add	r2, r2, #1
   1358c:	add	r2, r2, #1
   13590:	cmp	r2, r5
   13594:	bne	13564 <test@@Base+0xaa4>
   13598:	mov	r1, r5
   1359c:	b	13ae8 <test@@Base+0x1028>
   135a0:	add	r3, r1, #1
   135a4:	b	13818 <test@@Base+0xd58>
   135a8:	mov	r1, r5
   135ac:	cmp	r2, #46	; 0x2e
   135b0:	bne	12ed4 <test@@Base+0x414>
   135b4:	mov	r0, r4
   135b8:	mov	r2, r5
   135bc:	mov	r3, #5
   135c0:	b	13810 <test@@Base+0xd50>
   135c4:	mov	r2, r1
   135c8:	mov	r1, r2
   135cc:	mov	r0, r4
   135d0:	mov	r2, r5
   135d4:	mov	r3, #20
   135d8:	bl	19770 <flatcc_json_parser_set_error@@Base>
   135dc:	mov	r3, r0
   135e0:	ldr	r9, [sp, #12]
   135e4:	sub	r0, r5, r3
   135e8:	cmp	r0, #2
   135ec:	blt	13658 <test@@Base+0xb98>
   135f0:	ldrb	r0, [r3]
   135f4:	cmp	r0, #32
   135f8:	bls	13644 <test@@Base+0xb84>
   135fc:	mov	r6, r3
   13600:	cmp	r6, r5
   13604:	beq	13c3c <test@@Base+0x117c>
   13608:	bcs	13d44 <test@@Base+0x1284>
   1360c:	ldrb	r0, [r6]
   13610:	cmp	r0, #58	; 0x3a
   13614:	bne	13d44 <test@@Base+0x1284>
   13618:	add	r1, r6, #1
   1361c:	sub	r0, r5, r1
   13620:	cmp	r0, #2
   13624:	blt	13688 <test@@Base+0xbc8>
   13628:	ldrb	r0, [r1]
   1362c:	cmp	r0, #32
   13630:	bls	13678 <test@@Base+0xbb8>
   13634:	mov	r6, r1
   13638:	cmp	r6, r5
   1363c:	bne	136a0 <test@@Base+0xbe0>
   13640:	b	13c3c <test@@Base+0x117c>
   13644:	bne	13658 <test@@Base+0xb98>
   13648:	mov	r6, r3
   1364c:	ldrb	r0, [r6, #1]!
   13650:	cmp	r0, #32
   13654:	bhi	1366c <test@@Base+0xbac>
   13658:	mov	r0, r4
   1365c:	mov	r1, r3
   13660:	mov	r2, r5
   13664:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13668:	mov	r6, r0
   1366c:	cmp	r6, r5
   13670:	bne	13608 <test@@Base+0xb48>
   13674:	b	13c3c <test@@Base+0x117c>
   13678:	bne	13688 <test@@Base+0xbc8>
   1367c:	ldrb	r0, [r6, #2]!
   13680:	cmp	r0, #32
   13684:	bhi	13698 <test@@Base+0xbd8>
   13688:	mov	r0, r4
   1368c:	mov	r2, r5
   13690:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13694:	mov	r6, r0
   13698:	cmp	r6, r5
   1369c:	beq	13c3c <test@@Base+0x117c>
   136a0:	ldrb	r0, [r6]
   136a4:	cmp	r0, #34	; 0x22
   136a8:	bne	136b4 <test@@Base+0xbf4>
   136ac:	add	r6, r6, #1
   136b0:	b	136cc <test@@Base+0xc0c>
   136b4:	mov	r0, r4
   136b8:	mov	r1, r6
   136bc:	mov	r2, r5
   136c0:	mov	r3, #16
   136c4:	bl	19770 <flatcc_json_parser_set_error@@Base>
   136c8:	mov	r6, r0
   136cc:	mov	r0, r4
   136d0:	mov	r1, r6
   136d4:	mov	r2, r5
   136d8:	bl	197a8 <flatcc_json_parser_string_part@@Base>
   136dc:	cmp	r0, r5
   136e0:	beq	13cb8 <test@@Base+0x11f8>
   136e4:	mov	sl, r0
   136e8:	ldrb	r0, [r0]
   136ec:	cmp	r0, #34	; 0x22
   136f0:	bne	13708 <test@@Base+0xc48>
   136f4:	sub	r2, sl, r6
   136f8:	mov	r0, r9
   136fc:	mov	r1, r6
   13700:	bl	185a0 <flatcc_builder_create_string@@Base>
   13704:	b	137a0 <test@@Base+0xce0>
   13708:	mov	r0, r9
   1370c:	bl	16284 <flatcc_builder_start_string@@Base>
   13710:	mov	r0, r9
   13714:	sub	r9, sl, r6
   13718:	mov	r1, r9
   1371c:	bl	15a48 <flatcc_builder_extend_string@@Base>
   13720:	cmp	r0, #0
   13724:	beq	13e60 <test@@Base+0x13a0>
   13728:	mov	r1, r6
   1372c:	mov	r2, r9
   13730:	bl	12900 <memcpy@plt>
   13734:	ldr	r9, [sp, #12]
   13738:	mov	r0, r4
   1373c:	mov	r1, sl
   13740:	mov	r2, r5
   13744:	add	r3, sp, #20
   13748:	bl	1995c <flatcc_json_parser_string_escape@@Base>
   1374c:	ldrb	r2, [sp, #20]
   13750:	ldr	r1, [sp, #4]
   13754:	mov	r6, r0
   13758:	mov	r0, r9
   1375c:	bl	15b6c <flatcc_builder_append_string@@Base>
   13760:	mov	r0, r4
   13764:	mov	r1, r6
   13768:	mov	r2, r5
   1376c:	bl	197a8 <flatcc_json_parser_string_part@@Base>
   13770:	cmp	r0, r5
   13774:	beq	13cb8 <test@@Base+0x11f8>
   13778:	mov	sl, r0
   1377c:	sub	r2, r0, r6
   13780:	mov	r0, r9
   13784:	mov	r1, r6
   13788:	bl	15b6c <flatcc_builder_append_string@@Base>
   1378c:	ldrb	r0, [sl]
   13790:	cmp	r0, #34	; 0x22
   13794:	bne	13738 <test@@Base+0xc78>
   13798:	mov	r0, r9
   1379c:	bl	18728 <flatcc_builder_end_string@@Base>
   137a0:	mov	r6, r0
   137a4:	cmp	r0, #0
   137a8:	beq	13d78 <test@@Base+0x12b8>
   137ac:	mov	r0, r9
   137b0:	mov	r1, #10
   137b4:	bl	17728 <flatcc_builder_table_add_offset@@Base>
   137b8:	cmp	r0, #0
   137bc:	beq	13d78 <test@@Base+0x12b8>
   137c0:	cmp	sl, r5
   137c4:	str	r6, [r0]
   137c8:	beq	137e0 <test@@Base+0xd20>
   137cc:	ldrb	r0, [sl]
   137d0:	cmp	r0, #34	; 0x22
   137d4:	bne	137e0 <test@@Base+0xd20>
   137d8:	add	r1, sl, #1
   137dc:	b	1344c <test@@Base+0x98c>
   137e0:	mov	r0, r4
   137e4:	mov	r1, sl
   137e8:	mov	r2, r5
   137ec:	mov	r3, #20
   137f0:	bl	19770 <flatcc_json_parser_set_error@@Base>
   137f4:	mov	r1, r0
   137f8:	b	1344c <test@@Base+0x98c>
   137fc:	mov	r2, r1
   13800:	mov	r1, r2
   13804:	mov	r0, r4
   13808:	mov	r2, r5
   1380c:	mov	r3, #20
   13810:	bl	19770 <flatcc_json_parser_set_error@@Base>
   13814:	mov	r3, r0
   13818:	ldr	r9, [sp, #12]
   1381c:	sub	r0, r5, r3
   13820:	cmp	r0, #2
   13824:	blt	13890 <test@@Base+0xdd0>
   13828:	ldrb	r0, [r3]
   1382c:	cmp	r0, #32
   13830:	bls	1387c <test@@Base+0xdbc>
   13834:	mov	sl, r3
   13838:	cmp	sl, r5
   1383c:	beq	13c3c <test@@Base+0x117c>
   13840:	bcs	13c90 <test@@Base+0x11d0>
   13844:	ldrb	r0, [sl]
   13848:	cmp	r0, #58	; 0x3a
   1384c:	bne	13c90 <test@@Base+0x11d0>
   13850:	add	r1, sl, #1
   13854:	sub	r0, r5, r1
   13858:	cmp	r0, #2
   1385c:	blt	138c0 <test@@Base+0xe00>
   13860:	ldrb	r0, [r1]
   13864:	cmp	r0, #32
   13868:	bls	138b0 <test@@Base+0xdf0>
   1386c:	mov	sl, r1
   13870:	cmp	sl, r5
   13874:	bne	138d8 <test@@Base+0xe18>
   13878:	b	13c3c <test@@Base+0x117c>
   1387c:	bne	13890 <test@@Base+0xdd0>
   13880:	mov	sl, r3
   13884:	ldrb	r0, [sl, #1]!
   13888:	cmp	r0, #32
   1388c:	bhi	138a4 <test@@Base+0xde4>
   13890:	mov	r0, r4
   13894:	mov	r1, r3
   13898:	mov	r2, r5
   1389c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   138a0:	mov	sl, r0
   138a4:	cmp	sl, r5
   138a8:	bne	13840 <test@@Base+0xd80>
   138ac:	b	13c3c <test@@Base+0x117c>
   138b0:	bne	138c0 <test@@Base+0xe00>
   138b4:	ldrb	r0, [sl, #2]!
   138b8:	cmp	r0, #32
   138bc:	bhi	138d0 <test@@Base+0xe10>
   138c0:	mov	r0, r4
   138c4:	mov	r2, r5
   138c8:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   138cc:	mov	sl, r0
   138d0:	cmp	sl, r5
   138d4:	beq	13c3c <test@@Base+0x117c>
   138d8:	mov	r0, r9
   138dc:	mov	r1, #1
   138e0:	mov	r2, #8
   138e4:	mov	r3, #8
   138e8:	bl	178dc <flatcc_builder_table_add@@Base>
   138ec:	cmp	r0, #0
   138f0:	beq	13d78 <test@@Base+0x12b8>
   138f4:	mov	r3, r0
   138f8:	mov	r0, r4
   138fc:	mov	r1, sl
   13900:	mov	r2, r5
   13904:	bl	1afec <flatcc_json_parser_double@@Base>
   13908:	mov	r1, r0
   1390c:	cmp	sl, r0
   13910:	bne	1344c <test@@Base+0x98c>
   13914:	b	13d78 <test@@Base+0x12b8>
   13918:	add	r3, r2, #1
   1391c:	b	13980 <test@@Base+0xec0>
   13920:	add	r3, r2, #1
   13924:	b	13afc <test@@Base+0x103c>
   13928:	mov	r2, r5
   1392c:	cmp	r1, #46	; 0x2e
   13930:	bne	13114 <test@@Base+0x654>
   13934:	mov	r1, r2
   13938:	mov	r0, r4
   1393c:	mov	r2, r5
   13940:	mov	r3, #5
   13944:	b	13978 <test@@Base+0xeb8>
   13948:	mov	r2, r5
   1394c:	cmp	r1, #46	; 0x2e
   13950:	bne	1320c <test@@Base+0x74c>
   13954:	mov	r1, r2
   13958:	mov	r0, r4
   1395c:	mov	r2, r5
   13960:	mov	r3, #5
   13964:	b	13af4 <test@@Base+0x1034>
   13968:	mov	r1, r2
   1396c:	mov	r0, r4
   13970:	mov	r2, r5
   13974:	mov	r3, #20
   13978:	bl	19770 <flatcc_json_parser_set_error@@Base>
   1397c:	mov	r3, r0
   13980:	sub	r0, r5, r3
   13984:	cmp	r0, #2
   13988:	blt	139bc <test@@Base+0xefc>
   1398c:	ldrb	r0, [r3]
   13990:	cmp	r0, #32
   13994:	bls	139a8 <test@@Base+0xee8>
   13998:	mov	sl, r3
   1399c:	cmp	sl, r5
   139a0:	bne	139d8 <test@@Base+0xf18>
   139a4:	b	13c3c <test@@Base+0x117c>
   139a8:	bne	139bc <test@@Base+0xefc>
   139ac:	mov	sl, r3
   139b0:	ldrb	r0, [sl, #1]!
   139b4:	cmp	r0, #32
   139b8:	bhi	139d0 <test@@Base+0xf10>
   139bc:	mov	r0, r4
   139c0:	mov	r1, r3
   139c4:	mov	r2, r5
   139c8:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   139cc:	mov	sl, r0
   139d0:	cmp	sl, r5
   139d4:	beq	13c3c <test@@Base+0x117c>
   139d8:	bcs	13c90 <test@@Base+0x11d0>
   139dc:	ldrb	r0, [sl]
   139e0:	cmp	r0, #58	; 0x3a
   139e4:	bne	13c90 <test@@Base+0x11d0>
   139e8:	add	r1, sl, #1
   139ec:	sub	r0, r5, r1
   139f0:	cmp	r0, #2
   139f4:	blt	13a24 <test@@Base+0xf64>
   139f8:	ldrb	r0, [r1]
   139fc:	cmp	r0, #32
   13a00:	bls	13a14 <test@@Base+0xf54>
   13a04:	mov	sl, r1
   13a08:	cmp	sl, r5
   13a0c:	bne	13a3c <test@@Base+0xf7c>
   13a10:	b	13c3c <test@@Base+0x117c>
   13a14:	bne	13a24 <test@@Base+0xf64>
   13a18:	ldrb	r0, [sl, #2]!
   13a1c:	cmp	r0, #32
   13a20:	bhi	13a34 <test@@Base+0xf74>
   13a24:	mov	r0, r4
   13a28:	mov	r2, r5
   13a2c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13a30:	mov	sl, r0
   13a34:	cmp	sl, r5
   13a38:	beq	13c3c <test@@Base+0x117c>
   13a3c:	mov	r0, r9
   13a40:	mov	r1, #3
   13a44:	mov	r2, #8
   13a48:	mov	r3, #8
   13a4c:	bl	178dc <flatcc_builder_table_add@@Base>
   13a50:	cmp	r0, #0
   13a54:	beq	13d78 <test@@Base+0x12b8>
   13a58:	mov	r6, r0
   13a5c:	mov	r0, #0
   13a60:	mov	r1, sl
   13a64:	mov	r2, r5
   13a68:	sub	r3, fp, #44	; 0x2c
   13a6c:	str	r0, [fp, #-36]	; 0xffffffdc
   13a70:	str	r0, [fp, #-40]	; 0xffffffd8
   13a74:	str	r0, [fp, #-44]	; 0xffffffd4
   13a78:	str	r0, [r6]
   13a7c:	str	r0, [r6, #4]
   13a80:	sub	r0, fp, #40	; 0x28
   13a84:	str	r0, [sp]
   13a88:	mov	r0, r4
   13a8c:	bl	1bb08 <flatcc_json_parser_integer@@Base>
   13a90:	cmp	r0, sl
   13a94:	mov	r1, sl
   13a98:	beq	13444 <test@@Base+0x984>
   13a9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13aa0:	mov	r2, r0
   13aa4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13aa8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13aac:	cmp	r3, #0
   13ab0:	beq	13ad0 <test@@Base+0x1010>
   13ab4:	subs	r3, r0, #1
   13ab8:	sbcs	r3, r1, #-2147483648	; 0x80000000
   13abc:	bcs	133f0 <test@@Base+0x930>
   13ac0:	rsbs	r0, r0, #0
   13ac4:	rsc	r1, r1, #0
   13ac8:	strd	r0, [r6]
   13acc:	b	13440 <test@@Base+0x980>
   13ad0:	cmn	r1, #1
   13ad4:	ble	13418 <test@@Base+0x958>
   13ad8:	strd	r0, [r6]
   13adc:	b	13440 <test@@Base+0x980>
   13ae0:	andeq	fp, r0, r6, asr #9
   13ae4:	mov	r1, r2
   13ae8:	mov	r0, r4
   13aec:	mov	r2, r5
   13af0:	mov	r3, #20
   13af4:	bl	19770 <flatcc_json_parser_set_error@@Base>
   13af8:	mov	r3, r0
   13afc:	sub	r0, r5, r3
   13b00:	cmp	r0, #2
   13b04:	blt	13b38 <test@@Base+0x1078>
   13b08:	ldrb	r0, [r3]
   13b0c:	cmp	r0, #32
   13b10:	bls	13b24 <test@@Base+0x1064>
   13b14:	mov	sl, r3
   13b18:	cmp	sl, r5
   13b1c:	bne	13b54 <test@@Base+0x1094>
   13b20:	b	13c3c <test@@Base+0x117c>
   13b24:	bne	13b38 <test@@Base+0x1078>
   13b28:	mov	sl, r3
   13b2c:	ldrb	r0, [sl, #1]!
   13b30:	cmp	r0, #32
   13b34:	bhi	13b4c <test@@Base+0x108c>
   13b38:	mov	r0, r4
   13b3c:	mov	r1, r3
   13b40:	mov	r2, r5
   13b44:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13b48:	mov	sl, r0
   13b4c:	cmp	sl, r5
   13b50:	beq	13c3c <test@@Base+0x117c>
   13b54:	bcs	13c90 <test@@Base+0x11d0>
   13b58:	ldrb	r0, [sl]
   13b5c:	cmp	r0, #58	; 0x3a
   13b60:	bne	13c90 <test@@Base+0x11d0>
   13b64:	add	r1, sl, #1
   13b68:	sub	r0, r5, r1
   13b6c:	cmp	r0, #2
   13b70:	blt	13ba0 <test@@Base+0x10e0>
   13b74:	ldrb	r0, [r1]
   13b78:	cmp	r0, #32
   13b7c:	bls	13b90 <test@@Base+0x10d0>
   13b80:	mov	sl, r1
   13b84:	cmp	sl, r5
   13b88:	bne	13bb8 <test@@Base+0x10f8>
   13b8c:	b	13c3c <test@@Base+0x117c>
   13b90:	bne	13ba0 <test@@Base+0x10e0>
   13b94:	ldrb	r0, [sl, #2]!
   13b98:	cmp	r0, #32
   13b9c:	bhi	13bb0 <test@@Base+0x10f0>
   13ba0:	mov	r0, r4
   13ba4:	mov	r2, r5
   13ba8:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13bac:	mov	sl, r0
   13bb0:	cmp	sl, r5
   13bb4:	beq	13c3c <test@@Base+0x117c>
   13bb8:	mov	r0, r9
   13bbc:	mov	r1, #2
   13bc0:	mov	r2, #4
   13bc4:	mov	r3, #4
   13bc8:	bl	178dc <flatcc_builder_table_add@@Base>
   13bcc:	cmp	r0, #0
   13bd0:	beq	13d78 <test@@Base+0x12b8>
   13bd4:	mov	r6, r0
   13bd8:	mov	r0, #0
   13bdc:	mov	r1, sl
   13be0:	mov	r2, r5
   13be4:	sub	r3, fp, #44	; 0x2c
   13be8:	str	r0, [fp, #-36]	; 0xffffffdc
   13bec:	str	r0, [fp, #-40]	; 0xffffffd8
   13bf0:	str	r0, [fp, #-44]	; 0xffffffd4
   13bf4:	str	r0, [r6]
   13bf8:	sub	r0, fp, #40	; 0x28
   13bfc:	str	r0, [sp]
   13c00:	mov	r0, r4
   13c04:	bl	1bb08 <flatcc_json_parser_integer@@Base>
   13c08:	cmp	r0, sl
   13c0c:	mov	r1, sl
   13c10:	beq	13444 <test@@Base+0x984>
   13c14:	mov	r2, r0
   13c18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13c1c:	cmp	r0, #0
   13c20:	bne	133f0 <test@@Base+0x930>
   13c24:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13c28:	cmp	r0, #0
   13c2c:	bne	13418 <test@@Base+0x958>
   13c30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13c34:	str	r0, [r6]
   13c38:	b	13440 <test@@Base+0x980>
   13c3c:	ldr	r0, [pc, #548]	; 13e68 <test@@Base+0x13a8>
   13c40:	mov	r1, #13
   13c44:	mov	r2, #1
   13c48:	ldr	r0, [pc, r0]
   13c4c:	ldr	r3, [r0]
   13c50:	ldr	r0, [pc, #532]	; 13e6c <test@@Base+0x13ac>
   13c54:	add	r0, pc, r0
   13c58:	bl	1293c <fwrite@plt>
   13c5c:	mov	sl, r5
   13c60:	b	13d78 <test@@Base+0x12b8>
   13c64:	add	r0, sp, #24
   13c68:	mov	r1, r9
   13c6c:	mov	r2, r5
   13c70:	b	13ccc <test@@Base+0x120c>
   13c74:	ldr	r0, [pc, #500]	; 13e70 <test@@Base+0x13b0>
   13c78:	mov	r2, #123	; 0x7b
   13c7c:	ldr	r0, [pc, r0]
   13c80:	ldr	r0, [r0]
   13c84:	ldr	r1, [pc, #488]	; 13e74 <test@@Base+0x13b4>
   13c88:	add	r1, pc, r1
   13c8c:	b	13d5c <test@@Base+0x129c>
   13c90:	ldr	r0, [pc, #500]	; 13e8c <test@@Base+0x13cc>
   13c94:	mov	r2, #58	; 0x3a
   13c98:	ldr	r0, [pc, r0]
   13c9c:	ldr	r0, [r0]
   13ca0:	ldr	r1, [pc, #488]	; 13e90 <test@@Base+0x13d0>
   13ca4:	add	r1, pc, r1
   13ca8:	bl	12978 <fprintf@plt>
   13cac:	add	r0, sp, #24
   13cb0:	mov	r1, sl
   13cb4:	b	13d68 <test@@Base+0x12a8>
   13cb8:	mov	sl, r5
   13cbc:	b	13d78 <test@@Base+0x12b8>
   13cc0:	ldr	r2, [sp, #16]
   13cc4:	add	r0, sp, #24
   13cc8:	mov	r1, r9
   13ccc:	mov	r3, #13
   13cd0:	bl	19770 <flatcc_json_parser_set_error@@Base>
   13cd4:	ldr	r9, [sp, #12]
   13cd8:	b	13d74 <test@@Base+0x12b4>
   13cdc:	mov	r0, #125	; 0x7d
   13ce0:	cmp	r6, r5
   13ce4:	bcs	13d28 <test@@Base+0x1268>
   13ce8:	cmp	r0, #125	; 0x7d
   13cec:	bne	13d28 <test@@Base+0x1268>
   13cf0:	mov	r0, r9
   13cf4:	bl	16e68 <flatcc_builder_end_table@@Base>
   13cf8:	mov	r1, r0
   13cfc:	mov	r0, r9
   13d00:	bl	15060 <flatcc_builder_end_buffer@@Base>
   13d04:	add	r1, r6, #1
   13d08:	sub	r0, r5, r1
   13d0c:	cmp	r0, #2
   13d10:	blt	13e1c <test@@Base+0x135c>
   13d14:	ldrb	r0, [r1]
   13d18:	cmp	r0, #32
   13d1c:	bls	13e0c <test@@Base+0x134c>
   13d20:	mov	r6, r1
   13d24:	b	13e2c <test@@Base+0x136c>
   13d28:	ldr	r0, [pc, #364]	; 13e9c <test@@Base+0x13dc>
   13d2c:	mov	r2, #125	; 0x7d
   13d30:	ldr	r0, [pc, r0]
   13d34:	ldr	r0, [r0]
   13d38:	ldr	r1, [pc, #352]	; 13ea0 <test@@Base+0x13e0>
   13d3c:	add	r1, pc, r1
   13d40:	b	13d5c <test@@Base+0x129c>
   13d44:	ldr	r0, [pc, #328]	; 13e94 <test@@Base+0x13d4>
   13d48:	mov	r2, #58	; 0x3a
   13d4c:	ldr	r0, [pc, r0]
   13d50:	ldr	r0, [r0]
   13d54:	ldr	r1, [pc, #316]	; 13e98 <test@@Base+0x13d8>
   13d58:	add	r1, pc, r1
   13d5c:	bl	12978 <fprintf@plt>
   13d60:	add	r0, sp, #24
   13d64:	mov	r1, r6
   13d68:	mov	r2, r5
   13d6c:	mov	r3, #17
   13d70:	bl	19770 <flatcc_json_parser_set_error@@Base>
   13d74:	mov	sl, r0
   13d78:	ldr	r0, [pc, #256]	; 13e80 <test@@Base+0x13c0>
   13d7c:	ldr	r0, [pc, r0]
   13d80:	ldr	r4, [r0]
   13d84:	ldr	r0, [sp, #48]	; 0x30
   13d88:	cmp	r0, #0
   13d8c:	bne	13dac <test@@Base+0x12ec>
   13d90:	ldr	r0, [pc, #240]	; 13e88 <test@@Base+0x13c8>
   13d94:	mov	r1, #15
   13d98:	mov	r2, #1
   13d9c:	mov	r3, r4
   13da0:	add	r0, pc, r0
   13da4:	bl	1293c <fwrite@plt>
   13da8:	b	13de4 <test@@Base+0x1324>
   13dac:	ldr	r5, [sp, #28]
   13db0:	ldr	r6, [sp, #40]	; 0x28
   13db4:	ldr	r7, [sp, #60]	; 0x3c
   13db8:	bl	19748 <flatcc_json_parser_error_string@@Base>
   13dbc:	str	r0, [sp]
   13dc0:	add	r0, r7, #1
   13dc4:	mov	r2, r6
   13dc8:	ldr	r1, [pc, #180]	; 13e84 <test@@Base+0x13c4>
   13dcc:	sub	r3, r0, r5
   13dd0:	mov	r0, r4
   13dd4:	add	r1, pc, r1
   13dd8:	bl	12978 <fprintf@plt>
   13ddc:	mov	r0, r9
   13de0:	bl	14260 <flatcc_builder_reset@@Base>
   13de4:	ldr	r0, [sp, #48]	; 0x30
   13de8:	ldr	r1, [sp, #8]
   13dec:	str	r0, [r1]
   13df0:	mov	r0, sl
   13df4:	sub	sp, fp, #28
   13df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dfc:	add	r0, sp, #24
   13e00:	mov	r2, r5
   13e04:	mov	r3, #13
   13e08:	b	13d70 <test@@Base+0x12b0>
   13e0c:	bne	13e1c <test@@Base+0x135c>
   13e10:	ldrb	r0, [r6, #2]!
   13e14:	cmp	r0, #32
   13e18:	bhi	13e2c <test@@Base+0x136c>
   13e1c:	add	r0, sp, #24
   13e20:	mov	r2, r5
   13e24:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   13e28:	mov	r6, r0
   13e2c:	cmp	r6, r5
   13e30:	mov	sl, r5
   13e34:	beq	13d78 <test@@Base+0x12b8>
   13e38:	ldr	r0, [pc, #56]	; 13e78 <test@@Base+0x13b8>
   13e3c:	mov	r1, #26
   13e40:	mov	r2, #1
   13e44:	ldr	r0, [pc, r0]
   13e48:	ldr	r3, [r0]
   13e4c:	ldr	r0, [pc, #40]	; 13e7c <test@@Base+0x13bc>
   13e50:	add	r0, pc, r0
   13e54:	bl	1293c <fwrite@plt>
   13e58:	mov	sl, r6
   13e5c:	b	13d78 <test@@Base+0x12b8>
   13e60:	ldr	r9, [sp, #12]
   13e64:	b	13d78 <test@@Base+0x12b8>
   13e68:	andeq	sp, r1, ip, lsl #8
   13e6c:	andeq	sl, r0, fp, lsl #7
   13e70:	ldrdeq	sp, [r1], -r8
   13e74:	andeq	sl, r0, r5, ror #6
   13e78:	andeq	sp, r1, r0, lsl r2
   13e7c:			; <UNDEFINED> instruction: 0x0000a1b3
   13e80:	ldrdeq	sp, [r1], -r8
   13e84:	andeq	sl, r0, sl, asr #4
   13e88:	andeq	sl, r0, r9, lsl #5
   13e8c:			; <UNDEFINED> instruction: 0x0001d3bc
   13e90:	andeq	sl, r0, r9, asr #6
   13e94:	andeq	sp, r1, r8, lsl #6
   13e98:	muleq	r0, r5, r2
   13e9c:	andeq	sp, r1, r4, lsr #6
   13ea0:			; <UNDEFINED> instruction: 0x0000a2b1

00013ea4 <main@@Base>:
   13ea4:	push	{r4, sl, fp, lr}
   13ea8:	add	fp, sp, #8
   13eac:	sub	sp, sp, #240	; 0xf0
   13eb0:	mvn	r0, #0
   13eb4:	add	r4, sp, #4
   13eb8:	str	r0, [fp, #-12]
   13ebc:	mov	r0, r4
   13ec0:	bl	140bc <flatcc_builder_init@@Base>
   13ec4:	ldr	r1, [pc, #40]	; 13ef4 <main@@Base+0x50>
   13ec8:	movw	r0, #645	; 0x285
   13ecc:	sub	r3, fp, #12
   13ed0:	ldr	r1, [pc, r1]
   13ed4:	add	r2, r1, r0
   13ed8:	mov	r0, r4
   13edc:	bl	12ac0 <test@@Base>
   13ee0:	mov	r0, r4
   13ee4:	bl	14424 <flatcc_builder_clear@@Base>
   13ee8:	ldr	r0, [fp, #-12]
   13eec:	sub	sp, fp, #8
   13ef0:	pop	{r4, sl, fp, pc}
   13ef4:	andeq	sp, r1, ip, ror r1

00013ef8 <flatcc_builder_default_alloc@@Base>:
   13ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13efc:	add	fp, sp, #24
   13f00:	mov	r4, r1
   13f04:	cmp	r2, #0
   13f08:	beq	13f54 <flatcc_builder_default_alloc@@Base+0x5c>
   13f0c:	ldr	r0, [fp, #8]
   13f10:	mov	r8, r3
   13f14:	sub	r1, r0, #1
   13f18:	cmp	r1, #6
   13f1c:	bhi	13f80 <flatcc_builder_default_alloc@@Base+0x88>
   13f20:	add	r3, pc, #8
   13f24:	mov	r0, #256	; 0x100
   13f28:	ldr	r1, [r3, r1, lsl #2]
   13f2c:	add	pc, r3, r1
   13f30:	andeq	r0, r0, r4, rrx
   13f34:	andeq	r0, r0, r0, asr r0
   13f38:	andeq	r0, r0, r0, asr r0
   13f3c:	andeq	r0, r0, ip, lsl r0
   13f40:	andeq	r0, r0, r8, asr r0
   13f44:	andeq	r0, r0, r0, asr r0
   13f48:	andeq	r0, r0, r0, rrx
   13f4c:	mov	r0, #288	; 0x120
   13f50:	b	13f94 <flatcc_builder_default_alloc@@Base+0x9c>
   13f54:	ldr	r0, [r4]
   13f58:	cmp	r0, #0
   13f5c:	moveq	r6, #0
   13f60:	moveq	r0, r6
   13f64:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f68:	bl	128f4 <free@plt>
   13f6c:	mov	r6, #0
   13f70:	mov	r0, r6
   13f74:	str	r6, [r4]
   13f78:	str	r6, [r4, #4]
   13f7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f80:	mov	r0, #32
   13f84:	b	13f94 <flatcc_builder_default_alloc@@Base+0x9c>
   13f88:	mov	r0, r2
   13f8c:	b	13f94 <flatcc_builder_default_alloc@@Base+0x9c>
   13f90:	mov	r0, #64	; 0x40
   13f94:	mov	r7, r0
   13f98:	lsl	r0, r0, #1
   13f9c:	cmp	r7, r2
   13fa0:	bcc	13f94 <flatcc_builder_default_alloc@@Base+0x9c>
   13fa4:	ldr	r0, [r4, #4]
   13fa8:	mov	r6, #0
   13fac:	cmp	r0, r2
   13fb0:	lsrcs	r0, r0, #1
   13fb4:	cmpcs	r0, r7
   13fb8:	bcs	13ff0 <flatcc_builder_default_alloc@@Base+0xf8>
   13fbc:	ldr	r0, [r4]
   13fc0:	mov	r1, r7
   13fc4:	bl	12930 <realloc@plt>
   13fc8:	cmp	r0, #0
   13fcc:	mvneq	r6, #0
   13fd0:	moveq	r0, r6
   13fd4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fd8:	cmp	r8, #0
   13fdc:	mov	r5, r0
   13fe0:	ldrne	r1, [r4, #4]
   13fe4:	cmpne	r7, r1
   13fe8:	bhi	13ff8 <flatcc_builder_default_alloc@@Base+0x100>
   13fec:	stm	r4, {r5, r7}
   13ff0:	mov	r0, r6
   13ff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ff8:	add	r0, r5, r1
   13ffc:	sub	r2, r7, r1
   14000:	mov	r1, #0
   14004:	bl	12990 <memset@plt>
   14008:	b	13fec <flatcc_builder_default_alloc@@Base+0xf4>

0001400c <flatcc_builder_flush_vtable_cache@@Base>:
   1400c:	push	{r4, r5, fp, lr}
   14010:	add	fp, sp, #8
   14014:	mov	r4, r0
   14018:	ldr	r0, [r0, #116]	; 0x74
   1401c:	cmp	r0, #0
   14020:	popeq	{r4, r5, fp, pc}
   14024:	ldr	r0, [r4, #92]	; 0x5c
   14028:	ldr	r2, [r4, #96]	; 0x60
   1402c:	mov	r1, #0
   14030:	mov	r5, #0
   14034:	bl	12990 <memset@plt>
   14038:	mov	r0, #16
   1403c:	str	r5, [r4, #120]	; 0x78
   14040:	str	r0, [r4, #124]	; 0x7c
   14044:	pop	{r4, r5, fp, pc}

00014048 <flatcc_builder_custom_init@@Base>:
   14048:	push	{r4, r5, r6, r7, fp, lr}
   1404c:	add	fp, sp, #16
   14050:	mov	r6, r2
   14054:	mov	r7, r1
   14058:	mov	r1, #0
   1405c:	mov	r2, #232	; 0xe8
   14060:	mov	r5, r3
   14064:	mov	r4, r0
   14068:	bl	12990 <memset@plt>
   1406c:	ldr	r0, [fp, #8]
   14070:	cmp	r7, #0
   14074:	bne	1408c <flatcc_builder_custom_init@@Base+0x44>
   14078:	mov	r1, #1
   1407c:	add	r6, r4, #188	; 0xbc
   14080:	str	r1, [r4, #184]	; 0xb8
   14084:	ldr	r7, [pc, #40]	; 140b4 <flatcc_builder_custom_init@@Base+0x6c>
   14088:	ldr	r7, [pc, r7]
   1408c:	ldr	r1, [pc, #36]	; 140b8 <flatcc_builder_custom_init@@Base+0x70>
   14090:	cmp	r5, #0
   14094:	ldr	r1, [pc, r1]
   14098:	str	r6, [r4, #36]	; 0x24
   1409c:	str	r0, [r4, #40]	; 0x28
   140a0:	mov	r0, #0
   140a4:	str	r7, [r4, #44]	; 0x2c
   140a8:	movne	r1, r5
   140ac:	str	r1, [r4, #48]	; 0x30
   140b0:	pop	{r4, r5, r6, r7, fp, pc}
   140b4:	ldrdeq	ip, [r1], -r8
   140b8:	andeq	ip, r1, r8, asr #31

000140bc <flatcc_builder_init@@Base>:
   140bc:	push	{r4, r5, fp, lr}
   140c0:	add	fp, sp, #8
   140c4:	mov	r1, #0
   140c8:	mov	r2, #232	; 0xe8
   140cc:	mov	r4, r0
   140d0:	mov	r5, #0
   140d4:	bl	12990 <memset@plt>
   140d8:	mov	r0, #1
   140dc:	str	r0, [r4, #184]	; 0xb8
   140e0:	add	r0, r4, #188	; 0xbc
   140e4:	ldr	r1, [pc, #32]	; 1410c <flatcc_builder_init@@Base+0x50>
   140e8:	ldr	r1, [pc, r1]
   140ec:	ldr	r2, [pc, #28]	; 14110 <flatcc_builder_init@@Base+0x54>
   140f0:	ldr	r2, [pc, r2]
   140f4:	str	r0, [r4, #36]	; 0x24
   140f8:	mov	r0, #0
   140fc:	str	r5, [r4, #40]	; 0x28
   14100:	str	r2, [r4, #44]	; 0x2c
   14104:	str	r1, [r4, #48]	; 0x30
   14108:	pop	{r4, r5, fp, pc}
   1410c:	andeq	ip, r1, r4, ror pc
   14110:	andeq	ip, r1, r0, ror pc

00014114 <flatcc_builder_custom_reset@@Base>:
   14114:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14118:	add	fp, sp, #24
   1411c:	sub	sp, sp, #8
   14120:	mov	r9, r2
   14124:	mov	r8, r1
   14128:	mov	r4, r0
   1412c:	add	r7, r0, #52	; 0x34
   14130:	mov	r5, #0
   14134:	ldr	r0, [r7]
   14138:	cmp	r0, #0
   1413c:	beq	14184 <flatcc_builder_custom_reset@@Base+0x70>
   14140:	cmp	r9, #0
   14144:	cmpne	r5, #5
   14148:	beq	14174 <flatcc_builder_custom_reset@@Base+0x60>
   1414c:	ldr	r0, [r4, #40]	; 0x28
   14150:	ldr	r6, [r4, #48]	; 0x30
   14154:	mov	r1, r7
   14158:	mov	r2, #1
   1415c:	mov	r3, #1
   14160:	str	r5, [sp]
   14164:	blx	r6
   14168:	cmp	r0, #0
   1416c:	bne	14224 <flatcc_builder_custom_reset@@Base+0x110>
   14170:	ldr	r0, [r7]
   14174:	ldr	r2, [r7, #4]
   14178:	mov	r1, #0
   1417c:	bl	12990 <memset@plt>
   14180:	b	14190 <flatcc_builder_custom_reset@@Base+0x7c>
   14184:	ldr	r0, [r7, #4]
   14188:	cmp	r0, #0
   1418c:	bne	14234 <flatcc_builder_custom_reset@@Base+0x120>
   14190:	add	r5, r5, #1
   14194:	add	r7, r7, #8
   14198:	cmp	r5, #8
   1419c:	bcc	14134 <flatcc_builder_custom_reset@@Base+0x20>
   141a0:	mov	r0, #0
   141a4:	vmov.i32	q8, #0	; 0x00000000
   141a8:	mov	r5, #0
   141ac:	str	r0, [r4, #120]	; 0x78
   141b0:	ldr	r1, [r4, #124]	; 0x7c
   141b4:	cmp	r1, #0
   141b8:	movne	r1, #16
   141bc:	strne	r1, [r4, #124]	; 0x7c
   141c0:	add	r1, r4, #148	; 0x94
   141c4:	strh	r0, [r4, #128]	; 0x80
   141c8:	str	r0, [r4, #136]	; 0x88
   141cc:	str	r0, [r4, #140]	; 0x8c
   141d0:	str	r0, [r4, #32]
   141d4:	cmp	r8, #0
   141d8:	vst1.32	{d16-d17}, [r1]
   141dc:	ldr	r2, [r4, #60]	; 0x3c
   141e0:	ldr	r1, [r4, #52]	; 0x34
   141e4:	ldr	r3, [r4, #76]	; 0x4c
   141e8:	str	r2, [r4, #16]
   141ec:	str	r0, [r4, #20]
   141f0:	str	r0, [r4, #24]
   141f4:	movne	r0, #0
   141f8:	str	r3, [r4]
   141fc:	str	r1, [r4, #4]
   14200:	strne	r0, [r4, #172]	; 0xac
   14204:	strne	r0, [r4, #176]	; 0xb0
   14208:	strne	r0, [r4, #180]	; 0xb4
   1420c:	ldr	r0, [r4, #184]	; 0xb8
   14210:	cmp	r0, #0
   14214:	beq	14228 <flatcc_builder_custom_reset@@Base+0x114>
   14218:	add	r0, r4, #188	; 0xbc
   1421c:	bl	18cf8 <flatcc_emitter_reset@@Base>
   14220:	b	14228 <flatcc_builder_custom_reset@@Base+0x114>
   14224:	mvn	r5, #0
   14228:	mov	r0, r5
   1422c:	sub	sp, fp, #24
   14230:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14234:	ldr	r0, [pc, #24]	; 14254 <flatcc_builder_custom_reset@@Base+0x140>
   14238:	ldr	r1, [pc, #24]	; 14258 <flatcc_builder_custom_reset@@Base+0x144>
   1423c:	ldr	r3, [pc, #24]	; 1425c <flatcc_builder_custom_reset@@Base+0x148>
   14240:	movw	r2, #434	; 0x1b2
   14244:	add	r0, pc, r0
   14248:	add	r1, pc, r1
   1424c:	add	r3, pc, r3
   14250:	bl	129c0 <__assert_fail@plt>
   14254:	strdeq	r9, [r0], -r5
   14258:	andeq	sl, r0, r3
   1425c:	andeq	sl, r0, ip, asr r0

00014260 <flatcc_builder_reset@@Base>:
   14260:	push	{r4, sl, fp, lr}
   14264:	add	fp, sp, #8
   14268:	mov	r4, r0
   1426c:	ldr	r0, [r0, #52]	; 0x34
   14270:	ldr	r2, [r4, #56]	; 0x38
   14274:	cmp	r0, #0
   14278:	beq	14288 <flatcc_builder_reset@@Base+0x28>
   1427c:	mov	r1, #0
   14280:	bl	12990 <memset@plt>
   14284:	b	14290 <flatcc_builder_reset@@Base+0x30>
   14288:	cmp	r2, #0
   1428c:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   14290:	ldr	r0, [r4, #60]	; 0x3c
   14294:	ldr	r2, [r4, #64]	; 0x40
   14298:	cmp	r0, #0
   1429c:	beq	142ac <flatcc_builder_reset@@Base+0x4c>
   142a0:	mov	r1, #0
   142a4:	bl	12990 <memset@plt>
   142a8:	b	142b4 <flatcc_builder_reset@@Base+0x54>
   142ac:	cmp	r2, #0
   142b0:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   142b4:	ldr	r0, [r4, #68]	; 0x44
   142b8:	ldr	r2, [r4, #72]	; 0x48
   142bc:	cmp	r0, #0
   142c0:	beq	142d0 <flatcc_builder_reset@@Base+0x70>
   142c4:	mov	r1, #0
   142c8:	bl	12990 <memset@plt>
   142cc:	b	142d8 <flatcc_builder_reset@@Base+0x78>
   142d0:	cmp	r2, #0
   142d4:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   142d8:	ldr	r0, [r4, #76]	; 0x4c
   142dc:	ldr	r2, [r4, #80]	; 0x50
   142e0:	cmp	r0, #0
   142e4:	beq	142f4 <flatcc_builder_reset@@Base+0x94>
   142e8:	mov	r1, #0
   142ec:	bl	12990 <memset@plt>
   142f0:	b	142fc <flatcc_builder_reset@@Base+0x9c>
   142f4:	cmp	r2, #0
   142f8:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   142fc:	ldr	r0, [r4, #84]	; 0x54
   14300:	ldr	r2, [r4, #88]	; 0x58
   14304:	cmp	r0, #0
   14308:	beq	14318 <flatcc_builder_reset@@Base+0xb8>
   1430c:	mov	r1, #0
   14310:	bl	12990 <memset@plt>
   14314:	b	14320 <flatcc_builder_reset@@Base+0xc0>
   14318:	cmp	r2, #0
   1431c:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   14320:	ldr	r0, [r4, #92]	; 0x5c
   14324:	ldr	r2, [r4, #96]	; 0x60
   14328:	cmp	r0, #0
   1432c:	beq	1433c <flatcc_builder_reset@@Base+0xdc>
   14330:	mov	r1, #0
   14334:	bl	12990 <memset@plt>
   14338:	b	14344 <flatcc_builder_reset@@Base+0xe4>
   1433c:	cmp	r2, #0
   14340:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   14344:	ldr	r0, [r4, #100]	; 0x64
   14348:	ldr	r2, [r4, #104]	; 0x68
   1434c:	cmp	r0, #0
   14350:	beq	14360 <flatcc_builder_reset@@Base+0x100>
   14354:	mov	r1, #0
   14358:	bl	12990 <memset@plt>
   1435c:	b	14368 <flatcc_builder_reset@@Base+0x108>
   14360:	cmp	r2, #0
   14364:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   14368:	ldr	r0, [r4, #108]	; 0x6c
   1436c:	ldr	r2, [r4, #112]	; 0x70
   14370:	cmp	r0, #0
   14374:	beq	14384 <flatcc_builder_reset@@Base+0x124>
   14378:	mov	r1, #0
   1437c:	bl	12990 <memset@plt>
   14380:	b	1438c <flatcc_builder_reset@@Base+0x12c>
   14384:	cmp	r2, #0
   14388:	bne	143f8 <flatcc_builder_reset@@Base+0x198>
   1438c:	mov	r0, #0
   14390:	str	r0, [r4, #120]	; 0x78
   14394:	ldr	r1, [r4, #124]	; 0x7c
   14398:	cmp	r1, #0
   1439c:	movne	r1, #16
   143a0:	strne	r1, [r4, #124]	; 0x7c
   143a4:	vmov.i32	q8, #0	; 0x00000000
   143a8:	add	r1, r4, #148	; 0x94
   143ac:	strh	r0, [r4, #128]	; 0x80
   143b0:	str	r0, [r4, #136]	; 0x88
   143b4:	str	r0, [r4, #140]	; 0x8c
   143b8:	str	r0, [r4, #32]
   143bc:	vst1.32	{d16-d17}, [r1]
   143c0:	ldr	r1, [r4, #184]	; 0xb8
   143c4:	ldr	ip, [r4, #52]	; 0x34
   143c8:	ldr	r2, [r4, #60]	; 0x3c
   143cc:	ldr	r3, [r4, #76]	; 0x4c
   143d0:	cmp	r1, #0
   143d4:	str	r2, [r4, #16]
   143d8:	str	r0, [r4, #20]
   143dc:	str	r0, [r4, #24]
   143e0:	stm	r4, {r3, ip}
   143e4:	beq	143f0 <flatcc_builder_reset@@Base+0x190>
   143e8:	add	r0, r4, #188	; 0xbc
   143ec:	bl	18cf8 <flatcc_emitter_reset@@Base>
   143f0:	mov	r0, #0
   143f4:	pop	{r4, sl, fp, pc}
   143f8:	ldr	r0, [pc, #24]	; 14418 <flatcc_builder_reset@@Base+0x1b8>
   143fc:	ldr	r1, [pc, #24]	; 1441c <flatcc_builder_reset@@Base+0x1bc>
   14400:	ldr	r3, [pc, #24]	; 14420 <flatcc_builder_reset@@Base+0x1c0>
   14404:	movw	r2, #434	; 0x1b2
   14408:	add	r0, pc, r0
   1440c:	add	r1, pc, r1
   14410:	add	r3, pc, r3
   14414:	bl	129c0 <__assert_fail@plt>
   14418:	andeq	r9, r0, r1, lsr lr
   1441c:	andeq	r9, r0, pc, lsr lr
   14420:	muleq	r0, r8, lr

00014424 <flatcc_builder_clear@@Base>:
   14424:	push	{r4, sl, fp, lr}
   14428:	add	fp, sp, #8
   1442c:	sub	sp, sp, #8
   14430:	mov	r4, r0
   14434:	ldr	r0, [r0, #40]	; 0x28
   14438:	mov	r1, #0
   1443c:	mov	r2, #0
   14440:	mov	r3, #0
   14444:	ldr	ip, [r4, #48]	; 0x30
   14448:	str	r1, [sp]
   1444c:	add	r1, r4, #52	; 0x34
   14450:	blx	ip
   14454:	ldr	r0, [r4, #40]	; 0x28
   14458:	ldr	ip, [r4, #48]	; 0x30
   1445c:	mov	r1, #1
   14460:	mov	r2, #0
   14464:	mov	r3, #0
   14468:	str	r1, [sp]
   1446c:	add	r1, r4, #60	; 0x3c
   14470:	blx	ip
   14474:	ldr	r0, [r4, #40]	; 0x28
   14478:	ldr	ip, [r4, #48]	; 0x30
   1447c:	mov	r1, #2
   14480:	mov	r2, #0
   14484:	mov	r3, #0
   14488:	str	r1, [sp]
   1448c:	add	r1, r4, #68	; 0x44
   14490:	blx	ip
   14494:	ldr	r0, [r4, #40]	; 0x28
   14498:	ldr	ip, [r4, #48]	; 0x30
   1449c:	mov	r1, #3
   144a0:	mov	r2, #0
   144a4:	mov	r3, #0
   144a8:	str	r1, [sp]
   144ac:	add	r1, r4, #76	; 0x4c
   144b0:	blx	ip
   144b4:	ldr	r0, [r4, #40]	; 0x28
   144b8:	ldr	ip, [r4, #48]	; 0x30
   144bc:	mov	r1, #4
   144c0:	mov	r2, #0
   144c4:	mov	r3, #0
   144c8:	str	r1, [sp]
   144cc:	add	r1, r4, #84	; 0x54
   144d0:	blx	ip
   144d4:	ldr	r0, [r4, #40]	; 0x28
   144d8:	ldr	ip, [r4, #48]	; 0x30
   144dc:	mov	r1, #5
   144e0:	mov	r2, #0
   144e4:	mov	r3, #0
   144e8:	str	r1, [sp]
   144ec:	add	r1, r4, #92	; 0x5c
   144f0:	blx	ip
   144f4:	ldr	r0, [r4, #40]	; 0x28
   144f8:	ldr	ip, [r4, #48]	; 0x30
   144fc:	mov	r1, #6
   14500:	mov	r2, #0
   14504:	mov	r3, #0
   14508:	str	r1, [sp]
   1450c:	add	r1, r4, #100	; 0x64
   14510:	blx	ip
   14514:	ldr	r0, [r4, #40]	; 0x28
   14518:	ldr	ip, [r4, #48]	; 0x30
   1451c:	mov	r1, #7
   14520:	mov	r2, #0
   14524:	mov	r3, #0
   14528:	str	r1, [sp]
   1452c:	add	r1, r4, #108	; 0x6c
   14530:	blx	ip
   14534:	ldr	r0, [r4, #184]	; 0xb8
   14538:	cmp	r0, #0
   1453c:	beq	14548 <flatcc_builder_clear@@Base+0x124>
   14540:	add	r0, r4, #188	; 0xbc
   14544:	bl	18dc4 <flatcc_emitter_clear@@Base>
   14548:	mov	r0, r4
   1454c:	mov	r1, #0
   14550:	mov	r2, #232	; 0xe8
   14554:	sub	sp, fp, #8
   14558:	pop	{r4, sl, fp, lr}
   1455c:	b	12990 <memset@plt>

00014560 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14560:	push	{r4, r5, r6, r7, fp, lr}
   14564:	add	fp, sp, #16
   14568:	sub	sp, sp, #8
   1456c:	mov	r4, r0
   14570:	ldr	r0, [r0, #112]	; 0x70
   14574:	add	r1, r1, #7
   14578:	ldr	r7, [r4, #228]	; 0xe4
   1457c:	bic	r5, r1, #3
   14580:	add	r6, r4, #108	; 0x6c
   14584:	add	r2, r7, r5
   14588:	cmp	r2, r0
   1458c:	bls	145b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   14590:	ldr	r0, [r4, #40]	; 0x28
   14594:	ldr	ip, [r4, #48]	; 0x30
   14598:	mov	r1, #7
   1459c:	mov	r3, #0
   145a0:	str	r1, [sp]
   145a4:	mov	r1, r6
   145a8:	blx	ip
   145ac:	cmp	r0, #0
   145b0:	bne	14600 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   145b4:	ldr	r0, [r6]
   145b8:	adds	r6, r0, r7
   145bc:	beq	145f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   145c0:	mov	r0, r6
   145c4:	mov	r1, #0
   145c8:	mov	r2, r5
   145cc:	bl	12990 <memset@plt>
   145d0:	ldr	r0, [r4, #224]	; 0xe0
   145d4:	str	r0, [r6], #4
   145d8:	ldr	r0, [r4, #228]	; 0xe4
   145dc:	add	r1, r0, #4
   145e0:	add	r0, r0, r5
   145e4:	str	r1, [r4, #224]	; 0xe0
   145e8:	str	r0, [r4, #228]	; 0xe4
   145ec:	b	145f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   145f0:	mov	r6, #0
   145f4:	mov	r0, r6
   145f8:	sub	sp, fp, #16
   145fc:	pop	{r4, r5, r6, r7, fp, pc}
   14600:	ldr	r0, [pc, #24]	; 14620 <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   14604:	ldr	r1, [pc, #24]	; 14624 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   14608:	ldr	r3, [pc, #24]	; 14628 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   1460c:	mov	r2, #308	; 0x134
   14610:	add	r0, pc, r0
   14614:	add	r1, pc, r1
   14618:	add	r3, pc, r3
   1461c:	bl	129c0 <__assert_fail@plt>
   14620:	strdeq	sl, [r0], -r8
   14624:	andeq	r9, r0, r7, lsr ip
   14628:	andeq	sl, r0, sl, lsr #24

0001462c <flatcc_builder_enter_user_frame@@Base>:
   1462c:	push	{r4, r5, r6, r7, fp, lr}
   14630:	add	fp, sp, #16
   14634:	sub	sp, sp, #8
   14638:	mov	r4, r0
   1463c:	ldr	r0, [r0, #112]	; 0x70
   14640:	add	r1, r1, #7
   14644:	ldr	r7, [r4, #228]	; 0xe4
   14648:	bic	r5, r1, #3
   1464c:	add	r6, r4, #108	; 0x6c
   14650:	add	r2, r7, r5
   14654:	cmp	r2, r0
   14658:	bls	14680 <flatcc_builder_enter_user_frame@@Base+0x54>
   1465c:	ldr	r0, [r4, #40]	; 0x28
   14660:	ldr	ip, [r4, #48]	; 0x30
   14664:	mov	r1, #7
   14668:	mov	r3, #0
   1466c:	str	r1, [sp]
   14670:	mov	r1, r6
   14674:	blx	ip
   14678:	cmp	r0, #0
   1467c:	bne	146c8 <flatcc_builder_enter_user_frame@@Base+0x9c>
   14680:	ldr	r0, [r6]
   14684:	adds	r6, r0, r7
   14688:	moveq	r0, #0
   1468c:	subeq	sp, fp, #16
   14690:	popeq	{r4, r5, r6, r7, fp, pc}
   14694:	mov	r0, r6
   14698:	mov	r1, #0
   1469c:	mov	r2, r5
   146a0:	bl	12990 <memset@plt>
   146a4:	ldr	r0, [r4, #224]	; 0xe0
   146a8:	str	r0, [r6]
   146ac:	ldr	r1, [r4, #228]	; 0xe4
   146b0:	add	r0, r1, #4
   146b4:	add	r1, r1, r5
   146b8:	str	r0, [r4, #224]	; 0xe0
   146bc:	str	r1, [r4, #228]	; 0xe4
   146c0:	sub	sp, fp, #16
   146c4:	pop	{r4, r5, r6, r7, fp, pc}
   146c8:	ldr	r0, [pc, #24]	; 146e8 <flatcc_builder_enter_user_frame@@Base+0xbc>
   146cc:	ldr	r1, [pc, #24]	; 146ec <flatcc_builder_enter_user_frame@@Base+0xc0>
   146d0:	ldr	r3, [pc, #24]	; 146f0 <flatcc_builder_enter_user_frame@@Base+0xc4>
   146d4:	mov	r2, #308	; 0x134
   146d8:	add	r0, pc, r0
   146dc:	add	r1, pc, r1
   146e0:	add	r3, pc, r3
   146e4:	bl	129c0 <__assert_fail@plt>
   146e8:	andeq	sl, r0, r0, lsr sp
   146ec:	andeq	r9, r0, pc, ror #22
   146f0:	andeq	sl, r0, r2, ror #22

000146f4 <flatcc_builder_exit_user_frame@@Base>:
   146f4:	ldr	r1, [r0, #224]	; 0xe0
   146f8:	cmp	r1, #0
   146fc:	subne	r2, r1, #4
   14700:	strne	r2, [r0, #228]	; 0xe4
   14704:	ldrne	r2, [r0, #108]	; 0x6c
   14708:	addne	r1, r2, r1
   1470c:	ldrne	r1, [r1, #-4]
   14710:	strne	r1, [r0, #224]	; 0xe0
   14714:	movne	r0, r1
   14718:	bxne	lr
   1471c:	push	{fp, lr}
   14720:	mov	fp, sp
   14724:	ldr	r0, [pc, #24]	; 14744 <flatcc_builder_exit_user_frame@@Base+0x50>
   14728:	ldr	r1, [pc, #24]	; 14748 <flatcc_builder_exit_user_frame@@Base+0x54>
   1472c:	ldr	r3, [pc, #24]	; 1474c <flatcc_builder_exit_user_frame@@Base+0x58>
   14730:	movw	r2, #542	; 0x21e
   14734:	add	r0, pc, r0
   14738:	add	r1, pc, r1
   1473c:	add	r3, pc, r3
   14740:	bl	129c0 <__assert_fail@plt>
   14744:			; <UNDEFINED> instruction: 0x00009bb2
   14748:	andeq	r9, r0, r3, lsl fp
   1474c:	andeq	r9, r0, r3, asr #23

00014750 <flatcc_builder_exit_user_frame_at@@Base>:
   14750:	push	{fp, lr}
   14754:	mov	fp, sp
   14758:	ldr	r2, [r0, #224]	; 0xe0
   1475c:	cmp	r2, r1
   14760:	bcc	147ac <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   14764:	cmp	r1, #0
   14768:	str	r1, [r0, #224]	; 0xe0
   1476c:	subne	r2, r1, #4
   14770:	strne	r2, [r0, #228]	; 0xe4
   14774:	ldrne	r2, [r0, #108]	; 0x6c
   14778:	addne	r1, r2, r1
   1477c:	ldrne	r1, [r1, #-4]
   14780:	strne	r1, [r0, #224]	; 0xe0
   14784:	movne	r0, r1
   14788:	popne	{fp, pc}
   1478c:	ldr	r0, [pc, #68]	; 147d8 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   14790:	ldr	r1, [pc, #68]	; 147dc <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   14794:	ldr	r3, [pc, #68]	; 147e0 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   14798:	movw	r2, #542	; 0x21e
   1479c:	add	r0, pc, r0
   147a0:	add	r1, pc, r1
   147a4:	add	r3, pc, r3
   147a8:	bl	129c0 <__assert_fail@plt>
   147ac:	ldr	r0, [pc, #24]	; 147cc <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   147b0:	ldr	r1, [pc, #24]	; 147d0 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   147b4:	ldr	r3, [pc, #24]	; 147d4 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   147b8:	movw	r2, #551	; 0x227
   147bc:	add	r0, pc, r0
   147c0:	add	r1, pc, r1
   147c4:	add	r3, pc, r3
   147c8:	bl	129c0 <__assert_fail@plt>
   147cc:	andeq	r9, r0, sp, ror fp
   147d0:	andeq	r9, r0, fp, lsl #21
   147d4:	muleq	r0, r4, fp
   147d8:	andeq	r9, r0, sl, asr #22
   147dc:	andeq	r9, r0, fp, lsr #21
   147e0:	andeq	r9, r0, fp, asr fp

000147e4 <flatcc_builder_get_current_user_frame@@Base>:
   147e4:	ldr	r0, [r0, #224]	; 0xe0
   147e8:	bx	lr

000147ec <flatcc_builder_get_user_frame_ptr@@Base>:
   147ec:	ldr	r0, [r0, #108]	; 0x6c
   147f0:	add	r0, r0, r1
   147f4:	bx	lr

000147f8 <flatcc_builder_embed_buffer@@Base>:
   147f8:	push	{r4, r5, r6, r7, fp, lr}
   147fc:	add	fp, sp, #16
   14800:	sub	sp, sp, #88	; 0x58
   14804:	mov	r4, r0
   14808:	ldr	r0, [fp, #8]
   1480c:	mov	r5, r3
   14810:	mov	r7, r2
   14814:	mov	r2, r1
   14818:	sub	r1, fp, #18
   1481c:	strh	r0, [fp, #-18]	; 0xffffffee
   14820:	mov	r0, r4
   14824:	ldr	r3, [r4, #152]	; 0x98
   14828:	cmp	r3, #0
   1482c:	movwne	r3, #1
   14830:	bl	14984 <flatcc_builder_embed_buffer@@Base+0x18c>
   14834:	ldr	r1, [fp, #12]
   14838:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1483c:	ldr	r0, [r4, #136]	; 0x88
   14840:	mov	r2, #0
   14844:	str	r2, [sp, #8]
   14848:	str	r2, [sp, #12]
   1484c:	and	r1, r1, #2
   14850:	sub	r3, r3, #1
   14854:	add	r1, r5, r1, lsl #1
   14858:	sub	r1, r0, r1
   1485c:	and	r3, r1, r3
   14860:	add	r1, r3, r5
   14864:	str	r1, [fp, #-24]	; 0xffffffe8
   14868:	ldr	r1, [r4, #152]	; 0x98
   1486c:	cmp	r1, #0
   14870:	mov	r1, #0
   14874:	beq	14894 <flatcc_builder_embed_buffer@@Base+0x9c>
   14878:	sub	r1, fp, #24
   1487c:	mov	r2, #1
   14880:	str	r1, [sp, #16]
   14884:	mov	r1, #4
   14888:	str	r1, [sp, #8]
   1488c:	str	r1, [sp, #20]
   14890:	str	r2, [sp, #12]
   14894:	cmp	r5, #0
   14898:	beq	148bc <flatcc_builder_embed_buffer@@Base+0xc4>
   1489c:	add	r6, sp, #8
   148a0:	add	r1, r1, r5
   148a4:	add	r6, r6, r2, lsl #3
   148a8:	add	r2, r2, #1
   148ac:	str	r1, [sp, #8]
   148b0:	str	r7, [r6, #8]
   148b4:	str	r5, [r6, #12]
   148b8:	str	r2, [sp, #12]
   148bc:	cmp	r3, #0
   148c0:	beq	148ec <flatcc_builder_embed_buffer@@Base+0xf4>
   148c4:	add	r1, r1, r3
   148c8:	add	r7, sp, #8
   148cc:	str	r1, [sp, #8]
   148d0:	add	r7, r7, r2, lsl #3
   148d4:	add	r2, r2, #1
   148d8:	ldr	r6, [pc, #136]	; 14968 <flatcc_builder_embed_buffer@@Base+0x170>
   148dc:	ldr	r6, [pc, r6]
   148e0:	str	r6, [r7, #8]
   148e4:	str	r3, [r7, #12]
   148e8:	str	r2, [sp, #12]
   148ec:	cmp	r1, #0
   148f0:	ble	14948 <flatcc_builder_embed_buffer@@Base+0x150>
   148f4:	sub	r5, r0, r1
   148f8:	ldr	r0, [r4, #36]	; 0x24
   148fc:	ldr	r7, [r4, #44]	; 0x2c
   14900:	str	r1, [sp]
   14904:	add	r1, sp, #8
   14908:	add	r1, r1, #8
   1490c:	mov	r3, r5
   14910:	blx	r7
   14914:	cmp	r0, #0
   14918:	streq	r5, [r4, #136]	; 0x88
   1491c:	moveq	r0, r5
   14920:	subeq	sp, fp, #16
   14924:	popeq	{r4, r5, r6, r7, fp, pc}
   14928:	ldr	r0, [pc, #72]	; 14978 <flatcc_builder_embed_buffer@@Base+0x180>
   1492c:	ldr	r1, [pc, #72]	; 1497c <flatcc_builder_embed_buffer@@Base+0x184>
   14930:	ldr	r3, [pc, #72]	; 14980 <flatcc_builder_embed_buffer@@Base+0x188>
   14934:	movw	r2, #651	; 0x28b
   14938:	add	r0, pc, r0
   1493c:	add	r1, pc, r1
   14940:	add	r3, pc, r3
   14944:	bl	129c0 <__assert_fail@plt>
   14948:	ldr	r0, [pc, #28]	; 1496c <flatcc_builder_embed_buffer@@Base+0x174>
   1494c:	ldr	r1, [pc, #28]	; 14970 <flatcc_builder_embed_buffer@@Base+0x178>
   14950:	ldr	r3, [pc, #28]	; 14974 <flatcc_builder_embed_buffer@@Base+0x17c>
   14954:	movw	r2, #647	; 0x287
   14958:	add	r0, pc, r0
   1495c:	add	r1, pc, r1
   14960:	add	r3, pc, r3
   14964:	bl	129c0 <__assert_fail@plt>
   14968:	andeq	ip, r1, r4, ror r7
   1496c:			; <UNDEFINED> instruction: 0x0000aab0
   14970:	andeq	r9, r0, pc, ror #17
   14974:	andeq	sl, r0, r7, ror #18
   14978:	ldrdeq	sl, [r0], -r0
   1497c:	andeq	r9, r0, pc, lsl #18
   14980:	andeq	sl, r0, r7, lsl #19
   14984:	push	{r4, sl, fp, lr}
   14988:	add	fp, sp, #8
   1498c:	sub	sp, sp, #80	; 0x50
   14990:	cmp	r2, #0
   14994:	bne	149a4 <flatcc_builder_embed_buffer@@Base+0x1ac>
   14998:	ldrh	r2, [r0, #132]	; 0x84
   1499c:	cmp	r2, #0
   149a0:	movweq	r2, #1
   149a4:	ldrh	r4, [r1]
   149a8:	cmp	r4, #4
   149ac:	movwcc	r4, #4
   149b0:	cmpcs	r4, r2
   149b4:	bcs	149c4 <flatcc_builder_embed_buffer@@Base+0x1cc>
   149b8:	cmp	r4, r2
   149bc:	movcc	r4, r2
   149c0:	strh	r4, [r1]
   149c4:	cmp	r3, #0
   149c8:	bne	14a3c <flatcc_builder_embed_buffer@@Base+0x244>
   149cc:	ldr	r4, [r0, #140]	; 0x8c
   149d0:	sub	r1, r2, #1
   149d4:	ands	r1, r4, r1
   149d8:	beq	14a3c <flatcc_builder_embed_buffer@@Base+0x244>
   149dc:	mov	r2, #1
   149e0:	str	r1, [sp, #8]
   149e4:	str	r1, [sp, #20]
   149e8:	cmn	r1, #1
   149ec:	str	r2, [sp, #12]
   149f0:	ldr	r2, [pc, #172]	; 14aa4 <flatcc_builder_embed_buffer@@Base+0x2ac>
   149f4:	ldr	r2, [pc, r2]
   149f8:	str	r2, [sp, #16]
   149fc:	add	r2, r1, r4
   14a00:	str	r2, [r0, #140]	; 0x8c
   14a04:	ble	14a44 <flatcc_builder_embed_buffer@@Base+0x24c>
   14a08:	ldr	r2, [r0, #36]	; 0x24
   14a0c:	ldr	ip, [r0, #44]	; 0x2c
   14a10:	add	r0, sp, #8
   14a14:	str	r1, [sp]
   14a18:	mov	r3, r4
   14a1c:	add	r1, r0, #8
   14a20:	mov	r0, r2
   14a24:	mov	r2, #1
   14a28:	blx	ip
   14a2c:	cmp	r0, #0
   14a30:	bne	14a64 <flatcc_builder_embed_buffer@@Base+0x26c>
   14a34:	cmn	r4, #1
   14a38:	beq	14a84 <flatcc_builder_embed_buffer@@Base+0x28c>
   14a3c:	sub	sp, fp, #8
   14a40:	pop	{r4, sl, fp, pc}
   14a44:	ldr	r0, [pc, #92]	; 14aa8 <flatcc_builder_embed_buffer@@Base+0x2b0>
   14a48:	ldr	r1, [pc, #92]	; 14aac <flatcc_builder_embed_buffer@@Base+0x2b4>
   14a4c:	ldr	r3, [pc, #92]	; 14ab0 <flatcc_builder_embed_buffer@@Base+0x2b8>
   14a50:	movw	r2, #673	; 0x2a1
   14a54:	add	r0, pc, r0
   14a58:	add	r1, pc, r1
   14a5c:	add	r3, pc, r3
   14a60:	bl	129c0 <__assert_fail@plt>
   14a64:	ldr	r0, [pc, #72]	; 14ab4 <flatcc_builder_embed_buffer@@Base+0x2bc>
   14a68:	ldr	r1, [pc, #72]	; 14ab8 <flatcc_builder_embed_buffer@@Base+0x2c0>
   14a6c:	ldr	r3, [pc, #72]	; 14abc <flatcc_builder_embed_buffer@@Base+0x2c4>
   14a70:	movw	r2, #677	; 0x2a5
   14a74:	add	r0, pc, r0
   14a78:	add	r1, pc, r1
   14a7c:	add	r3, pc, r3
   14a80:	bl	129c0 <__assert_fail@plt>
   14a84:	ldr	r0, [pc, #52]	; 14ac0 <flatcc_builder_embed_buffer@@Base+0x2c8>
   14a88:	ldr	r1, [pc, #52]	; 14ac4 <flatcc_builder_embed_buffer@@Base+0x2cc>
   14a8c:	ldr	r3, [pc, #52]	; 14ac8 <flatcc_builder_embed_buffer@@Base+0x2d0>
   14a90:	movw	r2, #702	; 0x2be
   14a94:	add	r0, pc, r0
   14a98:	add	r1, pc, r1
   14a9c:	add	r3, pc, r3
   14aa0:	bl	129c0 <__assert_fail@plt>
   14aa4:	andeq	ip, r1, ip, asr r6
   14aa8:			; <UNDEFINED> instruction: 0x0000a9b4
   14aac:	strdeq	r9, [r0], -r3
   14ab0:	andeq	sl, r0, r7, lsr #18
   14ab4:	muleq	r0, r4, r9
   14ab8:	ldrdeq	r9, [r0], -r3
   14abc:	andeq	sl, r0, r7, lsl #18
   14ac0:	andeq	sl, r0, r4, ror r9
   14ac4:			; <UNDEFINED> instruction: 0x000097b3
   14ac8:	andeq	sl, r0, r9, ror #15

00014acc <flatcc_builder_create_buffer@@Base>:
   14acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad0:	add	fp, sp, #28
   14ad4:	sub	sp, sp, #100	; 0x64
   14ad8:	ldr	r8, [fp, #12]
   14adc:	mov	r4, r0
   14ae0:	ldr	r0, [fp, #8]
   14ae4:	mov	r7, r1
   14ae8:	mov	r5, #0
   14aec:	mov	r9, r3
   14af0:	sub	r1, fp, #30
   14af4:	str	r5, [sp, #12]
   14af8:	and	r6, r8, #1
   14afc:	strh	r0, [fp, #-30]	; 0xffffffe2
   14b00:	mov	r0, r4
   14b04:	mov	r3, r6
   14b08:	bl	14984 <flatcc_builder_embed_buffer@@Base+0x18c>
   14b0c:	ldrh	r0, [r4, #128]	; 0x80
   14b10:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14b14:	cmp	r0, r1
   14b18:	strhcc	r1, [r4, #128]	; 0x80
   14b1c:	cmp	r7, #0
   14b20:	stmib	sp, {r6, r9}
   14b24:	beq	14b40 <flatcc_builder_create_buffer@@Base+0x74>
   14b28:	ldr	r5, [r7]
   14b2c:	cmp	r5, #0
   14b30:	str	r5, [sp, #12]
   14b34:	movwne	r5, #1
   14b38:	lsl	r7, r5, #2
   14b3c:	b	14b44 <flatcc_builder_create_buffer@@Base+0x78>
   14b40:	mov	r7, #0
   14b44:	ldr	r9, [r4, #136]	; 0x88
   14b48:	mov	sl, #4
   14b4c:	mvn	r6, #3
   14b50:	mov	r3, #0
   14b54:	ands	ip, r8, #3
   14b58:	and	r2, sl, r8, lsl #1
   14b5c:	str	r3, [sp, #20]
   14b60:	str	r3, [sp, #16]
   14b64:	sub	r2, r6, r2
   14b68:	sub	r6, r1, #1
   14b6c:	mov	r1, #4
   14b70:	add	r2, r2, r9
   14b74:	sub	r2, r2, r7
   14b78:	beq	14b9c <flatcc_builder_create_buffer@@Base+0xd0>
   14b7c:	sub	r1, fp, #40	; 0x28
   14b80:	mov	r3, #1
   14b84:	str	r1, [sp, #24]
   14b88:	mov	r1, #4
   14b8c:	str	r1, [sp, #16]
   14b90:	str	r1, [sp, #28]
   14b94:	mov	r1, #8
   14b98:	str	r3, [sp, #20]
   14b9c:	add	lr, sp, #16
   14ba0:	and	r6, r2, r6
   14ba4:	sub	r0, fp, #36	; 0x24
   14ba8:	str	r1, [sp, #16]
   14bac:	cmp	r5, #0
   14bb0:	add	r2, lr, r3, lsl #3
   14bb4:	str	r0, [r2, #8]
   14bb8:	str	sl, [r2, #12]
   14bbc:	add	r2, r3, #1
   14bc0:	str	r2, [sp, #20]
   14bc4:	beq	14be8 <flatcc_builder_create_buffer@@Base+0x11c>
   14bc8:	add	r1, r1, r7
   14bcc:	add	r0, lr, r2, lsl #3
   14bd0:	add	r2, sp, #12
   14bd4:	str	r1, [sp, #16]
   14bd8:	str	r2, [r0, #8]
   14bdc:	orr	r2, r3, #2
   14be0:	str	r7, [r0, #12]
   14be4:	str	r2, [sp, #20]
   14be8:	cmp	r6, #0
   14bec:	beq	14c14 <flatcc_builder_create_buffer@@Base+0x148>
   14bf0:	add	r1, r1, r6
   14bf4:	add	r0, lr, r2, lsl #3
   14bf8:	add	r2, r2, #1
   14bfc:	str	r1, [sp, #16]
   14c00:	ldr	r3, [pc, #224]	; 14ce8 <flatcc_builder_create_buffer@@Base+0x21c>
   14c04:	ldr	r3, [pc, r3]
   14c08:	str	r3, [r0, #8]
   14c0c:	str	r6, [r0, #12]
   14c10:	str	r2, [sp, #20]
   14c14:	ldr	r5, [sp, #4]
   14c18:	sub	r7, r9, r1
   14c1c:	cmp	ip, #0
   14c20:	mov	r6, #144	; 0x90
   14c24:	ldr	r3, [sp, #8]
   14c28:	mov	r0, r7
   14c2c:	addne	r0, r0, #4
   14c30:	cmp	r5, #0
   14c34:	sub	r3, r3, r0
   14c38:	movweq	r6, #140	; 0x8c
   14c3c:	cmp	r1, #0
   14c40:	ldr	r6, [r4, r6]
   14c44:	str	r3, [fp, #-36]	; 0xffffffdc
   14c48:	sub	r0, r6, r0
   14c4c:	str	r0, [fp, #-40]	; 0xffffffd8
   14c50:	ble	14ca8 <flatcc_builder_create_buffer@@Base+0x1dc>
   14c54:	ldr	r0, [r4, #36]	; 0x24
   14c58:	ldr	r6, [r4, #44]	; 0x2c
   14c5c:	str	r1, [sp]
   14c60:	add	r1, lr, #8
   14c64:	mov	r3, r7
   14c68:	blx	r6
   14c6c:	cmp	r0, #0
   14c70:	bne	14cc8 <flatcc_builder_create_buffer@@Base+0x1fc>
   14c74:	cmp	r7, #0
   14c78:	str	r7, [r4, #136]	; 0x88
   14c7c:	movne	r0, r7
   14c80:	subne	sp, fp, #28
   14c84:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c88:	ldr	r0, [pc, #116]	; 14d04 <flatcc_builder_create_buffer@@Base+0x238>
   14c8c:	ldr	r1, [pc, #116]	; 14d08 <flatcc_builder_create_buffer@@Base+0x23c>
   14c90:	ldr	r3, [pc, #116]	; 14d0c <flatcc_builder_create_buffer@@Base+0x240>
   14c94:	mov	r2, #772	; 0x304
   14c98:	add	r0, pc, r0
   14c9c:	add	r1, pc, r1
   14ca0:	add	r3, pc, r3
   14ca4:	bl	129c0 <__assert_fail@plt>
   14ca8:	ldr	r0, [pc, #60]	; 14cec <flatcc_builder_create_buffer@@Base+0x220>
   14cac:	ldr	r1, [pc, #60]	; 14cf0 <flatcc_builder_create_buffer@@Base+0x224>
   14cb0:	ldr	r3, [pc, #60]	; 14cf4 <flatcc_builder_create_buffer@@Base+0x228>
   14cb4:	movw	r2, #647	; 0x287
   14cb8:	add	r0, pc, r0
   14cbc:	add	r1, pc, r1
   14cc0:	add	r3, pc, r3
   14cc4:	bl	129c0 <__assert_fail@plt>
   14cc8:	ldr	r0, [pc, #40]	; 14cf8 <flatcc_builder_create_buffer@@Base+0x22c>
   14ccc:	ldr	r1, [pc, #40]	; 14cfc <flatcc_builder_create_buffer@@Base+0x230>
   14cd0:	ldr	r3, [pc, #40]	; 14d00 <flatcc_builder_create_buffer@@Base+0x234>
   14cd4:	movw	r2, #651	; 0x28b
   14cd8:	add	r0, pc, r0
   14cdc:	add	r1, pc, r1
   14ce0:	add	r3, pc, r3
   14ce4:	bl	129c0 <__assert_fail@plt>
   14ce8:	andeq	ip, r1, ip, asr #8
   14cec:	andeq	sl, r0, r0, asr r7
   14cf0:	andeq	r9, r0, pc, lsl #11
   14cf4:	andeq	sl, r0, r7, lsl #12
   14cf8:	andeq	sl, r0, r0, lsr r7
   14cfc:	andeq	r9, r0, pc, ror #10
   14d00:	andeq	sl, r0, r7, ror #11
   14d04:	andeq	sl, r0, r0, ror r7
   14d08:	andeq	r9, r0, pc, lsr #11
   14d0c:	strdeq	r9, [r0], -sp

00014d10 <flatcc_builder_create_struct@@Base>:
   14d10:	push	{r4, r5, r6, sl, fp, lr}
   14d14:	add	fp, sp, #16
   14d18:	sub	sp, sp, #80	; 0x50
   14d1c:	cmp	r3, #0
   14d20:	beq	14df8 <flatcc_builder_create_struct@@Base+0xe8>
   14d24:	mov	r5, r0
   14d28:	ldrh	r0, [r0, #128]	; 0x80
   14d2c:	mov	r4, #0
   14d30:	cmp	r0, r3
   14d34:	strhcc	r3, [r5, #128]	; 0x80
   14d38:	sub	r3, r3, #1
   14d3c:	cmp	r2, #0
   14d40:	ldr	r0, [r5, #136]	; 0x88
   14d44:	str	r4, [sp, #12]
   14d48:	str	r4, [sp, #8]
   14d4c:	movne	r4, #1
   14d50:	strne	r1, [sp, #16]
   14d54:	strne	r2, [sp, #8]
   14d58:	strne	r2, [sp, #20]
   14d5c:	strne	r4, [sp, #12]
   14d60:	sub	r6, r0, r2
   14d64:	and	r3, r6, r3
   14d68:	cmp	r3, #0
   14d6c:	beq	14d98 <flatcc_builder_create_struct@@Base+0x88>
   14d70:	add	r2, r3, r2
   14d74:	add	r1, sp, #8
   14d78:	str	r2, [sp, #8]
   14d7c:	add	r1, r1, r4, lsl #3
   14d80:	add	r4, r4, #1
   14d84:	ldr	r6, [pc, #172]	; 14e38 <flatcc_builder_create_struct@@Base+0x128>
   14d88:	ldr	r6, [pc, r6]
   14d8c:	str	r6, [r1, #8]
   14d90:	str	r3, [r1, #12]
   14d94:	str	r4, [sp, #12]
   14d98:	cmp	r2, #0
   14d9c:	ble	14e18 <flatcc_builder_create_struct@@Base+0x108>
   14da0:	sub	r6, r0, r2
   14da4:	ldr	r0, [r5, #36]	; 0x24
   14da8:	ldr	ip, [r5, #44]	; 0x2c
   14dac:	add	r1, sp, #8
   14db0:	str	r2, [sp]
   14db4:	mov	r2, r4
   14db8:	add	r1, r1, #8
   14dbc:	mov	r3, r6
   14dc0:	blx	ip
   14dc4:	cmp	r0, #0
   14dc8:	streq	r6, [r5, #136]	; 0x88
   14dcc:	moveq	r0, r6
   14dd0:	subeq	sp, fp, #16
   14dd4:	popeq	{r4, r5, r6, sl, fp, pc}
   14dd8:	ldr	r0, [pc, #116]	; 14e54 <flatcc_builder_create_struct@@Base+0x144>
   14ddc:	ldr	r1, [pc, #116]	; 14e58 <flatcc_builder_create_struct@@Base+0x148>
   14de0:	ldr	r3, [pc, #116]	; 14e5c <flatcc_builder_create_struct@@Base+0x14c>
   14de4:	movw	r2, #651	; 0x28b
   14de8:	add	r0, pc, r0
   14dec:	add	r1, pc, r1
   14df0:	add	r3, pc, r3
   14df4:	bl	129c0 <__assert_fail@plt>
   14df8:	ldr	r0, [pc, #60]	; 14e3c <flatcc_builder_create_struct@@Base+0x12c>
   14dfc:	ldr	r1, [pc, #60]	; 14e40 <flatcc_builder_create_struct@@Base+0x130>
   14e00:	ldr	r3, [pc, #60]	; 14e44 <flatcc_builder_create_struct@@Base+0x134>
   14e04:	movw	r2, #783	; 0x30f
   14e08:	add	r0, pc, r0
   14e0c:	add	r1, pc, r1
   14e10:	add	r3, pc, r3
   14e14:	bl	129c0 <__assert_fail@plt>
   14e18:	ldr	r0, [pc, #40]	; 14e48 <flatcc_builder_create_struct@@Base+0x138>
   14e1c:	ldr	r1, [pc, #40]	; 14e4c <flatcc_builder_create_struct@@Base+0x13c>
   14e20:	ldr	r3, [pc, #40]	; 14e50 <flatcc_builder_create_struct@@Base+0x140>
   14e24:	movw	r2, #647	; 0x287
   14e28:	add	r0, pc, r0
   14e2c:	add	r1, pc, r1
   14e30:	add	r3, pc, r3
   14e34:	bl	129c0 <__assert_fail@plt>
   14e38:	andeq	ip, r1, r8, asr #5
   14e3c:	andeq	r9, r0, r8, lsl r6
   14e40:	andeq	r9, r0, pc, lsr r4
   14e44:	andeq	r9, r0, fp, lsl r6
   14e48:	andeq	sl, r0, r0, ror #11
   14e4c:	andeq	r9, r0, pc, lsl r4
   14e50:	muleq	r0, r7, r4
   14e54:	andeq	sl, r0, r0, lsr #12
   14e58:	andeq	r9, r0, pc, asr r4
   14e5c:	ldrdeq	sl, [r0], -r7

00014e60 <flatcc_builder_start_buffer@@Base>:
   14e60:	push	{r4, r5, r6, r7, fp, lr}
   14e64:	add	fp, sp, #16
   14e68:	mov	r5, r1
   14e6c:	ldrh	r1, [r0, #128]	; 0x80
   14e70:	mov	r6, r3
   14e74:	mov	r7, r2
   14e78:	mov	r4, r0
   14e7c:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   14e80:	mov	r1, r0
   14e84:	mvn	r0, #0
   14e88:	cmp	r1, #0
   14e8c:	popne	{r4, r5, r6, r7, fp, pc}
   14e90:	mov	r0, #1
   14e94:	cmp	r5, #0
   14e98:	strh	r0, [r4, #128]	; 0x80
   14e9c:	ldrh	r1, [r4, #132]	; 0x84
   14ea0:	ldr	r2, [r4, #32]
   14ea4:	strh	r1, [r2, #34]	; 0x22
   14ea8:	strh	r7, [r4, #132]	; 0x84
   14eac:	ldrh	r1, [r4, #164]	; 0xa4
   14eb0:	ldr	r2, [r4, #32]
   14eb4:	strh	r1, [r2, #32]
   14eb8:	strh	r6, [r4, #164]	; 0xa4
   14ebc:	ldr	r1, [r4, #32]
   14ec0:	ldr	r2, [r4, #144]	; 0x90
   14ec4:	str	r2, [r1, #20]
   14ec8:	ldr	r1, [r4, #32]
   14ecc:	ldr	r2, [r4, #152]	; 0x98
   14ed0:	str	r2, [r1, #28]
   14ed4:	ldr	r3, [r4, #148]	; 0x94
   14ed8:	ldr	r1, [r4, #32]
   14edc:	ldr	r2, [r4, #136]	; 0x88
   14ee0:	ldr	r7, [r4, #168]	; 0xa8
   14ee4:	add	r6, r3, #1
   14ee8:	str	r2, [r4, #144]	; 0x90
   14eec:	str	r6, [r4, #148]	; 0x94
   14ef0:	str	r3, [r4, #152]	; 0x98
   14ef4:	str	r7, [r1, #16]
   14ef8:	ldr	r1, [pc, #28]	; 14f1c <flatcc_builder_start_buffer@@Base+0xbc>
   14efc:	ldr	r1, [pc, r1]
   14f00:	movne	r1, r5
   14f04:	ldr	r1, [r1]
   14f08:	str	r1, [r4, #168]	; 0xa8
   14f0c:	ldr	r1, [r4, #32]
   14f10:	strh	r0, [r1, #14]
   14f14:	mov	r0, #0
   14f18:	pop	{r4, r5, r6, r7, fp, pc}
   14f1c:	andeq	ip, r1, r4, asr r1
   14f20:	push	{r4, r5, r6, r7, fp, lr}
   14f24:	add	fp, sp, #16
   14f28:	sub	sp, sp, #8
   14f2c:	mov	r5, r1
   14f30:	ldr	r1, [r0, #156]	; 0x9c
   14f34:	ldr	r2, [r0, #160]	; 0xa0
   14f38:	mov	r4, r0
   14f3c:	add	r0, r1, #1
   14f40:	cmp	r1, r2
   14f44:	str	r0, [r4, #156]	; 0x9c
   14f48:	bge	14f5c <flatcc_builder_start_buffer@@Base+0xfc>
   14f4c:	ldr	r0, [r4, #32]
   14f50:	add	r0, r0, #36	; 0x24
   14f54:	str	r0, [r4, #32]
   14f58:	b	14ff0 <flatcc_builder_start_buffer@@Base+0x190>
   14f5c:	ldr	r2, [r4, #176]	; 0xb0
   14f60:	mvn	r6, #0
   14f64:	cmp	r2, #1
   14f68:	cmpge	r1, r2
   14f6c:	bge	15028 <flatcc_builder_start_buffer@@Base+0x1c8>
   14f70:	add	r7, r0, r0, lsl #3
   14f74:	ldr	r0, [r4, #88]	; 0x58
   14f78:	lsl	r2, r7, #2
   14f7c:	cmp	r2, r0
   14f80:	bls	14fa8 <flatcc_builder_start_buffer@@Base+0x148>
   14f84:	ldr	r0, [r4, #40]	; 0x28
   14f88:	ldr	ip, [r4, #48]	; 0x30
   14f8c:	mov	r3, #4
   14f90:	add	r1, r4, #84	; 0x54
   14f94:	str	r3, [sp]
   14f98:	mov	r3, #0
   14f9c:	blx	ip
   14fa0:	cmp	r0, #0
   14fa4:	bne	15034 <flatcc_builder_start_buffer@@Base+0x1d4>
   14fa8:	ldr	r1, [r4, #84]	; 0x54
   14fac:	mvn	r0, #35	; 0x23
   14fb0:	add	r0, r0, r7, lsl #2
   14fb4:	adds	r0, r0, r1
   14fb8:	str	r0, [r4, #32]
   14fbc:	beq	15028 <flatcc_builder_start_buffer@@Base+0x1c8>
   14fc0:	ldr	r1, [r4, #88]	; 0x58
   14fc4:	movw	r3, #36409	; 0x8e39
   14fc8:	ldr	r2, [r4, #176]	; 0xb0
   14fcc:	movt	r3, #14563	; 0x38e3
   14fd0:	umull	r1, r3, r1, r3
   14fd4:	lsr	r1, r3, #3
   14fd8:	cmp	r2, r3, lsr #3
   14fdc:	mov	r3, r1
   14fe0:	movlt	r3, r2
   14fe4:	cmp	r2, #0
   14fe8:	movle	r3, r1
   14fec:	str	r3, [r4, #160]	; 0xa0
   14ff0:	ldr	r1, [r4, #20]
   14ff4:	mvn	r3, #3
   14ff8:	mov	r6, #0
   14ffc:	str	r1, [r0, #8]
   15000:	ldrh	r2, [r4, #130]	; 0x82
   15004:	strh	r2, [r0, #12]
   15008:	strh	r5, [r4, #130]	; 0x82
   1500c:	ldr	r2, [r4, #28]
   15010:	stm	r0, {r2, r3}
   15014:	add	r0, r1, r2
   15018:	str	r6, [r4, #20]
   1501c:	add	r0, r0, #7
   15020:	bic	r0, r0, #7
   15024:	str	r0, [r4, #28]
   15028:	mov	r0, r6
   1502c:	sub	sp, fp, #16
   15030:	pop	{r4, r5, r6, r7, fp, pc}
   15034:	ldr	r0, [pc, #24]	; 15054 <flatcc_builder_start_buffer@@Base+0x1f4>
   15038:	ldr	r1, [pc, #24]	; 15058 <flatcc_builder_start_buffer@@Base+0x1f8>
   1503c:	ldr	r3, [pc, #24]	; 1505c <flatcc_builder_start_buffer@@Base+0x1fc>
   15040:	mov	r2, #308	; 0x134
   15044:	add	r0, pc, r0
   15048:	add	r1, pc, r1
   1504c:	add	r3, pc, r3
   15050:	bl	129c0 <__assert_fail@plt>
   15054:	andeq	sl, r0, r4, asr #7
   15058:	andeq	r9, r0, r3, lsl #4
   1505c:	strdeq	sl, [r0], -r6

00015060 <flatcc_builder_end_buffer@@Base>:
   15060:	push	{r4, r5, r6, sl, fp, lr}
   15064:	add	fp, sp, #16
   15068:	sub	sp, sp, #8
   1506c:	mov	r4, r0
   15070:	ldr	r0, [r0, #32]
   15074:	ldrh	r0, [r0, #14]
   15078:	cmp	r0, #1
   1507c:	bne	15170 <flatcc_builder_end_buffer@@Base+0x110>
   15080:	mov	r3, r1
   15084:	ldr	r1, [r4, #152]	; 0x98
   15088:	ldrh	r0, [r4, #164]	; 0xa4
   1508c:	ldrh	r2, [r4, #132]	; 0x84
   15090:	cmp	r1, #0
   15094:	ldrh	r1, [r4, #128]	; 0x80
   15098:	and	r0, r0, #2
   1509c:	orrne	r0, r0, #1
   150a0:	cmp	r1, r2
   150a4:	movcc	r1, r2
   150a8:	strhcc	r2, [r4, #128]	; 0x80
   150ac:	str	r0, [sp, #4]
   150b0:	mov	r0, r4
   150b4:	str	r1, [sp]
   150b8:	add	r1, r4, #168	; 0xa8
   150bc:	bl	14acc <flatcc_builder_create_buffer@@Base>
   150c0:	mov	r6, r0
   150c4:	cmp	r0, #0
   150c8:	beq	15164 <flatcc_builder_end_buffer@@Base+0x104>
   150cc:	ldr	r1, [r4, #32]
   150d0:	ldr	r0, [r4, #16]
   150d4:	ldr	r2, [r4, #20]
   150d8:	ldr	r3, [r1, #20]
   150dc:	str	r3, [r4, #144]	; 0x90
   150e0:	ldr	r3, [r1, #28]
   150e4:	str	r3, [r4, #152]	; 0x98
   150e8:	ldr	r3, [r1, #16]
   150ec:	str	r3, [r4, #168]	; 0xa8
   150f0:	ldrh	r1, [r1, #32]
   150f4:	strh	r1, [r4, #164]	; 0xa4
   150f8:	mov	r1, #0
   150fc:	bl	12990 <memset@plt>
   15100:	ldr	r0, [r4, #32]
   15104:	ldr	r1, [r4, #60]	; 0x3c
   15108:	ldr	r2, [r4, #64]	; 0x40
   1510c:	ldr	r3, [r0, #8]
   15110:	str	r3, [r4, #20]
   15114:	ldr	r3, [r0]
   15118:	str	r3, [r4, #28]
   1511c:	add	r1, r1, r3
   15120:	ldr	r5, [r0, #4]
   15124:	str	r1, [r4, #16]
   15128:	sub	r1, r2, r3
   1512c:	cmp	r1, r5
   15130:	movhi	r1, r5
   15134:	str	r1, [r4, #24]
   15138:	ldrh	r1, [r4, #130]	; 0x82
   1513c:	ldrh	r2, [r4, #128]	; 0x80
   15140:	cmp	r2, r1
   15144:	strhcc	r1, [r4, #128]	; 0x80
   15148:	ldrh	r1, [r0, #12]
   1514c:	sub	r0, r0, #36	; 0x24
   15150:	str	r0, [r4, #32]
   15154:	strh	r1, [r4, #130]	; 0x82
   15158:	ldr	r0, [r4, #156]	; 0x9c
   1515c:	sub	r0, r0, #1
   15160:	str	r0, [r4, #156]	; 0x9c
   15164:	mov	r0, r6
   15168:	sub	sp, fp, #16
   1516c:	pop	{r4, r5, r6, sl, fp, pc}
   15170:	ldr	r0, [pc, #24]	; 15190 <flatcc_builder_end_buffer@@Base+0x130>
   15174:	ldr	r1, [pc, #24]	; 15194 <flatcc_builder_end_buffer@@Base+0x134>
   15178:	ldr	r3, [pc, #24]	; 15198 <flatcc_builder_end_buffer@@Base+0x138>
   1517c:	movw	r2, #838	; 0x346
   15180:	add	r0, pc, r0
   15184:	add	r1, pc, r1
   15188:	add	r3, pc, r3
   1518c:	bl	129c0 <__assert_fail@plt>
   15190:	andeq	r9, r0, r1, lsl r3
   15194:	andeq	r9, r0, r7, asr #1
   15198:	andeq	r9, r0, r5, lsr r3

0001519c <flatcc_builder_start_struct@@Base>:
   1519c:	push	{r4, r5, r6, r7, fp, lr}
   151a0:	add	fp, sp, #16
   151a4:	sub	sp, sp, #8
   151a8:	mov	r6, r1
   151ac:	mov	r1, r2
   151b0:	mov	r4, r0
   151b4:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   151b8:	mov	r5, #0
   151bc:	cmp	r0, #0
   151c0:	bne	15270 <flatcc_builder_start_struct@@Base+0xd4>
   151c4:	ldr	r2, [r4, #32]
   151c8:	mov	r0, #2
   151cc:	mvn	r7, #3
   151d0:	strh	r0, [r2, #14]
   151d4:	ldr	r1, [r4, #28]
   151d8:	ldr	r3, [r4, #64]	; 0x40
   151dc:	ldr	r0, [r4, #60]	; 0x3c
   151e0:	sub	r3, r3, r1
   151e4:	add	r0, r0, r1
   151e8:	cmn	r3, #4
   151ec:	str	r0, [r4, #16]
   151f0:	movcs	r3, r7
   151f4:	str	r3, [r4, #24]
   151f8:	str	r7, [r2, #4]
   151fc:	ldr	r7, [r4, #20]
   15200:	add	r2, r7, r6
   15204:	cmp	r2, r3
   15208:	str	r2, [r4, #20]
   1520c:	bcc	1526c <flatcc_builder_start_struct@@Base+0xd0>
   15210:	ldr	r0, [r4, #40]	; 0x28
   15214:	ldr	r6, [r4, #48]	; 0x30
   15218:	add	r1, r1, r2
   1521c:	mov	r3, #1
   15220:	str	r3, [sp]
   15224:	add	r2, r1, #1
   15228:	add	r1, r4, #60	; 0x3c
   1522c:	mov	r3, #1
   15230:	blx	r6
   15234:	cmp	r0, #0
   15238:	bne	15270 <flatcc_builder_start_struct@@Base+0xd4>
   1523c:	ldr	r1, [r4, #28]
   15240:	ldr	r0, [r4, #60]	; 0x3c
   15244:	ldr	r3, [r4, #64]	; 0x40
   15248:	ldr	r2, [r4, #32]
   1524c:	add	r0, r0, r1
   15250:	sub	r1, r3, r1
   15254:	mvn	r3, #3
   15258:	cmn	r1, #4
   1525c:	str	r0, [r4, #16]
   15260:	movcs	r1, r3
   15264:	str	r1, [r4, #24]
   15268:	str	r3, [r2, #4]
   1526c:	add	r5, r0, r7
   15270:	mov	r0, r5
   15274:	sub	sp, fp, #16
   15278:	pop	{r4, r5, r6, r7, fp, pc}

0001527c <flatcc_builder_struct_edit@@Base>:
   1527c:	ldr	r0, [r0, #16]
   15280:	bx	lr

00015284 <flatcc_builder_end_struct@@Base>:
   15284:	push	{r4, r5, fp, lr}
   15288:	add	fp, sp, #8
   1528c:	mov	r4, r0
   15290:	ldr	r0, [r0, #32]
   15294:	ldrh	r0, [r0, #14]
   15298:	cmp	r0, #2
   1529c:	bne	1533c <flatcc_builder_end_struct@@Base+0xb8>
   152a0:	ldrh	r3, [r4, #130]	; 0x82
   152a4:	ldr	r1, [r4, #16]
   152a8:	ldr	r2, [r4, #20]
   152ac:	mov	r0, r4
   152b0:	bl	14d10 <flatcc_builder_create_struct@@Base>
   152b4:	mov	r5, r0
   152b8:	cmp	r0, #0
   152bc:	beq	15334 <flatcc_builder_end_struct@@Base+0xb0>
   152c0:	ldr	r0, [r4, #16]
   152c4:	ldr	r2, [r4, #20]
   152c8:	mov	r1, #0
   152cc:	bl	12990 <memset@plt>
   152d0:	ldr	r0, [r4, #32]
   152d4:	ldr	r1, [r4, #60]	; 0x3c
   152d8:	ldr	ip, [r4, #64]	; 0x40
   152dc:	ldr	r3, [r0, #8]
   152e0:	str	r3, [r4, #20]
   152e4:	ldr	r3, [r0]
   152e8:	str	r3, [r4, #28]
   152ec:	add	r1, r1, r3
   152f0:	ldr	r2, [r0, #4]
   152f4:	str	r1, [r4, #16]
   152f8:	sub	r1, ip, r3
   152fc:	cmp	r1, r2
   15300:	movhi	r1, r2
   15304:	str	r1, [r4, #24]
   15308:	ldrh	r1, [r4, #130]	; 0x82
   1530c:	ldrh	r2, [r4, #128]	; 0x80
   15310:	cmp	r2, r1
   15314:	strhcc	r1, [r4, #128]	; 0x80
   15318:	ldrh	r1, [r0, #12]
   1531c:	sub	r0, r0, #36	; 0x24
   15320:	str	r0, [r4, #32]
   15324:	strh	r1, [r4, #130]	; 0x82
   15328:	ldr	r0, [r4, #156]	; 0x9c
   1532c:	sub	r0, r0, #1
   15330:	str	r0, [r4, #156]	; 0x9c
   15334:	mov	r0, r5
   15338:	pop	{r4, r5, fp, pc}
   1533c:	ldr	r0, [pc, #24]	; 1535c <flatcc_builder_end_struct@@Base+0xd8>
   15340:	ldr	r1, [pc, #24]	; 15360 <flatcc_builder_end_struct@@Base+0xdc>
   15344:	ldr	r3, [pc, #24]	; 15364 <flatcc_builder_end_struct@@Base+0xe0>
   15348:	mov	r2, #872	; 0x368
   1534c:	add	r0, pc, r0
   15350:	add	r1, pc, r1
   15354:	add	r3, pc, r3
   15358:	bl	129c0 <__assert_fail@plt>
   1535c:	andeq	r9, r0, sl, asr #3
   15360:	strdeq	r8, [r0], -fp
   15364:	andeq	r9, r0, lr, ror #3

00015368 <flatcc_builder_extend_vector@@Base>:
   15368:	push	{r4, r5, fp, lr}
   1536c:	add	fp, sp, #8
   15370:	sub	sp, sp, #8
   15374:	mov	r4, r0
   15378:	ldr	r0, [r0, #32]
   1537c:	ldr	r2, [r0, #20]
   15380:	adds	r2, r2, r1
   15384:	bcs	1543c <flatcc_builder_extend_vector@@Base+0xd4>
   15388:	ldr	r3, [r0, #24]
   1538c:	cmp	r2, r3
   15390:	bhi	1543c <flatcc_builder_extend_vector@@Base+0xd4>
   15394:	str	r2, [r0, #20]
   15398:	ldr	r2, [r4, #32]
   1539c:	ldr	r5, [r4, #20]
   153a0:	ldr	r0, [r4, #24]
   153a4:	ldr	r2, [r2, #16]
   153a8:	mla	r1, r2, r1, r5
   153ac:	cmp	r1, r0
   153b0:	str	r1, [r4, #20]
   153b4:	bcs	153c0 <flatcc_builder_extend_vector@@Base+0x58>
   153b8:	ldr	r0, [r4, #16]
   153bc:	b	15430 <flatcc_builder_extend_vector@@Base+0xc8>
   153c0:	ldr	r2, [r4, #28]
   153c4:	ldr	r0, [r4, #40]	; 0x28
   153c8:	ldr	ip, [r4, #48]	; 0x30
   153cc:	mov	r3, #1
   153d0:	str	r3, [sp]
   153d4:	mov	r3, #1
   153d8:	add	r1, r1, r2
   153dc:	add	r2, r1, #1
   153e0:	add	r1, r4, #60	; 0x3c
   153e4:	blx	ip
   153e8:	mov	r1, r0
   153ec:	mov	r0, #0
   153f0:	cmp	r1, #0
   153f4:	beq	15400 <flatcc_builder_extend_vector@@Base+0x98>
   153f8:	sub	sp, fp, #8
   153fc:	pop	{r4, r5, fp, pc}
   15400:	ldr	r1, [r4, #28]
   15404:	ldr	r0, [r4, #60]	; 0x3c
   15408:	ldr	r3, [r4, #64]	; 0x40
   1540c:	ldr	r2, [r4, #32]
   15410:	add	r0, r0, r1
   15414:	sub	r1, r3, r1
   15418:	mvn	r3, #3
   1541c:	cmn	r1, #4
   15420:	str	r0, [r4, #16]
   15424:	movcs	r1, r3
   15428:	str	r1, [r4, #24]
   1542c:	str	r3, [r2, #4]
   15430:	add	r0, r0, r5
   15434:	sub	sp, fp, #8
   15438:	pop	{r4, r5, fp, pc}
   1543c:	ldr	r0, [pc, #24]	; 1545c <flatcc_builder_extend_vector@@Base+0xf4>
   15440:	ldr	r1, [pc, #24]	; 15460 <flatcc_builder_extend_vector@@Base+0xf8>
   15444:	ldr	r3, [pc, #24]	; 15464 <flatcc_builder_extend_vector@@Base+0xfc>
   15448:	mov	r2, #892	; 0x37c
   1544c:	add	r0, pc, r0
   15450:	add	r1, pc, r1
   15454:	add	r3, pc, r3
   15458:	bl	129c0 <__assert_fail@plt>
   1545c:	andeq	r9, r0, r5, asr #29
   15460:	strdeq	r8, [r0], -fp
   15464:	ldrdeq	r9, [r0], -r8

00015468 <flatcc_builder_vector_push@@Base>:
   15468:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1546c:	add	fp, sp, #24
   15470:	sub	sp, sp, #8
   15474:	mov	r5, r0
   15478:	ldr	r0, [r0, #32]
   1547c:	mov	r8, r1
   15480:	ldrh	r1, [r0, #14]
   15484:	cmp	r1, #4
   15488:	bne	15560 <flatcc_builder_vector_push@@Base+0xf8>
   1548c:	ldr	r1, [r0, #20]
   15490:	ldr	r2, [r0, #24]
   15494:	cmp	r1, r2
   15498:	bhi	15580 <flatcc_builder_vector_push@@Base+0x118>
   1549c:	add	r1, r1, #1
   154a0:	str	r1, [r0, #20]
   154a4:	ldr	r1, [r5, #32]
   154a8:	ldr	r4, [r5, #20]
   154ac:	ldr	r0, [r5, #24]
   154b0:	ldr	r6, [r1, #16]
   154b4:	add	r1, r4, r6
   154b8:	cmp	r1, r0
   154bc:	str	r1, [r5, #20]
   154c0:	bcs	154e4 <flatcc_builder_vector_push@@Base+0x7c>
   154c4:	ldr	r0, [r5, #16]
   154c8:	adds	r7, r0, r4
   154cc:	beq	15550 <flatcc_builder_vector_push@@Base+0xe8>
   154d0:	mov	r0, r7
   154d4:	mov	r1, r8
   154d8:	mov	r2, r6
   154dc:	bl	12900 <memcpy@plt>
   154e0:	b	15554 <flatcc_builder_vector_push@@Base+0xec>
   154e4:	ldr	r2, [r5, #28]
   154e8:	ldr	r0, [r5, #40]	; 0x28
   154ec:	ldr	r7, [r5, #48]	; 0x30
   154f0:	mov	r3, #1
   154f4:	str	r3, [sp]
   154f8:	mov	r3, #1
   154fc:	add	r1, r1, r2
   15500:	add	r2, r1, #1
   15504:	add	r1, r5, #60	; 0x3c
   15508:	blx	r7
   1550c:	mov	r7, #0
   15510:	cmp	r0, #0
   15514:	bne	15554 <flatcc_builder_vector_push@@Base+0xec>
   15518:	ldr	r1, [r5, #28]
   1551c:	ldr	r0, [r5, #60]	; 0x3c
   15520:	ldr	r3, [r5, #64]	; 0x40
   15524:	ldr	r2, [r5, #32]
   15528:	add	r0, r0, r1
   1552c:	sub	r1, r3, r1
   15530:	mvn	r3, #3
   15534:	cmn	r1, #4
   15538:	str	r0, [r5, #16]
   1553c:	movcs	r1, r3
   15540:	str	r1, [r5, #24]
   15544:	str	r3, [r2, #4]
   15548:	adds	r7, r0, r4
   1554c:	bne	154d0 <flatcc_builder_vector_push@@Base+0x68>
   15550:	mov	r7, #0
   15554:	mov	r0, r7
   15558:	sub	sp, fp, #24
   1555c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15560:	ldr	r0, [pc, #56]	; 155a0 <flatcc_builder_vector_push@@Base+0x138>
   15564:	ldr	r1, [pc, #56]	; 155a4 <flatcc_builder_vector_push@@Base+0x13c>
   15568:	ldr	r3, [pc, #56]	; 155a8 <flatcc_builder_vector_push@@Base+0x140>
   1556c:	movw	r2, #907	; 0x38b
   15570:	add	r0, pc, r0
   15574:	add	r1, pc, r1
   15578:	add	r3, pc, r3
   1557c:	bl	129c0 <__assert_fail@plt>
   15580:	ldr	r0, [pc, #36]	; 155ac <flatcc_builder_vector_push@@Base+0x144>
   15584:	ldr	r1, [pc, #36]	; 155b0 <flatcc_builder_vector_push@@Base+0x148>
   15588:	ldr	r3, [pc, #36]	; 155b4 <flatcc_builder_vector_push@@Base+0x14c>
   1558c:	mov	r2, #908	; 0x38c
   15590:	add	r0, pc, r0
   15594:	add	r1, pc, r1
   15598:	add	r3, pc, r3
   1559c:	bl	129c0 <__assert_fail@plt>
   155a0:	andeq	r9, r0, r5, lsl r0
   155a4:	ldrdeq	r8, [r0], -r7
   155a8:	andeq	r9, r0, r9, lsr r0
   155ac:	andeq	r9, r0, r4, rrx
   155b0:			; <UNDEFINED> instruction: 0x00008cb7
   155b4:	andeq	r9, r0, r9, lsl r0

000155b8 <flatcc_builder_append_vector@@Base>:
   155b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   155bc:	add	fp, sp, #24
   155c0:	sub	sp, sp, #8
   155c4:	mov	r6, r0
   155c8:	ldr	r0, [r0, #32]
   155cc:	mov	r8, r1
   155d0:	ldrh	r1, [r0, #14]
   155d4:	cmp	r1, #4
   155d8:	bne	156d8 <flatcc_builder_append_vector@@Base+0x120>
   155dc:	ldr	r1, [r0, #20]
   155e0:	mov	r5, r2
   155e4:	adds	r1, r1, r2
   155e8:	bcs	156b8 <flatcc_builder_append_vector@@Base+0x100>
   155ec:	ldr	r2, [r0, #24]
   155f0:	cmp	r1, r2
   155f4:	bhi	156b8 <flatcc_builder_append_vector@@Base+0x100>
   155f8:	str	r1, [r0, #20]
   155fc:	ldr	r1, [r6, #32]
   15600:	ldr	r4, [r6, #20]
   15604:	ldr	r0, [r6, #24]
   15608:	ldr	r9, [r1, #16]
   1560c:	mla	r1, r9, r5, r4
   15610:	cmp	r1, r0
   15614:	str	r1, [r6, #20]
   15618:	bcs	1563c <flatcc_builder_append_vector@@Base+0x84>
   1561c:	ldr	r0, [r6, #16]
   15620:	adds	r7, r0, r4
   15624:	beq	156a8 <flatcc_builder_append_vector@@Base+0xf0>
   15628:	mul	r2, r9, r5
   1562c:	mov	r0, r7
   15630:	mov	r1, r8
   15634:	bl	12900 <memcpy@plt>
   15638:	b	156ac <flatcc_builder_append_vector@@Base+0xf4>
   1563c:	ldr	r2, [r6, #28]
   15640:	ldr	r0, [r6, #40]	; 0x28
   15644:	ldr	r7, [r6, #48]	; 0x30
   15648:	mov	r3, #1
   1564c:	str	r3, [sp]
   15650:	mov	r3, #1
   15654:	add	r1, r1, r2
   15658:	add	r2, r1, #1
   1565c:	add	r1, r6, #60	; 0x3c
   15660:	blx	r7
   15664:	mov	r7, #0
   15668:	cmp	r0, #0
   1566c:	bne	156ac <flatcc_builder_append_vector@@Base+0xf4>
   15670:	ldr	r1, [r6, #28]
   15674:	ldr	r0, [r6, #60]	; 0x3c
   15678:	ldr	r3, [r6, #64]	; 0x40
   1567c:	ldr	r2, [r6, #32]
   15680:	add	r0, r0, r1
   15684:	sub	r1, r3, r1
   15688:	mvn	r3, #3
   1568c:	cmn	r1, #4
   15690:	str	r0, [r6, #16]
   15694:	movcs	r1, r3
   15698:	str	r1, [r6, #24]
   1569c:	str	r3, [r2, #4]
   156a0:	adds	r7, r0, r4
   156a4:	bne	15628 <flatcc_builder_append_vector@@Base+0x70>
   156a8:	mov	r7, #0
   156ac:	mov	r0, r7
   156b0:	sub	sp, fp, #24
   156b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156b8:	ldr	r0, [pc, #68]	; 15704 <flatcc_builder_append_vector@@Base+0x14c>
   156bc:	ldr	r1, [pc, #68]	; 15708 <flatcc_builder_append_vector@@Base+0x150>
   156c0:	ldr	r3, [pc, #68]	; 1570c <flatcc_builder_append_vector@@Base+0x154>
   156c4:	mov	r2, #892	; 0x37c
   156c8:	add	r0, pc, r0
   156cc:	add	r1, pc, r1
   156d0:	add	r3, pc, r3
   156d4:	bl	129c0 <__assert_fail@plt>
   156d8:	ldr	r0, [pc, #24]	; 156f8 <flatcc_builder_append_vector@@Base+0x140>
   156dc:	ldr	r1, [pc, #24]	; 156fc <flatcc_builder_append_vector@@Base+0x144>
   156e0:	ldr	r3, [pc, #24]	; 15700 <flatcc_builder_append_vector@@Base+0x148>
   156e4:	movw	r2, #915	; 0x393
   156e8:	add	r0, pc, r0
   156ec:	add	r1, pc, r1
   156f0:	add	r3, pc, r3
   156f4:	bl	129c0 <__assert_fail@plt>
   156f8:	muleq	r0, sp, lr
   156fc:	andeq	r8, r0, pc, asr fp
   15700:	andeq	r8, r0, r1, asr #30
   15704:	andeq	r9, r0, r9, asr #24
   15708:	andeq	r8, r0, pc, ror fp
   1570c:	andeq	r9, r0, ip, asr ip

00015710 <flatcc_builder_extend_offset_vector@@Base>:
   15710:	push	{r4, r5, fp, lr}
   15714:	add	fp, sp, #8
   15718:	sub	sp, sp, #8
   1571c:	mov	r4, r0
   15720:	ldr	r0, [r0, #32]
   15724:	ldr	r2, [r0, #20]
   15728:	adds	r2, r2, r1
   1572c:	cmpcc	r2, #1073741824	; 0x40000000
   15730:	bcc	15754 <flatcc_builder_extend_offset_vector@@Base+0x44>
   15734:	ldr	r0, [pc, #184]	; 157f4 <flatcc_builder_extend_offset_vector@@Base+0xe4>
   15738:	ldr	r1, [pc, #184]	; 157f8 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   1573c:	ldr	r3, [pc, #184]	; 157fc <flatcc_builder_extend_offset_vector@@Base+0xec>
   15740:	mov	r2, #892	; 0x37c
   15744:	add	r0, pc, r0
   15748:	add	r1, pc, r1
   1574c:	add	r3, pc, r3
   15750:	bl	129c0 <__assert_fail@plt>
   15754:	str	r2, [r0, #20]
   15758:	ldr	r5, [r4, #20]
   1575c:	ldr	r0, [r4, #24]
   15760:	add	r1, r5, r1, lsl #2
   15764:	cmp	r1, r0
   15768:	str	r1, [r4, #20]
   1576c:	bcs	15778 <flatcc_builder_extend_offset_vector@@Base+0x68>
   15770:	ldr	r0, [r4, #16]
   15774:	b	157e8 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   15778:	ldr	r2, [r4, #28]
   1577c:	ldr	r0, [r4, #40]	; 0x28
   15780:	ldr	ip, [r4, #48]	; 0x30
   15784:	mov	r3, #1
   15788:	str	r3, [sp]
   1578c:	mov	r3, #1
   15790:	add	r1, r1, r2
   15794:	add	r2, r1, #1
   15798:	add	r1, r4, #60	; 0x3c
   1579c:	blx	ip
   157a0:	mov	r1, r0
   157a4:	mov	r0, #0
   157a8:	cmp	r1, #0
   157ac:	beq	157b8 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   157b0:	sub	sp, fp, #8
   157b4:	pop	{r4, r5, fp, pc}
   157b8:	ldr	r1, [r4, #28]
   157bc:	ldr	r0, [r4, #60]	; 0x3c
   157c0:	ldr	r3, [r4, #64]	; 0x40
   157c4:	ldr	r2, [r4, #32]
   157c8:	add	r0, r0, r1
   157cc:	sub	r1, r3, r1
   157d0:	mvn	r3, #3
   157d4:	cmn	r1, #4
   157d8:	str	r0, [r4, #16]
   157dc:	movcs	r1, r3
   157e0:	str	r1, [r4, #24]
   157e4:	str	r3, [r2, #4]
   157e8:	add	r0, r0, r5
   157ec:	sub	sp, fp, #8
   157f0:	pop	{r4, r5, fp, pc}
   157f4:	andeq	r9, r0, sp, asr #23
   157f8:	andeq	r8, r0, r3, lsl #22
   157fc:	andeq	r9, r0, r0, ror #23

00015800 <flatcc_builder_offset_vector_push@@Base>:
   15800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15804:	add	fp, sp, #24
   15808:	sub	sp, sp, #8
   1580c:	mov	r6, r0
   15810:	ldr	r0, [r0, #32]
   15814:	mov	r8, r1
   15818:	ldrh	r1, [r0, #14]
   1581c:	cmp	r1, #5
   15820:	bne	158d4 <flatcc_builder_offset_vector_push@@Base+0xd4>
   15824:	ldr	r1, [r0, #20]
   15828:	mov	r5, #0
   1582c:	cmn	r1, #-1073741823	; 0xc0000001
   15830:	beq	158c8 <flatcc_builder_offset_vector_push@@Base+0xc8>
   15834:	add	r1, r1, #1
   15838:	str	r1, [r0, #20]
   1583c:	ldr	r7, [r6, #20]
   15840:	ldr	r0, [r6, #24]
   15844:	add	r1, r7, #4
   15848:	cmp	r1, r0
   1584c:	str	r1, [r6, #20]
   15850:	bcs	1585c <flatcc_builder_offset_vector_push@@Base+0x5c>
   15854:	ldr	r0, [r6, #16]
   15858:	b	158bc <flatcc_builder_offset_vector_push@@Base+0xbc>
   1585c:	ldr	r1, [r6, #28]
   15860:	ldr	r0, [r6, #40]	; 0x28
   15864:	ldr	r4, [r6, #48]	; 0x30
   15868:	mov	r2, #1
   1586c:	mov	r3, #1
   15870:	str	r2, [sp]
   15874:	add	r1, r7, r1
   15878:	add	r2, r1, #5
   1587c:	add	r1, r6, #60	; 0x3c
   15880:	blx	r4
   15884:	cmp	r0, #0
   15888:	bne	158c8 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1588c:	ldr	r1, [r6, #28]
   15890:	ldr	r0, [r6, #60]	; 0x3c
   15894:	ldr	r3, [r6, #64]	; 0x40
   15898:	ldr	r2, [r6, #32]
   1589c:	add	r0, r0, r1
   158a0:	sub	r1, r3, r1
   158a4:	mvn	r3, #3
   158a8:	cmn	r1, #4
   158ac:	str	r0, [r6, #16]
   158b0:	movcs	r1, r3
   158b4:	str	r1, [r6, #24]
   158b8:	str	r3, [r2, #4]
   158bc:	adds	r0, r0, r7
   158c0:	movne	r5, r0
   158c4:	strne	r8, [r0]
   158c8:	mov	r0, r5
   158cc:	sub	sp, fp, #24
   158d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158d4:	ldr	r0, [pc, #24]	; 158f4 <flatcc_builder_offset_vector_push@@Base+0xf4>
   158d8:	ldr	r1, [pc, #24]	; 158f8 <flatcc_builder_offset_vector_push@@Base+0xf8>
   158dc:	ldr	r3, [pc, #24]	; 158fc <flatcc_builder_offset_vector_push@@Base+0xfc>
   158e0:	movw	r2, #934	; 0x3a6
   158e4:	add	r0, pc, r0
   158e8:	add	r1, pc, r1
   158ec:	add	r3, pc, r3
   158f0:	bl	129c0 <__assert_fail@plt>
   158f4:	muleq	r0, sl, sp
   158f8:	andeq	r8, r0, r3, ror #18
   158fc:	andeq	r8, r0, r5, asr #27

00015900 <flatcc_builder_append_offset_vector@@Base>:
   15900:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15904:	add	fp, sp, #24
   15908:	sub	sp, sp, #8
   1590c:	mov	r6, r0
   15910:	ldr	r0, [r0, #32]
   15914:	mov	r8, r1
   15918:	ldrh	r1, [r0, #14]
   1591c:	cmp	r1, #5
   15920:	bne	15a10 <flatcc_builder_append_offset_vector@@Base+0x110>
   15924:	ldr	r1, [r0, #20]
   15928:	mov	r5, r2
   1592c:	adds	r1, r1, r2
   15930:	cmpcc	r1, #1073741824	; 0x40000000
   15934:	bcc	15958 <flatcc_builder_append_offset_vector@@Base+0x58>
   15938:	ldr	r0, [pc, #252]	; 15a3c <flatcc_builder_append_offset_vector@@Base+0x13c>
   1593c:	ldr	r1, [pc, #252]	; 15a40 <flatcc_builder_append_offset_vector@@Base+0x140>
   15940:	ldr	r3, [pc, #252]	; 15a44 <flatcc_builder_append_offset_vector@@Base+0x144>
   15944:	mov	r2, #892	; 0x37c
   15948:	add	r0, pc, r0
   1594c:	add	r1, pc, r1
   15950:	add	r3, pc, r3
   15954:	bl	129c0 <__assert_fail@plt>
   15958:	str	r1, [r0, #20]
   1595c:	ldr	r4, [r6, #20]
   15960:	ldr	r0, [r6, #24]
   15964:	add	r1, r4, r5, lsl #2
   15968:	cmp	r1, r0
   1596c:	str	r1, [r6, #20]
   15970:	bcs	15994 <flatcc_builder_append_offset_vector@@Base+0x94>
   15974:	ldr	r0, [r6, #16]
   15978:	adds	r7, r0, r4
   1597c:	beq	15a00 <flatcc_builder_append_offset_vector@@Base+0x100>
   15980:	lsl	r2, r5, #2
   15984:	mov	r0, r7
   15988:	mov	r1, r8
   1598c:	bl	12900 <memcpy@plt>
   15990:	b	15a04 <flatcc_builder_append_offset_vector@@Base+0x104>
   15994:	ldr	r2, [r6, #28]
   15998:	ldr	r0, [r6, #40]	; 0x28
   1599c:	ldr	r7, [r6, #48]	; 0x30
   159a0:	mov	r3, #1
   159a4:	str	r3, [sp]
   159a8:	mov	r3, #1
   159ac:	add	r1, r1, r2
   159b0:	add	r2, r1, #1
   159b4:	add	r1, r6, #60	; 0x3c
   159b8:	blx	r7
   159bc:	mov	r7, #0
   159c0:	cmp	r0, #0
   159c4:	bne	15a04 <flatcc_builder_append_offset_vector@@Base+0x104>
   159c8:	ldr	r1, [r6, #28]
   159cc:	ldr	r0, [r6, #60]	; 0x3c
   159d0:	ldr	r3, [r6, #64]	; 0x40
   159d4:	ldr	r2, [r6, #32]
   159d8:	add	r0, r0, r1
   159dc:	sub	r1, r3, r1
   159e0:	mvn	r3, #3
   159e4:	cmn	r1, #4
   159e8:	str	r0, [r6, #16]
   159ec:	movcs	r1, r3
   159f0:	str	r1, [r6, #24]
   159f4:	str	r3, [r2, #4]
   159f8:	adds	r7, r0, r4
   159fc:	bne	15980 <flatcc_builder_append_offset_vector@@Base+0x80>
   15a00:	mov	r7, #0
   15a04:	mov	r0, r7
   15a08:	sub	sp, fp, #24
   15a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a10:	ldr	r0, [pc, #24]	; 15a30 <flatcc_builder_append_offset_vector@@Base+0x130>
   15a14:	ldr	r1, [pc, #24]	; 15a34 <flatcc_builder_append_offset_vector@@Base+0x134>
   15a18:	ldr	r3, [pc, #24]	; 15a38 <flatcc_builder_append_offset_vector@@Base+0x138>
   15a1c:	mov	r2, #948	; 0x3b4
   15a20:	add	r0, pc, r0
   15a24:	add	r1, pc, r1
   15a28:	add	r3, pc, r3
   15a2c:	bl	129c0 <__assert_fail@plt>
   15a30:	andeq	r8, r0, lr, asr ip
   15a34:	andeq	r8, r0, r7, lsr #16
   15a38:	andeq	r8, r0, fp, ror #25
   15a3c:	andeq	r9, r0, r9, asr #19
   15a40:	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   15a44:	ldrdeq	r9, [r0], -ip

00015a48 <flatcc_builder_extend_string@@Base>:
   15a48:	push	{r4, r5, fp, lr}
   15a4c:	add	fp, sp, #8
   15a50:	sub	sp, sp, #8
   15a54:	mov	r4, r0
   15a58:	ldr	r0, [r0, #32]
   15a5c:	ldrh	r2, [r0, #14]
   15a60:	cmp	r2, #6
   15a64:	bne	15b14 <flatcc_builder_extend_string@@Base+0xcc>
   15a68:	ldr	r2, [r0, #20]
   15a6c:	adds	r2, r2, r1
   15a70:	bcs	15b34 <flatcc_builder_extend_string@@Base+0xec>
   15a74:	str	r2, [r0, #20]
   15a78:	ldr	r5, [r4, #20]
   15a7c:	ldr	r0, [r4, #24]
   15a80:	add	r1, r5, r1
   15a84:	cmp	r1, r0
   15a88:	str	r1, [r4, #20]
   15a8c:	bcs	15a98 <flatcc_builder_extend_string@@Base+0x50>
   15a90:	ldr	r0, [r4, #16]
   15a94:	b	15b08 <flatcc_builder_extend_string@@Base+0xc0>
   15a98:	ldr	r2, [r4, #28]
   15a9c:	ldr	r0, [r4, #40]	; 0x28
   15aa0:	ldr	ip, [r4, #48]	; 0x30
   15aa4:	mov	r3, #1
   15aa8:	str	r3, [sp]
   15aac:	mov	r3, #1
   15ab0:	add	r1, r1, r2
   15ab4:	add	r2, r1, #1
   15ab8:	add	r1, r4, #60	; 0x3c
   15abc:	blx	ip
   15ac0:	mov	r1, r0
   15ac4:	mov	r0, #0
   15ac8:	cmp	r1, #0
   15acc:	beq	15ad8 <flatcc_builder_extend_string@@Base+0x90>
   15ad0:	sub	sp, fp, #8
   15ad4:	pop	{r4, r5, fp, pc}
   15ad8:	ldr	r1, [r4, #28]
   15adc:	ldr	r0, [r4, #60]	; 0x3c
   15ae0:	ldr	r3, [r4, #64]	; 0x40
   15ae4:	ldr	r2, [r4, #32]
   15ae8:	add	r0, r0, r1
   15aec:	sub	r1, r3, r1
   15af0:	mvn	r3, #3
   15af4:	cmn	r1, #4
   15af8:	str	r0, [r4, #16]
   15afc:	movcs	r1, r3
   15b00:	str	r1, [r4, #24]
   15b04:	str	r3, [r2, #4]
   15b08:	add	r0, r0, r5
   15b0c:	sub	sp, fp, #8
   15b10:	pop	{r4, r5, fp, pc}
   15b14:	ldr	r0, [pc, #56]	; 15b54 <flatcc_builder_extend_string@@Base+0x10c>
   15b18:	ldr	r1, [pc, #56]	; 15b58 <flatcc_builder_extend_string@@Base+0x110>
   15b1c:	ldr	r3, [pc, #56]	; 15b5c <flatcc_builder_extend_string@@Base+0x114>
   15b20:	movw	r2, #957	; 0x3bd
   15b24:	add	r0, pc, r0
   15b28:	add	r1, pc, r1
   15b2c:	add	r3, pc, r3
   15b30:	bl	129c0 <__assert_fail@plt>
   15b34:	ldr	r0, [pc, #36]	; 15b60 <flatcc_builder_extend_string@@Base+0x118>
   15b38:	ldr	r1, [pc, #36]	; 15b64 <flatcc_builder_extend_string@@Base+0x11c>
   15b3c:	ldr	r3, [pc, #36]	; 15b68 <flatcc_builder_extend_string@@Base+0x120>
   15b40:	mov	r2, #892	; 0x37c
   15b44:	add	r0, pc, r0
   15b48:	add	r1, pc, r1
   15b4c:	add	r3, pc, r3
   15b50:	bl	129c0 <__assert_fail@plt>
   15b54:	andeq	r8, r0, r3, ror #24
   15b58:	andeq	r8, r0, r3, lsr #14
   15b5c:	andeq	r8, r0, r7, lsl #25
   15b60:	andeq	r9, r0, sp, asr #15
   15b64:	andeq	r8, r0, r3, lsl #14
   15b68:	andeq	r9, r0, r0, ror #15

00015b6c <flatcc_builder_append_string@@Base>:
   15b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b70:	add	fp, sp, #24
   15b74:	sub	sp, sp, #8
   15b78:	mov	r6, r0
   15b7c:	ldr	r0, [r0, #32]
   15b80:	mov	r8, r1
   15b84:	ldrh	r1, [r0, #14]
   15b88:	cmp	r1, #6
   15b8c:	bne	15c58 <flatcc_builder_append_string@@Base+0xec>
   15b90:	ldr	r1, [r0, #20]
   15b94:	mov	r4, r2
   15b98:	adds	r1, r1, r2
   15b9c:	bcs	15c78 <flatcc_builder_append_string@@Base+0x10c>
   15ba0:	str	r1, [r0, #20]
   15ba4:	ldr	r5, [r6, #20]
   15ba8:	ldr	r0, [r6, #24]
   15bac:	add	r1, r5, r4
   15bb0:	cmp	r1, r0
   15bb4:	str	r1, [r6, #20]
   15bb8:	bcs	15bdc <flatcc_builder_append_string@@Base+0x70>
   15bbc:	ldr	r0, [r6, #16]
   15bc0:	adds	r7, r0, r5
   15bc4:	beq	15c48 <flatcc_builder_append_string@@Base+0xdc>
   15bc8:	mov	r0, r7
   15bcc:	mov	r1, r8
   15bd0:	mov	r2, r4
   15bd4:	bl	12900 <memcpy@plt>
   15bd8:	b	15c4c <flatcc_builder_append_string@@Base+0xe0>
   15bdc:	ldr	r2, [r6, #28]
   15be0:	ldr	r0, [r6, #40]	; 0x28
   15be4:	ldr	r7, [r6, #48]	; 0x30
   15be8:	mov	r3, #1
   15bec:	str	r3, [sp]
   15bf0:	mov	r3, #1
   15bf4:	add	r1, r1, r2
   15bf8:	add	r2, r1, #1
   15bfc:	add	r1, r6, #60	; 0x3c
   15c00:	blx	r7
   15c04:	mov	r7, #0
   15c08:	cmp	r0, #0
   15c0c:	bne	15c4c <flatcc_builder_append_string@@Base+0xe0>
   15c10:	ldr	r1, [r6, #28]
   15c14:	ldr	r0, [r6, #60]	; 0x3c
   15c18:	ldr	r3, [r6, #64]	; 0x40
   15c1c:	ldr	r2, [r6, #32]
   15c20:	add	r0, r0, r1
   15c24:	sub	r1, r3, r1
   15c28:	mvn	r3, #3
   15c2c:	cmn	r1, #4
   15c30:	str	r0, [r6, #16]
   15c34:	movcs	r1, r3
   15c38:	str	r1, [r6, #24]
   15c3c:	str	r3, [r2, #4]
   15c40:	adds	r7, r0, r5
   15c44:	bne	15bc8 <flatcc_builder_append_string@@Base+0x5c>
   15c48:	mov	r7, #0
   15c4c:	mov	r0, r7
   15c50:	sub	sp, fp, #24
   15c54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c58:	ldr	r0, [pc, #56]	; 15c98 <flatcc_builder_append_string@@Base+0x12c>
   15c5c:	ldr	r1, [pc, #56]	; 15c9c <flatcc_builder_append_string@@Base+0x130>
   15c60:	ldr	r3, [pc, #56]	; 15ca0 <flatcc_builder_append_string@@Base+0x134>
   15c64:	movw	r2, #966	; 0x3c6
   15c68:	add	r0, pc, r0
   15c6c:	add	r1, pc, r1
   15c70:	add	r3, pc, r3
   15c74:	bl	129c0 <__assert_fail@plt>
   15c78:	ldr	r0, [pc, #36]	; 15ca4 <flatcc_builder_append_string@@Base+0x138>
   15c7c:	ldr	r1, [pc, #36]	; 15ca8 <flatcc_builder_append_string@@Base+0x13c>
   15c80:	ldr	r3, [pc, #36]	; 15cac <flatcc_builder_append_string@@Base+0x140>
   15c84:	mov	r2, #892	; 0x37c
   15c88:	add	r0, pc, r0
   15c8c:	add	r1, pc, r1
   15c90:	add	r3, pc, r3
   15c94:	bl	129c0 <__assert_fail@plt>
   15c98:	andeq	r8, r0, pc, lsl fp
   15c9c:	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   15ca0:	andeq	r8, r0, r2, lsl #23
   15ca4:	andeq	r9, r0, r9, lsl #13
   15ca8:			; <UNDEFINED> instruction: 0x000085bf
   15cac:	muleq	r0, ip, r6

00015cb0 <flatcc_builder_append_string_str@@Base>:
   15cb0:	push	{r4, r5, fp, lr}
   15cb4:	add	fp, sp, #8
   15cb8:	mov	r5, r0
   15cbc:	mov	r0, r1
   15cc0:	mov	r4, r1
   15cc4:	bl	1296c <strlen@plt>
   15cc8:	mov	r2, r0
   15ccc:	mov	r0, r5
   15cd0:	mov	r1, r4
   15cd4:	pop	{r4, r5, fp, lr}
   15cd8:	b	15b6c <flatcc_builder_append_string@@Base>

00015cdc <flatcc_builder_append_string_strn@@Base>:
   15cdc:	push	{r4, r5, r6, sl, fp, lr}
   15ce0:	add	fp, sp, #16
   15ce4:	mov	r6, r0
   15ce8:	mov	r5, r1
   15cec:	mov	r0, r1
   15cf0:	mov	r1, #0
   15cf4:	mov	r4, r2
   15cf8:	bl	129a8 <memchr@plt>
   15cfc:	cmp	r0, #0
   15d00:	mov	r1, r5
   15d04:	subne	r4, r0, r5
   15d08:	mov	r0, r6
   15d0c:	mov	r2, r4
   15d10:	pop	{r4, r5, r6, sl, fp, lr}
   15d14:	b	15b6c <flatcc_builder_append_string@@Base>

00015d18 <flatcc_builder_truncate_vector@@Base>:
   15d18:	push	{fp, lr}
   15d1c:	mov	fp, sp
   15d20:	ldr	r2, [r0, #32]
   15d24:	ldrh	r3, [r2, #14]
   15d28:	cmp	r3, #4
   15d2c:	bne	15d74 <flatcc_builder_truncate_vector@@Base+0x5c>
   15d30:	ldr	r3, [r2, #20]
   15d34:	cmp	r3, r1
   15d38:	bcc	15d94 <flatcc_builder_truncate_vector@@Base+0x7c>
   15d3c:	sub	r3, r3, r1
   15d40:	str	r3, [r2, #20]
   15d44:	ldr	r2, [r0, #32]
   15d48:	ldr	r3, [r0, #20]
   15d4c:	ldr	ip, [r0, #16]
   15d50:	ldr	r2, [r2, #16]
   15d54:	mls	r3, r2, r1, r3
   15d58:	mul	r2, r2, r1
   15d5c:	mov	r1, #0
   15d60:	str	r3, [r0, #20]
   15d64:	add	r0, ip, r3
   15d68:	bl	12990 <memset@plt>
   15d6c:	mov	r0, #0
   15d70:	pop	{fp, pc}
   15d74:	ldr	r0, [pc, #56]	; 15db4 <flatcc_builder_truncate_vector@@Base+0x9c>
   15d78:	ldr	r1, [pc, #56]	; 15db8 <flatcc_builder_truncate_vector@@Base+0xa0>
   15d7c:	ldr	r3, [pc, #56]	; 15dbc <flatcc_builder_truncate_vector@@Base+0xa4>
   15d80:	movw	r2, #985	; 0x3d9
   15d84:	add	r0, pc, r0
   15d88:	add	r1, pc, r1
   15d8c:	add	r3, pc, r3
   15d90:	bl	129c0 <__assert_fail@plt>
   15d94:	ldr	r0, [pc, #36]	; 15dc0 <flatcc_builder_truncate_vector@@Base+0xa8>
   15d98:	ldr	r1, [pc, #36]	; 15dc4 <flatcc_builder_truncate_vector@@Base+0xac>
   15d9c:	ldr	r3, [pc, #36]	; 15dc8 <flatcc_builder_truncate_vector@@Base+0xb0>
   15da0:	movw	r2, #986	; 0x3da
   15da4:	add	r0, pc, r0
   15da8:	add	r1, pc, r1
   15dac:	add	r3, pc, r3
   15db0:	bl	129c0 <__assert_fail@plt>
   15db4:	andeq	r8, r0, r1, lsl #16
   15db8:	andeq	r8, r0, r3, asr #9
   15dbc:			; <UNDEFINED> instruction: 0x00008ab3
   15dc0:	ldrdeq	r8, [r0], -sl
   15dc4:	andeq	r8, r0, r3, lsr #9
   15dc8:	muleq	r0, r3, sl

00015dcc <flatcc_builder_truncate_offset_vector@@Base>:
   15dcc:	push	{fp, lr}
   15dd0:	mov	fp, sp
   15dd4:	ldr	r2, [r0, #32]
   15dd8:	ldrh	r3, [r2, #14]
   15ddc:	cmp	r3, #5
   15de0:	bne	15e28 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15de4:	ldr	r3, [r2, #20]
   15de8:	cmp	r3, r1
   15dec:	bcc	15e48 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15df0:	sub	r3, r3, r1
   15df4:	str	r3, [r2, #20]
   15df8:	ldr	r2, [r0, #32]
   15dfc:	ldr	r3, [r0, #20]
   15e00:	ldr	ip, [r0, #16]
   15e04:	ldr	r2, [r2, #16]
   15e08:	mls	r3, r2, r1, r3
   15e0c:	mul	r2, r2, r1
   15e10:	mov	r1, #0
   15e14:	str	r3, [r0, #20]
   15e18:	add	r0, ip, r3
   15e1c:	bl	12990 <memset@plt>
   15e20:	mov	r0, #0
   15e24:	pop	{fp, pc}
   15e28:	ldr	r0, [pc, #56]	; 15e68 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   15e2c:	ldr	r1, [pc, #56]	; 15e6c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15e30:	ldr	r3, [pc, #56]	; 15e70 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   15e34:	movw	r2, #994	; 0x3e2
   15e38:	add	r0, pc, r0
   15e3c:	add	r1, pc, r1
   15e40:	add	r3, pc, r3
   15e44:	bl	129c0 <__assert_fail@plt>
   15e48:	ldr	r0, [pc, #36]	; 15e74 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   15e4c:	ldr	r1, [pc, #36]	; 15e78 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   15e50:	ldr	r3, [pc, #36]	; 15e7c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   15e54:	movw	r2, #995	; 0x3e3
   15e58:	add	r0, pc, r0
   15e5c:	add	r1, pc, r1
   15e60:	add	r3, pc, r3
   15e64:	bl	129c0 <__assert_fail@plt>
   15e68:	andeq	r8, r0, r6, asr #16
   15e6c:	andeq	r8, r0, pc, lsl #8
   15e70:	andeq	r8, r0, r2, ror #20
   15e74:	muleq	r0, r0, sl
   15e78:	andeq	r8, r0, pc, ror #7
   15e7c:	andeq	r8, r0, r2, asr #20

00015e80 <flatcc_builder_truncate_string@@Base>:
   15e80:	push	{fp, lr}
   15e84:	mov	fp, sp
   15e88:	mov	r2, r1
   15e8c:	ldr	r1, [r0, #32]
   15e90:	ldrh	r3, [r1, #14]
   15e94:	cmp	r3, #6
   15e98:	bne	15ed4 <flatcc_builder_truncate_string@@Base+0x54>
   15e9c:	ldr	r3, [r1, #20]
   15ea0:	cmp	r3, r2
   15ea4:	bcc	15ef4 <flatcc_builder_truncate_string@@Base+0x74>
   15ea8:	sub	r3, r3, r2
   15eac:	str	r3, [r1, #20]
   15eb0:	ldr	r3, [r0, #20]
   15eb4:	ldr	r1, [r0, #16]
   15eb8:	sub	r3, r3, r2
   15ebc:	str	r3, [r0, #20]
   15ec0:	add	r0, r1, r3
   15ec4:	mov	r1, #0
   15ec8:	bl	12990 <memset@plt>
   15ecc:	mov	r0, #0
   15ed0:	pop	{fp, pc}
   15ed4:	ldr	r0, [pc, #56]	; 15f14 <flatcc_builder_truncate_string@@Base+0x94>
   15ed8:	ldr	r1, [pc, #56]	; 15f18 <flatcc_builder_truncate_string@@Base+0x98>
   15edc:	ldr	r3, [pc, #56]	; 15f1c <flatcc_builder_truncate_string@@Base+0x9c>
   15ee0:	movw	r2, #1003	; 0x3eb
   15ee4:	add	r0, pc, r0
   15ee8:	add	r1, pc, r1
   15eec:	add	r3, pc, r3
   15ef0:	bl	129c0 <__assert_fail@plt>
   15ef4:	ldr	r0, [pc, #36]	; 15f20 <flatcc_builder_truncate_string@@Base+0xa0>
   15ef8:	ldr	r1, [pc, #36]	; 15f24 <flatcc_builder_truncate_string@@Base+0xa4>
   15efc:	ldr	r3, [pc, #36]	; 15f28 <flatcc_builder_truncate_string@@Base+0xa8>
   15f00:	mov	r2, #1004	; 0x3ec
   15f04:	add	r0, pc, r0
   15f08:	add	r1, pc, r1
   15f0c:	add	r3, pc, r3
   15f10:	bl	129c0 <__assert_fail@plt>
   15f14:	andeq	r8, r0, r3, lsr #17
   15f18:	andeq	r8, r0, r3, ror #6
   15f1c:	andeq	r8, r0, r7, lsr sl
   15f20:	andeq	r8, r0, lr, asr sl
   15f24:	andeq	r8, r0, r3, asr #6
   15f28:	andeq	r8, r0, r7, lsl sl

00015f2c <flatcc_builder_start_vector@@Base>:
   15f2c:	push	{r4, r5, r6, r7, fp, lr}
   15f30:	add	fp, sp, #16
   15f34:	mov	r7, #4
   15f38:	cmp	r2, #4
   15f3c:	mov	r6, r1
   15f40:	mov	r5, r3
   15f44:	mov	r4, r0
   15f48:	movls	r2, r7
   15f4c:	mov	r1, r2
   15f50:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   15f54:	mov	r1, r0
   15f58:	mvn	r0, #0
   15f5c:	cmp	r1, #0
   15f60:	popne	{r4, r5, r6, r7, fp, pc}
   15f64:	ldr	r0, [r4, #32]
   15f68:	str	r6, [r0, #16]
   15f6c:	mov	r0, #0
   15f70:	ldr	r1, [r4, #32]
   15f74:	str	r0, [r1, #20]
   15f78:	ldr	r1, [r4, #32]
   15f7c:	str	r5, [r1, #24]
   15f80:	ldr	r1, [r4, #32]
   15f84:	strh	r7, [r1, #14]
   15f88:	ldr	r2, [r4, #28]
   15f8c:	ldr	r3, [r4, #60]	; 0x3c
   15f90:	ldr	r7, [r4, #64]	; 0x40
   15f94:	add	r3, r3, r2
   15f98:	sub	r2, r7, r2
   15f9c:	str	r3, [r4, #16]
   15fa0:	mvn	r3, #3
   15fa4:	cmn	r2, #4
   15fa8:	movcs	r2, r3
   15fac:	str	r2, [r4, #24]
   15fb0:	str	r3, [r1, #4]
   15fb4:	pop	{r4, r5, r6, r7, fp, pc}

00015fb8 <flatcc_builder_start_offset_vector@@Base>:
   15fb8:	push	{r4, r5, fp, lr}
   15fbc:	add	fp, sp, #8
   15fc0:	mov	r1, #4
   15fc4:	mov	r4, r0
   15fc8:	mov	r5, #4
   15fcc:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   15fd0:	mov	r1, r0
   15fd4:	mvn	r0, #0
   15fd8:	cmp	r1, #0
   15fdc:	popne	{r4, r5, fp, pc}
   15fe0:	ldr	r0, [r4, #32]
   15fe4:	mov	r2, #5
   15fe8:	str	r5, [r0, #16]
   15fec:	mov	r0, #0
   15ff0:	ldr	r1, [r4, #32]
   15ff4:	str	r0, [r1, #20]
   15ff8:	ldr	r1, [r4, #32]
   15ffc:	strh	r2, [r1, #14]
   16000:	ldr	r2, [r4, #28]
   16004:	ldr	r3, [r4, #60]	; 0x3c
   16008:	ldr	r5, [r4, #64]	; 0x40
   1600c:	add	r3, r3, r2
   16010:	sub	r2, r5, r2
   16014:	str	r3, [r4, #16]
   16018:	mvn	r3, #3
   1601c:	cmn	r2, #4
   16020:	movcs	r2, r3
   16024:	str	r2, [r4, #24]
   16028:	str	r3, [r1, #4]
   1602c:	pop	{r4, r5, fp, pc}

00016030 <flatcc_builder_create_offset_vector@@Base>:
   16030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16034:	add	fp, sp, #24
   16038:	sub	sp, sp, #8
   1603c:	mov	r8, r1
   16040:	mov	r1, #4
   16044:	mov	r6, r2
   16048:	mov	r4, r0
   1604c:	mov	r7, #4
   16050:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   16054:	cmp	r0, #0
   16058:	beq	16068 <flatcc_builder_create_offset_vector@@Base+0x38>
   1605c:	mov	r0, #0
   16060:	sub	sp, fp, #24
   16064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16068:	ldr	r0, [r4, #32]
   1606c:	mov	r1, #0
   16070:	str	r7, [r0, #16]
   16074:	ldr	r0, [r4, #32]
   16078:	str	r1, [r0, #20]
   1607c:	mov	r1, #5
   16080:	ldr	r0, [r4, #32]
   16084:	strh	r1, [r0, #14]
   16088:	ldr	r1, [r4, #28]
   1608c:	ldr	r2, [r4, #60]	; 0x3c
   16090:	ldr	r3, [r4, #64]	; 0x40
   16094:	add	r2, r2, r1
   16098:	sub	r1, r3, r1
   1609c:	str	r2, [r4, #16]
   160a0:	mvn	r2, #3
   160a4:	cmn	r1, #4
   160a8:	movcs	r1, r2
   160ac:	str	r1, [r4, #24]
   160b0:	str	r2, [r0, #4]
   160b4:	ldr	r1, [r0, #20]
   160b8:	adds	r1, r1, r6
   160bc:	cmpcc	r1, #1073741824	; 0x40000000
   160c0:	bcc	160e4 <flatcc_builder_create_offset_vector@@Base+0xb4>
   160c4:	ldr	r0, [pc, #200]	; 16194 <flatcc_builder_create_offset_vector@@Base+0x164>
   160c8:	ldr	r1, [pc, #200]	; 16198 <flatcc_builder_create_offset_vector@@Base+0x168>
   160cc:	ldr	r3, [pc, #200]	; 1619c <flatcc_builder_create_offset_vector@@Base+0x16c>
   160d0:	mov	r2, #892	; 0x37c
   160d4:	add	r0, pc, r0
   160d8:	add	r1, pc, r1
   160dc:	add	r3, pc, r3
   160e0:	bl	129c0 <__assert_fail@plt>
   160e4:	str	r1, [r0, #20]
   160e8:	ldr	r7, [r4, #20]
   160ec:	ldr	r0, [r4, #24]
   160f0:	add	r1, r7, r6, lsl #2
   160f4:	cmp	r1, r0
   160f8:	str	r1, [r4, #20]
   160fc:	bcs	16110 <flatcc_builder_create_offset_vector@@Base+0xe0>
   16100:	ldr	r0, [r4, #16]
   16104:	adds	r0, r0, r7
   16108:	bne	16178 <flatcc_builder_create_offset_vector@@Base+0x148>
   1610c:	b	1605c <flatcc_builder_create_offset_vector@@Base+0x2c>
   16110:	ldr	r2, [r4, #28]
   16114:	ldr	r0, [r4, #40]	; 0x28
   16118:	ldr	r5, [r4, #48]	; 0x30
   1611c:	mov	r3, #1
   16120:	str	r3, [sp]
   16124:	mov	r3, #1
   16128:	add	r1, r1, r2
   1612c:	add	r2, r1, #1
   16130:	add	r1, r4, #60	; 0x3c
   16134:	blx	r5
   16138:	cmp	r0, #0
   1613c:	bne	1605c <flatcc_builder_create_offset_vector@@Base+0x2c>
   16140:	ldr	r1, [r4, #28]
   16144:	ldr	r0, [r4, #60]	; 0x3c
   16148:	ldr	r3, [r4, #64]	; 0x40
   1614c:	ldr	r2, [r4, #32]
   16150:	add	r0, r0, r1
   16154:	sub	r1, r3, r1
   16158:	mvn	r3, #3
   1615c:	cmn	r1, #4
   16160:	str	r0, [r4, #16]
   16164:	movcs	r1, r3
   16168:	str	r1, [r4, #24]
   1616c:	str	r3, [r2, #4]
   16170:	adds	r0, r0, r7
   16174:	beq	1605c <flatcc_builder_create_offset_vector@@Base+0x2c>
   16178:	lsl	r2, r6, #2
   1617c:	mov	r1, r8
   16180:	bl	12900 <memcpy@plt>
   16184:	mov	r0, r4
   16188:	sub	sp, fp, #24
   1618c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16190:	b	161a0 <flatcc_builder_end_offset_vector@@Base>
   16194:	andeq	r9, r0, sp, lsr r2
   16198:	andeq	r8, r0, r3, ror r1
   1619c:	andeq	r9, r0, r0, asr r2

000161a0 <flatcc_builder_end_offset_vector@@Base>:
   161a0:	push	{r4, r5, fp, lr}
   161a4:	add	fp, sp, #8
   161a8:	mov	r4, r0
   161ac:	ldr	r0, [r0, #32]
   161b0:	ldrh	r1, [r0, #14]
   161b4:	cmp	r1, #5
   161b8:	bne	16258 <flatcc_builder_end_offset_vector@@Base+0xb8>
   161bc:	ldr	r2, [r0, #20]
   161c0:	ldr	r1, [r4, #16]
   161c4:	mov	r0, r4
   161c8:	mov	r3, #0
   161cc:	bl	172c4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   161d0:	mov	r5, r0
   161d4:	cmp	r0, #0
   161d8:	beq	16250 <flatcc_builder_end_offset_vector@@Base+0xb0>
   161dc:	ldr	r0, [r4, #16]
   161e0:	ldr	r2, [r4, #20]
   161e4:	mov	r1, #0
   161e8:	bl	12990 <memset@plt>
   161ec:	ldr	r0, [r4, #32]
   161f0:	ldr	r1, [r4, #60]	; 0x3c
   161f4:	ldr	ip, [r4, #64]	; 0x40
   161f8:	ldr	r3, [r0, #8]
   161fc:	str	r3, [r4, #20]
   16200:	ldr	r3, [r0]
   16204:	str	r3, [r4, #28]
   16208:	add	r1, r1, r3
   1620c:	ldr	r2, [r0, #4]
   16210:	str	r1, [r4, #16]
   16214:	sub	r1, ip, r3
   16218:	cmp	r1, r2
   1621c:	movhi	r1, r2
   16220:	str	r1, [r4, #24]
   16224:	ldrh	r1, [r4, #130]	; 0x82
   16228:	ldrh	r2, [r4, #128]	; 0x80
   1622c:	cmp	r2, r1
   16230:	strhcc	r1, [r4, #128]	; 0x80
   16234:	ldrh	r1, [r0, #12]
   16238:	sub	r0, r0, #36	; 0x24
   1623c:	str	r0, [r4, #32]
   16240:	strh	r1, [r4, #130]	; 0x82
   16244:	ldr	r0, [r4, #156]	; 0x9c
   16248:	sub	r0, r0, #1
   1624c:	str	r0, [r4, #156]	; 0x9c
   16250:	mov	r0, r5
   16254:	pop	{r4, r5, fp, pc}
   16258:	ldr	r0, [pc, #24]	; 16278 <flatcc_builder_end_offset_vector@@Base+0xd8>
   1625c:	ldr	r1, [pc, #24]	; 1627c <flatcc_builder_end_offset_vector@@Base+0xdc>
   16260:	ldr	r3, [pc, #24]	; 16280 <flatcc_builder_end_offset_vector@@Base+0xe0>
   16264:	movw	r2, #1480	; 0x5c8
   16268:	add	r0, pc, r0
   1626c:	add	r1, pc, r1
   16270:	add	r3, pc, r3
   16274:	bl	129c0 <__assert_fail@plt>
   16278:	andeq	r8, r0, r6, lsl r4
   1627c:	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   16280:	andeq	r8, r0, sp, lsr sl

00016284 <flatcc_builder_start_string@@Base>:
   16284:	push	{r4, r5, fp, lr}
   16288:	add	fp, sp, #8
   1628c:	mov	r1, #1
   16290:	mov	r4, r0
   16294:	mov	r5, #1
   16298:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   1629c:	mov	r1, r0
   162a0:	mvn	r0, #0
   162a4:	cmp	r1, #0
   162a8:	popne	{r4, r5, fp, pc}
   162ac:	ldr	r0, [r4, #32]
   162b0:	mov	r2, #6
   162b4:	str	r5, [r0, #16]
   162b8:	mov	r0, #0
   162bc:	ldr	r1, [r4, #32]
   162c0:	str	r0, [r1, #20]
   162c4:	ldr	r1, [r4, #32]
   162c8:	strh	r2, [r1, #14]
   162cc:	ldr	r2, [r4, #28]
   162d0:	ldr	r3, [r4, #60]	; 0x3c
   162d4:	ldr	r5, [r4, #64]	; 0x40
   162d8:	add	r3, r3, r2
   162dc:	sub	r2, r5, r2
   162e0:	str	r3, [r4, #16]
   162e4:	mvn	r3, #3
   162e8:	cmn	r2, #4
   162ec:	movcs	r2, r3
   162f0:	str	r2, [r4, #24]
   162f4:	str	r3, [r1, #4]
   162f8:	pop	{r4, r5, fp, pc}

000162fc <flatcc_builder_reserve_table@@Base>:
   162fc:	push	{r4, r5, r6, sl, fp, lr}
   16300:	add	fp, sp, #16
   16304:	sub	sp, sp, #8
   16308:	cmn	r1, #1
   1630c:	ble	163e0 <flatcc_builder_reserve_table@@Base+0xe4>
   16310:	mov	r4, r0
   16314:	ldr	r0, [r0, #32]
   16318:	mov	r5, r1
   1631c:	ldr	r1, [r4, #56]	; 0x38
   16320:	ldrh	r2, [r0, #28]
   16324:	ldr	r0, [r0, #16]
   16328:	add	r6, r0, r2, lsl #1
   1632c:	add	r0, r6, r5, lsl #1
   16330:	add	r2, r0, #4
   16334:	cmp	r2, r1
   16338:	bls	16360 <flatcc_builder_reserve_table@@Base+0x64>
   1633c:	ldr	r0, [r4, #40]	; 0x28
   16340:	ldr	ip, [r4, #48]	; 0x30
   16344:	mov	r3, #0
   16348:	add	r1, r4, #52	; 0x34
   1634c:	str	r3, [sp]
   16350:	mov	r3, #1
   16354:	blx	ip
   16358:	cmp	r0, #0
   1635c:	bne	16400 <flatcc_builder_reserve_table@@Base+0x104>
   16360:	ldr	r0, [r4, #52]	; 0x34
   16364:	adds	r0, r0, r6
   16368:	str	r0, [r4, #4]
   1636c:	mvneq	r0, #0
   16370:	subeq	sp, fp, #16
   16374:	popeq	{r4, r5, r6, sl, fp, pc}
   16378:	add	r0, r0, #4
   1637c:	lsl	r1, r5, #1
   16380:	str	r0, [r4, #4]
   16384:	ldr	r0, [r4, #32]
   16388:	ldr	r3, [r4, #80]	; 0x50
   1638c:	ldr	r5, [r0, #20]
   16390:	orr	r0, r1, #1
   16394:	add	r2, r5, r0
   16398:	cmp	r2, r3
   1639c:	bls	163c4 <flatcc_builder_reserve_table@@Base+0xc8>
   163a0:	ldr	r0, [r4, #40]	; 0x28
   163a4:	ldr	r6, [r4, #48]	; 0x30
   163a8:	mov	r3, #3
   163ac:	add	r1, r4, #76	; 0x4c
   163b0:	str	r3, [sp]
   163b4:	mov	r3, #0
   163b8:	blx	r6
   163bc:	cmp	r0, #0
   163c0:	bne	16400 <flatcc_builder_reserve_table@@Base+0x104>
   163c4:	ldr	r0, [r4, #76]	; 0x4c
   163c8:	adds	r0, r0, r5
   163cc:	str	r0, [r4]
   163d0:	mov	r0, #0
   163d4:	mvneq	r0, #0
   163d8:	sub	sp, fp, #16
   163dc:	pop	{r4, r5, r6, sl, fp, pc}
   163e0:	ldr	r0, [pc, #56]	; 16420 <flatcc_builder_reserve_table@@Base+0x124>
   163e4:	ldr	r1, [pc, #56]	; 16424 <flatcc_builder_reserve_table@@Base+0x128>
   163e8:	ldr	r3, [pc, #56]	; 16428 <flatcc_builder_reserve_table@@Base+0x12c>
   163ec:	movw	r2, #1065	; 0x429
   163f0:	add	r0, pc, r0
   163f4:	add	r1, pc, r1
   163f8:	add	r3, pc, r3
   163fc:	bl	129c0 <__assert_fail@plt>
   16400:	ldr	r0, [pc, #36]	; 1642c <flatcc_builder_reserve_table@@Base+0x130>
   16404:	ldr	r1, [pc, #36]	; 16430 <flatcc_builder_reserve_table@@Base+0x134>
   16408:	ldr	r3, [pc, #36]	; 16434 <flatcc_builder_reserve_table@@Base+0x138>
   1640c:	mov	r2, #308	; 0x134
   16410:	add	r0, pc, r0
   16414:	add	r1, pc, r1
   16418:	add	r3, pc, r3
   1641c:	bl	129c0 <__assert_fail@plt>
   16420:	ldrdeq	r8, [r0], -r5
   16424:	andeq	r7, r0, r7, asr lr
   16428:	andeq	r8, r0, ip, lsl #11
   1642c:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   16430:	andeq	r7, r0, r7, lsr lr
   16434:	andeq	r8, r0, sl, lsr #28

00016438 <flatcc_builder_start_table@@Base>:
   16438:	push	{r4, r5, r6, r7, fp, lr}
   1643c:	add	fp, sp, #16
   16440:	sub	sp, sp, #8
   16444:	mov	r6, r1
   16448:	mov	r1, #4
   1644c:	mov	r4, r0
   16450:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   16454:	mvn	r5, #0
   16458:	cmp	r0, #0
   1645c:	beq	1646c <flatcc_builder_start_table@@Base+0x34>
   16460:	mov	r0, r5
   16464:	sub	sp, fp, #16
   16468:	pop	{r4, r5, r6, r7, fp, pc}
   1646c:	mov	r1, r4
   16470:	ldr	r2, [r4, #4]
   16474:	ldr	r3, [r4, #32]
   16478:	ldr	r0, [r1, #52]!	; 0x34
   1647c:	sub	r0, r2, r0
   16480:	str	r0, [r3, #16]
   16484:	ldr	r0, [r4]
   16488:	ldr	r3, [r4, #76]	; 0x4c
   1648c:	ldr	r2, [r4, #32]
   16490:	sub	r0, r0, r3
   16494:	mov	r3, #0
   16498:	str	r0, [r2, #20]
   1649c:	ldr	r0, [r4, #12]
   164a0:	ldr	r2, [r4, #32]
   164a4:	str	r0, [r2, #24]
   164a8:	ldr	r0, [r4, #32]
   164ac:	ldrh	r2, [r4, #8]
   164b0:	strh	r2, [r0, #28]
   164b4:	movw	r0, #15186	; 0x3b52
   164b8:	strh	r3, [r4, #8]
   164bc:	mov	r2, #3
   164c0:	movt	r0, #12137	; 0x2f69
   164c4:	str	r0, [r4, #12]
   164c8:	ldr	r0, [r4, #32]
   164cc:	strh	r2, [r0, #14]
   164d0:	ldrh	r2, [r0, #28]
   164d4:	ldr	r0, [r0, #16]
   164d8:	add	r7, r0, r2, lsl #1
   164dc:	add	r0, r7, r6, lsl #1
   164e0:	add	r2, r0, #4
   164e4:	ldr	r0, [r4, #56]	; 0x38
   164e8:	cmp	r2, r0
   164ec:	bls	1650c <flatcc_builder_start_table@@Base+0xd4>
   164f0:	ldr	r0, [r4, #40]	; 0x28
   164f4:	ldr	ip, [r4, #48]	; 0x30
   164f8:	str	r3, [sp]
   164fc:	mov	r3, #1
   16500:	blx	ip
   16504:	cmp	r0, #0
   16508:	bne	165b0 <flatcc_builder_start_table@@Base+0x178>
   1650c:	ldr	r0, [r4, #52]	; 0x34
   16510:	adds	r0, r0, r7
   16514:	str	r0, [r4, #4]
   16518:	beq	16460 <flatcc_builder_start_table@@Base+0x28>
   1651c:	add	r0, r0, #4
   16520:	lsl	r1, r6, #1
   16524:	str	r0, [r4, #4]
   16528:	ldr	r0, [r4, #32]
   1652c:	ldr	r3, [r4, #80]	; 0x50
   16530:	ldr	r6, [r0, #20]
   16534:	orr	r0, r1, #1
   16538:	add	r2, r6, r0
   1653c:	cmp	r2, r3
   16540:	bls	16568 <flatcc_builder_start_table@@Base+0x130>
   16544:	ldr	r0, [r4, #40]	; 0x28
   16548:	ldr	r7, [r4, #48]	; 0x30
   1654c:	mov	r3, #3
   16550:	add	r1, r4, #76	; 0x4c
   16554:	str	r3, [sp]
   16558:	mov	r3, #0
   1655c:	blx	r7
   16560:	cmp	r0, #0
   16564:	bne	165b0 <flatcc_builder_start_table@@Base+0x178>
   16568:	ldr	r0, [r4, #76]	; 0x4c
   1656c:	adds	r0, r0, r6
   16570:	str	r0, [r4]
   16574:	beq	16460 <flatcc_builder_start_table@@Base+0x28>
   16578:	ldr	r0, [r4, #28]
   1657c:	ldr	r2, [r4, #60]	; 0x3c
   16580:	ldr	r3, [r4, #64]	; 0x40
   16584:	ldr	r1, [r4, #32]
   16588:	mov	r5, #0
   1658c:	add	r2, r2, r0
   16590:	sub	r0, r3, r0
   16594:	str	r2, [r4, #16]
   16598:	movw	r2, #65532	; 0xfffc
   1659c:	cmp	r0, r2
   165a0:	movcs	r0, r2
   165a4:	str	r0, [r4, #24]
   165a8:	str	r2, [r1, #4]
   165ac:	b	16460 <flatcc_builder_start_table@@Base+0x28>
   165b0:	ldr	r0, [pc, #24]	; 165d0 <flatcc_builder_start_table@@Base+0x198>
   165b4:	ldr	r1, [pc, #24]	; 165d4 <flatcc_builder_start_table@@Base+0x19c>
   165b8:	ldr	r3, [pc, #24]	; 165d8 <flatcc_builder_start_table@@Base+0x1a0>
   165bc:	mov	r2, #308	; 0x134
   165c0:	add	r0, pc, r0
   165c4:	add	r1, pc, r1
   165c8:	add	r3, pc, r3
   165cc:	bl	129c0 <__assert_fail@plt>
   165d0:	andeq	r8, r0, r8, asr #28
   165d4:	andeq	r7, r0, r7, lsl #25
   165d8:	andeq	r8, r0, sl, ror ip

000165dc <flatcc_builder_create_vtable@@Base>:
   165dc:	push	{r4, r5, fp, lr}
   165e0:	add	fp, sp, #8
   165e4:	sub	sp, sp, #80	; 0x50
   165e8:	mov	r3, r2
   165ec:	mov	r2, #0
   165f0:	mov	r4, r0
   165f4:	cmp	r3, #0
   165f8:	str	r2, [sp, #12]
   165fc:	str	r2, [sp, #8]
   16600:	movne	r2, #1
   16604:	strne	r1, [sp, #16]
   16608:	strne	r3, [sp, #8]
   1660c:	strne	r3, [sp, #20]
   16610:	strne	r2, [sp, #12]
   16614:	ldr	r0, [r4, #152]	; 0x98
   16618:	cmp	r0, #0
   1661c:	bne	1662c <flatcc_builder_create_vtable@@Base+0x50>
   16620:	ldr	r0, [r4, #180]	; 0xb4
   16624:	cmp	r0, #0
   16628:	beq	16678 <flatcc_builder_create_vtable@@Base+0x9c>
   1662c:	cmp	r3, #0
   16630:	beq	166bc <flatcc_builder_create_vtable@@Base+0xe0>
   16634:	ldr	r0, [r4, #136]	; 0x88
   16638:	ldr	ip, [r4, #44]	; 0x2c
   1663c:	add	r1, sp, #8
   16640:	add	r1, r1, #8
   16644:	sub	r5, r0, r3
   16648:	ldr	r0, [r4, #36]	; 0x24
   1664c:	str	r3, [sp]
   16650:	mov	r3, r5
   16654:	blx	ip
   16658:	cmp	r0, #0
   1665c:	bne	166dc <flatcc_builder_create_vtable@@Base+0x100>
   16660:	cmp	r5, #0
   16664:	str	r5, [r4, #136]	; 0x88
   16668:	beq	166b0 <flatcc_builder_create_vtable@@Base+0xd4>
   1666c:	add	r0, r5, #1
   16670:	sub	sp, fp, #8
   16674:	pop	{r4, r5, fp, pc}
   16678:	ldr	r5, [r4, #140]	; 0x8c
   1667c:	ldr	r0, [r4, #36]	; 0x24
   16680:	ldr	ip, [r4, #44]	; 0x2c
   16684:	add	r1, r5, r3
   16688:	str	r1, [r4, #140]	; 0x8c
   1668c:	add	r1, sp, #8
   16690:	str	r3, [sp]
   16694:	mov	r3, r5
   16698:	add	r1, r1, #8
   1669c:	blx	ip
   166a0:	cmp	r0, #0
   166a4:	bne	166fc <flatcc_builder_create_vtable@@Base+0x120>
   166a8:	adds	r0, r5, #1
   166ac:	bne	16670 <flatcc_builder_create_vtable@@Base+0x94>
   166b0:	mov	r0, #0
   166b4:	sub	sp, fp, #8
   166b8:	pop	{r4, r5, fp, pc}
   166bc:	ldr	r0, [pc, #100]	; 16728 <flatcc_builder_create_vtable@@Base+0x14c>
   166c0:	ldr	r1, [pc, #100]	; 1672c <flatcc_builder_create_vtable@@Base+0x150>
   166c4:	ldr	r3, [pc, #100]	; 16730 <flatcc_builder_create_vtable@@Base+0x154>
   166c8:	movw	r2, #647	; 0x287
   166cc:	add	r0, pc, r0
   166d0:	add	r1, pc, r1
   166d4:	add	r3, pc, r3
   166d8:	bl	129c0 <__assert_fail@plt>
   166dc:	ldr	r0, [pc, #80]	; 16734 <flatcc_builder_create_vtable@@Base+0x158>
   166e0:	ldr	r1, [pc, #80]	; 16738 <flatcc_builder_create_vtable@@Base+0x15c>
   166e4:	ldr	r3, [pc, #80]	; 1673c <flatcc_builder_create_vtable@@Base+0x160>
   166e8:	movw	r2, #651	; 0x28b
   166ec:	add	r0, pc, r0
   166f0:	add	r1, pc, r1
   166f4:	add	r3, pc, r3
   166f8:	bl	129c0 <__assert_fail@plt>
   166fc:	ldr	r0, [pc, #24]	; 1671c <flatcc_builder_create_vtable@@Base+0x140>
   16700:	ldr	r1, [pc, #24]	; 16720 <flatcc_builder_create_vtable@@Base+0x144>
   16704:	ldr	r3, [pc, #24]	; 16724 <flatcc_builder_create_vtable@@Base+0x148>
   16708:	movw	r2, #677	; 0x2a5
   1670c:	add	r0, pc, r0
   16710:	add	r1, pc, r1
   16714:	add	r3, pc, r3
   16718:	bl	129c0 <__assert_fail@plt>
   1671c:	strdeq	r8, [r0], -ip
   16720:	andeq	r7, r0, fp, lsr fp
   16724:	andeq	r8, r0, pc, ror #24
   16728:	andeq	r8, r0, ip, lsr sp
   1672c:	andeq	r7, r0, fp, ror fp
   16730:	strdeq	r8, [r0], -r3
   16734:	andeq	r8, r0, ip, lsl sp
   16738:	andeq	r7, r0, fp, asr fp
   1673c:	ldrdeq	r8, [r0], -r3

00016740 <flatcc_builder_create_cached_vtable@@Base>:
   16740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16744:	add	fp, sp, #28
   16748:	sub	sp, sp, #20
   1674c:	mov	sl, r0
   16750:	ldr	r0, [r0, #116]	; 0x74
   16754:	mov	r8, r3
   16758:	mov	r5, r2
   1675c:	str	r1, [sp, #16]
   16760:	cmp	r0, #0
   16764:	beq	16808 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16768:	ldr	r1, [sl, #92]	; 0x5c
   1676c:	rsb	r0, r0, #32
   16770:	lsr	r0, r8, r0
   16774:	add	r6, r1, r0, lsl #2
   16778:	cmp	r6, #0
   1677c:	beq	168cc <flatcc_builder_create_cached_vtable@@Base+0x18c>
   16780:	ldr	r7, [r6]
   16784:	str	r6, [sp, #12]
   16788:	cmp	r7, #0
   1678c:	beq	168d4 <flatcc_builder_create_cached_vtable@@Base+0x194>
   16790:	ldr	r4, [sl, #68]	; 0x44
   16794:	ldr	r8, [sl, #100]	; 0x64
   16798:	mov	r0, #0
   1679c:	str	r0, [sp, #8]
   167a0:	add	r9, r8, r7
   167a4:	mov	r1, r4
   167a8:	ldr	r0, [r9, #8]
   167ac:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   167b0:	cmp	r0, r5
   167b4:	bne	167cc <flatcc_builder_create_cached_vtable@@Base+0x8c>
   167b8:	ldr	r0, [sp, #16]
   167bc:	mov	r2, r5
   167c0:	bl	1290c <memcmp@plt>
   167c4:	cmp	r0, #0
   167c8:	beq	167e0 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   167cc:	ldr	r7, [r9, #12]!
   167d0:	cmp	r7, #0
   167d4:	mov	r6, r9
   167d8:	bne	167a0 <flatcc_builder_create_cached_vtable@@Base+0x60>
   167dc:	b	168c4 <flatcc_builder_create_cached_vtable@@Base+0x184>
   167e0:	ldr	r0, [sl, #152]	; 0x98
   167e4:	ldr	r1, [r9, #4]
   167e8:	cmp	r1, r0
   167ec:	beq	16a38 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   167f0:	mov	r6, r9
   167f4:	mov	r0, r9
   167f8:	ldr	r7, [r6, #12]!
   167fc:	cmp	r7, #0
   16800:	bne	1679c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   16804:	b	168d8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   16808:	ldr	r0, [sl, #124]	; 0x7c
   1680c:	cmp	r0, #0
   16810:	bne	16a84 <flatcc_builder_create_cached_vtable@@Base+0x344>
   16814:	ldr	r0, [sl, #104]	; 0x68
   16818:	add	r7, sl, #100	; 0x64
   1681c:	cmp	r0, #15
   16820:	bhi	1684c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   16824:	ldr	r0, [sl, #40]	; 0x28
   16828:	ldr	r6, [sl, #48]	; 0x30
   1682c:	mov	r1, #6
   16830:	mov	r2, #16
   16834:	mov	r3, #0
   16838:	str	r1, [sp]
   1683c:	mov	r1, r7
   16840:	blx	r6
   16844:	cmp	r0, #0
   16848:	bne	16a64 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1684c:	ldr	r0, [r7]
   16850:	mov	r7, #0
   16854:	cmp	r0, #0
   16858:	beq	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1685c:	mov	r0, #16
   16860:	mov	r2, #5
   16864:	add	r1, sl, #92	; 0x5c
   16868:	mov	r3, #1
   1686c:	mov	r4, #256	; 0x100
   16870:	str	r0, [sl, #124]	; 0x7c
   16874:	ldr	r0, [sl, #40]	; 0x28
   16878:	ldr	r6, [sl, #48]	; 0x30
   1687c:	str	r2, [sp]
   16880:	mov	r2, #256	; 0x100
   16884:	blx	r6
   16888:	cmp	r0, #0
   1688c:	bne	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16890:	ldr	r0, [sl, #96]	; 0x60
   16894:	mov	r1, r4
   16898:	lsl	r4, r4, #1
   1689c:	cmp	r0, r1, lsl #1
   168a0:	bcs	16894 <flatcc_builder_create_cached_vtable@@Base+0x154>
   168a4:	lsr	r1, r1, #2
   168a8:	mvn	r0, #0
   168ac:	mov	r2, #1
   168b0:	add	r0, r0, #1
   168b4:	cmp	r1, r2, lsl r0
   168b8:	bhi	168b0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   168bc:	str	r0, [sl, #116]	; 0x74
   168c0:	b	16768 <flatcc_builder_create_cached_vtable@@Base+0x28>
   168c4:	ldr	r9, [sp, #8]
   168c8:	b	168d8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   168cc:	mov	r7, #0
   168d0:	b	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   168d4:	mov	r9, #0
   168d8:	ldr	r4, [sl, #124]	; 0x7c
   168dc:	ldr	r0, [sl, #104]	; 0x68
   168e0:	add	r7, sl, #100	; 0x64
   168e4:	add	r2, r4, #16
   168e8:	cmp	r2, r0
   168ec:	bls	16914 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   168f0:	ldr	r0, [sl, #40]	; 0x28
   168f4:	ldr	r6, [sl, #48]	; 0x30
   168f8:	mov	r1, #6
   168fc:	mov	r3, #0
   16900:	str	r1, [sp]
   16904:	mov	r1, r7
   16908:	blx	r6
   1690c:	cmp	r0, #0
   16910:	bne	16a64 <flatcc_builder_create_cached_vtable@@Base+0x324>
   16914:	ldr	r0, [r7]
   16918:	mov	r7, #0
   1691c:	adds	r4, r0, r4
   16920:	beq	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16924:	ldr	r0, [sl, #124]	; 0x7c
   16928:	ldr	r1, [sl, #152]	; 0x98
   1692c:	add	r2, r0, #16
   16930:	str	r2, [sl, #124]	; 0x7c
   16934:	ldr	r2, [sp, #12]
   16938:	str	r1, [r4, #4]
   1693c:	ldr	r1, [r2]
   16940:	str	r1, [r4, #12]
   16944:	ldr	r1, [sp, #16]
   16948:	str	r0, [r2]
   1694c:	mov	r0, sl
   16950:	mov	r2, r5
   16954:	bl	165dc <flatcc_builder_create_vtable@@Base>
   16958:	cmp	r0, #0
   1695c:	str	r0, [r4]
   16960:	beq	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16964:	cmp	r9, #0
   16968:	beq	16984 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1696c:	ldr	r0, [r9, #8]
   16970:	str	r0, [r4, #8]
   16974:	ldr	r7, [r4]
   16978:	mov	r0, r7
   1697c:	sub	sp, fp, #28
   16980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16984:	ldr	r6, [sl, #120]	; 0x78
   16988:	ldr	r0, [sl, #172]	; 0xac
   1698c:	add	r2, r6, r5
   16990:	cmp	r0, #0
   16994:	beq	169d0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   16998:	cmp	r0, r2
   1699c:	bcs	169d0 <flatcc_builder_create_cached_vtable@@Base+0x290>
   169a0:	ldr	r0, [sl, #116]	; 0x74
   169a4:	cmp	r0, #0
   169a8:	beq	16974 <flatcc_builder_create_cached_vtable@@Base+0x234>
   169ac:	ldr	r0, [sl, #92]	; 0x5c
   169b0:	ldr	r2, [sl, #96]	; 0x60
   169b4:	mov	r1, #0
   169b8:	mov	r5, #0
   169bc:	bl	12990 <memset@plt>
   169c0:	mov	r0, #16
   169c4:	str	r5, [sl, #120]	; 0x78
   169c8:	str	r0, [sl, #124]	; 0x7c
   169cc:	b	16974 <flatcc_builder_create_cached_vtable@@Base+0x234>
   169d0:	ldr	r0, [sl, #72]	; 0x48
   169d4:	add	r7, sl, #68	; 0x44
   169d8:	cmp	r2, r0
   169dc:	bls	16a04 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   169e0:	ldr	r0, [sl, #40]	; 0x28
   169e4:	ldr	ip, [sl, #48]	; 0x30
   169e8:	mov	r1, #2
   169ec:	mov	r3, #0
   169f0:	str	r1, [sp]
   169f4:	mov	r1, r7
   169f8:	blx	ip
   169fc:	cmp	r0, #0
   16a00:	bne	16a64 <flatcc_builder_create_cached_vtable@@Base+0x324>
   16a04:	ldr	r0, [r7]
   16a08:	adds	r0, r0, r6
   16a0c:	beq	16a30 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   16a10:	ldr	r1, [sl, #120]	; 0x78
   16a14:	mov	r2, r5
   16a18:	str	r1, [r4, #8]
   16a1c:	add	r1, r1, r5
   16a20:	str	r1, [sl, #120]	; 0x78
   16a24:	ldr	r1, [sp, #16]
   16a28:	bl	12900 <memcpy@plt>
   16a2c:	b	16974 <flatcc_builder_create_cached_vtable@@Base+0x234>
   16a30:	mvn	r7, #0
   16a34:	b	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16a38:	ldr	r0, [sp, #12]
   16a3c:	cmp	r6, r0
   16a40:	beq	16a5c <flatcc_builder_create_cached_vtable@@Base+0x31c>
   16a44:	mov	r1, r0
   16a48:	ldr	r0, [r9, #12]
   16a4c:	str	r0, [r6]
   16a50:	ldr	r0, [r1]
   16a54:	str	r0, [r9, #12]
   16a58:	str	r7, [r1]
   16a5c:	ldr	r7, [r9]
   16a60:	b	16978 <flatcc_builder_create_cached_vtable@@Base+0x238>
   16a64:	ldr	r0, [pc, #68]	; 16ab0 <flatcc_builder_create_cached_vtable@@Base+0x370>
   16a68:	ldr	r1, [pc, #68]	; 16ab4 <flatcc_builder_create_cached_vtable@@Base+0x374>
   16a6c:	ldr	r3, [pc, #68]	; 16ab8 <flatcc_builder_create_cached_vtable@@Base+0x378>
   16a70:	mov	r2, #308	; 0x134
   16a74:	add	r0, pc, r0
   16a78:	add	r1, pc, r1
   16a7c:	add	r3, pc, r3
   16a80:	bl	129c0 <__assert_fail@plt>
   16a84:	ldr	r0, [pc, #24]	; 16aa4 <flatcc_builder_create_cached_vtable@@Base+0x364>
   16a88:	ldr	r1, [pc, #24]	; 16aa8 <flatcc_builder_create_cached_vtable@@Base+0x368>
   16a8c:	ldr	r3, [pc, #24]	; 16aac <flatcc_builder_create_cached_vtable@@Base+0x36c>
   16a90:	movw	r2, #342	; 0x156
   16a94:	add	r0, pc, r0
   16a98:	add	r1, pc, r1
   16a9c:	add	r3, pc, r3
   16aa0:	bl	129c0 <__assert_fail@plt>
   16aa4:	andeq	r8, r0, r8, lsr r9
   16aa8:			; <UNDEFINED> instruction: 0x000077b3
   16aac:	andeq	r8, r0, pc, lsr r9
   16ab0:	muleq	r0, r4, r9
   16ab4:	ldrdeq	r7, [r0], -r3
   16ab8:	andeq	r8, r0, r6, asr #15

00016abc <flatcc_builder_create_table@@Base>:
   16abc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ac0:	add	fp, sp, #24
   16ac4:	sub	sp, sp, #80	; 0x50
   16ac8:	ldr	r5, [fp, #12]
   16acc:	cmn	r5, #1
   16ad0:	ble	16c24 <flatcc_builder_create_table@@Base+0x168>
   16ad4:	ldr	ip, [fp, #16]
   16ad8:	tst	ip, #1
   16adc:	beq	16c44 <flatcc_builder_create_table@@Base+0x188>
   16ae0:	mov	r8, r0
   16ae4:	ldrh	r0, [r0, #128]	; 0x80
   16ae8:	cmp	r3, #4
   16aec:	movls	r3, #4
   16af0:	cmp	r0, r3
   16af4:	strhcc	r3, [r8, #128]	; 0x80
   16af8:	sub	r3, r3, #1
   16afc:	cmp	r5, #1
   16b00:	ldr	r4, [r8, #136]	; 0x88
   16b04:	sub	r0, r4, r2
   16b08:	and	r0, r0, r3
   16b0c:	add	r3, ip, r0
   16b10:	mvn	ip, #3
   16b14:	sub	r6, ip, r2
   16b18:	add	r4, r6, r4
   16b1c:	add	r6, r4, #1
   16b20:	sub	r3, r6, r3
   16b24:	str	r3, [fp, #-28]	; 0xffffffe4
   16b28:	blt	16b54 <flatcc_builder_create_table@@Base+0x98>
   16b2c:	ldr	r3, [fp, #8]
   16b30:	sub	r6, r4, r0
   16b34:	sub	r4, ip, r6
   16b38:	ldrh	r6, [r3], #2
   16b3c:	subs	r5, r5, #1
   16b40:	ldr	r7, [r6, r1]
   16b44:	add	r7, r4, r7
   16b48:	sub	r7, r7, r6
   16b4c:	str	r7, [r6, r1]
   16b50:	bne	16b38 <flatcc_builder_create_table@@Base+0x7c>
   16b54:	sub	r3, fp, #28
   16b58:	mov	r4, #4
   16b5c:	cmp	r2, #0
   16b60:	str	r3, [sp, #12]
   16b64:	mov	r3, #1
   16b68:	str	r4, [sp, #4]
   16b6c:	str	r4, [sp, #16]
   16b70:	str	r3, [sp, #8]
   16b74:	beq	16b90 <flatcc_builder_create_table@@Base+0xd4>
   16b78:	mov	r3, #2
   16b7c:	add	r4, r2, #4
   16b80:	str	r1, [sp, #20]
   16b84:	str	r2, [sp, #24]
   16b88:	str	r3, [sp, #8]
   16b8c:	str	r4, [sp, #4]
   16b90:	cmp	r0, #0
   16b94:	beq	16bc0 <flatcc_builder_create_table@@Base+0x104>
   16b98:	add	r4, r4, r0
   16b9c:	add	r1, sp, #4
   16ba0:	str	r4, [sp, #4]
   16ba4:	add	r1, r1, r3, lsl #3
   16ba8:	add	r3, r3, #1
   16bac:	ldr	r2, [pc, #208]	; 16c84 <flatcc_builder_create_table@@Base+0x1c8>
   16bb0:	ldr	r2, [pc, r2]
   16bb4:	str	r2, [r1, #8]
   16bb8:	str	r0, [r1, #12]
   16bbc:	str	r3, [sp, #8]
   16bc0:	cmp	r4, #0
   16bc4:	ble	16c64 <flatcc_builder_create_table@@Base+0x1a8>
   16bc8:	ldr	r0, [r8, #136]	; 0x88
   16bcc:	ldr	r7, [r8, #44]	; 0x2c
   16bd0:	add	r1, sp, #4
   16bd4:	mov	r2, r3
   16bd8:	add	r1, r1, #8
   16bdc:	sub	r5, r0, r4
   16be0:	ldr	r0, [r8, #36]	; 0x24
   16be4:	str	r4, [sp]
   16be8:	mov	r3, r5
   16bec:	blx	r7
   16bf0:	cmp	r0, #0
   16bf4:	streq	r5, [r8, #136]	; 0x88
   16bf8:	moveq	r0, r5
   16bfc:	subeq	sp, fp, #24
   16c00:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c04:	ldr	r0, [pc, #160]	; 16cac <flatcc_builder_create_table@@Base+0x1f0>
   16c08:	ldr	r1, [pc, #160]	; 16cb0 <flatcc_builder_create_table@@Base+0x1f4>
   16c0c:	ldr	r3, [pc, #160]	; 16cb4 <flatcc_builder_create_table@@Base+0x1f8>
   16c10:	movw	r2, #651	; 0x28b
   16c14:	add	r0, pc, r0
   16c18:	add	r1, pc, r1
   16c1c:	add	r3, pc, r3
   16c20:	bl	129c0 <__assert_fail@plt>
   16c24:	ldr	r0, [pc, #92]	; 16c88 <flatcc_builder_create_table@@Base+0x1cc>
   16c28:	ldr	r1, [pc, #92]	; 16c8c <flatcc_builder_create_table@@Base+0x1d0>
   16c2c:	ldr	r3, [pc, #92]	; 16c90 <flatcc_builder_create_table@@Base+0x1d4>
   16c30:	movw	r2, #1237	; 0x4d5
   16c34:	add	r0, pc, r0
   16c38:	add	r1, pc, r1
   16c3c:	add	r3, pc, r3
   16c40:	bl	129c0 <__assert_fail@plt>
   16c44:	ldr	r0, [pc, #72]	; 16c94 <flatcc_builder_create_table@@Base+0x1d8>
   16c48:	ldr	r1, [pc, #72]	; 16c98 <flatcc_builder_create_table@@Base+0x1dc>
   16c4c:	ldr	r3, [pc, #72]	; 16c9c <flatcc_builder_create_table@@Base+0x1e0>
   16c50:	movw	r2, #1243	; 0x4db
   16c54:	add	r0, pc, r0
   16c58:	add	r1, pc, r1
   16c5c:	add	r3, pc, r3
   16c60:	bl	129c0 <__assert_fail@plt>
   16c64:	ldr	r0, [pc, #52]	; 16ca0 <flatcc_builder_create_table@@Base+0x1e4>
   16c68:	ldr	r1, [pc, #52]	; 16ca4 <flatcc_builder_create_table@@Base+0x1e8>
   16c6c:	ldr	r3, [pc, #52]	; 16ca8 <flatcc_builder_create_table@@Base+0x1ec>
   16c70:	movw	r2, #647	; 0x287
   16c74:	add	r0, pc, r0
   16c78:	add	r1, pc, r1
   16c7c:	add	r3, pc, r3
   16c80:	bl	129c0 <__assert_fail@plt>
   16c84:	andeq	sl, r1, r0, lsr #9
   16c88:	andeq	r7, r0, sl, lsl #27
   16c8c:	andeq	r7, r0, r3, lsl r6
   16c90:	muleq	r0, r4, sp
   16c94:	andeq	r7, r0, r8, lsl lr
   16c98:	strdeq	r7, [r0], -r3
   16c9c:	andeq	r7, r0, r4, ror sp
   16ca0:	muleq	r0, r4, r7
   16ca4:	ldrdeq	r7, [r0], -r3
   16ca8:	andeq	r8, r0, fp, asr #12
   16cac:	strdeq	r8, [r0], -r4
   16cb0:	andeq	r7, r0, r3, lsr r6
   16cb4:	andeq	r8, r0, fp, lsr #13

00016cb8 <flatcc_builder_check_required_field@@Base>:
   16cb8:	ldr	r2, [r0, #32]
   16cbc:	ldrh	r2, [r2, #14]
   16cc0:	cmp	r2, #3
   16cc4:	bne	16cf4 <flatcc_builder_check_required_field@@Base+0x3c>
   16cc8:	ldrh	r3, [r0, #8]
   16ccc:	mov	r2, #0
   16cd0:	cmp	r3, r1
   16cd4:	bls	16cec <flatcc_builder_check_required_field@@Base+0x34>
   16cd8:	ldr	r0, [r0, #4]
   16cdc:	add	r0, r0, r1, lsl #1
   16ce0:	ldrh	r2, [r0]
   16ce4:	cmp	r2, #0
   16ce8:	movwne	r2, #1
   16cec:	mov	r0, r2
   16cf0:	bx	lr
   16cf4:	push	{fp, lr}
   16cf8:	mov	fp, sp
   16cfc:	ldr	r0, [pc, #24]	; 16d1c <flatcc_builder_check_required_field@@Base+0x64>
   16d00:	ldr	r1, [pc, #24]	; 16d20 <flatcc_builder_check_required_field@@Base+0x68>
   16d04:	ldr	r3, [pc, #24]	; 16d24 <flatcc_builder_check_required_field@@Base+0x6c>
   16d08:	movw	r2, #1272	; 0x4f8
   16d0c:	add	r0, pc, r0
   16d10:	add	r1, pc, r1
   16d14:	add	r3, pc, r3
   16d18:	bl	129c0 <__assert_fail@plt>
   16d1c:	andeq	r7, r0, fp, ror #26
   16d20:	andeq	r7, r0, fp, lsr r5
   16d24:	andeq	r7, r0, lr, lsl #27

00016d28 <flatcc_builder_check_union_field@@Base>:
   16d28:	mov	r2, r0
   16d2c:	ldr	r0, [r0, #32]
   16d30:	ldrh	r0, [r0, #14]
   16d34:	cmp	r0, #3
   16d38:	bne	16d98 <flatcc_builder_check_union_field@@Base+0x70>
   16d3c:	cmp	r1, #0
   16d40:	mov	r0, #0
   16d44:	ldrhne	r3, [r2, #8]
   16d48:	cmpne	r3, r1
   16d4c:	bhi	16d54 <flatcc_builder_check_union_field@@Base+0x2c>
   16d50:	bx	lr
   16d54:	ldr	r0, [r2, #4]
   16d58:	add	r0, r0, r1, lsl #1
   16d5c:	ldrh	r1, [r0, #-2]
   16d60:	cmp	r1, #0
   16d64:	beq	16d88 <flatcc_builder_check_union_field@@Base+0x60>
   16d68:	ldr	r2, [r2, #16]
   16d6c:	ldrh	r0, [r0]
   16d70:	ldrb	r1, [r2, r1]
   16d74:	cmp	r1, #0
   16d78:	beq	16d8c <flatcc_builder_check_union_field@@Base+0x64>
   16d7c:	cmp	r0, #0
   16d80:	movwne	r0, #1
   16d84:	bx	lr
   16d88:	ldrh	r0, [r0]
   16d8c:	clz	r0, r0
   16d90:	lsr	r0, r0, #5
   16d94:	bx	lr
   16d98:	push	{fp, lr}
   16d9c:	mov	fp, sp
   16da0:	ldr	r0, [pc, #24]	; 16dc0 <flatcc_builder_check_union_field@@Base+0x98>
   16da4:	ldr	r1, [pc, #24]	; 16dc4 <flatcc_builder_check_union_field@@Base+0x9c>
   16da8:	ldr	r3, [pc, #24]	; 16dc8 <flatcc_builder_check_union_field@@Base+0xa0>
   16dac:	movw	r2, #1279	; 0x4ff
   16db0:	add	r0, pc, r0
   16db4:	add	r1, pc, r1
   16db8:	add	r3, pc, r3
   16dbc:	bl	129c0 <__assert_fail@plt>
   16dc0:	andeq	r7, r0, r7, asr #25
   16dc4:	muleq	r0, r7, r4
   16dc8:	andeq	r7, r0, sp, lsr sp

00016dcc <flatcc_builder_check_required@@Base>:
   16dcc:	push	{fp, lr}
   16dd0:	mov	fp, sp
   16dd4:	mov	r3, r0
   16dd8:	ldr	r0, [r0, #32]
   16ddc:	ldrh	r0, [r0, #14]
   16de0:	cmp	r0, #3
   16de4:	bne	16e3c <flatcc_builder_check_required@@Base+0x70>
   16de8:	ldrh	ip, [r3, #8]
   16dec:	mov	r0, #0
   16df0:	cmp	ip, r2
   16df4:	movge	r0, #1
   16df8:	cmpge	r2, #1
   16dfc:	bge	16e04 <flatcc_builder_check_required@@Base+0x38>
   16e00:	pop	{fp, pc}
   16e04:	ldr	ip, [r3, #4]
   16e08:	mov	lr, #0
   16e0c:	b	16e20 <flatcc_builder_check_required@@Base+0x54>
   16e10:	add	lr, lr, #1
   16e14:	add	r1, r1, #2
   16e18:	cmp	lr, r2
   16e1c:	popge	{fp, pc}
   16e20:	ldrh	r3, [r1]
   16e24:	add	r3, ip, r3, lsl #1
   16e28:	ldrh	r3, [r3]
   16e2c:	cmp	r3, #0
   16e30:	bne	16e10 <flatcc_builder_check_required@@Base+0x44>
   16e34:	mov	r0, #0
   16e38:	pop	{fp, pc}
   16e3c:	ldr	r0, [pc, #24]	; 16e5c <flatcc_builder_check_required@@Base+0x90>
   16e40:	ldr	r1, [pc, #24]	; 16e60 <flatcc_builder_check_required@@Base+0x94>
   16e44:	ldr	r3, [pc, #24]	; 16e64 <flatcc_builder_check_required@@Base+0x98>
   16e48:	movw	r2, #1297	; 0x511
   16e4c:	add	r0, pc, r0
   16e50:	add	r1, pc, r1
   16e54:	add	r3, pc, r3
   16e58:	bl	129c0 <__assert_fail@plt>
   16e5c:	andeq	r7, r0, fp, lsr #24
   16e60:	strdeq	r7, [r0], -fp
   16e64:	strdeq	r7, [r0], -r1

00016e68 <flatcc_builder_end_table@@Base>:
   16e68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e6c:	add	fp, sp, #24
   16e70:	sub	sp, sp, #16
   16e74:	mov	r4, r0
   16e78:	ldr	r0, [r0, #32]
   16e7c:	ldrh	r0, [r0, #14]
   16e80:	cmp	r0, #3
   16e84:	bne	17000 <flatcc_builder_end_table@@Base+0x198>
   16e88:	ldrh	r0, [r4, #8]
   16e8c:	ldr	r5, [r4, #4]
   16e90:	mov	r1, #4
   16e94:	movw	r2, #31153	; 0x79b1
   16e98:	movt	r2, #40503	; 0x9e37
   16e9c:	add	r0, r1, r0, lsl #1
   16ea0:	strh	r0, [r5, #-4]!
   16ea4:	ldrh	r1, [r4, #20]
   16ea8:	uxth	r6, r0
   16eac:	add	r1, r1, #4
   16eb0:	strh	r1, [r5, #2]
   16eb4:	uxth	r1, r1
   16eb8:	ldr	r0, [r4, #12]
   16ebc:	eor	r0, r0, r6
   16ec0:	mul	r0, r0, r2
   16ec4:	eor	r0, r0, r1
   16ec8:	mov	r1, r5
   16ecc:	mul	r3, r0, r2
   16ed0:	mov	r0, r4
   16ed4:	mov	r2, r6
   16ed8:	str	r3, [r4, #12]
   16edc:	bl	16740 <flatcc_builder_create_cached_vtable@@Base>
   16ee0:	cmp	r0, #0
   16ee4:	beq	16ff0 <flatcc_builder_end_table@@Base+0x188>
   16ee8:	mov	r7, r0
   16eec:	mov	r0, r5
   16ef0:	mov	r1, #0
   16ef4:	mov	r2, r6
   16ef8:	mov	r8, #0
   16efc:	bl	12990 <memset@plt>
   16f00:	ldr	r5, [r4, #32]
   16f04:	ldr	r0, [r4, #76]	; 0x4c
   16f08:	ldr	r6, [r4]
   16f0c:	ldrh	r3, [r4, #130]	; 0x82
   16f10:	ldr	r1, [r4, #16]
   16f14:	ldr	r2, [r4, #20]
   16f18:	ldr	r5, [r5, #20]
   16f1c:	add	r0, r0, r5
   16f20:	sub	r6, r6, r0
   16f24:	asr	r6, r6, #1
   16f28:	stm	sp, {r0, r6, r7}
   16f2c:	mov	r0, r4
   16f30:	bl	16abc <flatcc_builder_create_table@@Base>
   16f34:	cmp	r0, #0
   16f38:	beq	16ff4 <flatcc_builder_end_table@@Base+0x18c>
   16f3c:	ldr	r1, [r4, #32]
   16f40:	mov	r5, r0
   16f44:	ldr	r0, [r4, #16]
   16f48:	ldr	r2, [r4, #20]
   16f4c:	ldr	r3, [r4, #52]	; 0x34
   16f50:	ldr	r7, [r1, #24]
   16f54:	str	r7, [r4, #12]
   16f58:	ldrh	r7, [r1, #28]
   16f5c:	strh	r7, [r4, #8]
   16f60:	ldr	r7, [r1, #16]
   16f64:	add	r3, r3, r7
   16f68:	str	r3, [r4, #4]
   16f6c:	ldr	r3, [r4, #76]	; 0x4c
   16f70:	ldr	r1, [r1, #20]
   16f74:	add	r1, r3, r1
   16f78:	str	r1, [r4]
   16f7c:	mov	r1, #0
   16f80:	bl	12990 <memset@plt>
   16f84:	ldr	r0, [r4, #32]
   16f88:	ldr	r1, [r4, #60]	; 0x3c
   16f8c:	ldr	r2, [r4, #64]	; 0x40
   16f90:	mov	r8, r5
   16f94:	ldr	r3, [r0, #8]
   16f98:	str	r3, [r4, #20]
   16f9c:	ldr	r3, [r0]
   16fa0:	str	r3, [r4, #28]
   16fa4:	add	r1, r1, r3
   16fa8:	ldr	r7, [r0, #4]
   16fac:	str	r1, [r4, #16]
   16fb0:	sub	r1, r2, r3
   16fb4:	cmp	r1, r7
   16fb8:	movhi	r1, r7
   16fbc:	str	r1, [r4, #24]
   16fc0:	ldrh	r1, [r4, #130]	; 0x82
   16fc4:	ldrh	r2, [r4, #128]	; 0x80
   16fc8:	cmp	r2, r1
   16fcc:	strhcc	r1, [r4, #128]	; 0x80
   16fd0:	ldrh	r1, [r0, #12]
   16fd4:	sub	r0, r0, #36	; 0x24
   16fd8:	str	r0, [r4, #32]
   16fdc:	strh	r1, [r4, #130]	; 0x82
   16fe0:	ldr	r0, [r4, #156]	; 0x9c
   16fe4:	sub	r0, r0, #1
   16fe8:	str	r0, [r4, #156]	; 0x9c
   16fec:	b	16ff4 <flatcc_builder_end_table@@Base+0x18c>
   16ff0:	mov	r8, #0
   16ff4:	mov	r0, r8
   16ff8:	sub	sp, fp, #24
   16ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17000:	ldr	r0, [pc, #24]	; 17020 <flatcc_builder_end_table@@Base+0x1b8>
   17004:	ldr	r1, [pc, #24]	; 17024 <flatcc_builder_end_table@@Base+0x1bc>
   17008:	ldr	r3, [pc, #24]	; 17028 <flatcc_builder_end_table@@Base+0x1c0>
   1700c:	movw	r2, #1317	; 0x525
   17010:	add	r0, pc, r0
   17014:	add	r1, pc, r1
   17018:	add	r3, pc, r3
   1701c:	bl	129c0 <__assert_fail@plt>
   17020:	andeq	r7, r0, r7, ror #20
   17024:	andeq	r7, r0, r7, lsr r2
   17028:	andeq	r7, r0, r7, lsl #23

0001702c <flatcc_builder_create_vector@@Base>:
   1702c:	push	{r4, r5, r6, r7, fp, lr}
   17030:	add	fp, sp, #16
   17034:	sub	sp, sp, #80	; 0x50
   17038:	mov	r7, r0
   1703c:	ldr	r0, [fp, #12]
   17040:	cmp	r2, r0
   17044:	bhi	17144 <flatcc_builder_create_vector@@Base+0x118>
   17048:	ldr	r0, [fp, #8]
   1704c:	mov	r4, r2
   17050:	ldrh	r2, [r7, #128]	; 0x80
   17054:	mov	r5, #4
   17058:	cmp	r0, #4
   1705c:	movls	r0, r5
   17060:	cmp	r2, r0
   17064:	sub	r2, fp, #20
   17068:	strhcc	r0, [r7, #128]	; 0x80
   1706c:	str	r4, [fp, #-20]	; 0xffffffec
   17070:	sub	r0, r0, #1
   17074:	ldr	ip, [r7, #136]	; 0x88
   17078:	str	r2, [sp, #12]
   1707c:	mov	r2, #1
   17080:	str	r5, [sp, #4]
   17084:	str	r5, [sp, #16]
   17088:	str	r2, [sp, #8]
   1708c:	mls	r6, r3, r4, ip
   17090:	mul	r3, r3, r4
   17094:	and	r0, r6, r0
   17098:	cmp	r3, #0
   1709c:	beq	170b8 <flatcc_builder_create_vector@@Base+0x8c>
   170a0:	mov	r2, #2
   170a4:	add	r5, r3, #4
   170a8:	str	r1, [sp, #20]
   170ac:	str	r3, [sp, #24]
   170b0:	str	r2, [sp, #8]
   170b4:	str	r5, [sp, #4]
   170b8:	cmp	r0, #0
   170bc:	beq	170e8 <flatcc_builder_create_vector@@Base+0xbc>
   170c0:	add	r5, r5, r0
   170c4:	add	r1, sp, #4
   170c8:	str	r5, [sp, #4]
   170cc:	add	r1, r1, r2, lsl #3
   170d0:	add	r2, r2, #1
   170d4:	ldr	r3, [pc, #168]	; 17184 <flatcc_builder_create_vector@@Base+0x158>
   170d8:	ldr	r3, [pc, r3]
   170dc:	str	r3, [r1, #8]
   170e0:	str	r0, [r1, #12]
   170e4:	str	r2, [sp, #8]
   170e8:	cmp	r5, #0
   170ec:	ble	17164 <flatcc_builder_create_vector@@Base+0x138>
   170f0:	ldr	r0, [r7, #36]	; 0x24
   170f4:	ldr	r6, [r7, #44]	; 0x2c
   170f8:	add	r1, sp, #4
   170fc:	sub	r4, ip, r5
   17100:	str	r5, [sp]
   17104:	add	r1, r1, #8
   17108:	mov	r3, r4
   1710c:	blx	r6
   17110:	cmp	r0, #0
   17114:	streq	r4, [r7, #136]	; 0x88
   17118:	moveq	r0, r4
   1711c:	subeq	sp, fp, #16
   17120:	popeq	{r4, r5, r6, r7, fp, pc}
   17124:	ldr	r0, [pc, #116]	; 171a0 <flatcc_builder_create_vector@@Base+0x174>
   17128:	ldr	r1, [pc, #116]	; 171a4 <flatcc_builder_create_vector@@Base+0x178>
   1712c:	ldr	r3, [pc, #116]	; 171a8 <flatcc_builder_create_vector@@Base+0x17c>
   17130:	movw	r2, #651	; 0x28b
   17134:	add	r0, pc, r0
   17138:	add	r1, pc, r1
   1713c:	add	r3, pc, r3
   17140:	bl	129c0 <__assert_fail@plt>
   17144:	ldr	r0, [pc, #60]	; 17188 <flatcc_builder_create_vector@@Base+0x15c>
   17148:	ldr	r1, [pc, #60]	; 1718c <flatcc_builder_create_vector@@Base+0x160>
   1714c:	ldr	r3, [pc, #60]	; 17190 <flatcc_builder_create_vector@@Base+0x164>
   17150:	movw	r2, #1365	; 0x555
   17154:	add	r0, pc, r0
   17158:	add	r1, pc, r1
   1715c:	add	r3, pc, r3
   17160:	bl	129c0 <__assert_fail@plt>
   17164:	ldr	r0, [pc, #40]	; 17194 <flatcc_builder_create_vector@@Base+0x168>
   17168:	ldr	r1, [pc, #40]	; 17198 <flatcc_builder_create_vector@@Base+0x16c>
   1716c:	ldr	r3, [pc, #40]	; 1719c <flatcc_builder_create_vector@@Base+0x170>
   17170:	movw	r2, #647	; 0x287
   17174:	add	r0, pc, r0
   17178:	add	r1, pc, r1
   1717c:	add	r3, pc, r3
   17180:	bl	129c0 <__assert_fail@plt>
   17184:	andeq	r9, r1, r8, ror pc
   17188:	andeq	r7, r0, sp, lsl #21
   1718c:	strdeq	r7, [r0], -r3
   17190:	muleq	r0, r8, sl
   17194:	muleq	r0, r4, r2
   17198:	ldrdeq	r7, [r0], -r3
   1719c:	andeq	r8, r0, fp, asr #2
   171a0:	ldrdeq	r8, [r0], -r4
   171a4:	andeq	r7, r0, r3, lsl r1
   171a8:	andeq	r8, r0, fp, lsl #3

000171ac <flatcc_builder_end_vector@@Base>:
   171ac:	push	{r4, r5, fp, lr}
   171b0:	add	fp, sp, #8
   171b4:	sub	sp, sp, #8
   171b8:	mov	r4, r0
   171bc:	ldr	r0, [r0, #32]
   171c0:	ldrh	r1, [r0, #14]
   171c4:	cmp	r1, #4
   171c8:	bne	1727c <flatcc_builder_end_vector@@Base+0xd0>
   171cc:	ldr	r3, [r0, #16]
   171d0:	ldr	r2, [r0, #20]
   171d4:	ldr	r0, [r0, #24]
   171d8:	ldr	r1, [r4, #16]
   171dc:	ldrh	r5, [r4, #130]	; 0x82
   171e0:	str	r0, [sp, #4]
   171e4:	mov	r0, r4
   171e8:	str	r5, [sp]
   171ec:	bl	1702c <flatcc_builder_create_vector@@Base>
   171f0:	mov	r5, r0
   171f4:	cmp	r0, #0
   171f8:	beq	17270 <flatcc_builder_end_vector@@Base+0xc4>
   171fc:	ldr	r0, [r4, #16]
   17200:	ldr	r2, [r4, #20]
   17204:	mov	r1, #0
   17208:	bl	12990 <memset@plt>
   1720c:	ldr	r0, [r4, #32]
   17210:	ldr	r1, [r4, #60]	; 0x3c
   17214:	ldr	ip, [r4, #64]	; 0x40
   17218:	ldr	r3, [r0, #8]
   1721c:	str	r3, [r4, #20]
   17220:	ldr	r3, [r0]
   17224:	str	r3, [r4, #28]
   17228:	add	r1, r1, r3
   1722c:	ldr	r2, [r0, #4]
   17230:	str	r1, [r4, #16]
   17234:	sub	r1, ip, r3
   17238:	cmp	r1, r2
   1723c:	movhi	r1, r2
   17240:	str	r1, [r4, #24]
   17244:	ldrh	r1, [r4, #130]	; 0x82
   17248:	ldrh	r2, [r4, #128]	; 0x80
   1724c:	cmp	r2, r1
   17250:	strhcc	r1, [r4, #128]	; 0x80
   17254:	ldrh	r1, [r0, #12]
   17258:	sub	r0, r0, #36	; 0x24
   1725c:	str	r0, [r4, #32]
   17260:	strh	r1, [r4, #130]	; 0x82
   17264:	ldr	r0, [r4, #156]	; 0x9c
   17268:	sub	r0, r0, #1
   1726c:	str	r0, [r4, #156]	; 0x9c
   17270:	mov	r0, r5
   17274:	sub	sp, fp, #8
   17278:	pop	{r4, r5, fp, pc}
   1727c:	ldr	r0, [pc, #24]	; 1729c <flatcc_builder_end_vector@@Base+0xf0>
   17280:	ldr	r1, [pc, #24]	; 172a0 <flatcc_builder_end_vector@@Base+0xf4>
   17284:	ldr	r3, [pc, #24]	; 172a4 <flatcc_builder_end_vector@@Base+0xf8>
   17288:	movw	r2, #1400	; 0x578
   1728c:	add	r0, pc, r0
   17290:	add	r1, pc, r1
   17294:	add	r3, pc, r3
   17298:	bl	129c0 <__assert_fail@plt>
   1729c:	strdeq	r7, [r0], -r9
   172a0:			; <UNDEFINED> instruction: 0x00006fbb
   172a4:	ldrdeq	r7, [r0], -r6

000172a8 <flatcc_builder_vector_count@@Base>:
   172a8:	ldr	r0, [r0, #32]
   172ac:	ldr	r0, [r0, #20]
   172b0:	bx	lr

000172b4 <flatcc_builder_vector_edit@@Base>:
   172b4:	ldr	r0, [r0, #16]
   172b8:	bx	lr

000172bc <flatcc_builder_create_offset_vector_direct@@Base>:
   172bc:	mov	r3, #0
   172c0:	b	172c4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   172c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   172c8:	add	fp, sp, #24
   172cc:	sub	sp, sp, #80	; 0x50
   172d0:	mov	r6, #0
   172d4:	cmn	r2, #-1073741823	; 0xc0000001
   172d8:	bhi	17414 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   172dc:	mov	r8, r0
   172e0:	ldrh	r0, [r0, #128]	; 0x80
   172e4:	sub	r7, fp, #28
   172e8:	mov	r5, #4
   172ec:	mov	r4, #1
   172f0:	cmp	r0, #3
   172f4:	movls	r0, #4
   172f8:	strhls	r0, [r8, #128]	; 0x80
   172fc:	str	r2, [fp, #-28]	; 0xffffffe4
   17300:	ldr	ip, [r8, #136]	; 0x88
   17304:	str	r7, [sp, #12]
   17308:	mov	r7, #0
   1730c:	str	r5, [sp, #4]
   17310:	str	r5, [sp, #16]
   17314:	str	r4, [sp, #8]
   17318:	cmp	r7, r2, lsl #2
   1731c:	and	r6, ip, #3
   17320:	beq	17340 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   17324:	lsl	r7, r2, #2
   17328:	mov	r4, #2
   1732c:	str	r1, [sp, #20]
   17330:	add	r5, r7, #4
   17334:	str	r7, [sp, #24]
   17338:	str	r4, [sp, #8]
   1733c:	str	r5, [sp, #4]
   17340:	cmp	r6, #0
   17344:	beq	17370 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   17348:	add	r5, r5, r6
   1734c:	add	r7, sp, #4
   17350:	str	r5, [sp, #4]
   17354:	add	r7, r7, r4, lsl #3
   17358:	add	r4, r4, #1
   1735c:	ldr	r0, [pc, #348]	; 174c0 <flatcc_builder_create_offset_vector_direct@@Base+0x204>
   17360:	ldr	r0, [pc, r0]
   17364:	str	r0, [r7, #8]
   17368:	str	r6, [r7, #12]
   1736c:	str	r4, [sp, #8]
   17370:	cmp	r2, #0
   17374:	beq	173dc <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   17378:	mvn	r0, #3
   1737c:	mov	r6, #0
   17380:	sub	r0, r0, ip
   17384:	add	r0, r0, r5
   17388:	ldr	r7, [r1, r6, lsl #2]
   1738c:	cmp	r7, #0
   17390:	beq	173b4 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   17394:	add	r7, r0, r7
   17398:	cmp	r3, #0
   1739c:	str	r7, [r1, r6, lsl #2]
   173a0:	beq	173c8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   173a4:	ldrb	r7, [r3, r6]
   173a8:	cmp	r7, #0
   173ac:	bne	173c8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   173b0:	b	17420 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   173b4:	cmp	r3, #0
   173b8:	beq	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   173bc:	ldrb	r7, [r3, r6]
   173c0:	cmp	r7, #0
   173c4:	bne	17440 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   173c8:	add	r6, r6, #1
   173cc:	sub	r0, r0, #4
   173d0:	cmp	r6, r2
   173d4:	bcc	17388 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   173d8:	ldr	ip, [r8, #136]	; 0x88
   173dc:	cmp	r5, #0
   173e0:	ble	17480 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   173e4:	ldr	r0, [r8, #36]	; 0x24
   173e8:	ldr	r7, [r8, #44]	; 0x2c
   173ec:	add	r1, sp, #4
   173f0:	sub	r6, ip, r5
   173f4:	mov	r2, r4
   173f8:	str	r5, [sp]
   173fc:	add	r1, r1, #8
   17400:	mov	r3, r6
   17404:	blx	r7
   17408:	cmp	r0, #0
   1740c:	bne	174a0 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   17410:	str	r6, [r8, #136]	; 0x88
   17414:	mov	r0, r6
   17418:	sub	sp, fp, #24
   1741c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17420:	ldr	r0, [pc, #156]	; 174c4 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   17424:	ldr	r1, [pc, #156]	; 174c8 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   17428:	ldr	r3, [pc, #156]	; 174cc <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   1742c:	movw	r2, #1457	; 0x5b1
   17430:	add	r0, pc, r0
   17434:	add	r1, pc, r1
   17438:	add	r3, pc, r3
   1743c:	bl	129c0 <__assert_fail@plt>
   17440:	ldr	r0, [pc, #136]	; 174d0 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   17444:	ldr	r1, [pc, #136]	; 174d4 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   17448:	ldr	r3, [pc, #136]	; 174d8 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   1744c:	movw	r2, #1461	; 0x5b5
   17450:	add	r0, pc, r0
   17454:	add	r1, pc, r1
   17458:	add	r3, pc, r3
   1745c:	bl	129c0 <__assert_fail@plt>
   17460:	ldr	r0, [pc, #116]	; 174dc <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   17464:	ldr	r1, [pc, #116]	; 174e0 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   17468:	ldr	r3, [pc, #116]	; 174e4 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   1746c:	movw	r2, #1463	; 0x5b7
   17470:	add	r0, pc, r0
   17474:	add	r1, pc, r1
   17478:	add	r3, pc, r3
   1747c:	bl	129c0 <__assert_fail@plt>
   17480:	ldr	r0, [pc, #96]	; 174e8 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   17484:	ldr	r1, [pc, #96]	; 174ec <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   17488:	ldr	r3, [pc, #96]	; 174f0 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   1748c:	movw	r2, #647	; 0x287
   17490:	add	r0, pc, r0
   17494:	add	r1, pc, r1
   17498:	add	r3, pc, r3
   1749c:	bl	129c0 <__assert_fail@plt>
   174a0:	ldr	r0, [pc, #76]	; 174f4 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   174a4:	ldr	r1, [pc, #76]	; 174f8 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   174a8:	ldr	r3, [pc, #76]	; 174fc <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   174ac:	movw	r2, #651	; 0x28b
   174b0:	add	r0, pc, r0
   174b4:	add	r1, pc, r1
   174b8:	add	r3, pc, r3
   174bc:	bl	129c0 <__assert_fail@plt>
   174c0:	strdeq	r9, [r1], -r0
   174c4:	andeq	r7, r0, ip, asr #31
   174c8:	andeq	r6, r0, r7, lsl lr
   174cc:	ldrdeq	r7, [r0], -r2
   174d0:	andeq	r8, r0, sp, lsr r0
   174d4:	strdeq	r6, [r0], -r7
   174d8:			; <UNDEFINED> instruction: 0x00007fb2
   174dc:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   174e0:	ldrdeq	r6, [r0], -r7
   174e4:	muleq	r0, r2, pc	; <UNPREDICTABLE>
   174e8:	andeq	r7, r0, r8, ror pc
   174ec:			; <UNDEFINED> instruction: 0x00006db7
   174f0:	andeq	r7, r0, pc, lsr #28
   174f4:	andeq	r7, r0, r8, asr pc
   174f8:	muleq	r0, r7, sp
   174fc:	andeq	r7, r0, pc, lsl #28

00017500 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17500:	push	{r4, r5, fp, lr}
   17504:	add	fp, sp, #8
   17508:	mov	r4, r0
   1750c:	ldr	r0, [r0, #32]
   17510:	mov	r3, r1
   17514:	ldrh	r1, [r0, #14]
   17518:	cmp	r1, #5
   1751c:	bne	175b8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   17520:	ldr	r2, [r0, #20]
   17524:	ldr	r1, [r4, #16]
   17528:	mov	r0, r4
   1752c:	bl	172c4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17530:	mov	r5, r0
   17534:	cmp	r0, #0
   17538:	beq	175b0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   1753c:	ldr	r0, [r4, #16]
   17540:	ldr	r2, [r4, #20]
   17544:	mov	r1, #0
   17548:	bl	12990 <memset@plt>
   1754c:	ldr	r0, [r4, #32]
   17550:	ldr	r1, [r4, #60]	; 0x3c
   17554:	ldr	ip, [r4, #64]	; 0x40
   17558:	ldr	r3, [r0, #8]
   1755c:	str	r3, [r4, #20]
   17560:	ldr	r3, [r0]
   17564:	str	r3, [r4, #28]
   17568:	add	r1, r1, r3
   1756c:	ldr	r2, [r0, #4]
   17570:	str	r1, [r4, #16]
   17574:	sub	r1, ip, r3
   17578:	cmp	r1, r2
   1757c:	movhi	r1, r2
   17580:	str	r1, [r4, #24]
   17584:	ldrh	r1, [r4, #130]	; 0x82
   17588:	ldrh	r2, [r4, #128]	; 0x80
   1758c:	cmp	r2, r1
   17590:	strhcc	r1, [r4, #128]	; 0x80
   17594:	ldrh	r1, [r0, #12]
   17598:	sub	r0, r0, #36	; 0x24
   1759c:	str	r0, [r4, #32]
   175a0:	strh	r1, [r4, #130]	; 0x82
   175a4:	ldr	r0, [r4, #156]	; 0x9c
   175a8:	sub	r0, r0, #1
   175ac:	str	r0, [r4, #156]	; 0x9c
   175b0:	mov	r0, r5
   175b4:	pop	{r4, r5, fp, pc}
   175b8:	ldr	r0, [pc, #24]	; 175d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   175bc:	ldr	r1, [pc, #24]	; 175dc <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   175c0:	ldr	r3, [pc, #24]	; 175e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   175c4:	movw	r2, #1493	; 0x5d5
   175c8:	add	r0, pc, r0
   175cc:	add	r1, pc, r1
   175d0:	add	r3, pc, r3
   175d4:	bl	129c0 <__assert_fail@plt>
   175d8:	strheq	r7, [r0], -r6
   175dc:	andeq	r6, r0, pc, ror ip
   175e0:	andeq	r7, r0, r7, lsr #14

000175e4 <flatcc_builder_offset_vector_edit@@Base>:
   175e4:	ldr	r0, [r0, #16]
   175e8:	bx	lr

000175ec <flatcc_builder_offset_vector_count@@Base>:
   175ec:	ldr	r0, [r0, #32]
   175f0:	ldr	r0, [r0, #20]
   175f4:	bx	lr

000175f8 <flatcc_builder_table_add_union@@Base>:
   175f8:	push	{r4, r5, r6, r7, fp, lr}
   175fc:	add	fp, sp, #16
   17600:	mov	r5, r0
   17604:	ldr	r0, [r0, #32]
   17608:	ldrh	r0, [r0, #14]
   1760c:	cmp	r0, #3
   17610:	bne	17698 <flatcc_builder_table_add_union@@Base+0xa0>
   17614:	mov	r7, r3
   17618:	mov	r4, r2
   1761c:	mov	r6, r1
   17620:	cmp	r3, #0
   17624:	beq	17634 <flatcc_builder_table_add_union@@Base+0x3c>
   17628:	uxtb	r0, r4
   1762c:	cmp	r0, #0
   17630:	beq	176b8 <flatcc_builder_table_add_union@@Base+0xc0>
   17634:	cmp	r7, #0
   17638:	beq	17654 <flatcc_builder_table_add_union@@Base+0x5c>
   1763c:	mov	r0, r5
   17640:	mov	r1, r6
   17644:	bl	17728 <flatcc_builder_table_add_offset@@Base>
   17648:	cmp	r0, #0
   1764c:	beq	176d8 <flatcc_builder_table_add_union@@Base+0xe0>
   17650:	str	r7, [r0]
   17654:	sub	r1, r6, #1
   17658:	mov	r0, r5
   1765c:	mov	r2, #1
   17660:	mov	r3, #1
   17664:	bl	178dc <flatcc_builder_table_add@@Base>
   17668:	cmp	r0, #0
   1766c:	strbne	r4, [r0]
   17670:	movne	r0, #0
   17674:	popne	{r4, r5, r6, r7, fp, pc}
   17678:	ldr	r0, [pc, #156]	; 1771c <flatcc_builder_table_add_union@@Base+0x124>
   1767c:	ldr	r1, [pc, #156]	; 17720 <flatcc_builder_table_add_union@@Base+0x128>
   17680:	ldr	r3, [pc, #156]	; 17724 <flatcc_builder_table_add_union@@Base+0x12c>
   17684:	movw	r2, #1526	; 0x5f6
   17688:	add	r0, pc, r0
   1768c:	add	r1, pc, r1
   17690:	add	r3, pc, r3
   17694:	bl	129c0 <__assert_fail@plt>
   17698:	ldr	r0, [pc, #88]	; 176f8 <flatcc_builder_table_add_union@@Base+0x100>
   1769c:	ldr	r1, [pc, #88]	; 176fc <flatcc_builder_table_add_union@@Base+0x104>
   176a0:	ldr	r3, [pc, #88]	; 17700 <flatcc_builder_table_add_union@@Base+0x108>
   176a4:	movw	r2, #1518	; 0x5ee
   176a8:	add	r0, pc, r0
   176ac:	add	r1, pc, r1
   176b0:	add	r3, pc, r3
   176b4:	bl	129c0 <__assert_fail@plt>
   176b8:	ldr	r0, [pc, #68]	; 17704 <flatcc_builder_table_add_union@@Base+0x10c>
   176bc:	ldr	r1, [pc, #68]	; 17708 <flatcc_builder_table_add_union@@Base+0x110>
   176c0:	ldr	r3, [pc, #68]	; 1770c <flatcc_builder_table_add_union@@Base+0x114>
   176c4:	movw	r2, #1519	; 0x5ef
   176c8:	add	r0, pc, r0
   176cc:	add	r1, pc, r1
   176d0:	add	r3, pc, r3
   176d4:	bl	129c0 <__assert_fail@plt>
   176d8:	ldr	r0, [pc, #48]	; 17710 <flatcc_builder_table_add_union@@Base+0x118>
   176dc:	ldr	r1, [pc, #48]	; 17714 <flatcc_builder_table_add_union@@Base+0x11c>
   176e0:	ldr	r3, [pc, #48]	; 17718 <flatcc_builder_table_add_union@@Base+0x120>
   176e4:	movw	r2, #1522	; 0x5f2
   176e8:	add	r0, pc, r0
   176ec:	add	r1, pc, r1
   176f0:	add	r3, pc, r3
   176f4:	bl	129c0 <__assert_fail@plt>
   176f8:	andeq	r7, r0, pc, asr #7
   176fc:	muleq	r0, pc, fp	; <UNPREDICTABLE>
   17700:			; <UNDEFINED> instruction: 0x000076b9
   17704:	strdeq	r7, [r0], -r9
   17708:	andeq	r6, r0, pc, ror fp
   1770c:	muleq	r0, r9, r6
   17710:	strdeq	r7, [r0], -fp
   17714:	andeq	r6, r0, pc, asr fp
   17718:	andeq	r7, r0, r9, ror r6
   1771c:	andeq	r7, r0, r5, ror #14
   17720:			; <UNDEFINED> instruction: 0x00006bbf
   17724:	ldrdeq	r7, [r0], -r9

00017728 <flatcc_builder_table_add_offset@@Base>:
   17728:	push	{r4, r5, r6, r7, fp, lr}
   1772c:	add	fp, sp, #16
   17730:	sub	sp, sp, #8
   17734:	mov	r4, r0
   17738:	ldr	r0, [r0, #32]
   1773c:	ldrh	r0, [r0, #14]
   17740:	cmp	r0, #3
   17744:	bne	17858 <flatcc_builder_table_add_offset@@Base+0x130>
   17748:	movw	r0, #32765	; 0x7ffd
   1774c:	mov	r5, r1
   17750:	cmp	r1, r0
   17754:	bcs	17878 <flatcc_builder_table_add_offset@@Base+0x150>
   17758:	ldr	r0, [r4, #4]
   1775c:	add	r1, r0, r5, lsl #1
   17760:	ldrh	r1, [r1]
   17764:	cmp	r1, #0
   17768:	bne	17898 <flatcc_builder_table_add_offset@@Base+0x170>
   1776c:	ldr	r2, [r4, #20]
   17770:	ldr	r1, [r4, #12]
   17774:	ldr	r3, [r4, #24]
   17778:	add	r2, r2, #3
   1777c:	eor	r1, r1, r5
   17780:	bic	r6, r2, #3
   17784:	movw	r2, #31153	; 0x79b1
   17788:	movt	r2, #40503	; 0x9e37
   1778c:	add	r7, r6, #4
   17790:	mul	r1, r1, r2
   17794:	cmp	r7, r3
   17798:	str	r7, [r4, #20]
   1779c:	eor	r1, r1, #4
   177a0:	mul	r1, r1, r2
   177a4:	str	r1, [r4, #12]
   177a8:	bls	1781c <flatcc_builder_table_add_offset@@Base+0xf4>
   177ac:	ldr	r1, [r4, #28]
   177b0:	ldr	r0, [r4, #40]	; 0x28
   177b4:	ldr	ip, [r4, #48]	; 0x30
   177b8:	mov	r2, #1
   177bc:	mov	r3, #1
   177c0:	str	r2, [sp]
   177c4:	add	r2, r1, r7
   177c8:	add	r1, r4, #60	; 0x3c
   177cc:	blx	ip
   177d0:	mov	r1, r0
   177d4:	mov	r0, #0
   177d8:	cmp	r1, #0
   177dc:	beq	177e8 <flatcc_builder_table_add_offset@@Base+0xc0>
   177e0:	sub	sp, fp, #16
   177e4:	pop	{r4, r5, r6, r7, fp, pc}
   177e8:	ldr	r0, [r4, #28]
   177ec:	ldr	r2, [r4, #60]	; 0x3c
   177f0:	ldr	r3, [r4, #64]	; 0x40
   177f4:	ldr	r1, [r4, #32]
   177f8:	add	r2, r2, r0
   177fc:	sub	r0, r3, r0
   17800:	str	r2, [r4, #16]
   17804:	movw	r2, #65532	; 0xfffc
   17808:	cmp	r0, r2
   1780c:	movcs	r0, r2
   17810:	str	r0, [r4, #24]
   17814:	str	r2, [r1, #4]
   17818:	ldr	r0, [r4, #4]
   1781c:	uxth	r1, r5
   17820:	add	r0, r0, r1, lsl #1
   17824:	strh	r7, [r0]
   17828:	ldrh	r0, [r4, #8]
   1782c:	cmp	r0, r1
   17830:	addls	r0, r5, #1
   17834:	strhls	r0, [r4, #8]
   17838:	ldr	r0, [r4]
   1783c:	add	r1, r0, #2
   17840:	str	r1, [r4]
   17844:	strh	r6, [r0]
   17848:	ldr	r0, [r4, #16]
   1784c:	add	r0, r0, r6
   17850:	sub	sp, fp, #16
   17854:	pop	{r4, r5, r6, r7, fp, pc}
   17858:	ldr	r0, [pc, #88]	; 178b8 <flatcc_builder_table_add_offset@@Base+0x190>
   1785c:	ldr	r1, [pc, #88]	; 178bc <flatcc_builder_table_add_offset@@Base+0x194>
   17860:	ldr	r3, [pc, #88]	; 178c0 <flatcc_builder_table_add_offset@@Base+0x198>
   17864:	movw	r2, #1811	; 0x713
   17868:	add	r0, pc, r0
   1786c:	add	r1, pc, r1
   17870:	add	r3, pc, r3
   17874:	bl	129c0 <__assert_fail@plt>
   17878:	ldr	r0, [pc, #68]	; 178c4 <flatcc_builder_table_add_offset@@Base+0x19c>
   1787c:	ldr	r1, [pc, #68]	; 178c8 <flatcc_builder_table_add_offset@@Base+0x1a0>
   17880:	ldr	r3, [pc, #68]	; 178cc <flatcc_builder_table_add_offset@@Base+0x1a4>
   17884:	movw	r2, #1812	; 0x714
   17888:	add	r0, pc, r0
   1788c:	add	r1, pc, r1
   17890:	add	r3, pc, r3
   17894:	bl	129c0 <__assert_fail@plt>
   17898:	ldr	r0, [pc, #48]	; 178d0 <flatcc_builder_table_add_offset@@Base+0x1a8>
   1789c:	ldr	r1, [pc, #48]	; 178d4 <flatcc_builder_table_add_offset@@Base+0x1ac>
   178a0:	ldr	r3, [pc, #48]	; 178d8 <flatcc_builder_table_add_offset@@Base+0x1b0>
   178a4:	movw	r2, #1819	; 0x71b
   178a8:	add	r0, pc, r0
   178ac:	add	r1, pc, r1
   178b0:	add	r3, pc, r3
   178b4:	bl	129c0 <__assert_fail@plt>
   178b8:	andeq	r7, r0, pc, lsl #4
   178bc:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   178c0:	strdeq	r7, [r0], -fp
   178c4:	andeq	r7, r0, r3, ror #16
   178c8:			; <UNDEFINED> instruction: 0x000069bf
   178cc:	ldrdeq	r7, [r0], -fp
   178d0:	andeq	r7, r0, r0, ror #22
   178d4:	muleq	r0, pc, r9	; <UNPREDICTABLE>
   178d8:			; <UNDEFINED> instruction: 0x000078bb

000178dc <flatcc_builder_table_add@@Base>:
   178dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178e0:	add	fp, sp, #24
   178e4:	sub	sp, sp, #8
   178e8:	mov	r4, r0
   178ec:	ldr	r0, [r0, #32]
   178f0:	ldrh	r0, [r0, #14]
   178f4:	cmp	r0, #3
   178f8:	bne	17a18 <flatcc_builder_table_add@@Base+0x13c>
   178fc:	movw	r0, #32765	; 0x7ffd
   17900:	mov	r8, r1
   17904:	cmp	r1, r0
   17908:	bcs	17a38 <flatcc_builder_table_add@@Base+0x15c>
   1790c:	ldrh	r0, [r4, #130]	; 0x82
   17910:	cmp	r0, r3
   17914:	strhcc	r3, [r4, #130]	; 0x82
   17918:	ldr	r0, [r4, #4]
   1791c:	add	r1, r0, r8, lsl #1
   17920:	ldrh	r1, [r1]
   17924:	cmp	r1, #0
   17928:	bne	17a58 <flatcc_builder_table_add@@Base+0x17c>
   1792c:	ldr	r1, [r4, #12]
   17930:	movw	r7, #31153	; 0x79b1
   17934:	ldr	r6, [r4, #20]
   17938:	ldr	r5, [r4, #24]
   1793c:	movt	r7, #40503	; 0x9e37
   17940:	eor	r1, r1, r8
   17944:	mul	r1, r1, r7
   17948:	eor	r1, r1, r2
   1794c:	mul	r1, r1, r7
   17950:	str	r1, [r4, #12]
   17954:	add	r1, r3, r6
   17958:	rsb	r3, r3, #0
   1795c:	sub	r1, r1, #1
   17960:	and	r6, r1, r3
   17964:	add	r1, r6, r2
   17968:	cmp	r1, r5
   1796c:	str	r1, [r4, #20]
   17970:	bcc	179e8 <flatcc_builder_table_add@@Base+0x10c>
   17974:	ldr	r2, [r4, #28]
   17978:	ldr	r0, [r4, #40]	; 0x28
   1797c:	ldr	r7, [r4, #48]	; 0x30
   17980:	mov	r3, #1
   17984:	str	r3, [sp]
   17988:	mov	r3, #1
   1798c:	add	r1, r1, r2
   17990:	add	r2, r1, #1
   17994:	add	r1, r4, #60	; 0x3c
   17998:	blx	r7
   1799c:	mov	r1, r0
   179a0:	mov	r0, #0
   179a4:	cmp	r1, #0
   179a8:	beq	179b4 <flatcc_builder_table_add@@Base+0xd8>
   179ac:	sub	sp, fp, #24
   179b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179b4:	ldr	r0, [r4, #28]
   179b8:	ldr	r2, [r4, #60]	; 0x3c
   179bc:	ldr	r3, [r4, #64]	; 0x40
   179c0:	ldr	r1, [r4, #32]
   179c4:	add	r2, r2, r0
   179c8:	sub	r0, r3, r0
   179cc:	str	r2, [r4, #16]
   179d0:	movw	r2, #65532	; 0xfffc
   179d4:	cmp	r0, r2
   179d8:	movcs	r0, r2
   179dc:	str	r0, [r4, #24]
   179e0:	str	r2, [r1, #4]
   179e4:	ldr	r0, [r4, #4]
   179e8:	uxth	r1, r8
   179ec:	add	r2, r6, #4
   179f0:	add	r0, r0, r1, lsl #1
   179f4:	strh	r2, [r0]
   179f8:	ldrh	r0, [r4, #8]
   179fc:	cmp	r0, r1
   17a00:	addls	r0, r8, #1
   17a04:	strhls	r0, [r4, #8]
   17a08:	ldr	r0, [r4, #16]
   17a0c:	add	r0, r0, r6
   17a10:	sub	sp, fp, #24
   17a14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a18:	ldr	r0, [pc, #88]	; 17a78 <flatcc_builder_table_add@@Base+0x19c>
   17a1c:	ldr	r1, [pc, #88]	; 17a7c <flatcc_builder_table_add@@Base+0x1a0>
   17a20:	ldr	r3, [pc, #88]	; 17a80 <flatcc_builder_table_add@@Base+0x1a4>
   17a24:	movw	r2, #1773	; 0x6ed
   17a28:	add	r0, pc, r0
   17a2c:	add	r1, pc, r1
   17a30:	add	r3, pc, r3
   17a34:	bl	129c0 <__assert_fail@plt>
   17a38:	ldr	r0, [pc, #68]	; 17a84 <flatcc_builder_table_add@@Base+0x1a8>
   17a3c:	ldr	r1, [pc, #68]	; 17a88 <flatcc_builder_table_add@@Base+0x1ac>
   17a40:	ldr	r3, [pc, #68]	; 17a8c <flatcc_builder_table_add@@Base+0x1b0>
   17a44:	movw	r2, #1774	; 0x6ee
   17a48:	add	r0, pc, r0
   17a4c:	add	r1, pc, r1
   17a50:	add	r3, pc, r3
   17a54:	bl	129c0 <__assert_fail@plt>
   17a58:	ldr	r0, [pc, #48]	; 17a90 <flatcc_builder_table_add@@Base+0x1b4>
   17a5c:	ldr	r1, [pc, #48]	; 17a94 <flatcc_builder_table_add@@Base+0x1b8>
   17a60:	ldr	r3, [pc, #48]	; 17a98 <flatcc_builder_table_add@@Base+0x1bc>
   17a64:	movw	r2, #1784	; 0x6f8
   17a68:	add	r0, pc, r0
   17a6c:	add	r1, pc, r1
   17a70:	add	r3, pc, r3
   17a74:	bl	129c0 <__assert_fail@plt>
   17a78:	andeq	r7, r0, pc, asr #32
   17a7c:	andeq	r6, r0, pc, lsl r8
   17a80:	andeq	r7, r0, r1, ror r6
   17a84:	andeq	r7, r0, r3, lsr #13
   17a88:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   17a8c:	andeq	r7, r0, r1, asr r6
   17a90:	andeq	r7, r0, r0, lsr #19
   17a94:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   17a98:	andeq	r7, r0, r1, lsr r6

00017a9c <flatcc_builder_table_add_union_vector@@Base>:
   17a9c:	push	{r4, r5, r6, r7, fp, lr}
   17aa0:	add	fp, sp, #16
   17aa4:	mov	r6, r0
   17aa8:	ldr	r0, [r0, #32]
   17aac:	ldrh	r0, [r0, #14]
   17ab0:	cmp	r0, #3
   17ab4:	bne	17b1c <flatcc_builder_table_add_union_vector@@Base+0x80>
   17ab8:	clz	r0, r3
   17abc:	mov	r5, r1
   17ac0:	clz	r1, r2
   17ac4:	mov	r4, r3
   17ac8:	mov	r7, r2
   17acc:	lsr	r0, r0, #5
   17ad0:	lsr	r1, r1, #5
   17ad4:	cmp	r1, r0
   17ad8:	bne	17b3c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   17adc:	cmp	r7, #0
   17ae0:	beq	17b14 <flatcc_builder_table_add_union_vector@@Base+0x78>
   17ae4:	sub	r1, r5, #1
   17ae8:	mov	r0, r6
   17aec:	bl	17728 <flatcc_builder_table_add_offset@@Base>
   17af0:	cmp	r0, #0
   17af4:	beq	17b5c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   17af8:	str	r7, [r0]
   17afc:	mov	r0, r6
   17b00:	mov	r1, r5
   17b04:	bl	17728 <flatcc_builder_table_add_offset@@Base>
   17b08:	cmp	r0, #0
   17b0c:	beq	17b7c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   17b10:	str	r4, [r0]
   17b14:	mov	r0, #0
   17b18:	pop	{r4, r5, r6, r7, fp, pc}
   17b1c:	ldr	r0, [pc, #120]	; 17b9c <flatcc_builder_table_add_union_vector@@Base+0x100>
   17b20:	ldr	r1, [pc, #120]	; 17ba0 <flatcc_builder_table_add_union_vector@@Base+0x104>
   17b24:	ldr	r3, [pc, #120]	; 17ba4 <flatcc_builder_table_add_union_vector@@Base+0x108>
   17b28:	mov	r2, #1536	; 0x600
   17b2c:	add	r0, pc, r0
   17b30:	add	r1, pc, r1
   17b34:	add	r3, pc, r3
   17b38:	bl	129c0 <__assert_fail@plt>
   17b3c:	ldr	r0, [pc, #100]	; 17ba8 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   17b40:	ldr	r1, [pc, #100]	; 17bac <flatcc_builder_table_add_union_vector@@Base+0x110>
   17b44:	ldr	r3, [pc, #100]	; 17bb0 <flatcc_builder_table_add_union_vector@@Base+0x114>
   17b48:	movw	r2, #1537	; 0x601
   17b4c:	add	r0, pc, r0
   17b50:	add	r1, pc, r1
   17b54:	add	r3, pc, r3
   17b58:	bl	129c0 <__assert_fail@plt>
   17b5c:	ldr	r0, [pc, #80]	; 17bb4 <flatcc_builder_table_add_union_vector@@Base+0x118>
   17b60:	ldr	r1, [pc, #80]	; 17bb8 <flatcc_builder_table_add_union_vector@@Base+0x11c>
   17b64:	ldr	r3, [pc, #80]	; 17bbc <flatcc_builder_table_add_union_vector@@Base+0x120>
   17b68:	movw	r2, #1540	; 0x604
   17b6c:	add	r0, pc, r0
   17b70:	add	r1, pc, r1
   17b74:	add	r3, pc, r3
   17b78:	bl	129c0 <__assert_fail@plt>
   17b7c:	ldr	r0, [pc, #60]	; 17bc0 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17b80:	ldr	r1, [pc, #60]	; 17bc4 <flatcc_builder_table_add_union_vector@@Base+0x128>
   17b84:	ldr	r3, [pc, #60]	; 17bc8 <flatcc_builder_table_add_union_vector@@Base+0x12c>
   17b88:	movw	r2, #1544	; 0x608
   17b8c:	add	r0, pc, r0
   17b90:	add	r1, pc, r1
   17b94:	add	r3, pc, r3
   17b98:	bl	129c0 <__assert_fail@plt>
   17b9c:	andeq	r6, r0, fp, asr #30
   17ba0:	andeq	r6, r0, fp, lsl r7
   17ba4:	andeq	r7, r0, r5, asr #5
   17ba8:	andeq	r7, r0, r0, lsl r3
   17bac:	strdeq	r6, [r0], -fp
   17bb0:	andeq	r7, r0, r5, lsr #5
   17bb4:	andeq	r7, r0, r7, ror r2
   17bb8:	ldrdeq	r6, [r0], -fp
   17bbc:	andeq	r7, r0, r5, lsl #5
   17bc0:	andeq	r7, r0, r7, asr r2
   17bc4:			; <UNDEFINED> instruction: 0x000066bb
   17bc8:	andeq	r7, r0, r5, ror #4

00017bcc <flatcc_builder_create_union_vector@@Base>:
   17bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd0:	add	fp, sp, #28
   17bd4:	sub	sp, sp, #12
   17bd8:	mov	r7, #0
   17bdc:	mov	r4, r1
   17be0:	mov	r5, r0
   17be4:	mov	sl, r3
   17be8:	mov	r9, r2
   17bec:	mov	r6, #4
   17bf0:	str	r7, [r0]
   17bf4:	str	r7, [r0, #4]
   17bf8:	mov	r0, r1
   17bfc:	mov	r1, #4
   17c00:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   17c04:	cmp	r0, #0
   17c08:	beq	17c14 <flatcc_builder_create_union_vector@@Base+0x48>
   17c0c:	sub	sp, fp, #28
   17c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c14:	ldr	r0, [r4, #32]
   17c18:	mov	r1, #5
   17c1c:	str	r6, [r0, #16]
   17c20:	ldr	r0, [r4, #32]
   17c24:	str	r7, [r0, #20]
   17c28:	ldr	r0, [r4, #32]
   17c2c:	strh	r1, [r0, #14]
   17c30:	ldr	r1, [r4, #28]
   17c34:	ldr	r2, [r4, #60]	; 0x3c
   17c38:	ldr	r3, [r4, #64]	; 0x40
   17c3c:	add	r2, r2, r1
   17c40:	sub	r1, r3, r1
   17c44:	str	r2, [r4, #16]
   17c48:	mvn	r2, #3
   17c4c:	cmn	r1, #4
   17c50:	movcs	r1, r2
   17c54:	str	r1, [r4, #24]
   17c58:	str	r2, [r0, #4]
   17c5c:	ldr	r1, [r0, #20]
   17c60:	adds	r1, r1, sl
   17c64:	cmpcc	r1, #1073741824	; 0x40000000
   17c68:	bcc	17c8c <flatcc_builder_create_union_vector@@Base+0xc0>
   17c6c:	ldr	r0, [pc, #556]	; 17ea0 <flatcc_builder_create_union_vector@@Base+0x2d4>
   17c70:	ldr	r1, [pc, #556]	; 17ea4 <flatcc_builder_create_union_vector@@Base+0x2d8>
   17c74:	ldr	r3, [pc, #556]	; 17ea8 <flatcc_builder_create_union_vector@@Base+0x2dc>
   17c78:	mov	r2, #892	; 0x37c
   17c7c:	add	r0, pc, r0
   17c80:	add	r1, pc, r1
   17c84:	add	r3, pc, r3
   17c88:	bl	129c0 <__assert_fail@plt>
   17c8c:	str	r1, [r0, #20]
   17c90:	ldr	r7, [r4, #20]
   17c94:	ldr	r0, [r4, #24]
   17c98:	add	r1, r7, sl, lsl #2
   17c9c:	cmp	r1, r0
   17ca0:	str	r1, [r4, #20]
   17ca4:	bcs	17cb8 <flatcc_builder_create_union_vector@@Base+0xec>
   17ca8:	ldr	r1, [r4, #16]
   17cac:	adds	r2, r1, r7
   17cb0:	bne	17d20 <flatcc_builder_create_union_vector@@Base+0x154>
   17cb4:	b	17c0c <flatcc_builder_create_union_vector@@Base+0x40>
   17cb8:	ldr	r2, [r4, #28]
   17cbc:	ldr	r0, [r4, #40]	; 0x28
   17cc0:	ldr	r6, [r4, #48]	; 0x30
   17cc4:	mov	r3, #1
   17cc8:	str	r3, [sp]
   17ccc:	mov	r3, #1
   17cd0:	add	r1, r1, r2
   17cd4:	add	r2, r1, #1
   17cd8:	add	r1, r4, #60	; 0x3c
   17cdc:	blx	r6
   17ce0:	cmp	r0, #0
   17ce4:	bne	17c0c <flatcc_builder_create_union_vector@@Base+0x40>
   17ce8:	ldr	r0, [r4, #28]
   17cec:	ldr	r1, [r4, #60]	; 0x3c
   17cf0:	ldr	r3, [r4, #64]	; 0x40
   17cf4:	ldr	r2, [r4, #32]
   17cf8:	add	r1, r1, r0
   17cfc:	sub	r0, r3, r0
   17d00:	mvn	r3, #3
   17d04:	cmn	r0, #4
   17d08:	str	r1, [r4, #16]
   17d0c:	movcs	r0, r3
   17d10:	str	r0, [r4, #24]
   17d14:	str	r3, [r2, #4]
   17d18:	adds	r2, r1, r7
   17d1c:	beq	17c0c <flatcc_builder_create_union_vector@@Base+0x40>
   17d20:	ldr	r7, [r4, #20]
   17d24:	add	r2, r7, sl
   17d28:	cmp	r2, r0
   17d2c:	str	r2, [r4, #20]
   17d30:	bcc	17d94 <flatcc_builder_create_union_vector@@Base+0x1c8>
   17d34:	ldr	r1, [r4, #28]
   17d38:	ldr	r0, [r4, #40]	; 0x28
   17d3c:	ldr	r6, [r4, #48]	; 0x30
   17d40:	mov	r3, #1
   17d44:	str	r3, [sp]
   17d48:	mov	r3, #1
   17d4c:	add	r1, r2, r1
   17d50:	add	r2, r1, #1
   17d54:	add	r1, r4, #60	; 0x3c
   17d58:	blx	r6
   17d5c:	cmp	r0, #0
   17d60:	bne	17c0c <flatcc_builder_create_union_vector@@Base+0x40>
   17d64:	ldr	r0, [r4, #28]
   17d68:	ldr	r1, [r4, #60]	; 0x3c
   17d6c:	ldr	r3, [r4, #64]	; 0x40
   17d70:	ldr	r2, [r4, #32]
   17d74:	add	r1, r1, r0
   17d78:	sub	r0, r3, r0
   17d7c:	mvn	r3, #3
   17d80:	cmn	r0, #4
   17d84:	str	r1, [r4, #16]
   17d88:	movcs	r0, r3
   17d8c:	str	r0, [r4, #24]
   17d90:	str	r3, [r2, #4]
   17d94:	adds	r8, r1, r7
   17d98:	beq	17c0c <flatcc_builder_create_union_vector@@Base+0x40>
   17d9c:	cmp	sl, #0
   17da0:	beq	17dd0 <flatcc_builder_create_union_vector@@Base+0x204>
   17da4:	add	r0, r9, #4
   17da8:	mov	r2, sl
   17dac:	mov	r3, r1
   17db0:	mov	r7, r8
   17db4:	ldrb	r6, [r0, #-4]
   17db8:	subs	r2, r2, #1
   17dbc:	strb	r6, [r7], #1
   17dc0:	ldr	r6, [r0]
   17dc4:	add	r0, r0, #8
   17dc8:	str	r6, [r3], #4
   17dcc:	bne	17db4 <flatcc_builder_create_union_vector@@Base+0x1e8>
   17dd0:	mov	r0, r4
   17dd4:	mov	r2, sl
   17dd8:	mov	r3, r8
   17ddc:	bl	172c4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17de0:	mov	r7, r0
   17de4:	mov	r9, #0
   17de8:	cmp	r0, #0
   17dec:	beq	17e18 <flatcc_builder_create_union_vector@@Base+0x24c>
   17df0:	mvn	r0, #0
   17df4:	mov	r1, #1
   17df8:	mov	r2, sl
   17dfc:	mov	r3, #1
   17e00:	str	r1, [sp]
   17e04:	str	r0, [sp, #4]
   17e08:	mov	r0, r4
   17e0c:	mov	r1, r8
   17e10:	bl	1702c <flatcc_builder_create_vector@@Base>
   17e14:	b	17e1c <flatcc_builder_create_union_vector@@Base+0x250>
   17e18:	mov	r0, #0
   17e1c:	orr	r1, r9, r7
   17e20:	stm	r5, {r0, r1}
   17e24:	mov	r1, #0
   17e28:	ldr	r0, [r4, #16]
   17e2c:	ldr	r2, [r4, #20]
   17e30:	bl	12990 <memset@plt>
   17e34:	ldr	r0, [r4, #32]
   17e38:	ldr	r1, [r4, #60]	; 0x3c
   17e3c:	ldr	r2, [r4, #64]	; 0x40
   17e40:	ldr	r3, [r0, #8]
   17e44:	str	r3, [r4, #20]
   17e48:	ldr	r3, [r0]
   17e4c:	str	r3, [r4, #28]
   17e50:	add	r1, r1, r3
   17e54:	ldr	r7, [r0, #4]
   17e58:	str	r1, [r4, #16]
   17e5c:	sub	r1, r2, r3
   17e60:	cmp	r1, r7
   17e64:	movhi	r1, r7
   17e68:	str	r1, [r4, #24]
   17e6c:	ldrh	r1, [r4, #130]	; 0x82
   17e70:	ldrh	r2, [r4, #128]	; 0x80
   17e74:	cmp	r2, r1
   17e78:	strhcc	r1, [r4, #128]	; 0x80
   17e7c:	ldrh	r1, [r0, #12]
   17e80:	sub	r0, r0, #36	; 0x24
   17e84:	str	r0, [r4, #32]
   17e88:	strh	r1, [r4, #130]	; 0x82
   17e8c:	ldr	r0, [r4, #156]	; 0x9c
   17e90:	sub	r0, r0, #1
   17e94:	str	r0, [r4, #156]	; 0x9c
   17e98:	sub	sp, fp, #28
   17e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ea0:	muleq	r0, r5, r6
   17ea4:	andeq	r6, r0, fp, asr #11
   17ea8:	andeq	r7, r0, r8, lsr #13

00017eac <flatcc_builder_create_union_vector_direct@@Base>:
   17eac:	push	{r4, r5, r6, r7, fp, lr}
   17eb0:	add	fp, sp, #16
   17eb4:	sub	sp, sp, #8
   17eb8:	ldr	r7, [fp, #8]
   17ebc:	mov	r5, r2
   17ec0:	mov	r4, r0
   17ec4:	mov	r0, #0
   17ec8:	mov	r6, r1
   17ecc:	str	r0, [r4]
   17ed0:	str	r0, [r4, #4]
   17ed4:	mov	r0, r1
   17ed8:	mov	r1, r3
   17edc:	mov	r3, r5
   17ee0:	mov	r2, r7
   17ee4:	bl	172c4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17ee8:	cmp	r0, #0
   17eec:	str	r0, [r4, #4]
   17ef0:	beq	17f1c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17ef4:	mvn	r0, #0
   17ef8:	mov	r1, #1
   17efc:	mov	r2, r7
   17f00:	mov	r3, #1
   17f04:	str	r1, [sp]
   17f08:	str	r0, [sp, #4]
   17f0c:	mov	r0, r6
   17f10:	mov	r1, r5
   17f14:	bl	1702c <flatcc_builder_create_vector@@Base>
   17f18:	str	r0, [r4]
   17f1c:	sub	sp, fp, #16
   17f20:	pop	{r4, r5, r6, r7, fp, pc}

00017f24 <flatcc_builder_start_union_vector@@Base>:
   17f24:	push	{r4, sl, fp, lr}
   17f28:	add	fp, sp, #8
   17f2c:	mov	r1, #4
   17f30:	mov	r4, r0
   17f34:	bl	14f20 <flatcc_builder_start_buffer@@Base+0xc0>
   17f38:	mov	r1, r0
   17f3c:	mvn	r0, #0
   17f40:	cmp	r1, #0
   17f44:	popne	{r4, sl, fp, pc}
   17f48:	ldr	r0, [r4, #32]
   17f4c:	mov	r1, #8
   17f50:	mov	r2, #7
   17f54:	str	r1, [r0, #16]
   17f58:	mov	r0, #0
   17f5c:	ldr	r1, [r4, #32]
   17f60:	str	r0, [r1, #20]
   17f64:	ldr	r1, [r4, #32]
   17f68:	strh	r2, [r1, #14]
   17f6c:	ldr	r2, [r4, #28]
   17f70:	ldr	r3, [r4, #60]	; 0x3c
   17f74:	ldr	ip, [r4, #64]	; 0x40
   17f78:	add	r3, r3, r2
   17f7c:	sub	r2, ip, r2
   17f80:	str	r3, [r4, #16]
   17f84:	mvn	r3, #3
   17f88:	cmn	r2, #4
   17f8c:	movcs	r2, r3
   17f90:	str	r2, [r4, #24]
   17f94:	str	r3, [r1, #4]
   17f98:	pop	{r4, sl, fp, pc}

00017f9c <flatcc_builder_end_union_vector@@Base>:
   17f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa0:	add	fp, sp, #28
   17fa4:	sub	sp, sp, #12
   17fa8:	mov	sl, r0
   17fac:	mov	r0, #0
   17fb0:	mov	r4, r1
   17fb4:	str	r0, [sl]
   17fb8:	str	r0, [sl, #4]
   17fbc:	ldr	r0, [r1, #32]
   17fc0:	ldrh	r1, [r0, #14]
   17fc4:	cmp	r1, #7
   17fc8:	bne	1816c <flatcc_builder_end_union_vector@@Base+0x1d0>
   17fcc:	ldr	r6, [r0, #20]
   17fd0:	ldr	r7, [r4, #20]
   17fd4:	ldr	r2, [r4, #24]
   17fd8:	add	r0, r6, r6, lsl #2
   17fdc:	add	r1, r7, r0
   17fe0:	cmp	r1, r2
   17fe4:	str	r1, [r4, #20]
   17fe8:	bcs	17ffc <flatcc_builder_end_union_vector@@Base+0x60>
   17fec:	ldr	r0, [r4, #16]
   17ff0:	adds	r1, r0, r7
   17ff4:	bne	18064 <flatcc_builder_end_union_vector@@Base+0xc8>
   17ff8:	b	18164 <flatcc_builder_end_union_vector@@Base+0x1c8>
   17ffc:	ldr	r2, [r4, #28]
   18000:	ldr	r0, [r4, #40]	; 0x28
   18004:	ldr	r5, [r4, #48]	; 0x30
   18008:	mov	r3, #1
   1800c:	str	r3, [sp]
   18010:	mov	r3, #1
   18014:	add	r1, r1, r2
   18018:	add	r2, r1, #1
   1801c:	add	r1, r4, #60	; 0x3c
   18020:	blx	r5
   18024:	cmp	r0, #0
   18028:	bne	18164 <flatcc_builder_end_union_vector@@Base+0x1c8>
   1802c:	ldr	r1, [r4, #28]
   18030:	ldr	r0, [r4, #60]	; 0x3c
   18034:	ldr	r3, [r4, #64]	; 0x40
   18038:	ldr	r2, [r4, #32]
   1803c:	add	r0, r0, r1
   18040:	sub	r1, r3, r1
   18044:	mvn	r3, #3
   18048:	cmn	r1, #4
   1804c:	str	r0, [r4, #16]
   18050:	movcs	r1, r3
   18054:	str	r1, [r4, #24]
   18058:	str	r3, [r2, #4]
   1805c:	adds	r1, r0, r7
   18060:	beq	18164 <flatcc_builder_end_union_vector@@Base+0x1c8>
   18064:	add	r8, r1, r6, lsl #2
   18068:	cmp	r6, #0
   1806c:	beq	1809c <flatcc_builder_end_union_vector@@Base+0x100>
   18070:	add	r0, r0, #4
   18074:	mov	r2, r6
   18078:	mov	r3, r1
   1807c:	mov	r7, r8
   18080:	ldrb	r5, [r0, #-4]
   18084:	subs	r2, r2, #1
   18088:	strb	r5, [r7], #1
   1808c:	ldr	r5, [r0]
   18090:	add	r0, r0, #8
   18094:	str	r5, [r3], #4
   18098:	bne	18080 <flatcc_builder_end_union_vector@@Base+0xe4>
   1809c:	mov	r0, r4
   180a0:	mov	r2, r6
   180a4:	mov	r3, r8
   180a8:	bl	172c4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   180ac:	mov	r7, r0
   180b0:	mov	r9, #0
   180b4:	cmp	r0, #0
   180b8:	beq	180e4 <flatcc_builder_end_union_vector@@Base+0x148>
   180bc:	mvn	r0, #0
   180c0:	mov	r1, #1
   180c4:	mov	r2, r6
   180c8:	mov	r3, #1
   180cc:	str	r1, [sp]
   180d0:	str	r0, [sp, #4]
   180d4:	mov	r0, r4
   180d8:	mov	r1, r8
   180dc:	bl	1702c <flatcc_builder_create_vector@@Base>
   180e0:	b	180e8 <flatcc_builder_end_union_vector@@Base+0x14c>
   180e4:	mov	r0, #0
   180e8:	orr	r1, r9, r7
   180ec:	stm	sl, {r0, r1}
   180f0:	mov	r1, #0
   180f4:	ldr	r0, [r4, #16]
   180f8:	ldr	r2, [r4, #20]
   180fc:	bl	12990 <memset@plt>
   18100:	ldr	r0, [r4, #32]
   18104:	ldr	r1, [r4, #60]	; 0x3c
   18108:	ldr	r2, [r4, #64]	; 0x40
   1810c:	ldr	r3, [r0, #8]
   18110:	str	r3, [r4, #20]
   18114:	ldr	r3, [r0]
   18118:	str	r3, [r4, #28]
   1811c:	add	r1, r1, r3
   18120:	ldr	r7, [r0, #4]
   18124:	str	r1, [r4, #16]
   18128:	sub	r1, r2, r3
   1812c:	cmp	r1, r7
   18130:	movhi	r1, r7
   18134:	str	r1, [r4, #24]
   18138:	ldrh	r1, [r4, #130]	; 0x82
   1813c:	ldrh	r2, [r4, #128]	; 0x80
   18140:	cmp	r2, r1
   18144:	strhcc	r1, [r4, #128]	; 0x80
   18148:	ldrh	r1, [r0, #12]
   1814c:	sub	r0, r0, #36	; 0x24
   18150:	str	r0, [r4, #32]
   18154:	strh	r1, [r4, #130]	; 0x82
   18158:	ldr	r0, [r4, #156]	; 0x9c
   1815c:	sub	r0, r0, #1
   18160:	str	r0, [r4, #156]	; 0x9c
   18164:	sub	sp, fp, #28
   18168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1816c:	ldr	r0, [pc, #24]	; 1818c <flatcc_builder_end_union_vector@@Base+0x1f0>
   18170:	ldr	r1, [pc, #24]	; 18190 <flatcc_builder_end_union_vector@@Base+0x1f4>
   18174:	ldr	r3, [pc, #24]	; 18194 <flatcc_builder_end_union_vector@@Base+0x1f8>
   18178:	movw	r2, #1617	; 0x651
   1817c:	add	r0, pc, r0
   18180:	add	r1, pc, r1
   18184:	add	r3, pc, r3
   18188:	bl	129c0 <__assert_fail@plt>
   1818c:	andeq	r6, r0, r8, lsl #26
   18190:	andeq	r6, r0, fp, asr #1
   18194:	andeq	r6, r0, r2, lsr sp

00018198 <flatcc_builder_union_vector_count@@Base>:
   18198:	ldr	r0, [r0, #32]
   1819c:	ldr	r0, [r0, #20]
   181a0:	bx	lr

000181a4 <flatcc_builder_union_vector_edit@@Base>:
   181a4:	ldr	r0, [r0, #16]
   181a8:	bx	lr

000181ac <flatcc_builder_extend_union_vector@@Base>:
   181ac:	push	{r4, r5, fp, lr}
   181b0:	add	fp, sp, #8
   181b4:	sub	sp, sp, #8
   181b8:	mov	r4, r0
   181bc:	ldr	r0, [r0, #32]
   181c0:	ldr	r2, [r0, #20]
   181c4:	adds	r2, r2, r1
   181c8:	cmpcc	r2, #536870912	; 0x20000000
   181cc:	bcc	181f0 <flatcc_builder_extend_union_vector@@Base+0x44>
   181d0:	ldr	r0, [pc, #184]	; 18290 <flatcc_builder_extend_union_vector@@Base+0xe4>
   181d4:	ldr	r1, [pc, #184]	; 18294 <flatcc_builder_extend_union_vector@@Base+0xe8>
   181d8:	ldr	r3, [pc, #184]	; 18298 <flatcc_builder_extend_union_vector@@Base+0xec>
   181dc:	mov	r2, #892	; 0x37c
   181e0:	add	r0, pc, r0
   181e4:	add	r1, pc, r1
   181e8:	add	r3, pc, r3
   181ec:	bl	129c0 <__assert_fail@plt>
   181f0:	str	r2, [r0, #20]
   181f4:	ldr	r5, [r4, #20]
   181f8:	ldr	r0, [r4, #24]
   181fc:	add	r1, r5, r1, lsl #3
   18200:	cmp	r1, r0
   18204:	str	r1, [r4, #20]
   18208:	bcs	18214 <flatcc_builder_extend_union_vector@@Base+0x68>
   1820c:	ldr	r0, [r4, #16]
   18210:	b	18284 <flatcc_builder_extend_union_vector@@Base+0xd8>
   18214:	ldr	r2, [r4, #28]
   18218:	ldr	r0, [r4, #40]	; 0x28
   1821c:	ldr	ip, [r4, #48]	; 0x30
   18220:	mov	r3, #1
   18224:	str	r3, [sp]
   18228:	mov	r3, #1
   1822c:	add	r1, r1, r2
   18230:	add	r2, r1, #1
   18234:	add	r1, r4, #60	; 0x3c
   18238:	blx	ip
   1823c:	mov	r1, r0
   18240:	mov	r0, #0
   18244:	cmp	r1, #0
   18248:	beq	18254 <flatcc_builder_extend_union_vector@@Base+0xa8>
   1824c:	sub	sp, fp, #8
   18250:	pop	{r4, r5, fp, pc}
   18254:	ldr	r1, [r4, #28]
   18258:	ldr	r0, [r4, #60]	; 0x3c
   1825c:	ldr	r3, [r4, #64]	; 0x40
   18260:	ldr	r2, [r4, #32]
   18264:	add	r0, r0, r1
   18268:	sub	r1, r3, r1
   1826c:	mvn	r3, #3
   18270:	cmn	r1, #4
   18274:	str	r0, [r4, #16]
   18278:	movcs	r1, r3
   1827c:	str	r1, [r4, #24]
   18280:	str	r3, [r2, #4]
   18284:	add	r0, r0, r5
   18288:	sub	sp, fp, #8
   1828c:	pop	{r4, r5, fp, pc}
   18290:	andeq	r7, r0, r1, lsr r1
   18294:	andeq	r6, r0, r7, rrx
   18298:	andeq	r7, r0, r4, asr #2

0001829c <flatcc_builder_truncate_union_vector@@Base>:
   1829c:	push	{fp, lr}
   182a0:	mov	fp, sp
   182a4:	ldr	r2, [r0, #32]
   182a8:	ldrh	r3, [r2, #14]
   182ac:	cmp	r3, #7
   182b0:	bne	182f8 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   182b4:	ldr	r3, [r2, #20]
   182b8:	cmp	r3, r1
   182bc:	bcc	18318 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   182c0:	sub	r3, r3, r1
   182c4:	str	r3, [r2, #20]
   182c8:	ldr	r2, [r0, #32]
   182cc:	ldr	r3, [r0, #20]
   182d0:	ldr	ip, [r0, #16]
   182d4:	ldr	r2, [r2, #16]
   182d8:	mls	r3, r2, r1, r3
   182dc:	mul	r2, r2, r1
   182e0:	mov	r1, #0
   182e4:	str	r3, [r0, #20]
   182e8:	add	r0, ip, r3
   182ec:	bl	12990 <memset@plt>
   182f0:	mov	r0, #0
   182f4:	pop	{fp, pc}
   182f8:	ldr	r0, [pc, #56]	; 18338 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   182fc:	ldr	r1, [pc, #56]	; 1833c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   18300:	ldr	r3, [pc, #56]	; 18340 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   18304:	movw	r2, #1665	; 0x681
   18308:	add	r0, pc, r0
   1830c:	add	r1, pc, r1
   18310:	add	r3, pc, r3
   18314:	bl	129c0 <__assert_fail@plt>
   18318:	ldr	r0, [pc, #36]	; 18344 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   1831c:	ldr	r1, [pc, #36]	; 18348 <flatcc_builder_truncate_union_vector@@Base+0xac>
   18320:	ldr	r3, [pc, #36]	; 1834c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   18324:	movw	r2, #1666	; 0x682
   18328:	add	r0, pc, r0
   1832c:	add	r1, pc, r1
   18330:	add	r3, pc, r3
   18334:	bl	129c0 <__assert_fail@plt>
   18338:	andeq	r6, r0, ip, ror fp
   1833c:	andeq	r5, r0, pc, lsr pc
   18340:	strdeq	r6, [r0], -r9
   18344:	andeq	r6, r0, r0, asr #11
   18348:	andeq	r5, r0, pc, lsl pc
   1834c:	ldrdeq	r6, [r0], -r9

00018350 <flatcc_builder_union_vector_push@@Base>:
   18350:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18354:	add	fp, sp, #24
   18358:	sub	sp, sp, #8
   1835c:	mov	r7, r0
   18360:	ldr	r0, [r0, #32]
   18364:	mov	r9, r1
   18368:	ldrh	r1, [r0, #14]
   1836c:	cmp	r1, #7
   18370:	bne	1842c <flatcc_builder_union_vector_push@@Base+0xdc>
   18374:	ldr	r1, [r0, #20]
   18378:	mov	r6, #0
   1837c:	cmn	r1, #-536870911	; 0xe0000001
   18380:	beq	18420 <flatcc_builder_union_vector_push@@Base+0xd0>
   18384:	add	r1, r1, #1
   18388:	mov	r8, r2
   1838c:	str	r1, [r0, #20]
   18390:	ldr	r4, [r7, #20]
   18394:	ldr	r0, [r7, #24]
   18398:	add	r1, r4, #8
   1839c:	cmp	r1, r0
   183a0:	str	r1, [r7, #20]
   183a4:	bcs	183b0 <flatcc_builder_union_vector_push@@Base+0x60>
   183a8:	ldr	r0, [r7, #16]
   183ac:	b	18410 <flatcc_builder_union_vector_push@@Base+0xc0>
   183b0:	ldr	r1, [r7, #28]
   183b4:	ldr	r0, [r7, #40]	; 0x28
   183b8:	ldr	r5, [r7, #48]	; 0x30
   183bc:	mov	r2, #1
   183c0:	mov	r3, #1
   183c4:	str	r2, [sp]
   183c8:	add	r1, r4, r1
   183cc:	add	r2, r1, #9
   183d0:	add	r1, r7, #60	; 0x3c
   183d4:	blx	r5
   183d8:	cmp	r0, #0
   183dc:	bne	18420 <flatcc_builder_union_vector_push@@Base+0xd0>
   183e0:	ldr	r1, [r7, #28]
   183e4:	ldr	r0, [r7, #60]	; 0x3c
   183e8:	ldr	r3, [r7, #64]	; 0x40
   183ec:	ldr	r2, [r7, #32]
   183f0:	add	r0, r0, r1
   183f4:	sub	r1, r3, r1
   183f8:	mvn	r3, #3
   183fc:	cmn	r1, #4
   18400:	str	r0, [r7, #16]
   18404:	movcs	r1, r3
   18408:	str	r1, [r7, #24]
   1840c:	str	r3, [r2, #4]
   18410:	adds	r0, r0, r4
   18414:	movne	r6, r0
   18418:	strne	r9, [r0]
   1841c:	strne	r8, [r0, #4]
   18420:	mov	r0, r6
   18424:	sub	sp, fp, #24
   18428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1842c:	ldr	r0, [pc, #24]	; 1844c <flatcc_builder_union_vector_push@@Base+0xfc>
   18430:	ldr	r1, [pc, #24]	; 18450 <flatcc_builder_union_vector_push@@Base+0x100>
   18434:	ldr	r3, [pc, #24]	; 18454 <flatcc_builder_union_vector_push@@Base+0x104>
   18438:	movw	r2, #1677	; 0x68d
   1843c:	add	r0, pc, r0
   18440:	add	r1, pc, r1
   18444:	add	r3, pc, r3
   18448:	bl	129c0 <__assert_fail@plt>
   1844c:	andeq	r6, r0, r8, asr #20
   18450:	andeq	r5, r0, fp, lsl #28
   18454:	andeq	r6, r0, sl, lsl #22

00018458 <flatcc_builder_append_union_vector@@Base>:
   18458:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1845c:	add	fp, sp, #24
   18460:	sub	sp, sp, #8
   18464:	mov	r6, r0
   18468:	ldr	r0, [r0, #32]
   1846c:	mov	r8, r1
   18470:	ldrh	r1, [r0, #14]
   18474:	cmp	r1, #7
   18478:	bne	18568 <flatcc_builder_append_union_vector@@Base+0x110>
   1847c:	ldr	r1, [r0, #20]
   18480:	mov	r5, r2
   18484:	adds	r1, r1, r2
   18488:	cmpcc	r1, #536870912	; 0x20000000
   1848c:	bcc	184b0 <flatcc_builder_append_union_vector@@Base+0x58>
   18490:	ldr	r0, [pc, #252]	; 18594 <flatcc_builder_append_union_vector@@Base+0x13c>
   18494:	ldr	r1, [pc, #252]	; 18598 <flatcc_builder_append_union_vector@@Base+0x140>
   18498:	ldr	r3, [pc, #252]	; 1859c <flatcc_builder_append_union_vector@@Base+0x144>
   1849c:	mov	r2, #892	; 0x37c
   184a0:	add	r0, pc, r0
   184a4:	add	r1, pc, r1
   184a8:	add	r3, pc, r3
   184ac:	bl	129c0 <__assert_fail@plt>
   184b0:	str	r1, [r0, #20]
   184b4:	ldr	r4, [r6, #20]
   184b8:	ldr	r0, [r6, #24]
   184bc:	add	r1, r4, r5, lsl #3
   184c0:	cmp	r1, r0
   184c4:	str	r1, [r6, #20]
   184c8:	bcs	184ec <flatcc_builder_append_union_vector@@Base+0x94>
   184cc:	ldr	r0, [r6, #16]
   184d0:	adds	r7, r0, r4
   184d4:	beq	18558 <flatcc_builder_append_union_vector@@Base+0x100>
   184d8:	lsl	r2, r5, #3
   184dc:	mov	r0, r7
   184e0:	mov	r1, r8
   184e4:	bl	12900 <memcpy@plt>
   184e8:	b	1855c <flatcc_builder_append_union_vector@@Base+0x104>
   184ec:	ldr	r2, [r6, #28]
   184f0:	ldr	r0, [r6, #40]	; 0x28
   184f4:	ldr	r7, [r6, #48]	; 0x30
   184f8:	mov	r3, #1
   184fc:	str	r3, [sp]
   18500:	mov	r3, #1
   18504:	add	r1, r1, r2
   18508:	add	r2, r1, #1
   1850c:	add	r1, r6, #60	; 0x3c
   18510:	blx	r7
   18514:	mov	r7, #0
   18518:	cmp	r0, #0
   1851c:	bne	1855c <flatcc_builder_append_union_vector@@Base+0x104>
   18520:	ldr	r1, [r6, #28]
   18524:	ldr	r0, [r6, #60]	; 0x3c
   18528:	ldr	r3, [r6, #64]	; 0x40
   1852c:	ldr	r2, [r6, #32]
   18530:	add	r0, r0, r1
   18534:	sub	r1, r3, r1
   18538:	mvn	r3, #3
   1853c:	cmn	r1, #4
   18540:	str	r0, [r6, #16]
   18544:	movcs	r1, r3
   18548:	str	r1, [r6, #24]
   1854c:	str	r3, [r2, #4]
   18550:	adds	r7, r0, r4
   18554:	bne	184d8 <flatcc_builder_append_union_vector@@Base+0x80>
   18558:	mov	r7, #0
   1855c:	mov	r0, r7
   18560:	sub	sp, fp, #24
   18564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18568:	ldr	r0, [pc, #24]	; 18588 <flatcc_builder_append_union_vector@@Base+0x130>
   1856c:	ldr	r1, [pc, #24]	; 1858c <flatcc_builder_append_union_vector@@Base+0x134>
   18570:	ldr	r3, [pc, #24]	; 18590 <flatcc_builder_append_union_vector@@Base+0x138>
   18574:	movw	r2, #1692	; 0x69c
   18578:	add	r0, pc, r0
   1857c:	add	r1, pc, r1
   18580:	add	r3, pc, r3
   18584:	bl	129c0 <__assert_fail@plt>
   18588:	andeq	r6, r0, ip, lsl #18
   1858c:	andeq	r5, r0, pc, asr #25
   18590:	andeq	r6, r0, fp, lsr sl
   18594:	andeq	r6, r0, r1, ror lr
   18598:	andeq	r5, r0, r7, lsr #27
   1859c:	andeq	r6, r0, r4, lsl #29

000185a0 <flatcc_builder_create_string@@Base>:
   185a0:	push	{r4, r5, r6, sl, fp, lr}
   185a4:	add	fp, sp, #16
   185a8:	sub	sp, sp, #80	; 0x50
   185ac:	str	r2, [fp, #-20]	; 0xffffffec
   185b0:	mvn	r5, r2
   185b4:	mov	r6, r0
   185b8:	mov	r3, #1
   185bc:	cmp	r2, #0
   185c0:	ldr	ip, [r0, #136]	; 0x88
   185c4:	sub	r0, fp, #20
   185c8:	str	r0, [sp, #12]
   185cc:	mov	r0, #4
   185d0:	str	r0, [sp, #4]
   185d4:	str	r0, [sp, #16]
   185d8:	str	r3, [sp, #8]
   185dc:	add	r5, ip, r5
   185e0:	and	r5, r5, #3
   185e4:	add	r5, r5, #1
   185e8:	beq	18604 <flatcc_builder_create_string@@Base+0x64>
   185ec:	mov	r3, #2
   185f0:	add	r0, r2, #4
   185f4:	str	r1, [sp, #20]
   185f8:	str	r2, [sp, #24]
   185fc:	str	r3, [sp, #8]
   18600:	str	r0, [sp, #4]
   18604:	add	r1, r0, r5
   18608:	add	lr, sp, #4
   1860c:	str	r1, [sp, #4]
   18610:	add	r0, lr, r3, lsl #3
   18614:	cmp	r1, #0
   18618:	ldr	r2, [pc, #132]	; 186a4 <flatcc_builder_create_string@@Base+0x104>
   1861c:	ldr	r2, [pc, r2]
   18620:	str	r2, [r0, #8]
   18624:	add	r2, r3, #1
   18628:	str	r5, [r0, #12]
   1862c:	str	r2, [sp, #8]
   18630:	ble	18684 <flatcc_builder_create_string@@Base+0xe4>
   18634:	ldr	r0, [r6, #36]	; 0x24
   18638:	ldr	r4, [r6, #44]	; 0x2c
   1863c:	sub	r5, ip, r1
   18640:	str	r1, [sp]
   18644:	add	r1, lr, #8
   18648:	mov	r3, r5
   1864c:	blx	r4
   18650:	cmp	r0, #0
   18654:	streq	r5, [r6, #136]	; 0x88
   18658:	moveq	r0, r5
   1865c:	subeq	sp, fp, #16
   18660:	popeq	{r4, r5, r6, sl, fp, pc}
   18664:	ldr	r0, [pc, #72]	; 186b4 <flatcc_builder_create_string@@Base+0x114>
   18668:	ldr	r1, [pc, #72]	; 186b8 <flatcc_builder_create_string@@Base+0x118>
   1866c:	ldr	r3, [pc, #72]	; 186bc <flatcc_builder_create_string@@Base+0x11c>
   18670:	movw	r2, #651	; 0x28b
   18674:	add	r0, pc, r0
   18678:	add	r1, pc, r1
   1867c:	add	r3, pc, r3
   18680:	bl	129c0 <__assert_fail@plt>
   18684:	ldr	r0, [pc, #28]	; 186a8 <flatcc_builder_create_string@@Base+0x108>
   18688:	ldr	r1, [pc, #28]	; 186ac <flatcc_builder_create_string@@Base+0x10c>
   1868c:	ldr	r3, [pc, #28]	; 186b0 <flatcc_builder_create_string@@Base+0x110>
   18690:	movw	r2, #647	; 0x287
   18694:	add	r0, pc, r0
   18698:	add	r1, pc, r1
   1869c:	add	r3, pc, r3
   186a0:	bl	129c0 <__assert_fail@plt>
   186a4:	andeq	r8, r1, r4, lsr sl
   186a8:	andeq	r6, r0, r4, ror sp
   186ac:			; <UNDEFINED> instruction: 0x00005bb3
   186b0:	andeq	r6, r0, fp, lsr #24
   186b4:	muleq	r0, r4, sp
   186b8:	ldrdeq	r5, [r0], -r3
   186bc:	andeq	r6, r0, fp, asr #24

000186c0 <flatcc_builder_create_string_str@@Base>:
   186c0:	push	{r4, r5, fp, lr}
   186c4:	add	fp, sp, #8
   186c8:	mov	r5, r0
   186cc:	mov	r0, r1
   186d0:	mov	r4, r1
   186d4:	bl	1296c <strlen@plt>
   186d8:	mov	r2, r0
   186dc:	mov	r0, r5
   186e0:	mov	r1, r4
   186e4:	pop	{r4, r5, fp, lr}
   186e8:	b	185a0 <flatcc_builder_create_string@@Base>

000186ec <flatcc_builder_create_string_strn@@Base>:
   186ec:	push	{r4, r5, r6, sl, fp, lr}
   186f0:	add	fp, sp, #16
   186f4:	mov	r6, r0
   186f8:	mov	r5, r1
   186fc:	mov	r0, r1
   18700:	mov	r1, #0
   18704:	mov	r4, r2
   18708:	bl	129a8 <memchr@plt>
   1870c:	cmp	r0, #0
   18710:	mov	r1, r5
   18714:	subne	r4, r0, r5
   18718:	mov	r0, r6
   1871c:	mov	r2, r4
   18720:	pop	{r4, r5, r6, sl, fp, lr}
   18724:	b	185a0 <flatcc_builder_create_string@@Base>

00018728 <flatcc_builder_end_string@@Base>:
   18728:	push	{r4, r5, fp, lr}
   1872c:	add	fp, sp, #8
   18730:	mov	r4, r0
   18734:	ldr	r0, [r0, #32]
   18738:	ldrh	r1, [r0, #14]
   1873c:	cmp	r1, #6
   18740:	bne	187e8 <flatcc_builder_end_string@@Base+0xc0>
   18744:	ldr	r2, [r0, #20]
   18748:	ldr	r0, [r4, #20]
   1874c:	cmp	r2, r0
   18750:	bne	18808 <flatcc_builder_end_string@@Base+0xe0>
   18754:	ldr	r1, [r4, #16]
   18758:	mov	r0, r4
   1875c:	bl	185a0 <flatcc_builder_create_string@@Base>
   18760:	mov	r5, r0
   18764:	cmp	r0, #0
   18768:	beq	187e0 <flatcc_builder_end_string@@Base+0xb8>
   1876c:	ldr	r0, [r4, #16]
   18770:	ldr	r2, [r4, #20]
   18774:	mov	r1, #0
   18778:	bl	12990 <memset@plt>
   1877c:	ldr	r0, [r4, #32]
   18780:	ldr	r1, [r4, #60]	; 0x3c
   18784:	ldr	ip, [r4, #64]	; 0x40
   18788:	ldr	r3, [r0, #8]
   1878c:	str	r3, [r4, #20]
   18790:	ldr	r3, [r0]
   18794:	str	r3, [r4, #28]
   18798:	add	r1, r1, r3
   1879c:	ldr	r2, [r0, #4]
   187a0:	str	r1, [r4, #16]
   187a4:	sub	r1, ip, r3
   187a8:	cmp	r1, r2
   187ac:	movhi	r1, r2
   187b0:	str	r1, [r4, #24]
   187b4:	ldrh	r1, [r4, #130]	; 0x82
   187b8:	ldrh	r2, [r4, #128]	; 0x80
   187bc:	cmp	r2, r1
   187c0:	strhcc	r1, [r4, #128]	; 0x80
   187c4:	ldrh	r1, [r0, #12]
   187c8:	sub	r0, r0, #36	; 0x24
   187cc:	str	r0, [r4, #32]
   187d0:	strh	r1, [r4, #130]	; 0x82
   187d4:	ldr	r0, [r4, #156]	; 0x9c
   187d8:	sub	r0, r0, #1
   187dc:	str	r0, [r4, #156]	; 0x9c
   187e0:	mov	r0, r5
   187e4:	pop	{r4, r5, fp, pc}
   187e8:	ldr	r0, [pc, #56]	; 18828 <flatcc_builder_end_string@@Base+0x100>
   187ec:	ldr	r1, [pc, #56]	; 1882c <flatcc_builder_end_string@@Base+0x104>
   187f0:	ldr	r3, [pc, #56]	; 18830 <flatcc_builder_end_string@@Base+0x108>
   187f4:	movw	r2, #1732	; 0x6c4
   187f8:	add	r0, pc, r0
   187fc:	add	r1, pc, r1
   18800:	add	r3, pc, r3
   18804:	bl	129c0 <__assert_fail@plt>
   18808:	ldr	r0, [pc, #36]	; 18834 <flatcc_builder_end_string@@Base+0x10c>
   1880c:	ldr	r1, [pc, #36]	; 18838 <flatcc_builder_end_string@@Base+0x110>
   18810:	ldr	r3, [pc, #36]	; 1883c <flatcc_builder_end_string@@Base+0x114>
   18814:	movw	r2, #1733	; 0x6c5
   18818:	add	r0, pc, r0
   1881c:	add	r1, pc, r1
   18820:	add	r3, pc, r3
   18824:	bl	129c0 <__assert_fail@plt>
   18828:	andeq	r5, r0, pc, lsl #31
   1882c:	andeq	r5, r0, pc, asr #20
   18830:	andeq	r6, r0, sl, lsr r8
   18834:	andeq	r6, r0, r5, ror #16
   18838:	andeq	r5, r0, pc, lsr #20
   1883c:	andeq	r6, r0, sl, lsl r8

00018840 <flatcc_builder_string_edit@@Base>:
   18840:	ldr	r0, [r0, #16]
   18844:	bx	lr

00018848 <flatcc_builder_string_len@@Base>:
   18848:	ldr	r0, [r0, #32]
   1884c:	ldr	r0, [r0, #20]
   18850:	bx	lr

00018854 <flatcc_builder_table_edit@@Base>:
   18854:	ldr	r2, [r0, #32]
   18858:	ldrh	r2, [r2, #14]
   1885c:	cmp	r2, #3
   18860:	ldreq	r2, [r0, #16]
   18864:	ldreq	r0, [r0, #20]
   18868:	addeq	r0, r2, r0
   1886c:	subeq	r0, r0, r1
   18870:	bxeq	lr
   18874:	push	{fp, lr}
   18878:	mov	fp, sp
   1887c:	ldr	r0, [pc, #24]	; 1889c <flatcc_builder_table_edit@@Base+0x48>
   18880:	ldr	r1, [pc, #24]	; 188a0 <flatcc_builder_table_edit@@Base+0x4c>
   18884:	ldr	r3, [pc, #24]	; 188a4 <flatcc_builder_table_edit@@Base+0x50>
   18888:	movw	r2, #1794	; 0x702
   1888c:	add	r0, pc, r0
   18890:	add	r1, pc, r1
   18894:	add	r3, pc, r3
   18898:	bl	129c0 <__assert_fail@plt>
   1889c:	andeq	r6, r0, fp, ror #3
   188a0:			; <UNDEFINED> instruction: 0x000059bb
   188a4:	muleq	r0, fp, r8

000188a8 <flatcc_builder_table_add_copy@@Base>:
   188a8:	push	{r4, r5, r6, sl, fp, lr}
   188ac:	add	fp, sp, #16
   188b0:	mov	r4, r3
   188b4:	ldr	r3, [fp, #8]
   188b8:	mov	r5, r2
   188bc:	mov	r2, r4
   188c0:	bl	178dc <flatcc_builder_table_add@@Base>
   188c4:	mov	r6, r0
   188c8:	cmp	r0, #0
   188cc:	beq	188e0 <flatcc_builder_table_add_copy@@Base+0x38>
   188d0:	mov	r0, r6
   188d4:	mov	r1, r5
   188d8:	mov	r2, r4
   188dc:	bl	12900 <memcpy@plt>
   188e0:	mov	r0, r6
   188e4:	pop	{r4, r5, r6, sl, fp, pc}

000188e8 <flatcc_builder_push_buffer_alignment@@Base>:
   188e8:	ldrh	r1, [r0, #128]	; 0x80
   188ec:	mov	r2, #4
   188f0:	strh	r2, [r0, #128]	; 0x80
   188f4:	mov	r0, r1
   188f8:	bx	lr

000188fc <flatcc_builder_pop_buffer_alignment@@Base>:
   188fc:	ldrh	r2, [r0, #128]	; 0x80
   18900:	cmp	r2, r1
   18904:	strhcc	r1, [r0, #128]	; 0x80
   18908:	bx	lr

0001890c <flatcc_builder_get_buffer_alignment@@Base>:
   1890c:	ldrh	r0, [r0, #128]	; 0x80
   18910:	bx	lr

00018914 <flatcc_builder_set_vtable_clustering@@Base>:
   18914:	clz	r1, r1
   18918:	lsr	r1, r1, #5
   1891c:	str	r1, [r0, #180]	; 0xb4
   18920:	bx	lr

00018924 <flatcc_builder_set_block_align@@Base>:
   18924:	strh	r1, [r0, #132]	; 0x84
   18928:	bx	lr

0001892c <flatcc_builder_get_level@@Base>:
   1892c:	ldr	r0, [r0, #156]	; 0x9c
   18930:	bx	lr

00018934 <flatcc_builder_set_max_level@@Base>:
   18934:	str	r1, [r0, #176]	; 0xb0
   18938:	ldr	r2, [r0, #160]	; 0xa0
   1893c:	cmp	r2, r1
   18940:	strlt	r1, [r0, #160]	; 0xa0
   18944:	bx	lr

00018948 <flatcc_builder_get_buffer_size@@Base>:
   18948:	ldr	r1, [r0, #136]	; 0x88
   1894c:	ldr	r0, [r0, #140]	; 0x8c
   18950:	sub	r0, r0, r1
   18954:	bx	lr

00018958 <flatcc_builder_get_buffer_start@@Base>:
   18958:	ldr	r0, [r0, #136]	; 0x88
   1895c:	bx	lr

00018960 <flatcc_builder_get_buffer_end@@Base>:
   18960:	ldr	r0, [r0, #140]	; 0x8c
   18964:	bx	lr

00018968 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18968:	str	r1, [r0, #172]	; 0xac
   1896c:	bx	lr

00018970 <flatcc_builder_set_identifier@@Base>:
   18970:	ldr	r2, [pc, #20]	; 1898c <flatcc_builder_set_identifier@@Base+0x1c>
   18974:	cmp	r1, #0
   18978:	ldr	r2, [pc, r2]
   1897c:	movne	r2, r1
   18980:	ldr	r1, [r2]
   18984:	str	r1, [r0, #168]	; 0xa8
   18988:	bx	lr
   1898c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00018990 <flatcc_builder_get_type@@Base>:
   18990:	ldr	r0, [r0, #32]
   18994:	cmp	r0, #0
   18998:	ldrhne	r0, [r0, #14]
   1899c:	moveq	r0, #0
   189a0:	bx	lr

000189a4 <flatcc_builder_get_type_at@@Base>:
   189a4:	mov	r2, r0
   189a8:	cmp	r1, #1
   189ac:	mov	r0, #0
   189b0:	ldrge	r3, [r2, #156]	; 0x9c
   189b4:	cmpge	r3, r1
   189b8:	bge	189c0 <flatcc_builder_get_type_at@@Base+0x1c>
   189bc:	bx	lr
   189c0:	sub	r0, r1, r3
   189c4:	ldr	r1, [r2, #32]
   189c8:	add	r0, r0, r0, lsl #3
   189cc:	add	r0, r1, r0, lsl #2
   189d0:	ldrh	r0, [r0, #14]
   189d4:	bx	lr

000189d8 <flatcc_builder_get_direct_buffer@@Base>:
   189d8:	ldr	r2, [r0, #184]	; 0xb8
   189dc:	cmp	r2, #0
   189e0:	beq	189f4 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   189e4:	ldr	r2, [r0, #188]	; 0xbc
   189e8:	ldr	r3, [r0, #192]	; 0xc0
   189ec:	cmp	r2, r3
   189f0:	beq	18a0c <flatcc_builder_get_direct_buffer@@Base+0x34>
   189f4:	cmp	r1, #0
   189f8:	moveq	r0, #0
   189fc:	bxeq	lr
   18a00:	mov	r0, #0
   18a04:	str	r0, [r1]
   18a08:	bx	lr
   18a0c:	cmp	r1, #0
   18a10:	ldrne	r2, [r0, #212]	; 0xd4
   18a14:	strne	r2, [r1]
   18a18:	ldr	r0, [r0, #196]	; 0xc4
   18a1c:	bx	lr

00018a20 <flatcc_builder_copy_buffer@@Base>:
   18a20:	push	{fp, lr}
   18a24:	mov	fp, sp
   18a28:	ldr	r3, [r0, #184]	; 0xb8
   18a2c:	cmp	r3, #0
   18a30:	beq	18a64 <flatcc_builder_copy_buffer@@Base+0x44>
   18a34:	add	r0, r0, #188	; 0xbc
   18a38:	bl	19170 <flatcc_emitter_copy_buffer@@Base>
   18a3c:	cmp	r0, #0
   18a40:	popne	{fp, pc}
   18a44:	ldr	r0, [pc, #32]	; 18a6c <flatcc_builder_copy_buffer@@Base+0x4c>
   18a48:	ldr	r1, [pc, #32]	; 18a70 <flatcc_builder_copy_buffer@@Base+0x50>
   18a4c:	ldr	r3, [pc, #32]	; 18a74 <flatcc_builder_copy_buffer@@Base+0x54>
   18a50:	movw	r2, #1926	; 0x786
   18a54:	add	r0, pc, r0
   18a58:	add	r1, pc, r1
   18a5c:	add	r3, pc, r3
   18a60:	bl	129c0 <__assert_fail@plt>
   18a64:	mov	r0, #0
   18a68:	pop	{fp, pc}
   18a6c:	andeq	r5, r0, r2, ror #20
   18a70:	strdeq	r5, [r0], -r3
   18a74:	andeq	r6, r0, lr, asr r7

00018a78 <flatcc_builder_finalize_buffer@@Base>:
   18a78:	push	{r4, r5, r6, sl, fp, lr}
   18a7c:	add	fp, sp, #16
   18a80:	mov	r5, r0
   18a84:	ldr	r0, [r0, #136]	; 0x88
   18a88:	cmp	r1, #0
   18a8c:	ldr	r2, [r5, #140]	; 0x8c
   18a90:	sub	r4, r2, r0
   18a94:	mov	r0, r4
   18a98:	strne	r4, [r1]
   18a9c:	bl	12948 <malloc@plt>
   18aa0:	cmp	r0, #0
   18aa4:	beq	18af4 <flatcc_builder_finalize_buffer@@Base+0x7c>
   18aa8:	mov	r6, r0
   18aac:	ldr	r0, [r5, #184]	; 0xb8
   18ab0:	cmp	r0, #0
   18ab4:	beq	18b14 <flatcc_builder_finalize_buffer@@Base+0x9c>
   18ab8:	add	r0, r5, #188	; 0xbc
   18abc:	mov	r1, r6
   18ac0:	mov	r2, r4
   18ac4:	bl	19170 <flatcc_emitter_copy_buffer@@Base>
   18ac8:	cmp	r0, #0
   18acc:	movne	r0, r6
   18ad0:	popne	{r4, r5, r6, sl, fp, pc}
   18ad4:	ldr	r0, [pc, #88]	; 18b34 <flatcc_builder_finalize_buffer@@Base+0xbc>
   18ad8:	ldr	r1, [pc, #88]	; 18b38 <flatcc_builder_finalize_buffer@@Base+0xc0>
   18adc:	ldr	r3, [pc, #88]	; 18b3c <flatcc_builder_finalize_buffer@@Base+0xc4>
   18ae0:	movw	r2, #1926	; 0x786
   18ae4:	add	r0, pc, r0
   18ae8:	add	r1, pc, r1
   18aec:	add	r3, pc, r3
   18af0:	bl	129c0 <__assert_fail@plt>
   18af4:	ldr	r0, [pc, #80]	; 18b4c <flatcc_builder_finalize_buffer@@Base+0xd4>
   18af8:	ldr	r1, [pc, #80]	; 18b50 <flatcc_builder_finalize_buffer@@Base+0xd8>
   18afc:	ldr	r3, [pc, #80]	; 18b54 <flatcc_builder_finalize_buffer@@Base+0xdc>
   18b00:	movw	r2, #1944	; 0x798
   18b04:	add	r0, pc, r0
   18b08:	add	r1, pc, r1
   18b0c:	add	r3, pc, r3
   18b10:	bl	129c0 <__assert_fail@plt>
   18b14:	ldr	r0, [pc, #36]	; 18b40 <flatcc_builder_finalize_buffer@@Base+0xc8>
   18b18:	ldr	r1, [pc, #36]	; 18b44 <flatcc_builder_finalize_buffer@@Base+0xcc>
   18b1c:	ldr	r3, [pc, #36]	; 18b48 <flatcc_builder_finalize_buffer@@Base+0xd0>
   18b20:	movw	r2, #1948	; 0x79c
   18b24:	add	r0, pc, r0
   18b28:	add	r1, pc, r1
   18b2c:	add	r3, pc, r3
   18b30:	bl	129c0 <__assert_fail@plt>
   18b34:	ldrdeq	r5, [r0], -r2
   18b38:	andeq	r5, r0, r3, ror #14
   18b3c:	andeq	r6, r0, lr, asr #13
   18b40:	andeq	r6, r0, r4, ror #17
   18b44:	andeq	r5, r0, r3, lsr #14
   18b48:	ldrdeq	r6, [r0], -r3
   18b4c:	andeq	r6, r0, r4, lsl #18
   18b50:	andeq	r5, r0, r3, asr #14
   18b54:	strdeq	r6, [r0], -r3

00018b58 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18b58:	push	{r4, r5, r6, r7, fp, lr}
   18b5c:	add	fp, sp, #16
   18b60:	sub	sp, sp, #8
   18b64:	mov	r5, r0
   18b68:	mov	r4, r1
   18b6c:	ldr	r0, [r0, #136]	; 0x88
   18b70:	ldr	r1, [r5, #140]	; 0x8c
   18b74:	cmp	r4, #0
   18b78:	sub	r0, r1, r0
   18b7c:	mov	r1, #0
   18b80:	strne	r0, [r4]
   18b84:	ldrh	r2, [r5, #128]	; 0x80
   18b88:	str	r1, [sp, #4]
   18b8c:	add	r0, r0, r2
   18b90:	cmp	r2, #4
   18b94:	mov	r1, r2
   18b98:	rsb	r2, r2, #0
   18b9c:	sub	r0, r0, #1
   18ba0:	movls	r1, #4
   18ba4:	and	r7, r0, r2
   18ba8:	add	r0, sp, #4
   18bac:	mov	r2, r7
   18bb0:	bl	12984 <posix_memalign@plt>
   18bb4:	ldr	r6, [sp, #4]
   18bb8:	cmp	r0, #0
   18bbc:	cmpne	r6, #0
   18bc0:	bne	18c10 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18bc4:	cmp	r6, #0
   18bc8:	beq	18c18 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   18bcc:	ldr	r0, [r5, #184]	; 0xb8
   18bd0:	cmp	r0, #0
   18bd4:	beq	18c10 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18bd8:	add	r0, r5, #188	; 0xbc
   18bdc:	mov	r1, r6
   18be0:	mov	r2, r7
   18be4:	bl	19170 <flatcc_emitter_copy_buffer@@Base>
   18be8:	cmp	r0, #0
   18bec:	bne	18c24 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   18bf0:	ldr	r0, [pc, #56]	; 18c30 <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   18bf4:	ldr	r1, [pc, #56]	; 18c34 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   18bf8:	ldr	r3, [pc, #56]	; 18c38 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   18bfc:	movw	r2, #1926	; 0x786
   18c00:	add	r0, pc, r0
   18c04:	add	r1, pc, r1
   18c08:	add	r3, pc, r3
   18c0c:	bl	129c0 <__assert_fail@plt>
   18c10:	mov	r0, r6
   18c14:	bl	128f4 <free@plt>
   18c18:	mov	r6, #0
   18c1c:	cmp	r4, #0
   18c20:	strne	r6, [r4]
   18c24:	mov	r0, r6
   18c28:	sub	sp, fp, #16
   18c2c:	pop	{r4, r5, r6, r7, fp, pc}
   18c30:			; <UNDEFINED> instruction: 0x000058b6
   18c34:	andeq	r5, r0, r7, asr #12
   18c38:			; <UNDEFINED> instruction: 0x000065b2

00018c3c <flatcc_builder_aligned_alloc@@Base>:
   18c3c:	push	{fp, lr}
   18c40:	mov	fp, sp
   18c44:	sub	sp, sp, #8
   18c48:	mov	r2, r1
   18c4c:	mov	r1, r0
   18c50:	mov	r0, #0
   18c54:	cmp	r1, #4
   18c58:	str	r0, [sp, #4]
   18c5c:	add	r0, sp, #4
   18c60:	movls	r1, #4
   18c64:	bl	12984 <posix_memalign@plt>
   18c68:	mov	r1, r0
   18c6c:	ldr	r0, [sp, #4]
   18c70:	cmp	r1, #0
   18c74:	cmpne	r0, #0
   18c78:	bne	18c84 <flatcc_builder_aligned_alloc@@Base+0x48>
   18c7c:	mov	sp, fp
   18c80:	pop	{fp, pc}
   18c84:	bl	128f4 <free@plt>
   18c88:	mov	r0, #0
   18c8c:	str	r0, [sp, #4]
   18c90:	mov	sp, fp
   18c94:	pop	{fp, pc}

00018c98 <flatcc_builder_aligned_free@@Base>:
   18c98:	b	128f4 <free@plt>

00018c9c <flatcc_builder_get_emit_context@@Base>:
   18c9c:	ldr	r0, [r0, #36]	; 0x24
   18ca0:	bx	lr

00018ca4 <flatcc_emitter_recycle_page@@Base>:
   18ca4:	ldr	r3, [r0]
   18ca8:	mov	r2, r0
   18cac:	mvn	r0, #0
   18cb0:	cmp	r3, r1
   18cb4:	ldrne	r2, [r2, #4]
   18cb8:	cmpne	r2, r1
   18cbc:	bne	18cc4 <flatcc_emitter_recycle_page@@Base+0x20>
   18cc0:	bx	lr
   18cc4:	ldr	r0, [r1, #2944]	; 0xb80
   18cc8:	ldr	r2, [r1, #2948]	; 0xb84
   18ccc:	str	r2, [r0, #2948]	; 0xb84
   18cd0:	ldr	r2, [r1, #2948]	; 0xb84
   18cd4:	str	r0, [r2, #2944]	; 0xb80
   18cd8:	ldr	r0, [r3, #2948]	; 0xb84
   18cdc:	str	r3, [r1, #2944]	; 0xb80
   18ce0:	str	r0, [r1, #2948]	; 0xb84
   18ce4:	str	r1, [r0, #2944]	; 0xb80
   18ce8:	ldr	r0, [r1, #2944]	; 0xb80
   18cec:	str	r1, [r0, #2948]	; 0xb84
   18cf0:	mov	r0, #0
   18cf4:	bx	lr

00018cf8 <flatcc_emitter_reset@@Base>:
   18cf8:	push	{r4, sl, fp, lr}
   18cfc:	add	fp, sp, #8
   18d00:	ldr	r1, [r0]
   18d04:	cmp	r1, #0
   18d08:	beq	18dc0 <flatcc_emitter_reset@@Base+0xc8>
   18d0c:	mov	r4, r0
   18d10:	add	r2, r1, #1472	; 0x5c0
   18d14:	mov	r0, #1472	; 0x5c0
   18d18:	mov	r3, #0
   18d1c:	stmib	r4, {r1, r2}
   18d20:	str	r0, [r4, #12]
   18d24:	str	r2, [r4, #16]
   18d28:	str	r0, [r4, #20]
   18d2c:	movw	r0, #64064	; 0xfa40
   18d30:	movt	r0, #65535	; 0xffff
   18d34:	str	r0, [r1, #2952]	; 0xb88
   18d38:	ldr	r2, [r4, #32]
   18d3c:	ldr	r0, [r4, #24]
   18d40:	cmp	r2, #0
   18d44:	moveq	r2, r0
   18d48:	streq	r0, [r4, #32]
   18d4c:	str	r3, [r4, #24]
   18d50:	add	r2, r2, r2, lsl #1
   18d54:	lsr	r2, r2, #2
   18d58:	add	r0, r2, r0, lsr #2
   18d5c:	str	r0, [r4, #32]
   18d60:	ldr	r2, [r4, #28]
   18d64:	cmp	r2, r0, lsl #1
   18d68:	bls	18dc0 <flatcc_emitter_reset@@Base+0xc8>
   18d6c:	mov	r2, r1
   18d70:	ldr	r0, [r2, #2944]!	; 0xb80
   18d74:	cmp	r0, r1
   18d78:	beq	18dc0 <flatcc_emitter_reset@@Base+0xc8>
   18d7c:	ldr	r3, [r0, #2944]	; 0xb80
   18d80:	str	r3, [r2]
   18d84:	ldr	r2, [r0, #2944]	; 0xb80
   18d88:	str	r1, [r2, #2948]	; 0xb84
   18d8c:	bl	128f4 <free@plt>
   18d90:	ldr	r0, [r4, #28]
   18d94:	ldr	r1, [r4, #32]
   18d98:	sub	r0, r0, #2944	; 0xb80
   18d9c:	cmp	r0, r1, lsl #1
   18da0:	str	r0, [r4, #28]
   18da4:	popls	{r4, sl, fp, pc}
   18da8:	ldr	r1, [r4, #4]
   18dac:	ldr	r3, [r4]
   18db0:	mov	r2, r1
   18db4:	ldr	r0, [r2, #2944]!	; 0xb80
   18db8:	cmp	r0, r3
   18dbc:	bne	18d7c <flatcc_emitter_reset@@Base+0x84>
   18dc0:	pop	{r4, sl, fp, pc}

00018dc4 <flatcc_emitter_clear@@Base>:
   18dc4:	push	{r4, r5, r6, sl, fp, lr}
   18dc8:	add	fp, sp, #16
   18dcc:	ldr	r5, [r0]
   18dd0:	cmp	r5, #0
   18dd4:	popeq	{r4, r5, r6, sl, fp, pc}
   18dd8:	mov	r4, r0
   18ddc:	ldr	r0, [r5, #2948]	; 0xb84
   18de0:	mov	r6, #0
   18de4:	str	r6, [r0, #2944]	; 0xb80
   18de8:	b	18df8 <flatcc_emitter_clear@@Base+0x34>
   18dec:	mov	r5, r0
   18df0:	ldr	r0, [r0, #2948]	; 0xb84
   18df4:	bl	128f4 <free@plt>
   18df8:	ldr	r0, [r5, #2944]	; 0xb80
   18dfc:	cmp	r0, #0
   18e00:	bne	18dec <flatcc_emitter_clear@@Base+0x28>
   18e04:	mov	r0, r5
   18e08:	bl	128f4 <free@plt>
   18e0c:	vmov.i32	q8, #0	; 0x00000000
   18e10:	add	r0, r4, #16
   18e14:	vst1.32	{d16-d17}, [r0]
   18e18:	mov	r0, #32
   18e1c:	vst1.32	{d16-d17}, [r4], r0
   18e20:	str	r6, [r4]
   18e24:	pop	{r4, r5, r6, sl, fp, pc}

00018e28 <flatcc_emitter@@Base>:
   18e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e2c:	add	fp, sp, #28
   18e30:	sub	sp, sp, #4
   18e34:	mov	r6, r0
   18e38:	mov	r7, r1
   18e3c:	ldr	r0, [r0, #24]
   18e40:	ldr	r1, [fp, #8]
   18e44:	mov	r4, r2
   18e48:	cmn	r3, #1
   18e4c:	mov	r9, r6
   18e50:	add	r0, r0, r1
   18e54:	str	r0, [r6, #24]
   18e58:	ble	18f98 <flatcc_emitter@@Base+0x170>
   18e5c:	ldr	r0, [r9, #20]!
   18e60:	cmp	r0, r1
   18e64:	bcs	1910c <flatcc_emitter@@Base+0x2e4>
   18e68:	mov	r8, #0
   18e6c:	cmp	r4, #0
   18e70:	beq	19164 <flatcc_emitter@@Base+0x33c>
   18e74:	movw	sl, #64064	; 0xfa40
   18e78:	movt	sl, #65535	; 0xffff
   18e7c:	ldr	r8, [r7, #4]
   18e80:	cmp	r8, #0
   18e84:	beq	18f88 <flatcc_emitter@@Base+0x160>
   18e88:	ldr	r9, [r7]
   18e8c:	cmp	r8, r0
   18e90:	mov	r5, r8
   18e94:	bls	18f54 <flatcc_emitter@@Base+0x12c>
   18e98:	mov	r5, r0
   18e9c:	cmp	r5, #0
   18ea0:	bne	18f54 <flatcc_emitter@@Base+0x12c>
   18ea4:	ldr	r5, [r6, #4]
   18ea8:	cmp	r5, #0
   18eac:	beq	18ec0 <flatcc_emitter@@Base+0x98>
   18eb0:	ldr	r0, [r5, #2944]	; 0xb80
   18eb4:	ldr	r1, [r6]
   18eb8:	cmp	r0, r1
   18ebc:	bne	18ef8 <flatcc_emitter@@Base+0xd0>
   18ec0:	movw	r0, #2956	; 0xb8c
   18ec4:	bl	12948 <malloc@plt>
   18ec8:	cmp	r0, #0
   18ecc:	beq	1911c <flatcc_emitter@@Base+0x2f4>
   18ed0:	ldr	r1, [r6, #28]
   18ed4:	cmp	r5, #0
   18ed8:	add	r1, r1, #2944	; 0xb80
   18edc:	str	r1, [r6, #28]
   18ee0:	beq	18f24 <flatcc_emitter@@Base+0xfc>
   18ee4:	ldr	r1, [r6]
   18ee8:	str	r1, [r0, #2944]	; 0xb80
   18eec:	str	r5, [r0, #2948]	; 0xb84
   18ef0:	str	r0, [r1, #2948]	; 0xb84
   18ef4:	str	r0, [r5, #2944]	; 0xb80
   18ef8:	mov	r5, #2944	; 0xb80
   18efc:	str	r0, [r6, #4]
   18f00:	str	r0, [r6, #16]
   18f04:	str	r5, [r6, #20]
   18f08:	ldr	r1, [r0, #2948]	; 0xb84
   18f0c:	ldr	r1, [r1, #2952]	; 0xb88
   18f10:	add	r1, r1, #2944	; 0xb80
   18f14:	str	r1, [r0, #2952]	; 0xb88
   18f18:	cmp	r8, r5
   18f1c:	bhi	18e9c <flatcc_emitter@@Base+0x74>
   18f20:	b	18f50 <flatcc_emitter@@Base+0x128>
   18f24:	add	r1, r0, #1472	; 0x5c0
   18f28:	mov	r5, #1472	; 0x5c0
   18f2c:	str	r0, [r6]
   18f30:	stmib	r6, {r0, r1, r5}
   18f34:	str	r1, [r6, #16]
   18f38:	str	r5, [r6, #20]
   18f3c:	str	r0, [r0, #2944]	; 0xb80
   18f40:	str	r0, [r0, #2948]	; 0xb84
   18f44:	str	sl, [r0, #2952]	; 0xb88
   18f48:	cmp	r8, r5
   18f4c:	bhi	18e9c <flatcc_emitter@@Base+0x74>
   18f50:	mov	r5, r8
   18f54:	ldr	r0, [r6, #16]
   18f58:	mov	r1, r9
   18f5c:	mov	r2, r5
   18f60:	bl	12900 <memcpy@plt>
   18f64:	ldr	r0, [r6, #16]
   18f68:	ldr	r1, [r6, #20]
   18f6c:	add	r9, r9, r5
   18f70:	subs	r8, r8, r5
   18f74:	add	r2, r0, r5
   18f78:	sub	r0, r1, r5
   18f7c:	str	r2, [r6, #16]
   18f80:	str	r0, [r6, #20]
   18f84:	bne	18e8c <flatcc_emitter@@Base+0x64>
   18f88:	subs	r4, r4, #1
   18f8c:	add	r7, r7, #8
   18f90:	bne	18e7c <flatcc_emitter@@Base+0x54>
   18f94:	b	19104 <flatcc_emitter@@Base+0x2dc>
   18f98:	ldr	r0, [r9, #12]!
   18f9c:	cmp	r0, r1
   18fa0:	bcs	19124 <flatcc_emitter@@Base+0x2fc>
   18fa4:	mov	r8, #0
   18fa8:	cmp	r4, #0
   18fac:	beq	19164 <flatcc_emitter@@Base+0x33c>
   18fb0:	add	r0, r7, r4, lsl #3
   18fb4:	movw	sl, #2952	; 0xb88
   18fb8:	ldr	r8, [r0, #-4]
   18fbc:	sub	r1, r0, #8
   18fc0:	str	r1, [sp]
   18fc4:	cmp	r8, #0
   18fc8:	beq	190f8 <flatcc_emitter@@Base+0x2d0>
   18fcc:	ldr	r0, [sp]
   18fd0:	ldr	r0, [r0]
   18fd4:	add	r7, r0, r8
   18fd8:	ldr	r1, [r9]
   18fdc:	cmp	r8, r1
   18fe0:	bls	190c8 <flatcc_emitter@@Base+0x2a0>
   18fe4:	cmp	r1, #0
   18fe8:	mov	r5, r1
   18fec:	bne	190cc <flatcc_emitter@@Base+0x2a4>
   18ff0:	ldr	r5, [r6]
   18ff4:	cmp	r5, #0
   18ff8:	beq	19024 <flatcc_emitter@@Base+0x1fc>
   18ffc:	ldr	r0, [r5, #2948]	; 0xb84
   19000:	ldr	r1, [r6, #4]
   19004:	cmp	r0, r1
   19008:	beq	19024 <flatcc_emitter@@Base+0x1fc>
   1900c:	ldr	r1, [r5, #2952]	; 0xb88
   19010:	mov	r2, r0
   19014:	sub	r1, r1, #2944	; 0xb80
   19018:	str	r1, [r2, #2952]!	; 0xb88
   1901c:	str	r0, [r6]
   19020:	b	19064 <flatcc_emitter@@Base+0x23c>
   19024:	movw	r0, #2956	; 0xb8c
   19028:	bl	12948 <malloc@plt>
   1902c:	cmp	r0, #0
   19030:	beq	1911c <flatcc_emitter@@Base+0x2f4>
   19034:	ldr	r1, [r6, #28]
   19038:	cmp	r5, #0
   1903c:	add	r1, r1, #2944	; 0xb80
   19040:	str	r1, [r6, #28]
   19044:	beq	19090 <flatcc_emitter@@Base+0x268>
   19048:	ldr	r1, [r6, #4]
   1904c:	add	r2, r0, sl
   19050:	str	r5, [r0, #2944]	; 0xb80
   19054:	str	r1, [r0, #2948]	; 0xb84
   19058:	str	r0, [r5, #2948]	; 0xb84
   1905c:	str	r0, [r1, #2944]	; 0xb80
   19060:	str	r0, [r6]
   19064:	add	r3, r0, #2944	; 0xb80
   19068:	mov	r1, #2944	; 0xb80
   1906c:	str	r3, [r6, #8]
   19070:	str	r1, [r6, #12]
   19074:	ldr	r0, [r0, #2944]	; 0xb80
   19078:	ldr	r0, [r0, #2952]	; 0xb88
   1907c:	sub	r0, r0, #2944	; 0xb80
   19080:	str	r0, [r2]
   19084:	cmp	r8, r1
   19088:	bhi	18fe4 <flatcc_emitter@@Base+0x1bc>
   1908c:	b	190c8 <flatcc_emitter@@Base+0x2a0>
   19090:	add	r2, r0, #1472	; 0x5c0
   19094:	mov	r1, #1472	; 0x5c0
   19098:	str	r0, [r6]
   1909c:	stmib	r6, {r0, r2}
   190a0:	str	r1, [r6, #12]
   190a4:	str	r2, [r6, #16]
   190a8:	movw	r2, #64064	; 0xfa40
   190ac:	str	r1, [r6, #20]
   190b0:	str	r0, [r0, #2944]	; 0xb80
   190b4:	str	r0, [r0, #2948]	; 0xb84
   190b8:	movt	r2, #65535	; 0xffff
   190bc:	str	r2, [r0, #2952]	; 0xb88
   190c0:	cmp	r8, r1
   190c4:	bhi	18fe4 <flatcc_emitter@@Base+0x1bc>
   190c8:	mov	r5, r8
   190cc:	sub	r0, r1, r5
   190d0:	sub	r7, r7, r5
   190d4:	mov	r2, r5
   190d8:	str	r0, [r6, #12]
   190dc:	mov	r1, r7
   190e0:	ldr	r0, [r6, #8]
   190e4:	sub	r0, r0, r5
   190e8:	str	r0, [r6, #8]
   190ec:	bl	12900 <memcpy@plt>
   190f0:	subs	r8, r8, r5
   190f4:	bne	18fd8 <flatcc_emitter@@Base+0x1b0>
   190f8:	ldr	r0, [sp]
   190fc:	subs	r4, r4, #1
   19100:	bne	18fb8 <flatcc_emitter@@Base+0x190>
   19104:	mov	r8, #0
   19108:	b	19164 <flatcc_emitter@@Base+0x33c>
   1910c:	ldr	r5, [r6, #16]
   19110:	add	r2, r5, r1
   19114:	str	r2, [r6, #16]
   19118:	b	19130 <flatcc_emitter@@Base+0x308>
   1911c:	mvn	r8, #0
   19120:	b	19164 <flatcc_emitter@@Base+0x33c>
   19124:	ldr	r2, [r6, #8]
   19128:	sub	r5, r2, r1
   1912c:	str	r5, [r6, #8]
   19130:	sub	r0, r0, r1
   19134:	mov	r8, #0
   19138:	cmp	r4, #0
   1913c:	str	r0, [r9]
   19140:	beq	19164 <flatcc_emitter@@Base+0x33c>
   19144:	ldm	r7, {r1, r2}
   19148:	mov	r0, r5
   1914c:	bl	12900 <memcpy@plt>
   19150:	ldr	r0, [r7, #4]
   19154:	add	r7, r7, #8
   19158:	subs	r4, r4, #1
   1915c:	add	r5, r5, r0
   19160:	bne	19144 <flatcc_emitter@@Base+0x31c>
   19164:	mov	r0, r8
   19168:	sub	sp, fp, #28
   1916c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019170 <flatcc_emitter_copy_buffer@@Base>:
   19170:	push	{r4, r5, r6, sl, fp, lr}
   19174:	add	fp, sp, #16
   19178:	mov	r3, r2
   1917c:	ldr	r2, [r0, #24]
   19180:	mov	r5, #0
   19184:	cmp	r2, r3
   19188:	bhi	19210 <flatcc_emitter_copy_buffer@@Base+0xa0>
   1918c:	mov	r4, r0
   19190:	ldr	r0, [r0]
   19194:	cmp	r0, #0
   19198:	beq	19210 <flatcc_emitter_copy_buffer@@Base+0xa0>
   1919c:	mov	r6, r1
   191a0:	ldr	r1, [r4, #4]
   191a4:	cmp	r0, r1
   191a8:	beq	19218 <flatcc_emitter_copy_buffer@@Base+0xa8>
   191ac:	ldr	r0, [r4, #12]
   191b0:	ldr	r1, [r4, #8]
   191b4:	rsb	r5, r0, #2944	; 0xb80
   191b8:	mov	r0, r6
   191bc:	mov	r2, r5
   191c0:	bl	12900 <memcpy@plt>
   191c4:	ldm	r4, {r0, r1}
   191c8:	add	r5, r6, r5
   191cc:	ldr	r6, [r0, #2944]	; 0xb80
   191d0:	cmp	r6, r1
   191d4:	beq	191fc <flatcc_emitter_copy_buffer@@Base+0x8c>
   191d8:	mov	r0, r5
   191dc:	mov	r1, r6
   191e0:	mov	r2, #2944	; 0xb80
   191e4:	bl	12900 <memcpy@plt>
   191e8:	ldr	r6, [r6, #2944]	; 0xb80
   191ec:	ldr	r0, [r4, #4]
   191f0:	add	r5, r5, #2944	; 0xb80
   191f4:	cmp	r6, r0
   191f8:	bne	191d8 <flatcc_emitter_copy_buffer@@Base+0x68>
   191fc:	ldr	r0, [r4, #20]
   19200:	mov	r1, r6
   19204:	rsb	r2, r0, #2944	; 0xb80
   19208:	mov	r0, r5
   1920c:	bl	12900 <memcpy@plt>
   19210:	mov	r0, r5
   19214:	pop	{r4, r5, r6, sl, fp, pc}
   19218:	ldr	r1, [r4, #8]
   1921c:	mov	r0, r6
   19220:	bl	12900 <memcpy@plt>
   19224:	mov	r0, r6
   19228:	pop	{r4, r5, r6, sl, fp, pc}
   1922c:	andeq	r0, r0, r0

00019230 <grisu3_diy_fp_encode_double@@Base>:
   19230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19234:	add	fp, sp, #28
   19238:	sub	sp, sp, #12
   1923c:	ldr	lr, [fp, #8]
   19240:	orr	r7, r0, r1
   19244:	cmp	lr, #0
   19248:	movwne	lr, #4
   1924c:	cmp	r7, #0
   19250:	beq	19638 <grisu3_diy_fp_encode_double@@Base+0x408>
   19254:	mov	ip, #0
   19258:	mov	r5, #0
   1925c:	cmp	ip, r1, lsr #22
   19260:	bne	19280 <grisu3_diy_fp_encode_double@@Base+0x50>
   19264:	mov	ip, #0
   19268:	lsl	r1, r1, #10
   1926c:	sub	ip, ip, #10
   19270:	orr	r1, r1, r0, lsr #22
   19274:	lsl	r0, r0, #10
   19278:	cmp	r1, #4194304	; 0x400000
   1927c:	bcc	19268 <grisu3_diy_fp_encode_double@@Base+0x38>
   19280:	sub	r6, r2, r3
   19284:	mvn	r2, #0
   19288:	cmp	r1, #0
   1928c:	blt	192b4 <grisu3_diy_fp_encode_double@@Base+0x84>
   19290:	lsl	r1, r1, #1
   19294:	lsl	r4, r0, #1
   19298:	sub	ip, ip, #1
   1929c:	orr	r1, r1, r0, lsr #31
   192a0:	subs	r0, r2, r0, lsl #1
   192a4:	sbcs	r0, r2, r1
   192a8:	mov	r0, r4
   192ac:	blt	19290 <grisu3_diy_fp_encode_double@@Base+0x60>
   192b0:	b	192b8 <grisu3_diy_fp_encode_double@@Base+0x88>
   192b4:	mov	r4, r0
   192b8:	cmn	r6, #348	; 0x15c
   192bc:	blt	19658 <grisu3_diy_fp_encode_double@@Base+0x428>
   192c0:	cmp	r6, #348	; 0x15c
   192c4:	bge	19678 <grisu3_diy_fp_encode_double@@Base+0x448>
   192c8:	ldr	r9, [pc, #1064]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   192cc:	add	r0, r6, #348	; 0x15c
   192d0:	asr	r5, r0, #31
   192d4:	add	r0, r0, r5, lsr #29
   192d8:	mvn	r5, #15
   192dc:	and	r0, r5, r0, lsl #1
   192e0:	add	r9, pc, r9
   192e4:	ldr	r5, [r9, r0]!
   192e8:	ldrsh	r0, [r9, #10]
   192ec:	cmp	r6, r0
   192f0:	blt	19698 <grisu3_diy_fp_encode_double@@Base+0x468>
   192f4:	add	r7, r0, #8
   192f8:	cmp	r7, r6
   192fc:	ble	196b8 <grisu3_diy_fp_encode_double@@Base+0x488>
   19300:	rsb	r7, ip, #0
   19304:	cmp	r6, r0
   19308:	lsl	r8, lr, r7
   1930c:	beq	19398 <grisu3_diy_fp_encode_double@@Base+0x168>
   19310:	mvn	r0, r0
   19314:	str	r8, [sp, #4]
   19318:	str	r3, [sp, #8]
   1931c:	add	sl, r6, r0
   19320:	cmp	sl, #7
   19324:	bcs	196d8 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   19328:	ldr	r0, [pc, #972]	; 196fc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   1932c:	add	r0, pc, r0
   19330:	ldr	r7, [r0, sl, lsl #4]!
   19334:	ldr	r8, [r0, #4]
   19338:	ldr	r0, [r0, #8]
   1933c:	umull	lr, r6, r7, r1
   19340:	str	r0, [sp]
   19344:	umull	r3, r0, r8, r4
   19348:	umaal	r6, r0, r8, r1
   1934c:	umull	r1, r4, r7, r4
   19350:	ldr	r8, [sp, #4]
   19354:	mov	r1, #0
   19358:	adds	r7, lr, r4
   1935c:	adc	r1, r1, #0
   19360:	adds	r3, r7, r3
   19364:	adc	r1, r1, #0
   19368:	adds	r3, r3, #-2147483648	; 0x80000000
   1936c:	adc	r1, r1, #0
   19370:	adds	r4, r6, r1
   19374:	adc	r1, r0, #0
   19378:	ldr	r0, [sp, #8]
   1937c:	add	r0, r0, sl
   19380:	add	r0, r0, #1
   19384:	cmp	r0, #19
   19388:	ldr	r0, [sp]
   1938c:	addgt	r8, r8, #4
   19390:	add	r0, ip, r0
   19394:	add	ip, r0, #64	; 0x40
   19398:	ldr	r0, [r9, #4]
   1939c:	umull	r3, r6, r4, r5
   193a0:	mov	lr, #0
   193a4:	umull	r3, r7, r1, r5
   193a8:	adds	r3, r3, r6
   193ac:	adc	r6, lr, #0
   193b0:	umull	r4, r5, r4, r0
   193b4:	adds	r3, r3, r4
   193b8:	umaal	r7, r5, r1, r0
   193bc:	adc	r4, r6, #0
   193c0:	adds	r3, r3, #-2147483648	; 0x80000000
   193c4:	mov	r6, #9
   193c8:	adc	r3, r4, #0
   193cc:	adds	r4, r7, r3
   193d0:	adc	r3, r5, #0
   193d4:	cmp	r8, #0
   193d8:	orr	r0, r4, r3
   193dc:	movweq	r6, #8
   193e0:	cmp	r0, #0
   193e4:	beq	19638 <grisu3_diy_fp_encode_double@@Base+0x408>
   193e8:	ldrsh	r0, [r9, #8]
   193ec:	cmp	lr, r3, lsr #22
   193f0:	add	r0, r0, ip
   193f4:	add	r5, r0, #64	; 0x40
   193f8:	bne	19420 <grisu3_diy_fp_encode_double@@Base+0x1f0>
   193fc:	mov	lr, #0
   19400:	mov	r1, r5
   19404:	lsl	r0, r3, #10
   19408:	sub	r1, r1, #10
   1940c:	orr	r3, r0, r4, lsr #22
   19410:	lsl	r4, r4, #10
   19414:	cmp	r3, #4194304	; 0x400000
   19418:	bcc	19404 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   1941c:	b	19424 <grisu3_diy_fp_encode_double@@Base+0x1f4>
   19420:	mov	r1, r5
   19424:	subs	r0, r2, r4
   19428:	add	r7, r6, r8
   1942c:	sbcs	r0, r2, r3
   19430:	bge	19458 <grisu3_diy_fp_encode_double@@Base+0x228>
   19434:	lsl	r0, r3, #1
   19438:	subs	r6, r2, r4, lsl #1
   1943c:	sub	r1, r1, #1
   19440:	orr	r3, r0, r4, lsr #31
   19444:	lsl	r0, r4, #1
   19448:	sbcs	r6, r2, r3
   1944c:	mov	r4, r0
   19450:	blt	19434 <grisu3_diy_fp_encode_double@@Base+0x204>
   19454:	b	1945c <grisu3_diy_fp_encode_double@@Base+0x22c>
   19458:	mov	r0, r4
   1945c:	movw	ip, #64462	; 0xfbce
   19460:	sub	r2, r5, r1
   19464:	mov	r5, #0
   19468:	movt	ip, #65535	; 0xffff
   1946c:	lsl	lr, r7, r2
   19470:	sub	r2, ip, #1
   19474:	cmp	r1, r2
   19478:	bgt	194cc <grisu3_diy_fp_encode_double@@Base+0x29c>
   1947c:	mvn	r2, #1136	; 0x470
   19480:	mov	r5, #64	; 0x40
   19484:	cmp	r1, r2
   19488:	blt	19498 <grisu3_diy_fp_encode_double@@Base+0x268>
   1948c:	sub	r5, ip, r1
   19490:	cmp	r5, #61	; 0x3d
   19494:	blt	194cc <grisu3_diy_fp_encode_double@@Base+0x29c>
   19498:	sub	r2, r5, #62	; 0x3e
   1949c:	mov	r4, #9
   194a0:	add	lr, r4, lr, asr r2
   194a4:	lsr	r0, r0, r2
   194a8:	rsb	r4, r5, #94	; 0x5e
   194ac:	add	r1, r2, r1
   194b0:	orr	r0, r0, r3, lsl r4
   194b4:	sub	r4, r5, #94	; 0x5e
   194b8:	mov	r5, #62	; 0x3e
   194bc:	cmp	r4, #0
   194c0:	lsrge	r0, r3, r4
   194c4:	lsr	r3, r3, r2
   194c8:	movwge	r3, #0
   194cc:	lsr	r2, r0, r5
   194d0:	rsb	r4, r5, #32
   194d4:	lsr	r6, r3, r5
   194d8:	add	r1, r1, r5
   194dc:	orr	r2, r2, r3, lsl r4
   194e0:	sub	r4, r5, #32
   194e4:	cmp	r4, #0
   194e8:	lsrge	r2, r3, r4
   194ec:	sub	r3, r5, #1
   194f0:	mov	r4, #1
   194f4:	movwge	r6, #0
   194f8:	lsl	r4, r4, r3
   194fc:	sub	r3, r5, #33	; 0x21
   19500:	cmp	r3, #0
   19504:	movwge	r4, #0
   19508:	add	sl, lr, r4, lsl #3
   1950c:	cmp	r5, sl
   19510:	blt	19530 <grisu3_diy_fp_encode_double@@Base+0x300>
   19514:	adds	r2, r2, #1
   19518:	adc	r6, r6, #0
   1951c:	tst	r6, #2097152	; 0x200000
   19520:	beq	19530 <grisu3_diy_fp_encode_double@@Base+0x300>
   19524:	lsrs	r6, r6, #1
   19528:	add	r1, r1, #1
   1952c:	rrx	r2, r2
   19530:	and	r0, r4, r0
   19534:	cmp	r6, #2097152	; 0x200000
   19538:	bcc	1955c <grisu3_diy_fp_encode_double@@Base+0x32c>
   1953c:	mov	r3, #0
   19540:	lsrs	r7, r6, #1
   19544:	add	r1, r1, #1
   19548:	rrx	r2, r2
   1954c:	cmp	r3, r6, lsr #22
   19550:	mov	r6, r7
   19554:	bne	19540 <grisu3_diy_fp_encode_double@@Base+0x310>
   19558:	b	19560 <grisu3_diy_fp_encode_double@@Base+0x330>
   1955c:	mov	r7, r6
   19560:	ldr	r8, [fp, #12]
   19564:	lsl	r9, r4, #3
   19568:	lsl	r0, r0, #3
   1956c:	vmov.i32	d16, #0	; 0x00000000
   19570:	cmp	r1, ip
   19574:	blt	1960c <grisu3_diy_fp_encode_double@@Base+0x3dc>
   19578:	and	r3, r7, #1048576	; 0x100000
   1957c:	mov	r4, #1
   19580:	cmp	r1, ip
   19584:	eor	r5, r4, r3, lsr #20
   19588:	beq	195cc <grisu3_diy_fp_encode_double@@Base+0x39c>
   1958c:	cmp	r3, #0
   19590:	bne	195cc <grisu3_diy_fp_encode_double@@Base+0x39c>
   19594:	mov	r3, #1
   19598:	lsl	r4, r7, #1
   1959c:	and	r7, r7, #524288	; 0x80000
   195a0:	cmn	r1, #1072	; 0x430
   195a4:	orr	r6, r4, r2, lsr #31
   195a8:	eor	r5, r3, r7, lsr #19
   195ac:	lsl	r2, r2, #1
   195b0:	sub	r4, r1, #1
   195b4:	blt	195d4 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   195b8:	cmp	r7, #0
   195bc:	mov	r7, r6
   195c0:	mov	r1, r4
   195c4:	beq	19598 <grisu3_diy_fp_encode_double@@Base+0x368>
   195c8:	b	195d4 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   195cc:	mov	r4, r1
   195d0:	mov	r6, r7
   195d4:	cmp	r4, ip
   195d8:	bne	195ec <grisu3_diy_fp_encode_double@@Base+0x3bc>
   195dc:	mov	r1, #0
   195e0:	cmp	r5, #0
   195e4:	mov	r3, #0
   195e8:	bne	195fc <grisu3_diy_fp_encode_double@@Base+0x3cc>
   195ec:	movw	r1, #0
   195f0:	movt	r1, #17200	; 0x4330
   195f4:	add	r3, r1, r4, lsl #20
   195f8:	mov	r1, #0
   195fc:	bfc	r6, #20, #12
   19600:	orr	r1, r1, r2
   19604:	orr	r2, r3, r6
   19608:	vmov	d16, r1, r2
   1960c:	cmp	r0, sl
   19610:	mov	r2, #0
   19614:	sub	r3, r9, lr
   19618:	mov	r1, #0
   1961c:	vstr	d16, [r8]
   19620:	movwge	r2, #1
   19624:	cmp	r3, r0
   19628:	movwge	r1, #1
   1962c:	orr	r0, r2, r1
   19630:	sub	sp, fp, #28
   19634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19638:	ldr	r0, [pc, #252]	; 1973c <grisu3_diy_fp_encode_double@@Base+0x50c>
   1963c:	ldr	r1, [pc, #252]	; 19740 <grisu3_diy_fp_encode_double@@Base+0x510>
   19640:	ldr	r3, [pc, #252]	; 19744 <grisu3_diy_fp_encode_double@@Base+0x514>
   19644:	mov	r2, #260	; 0x104
   19648:	add	r0, pc, r0
   1964c:	add	r1, pc, r1
   19650:	add	r3, pc, r3
   19654:	bl	129c0 <__assert_fail@plt>
   19658:	ldr	r0, [pc, #160]	; 19700 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   1965c:	ldr	r1, [pc, #160]	; 19704 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   19660:	ldr	r3, [pc, #160]	; 19708 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   19664:	mov	r2, #80	; 0x50
   19668:	add	r0, pc, r0
   1966c:	add	r1, pc, r1
   19670:	add	r3, pc, r3
   19674:	bl	129c0 <__assert_fail@plt>
   19678:	ldr	r0, [pc, #140]	; 1970c <grisu3_diy_fp_encode_double@@Base+0x4dc>
   1967c:	ldr	r1, [pc, #140]	; 19710 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   19680:	ldr	r3, [pc, #140]	; 19714 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   19684:	mov	r2, #81	; 0x51
   19688:	add	r0, pc, r0
   1968c:	add	r1, pc, r1
   19690:	add	r3, pc, r3
   19694:	bl	129c0 <__assert_fail@plt>
   19698:	ldr	r0, [pc, #120]	; 19718 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   1969c:	ldr	r1, [pc, #120]	; 1971c <grisu3_diy_fp_encode_double@@Base+0x4ec>
   196a0:	ldr	r3, [pc, #120]	; 19720 <grisu3_diy_fp_encode_double@@Base+0x4f0>
   196a4:	mov	r2, #88	; 0x58
   196a8:	add	r0, pc, r0
   196ac:	add	r1, pc, r1
   196b0:	add	r3, pc, r3
   196b4:	bl	129c0 <__assert_fail@plt>
   196b8:	ldr	r0, [pc, #100]	; 19724 <grisu3_diy_fp_encode_double@@Base+0x4f4>
   196bc:	ldr	r1, [pc, #100]	; 19728 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   196c0:	ldr	r3, [pc, #100]	; 1972c <grisu3_diy_fp_encode_double@@Base+0x4fc>
   196c4:	mov	r2, #89	; 0x59
   196c8:	add	r0, pc, r0
   196cc:	add	r1, pc, r1
   196d0:	add	r3, pc, r3
   196d4:	bl	129c0 <__assert_fail@plt>
   196d8:	ldr	r0, [pc, #80]	; 19730 <grisu3_diy_fp_encode_double@@Base+0x500>
   196dc:	ldr	r1, [pc, #80]	; 19734 <grisu3_diy_fp_encode_double@@Base+0x504>
   196e0:	ldr	r3, [pc, #80]	; 19738 <grisu3_diy_fp_encode_double@@Base+0x508>
   196e4:	mov	r2, #185	; 0xb9
   196e8:	add	r0, pc, r0
   196ec:	add	r1, pc, r1
   196f0:	add	r3, pc, r3
   196f4:	bl	129c0 <__assert_fail@plt>
   196f8:	andeq	r6, r0, r0, lsr r2
   196fc:	andeq	r6, r0, r4, ror r1
   19700:	andeq	r6, r0, r4, asr ip
   19704:	andeq	r6, r0, r0, lsr r6
   19708:	andeq	r6, r0, fp, ror #24
   1970c:	andeq	r6, r0, ip, lsl #25
   19710:	andeq	r6, r0, r0, lsl r6
   19714:	andeq	r6, r0, fp, asr #24
   19718:	muleq	r0, r7, ip
   1971c:	strdeq	r6, [r0], -r0
   19720:	andeq	r6, r0, fp, lsr #24
   19724:	andeq	r6, r0, r6, lsl #25
   19728:	ldrdeq	r6, [r0], -r0
   1972c:	andeq	r6, r0, fp, lsl #24
   19730:	muleq	r0, r8, r5
   19734:			; <UNDEFINED> instruction: 0x000065b0
   19738:	andeq	r6, r0, sl, lsl r6
   1973c:	andeq	r6, r0, r5, asr #23
   19740:	andeq	r6, r0, sl, asr #23
   19744:	andeq	r6, r0, r3, lsr ip

00019748 <flatcc_json_parser_error_string@@Base>:
   19748:	cmp	r0, #34	; 0x22
   1974c:	ldrhi	r0, [pc, #24]	; 1976c <flatcc_json_parser_error_string@@Base+0x24>
   19750:	addhi	r0, pc, r0
   19754:	bxhi	lr
   19758:	ldr	r1, [pc, #8]	; 19768 <flatcc_json_parser_error_string@@Base+0x20>
   1975c:	add	r1, pc, r1
   19760:	ldr	r0, [r1, r0, lsl #2]
   19764:	bx	lr
   19768:	andeq	r7, r1, ip, lsl r7
   1976c:	andeq	r6, r0, r0, lsl #17

00019770 <flatcc_json_parser_set_error@@Base>:
   19770:	mov	ip, r2
   19774:	ldr	r2, [r0, #24]
   19778:	cmp	r2, #0
   1977c:	beq	19788 <flatcc_json_parser_set_error@@Base+0x18>
   19780:	mov	r0, ip
   19784:	bx	lr
   19788:	str	r1, [r0, #36]	; 0x24
   1978c:	add	r1, r1, #1
   19790:	ldr	r2, [r0, #4]
   19794:	sub	r1, r1, r2
   19798:	str	r1, [r0, #20]
   1979c:	str	r3, [r0, #24]
   197a0:	mov	r0, ip
   197a4:	bx	lr

000197a8 <flatcc_json_parser_string_part@@Base>:
   197a8:	cmp	r1, r2
   197ac:	beq	197d8 <flatcc_json_parser_string_part@@Base+0x30>
   197b0:	ldrb	r3, [r1]
   197b4:	cmp	r3, #32
   197b8:	bcc	1980c <flatcc_json_parser_string_part@@Base+0x64>
   197bc:	cmp	r3, #34	; 0x22
   197c0:	cmpne	r3, #92	; 0x5c
   197c4:	beq	19804 <flatcc_json_parser_string_part@@Base+0x5c>
   197c8:	add	r1, r1, #1
   197cc:	cmp	r2, r1
   197d0:	bne	197b0 <flatcc_json_parser_string_part@@Base+0x8>
   197d4:	mov	r1, r2
   197d8:	ldr	r3, [r0, #24]
   197dc:	cmp	r3, #0
   197e0:	bne	19800 <flatcc_json_parser_string_part@@Base+0x58>
   197e4:	mov	ip, #20
   197e8:	str	r1, [r0, #36]	; 0x24
   197ec:	add	r1, r1, #1
   197f0:	ldr	r3, [r0, #4]
   197f4:	sub	r1, r1, r3
   197f8:	str	r1, [r0, #20]
   197fc:	str	ip, [r0, #24]
   19800:	mov	r1, r2
   19804:	mov	r0, r1
   19808:	bx	lr
   1980c:	ldr	r3, [r0, #24]
   19810:	cmp	r3, #0
   19814:	bne	19800 <flatcc_json_parser_string_part@@Base+0x58>
   19818:	mov	ip, #17
   1981c:	b	197e8 <flatcc_json_parser_string_part@@Base+0x40>

00019820 <flatcc_json_parser_space_ext@@Base>:
   19820:	mov	ip, r2
   19824:	cmp	r1, r2
   19828:	bne	19908 <flatcc_json_parser_space_ext@@Base+0xe8>
   1982c:	b	19930 <flatcc_json_parser_space_ext@@Base+0x110>
   19830:	add	r1, r1, #1
   19834:	str	r1, [r0, #4]
   19838:	ldr	r2, [r0, #16]
   1983c:	add	r2, r2, #1
   19840:	str	r2, [r0, #16]
   19844:	cmp	r1, ip
   19848:	bne	1985c <flatcc_json_parser_space_ext@@Base+0x3c>
   1984c:	b	19930 <flatcc_json_parser_space_ext@@Base+0x110>
   19850:	add	r1, r1, #1
   19854:	cmp	r1, ip
   19858:	beq	19930 <flatcc_json_parser_space_ext@@Base+0x110>
   1985c:	ldrb	r3, [r1]
   19860:	cmp	r3, #32
   19864:	movhi	r0, r1
   19868:	bxhi	lr
   1986c:	sub	r3, r3, #9
   19870:	cmp	r3, #23
   19874:	bhi	19924 <flatcc_json_parser_space_ext@@Base+0x104>
   19878:	add	r2, pc, #4
   1987c:	ldr	r3, [r2, r3, lsl #2]
   19880:	add	pc, r2, r3
   19884:			; <UNDEFINED> instruction: 0xffffffcc
   19888:			; <UNDEFINED> instruction: 0xffffffac
   1988c:	andeq	r0, r0, r0, lsr #1
   19890:	andeq	r0, r0, r0, lsr #1
   19894:	andeq	r0, r0, r0, rrx
   19898:	andeq	r0, r0, r0, lsr #1
   1989c:	andeq	r0, r0, r0, lsr #1
   198a0:	andeq	r0, r0, r0, lsr #1
   198a4:	andeq	r0, r0, r0, lsr #1
   198a8:	andeq	r0, r0, r0, lsr #1
   198ac:	andeq	r0, r0, r0, lsr #1
   198b0:	andeq	r0, r0, r0, lsr #1
   198b4:	andeq	r0, r0, r0, lsr #1
   198b8:	andeq	r0, r0, r0, lsr #1
   198bc:	andeq	r0, r0, r0, lsr #1
   198c0:	andeq	r0, r0, r0, lsr #1
   198c4:	andeq	r0, r0, r0, lsr #1
   198c8:	andeq	r0, r0, r0, lsr #1
   198cc:	andeq	r0, r0, r0, lsr #1
   198d0:	andeq	r0, r0, r0, lsr #1
   198d4:	andeq	r0, r0, r0, lsr #1
   198d8:	andeq	r0, r0, r0, lsr #1
   198dc:	andeq	r0, r0, r0, lsr #1
   198e0:	muleq	r0, r4, r0
   198e4:	sub	r2, ip, r1
   198e8:	mov	r3, #0
   198ec:	cmp	r2, #2
   198f0:	ldrbge	r2, [r1, #1]
   198f4:	subge	r2, r2, #10
   198f8:	clzge	r2, r2
   198fc:	lsrge	r3, r2, #5
   19900:	add	r1, r1, r3
   19904:	b	19830 <flatcc_json_parser_space_ext@@Base+0x10>
   19908:	ldrb	r3, [r1]
   1990c:	cmp	r3, #32
   19910:	bne	19844 <flatcc_json_parser_space_ext@@Base+0x24>
   19914:	add	r1, r1, #1
   19918:	cmp	r1, ip
   1991c:	bne	19908 <flatcc_json_parser_space_ext@@Base+0xe8>
   19920:	b	19930 <flatcc_json_parser_space_ext@@Base+0x110>
   19924:	ldr	r2, [r0, #24]
   19928:	cmp	r2, #0
   1992c:	beq	19938 <flatcc_json_parser_space_ext@@Base+0x118>
   19930:	mov	r0, ip
   19934:	bx	lr
   19938:	str	r1, [r0, #36]	; 0x24
   1993c:	add	r1, r1, #1
   19940:	mov	r2, #5
   19944:	ldr	r3, [r0, #4]
   19948:	sub	r1, r1, r3
   1994c:	str	r1, [r0, #20]
   19950:	str	r2, [r0, #24]
   19954:	mov	r0, ip
   19958:	bx	lr

0001995c <flatcc_json_parser_string_escape@@Base>:
   1995c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19960:	add	fp, sp, #24
   19964:	sub	r7, r2, r1
   19968:	cmp	r7, #2
   1996c:	blt	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19970:	ldrb	r6, [r1]
   19974:	cmp	r6, #92	; 0x5c
   19978:	bne	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   1997c:	ldrb	r6, [r1, #1]
   19980:	sub	r6, r6, #34	; 0x22
   19984:	cmp	r6, #86	; 0x56
   19988:	bhi	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   1998c:	add	r5, pc, #4
   19990:	ldr	r6, [r5, r6, lsl #2]
   19994:	add	pc, r5, r6
   19998:	andeq	r0, r0, ip, asr r1
   1999c:	ldrdeq	r0, [r0], -ip
   199a0:	ldrdeq	r0, [r0], -ip
   199a4:	ldrdeq	r0, [r0], -ip
   199a8:	ldrdeq	r0, [r0], -ip
   199ac:	ldrdeq	r0, [r0], -ip
   199b0:	ldrdeq	r0, [r0], -ip
   199b4:	ldrdeq	r0, [r0], -ip
   199b8:	ldrdeq	r0, [r0], -ip
   199bc:	ldrdeq	r0, [r0], -ip
   199c0:	ldrdeq	r0, [r0], -ip
   199c4:	ldrdeq	r0, [r0], -ip
   199c8:	ldrdeq	r0, [r0], -ip
   199cc:	andeq	r0, r0, r4, ror #2
   199d0:	ldrdeq	r0, [r0], -ip
   199d4:	ldrdeq	r0, [r0], -ip
   199d8:	ldrdeq	r0, [r0], -ip
   199dc:	ldrdeq	r0, [r0], -ip
   199e0:	ldrdeq	r0, [r0], -ip
   199e4:	ldrdeq	r0, [r0], -ip
   199e8:	ldrdeq	r0, [r0], -ip
   199ec:	ldrdeq	r0, [r0], -ip
   199f0:	ldrdeq	r0, [r0], -ip
   199f4:	ldrdeq	r0, [r0], -ip
   199f8:	ldrdeq	r0, [r0], -ip
   199fc:	ldrdeq	r0, [r0], -ip
   19a00:	ldrdeq	r0, [r0], -ip
   19a04:	ldrdeq	r0, [r0], -ip
   19a08:	ldrdeq	r0, [r0], -ip
   19a0c:	ldrdeq	r0, [r0], -ip
   19a10:	ldrdeq	r0, [r0], -ip
   19a14:	ldrdeq	r0, [r0], -ip
   19a18:	ldrdeq	r0, [r0], -ip
   19a1c:	ldrdeq	r0, [r0], -ip
   19a20:	ldrdeq	r0, [r0], -ip
   19a24:	ldrdeq	r0, [r0], -ip
   19a28:	ldrdeq	r0, [r0], -ip
   19a2c:	ldrdeq	r0, [r0], -ip
   19a30:	ldrdeq	r0, [r0], -ip
   19a34:	ldrdeq	r0, [r0], -ip
   19a38:	ldrdeq	r0, [r0], -ip
   19a3c:	ldrdeq	r0, [r0], -ip
   19a40:	ldrdeq	r0, [r0], -ip
   19a44:	ldrdeq	r0, [r0], -ip
   19a48:	ldrdeq	r0, [r0], -ip
   19a4c:	ldrdeq	r0, [r0], -ip
   19a50:	ldrdeq	r0, [r0], -ip
   19a54:	ldrdeq	r0, [r0], -ip
   19a58:	ldrdeq	r0, [r0], -ip
   19a5c:	ldrdeq	r0, [r0], -ip
   19a60:	ldrdeq	r0, [r0], -ip
   19a64:	ldrdeq	r0, [r0], -ip
   19a68:	ldrdeq	r0, [r0], -ip
   19a6c:	ldrdeq	r0, [r0], -ip
   19a70:	ldrdeq	r0, [r0], -ip
   19a74:	ldrdeq	r0, [r0], -ip
   19a78:	ldrdeq	r0, [r0], -ip
   19a7c:	ldrdeq	r0, [r0], -ip
   19a80:	andeq	r0, r0, ip, ror #2
   19a84:	ldrdeq	r0, [r0], -ip
   19a88:	ldrdeq	r0, [r0], -ip
   19a8c:	ldrdeq	r0, [r0], -ip
   19a90:	ldrdeq	r0, [r0], -ip
   19a94:	ldrdeq	r0, [r0], -ip
   19a98:	andeq	r0, r0, r4, ror r1
   19a9c:	ldrdeq	r0, [r0], -ip
   19aa0:	ldrdeq	r0, [r0], -ip
   19aa4:	ldrdeq	r0, [r0], -ip
   19aa8:	andeq	r0, r0, ip, ror r1
   19aac:	ldrdeq	r0, [r0], -ip
   19ab0:	ldrdeq	r0, [r0], -ip
   19ab4:	ldrdeq	r0, [r0], -ip
   19ab8:	ldrdeq	r0, [r0], -ip
   19abc:	ldrdeq	r0, [r0], -ip
   19ac0:	ldrdeq	r0, [r0], -ip
   19ac4:	ldrdeq	r0, [r0], -ip
   19ac8:	andeq	r0, r0, r4, lsl #3
   19acc:	ldrdeq	r0, [r0], -ip
   19ad0:	ldrdeq	r0, [r0], -ip
   19ad4:	ldrdeq	r0, [r0], -ip
   19ad8:	andeq	r0, r0, ip, lsl #3
   19adc:	ldrdeq	r0, [r0], -ip
   19ae0:	muleq	r0, r4, r1
   19ae4:	andeq	r0, r0, r8, lsr #3
   19ae8:	ldrdeq	r0, [r0], -ip
   19aec:	ldrdeq	r0, [r0], -ip
   19af0:	andeq	r0, r0, ip, asr #3
   19af4:	movw	r0, #8705	; 0x2201
   19af8:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19afc:	movw	r0, #12033	; 0x2f01
   19b00:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b04:	movw	r0, #23553	; 0x5c01
   19b08:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b0c:	movw	r0, #2049	; 0x801
   19b10:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b14:	movw	r0, #3073	; 0xc01
   19b18:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b1c:	movw	r0, #2561	; 0xa01
   19b20:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b24:	movw	r0, #3329	; 0xd01
   19b28:	b	19b30 <flatcc_json_parser_string_escape@@Base+0x1d4>
   19b2c:	movw	r0, #2305	; 0x901
   19b30:	add	r2, r1, #2
   19b34:	strh	r0, [r3]
   19b38:	mov	r0, r2
   19b3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b40:	cmp	r7, #5
   19b44:	ble	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19b48:	ldrb	r7, [r1, #2]
   19b4c:	sub	r6, r7, #48	; 0x30
   19b50:	uxtb	r6, r6
   19b54:	cmp	r6, #9
   19b58:	bhi	19bd0 <flatcc_json_parser_string_escape@@Base+0x274>
   19b5c:	lsl	ip, r7, #12
   19b60:	b	19bf0 <flatcc_json_parser_string_escape@@Base+0x294>
   19b64:	mov	r6, #1
   19b68:	cmp	r7, #3
   19b6c:	strb	r6, [r3]
   19b70:	bgt	19bb4 <flatcc_json_parser_string_escape@@Base+0x258>
   19b74:	mov	r7, #0
   19b78:	strb	r7, [r3]
   19b7c:	ldr	r3, [r0, #24]
   19b80:	cmp	r3, #0
   19b84:	beq	19b90 <flatcc_json_parser_string_escape@@Base+0x234>
   19b88:	mov	r0, r2
   19b8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b90:	str	r1, [r0, #36]	; 0x24
   19b94:	add	r1, r1, #1
   19b98:	mov	r3, #18
   19b9c:	ldr	r7, [r0, #4]
   19ba0:	sub	r1, r1, r7
   19ba4:	str	r1, [r0, #20]
   19ba8:	str	r3, [r0, #24]
   19bac:	mov	r0, r2
   19bb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19bb4:	ldrb	r7, [r1, #2]
   19bb8:	sub	r6, r7, #48	; 0x30
   19bbc:	uxtb	r6, r6
   19bc0:	cmp	r6, #9
   19bc4:	bhi	19c0c <flatcc_json_parser_string_escape@@Base+0x2b0>
   19bc8:	lsl	r7, r7, #4
   19bcc:	b	19c28 <flatcc_json_parser_string_escape@@Base+0x2cc>
   19bd0:	orr	r6, r7, #32
   19bd4:	sub	r6, r6, #97	; 0x61
   19bd8:	uxtb	r6, r6
   19bdc:	cmp	r6, #5
   19be0:	bhi	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19be4:	movw	r6, #36864	; 0x9000
   19be8:	movt	r6, #65535	; 0xffff
   19bec:	add	ip, r6, r7, lsl #12
   19bf0:	ldrb	lr, [r1, #3]
   19bf4:	sub	r4, lr, #48	; 0x30
   19bf8:	uxtb	r4, r4
   19bfc:	cmp	r4, #10
   19c00:	bcs	19c68 <flatcc_json_parser_string_escape@@Base+0x30c>
   19c04:	mov	r8, #53248	; 0xd000
   19c08:	b	19c80 <flatcc_json_parser_string_escape@@Base+0x324>
   19c0c:	orr	r6, r7, #32
   19c10:	sub	r6, r6, #97	; 0x61
   19c14:	uxtb	r6, r6
   19c18:	cmp	r6, #5
   19c1c:	bhi	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19c20:	mvn	r6, #111	; 0x6f
   19c24:	add	r7, r6, r7, lsl #4
   19c28:	ldrb	r5, [r1, #3]
   19c2c:	sub	r6, r5, #48	; 0x30
   19c30:	uxtb	r4, r6
   19c34:	cmp	r4, #10
   19c38:	bcc	19c54 <flatcc_json_parser_string_escape@@Base+0x2f8>
   19c3c:	orr	r6, r5, #32
   19c40:	sub	r5, r6, #97	; 0x61
   19c44:	uxtb	r5, r5
   19c48:	cmp	r5, #5
   19c4c:	bhi	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19c50:	sub	r6, r6, #87	; 0x57
   19c54:	orr	r0, r6, r7
   19c58:	add	r2, r1, #4
   19c5c:	strb	r0, [r3, #1]
   19c60:	mov	r0, r2
   19c64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c68:	orr	lr, lr, #32
   19c6c:	mov	r8, #43264	; 0xa900
   19c70:	sub	r4, lr, #97	; 0x61
   19c74:	uxtb	r4, r4
   19c78:	cmp	r4, #6
   19c7c:	bcs	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19c80:	ldrb	r5, [r1, #4]
   19c84:	sub	r4, r5, #48	; 0x30
   19c88:	uxtb	r4, r4
   19c8c:	cmp	r4, #10
   19c90:	bcs	19c9c <flatcc_json_parser_string_escape@@Base+0x340>
   19c94:	mov	r9, #64768	; 0xfd00
   19c98:	b	19cb4 <flatcc_json_parser_string_escape@@Base+0x358>
   19c9c:	orr	r5, r5, #32
   19ca0:	movw	r9, #64144	; 0xfa90
   19ca4:	sub	r4, r5, #97	; 0x61
   19ca8:	uxtb	r4, r4
   19cac:	cmp	r4, #6
   19cb0:	bcs	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19cb4:	ldrb	r7, [r1, #5]
   19cb8:	sub	r4, r7, #48	; 0x30
   19cbc:	uxtb	r4, r4
   19cc0:	cmp	r4, #10
   19cc4:	bcs	19cd4 <flatcc_json_parser_string_escape@@Base+0x378>
   19cc8:	mvn	r0, #86	; 0x56
   19ccc:	add	r4, r0, #39	; 0x27
   19cd0:	b	19cec <flatcc_json_parser_string_escape@@Base+0x390>
   19cd4:	orr	r7, r7, #32
   19cd8:	movw	r4, #65449	; 0xffa9
   19cdc:	sub	r6, r7, #97	; 0x61
   19ce0:	uxtb	r6, r6
   19ce4:	cmp	r6, #6
   19ce8:	bcs	19b74 <flatcc_json_parser_string_escape@@Base+0x218>
   19cec:	add	r0, r8, lr, lsl #8
   19cf0:	add	r2, r9, r5, lsl #4
   19cf4:	orr	r0, r0, ip
   19cf8:	orr	r0, r0, r2
   19cfc:	add	r2, r4, r7
   19d00:	orr	r0, r0, r2
   19d04:	uxth	r7, r0
   19d08:	cmp	r7, #127	; 0x7f
   19d0c:	bhi	19d1c <flatcc_json_parser_string_escape@@Base+0x3c0>
   19d10:	mov	r2, #1
   19d14:	strb	r2, [r3]
   19d18:	b	19d70 <flatcc_json_parser_string_escape@@Base+0x414>
   19d1c:	and	r2, r0, #63488	; 0xf800
   19d20:	mov	r6, #0
   19d24:	cmp	r6, r2, lsr #11
   19d28:	bne	19d44 <flatcc_json_parser_string_escape@@Base+0x3e8>
   19d2c:	mov	r7, #192	; 0xc0
   19d30:	mov	r2, #2
   19d34:	orr	r7, r7, r0, lsr #6
   19d38:	strb	r2, [r3]
   19d3c:	strb	r7, [r3, #1]
   19d40:	b	19d68 <flatcc_json_parser_string_escape@@Base+0x40c>
   19d44:	mov	r6, #224	; 0xe0
   19d48:	mov	r2, #3
   19d4c:	orr	r6, r6, r7, lsr #12
   19d50:	strb	r2, [r3]
   19d54:	lsr	r7, r7, #6
   19d58:	strb	r6, [r3, #1]
   19d5c:	mov	r6, #2
   19d60:	bfi	r7, r6, #6, #26
   19d64:	strb	r7, [r3, #2]
   19d68:	mvn	r7, #-67108863	; 0xfc000001
   19d6c:	bfi	r0, r7, #6, #26
   19d70:	strb	r0, [r3, r2]
   19d74:	add	r2, r1, #6
   19d78:	mov	r0, r2
   19d7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00019d80 <flatcc_json_parser_skip_constant@@Base>:
   19d80:	push	{r4, r5, r6, sl, fp, lr}
   19d84:	add	fp, sp, #16
   19d88:	cmp	r1, r2
   19d8c:	moveq	r0, r1
   19d90:	popeq	{r4, r5, r6, sl, fp, pc}
   19d94:	mov	r4, r2
   19d98:	mov	r5, r0
   19d9c:	b	19dac <flatcc_json_parser_skip_constant@@Base+0x2c>
   19da0:	cmp	r1, r4
   19da4:	moveq	r0, r4
   19da8:	popeq	{r4, r5, r6, sl, fp, pc}
   19dac:	ldrsb	r0, [r1]
   19db0:	mov	r6, r1
   19db4:	cmp	r0, #0
   19db8:	blt	19dcc <flatcc_json_parser_skip_constant@@Base+0x4c>
   19dbc:	uxtb	r0, r0
   19dc0:	cmp	r0, #95	; 0x5f
   19dc4:	cmpne	r0, #46	; 0x2e
   19dc8:	bne	19dd4 <flatcc_json_parser_skip_constant@@Base+0x54>
   19dcc:	add	r1, r6, #1
   19dd0:	b	19da0 <flatcc_json_parser_skip_constant@@Base+0x20>
   19dd4:	sub	r1, r0, #48	; 0x30
   19dd8:	uxtb	r1, r1
   19ddc:	cmp	r1, #9
   19de0:	bls	19dcc <flatcc_json_parser_skip_constant@@Base+0x4c>
   19de4:	orr	r1, r0, #32
   19de8:	sub	r1, r1, #97	; 0x61
   19dec:	uxtb	r1, r1
   19df0:	cmp	r1, #25
   19df4:	bls	19dcc <flatcc_json_parser_skip_constant@@Base+0x4c>
   19df8:	sub	r1, r4, r6
   19dfc:	cmp	r1, #2
   19e00:	blt	19e20 <flatcc_json_parser_skip_constant@@Base+0xa0>
   19e04:	cmp	r0, #32
   19e08:	bhi	19e3c <flatcc_json_parser_skip_constant@@Base+0xbc>
   19e0c:	bne	19e20 <flatcc_json_parser_skip_constant@@Base+0xa0>
   19e10:	mov	r1, r6
   19e14:	ldrb	r0, [r1, #1]!
   19e18:	cmp	r0, #32
   19e1c:	bhi	19da0 <flatcc_json_parser_skip_constant@@Base+0x20>
   19e20:	mov	r0, r5
   19e24:	mov	r1, r6
   19e28:	mov	r2, r4
   19e2c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   19e30:	mov	r1, r0
   19e34:	cmp	r0, r6
   19e38:	bne	19da0 <flatcc_json_parser_skip_constant@@Base+0x20>
   19e3c:	mov	r0, r6
   19e40:	pop	{r4, r5, r6, sl, fp, pc}

00019e44 <flatcc_json_parser_match_constant@@Base>:
   19e44:	push	{r4, r5, r6, r7, fp, lr}
   19e48:	add	fp, sp, #16
   19e4c:	ldr	r7, [fp, #8]
   19e50:	mov	r4, r1
   19e54:	sub	r1, r2, r1
   19e58:	cmp	r1, r3
   19e5c:	ble	19f5c <flatcc_json_parser_match_constant@@Base+0x118>
   19e60:	ldr	r1, [r0, #12]
   19e64:	mov	r5, r2
   19e68:	add	r6, r4, r3
   19e6c:	cmp	r1, #0
   19e70:	beq	19ef4 <flatcc_json_parser_match_constant@@Base+0xb0>
   19e74:	sub	r1, r5, r6
   19e78:	cmp	r1, #2
   19e7c:	blt	19ea4 <flatcc_json_parser_match_constant@@Base+0x60>
   19e80:	ldrb	r1, [r6]
   19e84:	mov	r2, r6
   19e88:	cmp	r1, #32
   19e8c:	bhi	19eb4 <flatcc_json_parser_match_constant@@Base+0x70>
   19e90:	bne	19ea4 <flatcc_json_parser_match_constant@@Base+0x60>
   19e94:	mov	r2, r6
   19e98:	ldrb	r1, [r2, #1]!
   19e9c:	cmp	r1, #32
   19ea0:	bhi	19eb4 <flatcc_json_parser_match_constant@@Base+0x70>
   19ea4:	mov	r1, r6
   19ea8:	mov	r2, r5
   19eac:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   19eb0:	mov	r2, r0
   19eb4:	cmp	r2, r5
   19eb8:	beq	19f70 <flatcc_json_parser_match_constant@@Base+0x12c>
   19ebc:	cmp	r2, r6
   19ec0:	beq	19f80 <flatcc_json_parser_match_constant@@Base+0x13c>
   19ec4:	ldrsb	r0, [r2]
   19ec8:	cmp	r0, #95	; 0x5f
   19ecc:	beq	19eec <flatcc_json_parser_match_constant@@Base+0xa8>
   19ed0:	cmn	r0, #1
   19ed4:	ble	19eec <flatcc_json_parser_match_constant@@Base+0xa8>
   19ed8:	orr	r0, r0, #32
   19edc:	sub	r0, r0, #97	; 0x61
   19ee0:	uxtb	r0, r0
   19ee4:	cmp	r0, #25
   19ee8:	bhi	19f80 <flatcc_json_parser_match_constant@@Base+0x13c>
   19eec:	mov	r0, #1
   19ef0:	b	1a004 <flatcc_json_parser_match_constant@@Base+0x1c0>
   19ef4:	ldrb	r1, [r6]
   19ef8:	cmp	r1, #92	; 0x5c
   19efc:	beq	19fa8 <flatcc_json_parser_match_constant@@Base+0x164>
   19f00:	cmp	r1, #34	; 0x22
   19f04:	beq	19f38 <flatcc_json_parser_match_constant@@Base+0xf4>
   19f08:	cmp	r1, #32
   19f0c:	bne	19f5c <flatcc_json_parser_match_constant@@Base+0x118>
   19f10:	add	r1, r4, r3
   19f14:	add	r1, r1, #1
   19f18:	cmp	r5, r1
   19f1c:	beq	19f70 <flatcc_json_parser_match_constant@@Base+0x12c>
   19f20:	ldrb	r2, [r1], #1
   19f24:	cmp	r2, #32
   19f28:	beq	19f18 <flatcc_json_parser_match_constant@@Base+0xd4>
   19f2c:	cmp	r2, #34	; 0x22
   19f30:	bne	1a010 <flatcc_json_parser_match_constant@@Base+0x1cc>
   19f34:	sub	r6, r1, #1
   19f38:	mvn	r2, r6
   19f3c:	add	r1, r6, #1
   19f40:	cmp	r2, #2
   19f44:	blt	19ff4 <flatcc_json_parser_match_constant@@Base+0x1b0>
   19f48:	ldrb	r2, [r1]
   19f4c:	cmp	r2, #32
   19f50:	bls	19fe0 <flatcc_json_parser_match_constant@@Base+0x19c>
   19f54:	mov	r2, r1
   19f58:	b	1a000 <flatcc_json_parser_match_constant@@Base+0x1bc>
   19f5c:	mov	r0, #0
   19f60:	mov	r2, r4
   19f64:	str	r0, [r7]
   19f68:	mov	r0, r2
   19f6c:	pop	{r4, r5, r6, r7, fp, pc}
   19f70:	mov	r0, #0
   19f74:	str	r0, [r7]
   19f78:	mov	r0, r5
   19f7c:	pop	{r4, r5, r6, r7, fp, pc}
   19f80:	mov	r0, #0
   19f84:	str	r0, [r7]
   19f88:	ldrb	r0, [r2]
   19f8c:	cmp	r0, #44	; 0x2c
   19f90:	cmpne	r0, #93	; 0x5d
   19f94:	beq	19f68 <flatcc_json_parser_match_constant@@Base+0x124>
   19f98:	cmp	r0, #125	; 0x7d
   19f9c:	movne	r2, r4
   19fa0:	mov	r0, r2
   19fa4:	pop	{r4, r5, r6, r7, fp, pc}
   19fa8:	mov	r1, #0
   19fac:	str	r1, [r7]
   19fb0:	ldr	r1, [r0, #24]
   19fb4:	cmp	r1, #0
   19fb8:	bne	19f78 <flatcc_json_parser_match_constant@@Base+0x134>
   19fbc:	str	r6, [r0, #36]	; 0x24
   19fc0:	add	r3, r6, #1
   19fc4:	mov	r1, #18
   19fc8:	ldr	r2, [r0, #4]
   19fcc:	sub	r2, r3, r2
   19fd0:	str	r2, [r0, #20]
   19fd4:	str	r1, [r0, #24]
   19fd8:	mov	r0, r5
   19fdc:	pop	{r4, r5, r6, r7, fp, pc}
   19fe0:	bne	19ff4 <flatcc_json_parser_match_constant@@Base+0x1b0>
   19fe4:	ldrb	r2, [r6, #2]!
   19fe8:	cmp	r2, #32
   19fec:	mov	r2, r6
   19ff0:	bhi	1a000 <flatcc_json_parser_match_constant@@Base+0x1bc>
   19ff4:	mov	r2, #0
   19ff8:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   19ffc:	mov	r2, r0
   1a000:	mov	r0, #0
   1a004:	str	r0, [r7]
   1a008:	mov	r0, r2
   1a00c:	pop	{r4, r5, r6, r7, fp, pc}
   1a010:	mov	r0, #1
   1a014:	sub	r2, r1, #1
   1a018:	str	r0, [r7]
   1a01c:	mov	r0, r2
   1a020:	pop	{r4, r5, r6, r7, fp, pc}

0001a024 <flatcc_json_parser_unmatched_symbol@@Base>:
   1a024:	push	{r4, r5, r6, sl, fp, lr}
   1a028:	add	fp, sp, #16
   1a02c:	mov	r6, r0
   1a030:	ldrb	r0, [r0, #8]
   1a034:	mov	r4, r2
   1a038:	tst	r0, #1
   1a03c:	bne	1a064 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   1a040:	ldr	r0, [r6, #24]
   1a044:	cmp	r0, #0
   1a048:	bne	1a228 <flatcc_json_parser_unmatched_symbol@@Base+0x204>
   1a04c:	str	r1, [r6, #36]	; 0x24
   1a050:	add	r1, r1, #1
   1a054:	mov	r0, #13
   1a058:	ldr	r2, [r6, #4]
   1a05c:	sub	r1, r1, r2
   1a060:	b	1a244 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   1a064:	ldr	r0, [r6, #12]
   1a068:	cmp	r0, #0
   1a06c:	beq	1a0f8 <flatcc_json_parser_unmatched_symbol@@Base+0xd4>
   1a070:	cmp	r1, r4
   1a074:	beq	1a0f0 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1a078:	ldrb	r3, [r1]
   1a07c:	cmp	r3, #33	; 0x21
   1a080:	bcc	1a0f0 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1a084:	add	r0, r1, #1
   1a088:	uxtb	r2, r3
   1a08c:	cmp	r2, #46	; 0x2e
   1a090:	cmpne	r2, #95	; 0x5f
   1a094:	bne	1a0b4 <flatcc_json_parser_unmatched_symbol@@Base+0x90>
   1a098:	cmp	r4, r0
   1a09c:	beq	1a158 <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   1a0a0:	ldrb	r3, [r0], #1
   1a0a4:	add	r1, r1, #1
   1a0a8:	cmp	r3, #33	; 0x21
   1a0ac:	bcs	1a088 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   1a0b0:	b	1a15c <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   1a0b4:	sxtb	r5, r3
   1a0b8:	cmp	r5, #0
   1a0bc:	blt	1a098 <flatcc_json_parser_unmatched_symbol@@Base+0x74>
   1a0c0:	sub	r5, r3, #48	; 0x30
   1a0c4:	uxtb	r5, r5
   1a0c8:	cmp	r5, #9
   1a0cc:	bls	1a098 <flatcc_json_parser_unmatched_symbol@@Base+0x74>
   1a0d0:	orr	r3, r3, #32
   1a0d4:	sub	r3, r3, #97	; 0x61
   1a0d8:	uxtb	r3, r3
   1a0dc:	cmp	r3, #26
   1a0e0:	bcc	1a098 <flatcc_json_parser_unmatched_symbol@@Base+0x74>
   1a0e4:	sub	r1, r0, #1
   1a0e8:	cmp	r2, #46	; 0x2e
   1a0ec:	beq	1a164 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   1a0f0:	mov	r2, r1
   1a0f4:	b	1a194 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   1a0f8:	cmp	r1, r4
   1a0fc:	beq	1a138 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   1a100:	ldrb	r0, [r1]
   1a104:	cmp	r0, #92	; 0x5c
   1a108:	beq	1a118 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   1a10c:	cmp	r0, #34	; 0x22
   1a110:	bne	1a128 <flatcc_json_parser_unmatched_symbol@@Base+0x104>
   1a114:	b	1a150 <flatcc_json_parser_unmatched_symbol@@Base+0x12c>
   1a118:	sub	r0, r4, r1
   1a11c:	cmp	r0, #2
   1a120:	blt	1a138 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   1a124:	add	r1, r1, #1
   1a128:	add	r1, r1, #1
   1a12c:	cmp	r1, r4
   1a130:	bne	1a100 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1a134:	mov	r1, r4
   1a138:	ldr	r0, [r6, #24]
   1a13c:	mov	r2, r4
   1a140:	cmp	r0, #0
   1a144:	bne	1a194 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   1a148:	mov	r0, #20
   1a14c:	b	1a178 <flatcc_json_parser_unmatched_symbol@@Base+0x154>
   1a150:	add	r2, r1, #1
   1a154:	b	1a194 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   1a158:	mov	r1, r4
   1a15c:	cmp	r2, #46	; 0x2e
   1a160:	bne	1a0f0 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1a164:	ldr	r0, [r6, #24]
   1a168:	mov	r2, r4
   1a16c:	cmp	r0, #0
   1a170:	bne	1a194 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   1a174:	mov	r0, #5
   1a178:	str	r1, [r6, #36]	; 0x24
   1a17c:	add	r1, r1, #1
   1a180:	ldr	r2, [r6, #4]
   1a184:	sub	r1, r1, r2
   1a188:	mov	r2, r4
   1a18c:	str	r1, [r6, #20]
   1a190:	str	r0, [r6, #24]
   1a194:	sub	r0, r4, r2
   1a198:	cmp	r0, #2
   1a19c:	blt	1a1d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   1a1a0:	ldrb	r0, [r2]
   1a1a4:	cmp	r0, #32
   1a1a8:	bls	1a1bc <flatcc_json_parser_unmatched_symbol@@Base+0x198>
   1a1ac:	mov	r3, r2
   1a1b0:	cmp	r3, r4
   1a1b4:	bne	1a1ec <flatcc_json_parser_unmatched_symbol@@Base+0x1c8>
   1a1b8:	b	1a21c <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1a1bc:	bne	1a1d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   1a1c0:	mov	r3, r2
   1a1c4:	ldrb	r0, [r3, #1]!
   1a1c8:	cmp	r0, #32
   1a1cc:	bhi	1a1e4 <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   1a1d0:	mov	r1, r2
   1a1d4:	mov	r0, r6
   1a1d8:	mov	r2, r4
   1a1dc:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1a1e0:	mov	r3, r0
   1a1e4:	cmp	r3, r4
   1a1e8:	beq	1a21c <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1a1ec:	ldrb	r0, [r3]
   1a1f0:	cmp	r0, #58	; 0x3a
   1a1f4:	bne	1a21c <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1a1f8:	add	r1, r3, #1
   1a1fc:	sub	r0, r4, r1
   1a200:	cmp	r0, #2
   1a204:	blt	1a264 <flatcc_json_parser_unmatched_symbol@@Base+0x240>
   1a208:	ldrb	r0, [r1]
   1a20c:	cmp	r0, #32
   1a210:	bls	1a254 <flatcc_json_parser_unmatched_symbol@@Base+0x230>
   1a214:	mov	r3, r1
   1a218:	b	1a274 <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   1a21c:	ldr	r0, [r6, #24]
   1a220:	cmp	r0, #0
   1a224:	beq	1a230 <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   1a228:	mov	r0, r4
   1a22c:	pop	{r4, r5, r6, sl, fp, pc}
   1a230:	str	r3, [r6, #36]	; 0x24
   1a234:	add	r2, r3, #1
   1a238:	mov	r0, #4
   1a23c:	ldr	r1, [r6, #4]
   1a240:	sub	r1, r2, r1
   1a244:	str	r1, [r6, #20]
   1a248:	str	r0, [r6, #24]
   1a24c:	mov	r0, r4
   1a250:	pop	{r4, r5, r6, sl, fp, pc}
   1a254:	bne	1a264 <flatcc_json_parser_unmatched_symbol@@Base+0x240>
   1a258:	ldrb	r0, [r3, #2]!
   1a25c:	cmp	r0, #32
   1a260:	bhi	1a274 <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   1a264:	mov	r0, r6
   1a268:	mov	r2, r4
   1a26c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1a270:	mov	r3, r0
   1a274:	mov	r0, r6
   1a278:	mov	r1, r3
   1a27c:	mov	r2, r4
   1a280:	pop	{r4, r5, r6, sl, fp, lr}
   1a284:	b	1a288 <flatcc_json_parser_generic_json@@Base>

0001a288 <flatcc_json_parser_generic_json@@Base>:
   1a288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a28c:	add	fp, sp, #28
   1a290:	sub	sp, sp, #540	; 0x21c
   1a294:	mov	r7, r1
   1a298:	cmp	r1, r2
   1a29c:	beq	1aef0 <flatcc_json_parser_generic_json@@Base+0xc68>
   1a2a0:	mov	r5, r0
   1a2a4:	add	r0, r2, #1
   1a2a8:	add	r1, sp, #24
   1a2ac:	mov	r6, r2
   1a2b0:	mov	r8, #0
   1a2b4:	str	r0, [sp, #4]
   1a2b8:	add	r0, r5, #36	; 0x24
   1a2bc:	sub	sl, r1, #1
   1a2c0:	add	r9, r5, #24
   1a2c4:	str	r0, [sp, #16]
   1a2c8:	add	r0, r5, #20
   1a2cc:	str	r0, [sp, #12]
   1a2d0:	add	r0, r5, #4
   1a2d4:	str	r0, [sp, #8]
   1a2d8:	mov	r0, r1
   1a2dc:	cmp	r8, #0
   1a2e0:	beq	1a56c <flatcc_json_parser_generic_json@@Base+0x2e4>
   1a2e4:	ldrb	r0, [r0, #-1]
   1a2e8:	cmp	r0, #125	; 0x7d
   1a2ec:	bne	1a56c <flatcc_json_parser_generic_json@@Base+0x2e4>
   1a2f0:	ldrb	r0, [r7]
   1a2f4:	cmp	r0, #46	; 0x2e
   1a2f8:	beq	1a358 <flatcc_json_parser_generic_json@@Base+0xd0>
   1a2fc:	cmp	r0, #34	; 0x22
   1a300:	bne	1a3a4 <flatcc_json_parser_generic_json@@Base+0x11c>
   1a304:	mov	r0, #0
   1a308:	mov	r2, r6
   1a30c:	str	r0, [r5, #12]
   1a310:	add	r0, r7, #1
   1a314:	cmp	r0, r6
   1a318:	beq	1a48c <flatcc_json_parser_generic_json@@Base+0x204>
   1a31c:	ldrb	r1, [r0]
   1a320:	cmp	r1, #92	; 0x5c
   1a324:	beq	1a334 <flatcc_json_parser_generic_json@@Base+0xac>
   1a328:	cmp	r1, #34	; 0x22
   1a32c:	bne	1a344 <flatcc_json_parser_generic_json@@Base+0xbc>
   1a330:	b	1a438 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1a334:	sub	r1, r6, r0
   1a338:	cmp	r1, #2
   1a33c:	blt	1a488 <flatcc_json_parser_generic_json@@Base+0x200>
   1a340:	add	r0, r0, #1
   1a344:	add	r0, r0, #1
   1a348:	cmp	r0, r6
   1a34c:	bne	1a31c <flatcc_json_parser_generic_json@@Base+0x94>
   1a350:	mov	r2, r6
   1a354:	b	1a48c <flatcc_json_parser_generic_json@@Base+0x204>
   1a358:	ldr	r0, [r9]
   1a35c:	cmp	r0, #0
   1a360:	bne	1a38c <flatcc_json_parser_generic_json@@Base+0x104>
   1a364:	mov	r0, #5
   1a368:	add	r1, r7, #1
   1a36c:	str	r0, [r9]
   1a370:	ldr	r0, [sp, #8]
   1a374:	ldr	r0, [r0]
   1a378:	sub	r0, r1, r0
   1a37c:	ldr	r1, [sp, #12]
   1a380:	str	r0, [r1]
   1a384:	ldr	r0, [sp, #16]
   1a388:	str	r7, [r0]
   1a38c:	ldr	r0, [r5, #12]
   1a390:	mov	r2, r6
   1a394:	mov	r1, r6
   1a398:	cmp	r0, #0
   1a39c:	bne	1a4c8 <flatcc_json_parser_generic_json@@Base+0x240>
   1a3a0:	b	1a48c <flatcc_json_parser_generic_json@@Base+0x204>
   1a3a4:	mov	r0, #1
   1a3a8:	cmp	r7, r6
   1a3ac:	mov	r1, r6
   1a3b0:	str	r0, [r5, #12]
   1a3b4:	beq	1a4c8 <flatcc_json_parser_generic_json@@Base+0x240>
   1a3b8:	ldrb	r2, [r7]
   1a3bc:	cmp	r2, #33	; 0x21
   1a3c0:	bcc	1a430 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1a3c4:	add	r0, r7, #1
   1a3c8:	uxtb	r1, r2
   1a3cc:	cmp	r1, #46	; 0x2e
   1a3d0:	cmpne	r1, #95	; 0x5f
   1a3d4:	bne	1a3f4 <flatcc_json_parser_generic_json@@Base+0x16c>
   1a3d8:	cmp	r6, r0
   1a3dc:	beq	1a440 <flatcc_json_parser_generic_json@@Base+0x1b8>
   1a3e0:	ldrb	r2, [r0], #1
   1a3e4:	add	r7, r7, #1
   1a3e8:	cmp	r2, #33	; 0x21
   1a3ec:	bcs	1a3c8 <flatcc_json_parser_generic_json@@Base+0x140>
   1a3f0:	b	1a444 <flatcc_json_parser_generic_json@@Base+0x1bc>
   1a3f4:	sxtb	r3, r2
   1a3f8:	cmp	r3, #0
   1a3fc:	blt	1a3d8 <flatcc_json_parser_generic_json@@Base+0x150>
   1a400:	sub	r3, r2, #48	; 0x30
   1a404:	uxtb	r3, r3
   1a408:	cmp	r3, #9
   1a40c:	bls	1a3d8 <flatcc_json_parser_generic_json@@Base+0x150>
   1a410:	orr	r2, r2, #32
   1a414:	sub	r2, r2, #97	; 0x61
   1a418:	uxtb	r2, r2
   1a41c:	cmp	r2, #26
   1a420:	bcc	1a3d8 <flatcc_json_parser_generic_json@@Base+0x150>
   1a424:	sub	r7, r0, #1
   1a428:	cmp	r1, #46	; 0x2e
   1a42c:	beq	1a44c <flatcc_json_parser_generic_json@@Base+0x1c4>
   1a430:	mov	r1, r7
   1a434:	b	1a4c8 <flatcc_json_parser_generic_json@@Base+0x240>
   1a438:	add	r1, r0, #1
   1a43c:	b	1a4c8 <flatcc_json_parser_generic_json@@Base+0x240>
   1a440:	mov	r7, r6
   1a444:	cmp	r1, #46	; 0x2e
   1a448:	bne	1a430 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1a44c:	ldr	r0, [r9]
   1a450:	mov	r1, r6
   1a454:	cmp	r0, #0
   1a458:	bne	1a4c8 <flatcc_json_parser_generic_json@@Base+0x240>
   1a45c:	mov	r0, #5
   1a460:	add	r1, r7, #1
   1a464:	str	r0, [r9]
   1a468:	ldr	r0, [sp, #8]
   1a46c:	ldr	r0, [r0]
   1a470:	sub	r0, r1, r0
   1a474:	ldr	r1, [sp, #12]
   1a478:	str	r0, [r1]
   1a47c:	ldr	r0, [sp, #16]
   1a480:	str	r7, [r0]
   1a484:	b	1a4c4 <flatcc_json_parser_generic_json@@Base+0x23c>
   1a488:	mov	r2, r0
   1a48c:	ldr	r0, [r9]
   1a490:	mov	r1, r6
   1a494:	cmp	r0, #0
   1a498:	bne	1a4c8 <flatcc_json_parser_generic_json@@Base+0x240>
   1a49c:	mov	r0, #20
   1a4a0:	add	r1, r2, #1
   1a4a4:	str	r0, [r9]
   1a4a8:	ldr	r0, [sp, #8]
   1a4ac:	ldr	r0, [r0]
   1a4b0:	sub	r0, r1, r0
   1a4b4:	ldr	r1, [sp, #12]
   1a4b8:	str	r0, [r1]
   1a4bc:	ldr	r0, [sp, #16]
   1a4c0:	str	r2, [r0]
   1a4c4:	mov	r1, r6
   1a4c8:	sub	r0, r6, r1
   1a4cc:	cmp	r0, #2
   1a4d0:	blt	1a504 <flatcc_json_parser_generic_json@@Base+0x27c>
   1a4d4:	ldrb	r0, [r1]
   1a4d8:	cmp	r0, #32
   1a4dc:	bls	1a4f0 <flatcc_json_parser_generic_json@@Base+0x268>
   1a4e0:	mov	r7, r1
   1a4e4:	cmp	r7, r6
   1a4e8:	bne	1a51c <flatcc_json_parser_generic_json@@Base+0x294>
   1a4ec:	b	1af74 <flatcc_json_parser_generic_json@@Base+0xcec>
   1a4f0:	bne	1a504 <flatcc_json_parser_generic_json@@Base+0x27c>
   1a4f4:	mov	r7, r1
   1a4f8:	ldrb	r0, [r7, #1]!
   1a4fc:	cmp	r0, #32
   1a500:	bhi	1a514 <flatcc_json_parser_generic_json@@Base+0x28c>
   1a504:	mov	r0, r5
   1a508:	mov	r2, r6
   1a50c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1a510:	mov	r7, r0
   1a514:	cmp	r7, r6
   1a518:	beq	1af74 <flatcc_json_parser_generic_json@@Base+0xcec>
   1a51c:	ldrb	r0, [r7]
   1a520:	cmp	r0, #58	; 0x3a
   1a524:	bne	1af8c <flatcc_json_parser_generic_json@@Base+0xd04>
   1a528:	add	r1, r7, #1
   1a52c:	sub	r0, r6, r1
   1a530:	cmp	r0, #2
   1a534:	blt	1a55c <flatcc_json_parser_generic_json@@Base+0x2d4>
   1a538:	ldrb	r2, [r1]
   1a53c:	cmp	r2, #32
   1a540:	bls	1a54c <flatcc_json_parser_generic_json@@Base+0x2c4>
   1a544:	mov	r7, r1
   1a548:	b	1a570 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1a54c:	bne	1a55c <flatcc_json_parser_generic_json@@Base+0x2d4>
   1a550:	ldrb	r2, [r7, #2]!
   1a554:	cmp	r2, #32
   1a558:	bhi	1a570 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1a55c:	mov	r0, r5
   1a560:	mov	r2, r6
   1a564:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1a568:	mov	r7, r0
   1a56c:	ldrb	r2, [r7]
   1a570:	sub	r0, r2, #48	; 0x30
   1a574:	cmp	r0, #10
   1a578:	bcs	1a614 <flatcc_json_parser_generic_json@@Base+0x38c>
   1a57c:	cmp	r7, r6
   1a580:	beq	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1a584:	cmp	r2, #45	; 0x2d
   1a588:	bne	1a59c <flatcc_json_parser_generic_json@@Base+0x314>
   1a58c:	add	r7, r7, #1
   1a590:	cmp	r7, r6
   1a594:	beq	1a9ac <flatcc_json_parser_generic_json@@Base+0x724>
   1a598:	ldrb	r2, [r7]
   1a59c:	cmp	r2, #48	; 0x30
   1a5a0:	bne	1a630 <flatcc_json_parser_generic_json@@Base+0x3a8>
   1a5a4:	add	r4, r7, #1
   1a5a8:	cmp	r4, r6
   1a5ac:	mov	r1, r6
   1a5b0:	beq	1a9c4 <flatcc_json_parser_generic_json@@Base+0x73c>
   1a5b4:	ldrb	r0, [r4]
   1a5b8:	cmp	r0, #46	; 0x2e
   1a5bc:	bne	1a848 <flatcc_json_parser_generic_json@@Base+0x5c0>
   1a5c0:	mov	r0, r4
   1a5c4:	ldrb	r1, [r0, #1]!
   1a5c8:	sub	r1, r1, #48	; 0x30
   1a5cc:	uxtb	r1, r1
   1a5d0:	cmp	r1, #10
   1a5d4:	bcc	1a814 <flatcc_json_parser_generic_json@@Base+0x58c>
   1a5d8:	ldr	r1, [r9]
   1a5dc:	cmp	r1, #0
   1a5e0:	bne	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1a5e4:	mov	r1, #6
   1a5e8:	add	r2, r0, #1
   1a5ec:	mov	r4, r6
   1a5f0:	str	r1, [r9]
   1a5f4:	ldr	r1, [sp, #8]
   1a5f8:	ldr	r1, [r1]
   1a5fc:	sub	r1, r2, r1
   1a600:	ldr	r2, [sp, #12]
   1a604:	str	r1, [r2]
   1a608:	ldr	r1, [sp, #16]
   1a60c:	str	r0, [r1]
   1a610:	b	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1a614:	cmp	r2, #90	; 0x5a
   1a618:	bgt	1a678 <flatcc_json_parser_generic_json@@Base+0x3f0>
   1a61c:	cmp	r2, #34	; 0x22
   1a620:	beq	1a6f0 <flatcc_json_parser_generic_json@@Base+0x468>
   1a624:	cmp	r2, #45	; 0x2d
   1a628:	beq	1a57c <flatcc_json_parser_generic_json@@Base+0x2f4>
   1a62c:	b	1a754 <flatcc_json_parser_generic_json@@Base+0x4cc>
   1a630:	sub	r0, r2, #49	; 0x31
   1a634:	uxtb	r0, r0
   1a638:	cmp	r0, #8
   1a63c:	bls	1a6c8 <flatcc_json_parser_generic_json@@Base+0x440>
   1a640:	ldr	r0, [r9]
   1a644:	cmp	r0, #0
   1a648:	bne	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1a64c:	mov	r0, #6
   1a650:	add	r1, r7, #1
   1a654:	str	r0, [r9]
   1a658:	ldr	r0, [sp, #8]
   1a65c:	ldr	r0, [r0]
   1a660:	sub	r0, r1, r0
   1a664:	ldr	r1, [sp, #12]
   1a668:	str	r0, [r1]
   1a66c:	ldr	r0, [sp, #16]
   1a670:	str	r7, [r0]
   1a674:	b	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1a678:	cmp	r2, #91	; 0x5b
   1a67c:	beq	1a714 <flatcc_json_parser_generic_json@@Base+0x48c>
   1a680:	cmp	r2, #123	; 0x7b
   1a684:	bne	1a754 <flatcc_json_parser_generic_json@@Base+0x4cc>
   1a688:	cmp	r8, #512	; 0x200
   1a68c:	beq	1afa0 <flatcc_json_parser_generic_json@@Base+0xd18>
   1a690:	add	r0, sp, #24
   1a694:	mov	r1, #125	; 0x7d
   1a698:	strb	r1, [r0, r8]
   1a69c:	add	r1, r7, #1
   1a6a0:	sub	r0, r6, r1
   1a6a4:	cmp	r0, #2
   1a6a8:	blt	1ad24 <flatcc_json_parser_generic_json@@Base+0xa9c>
   1a6ac:	ldrb	r0, [r1]
   1a6b0:	cmp	r0, #32
   1a6b4:	bls	1ad14 <flatcc_json_parser_generic_json@@Base+0xa8c>
   1a6b8:	mov	r7, r1
   1a6bc:	cmp	r7, r6
   1a6c0:	bne	1ad3c <flatcc_json_parser_generic_json@@Base+0xab4>
   1a6c4:	b	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1a6c8:	add	r0, r7, #1
   1a6cc:	cmp	r6, r0
   1a6d0:	beq	1a9c0 <flatcc_json_parser_generic_json@@Base+0x738>
   1a6d4:	ldrb	r1, [r0], #1
   1a6d8:	sub	r1, r1, #48	; 0x30
   1a6dc:	uxtb	r1, r1
   1a6e0:	cmp	r1, #10
   1a6e4:	bcc	1a6cc <flatcc_json_parser_generic_json@@Base+0x444>
   1a6e8:	sub	r4, r0, #1
   1a6ec:	b	1a5a8 <flatcc_json_parser_generic_json@@Base+0x320>
   1a6f0:	cmp	r7, r6
   1a6f4:	beq	1acd8 <flatcc_json_parser_generic_json@@Base+0xa50>
   1a6f8:	add	r0, r7, #1
   1a6fc:	mov	r1, r6
   1a700:	add	r4, sp, #20
   1a704:	mov	r7, #17
   1a708:	cmp	r0, r6
   1a70c:	bne	1ade4 <flatcc_json_parser_generic_json@@Base+0xb5c>
   1a710:	b	1aec4 <flatcc_json_parser_generic_json@@Base+0xc3c>
   1a714:	cmp	r8, #512	; 0x200
   1a718:	beq	1afa0 <flatcc_json_parser_generic_json@@Base+0xd18>
   1a71c:	add	r0, sp, #24
   1a720:	mov	r1, #93	; 0x5d
   1a724:	strb	r1, [r0, r8]
   1a728:	add	r1, r7, #1
   1a72c:	sub	r0, r6, r1
   1a730:	cmp	r0, #2
   1a734:	blt	1ad64 <flatcc_json_parser_generic_json@@Base+0xadc>
   1a738:	ldrb	r0, [r1]
   1a73c:	cmp	r0, #32
   1a740:	bls	1ad54 <flatcc_json_parser_generic_json@@Base+0xacc>
   1a744:	mov	r7, r1
   1a748:	cmp	r7, r6
   1a74c:	bne	1ad7c <flatcc_json_parser_generic_json@@Base+0xaf4>
   1a750:	b	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1a754:	cmp	r7, r6
   1a758:	mov	r4, r6
   1a75c:	beq	1a808 <flatcc_json_parser_generic_json@@Base+0x580>
   1a760:	mov	r4, r7
   1a764:	b	1a770 <flatcc_json_parser_generic_json@@Base+0x4e8>
   1a768:	ldrb	r2, [r0]
   1a76c:	mov	r4, r0
   1a770:	sxtb	r0, r2
   1a774:	cmp	r0, #0
   1a778:	blt	1a78c <flatcc_json_parser_generic_json@@Base+0x504>
   1a77c:	uxtb	r0, r2
   1a780:	cmp	r0, #95	; 0x5f
   1a784:	cmpne	r0, #46	; 0x2e
   1a788:	bne	1a79c <flatcc_json_parser_generic_json@@Base+0x514>
   1a78c:	add	r0, r4, #1
   1a790:	cmp	r0, r6
   1a794:	bne	1a768 <flatcc_json_parser_generic_json@@Base+0x4e0>
   1a798:	b	1a804 <flatcc_json_parser_generic_json@@Base+0x57c>
   1a79c:	sub	r1, r2, #48	; 0x30
   1a7a0:	uxtb	r1, r1
   1a7a4:	cmp	r1, #9
   1a7a8:	bls	1a78c <flatcc_json_parser_generic_json@@Base+0x504>
   1a7ac:	orr	r1, r2, #32
   1a7b0:	sub	r1, r1, #97	; 0x61
   1a7b4:	uxtb	r1, r1
   1a7b8:	cmp	r1, #25
   1a7bc:	bls	1a78c <flatcc_json_parser_generic_json@@Base+0x504>
   1a7c0:	sub	r1, r6, r4
   1a7c4:	cmp	r1, #2
   1a7c8:	blt	1a7e8 <flatcc_json_parser_generic_json@@Base+0x560>
   1a7cc:	cmp	r0, #32
   1a7d0:	bhi	1a808 <flatcc_json_parser_generic_json@@Base+0x580>
   1a7d4:	bne	1a7e8 <flatcc_json_parser_generic_json@@Base+0x560>
   1a7d8:	mov	r0, r4
   1a7dc:	ldrb	r1, [r0, #1]!
   1a7e0:	cmp	r1, #32
   1a7e4:	bhi	1a790 <flatcc_json_parser_generic_json@@Base+0x508>
   1a7e8:	mov	r0, r5
   1a7ec:	mov	r1, r4
   1a7f0:	mov	r2, r6
   1a7f4:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1a7f8:	cmp	r0, r4
   1a7fc:	bne	1a790 <flatcc_json_parser_generic_json@@Base+0x508>
   1a800:	b	1a808 <flatcc_json_parser_generic_json@@Base+0x580>
   1a804:	mov	r4, r6
   1a808:	cmp	r7, r4
   1a80c:	bne	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1a810:	b	1afb4 <flatcc_json_parser_generic_json@@Base+0xd2c>
   1a814:	add	r4, r4, #2
   1a818:	mov	r1, r6
   1a81c:	cmp	r4, r6
   1a820:	beq	1a9c4 <flatcc_json_parser_generic_json@@Base+0x73c>
   1a824:	ldrb	r0, [r4]
   1a828:	sub	r1, r0, #48	; 0x30
   1a82c:	uxtb	r1, r1
   1a830:	cmp	r1, #9
   1a834:	bhi	1a848 <flatcc_json_parser_generic_json@@Base+0x5c0>
   1a838:	add	r4, r4, #1
   1a83c:	cmp	r6, r4
   1a840:	bne	1a824 <flatcc_json_parser_generic_json@@Base+0x59c>
   1a844:	b	1a9c0 <flatcc_json_parser_generic_json@@Base+0x738>
   1a848:	cmp	r4, r6
   1a84c:	mov	r1, r6
   1a850:	beq	1a9c4 <flatcc_json_parser_generic_json@@Base+0x73c>
   1a854:	orr	r1, r0, #32
   1a858:	cmp	r1, #101	; 0x65
   1a85c:	bne	1a8bc <flatcc_json_parser_generic_json@@Base+0x634>
   1a860:	add	r0, r4, #1
   1a864:	cmp	r0, r6
   1a868:	beq	1a9ac <flatcc_json_parser_generic_json@@Base+0x724>
   1a86c:	ldrb	r1, [r0]
   1a870:	cmp	r1, #45	; 0x2d
   1a874:	cmpne	r1, #43	; 0x2b
   1a878:	addeq	r0, r4, #2
   1a87c:	cmp	r0, r6
   1a880:	beq	1a5d8 <flatcc_json_parser_generic_json@@Base+0x350>
   1a884:	ldrb	r1, [r0]
   1a888:	sub	r1, r1, #48	; 0x30
   1a88c:	uxtb	r1, r1
   1a890:	cmp	r1, #9
   1a894:	bhi	1a5d8 <flatcc_json_parser_generic_json@@Base+0x350>
   1a898:	add	r1, r0, #1
   1a89c:	cmp	r6, r1
   1a8a0:	beq	1a9c0 <flatcc_json_parser_generic_json@@Base+0x738>
   1a8a4:	ldrb	r0, [r1], #1
   1a8a8:	sub	r2, r0, #48	; 0x30
   1a8ac:	uxtb	r2, r2
   1a8b0:	cmp	r2, #10
   1a8b4:	bcc	1a89c <flatcc_json_parser_generic_json@@Base+0x614>
   1a8b8:	sub	r4, r1, #1
   1a8bc:	cmp	r4, r6
   1a8c0:	mov	r1, r6
   1a8c4:	beq	1a9c4 <flatcc_json_parser_generic_json@@Base+0x73c>
   1a8c8:	sub	r1, r0, #9
   1a8cc:	cmp	r1, #49	; 0x31
   1a8d0:	bhi	1aed8 <flatcc_json_parser_generic_json@@Base+0xc50>
   1a8d4:	add	r0, pc, #8
   1a8d8:	ldr	r2, [r0, r1, lsl #2]
   1a8dc:	mov	r1, r4
   1a8e0:	add	pc, r0, r2
   1a8e4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a8e8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a8ec:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a8f0:	andeq	r0, r0, r0, ror #1
   1a8f4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a8f8:	andeq	r0, r0, r0, ror #1
   1a8fc:	andeq	r0, r0, r0, ror #1
   1a900:	andeq	r0, r0, r0, ror #1
   1a904:	andeq	r0, r0, r0, ror #1
   1a908:	andeq	r0, r0, r0, ror #1
   1a90c:	andeq	r0, r0, r0, ror #1
   1a910:	andeq	r0, r0, r0, ror #1
   1a914:	andeq	r0, r0, r0, ror #1
   1a918:	andeq	r0, r0, r0, ror #1
   1a91c:	andeq	r0, r0, r0, ror #1
   1a920:	andeq	r0, r0, r0, ror #1
   1a924:	andeq	r0, r0, r0, ror #1
   1a928:	andeq	r0, r0, r0, ror #1
   1a92c:	andeq	r0, r0, r0, ror #1
   1a930:	andeq	r0, r0, r0, ror #1
   1a934:	andeq	r0, r0, r0, ror #1
   1a938:	andeq	r0, r0, r0, ror #1
   1a93c:	andeq	r0, r0, r0, ror #1
   1a940:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a944:	andeq	r0, r0, r0, ror #1
   1a948:	andeq	r0, r0, r0, ror #1
   1a94c:	andeq	r0, r0, r0, ror #1
   1a950:	andeq	r0, r0, r0, ror #1
   1a954:	andeq	r0, r0, r0, ror #1
   1a958:	andeq	r0, r0, r0, ror #1
   1a95c:	andeq	r0, r0, r0, ror #1
   1a960:	andeq	r0, r0, r0, ror #1
   1a964:	andeq	r0, r0, r0, ror #1
   1a968:	andeq	r0, r0, r0, ror #1
   1a96c:	andeq	r0, r0, r0, ror #1
   1a970:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a974:	andeq	r0, r0, r0, ror #1
   1a978:	andeq	r0, r0, r0, ror #1
   1a97c:	andeq	r0, r0, r0, ror #1
   1a980:	andeq	r0, r0, r0, ror #1
   1a984:	andeq	r0, r0, r0, ror #1
   1a988:	andeq	r0, r0, r0, ror #1
   1a98c:	andeq	r0, r0, r0, ror #1
   1a990:	andeq	r0, r0, r0, ror #1
   1a994:	andeq	r0, r0, r0, ror #1
   1a998:	andeq	r0, r0, r0, ror #1
   1a99c:	andeq	r0, r0, r0, ror #1
   1a9a0:	andeq	r0, r0, r0, ror #1
   1a9a4:	andeq	r0, r0, r0, ror #1
   1a9a8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1a9ac:	ldr	r0, [r9]
   1a9b0:	cmp	r0, #0
   1a9b4:	bne	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1a9b8:	mov	r0, #6
   1a9bc:	b	1ace8 <flatcc_json_parser_generic_json@@Base+0xa60>
   1a9c0:	mov	r1, r6
   1a9c4:	ldr	r0, [r9]
   1a9c8:	cmp	r0, #0
   1a9cc:	beq	1aca8 <flatcc_json_parser_generic_json@@Base+0xa20>
   1a9d0:	mov	r4, r6
   1a9d4:	subs	r1, r4, r6
   1a9d8:	mov	r2, r8
   1a9dc:	movwne	r1, #1
   1a9e0:	cmp	r8, #0
   1a9e4:	movwne	r2, #1
   1a9e8:	beq	1aef8 <flatcc_json_parser_generic_json@@Base+0xc70>
   1a9ec:	cmp	r4, r6
   1a9f0:	beq	1af08 <flatcc_json_parser_generic_json@@Base+0xc80>
   1a9f4:	ldrb	r1, [sl, r8]
   1a9f8:	sub	r0, r6, r4
   1a9fc:	cmp	r1, #93	; 0x5d
   1aa00:	bne	1aa20 <flatcc_json_parser_generic_json@@Base+0x798>
   1aa04:	cmp	r0, #2
   1aa08:	blt	1aa50 <flatcc_json_parser_generic_json@@Base+0x7c8>
   1aa0c:	ldrb	r0, [r4]
   1aa10:	cmp	r0, #32
   1aa14:	bls	1aa3c <flatcc_json_parser_generic_json@@Base+0x7b4>
   1aa18:	mov	r7, r4
   1aa1c:	b	1aa64 <flatcc_json_parser_generic_json@@Base+0x7dc>
   1aa20:	cmp	r0, #2
   1aa24:	blt	1aab0 <flatcc_json_parser_generic_json@@Base+0x828>
   1aa28:	ldrb	r0, [r4]
   1aa2c:	cmp	r0, #32
   1aa30:	bls	1aa9c <flatcc_json_parser_generic_json@@Base+0x814>
   1aa34:	mov	r7, r4
   1aa38:	b	1aac4 <flatcc_json_parser_generic_json@@Base+0x83c>
   1aa3c:	bne	1aa50 <flatcc_json_parser_generic_json@@Base+0x7c8>
   1aa40:	mov	r7, r4
   1aa44:	ldrb	r0, [r7, #1]!
   1aa48:	cmp	r0, #32
   1aa4c:	bhi	1aa64 <flatcc_json_parser_generic_json@@Base+0x7dc>
   1aa50:	mov	r0, r5
   1aa54:	mov	r1, r4
   1aa58:	mov	r2, r6
   1aa5c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1aa60:	mov	r7, r0
   1aa64:	cmp	r7, r6
   1aa68:	mov	r4, r6
   1aa6c:	beq	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1aa70:	ldrb	r0, [r7]
   1aa74:	cmp	r0, #44	; 0x2c
   1aa78:	beq	1ab24 <flatcc_json_parser_generic_json@@Base+0x89c>
   1aa7c:	cmp	r0, #93	; 0x5d
   1aa80:	beq	1ac38 <flatcc_json_parser_generic_json@@Base+0x9b0>
   1aa84:	ldr	r0, [r9]
   1aa88:	mov	r4, r6
   1aa8c:	cmp	r0, #0
   1aa90:	bne	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1aa94:	mov	r0, #9
   1aa98:	b	1aaf8 <flatcc_json_parser_generic_json@@Base+0x870>
   1aa9c:	bne	1aab0 <flatcc_json_parser_generic_json@@Base+0x828>
   1aaa0:	mov	r7, r4
   1aaa4:	ldrb	r0, [r7, #1]!
   1aaa8:	cmp	r0, #32
   1aaac:	bhi	1aac4 <flatcc_json_parser_generic_json@@Base+0x83c>
   1aab0:	mov	r0, r5
   1aab4:	mov	r1, r4
   1aab8:	mov	r2, r6
   1aabc:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1aac0:	mov	r7, r0
   1aac4:	cmp	r7, r6
   1aac8:	mov	r4, r6
   1aacc:	beq	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1aad0:	ldrb	r0, [r7]
   1aad4:	cmp	r0, #44	; 0x2c
   1aad8:	beq	1ab64 <flatcc_json_parser_generic_json@@Base+0x8dc>
   1aadc:	cmp	r0, #125	; 0x7d
   1aae0:	beq	1ac38 <flatcc_json_parser_generic_json@@Base+0x9b0>
   1aae4:	ldr	r0, [r9]
   1aae8:	mov	r4, r6
   1aaec:	cmp	r0, #0
   1aaf0:	bne	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1aaf4:	mov	r0, #10
   1aaf8:	str	r0, [r9]
   1aafc:	ldr	r0, [sp, #8]
   1ab00:	add	r1, r7, #1
   1ab04:	mov	r4, r6
   1ab08:	ldr	r0, [r0]
   1ab0c:	sub	r0, r1, r0
   1ab10:	ldr	r1, [sp, #12]
   1ab14:	str	r0, [r1]
   1ab18:	ldr	r0, [sp, #16]
   1ab1c:	str	r7, [r0]
   1ab20:	b	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1ab24:	add	r1, r7, #1
   1ab28:	sub	r0, r6, r1
   1ab2c:	cmp	r0, #2
   1ab30:	blt	1abdc <flatcc_json_parser_generic_json@@Base+0x954>
   1ab34:	ldrb	r0, [r1]
   1ab38:	cmp	r0, #32
   1ab3c:	bls	1abcc <flatcc_json_parser_generic_json@@Base+0x944>
   1ab40:	mov	r7, r1
   1ab44:	cmp	r7, r6
   1ab48:	bne	1abf4 <flatcc_json_parser_generic_json@@Base+0x96c>
   1ab4c:	ldr	r0, [r9]
   1ab50:	mov	r4, r6
   1ab54:	cmp	r0, #0
   1ab58:	bne	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1ab5c:	mov	r0, #9
   1ab60:	b	1aba0 <flatcc_json_parser_generic_json@@Base+0x918>
   1ab64:	add	r1, r7, #1
   1ab68:	sub	r0, r6, r1
   1ab6c:	cmp	r0, #2
   1ab70:	blt	1ac14 <flatcc_json_parser_generic_json@@Base+0x98c>
   1ab74:	ldrb	r0, [r1]
   1ab78:	cmp	r0, #32
   1ab7c:	bls	1ac04 <flatcc_json_parser_generic_json@@Base+0x97c>
   1ab80:	mov	r7, r1
   1ab84:	cmp	r7, r6
   1ab88:	bne	1ac2c <flatcc_json_parser_generic_json@@Base+0x9a4>
   1ab8c:	ldr	r0, [r9]
   1ab90:	mov	r4, r6
   1ab94:	cmp	r0, #0
   1ab98:	bne	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1ab9c:	mov	r0, #10
   1aba0:	str	r0, [r9]
   1aba4:	ldr	r0, [sp, #8]
   1aba8:	ldr	r1, [sp, #4]
   1abac:	mov	r4, r6
   1abb0:	ldr	r0, [r0]
   1abb4:	sub	r0, r1, r0
   1abb8:	ldr	r1, [sp, #12]
   1abbc:	str	r0, [r1]
   1abc0:	ldr	r0, [sp, #16]
   1abc4:	str	r6, [r0]
   1abc8:	b	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1abcc:	bne	1abdc <flatcc_json_parser_generic_json@@Base+0x954>
   1abd0:	ldrb	r0, [r7, #2]!
   1abd4:	cmp	r0, #32
   1abd8:	bhi	1abec <flatcc_json_parser_generic_json@@Base+0x964>
   1abdc:	mov	r0, r5
   1abe0:	mov	r2, r6
   1abe4:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1abe8:	mov	r7, r0
   1abec:	cmp	r7, r6
   1abf0:	beq	1ab4c <flatcc_json_parser_generic_json@@Base+0x8c4>
   1abf4:	ldrb	r0, [r7]
   1abf8:	cmp	r0, #93	; 0x5d
   1abfc:	beq	1ac38 <flatcc_json_parser_generic_json@@Base+0x9b0>
   1ac00:	b	1ad90 <flatcc_json_parser_generic_json@@Base+0xb08>
   1ac04:	bne	1ac14 <flatcc_json_parser_generic_json@@Base+0x98c>
   1ac08:	ldrb	r0, [r7, #2]!
   1ac0c:	cmp	r0, #32
   1ac10:	bhi	1ac24 <flatcc_json_parser_generic_json@@Base+0x99c>
   1ac14:	mov	r0, r5
   1ac18:	mov	r2, r6
   1ac1c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1ac20:	mov	r7, r0
   1ac24:	cmp	r7, r6
   1ac28:	beq	1ab8c <flatcc_json_parser_generic_json@@Base+0x904>
   1ac2c:	ldrb	r0, [r7]
   1ac30:	cmp	r0, #125	; 0x7d
   1ac34:	bne	1ad90 <flatcc_json_parser_generic_json@@Base+0xb08>
   1ac38:	add	r1, r7, #1
   1ac3c:	sub	r0, r6, r1
   1ac40:	cmp	r0, #2
   1ac44:	blt	1ac70 <flatcc_json_parser_generic_json@@Base+0x9e8>
   1ac48:	ldrb	r0, [r1]
   1ac4c:	cmp	r0, #32
   1ac50:	bls	1ac5c <flatcc_json_parser_generic_json@@Base+0x9d4>
   1ac54:	mov	r4, r1
   1ac58:	b	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1ac5c:	bne	1ac70 <flatcc_json_parser_generic_json@@Base+0x9e8>
   1ac60:	ldrb	r0, [r7, #2]!
   1ac64:	cmp	r0, #32
   1ac68:	mov	r4, r7
   1ac6c:	bhi	1ac80 <flatcc_json_parser_generic_json@@Base+0x9f8>
   1ac70:	mov	r0, r5
   1ac74:	mov	r2, r6
   1ac78:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1ac7c:	mov	r4, r0
   1ac80:	subs	r1, r4, r6
   1ac84:	sub	r0, r8, #1
   1ac88:	movwne	r1, #1
   1ac8c:	subs	r2, r8, #1
   1ac90:	movwne	r2, #1
   1ac94:	beq	1af0c <flatcc_json_parser_generic_json@@Base+0xc84>
   1ac98:	cmp	r4, r6
   1ac9c:	mov	r8, r0
   1aca0:	bne	1a9f4 <flatcc_json_parser_generic_json@@Base+0x76c>
   1aca4:	b	1af0c <flatcc_json_parser_generic_json@@Base+0xc84>
   1aca8:	mov	r0, #6
   1acac:	str	r0, [r9]
   1acb0:	ldr	r0, [sp, #8]
   1acb4:	add	r2, r1, #1
   1acb8:	mov	r4, r6
   1acbc:	ldr	r0, [r0]
   1acc0:	sub	r0, r2, r0
   1acc4:	ldr	r2, [sp, #12]
   1acc8:	str	r0, [r2]
   1accc:	ldr	r0, [sp, #16]
   1acd0:	str	r1, [r0]
   1acd4:	b	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1acd8:	ldr	r0, [r9]
   1acdc:	cmp	r0, #0
   1ace0:	bne	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1ace4:	mov	r0, #16
   1ace8:	str	r0, [r9]
   1acec:	ldr	r0, [sp, #8]
   1acf0:	ldr	r1, [sp, #4]
   1acf4:	mov	r4, r6
   1acf8:	ldr	r0, [r0]
   1acfc:	sub	r0, r1, r0
   1ad00:	ldr	r1, [sp, #12]
   1ad04:	str	r0, [r1]
   1ad08:	ldr	r0, [sp, #16]
   1ad0c:	str	r6, [r0]
   1ad10:	b	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1ad14:	bne	1ad24 <flatcc_json_parser_generic_json@@Base+0xa9c>
   1ad18:	ldrb	r0, [r7, #2]!
   1ad1c:	cmp	r0, #32
   1ad20:	bhi	1ad34 <flatcc_json_parser_generic_json@@Base+0xaac>
   1ad24:	mov	r0, r5
   1ad28:	mov	r2, r6
   1ad2c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1ad30:	mov	r7, r0
   1ad34:	cmp	r7, r6
   1ad38:	beq	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1ad3c:	ldrb	r0, [r7]
   1ad40:	add	r8, r8, #1
   1ad44:	cmp	r0, #125	; 0x7d
   1ad48:	mov	r4, r7
   1ad4c:	bne	1ad90 <flatcc_json_parser_generic_json@@Base+0xb08>
   1ad50:	b	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1ad54:	bne	1ad64 <flatcc_json_parser_generic_json@@Base+0xadc>
   1ad58:	ldrb	r0, [r7, #2]!
   1ad5c:	cmp	r0, #32
   1ad60:	bhi	1ad74 <flatcc_json_parser_generic_json@@Base+0xaec>
   1ad64:	mov	r0, r5
   1ad68:	mov	r2, r6
   1ad6c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1ad70:	mov	r7, r0
   1ad74:	cmp	r7, r6
   1ad78:	beq	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1ad7c:	ldrb	r0, [r7]
   1ad80:	add	r8, r8, #1
   1ad84:	cmp	r0, #93	; 0x5d
   1ad88:	mov	r4, r7
   1ad8c:	beq	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1ad90:	add	r0, sp, #24
   1ad94:	cmp	r7, r6
   1ad98:	add	r0, r0, r8
   1ad9c:	bne	1a2dc <flatcc_json_parser_generic_json@@Base+0x54>
   1ada0:	b	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1ada4:	ldr	r0, [r9]
   1ada8:	mov	r1, r6
   1adac:	cmp	r0, #0
   1adb0:	bne	1ae84 <flatcc_json_parser_generic_json@@Base+0xbfc>
   1adb4:	mov	r0, #20
   1adb8:	ldr	r1, [sp, #4]
   1adbc:	str	r0, [r9]
   1adc0:	ldr	r0, [sp, #8]
   1adc4:	ldr	r0, [r0]
   1adc8:	sub	r0, r1, r0
   1adcc:	ldr	r1, [sp, #12]
   1add0:	str	r0, [r1]
   1add4:	ldr	r0, [sp, #16]
   1add8:	mov	r1, r6
   1addc:	str	r6, [r0]
   1ade0:	b	1ae84 <flatcc_json_parser_generic_json@@Base+0xbfc>
   1ade4:	ldrb	r1, [r0]
   1ade8:	cmp	r1, #34	; 0x22
   1adec:	beq	1aea4 <flatcc_json_parser_generic_json@@Base+0xc1c>
   1adf0:	cmp	r1, #32
   1adf4:	bcc	1ae30 <flatcc_json_parser_generic_json@@Base+0xba8>
   1adf8:	rsb	r0, r0, #0
   1adfc:	uxtb	r2, r1
   1ae00:	cmp	r2, #34	; 0x22
   1ae04:	cmpne	r2, #92	; 0x5c
   1ae08:	beq	1ae6c <flatcc_json_parser_generic_json@@Base+0xbe4>
   1ae0c:	add	r1, r6, r0
   1ae10:	cmp	r1, #1
   1ae14:	beq	1ada4 <flatcc_json_parser_generic_json@@Base+0xb1c>
   1ae18:	rsb	r1, r0, #0
   1ae1c:	sub	r0, r0, #1
   1ae20:	ldrb	r1, [r1, #1]
   1ae24:	cmp	r1, #32
   1ae28:	bcs	1adfc <flatcc_json_parser_generic_json@@Base+0xb74>
   1ae2c:	rsb	r0, r0, #0
   1ae30:	ldr	r1, [r9]
   1ae34:	cmp	r1, #0
   1ae38:	mov	r1, r6
   1ae3c:	bne	1ae84 <flatcc_json_parser_generic_json@@Base+0xbfc>
   1ae40:	ldr	r1, [sp, #8]
   1ae44:	str	r7, [r9]
   1ae48:	add	r2, r0, #1
   1ae4c:	ldr	r1, [r1]
   1ae50:	sub	r1, r2, r1
   1ae54:	ldr	r2, [sp, #12]
   1ae58:	str	r1, [r2]
   1ae5c:	ldr	r1, [sp, #16]
   1ae60:	str	r0, [r1]
   1ae64:	mov	r1, r6
   1ae68:	b	1ae84 <flatcc_json_parser_generic_json@@Base+0xbfc>
   1ae6c:	adds	r1, r6, r0
   1ae70:	mov	r1, r6
   1ae74:	beq	1ae84 <flatcc_json_parser_generic_json@@Base+0xbfc>
   1ae78:	rsb	r1, r0, #0
   1ae7c:	cmp	r2, #34	; 0x22
   1ae80:	beq	1aea8 <flatcc_json_parser_generic_json@@Base+0xc20>
   1ae84:	mov	r0, r5
   1ae88:	mov	r2, r6
   1ae8c:	mov	r3, r4
   1ae90:	bl	1995c <flatcc_json_parser_string_escape@@Base>
   1ae94:	cmp	r0, r6
   1ae98:	bne	1ade4 <flatcc_json_parser_generic_json@@Base+0xb5c>
   1ae9c:	mov	r1, r6
   1aea0:	b	1aec4 <flatcc_json_parser_generic_json@@Base+0xc3c>
   1aea4:	mov	r1, r0
   1aea8:	cmp	r1, r6
   1aeac:	beq	1aec4 <flatcc_json_parser_generic_json@@Base+0xc3c>
   1aeb0:	ldrb	r0, [r1]
   1aeb4:	cmp	r0, #34	; 0x22
   1aeb8:	bne	1aec4 <flatcc_json_parser_generic_json@@Base+0xc3c>
   1aebc:	add	r4, r1, #1
   1aec0:	b	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1aec4:	ldr	r0, [r9]
   1aec8:	cmp	r0, #0
   1aecc:	bne	1a9d0 <flatcc_json_parser_generic_json@@Base+0x748>
   1aed0:	mov	r0, #20
   1aed4:	b	1acac <flatcc_json_parser_generic_json@@Base+0xa24>
   1aed8:	cmp	r0, #93	; 0x5d
   1aedc:	beq	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1aee0:	cmp	r0, #125	; 0x7d
   1aee4:	mov	r1, r4
   1aee8:	beq	1a9d4 <flatcc_json_parser_generic_json@@Base+0x74c>
   1aeec:	b	1a9c4 <flatcc_json_parser_generic_json@@Base+0x73c>
   1aef0:	mov	r4, r7
   1aef4:	b	1af68 <flatcc_json_parser_generic_json@@Base+0xce0>
   1aef8:	mov	r0, r8
   1aefc:	cmp	r1, #0
   1af00:	beq	1af14 <flatcc_json_parser_generic_json@@Base+0xc8c>
   1af04:	b	1af68 <flatcc_json_parser_generic_json@@Base+0xce0>
   1af08:	mov	r0, r8
   1af0c:	cmp	r1, #0
   1af10:	bne	1af68 <flatcc_json_parser_generic_json@@Base+0xce0>
   1af14:	cmp	r2, #0
   1af18:	beq	1af68 <flatcc_json_parser_generic_json@@Base+0xce0>
   1af1c:	ldr	r1, [r9]
   1af20:	cmp	r1, #0
   1af24:	bne	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1af28:	add	r1, sp, #24
   1af2c:	add	r0, r1, r0
   1af30:	mov	r1, #10
   1af34:	ldrb	r0, [r0, #-1]
   1af38:	cmp	r0, #93	; 0x5d
   1af3c:	movweq	r1, #9
   1af40:	str	r1, [r9]
   1af44:	ldr	r0, [sp, #8]
   1af48:	ldr	r1, [sp, #4]
   1af4c:	ldr	r0, [r0]
   1af50:	sub	r0, r1, r0
   1af54:	ldr	r1, [sp, #12]
   1af58:	str	r0, [r1]
   1af5c:	ldr	r0, [sp, #16]
   1af60:	str	r6, [r0]
   1af64:	mov	r4, r6
   1af68:	mov	r0, r4
   1af6c:	sub	sp, fp, #28
   1af70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af74:	ldr	r0, [r9]
   1af78:	cmp	r0, #0
   1af7c:	bne	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1af80:	mov	r0, #10
   1af84:	str	r0, [r9]
   1af88:	b	1af44 <flatcc_json_parser_generic_json@@Base+0xcbc>
   1af8c:	ldr	r0, [r9]
   1af90:	cmp	r0, #0
   1af94:	bne	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1af98:	mov	r0, #4
   1af9c:	b	1afc4 <flatcc_json_parser_generic_json@@Base+0xd3c>
   1afa0:	ldr	r0, [r9]
   1afa4:	cmp	r0, #0
   1afa8:	bne	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1afac:	mov	r0, #2
   1afb0:	b	1afc4 <flatcc_json_parser_generic_json@@Base+0xd3c>
   1afb4:	ldr	r0, [r9]
   1afb8:	cmp	r0, #0
   1afbc:	bne	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>
   1afc0:	mov	r0, #5
   1afc4:	str	r0, [r9]
   1afc8:	ldr	r0, [sp, #8]
   1afcc:	add	r1, r7, #1
   1afd0:	ldr	r0, [r0]
   1afd4:	sub	r0, r1, r0
   1afd8:	ldr	r1, [sp, #12]
   1afdc:	str	r0, [r1]
   1afe0:	ldr	r0, [sp, #16]
   1afe4:	str	r7, [r0]
   1afe8:	b	1af64 <flatcc_json_parser_generic_json@@Base+0xcdc>

0001afec <flatcc_json_parser_double@@Base>:
   1afec:	push	{r4, r5, r6, r7, fp, lr}
   1aff0:	add	fp, sp, #16
   1aff4:	mov	r5, r0
   1aff8:	mov	r0, #0
   1affc:	mov	r6, r1
   1b000:	cmp	r1, r2
   1b004:	str	r0, [r3]
   1b008:	str	r0, [r3, #4]
   1b00c:	moveq	r0, r6
   1b010:	popeq	{r4, r5, r6, r7, fp, pc}
   1b014:	mov	r0, r6
   1b018:	mov	r4, r2
   1b01c:	mov	r7, r3
   1b020:	ldrb	r1, [r0], #1
   1b024:	cmp	r1, #45	; 0x2d
   1b028:	movne	r0, r6
   1b02c:	sub	r2, r2, r0
   1b030:	cmp	r2, #2
   1b034:	blt	1b060 <flatcc_json_parser_double@@Base+0x74>
   1b038:	sub	r1, r1, #45	; 0x2d
   1b03c:	clz	r1, r1
   1b040:	lsr	r1, r1, #5
   1b044:	ldrb	r1, [r6, r1]
   1b048:	cmp	r1, #46	; 0x2e
   1b04c:	beq	1b0b0 <flatcc_json_parser_double@@Base+0xc4>
   1b050:	cmp	r1, #48	; 0x30
   1b054:	ldrbeq	r0, [r0, #1]
   1b058:	cmpeq	r0, #48	; 0x30
   1b05c:	beq	1b0b0 <flatcc_json_parser_double@@Base+0xc4>
   1b060:	sub	r1, r4, r6
   1b064:	mov	r0, r6
   1b068:	mov	r2, r7
   1b06c:	bl	1b0e0 <flatcc_json_parser_double@@Base+0xf4>
   1b070:	cmp	r0, #0
   1b074:	cmpne	r0, r6
   1b078:	popne	{r4, r5, r6, r7, fp, pc}
   1b07c:	vldr	d0, [r7]
   1b080:	bl	12924 <__isinf@plt>
   1b084:	ldr	r1, [r5, #24]
   1b088:	cmp	r0, #0
   1b08c:	beq	1b0a0 <flatcc_json_parser_double@@Base+0xb4>
   1b090:	cmp	r1, #0
   1b094:	bne	1b0a8 <flatcc_json_parser_double@@Base+0xbc>
   1b098:	mov	r0, #7
   1b09c:	b	1b0c0 <flatcc_json_parser_double@@Base+0xd4>
   1b0a0:	cmp	r1, #0
   1b0a4:	beq	1b0bc <flatcc_json_parser_double@@Base+0xd0>
   1b0a8:	mov	r0, r4
   1b0ac:	pop	{r4, r5, r6, r7, fp, pc}
   1b0b0:	ldr	r0, [r5, #24]
   1b0b4:	cmp	r0, #0
   1b0b8:	bne	1b0a8 <flatcc_json_parser_double@@Base+0xbc>
   1b0bc:	mov	r0, #6
   1b0c0:	str	r6, [r5, #36]	; 0x24
   1b0c4:	add	r2, r6, #1
   1b0c8:	ldr	r1, [r5, #4]
   1b0cc:	sub	r1, r2, r1
   1b0d0:	str	r1, [r5, #20]
   1b0d4:	str	r0, [r5, #24]
   1b0d8:	mov	r0, r4
   1b0dc:	pop	{r4, r5, r6, r7, fp, pc}
   1b0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0e4:	add	fp, sp, #28
   1b0e8:	sub	sp, sp, #36	; 0x24
   1b0ec:	cmp	r1, #1000	; 0x3e8
   1b0f0:	mov	r3, r1
   1b0f4:	mov	r6, #0
   1b0f8:	mov	r9, r0
   1b0fc:	movge	r1, #1000	; 0x3e8
   1b100:	str	r6, [r2]
   1b104:	str	r6, [r2, #4]
   1b108:	add	lr, r0, r1
   1b10c:	add	r4, lr, #1
   1b110:	cmp	r4, r0
   1b114:	beq	1b188 <flatcc_json_parser_double@@Base+0x19c>
   1b118:	ldrb	r0, [r9]
   1b11c:	mov	r5, r9
   1b120:	cmp	r0, #45	; 0x2d
   1b124:	bne	1b13c <flatcc_json_parser_double@@Base+0x150>
   1b128:	cmp	r1, #0
   1b12c:	beq	1b4f4 <flatcc_json_parser_double@@Base+0x508>
   1b130:	add	r5, r9, #1
   1b134:	mov	r6, #1
   1b138:	ldrb	r0, [r5]
   1b13c:	cmp	r0, #48	; 0x30
   1b140:	bne	1b170 <flatcc_json_parser_double@@Base+0x184>
   1b144:	add	ip, r5, #1
   1b148:	cmp	r5, lr
   1b14c:	beq	1b1d8 <flatcc_json_parser_double@@Base+0x1ec>
   1b150:	ldrb	r1, [ip]
   1b154:	orr	r0, r1, #32
   1b158:	cmp	r0, #120	; 0x78
   1b15c:	bne	1b1a8 <flatcc_json_parser_double@@Base+0x1bc>
   1b160:	mov	r0, #0
   1b164:	str	r0, [r2]
   1b168:	str	r0, [r2, #4]
   1b16c:	b	1b188 <flatcc_json_parser_double@@Base+0x19c>
   1b170:	sub	r1, r0, #49	; 0x31
   1b174:	uxtb	r1, r1
   1b178:	cmp	r1, #9
   1b17c:	bcc	1b190 <flatcc_json_parser_double@@Base+0x1a4>
   1b180:	cmp	r6, #0
   1b184:	movne	r9, #0
   1b188:	mov	r2, r9
   1b18c:	b	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b190:	sub	r0, r0, #48	; 0x30
   1b194:	add	ip, r5, #1
   1b198:	asr	r1, r0, #31
   1b19c:	cmp	ip, r4
   1b1a0:	bne	1b1e8 <flatcc_json_parser_double@@Base+0x1fc>
   1b1a4:	b	1b4f4 <flatcc_json_parser_double@@Base+0x508>
   1b1a8:	cmp	r1, #48	; 0x30
   1b1ac:	mov	r0, #0
   1b1b0:	mov	r1, #0
   1b1b4:	bne	1b1e0 <flatcc_json_parser_double@@Base+0x1f4>
   1b1b8:	add	r0, r5, #2
   1b1bc:	mov	ip, r0
   1b1c0:	cmp	r4, r0
   1b1c4:	beq	1b1d8 <flatcc_json_parser_double@@Base+0x1ec>
   1b1c8:	mov	r0, ip
   1b1cc:	ldrb	r1, [r0], #1
   1b1d0:	cmp	r1, #48	; 0x30
   1b1d4:	beq	1b1bc <flatcc_json_parser_double@@Base+0x1d0>
   1b1d8:	mov	r0, #0
   1b1dc:	mov	r1, #0
   1b1e0:	cmp	ip, r4
   1b1e4:	beq	1b4f4 <flatcc_json_parser_double@@Base+0x508>
   1b1e8:	movw	r5, #39321	; 0x9999
   1b1ec:	mov	sl, #10
   1b1f0:	mov	r7, ip
   1b1f4:	str	r6, [sp, #20]
   1b1f8:	str	r2, [sp, #24]
   1b1fc:	movt	r5, #6553	; 0x1999
   1b200:	ldrb	r8, [r7]
   1b204:	sub	r2, r8, #48	; 0x30
   1b208:	uxtb	r6, r2
   1b20c:	mov	r2, #0
   1b210:	cmp	r6, #9
   1b214:	bhi	1b24c <flatcc_json_parser_double@@Base+0x260>
   1b218:	movw	r6, #39320	; 0x9998
   1b21c:	movt	r6, #39321	; 0x9999
   1b220:	subs	r6, r6, r0
   1b224:	sbcs	r6, r5, r1
   1b228:	bcc	1b264 <flatcc_json_parser_double@@Base+0x278>
   1b22c:	add	r1, r1, r1, lsl #2
   1b230:	add	r7, r7, #1
   1b234:	lsl	r1, r1, #1
   1b238:	umlal	r8, r1, r0, sl
   1b23c:	subs	r0, r8, #48	; 0x30
   1b240:	sbc	r1, r1, #0
   1b244:	cmp	r4, r7
   1b248:	bne	1b200 <flatcc_json_parser_double@@Base+0x214>
   1b24c:	mov	r5, r1
   1b250:	mov	sl, #0
   1b254:	str	r0, [sp, #28]
   1b258:	cmp	r7, r4
   1b25c:	bne	1b288 <flatcc_json_parser_double@@Base+0x29c>
   1b260:	b	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b264:	adds	r6, r0, #1
   1b268:	mov	sl, #1
   1b26c:	adc	r5, r1, #0
   1b270:	cmp	r8, #52	; 0x34
   1b274:	movls	r6, r0
   1b278:	movls	r5, r1
   1b27c:	str	r6, [sp, #28]
   1b280:	cmp	r7, r4
   1b284:	beq	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b288:	sub	r8, r7, ip
   1b28c:	mvn	ip, r3
   1b290:	mov	r3, #0
   1b294:	cmn	ip, #1000	; 0x3e8
   1b298:	mov	r0, ip
   1b29c:	mvnlt	r0, #1000	; 0x3e8
   1b2a0:	mvn	r0, r0
   1b2a4:	sub	r0, r0, r7
   1b2a8:	add	r0, r9, r0
   1b2ac:	ldrb	r1, [r7]
   1b2b0:	cmp	r1, #48	; 0x30
   1b2b4:	bne	1b2d8 <flatcc_json_parser_double@@Base+0x2ec>
   1b2b8:	add	r1, r7, #1
   1b2bc:	cmp	r7, lr
   1b2c0:	sub	r0, r0, #1
   1b2c4:	add	r3, r3, #1
   1b2c8:	mov	r7, r1
   1b2cc:	bne	1b2ac <flatcc_json_parser_double@@Base+0x2c0>
   1b2d0:	mov	r7, r1
   1b2d4:	b	1b320 <flatcc_json_parser_double@@Base+0x334>
   1b2d8:	sub	r1, r1, #49	; 0x31
   1b2dc:	uxtb	r1, r1
   1b2e0:	cmp	r1, #8
   1b2e4:	bhi	1b320 <flatcc_json_parser_double@@Base+0x334>
   1b2e8:	mvn	r2, #0
   1b2ec:	mov	r1, r2
   1b2f0:	cmp	r0, #0
   1b2f4:	beq	1b314 <flatcc_json_parser_double@@Base+0x328>
   1b2f8:	ldrb	r2, [r7, -r1]
   1b2fc:	sub	r0, r0, #1
   1b300:	sub	r2, r2, #48	; 0x30
   1b304:	uxtb	r6, r2
   1b308:	sub	r2, r1, #1
   1b30c:	cmp	r6, #10
   1b310:	bcc	1b2ec <flatcc_json_parser_double@@Base+0x300>
   1b314:	sub	r3, r3, r1
   1b318:	sub	r7, r7, r1
   1b31c:	mov	sl, #1
   1b320:	mov	r2, #0
   1b324:	cmp	r7, r4
   1b328:	beq	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b32c:	ldrb	r0, [r7]
   1b330:	cmp	r0, #46	; 0x2e
   1b334:	bne	1b4cc <flatcc_json_parser_double@@Base+0x4e0>
   1b338:	mov	r6, r7
   1b33c:	ldrb	r0, [r6, #1]!
   1b340:	sub	r1, r0, #48	; 0x30
   1b344:	uxtb	r1, r1
   1b348:	cmp	r1, #9
   1b34c:	bhi	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b350:	cmp	r7, lr
   1b354:	beq	1b40c <flatcc_json_parser_double@@Base+0x420>
   1b358:	cmn	ip, #1000	; 0x3e8
   1b35c:	mvn	r1, #1
   1b360:	str	sl, [sp, #12]
   1b364:	str	r6, [sp, #8]
   1b368:	str	r8, [sp, #16]
   1b36c:	mvnlt	ip, #1000	; 0x3e8
   1b370:	sub	r1, r1, ip
   1b374:	sub	r1, r1, r7
   1b378:	add	sl, r9, r1
   1b37c:	mov	r1, #0
   1b380:	mov	ip, r1
   1b384:	ldr	r1, [sp, #28]
   1b388:	movw	r6, #39320	; 0x9998
   1b38c:	movt	r6, #39321	; 0x9999
   1b390:	subs	r1, r6, r1
   1b394:	movw	r1, #39321	; 0x9999
   1b398:	movt	r1, #6553	; 0x1999
   1b39c:	sbcs	r1, r1, r5
   1b3a0:	bcc	1b41c <flatcc_json_parser_double@@Base+0x430>
   1b3a4:	add	r1, r5, r5, lsl #2
   1b3a8:	ldr	r5, [sp, #28]
   1b3ac:	uxtb	r0, r0
   1b3b0:	mov	r6, #10
   1b3b4:	lsl	r1, r1, #1
   1b3b8:	umlal	r0, r1, r5, r6
   1b3bc:	add	r6, r7, ip
   1b3c0:	subs	r0, r0, #48	; 0x30
   1b3c4:	sbc	r5, r1, #0
   1b3c8:	cmp	sl, ip
   1b3cc:	str	r0, [sp, #28]
   1b3d0:	beq	1b3f4 <flatcc_json_parser_double@@Base+0x408>
   1b3d4:	ldrb	r0, [r6, #2]
   1b3d8:	mov	r8, r5
   1b3dc:	add	r1, ip, #1
   1b3e0:	sub	r5, r0, #48	; 0x30
   1b3e4:	uxtb	r5, r5
   1b3e8:	cmp	r5, #10
   1b3ec:	mov	r5, r8
   1b3f0:	bcc	1b380 <flatcc_json_parser_double@@Base+0x394>
   1b3f4:	ldr	r8, [sp, #16]
   1b3f8:	ldr	sl, [sp, #12]
   1b3fc:	sub	r0, r3, #1
   1b400:	add	r7, r6, #2
   1b404:	sub	r3, r0, ip
   1b408:	b	1b45c <flatcc_json_parser_double@@Base+0x470>
   1b40c:	mov	r7, r6
   1b410:	cmp	r7, r4
   1b414:	bne	1b468 <flatcc_json_parser_double@@Base+0x47c>
   1b418:	b	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b41c:	ldr	sl, [sp, #12]
   1b420:	ldr	r8, [sp, #16]
   1b424:	add	r1, r7, ip
   1b428:	sub	r3, r3, ip
   1b42c:	add	r7, r1, #1
   1b430:	cmp	sl, #0
   1b434:	bne	1b45c <flatcc_json_parser_double@@Base+0x470>
   1b438:	ldr	r6, [sp, #28]
   1b43c:	uxtb	r0, r0
   1b440:	mov	sl, #1
   1b444:	adds	r1, r6, #1
   1b448:	adc	ip, r5, #0
   1b44c:	cmp	r0, #52	; 0x34
   1b450:	movhi	r6, r1
   1b454:	movhi	r5, ip
   1b458:	str	r6, [sp, #28]
   1b45c:	ldr	r6, [sp, #8]
   1b460:	cmp	r7, r4
   1b464:	beq	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b468:	sub	r0, r7, r6
   1b46c:	add	r8, r0, r8
   1b470:	ldrb	r0, [r7]
   1b474:	cmp	r0, #48	; 0x30
   1b478:	bne	1b490 <flatcc_json_parser_double@@Base+0x4a4>
   1b47c:	add	r7, r7, #1
   1b480:	add	r3, r3, #1
   1b484:	cmp	r4, r7
   1b488:	bne	1b470 <flatcc_json_parser_double@@Base+0x484>
   1b48c:	b	1b4cc <flatcc_json_parser_double@@Base+0x4e0>
   1b490:	sub	r0, r0, #49	; 0x31
   1b494:	uxtb	r0, r0
   1b498:	cmp	r0, #8
   1b49c:	bhi	1b4cc <flatcc_json_parser_double@@Base+0x4e0>
   1b4a0:	add	r0, r7, #1
   1b4a4:	mov	sl, #1
   1b4a8:	mov	r7, r0
   1b4ac:	cmp	r4, r0
   1b4b0:	beq	1b4cc <flatcc_json_parser_double@@Base+0x4e0>
   1b4b4:	mov	r0, r7
   1b4b8:	ldrb	r1, [r0], #1
   1b4bc:	sub	r1, r1, #48	; 0x30
   1b4c0:	uxtb	r1, r1
   1b4c4:	cmp	r1, #10
   1b4c8:	bcc	1b4a8 <flatcc_json_parser_double@@Base+0x4bc>
   1b4cc:	cmp	r7, r4
   1b4d0:	beq	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b4d4:	ldrb	r0, [r7]
   1b4d8:	mov	ip, #0
   1b4dc:	orr	r0, r0, #32
   1b4e0:	cmp	r0, #101	; 0x65
   1b4e4:	bne	1b504 <flatcc_json_parser_double@@Base+0x518>
   1b4e8:	sub	r0, r4, r7
   1b4ec:	cmp	r0, #2
   1b4f0:	bge	1b574 <flatcc_json_parser_double@@Base+0x588>
   1b4f4:	mov	r2, #0
   1b4f8:	mov	r0, r2
   1b4fc:	sub	sp, fp, #28
   1b500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b504:	mov	r0, #0
   1b508:	cmp	r7, r4
   1b50c:	mov	r2, #0
   1b510:	beq	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b514:	ldr	r1, [sp, #28]
   1b518:	cmp	ip, #0
   1b51c:	vmov.i32	d16, #0	; 0x00000000
   1b520:	rsbne	r0, r0, #0
   1b524:	orrs	r1, r1, r5
   1b528:	beq	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b52c:	add	r1, r8, r3
   1b530:	add	r4, r1, r0
   1b534:	cmn	r4, #324	; 0x144
   1b538:	blt	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b53c:	movw	r0, #310	; 0x136
   1b540:	cmp	r4, r0
   1b544:	ble	1b5a8 <flatcc_json_parser_double@@Base+0x5bc>
   1b548:	vldr	d16, [pc, #968]	; 1b918 <flatcc_json_parser_double@@Base+0x92c>
   1b54c:	ldr	r0, [sp, #24]
   1b550:	vstr	d16, [r0]
   1b554:	ldr	r0, [sp, #20]
   1b558:	cmp	r0, #0
   1b55c:	ldrne	r0, [sp, #24]
   1b560:	vldrne	d16, [r0]
   1b564:	vnegne.f64	d16, d16
   1b568:	vstrne	d16, [r0]
   1b56c:	mov	r2, r7
   1b570:	b	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b574:	mov	r1, r7
   1b578:	ldrb	r0, [r1, #1]!
   1b57c:	cmp	r0, #45	; 0x2d
   1b580:	beq	1b6a4 <flatcc_json_parser_double@@Base+0x6b8>
   1b584:	mov	ip, #0
   1b588:	cmp	r0, #43	; 0x2b
   1b58c:	bne	1b6b4 <flatcc_json_parser_double@@Base+0x6c8>
   1b590:	add	r1, r7, #2
   1b594:	mov	r2, #0
   1b598:	cmp	r1, r4
   1b59c:	beq	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b5a0:	mov	ip, #0
   1b5a4:	b	1b6b4 <flatcc_json_parser_double@@Base+0x6c8>
   1b5a8:	mov	r0, #0
   1b5ac:	cmp	r0, r5, lsr #21
   1b5b0:	bne	1b714 <flatcc_json_parser_double@@Base+0x728>
   1b5b4:	cmp	r4, #22
   1b5b8:	bhi	1b714 <flatcc_json_parser_double@@Base+0x728>
   1b5bc:	ldr	r0, [sp, #28]
   1b5c0:	mov	r1, r5
   1b5c4:	bl	1dc78 <flatcc_json_parser_struct_as_root@@Base+0x420>
   1b5c8:	sub	r2, r4, r8
   1b5cc:	vmov	d16, r0, r1
   1b5d0:	add	r0, r2, #22
   1b5d4:	cmp	r0, #44	; 0x2c
   1b5d8:	bhi	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b5dc:	add	r1, pc, #4
   1b5e0:	ldr	r0, [r1, r0, lsl #2]
   1b5e4:	add	pc, r1, r0
   1b5e8:	strheq	r0, [r0], -r4
   1b5ec:	andeq	r0, r0, r8, ror r1
   1b5f0:	andeq	r0, r0, r0, lsl #3
   1b5f4:	andeq	r0, r0, r8, lsl #3
   1b5f8:	muleq	r0, r0, r1
   1b5fc:	muleq	r0, r8, r1
   1b600:	andeq	r0, r0, r0, lsr #3
   1b604:	andeq	r0, r0, r8, lsr #3
   1b608:			; <UNDEFINED> instruction: 0x000001b0
   1b60c:			; <UNDEFINED> instruction: 0x000001b8
   1b610:	andeq	r0, r0, r0, asr #3
   1b614:	andeq	r0, r0, r8, asr #3
   1b618:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1b61c:	ldrdeq	r0, [r0], -r8
   1b620:	andeq	r0, r0, r0, ror #3
   1b624:	andeq	r0, r0, r8, ror #3
   1b628:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1b62c:	strdeq	r0, [r0], -r8
   1b630:	andeq	r0, r0, r0, lsl #4
   1b634:	andeq	r0, r0, r8, lsl #4
   1b638:	andeq	r0, r0, r0, lsl r2
   1b63c:	andeq	r0, r0, r8, lsl r2
   1b640:			; <UNDEFINED> instruction: 0xffffff64
   1b644:	andeq	r0, r0, r4, lsr #4
   1b648:	andeq	r0, r0, r0, lsr r2
   1b64c:	andeq	r0, r0, ip, lsr r2
   1b650:	andeq	r0, r0, r8, asr #4
   1b654:	andeq	r0, r0, r4, asr r2
   1b658:	andeq	r0, r0, r0, ror #4
   1b65c:	andeq	r0, r0, ip, ror #4
   1b660:	andeq	r0, r0, r8, ror r2
   1b664:	andeq	r0, r0, r4, lsl #5
   1b668:	muleq	r0, r0, r2
   1b66c:	muleq	r0, ip, r2
   1b670:	andeq	r0, r0, r8, lsr #5
   1b674:			; <UNDEFINED> instruction: 0x000002b4
   1b678:	andeq	r0, r0, r0, asr #5
   1b67c:	andeq	r0, r0, ip, asr #5
   1b680:	ldrdeq	r0, [r0], -r8
   1b684:	andeq	r0, r0, r4, ror #5
   1b688:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1b68c:	strdeq	r0, [r0], -ip
   1b690:	andeq	r0, r0, r8, lsl #6
   1b694:	andeq	r0, r0, r4, lsl r3
   1b698:	andeq	r0, r0, r0, lsr #6
   1b69c:	vldr	d17, [pc, #796]	; 1b9c0 <flatcc_json_parser_double@@Base+0x9d4>
   1b6a0:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b6a4:	add	r1, r7, #2
   1b6a8:	mov	ip, #1
   1b6ac:	cmp	r1, r4
   1b6b0:	beq	1b4f4 <flatcc_json_parser_double@@Base+0x508>
   1b6b4:	ldrb	r0, [r1]
   1b6b8:	mov	r7, r5
   1b6bc:	mov	r2, #0
   1b6c0:	sub	r0, r0, #48	; 0x30
   1b6c4:	uxtb	r5, r0
   1b6c8:	cmp	r5, #9
   1b6cc:	bhi	1b4f8 <flatcc_json_parser_double@@Base+0x50c>
   1b6d0:	mov	r5, r7
   1b6d4:	add	r7, r1, #1
   1b6d8:	cmp	r1, lr
   1b6dc:	beq	1b508 <flatcc_json_parser_double@@Base+0x51c>
   1b6e0:	ldrb	r1, [r7]
   1b6e4:	sub	r2, r1, #48	; 0x30
   1b6e8:	uxtb	r2, r2
   1b6ec:	cmp	r2, #9
   1b6f0:	bhi	1b508 <flatcc_json_parser_double@@Base+0x51c>
   1b6f4:	cmp	r0, #32768	; 0x8000
   1b6f8:	add	r7, r7, #1
   1b6fc:	addlt	r0, r0, r0, lsl #2
   1b700:	addlt	r0, r1, r0, lsl #1
   1b704:	sublt	r0, r0, #48	; 0x30
   1b708:	cmp	r4, r7
   1b70c:	bne	1b6e0 <flatcc_json_parser_double@@Base+0x6f4>
   1b710:	b	1b508 <flatcc_json_parser_double@@Base+0x51c>
   1b714:	ldr	r0, [sp, #24]
   1b718:	mov	r1, r5
   1b71c:	mov	r2, r4
   1b720:	mov	r3, r8
   1b724:	str	sl, [sp]
   1b728:	str	r0, [sp, #4]
   1b72c:	ldr	r0, [sp, #28]
   1b730:	bl	19230 <grisu3_diy_fp_encode_double@@Base>
   1b734:	cmp	r0, #0
   1b738:	bne	1b554 <flatcc_json_parser_double@@Base+0x568>
   1b73c:	add	r1, sp, #32
   1b740:	mov	r0, r9
   1b744:	bl	1299c <strtod@plt>
   1b748:	ldr	r0, [sp, #24]
   1b74c:	vstr	d0, [r0]
   1b750:	ldr	r0, [sp, #32]
   1b754:	cmp	r0, r7
   1b758:	movcc	r7, r0
   1b75c:	b	1b56c <flatcc_json_parser_double@@Base+0x580>
   1b760:	vldr	d17, [pc, #440]	; 1b920 <flatcc_json_parser_double@@Base+0x934>
   1b764:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b768:	vldr	d17, [pc, #440]	; 1b928 <flatcc_json_parser_double@@Base+0x93c>
   1b76c:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b770:	vldr	d17, [pc, #440]	; 1b930 <flatcc_json_parser_double@@Base+0x944>
   1b774:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b778:	vldr	d17, [pc, #440]	; 1b938 <flatcc_json_parser_double@@Base+0x94c>
   1b77c:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b780:	vldr	d17, [pc, #440]	; 1b940 <flatcc_json_parser_double@@Base+0x954>
   1b784:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b788:	vldr	d17, [pc, #440]	; 1b948 <flatcc_json_parser_double@@Base+0x95c>
   1b78c:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b790:	vldr	d17, [pc, #440]	; 1b950 <flatcc_json_parser_double@@Base+0x964>
   1b794:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b798:	vldr	d17, [pc, #440]	; 1b958 <flatcc_json_parser_double@@Base+0x96c>
   1b79c:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7a0:	vldr	d17, [pc, #440]	; 1b960 <flatcc_json_parser_double@@Base+0x974>
   1b7a4:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7a8:	vldr	d17, [pc, #440]	; 1b968 <flatcc_json_parser_double@@Base+0x97c>
   1b7ac:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7b0:	vldr	d17, [pc, #440]	; 1b970 <flatcc_json_parser_double@@Base+0x984>
   1b7b4:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7b8:	vldr	d17, [pc, #440]	; 1b978 <flatcc_json_parser_double@@Base+0x98c>
   1b7bc:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7c0:	vldr	d17, [pc, #440]	; 1b980 <flatcc_json_parser_double@@Base+0x994>
   1b7c4:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7c8:	vldr	d17, [pc, #440]	; 1b988 <flatcc_json_parser_double@@Base+0x99c>
   1b7cc:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7d0:	vldr	d17, [pc, #440]	; 1b990 <flatcc_json_parser_double@@Base+0x9a4>
   1b7d4:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7d8:	vldr	d17, [pc, #440]	; 1b998 <flatcc_json_parser_double@@Base+0x9ac>
   1b7dc:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7e0:	vldr	d17, [pc, #440]	; 1b9a0 <flatcc_json_parser_double@@Base+0x9b4>
   1b7e4:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7e8:	vldr	d17, [pc, #440]	; 1b9a8 <flatcc_json_parser_double@@Base+0x9bc>
   1b7ec:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7f0:	vldr	d17, [pc, #440]	; 1b9b0 <flatcc_json_parser_double@@Base+0x9c4>
   1b7f4:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b7f8:	vldr	d17, [pc, #440]	; 1b9b8 <flatcc_json_parser_double@@Base+0x9cc>
   1b7fc:	b	1b804 <flatcc_json_parser_double@@Base+0x818>
   1b800:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b804:	vdiv.f64	d16, d16, d17
   1b808:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b80c:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b810:	vmul.f64	d16, d16, d17
   1b814:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b818:	vldr	d17, [pc, #408]	; 1b9b8 <flatcc_json_parser_double@@Base+0x9cc>
   1b81c:	vmul.f64	d16, d16, d17
   1b820:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b824:	vldr	d17, [pc, #388]	; 1b9b0 <flatcc_json_parser_double@@Base+0x9c4>
   1b828:	vmul.f64	d16, d16, d17
   1b82c:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b830:	vldr	d17, [pc, #368]	; 1b9a8 <flatcc_json_parser_double@@Base+0x9bc>
   1b834:	vmul.f64	d16, d16, d17
   1b838:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b83c:	vldr	d17, [pc, #348]	; 1b9a0 <flatcc_json_parser_double@@Base+0x9b4>
   1b840:	vmul.f64	d16, d16, d17
   1b844:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b848:	vldr	d17, [pc, #328]	; 1b998 <flatcc_json_parser_double@@Base+0x9ac>
   1b84c:	vmul.f64	d16, d16, d17
   1b850:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b854:	vldr	d17, [pc, #308]	; 1b990 <flatcc_json_parser_double@@Base+0x9a4>
   1b858:	vmul.f64	d16, d16, d17
   1b85c:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b860:	vldr	d17, [pc, #288]	; 1b988 <flatcc_json_parser_double@@Base+0x99c>
   1b864:	vmul.f64	d16, d16, d17
   1b868:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b86c:	vldr	d17, [pc, #268]	; 1b980 <flatcc_json_parser_double@@Base+0x994>
   1b870:	vmul.f64	d16, d16, d17
   1b874:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b878:	vldr	d17, [pc, #248]	; 1b978 <flatcc_json_parser_double@@Base+0x98c>
   1b87c:	vmul.f64	d16, d16, d17
   1b880:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b884:	vldr	d17, [pc, #228]	; 1b970 <flatcc_json_parser_double@@Base+0x984>
   1b888:	vmul.f64	d16, d16, d17
   1b88c:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b890:	vldr	d17, [pc, #208]	; 1b968 <flatcc_json_parser_double@@Base+0x97c>
   1b894:	vmul.f64	d16, d16, d17
   1b898:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b89c:	vldr	d17, [pc, #188]	; 1b960 <flatcc_json_parser_double@@Base+0x974>
   1b8a0:	vmul.f64	d16, d16, d17
   1b8a4:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8a8:	vldr	d17, [pc, #168]	; 1b958 <flatcc_json_parser_double@@Base+0x96c>
   1b8ac:	vmul.f64	d16, d16, d17
   1b8b0:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8b4:	vldr	d17, [pc, #148]	; 1b950 <flatcc_json_parser_double@@Base+0x964>
   1b8b8:	vmul.f64	d16, d16, d17
   1b8bc:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8c0:	vldr	d17, [pc, #128]	; 1b948 <flatcc_json_parser_double@@Base+0x95c>
   1b8c4:	vmul.f64	d16, d16, d17
   1b8c8:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8cc:	vldr	d17, [pc, #108]	; 1b940 <flatcc_json_parser_double@@Base+0x954>
   1b8d0:	vmul.f64	d16, d16, d17
   1b8d4:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8d8:	vldr	d17, [pc, #88]	; 1b938 <flatcc_json_parser_double@@Base+0x94c>
   1b8dc:	vmul.f64	d16, d16, d17
   1b8e0:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8e4:	vldr	d17, [pc, #68]	; 1b930 <flatcc_json_parser_double@@Base+0x944>
   1b8e8:	vmul.f64	d16, d16, d17
   1b8ec:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8f0:	vldr	d17, [pc, #48]	; 1b928 <flatcc_json_parser_double@@Base+0x93c>
   1b8f4:	vmul.f64	d16, d16, d17
   1b8f8:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b8fc:	vldr	d17, [pc, #28]	; 1b920 <flatcc_json_parser_double@@Base+0x934>
   1b900:	vmul.f64	d16, d16, d17
   1b904:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b908:	vldr	d17, [pc, #176]	; 1b9c0 <flatcc_json_parser_double@@Base+0x9d4>
   1b90c:	vmul.f64	d16, d16, d17
   1b910:	b	1b54c <flatcc_json_parser_double@@Base+0x560>
   1b914:	nop	{0}
   1b918:	andeq	r0, r0, r0
   1b91c:	svcvc	0x00f00000	; IMB
   1b920:	usatle	lr, #2, r0, asr #30
   1b924:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1b928:	ldmvc	r5!, {r6, sl, fp, pc}
   1b92c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1b930:	addsvs	r3, r1, r0, lsl #26
   1b934:	mvnmi	r5, #228, 16	; 0xe40000
   1b938:	strbvs	ip, [lr, -r0, lsl #16]
   1b93c:			; <UNDEFINED> instruction: 0x43abc16d
   1b940:	ldrbhi	sl, [r8]
   1b944:	cmnmi	r6, #1459617792	; 0x57000000
   1b948:	strbcc	r8, [r0, r0]!
   1b94c:	movtmi	ip, #4985	; 0x1379
   1b950:	ldrtcs	r0, [r4], -r0
   1b954:	movwmi	r6, #52213	; 0xcbf5
   1b958:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1b95c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1b960:	strb	r0, [r0, #-0]
   1b964:	adcmi	r3, r2, #156	; 0x9c
   1b968:	andge	r0, r0, #0
   1b96c:	rsbmi	r1, sp, #148, 20	; 0x94000
   1b970:	stmda	r0, {}	; <UNPREDICTABLE>
   1b974:	eorsmi	r4, r7, #7733248	; 0x760000
   1b978:	andcs	r0, r0, r0
   1b97c:	andmi	sl, r2, #95	; 0x5f
   1b980:	andeq	r0, r0, r0
   1b984:	bicmi	ip, sp, r5, ror #26
   1b988:	andeq	r0, r0, r0
   1b98c:	orrsmi	sp, r7, r4, lsl #15
   1b990:	andeq	r0, r0, r0
   1b994:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1b998:	andeq	r0, r0, r0
   1b99c:	smlawbmi	lr, r0, r4, r8
   1b9a0:	andeq	r0, r0, r0
   1b9a4:	rscsmi	r6, r8, r0, lsl #20
   1b9a8:	andeq	r0, r0, r0
   1b9ac:	sbcmi	r8, r3, r0, lsl #16
   1b9b0:	andeq	r0, r0, r0
   1b9b4:	addmi	r4, pc, r0
   1b9b8:	andeq	r0, r0, r0
   1b9bc:	subsmi	r0, r9, r0
   1b9c0:			; <UNDEFINED> instruction: 0x064dd592
   1b9c4:	strmi	pc, [r0], #207	; 0xcf

0001b9c8 <flatcc_json_parser_float@@Base>:
   1b9c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b9cc:	add	fp, sp, #24
   1b9d0:	vpush	{d8-d9}
   1b9d4:	sub	sp, sp, #8
   1b9d8:	mov	r8, r0
   1b9dc:	mov	r0, #0
   1b9e0:	mov	r6, r1
   1b9e4:	cmp	r1, r2
   1b9e8:	str	r0, [r3]
   1b9ec:	beq	1bab0 <flatcc_json_parser_float@@Base+0xe8>
   1b9f0:	mov	r0, r6
   1b9f4:	mov	r5, r2
   1b9f8:	mov	r7, r3
   1b9fc:	ldrb	r1, [r0], #1
   1ba00:	cmp	r1, #45	; 0x2d
   1ba04:	movne	r0, r6
   1ba08:	sub	r2, r2, r0
   1ba0c:	cmp	r2, #2
   1ba10:	blt	1ba3c <flatcc_json_parser_float@@Base+0x74>
   1ba14:	sub	r1, r1, #45	; 0x2d
   1ba18:	clz	r1, r1
   1ba1c:	lsr	r1, r1, #5
   1ba20:	ldrb	r1, [r6, r1]
   1ba24:	cmp	r1, #46	; 0x2e
   1ba28:	beq	1bab8 <flatcc_json_parser_float@@Base+0xf0>
   1ba2c:	cmp	r1, #48	; 0x30
   1ba30:	ldrbeq	r0, [r0, #1]
   1ba34:	cmpeq	r0, #48	; 0x30
   1ba38:	beq	1bab8 <flatcc_json_parser_float@@Base+0xf0>
   1ba3c:	sub	r1, r5, r6
   1ba40:	mov	r2, sp
   1ba44:	mov	r0, r6
   1ba48:	bl	1b0e0 <flatcc_json_parser_double@@Base+0xf4>
   1ba4c:	vldr	d16, [sp]
   1ba50:	mov	r4, r0
   1ba54:	add	r0, pc, #164	; 0xa4
   1ba58:	vcmpe.f64	d16, #0.0
   1ba5c:	vcvt.f32.f64	s16, d16
   1ba60:	vmrs	APSR_nzcv, fpscr
   1ba64:	vmov.f32	s0, s16
   1ba68:	addmi	r0, r0, #4
   1ba6c:	vldr	s18, [r0]
   1ba70:	bl	12918 <__isinff@plt>
   1ba74:	cmp	r0, #0
   1ba78:	movne	r4, r6
   1ba7c:	vseleq.f32	s0, s16, s18
   1ba80:	cmp	r4, #0
   1ba84:	vstr	s0, [r7]
   1ba88:	cmpne	r4, r6
   1ba8c:	bne	1baf0 <flatcc_json_parser_float@@Base+0x128>
   1ba90:	bl	12918 <__isinff@plt>
   1ba94:	ldr	r1, [r8, #24]
   1ba98:	cmp	r0, #0
   1ba9c:	beq	1bac8 <flatcc_json_parser_float@@Base+0x100>
   1baa0:	cmp	r1, #0
   1baa4:	bne	1baec <flatcc_json_parser_float@@Base+0x124>
   1baa8:	mov	r0, #7
   1baac:	b	1bad4 <flatcc_json_parser_float@@Base+0x10c>
   1bab0:	mov	r4, r6
   1bab4:	b	1baf0 <flatcc_json_parser_float@@Base+0x128>
   1bab8:	ldr	r0, [r8, #24]
   1babc:	cmp	r0, #0
   1bac0:	bne	1baec <flatcc_json_parser_float@@Base+0x124>
   1bac4:	b	1bad0 <flatcc_json_parser_float@@Base+0x108>
   1bac8:	cmp	r1, #0
   1bacc:	bne	1baec <flatcc_json_parser_float@@Base+0x124>
   1bad0:	mov	r0, #6
   1bad4:	str	r6, [r8, #36]	; 0x24
   1bad8:	add	r2, r6, #1
   1badc:	ldr	r1, [r8, #4]
   1bae0:	sub	r1, r2, r1
   1bae4:	str	r1, [r8, #20]
   1bae8:	str	r0, [r8, #24]
   1baec:	mov	r4, r5
   1baf0:	mov	r0, r4
   1baf4:	sub	sp, fp, #40	; 0x28
   1baf8:	vpop	{d8-d9}
   1bafc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bb00:	svcvc	0x00800000
   1bb04:			; <UNDEFINED> instruction: 0xff800000

0001bb08 <flatcc_json_parser_integer@@Base>:
   1bb08:	push	{r4, r5, r6, r7, fp, lr}
   1bb0c:	add	fp, sp, #16
   1bb10:	mov	ip, r1
   1bb14:	cmp	r1, r2
   1bb18:	beq	1bc04 <flatcc_json_parser_integer@@Base+0xfc>
   1bb1c:	ldrb	r1, [ip]
   1bb20:	mov	r4, #0
   1bb24:	sub	r1, r1, #45	; 0x2d
   1bb28:	clz	r1, r1
   1bb2c:	lsr	r1, r1, #5
   1bb30:	str	r1, [r3]
   1bb34:	add	r1, ip, r1
   1bb38:	cmp	r1, r2
   1bb3c:	beq	1bbf0 <flatcc_json_parser_integer@@Base+0xe8>
   1bb40:	mov	lr, #10
   1bb44:	mov	r5, #0
   1bb48:	ldrb	r6, [r1]
   1bb4c:	sub	r7, r6, #48	; 0x30
   1bb50:	uxtb	r7, r7
   1bb54:	cmp	r7, #9
   1bb58:	bhi	1bc0c <flatcc_json_parser_integer@@Base+0x104>
   1bb5c:	add	r7, r5, r5, lsl #2
   1bb60:	lsl	r7, r7, #1
   1bb64:	umlal	r6, r7, r4, lr
   1bb68:	subs	r6, r6, #48	; 0x30
   1bb6c:	sbc	r7, r7, #0
   1bb70:	subs	r4, r6, r4
   1bb74:	sbcs	r4, r7, r5
   1bb78:	bcc	1bc1c <flatcc_json_parser_integer@@Base+0x114>
   1bb7c:	add	r1, r1, #1
   1bb80:	mov	r4, r6
   1bb84:	mov	r5, r7
   1bb88:	cmp	r2, r1
   1bb8c:	bne	1bb48 <flatcc_json_parser_integer@@Base+0x40>
   1bb90:	mov	r3, #0
   1bb94:	mov	r1, r2
   1bb98:	mov	r4, r6
   1bb9c:	mov	r5, r7
   1bba0:	cmp	r1, ip
   1bba4:	beq	1bc04 <flatcc_json_parser_integer@@Base+0xfc>
   1bba8:	cmp	r3, #0
   1bbac:	beq	1bc38 <flatcc_json_parser_integer@@Base+0x130>
   1bbb0:	ldrb	r3, [r1]
   1bbb4:	cmp	r3, #46	; 0x2e
   1bbb8:	cmpne	r3, #101	; 0x65
   1bbbc:	bne	1bc30 <flatcc_json_parser_integer@@Base+0x128>
   1bbc0:	ldr	r3, [r0, #24]
   1bbc4:	cmp	r3, #0
   1bbc8:	bne	1bc28 <flatcc_json_parser_integer@@Base+0x120>
   1bbcc:	str	r1, [r0, #36]	; 0x24
   1bbd0:	add	r1, r1, #1
   1bbd4:	mov	r3, #12
   1bbd8:	ldr	r7, [r0, #4]
   1bbdc:	sub	r1, r1, r7
   1bbe0:	str	r1, [r0, #20]
   1bbe4:	str	r3, [r0, #24]
   1bbe8:	mov	r0, r2
   1bbec:	pop	{r4, r5, r6, r7, fp, pc}
   1bbf0:	mov	r1, r2
   1bbf4:	mov	r5, #0
   1bbf8:	mov	r3, #0
   1bbfc:	cmp	r1, ip
   1bc00:	bne	1bba8 <flatcc_json_parser_integer@@Base+0xa0>
   1bc04:	mov	r0, ip
   1bc08:	pop	{r4, r5, r6, r7, fp, pc}
   1bc0c:	mov	r3, #1
   1bc10:	cmp	r1, ip
   1bc14:	bne	1bba8 <flatcc_json_parser_integer@@Base+0xa0>
   1bc18:	b	1bc04 <flatcc_json_parser_integer@@Base+0xfc>
   1bc1c:	ldr	r7, [r0, #24]
   1bc20:	cmp	r7, #0
   1bc24:	beq	1bc4c <flatcc_json_parser_integer@@Base+0x144>
   1bc28:	mov	r0, r2
   1bc2c:	pop	{r4, r5, r6, r7, fp, pc}
   1bc30:	cmp	r3, #69	; 0x45
   1bc34:	beq	1bbc0 <flatcc_json_parser_integer@@Base+0xb8>
   1bc38:	ldr	r0, [fp, #8]
   1bc3c:	mov	ip, r1
   1bc40:	strd	r4, [r0]
   1bc44:	mov	r0, ip
   1bc48:	pop	{r4, r5, r6, r7, fp, pc}
   1bc4c:	str	r1, [r0, #36]	; 0x24
   1bc50:	cmp	r3, #0
   1bc54:	mov	r7, #8
   1bc58:	add	r1, r1, #1
   1bc5c:	ldr	r3, [r0, #4]
   1bc60:	movweq	r7, #7
   1bc64:	sub	r1, r1, r3
   1bc68:	str	r1, [r0, #20]
   1bc6c:	str	r7, [r0, #24]
   1bc70:	mov	r0, r2
   1bc74:	pop	{r4, r5, r6, r7, fp, pc}

0001bc78 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1bc78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc7c:	add	fp, sp, #28
   1bc80:	sub	sp, sp, #28
   1bc84:	ldr	r9, [fp, #8]
   1bc88:	mov	r6, r3
   1bc8c:	mov	r4, r2
   1bc90:	mov	r5, r0
   1bc94:	cmp	r1, r2
   1bc98:	beq	1bce0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1bc9c:	ldrb	r0, [r1]
   1bca0:	cmp	r0, #34	; 0x22
   1bca4:	bne	1bce0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1bca8:	add	sl, r1, #1
   1bcac:	cmp	sl, r4
   1bcb0:	beq	1bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bcb4:	mov	r7, sl
   1bcb8:	ldrb	r1, [r7]
   1bcbc:	cmp	r1, #32
   1bcc0:	bcc	1bf14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x29c>
   1bcc4:	cmp	r1, #34	; 0x22
   1bcc8:	cmpne	r1, #92	; 0x5c
   1bccc:	beq	1bd7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x104>
   1bcd0:	add	r7, r7, #1
   1bcd4:	cmp	r4, r7
   1bcd8:	bne	1bcb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1bcdc:	b	1bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bce0:	ldr	r0, [r5, #24]
   1bce4:	cmp	r0, #0
   1bce8:	bne	1bd08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bcec:	str	r1, [r5, #36]	; 0x24
   1bcf0:	add	r1, r1, #1
   1bcf4:	mov	r0, #16
   1bcf8:	ldr	r2, [r5, #4]
   1bcfc:	sub	r1, r1, r2
   1bd00:	str	r1, [r5, #20]
   1bd04:	str	r0, [r5, #24]
   1bd08:	ldr	r0, [r5, #24]
   1bd0c:	cmp	r0, #0
   1bd10:	mov	r0, r4
   1bd14:	bne	1bd38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bd18:	str	r4, [r5, #36]	; 0x24
   1bd1c:	mov	r0, #20
   1bd20:	add	r2, r4, #1
   1bd24:	ldr	r1, [r5, #4]
   1bd28:	sub	r1, r2, r1
   1bd2c:	str	r1, [r5, #20]
   1bd30:	str	r0, [r5, #24]
   1bd34:	mov	r0, r4
   1bd38:	mov	r1, #0
   1bd3c:	str	r1, [r6]
   1bd40:	ldr	r1, [r5, #24]
   1bd44:	cmp	r1, #0
   1bd48:	bne	1bd70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1bd4c:	str	r0, [r5, #36]	; 0x24
   1bd50:	mov	r1, #31
   1bd54:	cmp	r9, #0
   1bd58:	add	r0, r0, #1
   1bd5c:	ldr	r2, [r5, #4]
   1bd60:	movwne	r1, #32
   1bd64:	sub	r0, r0, r2
   1bd68:	str	r0, [r5, #20]
   1bd6c:	str	r1, [r5, #24]
   1bd70:	mov	r0, r4
   1bd74:	sub	sp, fp, #28
   1bd78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd7c:	cmp	r4, r7
   1bd80:	mov	r0, r4
   1bd84:	beq	1bd38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bd88:	cmp	r1, #34	; 0x22
   1bd8c:	bne	1bdb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   1bd90:	sub	r1, r7, sl
   1bd94:	and	r0, r1, #3
   1bd98:	str	r1, [sp, #20]
   1bd9c:	lsr	r1, r1, #2
   1bda0:	add	r8, r1, r1, lsl #1
   1bda4:	cmp	r0, #2
   1bda8:	beq	1bdc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x148>
   1bdac:	cmp	r0, #3
   1bdb0:	addeq	r8, r8, #2
   1bdb4:	b	1bdc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1bdb8:	mov	r0, r7
   1bdbc:	b	1bd38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bdc0:	add	r8, r8, #1
   1bdc4:	ldr	r0, [r5]
   1bdc8:	mov	r1, #1
   1bdcc:	mov	r2, #1
   1bdd0:	mvn	r3, #0
   1bdd4:	bl	15f2c <flatcc_builder_start_vector@@Base>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1be14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   1bde0:	mov	r0, #0
   1bde4:	str	r0, [r6]
   1bde8:	ldr	r0, [r5, #24]
   1bdec:	cmp	r0, #0
   1bdf0:	bne	1bd70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1bdf4:	mov	r0, #33	; 0x21
   1bdf8:	str	r7, [r5, #36]	; 0x24
   1bdfc:	add	r2, r7, #1
   1be00:	ldr	r1, [r5, #4]
   1be04:	sub	r1, r2, r1
   1be08:	str	r1, [r5, #20]
   1be0c:	str	r0, [r5, #24]
   1be10:	b	1bd70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1be14:	ldr	r0, [r5]
   1be18:	mov	r1, r8
   1be1c:	bl	15368 <flatcc_builder_extend_vector@@Base>
   1be20:	cmp	r0, #0
   1be24:	beq	1bde0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1be28:	ldr	r2, [pc, #612]	; 1c094 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   1be2c:	mov	r1, r8
   1be30:	ldr	r8, [pc, #608]	; 1c098 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x420>
   1be34:	str	r0, [sp]
   1be38:	str	r0, [sp, #12]
   1be3c:	ldr	r0, [sp, #20]
   1be40:	cmp	r9, #0
   1be44:	add	lr, sp, #24
   1be48:	mov	ip, sl
   1be4c:	str	r1, [sp, #4]
   1be50:	add	r2, pc, r2
   1be54:	add	r8, pc, r8
   1be58:	movne	r8, r2
   1be5c:	cmp	r1, #0
   1be60:	mvneq	r1, #0
   1be64:	str	r1, [sp, #16]
   1be68:	mov	r1, #0
   1be6c:	str	r0, [sp, #8]
   1be70:	cmp	r0, r1
   1be74:	beq	1bf34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2bc>
   1be78:	ldrb	r2, [ip, r1]
   1be7c:	ldrb	r3, [r8, r2]
   1be80:	cmp	r3, #64	; 0x40
   1be84:	strb	r3, [lr, r1]
   1be88:	bcc	1bea0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   1be8c:	cmp	r3, #65	; 0x41
   1be90:	bne	1bf70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f8>
   1be94:	sub	r1, r1, #1
   1be98:	sub	r0, r0, #1
   1be9c:	add	ip, ip, #1
   1bea0:	add	r1, r1, #1
   1bea4:	cmp	r1, #4
   1bea8:	bcc	1be70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   1beac:	ldr	lr, [sp, #16]
   1beb0:	cmp	lr, #3
   1beb4:	bcc	1bf64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1beb8:	ldrb	r2, [sp, #25]
   1bebc:	ldrb	r1, [sp, #24]
   1bec0:	subs	lr, lr, #3
   1bec4:	sub	r0, r0, #4
   1bec8:	add	ip, ip, #4
   1becc:	str	lr, [sp, #16]
   1bed0:	add	lr, sp, #24
   1bed4:	lsr	r3, r2, #4
   1bed8:	orr	r1, r3, r1, lsl #2
   1bedc:	ldr	r3, [sp, #12]
   1bee0:	strb	r1, [r3]
   1bee4:	ldrb	r1, [sp, #26]
   1bee8:	lsr	r1, r1, #2
   1beec:	orr	r1, r1, r2, lsl #4
   1bef0:	strb	r1, [r3, #1]
   1bef4:	ldrb	r1, [sp, #26]
   1bef8:	ldrb	r2, [sp, #27]
   1befc:	orr	r1, r2, r1, lsl #6
   1bf00:	strb	r1, [r3, #2]
   1bf04:	add	r3, r3, #3
   1bf08:	str	r3, [sp, #12]
   1bf0c:	bne	1be68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1bf10:	b	1c010 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x398>
   1bf14:	ldr	r0, [r5, #24]
   1bf18:	cmp	r0, #0
   1bf1c:	mov	r0, r4
   1bf20:	bne	1bd38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1bf24:	str	r7, [r5, #36]	; 0x24
   1bf28:	mov	r0, #17
   1bf2c:	add	r2, r7, #1
   1bf30:	b	1bd24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xac>
   1bf34:	mov	r1, r0
   1bf38:	mov	r3, r0
   1bf3c:	ldr	r2, [sp, #16]
   1bf40:	sub	r0, r0, r3
   1bf44:	cmp	r1, #0
   1bf48:	beq	1c010 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x398>
   1bf4c:	cmp	r1, #3
   1bf50:	beq	1bfb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   1bf54:	cmp	r1, #2
   1bf58:	ldrbeq	r1, [sp, #25]
   1bf5c:	tsteq	r1, #15
   1bf60:	beq	1bff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   1bf64:	ldr	r0, [sp, #20]
   1bf68:	ldr	r1, [sp, #8]
   1bf6c:	b	1c020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   1bf70:	cmp	r3, #66	; 0x42
   1bf74:	bne	1bff0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x378>
   1bf78:	add	r2, r1, #1
   1bf7c:	mov	r3, r2
   1bf80:	cmp	r2, r0
   1bf84:	bcs	1bf3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   1bf88:	cmp	r3, #7
   1bf8c:	bhi	1bf3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   1bf90:	ldrb	r2, [ip, r3]
   1bf94:	ldrb	r2, [r8, r2]
   1bf98:	sub	r2, r2, #65	; 0x41
   1bf9c:	uxtb	lr, r2
   1bfa0:	add	r2, r3, #1
   1bfa4:	cmp	lr, #2
   1bfa8:	bcc	1bf7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x304>
   1bfac:	b	1bf3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   1bfb0:	cmp	r2, #2
   1bfb4:	bcc	1bf64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1bfb8:	ldrb	r1, [sp, #26]
   1bfbc:	ands	r2, r1, #3
   1bfc0:	bne	1bf64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1bfc4:	ldrb	r3, [sp, #25]
   1bfc8:	ldrb	ip, [sp, #24]
   1bfcc:	lsl	r2, r3, #4
   1bfd0:	orr	r1, r2, r1, lsr #2
   1bfd4:	ldr	r2, [sp, #12]
   1bfd8:	strb	r1, [r2, #1]
   1bfdc:	lsr	r1, r3, #4
   1bfe0:	orr	r1, r1, ip, lsl #2
   1bfe4:	strb	r1, [r2]
   1bfe8:	add	r2, r2, #2
   1bfec:	b	1c00c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   1bff0:	mov	r3, r1
   1bff4:	b	1bf3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   1bff8:	ldrb	r2, [sp, #24]
   1bffc:	lsl	r2, r2, #2
   1c000:	orr	r1, r2, r1, lsr #4
   1c004:	ldr	r2, [sp, #12]
   1c008:	strb	r1, [r2], #1
   1c00c:	str	r2, [sp, #12]
   1c010:	cmp	r0, #0
   1c014:	beq	1c02c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b4>
   1c018:	mov	r1, r0
   1c01c:	ldr	r0, [sp, #20]
   1c020:	sub	r0, r0, r1
   1c024:	add	r0, sl, r0
   1c028:	b	1bd38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1c02c:	ldr	r0, [sp]
   1c030:	ldr	r1, [sp, #12]
   1c034:	sub	r0, r1, r0
   1c038:	ldr	r1, [sp, #4]
   1c03c:	cmp	r1, r0
   1c040:	bls	1c058 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e0>
   1c044:	sub	r1, r1, r0
   1c048:	ldr	r0, [r5]
   1c04c:	bl	15d18 <flatcc_builder_truncate_vector@@Base>
   1c050:	cmp	r0, #0
   1c054:	bne	1bde0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1c058:	ldr	r0, [r5]
   1c05c:	bl	171ac <flatcc_builder_end_vector@@Base>
   1c060:	cmp	r0, #0
   1c064:	str	r0, [r6]
   1c068:	beq	1bde0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1c06c:	ldrb	r0, [r7]
   1c070:	cmp	r0, #34	; 0x22
   1c074:	bne	1c080 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x408>
   1c078:	add	r4, r7, #1
   1c07c:	b	1bd70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1c080:	ldr	r0, [r5, #24]
   1c084:	cmp	r0, #0
   1c088:	bne	1bd70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   1c08c:	mov	r0, #20
   1c090:	b	1bdf8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1c094:	andeq	r3, r0, r0, lsr sp
   1c098:	andeq	r3, r0, ip, lsr #24

0001c09c <flatcc_json_parser_build_string@@Base>:
   1c09c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0a0:	add	fp, sp, #28
   1c0a4:	sub	sp, sp, #4
   1c0a8:	mov	sl, r3
   1c0ac:	mov	r4, r2
   1c0b0:	mov	r5, r0
   1c0b4:	cmp	r1, r2
   1c0b8:	beq	1c108 <flatcc_json_parser_build_string@@Base+0x6c>
   1c0bc:	ldrb	r0, [r1]
   1c0c0:	cmp	r0, #34	; 0x22
   1c0c4:	bne	1c108 <flatcc_json_parser_build_string@@Base+0x6c>
   1c0c8:	add	r1, r1, #1
   1c0cc:	mov	r6, r4
   1c0d0:	cmp	r1, r4
   1c0d4:	beq	1c138 <flatcc_json_parser_build_string@@Base+0x9c>
   1c0d8:	mov	r6, r1
   1c0dc:	ldrb	r0, [r6]
   1c0e0:	cmp	r0, #32
   1c0e4:	bcc	1c330 <flatcc_json_parser_build_string@@Base+0x294>
   1c0e8:	cmp	r0, #34	; 0x22
   1c0ec:	cmpne	r0, #92	; 0x5c
   1c0f0:	beq	1c254 <flatcc_json_parser_build_string@@Base+0x1b8>
   1c0f4:	add	r6, r6, #1
   1c0f8:	cmp	r4, r6
   1c0fc:	bne	1c0dc <flatcc_json_parser_build_string@@Base+0x40>
   1c100:	mov	r6, r1
   1c104:	b	1c138 <flatcc_json_parser_build_string@@Base+0x9c>
   1c108:	ldr	r0, [r5, #24]
   1c10c:	mov	r6, r4
   1c110:	cmp	r0, #0
   1c114:	bne	1c138 <flatcc_json_parser_build_string@@Base+0x9c>
   1c118:	str	r1, [r5, #36]	; 0x24
   1c11c:	add	r1, r1, #1
   1c120:	mov	r0, #16
   1c124:	mov	r6, r4
   1c128:	ldr	r2, [r5, #4]
   1c12c:	sub	r1, r1, r2
   1c130:	str	r1, [r5, #20]
   1c134:	str	r0, [r5, #24]
   1c138:	ldr	r0, [r5, #24]
   1c13c:	cmp	r0, #0
   1c140:	bne	1c160 <flatcc_json_parser_build_string@@Base+0xc4>
   1c144:	str	r4, [r5, #36]	; 0x24
   1c148:	add	r2, r4, #1
   1c14c:	mov	r0, #20
   1c150:	ldr	r1, [r5, #4]
   1c154:	sub	r1, r2, r1
   1c158:	str	r1, [r5, #20]
   1c15c:	str	r0, [r5, #24]
   1c160:	mov	r7, r4
   1c164:	ldr	r0, [r5]
   1c168:	bl	16284 <flatcc_builder_start_string@@Base>
   1c16c:	cmp	r0, #0
   1c170:	beq	1c18c <flatcc_json_parser_build_string@@Base+0xf0>
   1c174:	mov	r4, r7
   1c178:	mov	r0, #0
   1c17c:	str	r0, [sl]
   1c180:	mov	r0, r4
   1c184:	sub	sp, fp, #28
   1c188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c18c:	ldr	r0, [r5]
   1c190:	sub	r2, r7, r6
   1c194:	mov	r1, r6
   1c198:	bl	15b6c <flatcc_builder_append_string@@Base>
   1c19c:	cmp	r0, #0
   1c1a0:	beq	1c174 <flatcc_json_parser_build_string@@Base+0xd8>
   1c1a4:	cmp	r7, r4
   1c1a8:	mov	r6, r4
   1c1ac:	beq	1c2d4 <flatcc_json_parser_build_string@@Base+0x238>
   1c1b0:	mov	r8, sp
   1c1b4:	add	r9, r8, #1
   1c1b8:	ldrb	r0, [r7]
   1c1bc:	cmp	r0, #34	; 0x22
   1c1c0:	beq	1c2d0 <flatcc_json_parser_build_string@@Base+0x234>
   1c1c4:	mov	r0, r5
   1c1c8:	mov	r1, r7
   1c1cc:	mov	r2, r4
   1c1d0:	mov	r3, r8
   1c1d4:	bl	1995c <flatcc_json_parser_string_escape@@Base>
   1c1d8:	mov	r6, r0
   1c1dc:	ldr	r0, [r5]
   1c1e0:	ldrb	r2, [sp]
   1c1e4:	mov	r1, r9
   1c1e8:	bl	15b6c <flatcc_builder_append_string@@Base>
   1c1ec:	cmp	r0, #0
   1c1f0:	beq	1c328 <flatcc_json_parser_build_string@@Base+0x28c>
   1c1f4:	cmp	r6, r4
   1c1f8:	beq	1c27c <flatcc_json_parser_build_string@@Base+0x1e0>
   1c1fc:	mov	r7, r6
   1c200:	ldrb	r0, [r7]
   1c204:	cmp	r0, #32
   1c208:	bcc	1c29c <flatcc_json_parser_build_string@@Base+0x200>
   1c20c:	cmp	r0, #34	; 0x22
   1c210:	cmpne	r0, #92	; 0x5c
   1c214:	beq	1c228 <flatcc_json_parser_build_string@@Base+0x18c>
   1c218:	add	r7, r7, #1
   1c21c:	cmp	r4, r7
   1c220:	bne	1c200 <flatcc_json_parser_build_string@@Base+0x164>
   1c224:	b	1c27c <flatcc_json_parser_build_string@@Base+0x1e0>
   1c228:	cmp	r4, r7
   1c22c:	beq	1c2c8 <flatcc_json_parser_build_string@@Base+0x22c>
   1c230:	ldr	r0, [r5]
   1c234:	sub	r2, r7, r6
   1c238:	mov	r1, r6
   1c23c:	bl	15b6c <flatcc_builder_append_string@@Base>
   1c240:	cmp	r0, #0
   1c244:	beq	1c174 <flatcc_json_parser_build_string@@Base+0xd8>
   1c248:	cmp	r4, r7
   1c24c:	bne	1c1b8 <flatcc_json_parser_build_string@@Base+0x11c>
   1c250:	b	1c2c8 <flatcc_json_parser_build_string@@Base+0x22c>
   1c254:	cmp	r4, r6
   1c258:	beq	1c33c <flatcc_json_parser_build_string@@Base+0x2a0>
   1c25c:	cmp	r0, #34	; 0x22
   1c260:	bne	1c274 <flatcc_json_parser_build_string@@Base+0x1d8>
   1c264:	ldr	r0, [r5]
   1c268:	sub	r2, r6, r1
   1c26c:	bl	185a0 <flatcc_builder_create_string@@Base>
   1c270:	b	1c2dc <flatcc_json_parser_build_string@@Base+0x240>
   1c274:	mov	r7, r6
   1c278:	b	1c340 <flatcc_json_parser_build_string@@Base+0x2a4>
   1c27c:	ldr	r0, [r5, #24]
   1c280:	mov	r6, r4
   1c284:	cmp	r0, #0
   1c288:	bne	1c2d4 <flatcc_json_parser_build_string@@Base+0x238>
   1c28c:	str	r4, [r5, #36]	; 0x24
   1c290:	mov	r0, #20
   1c294:	add	r2, r4, #1
   1c298:	b	1c2b8 <flatcc_json_parser_build_string@@Base+0x21c>
   1c29c:	ldr	r0, [r5, #24]
   1c2a0:	mov	r6, r4
   1c2a4:	cmp	r0, #0
   1c2a8:	bne	1c2d4 <flatcc_json_parser_build_string@@Base+0x238>
   1c2ac:	str	r7, [r5, #36]	; 0x24
   1c2b0:	mov	r0, #17
   1c2b4:	add	r2, r7, #1
   1c2b8:	ldr	r1, [r5, #4]
   1c2bc:	sub	r1, r2, r1
   1c2c0:	str	r1, [r5, #20]
   1c2c4:	str	r0, [r5, #24]
   1c2c8:	mov	r6, r4
   1c2cc:	b	1c2d4 <flatcc_json_parser_build_string@@Base+0x238>
   1c2d0:	mov	r6, r7
   1c2d4:	ldr	r0, [r5]
   1c2d8:	bl	18728 <flatcc_builder_end_string@@Base>
   1c2dc:	cmp	r6, r4
   1c2e0:	str	r0, [sl]
   1c2e4:	beq	1c2fc <flatcc_json_parser_build_string@@Base+0x260>
   1c2e8:	ldrb	r0, [r6]
   1c2ec:	cmp	r0, #34	; 0x22
   1c2f0:	bne	1c2fc <flatcc_json_parser_build_string@@Base+0x260>
   1c2f4:	add	r4, r6, #1
   1c2f8:	b	1c180 <flatcc_json_parser_build_string@@Base+0xe4>
   1c2fc:	ldr	r0, [r5, #24]
   1c300:	cmp	r0, #0
   1c304:	bne	1c180 <flatcc_json_parser_build_string@@Base+0xe4>
   1c308:	str	r6, [r5, #36]	; 0x24
   1c30c:	add	r2, r6, #1
   1c310:	mov	r0, #20
   1c314:	ldr	r1, [r5, #4]
   1c318:	sub	r1, r2, r1
   1c31c:	str	r1, [r5, #20]
   1c320:	str	r0, [r5, #24]
   1c324:	b	1c180 <flatcc_json_parser_build_string@@Base+0xe4>
   1c328:	mov	r4, r6
   1c32c:	b	1c178 <flatcc_json_parser_build_string@@Base+0xdc>
   1c330:	ldr	r0, [r5, #24]
   1c334:	cmp	r0, #0
   1c338:	beq	1c348 <flatcc_json_parser_build_string@@Base+0x2ac>
   1c33c:	mov	r7, r4
   1c340:	mov	r6, r1
   1c344:	b	1c164 <flatcc_json_parser_build_string@@Base+0xc8>
   1c348:	str	r6, [r5, #36]	; 0x24
   1c34c:	add	r3, r6, #1
   1c350:	mov	r0, #17
   1c354:	mov	r7, r4
   1c358:	ldr	r2, [r5, #4]
   1c35c:	sub	r2, r3, r2
   1c360:	str	r2, [r5, #20]
   1c364:	str	r0, [r5, #24]
   1c368:	b	1c340 <flatcc_json_parser_build_string@@Base+0x2a4>

0001c36c <flatcc_json_parser_prepare_unions@@Base>:
   1c36c:	push	{r4, r5, r6, r7, fp, lr}
   1c370:	add	fp, sp, #16
   1c374:	mov	r5, r1
   1c378:	mov	r6, r0
   1c37c:	add	r0, r3, r3, lsl #1
   1c380:	mov	r1, #8
   1c384:	mov	r7, r3
   1c388:	mov	r4, r2
   1c38c:	add	r1, r1, r0, lsl #3
   1c390:	ldr	r0, [r6]
   1c394:	bl	1462c <flatcc_builder_enter_user_frame@@Base>
   1c398:	mov	r1, r0
   1c39c:	ldr	r0, [fp, #8]
   1c3a0:	cmp	r1, #0
   1c3a4:	str	r1, [r0]
   1c3a8:	beq	1c3c4 <flatcc_json_parser_prepare_unions@@Base+0x58>
   1c3ac:	ldr	r0, [r6]
   1c3b0:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1c3b4:	mov	r4, r5
   1c3b8:	str	r7, [r0]
   1c3bc:	mov	r0, r4
   1c3c0:	pop	{r4, r5, r6, r7, fp, pc}
   1c3c4:	ldr	r0, [r6, #24]
   1c3c8:	cmp	r0, #0
   1c3cc:	beq	1c3d8 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1c3d0:	mov	r0, r4
   1c3d4:	pop	{r4, r5, r6, r7, fp, pc}
   1c3d8:	str	r5, [r6, #36]	; 0x24
   1c3dc:	add	r2, r5, #1
   1c3e0:	mov	r0, #33	; 0x21
   1c3e4:	ldr	r1, [r6, #4]
   1c3e8:	sub	r1, r2, r1
   1c3ec:	str	r1, [r6, #20]
   1c3f0:	str	r0, [r6, #24]
   1c3f4:	mov	r0, r4
   1c3f8:	pop	{r4, r5, r6, r7, fp, pc}

0001c3fc <flatcc_json_parser_finalize_unions@@Base>:
   1c3fc:	push	{r4, r5, r6, r7, fp, lr}
   1c400:	add	fp, sp, #16
   1c404:	mov	r6, r0
   1c408:	ldr	r0, [r0]
   1c40c:	mov	r7, r1
   1c410:	mov	r1, r3
   1c414:	mov	r5, r3
   1c418:	mov	r4, r2
   1c41c:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1c420:	ldr	r0, [r0, #4]
   1c424:	cmp	r0, #0
   1c428:	beq	1c458 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1c42c:	ldr	r0, [r6, #24]
   1c430:	cmp	r0, #0
   1c434:	bne	1c45c <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c438:	str	r7, [r6, #36]	; 0x24
   1c43c:	add	r2, r7, #1
   1c440:	mov	r0, #27
   1c444:	ldr	r1, [r6, #4]
   1c448:	sub	r1, r2, r1
   1c44c:	str	r1, [r6, #20]
   1c450:	str	r0, [r6, #24]
   1c454:	b	1c45c <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c458:	mov	r4, r7
   1c45c:	ldr	r0, [r6]
   1c460:	mov	r1, r5
   1c464:	bl	14750 <flatcc_builder_exit_user_frame_at@@Base>
   1c468:	mov	r0, r4
   1c46c:	pop	{r4, r5, r6, r7, fp, pc}

0001c470 <flatcc_json_parser_union@@Base>:
   1c470:	push	{r4, r5, r6, r7, fp, lr}
   1c474:	add	fp, sp, #16
   1c478:	sub	sp, sp, #16
   1c47c:	mov	r6, r1
   1c480:	mov	r5, r0
   1c484:	ldr	r0, [r0]
   1c488:	ldr	r1, [fp, #12]
   1c48c:	mov	r7, r3
   1c490:	mov	r4, r2
   1c494:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1c498:	add	r2, r0, #8
   1c49c:	add	r3, r7, r7, lsl #1
   1c4a0:	mov	r1, r2
   1c4a4:	ldr	r7, [r1, r3, lsl #3]!
   1c4a8:	cmp	r7, #0
   1c4ac:	beq	1c4dc <flatcc_json_parser_union@@Base+0x6c>
   1c4b0:	ldr	r0, [r5, #24]
   1c4b4:	cmp	r0, #0
   1c4b8:	bne	1c59c <flatcc_json_parser_union@@Base+0x12c>
   1c4bc:	mov	r0, #28
   1c4c0:	str	r6, [r5, #36]	; 0x24
   1c4c4:	add	r2, r6, #1
   1c4c8:	ldr	r1, [r5, #4]
   1c4cc:	sub	r1, r2, r1
   1c4d0:	str	r1, [r5, #20]
   1c4d4:	str	r0, [r5, #24]
   1c4d8:	b	1c59c <flatcc_json_parser_union@@Base+0x12c>
   1c4dc:	add	r2, r2, r3, lsl #3
   1c4e0:	ldrb	r3, [r2, #12]
   1c4e4:	cmp	r3, #0
   1c4e8:	beq	1c558 <flatcc_json_parser_union@@Base+0xe8>
   1c4ec:	ldrb	r3, [r2, #13]
   1c4f0:	cmp	r3, #0
   1c4f4:	strb	r3, [sp, #8]
   1c4f8:	beq	1c590 <flatcc_json_parser_union@@Base+0x120>
   1c4fc:	ldr	r1, [r0, #4]
   1c500:	ldr	r7, [fp, #16]
   1c504:	mov	r2, r4
   1c508:	sub	r1, r1, #1
   1c50c:	str	r1, [r0, #4]
   1c510:	add	r0, sp, #8
   1c514:	mov	r1, r6
   1c518:	add	r0, r0, #4
   1c51c:	str	r0, [sp]
   1c520:	mov	r0, r5
   1c524:	blx	r7
   1c528:	cmp	r0, r4
   1c52c:	beq	1c59c <flatcc_json_parser_union@@Base+0x12c>
   1c530:	mov	r6, r0
   1c534:	ldr	r1, [fp, #8]
   1c538:	ldr	r0, [r5]
   1c53c:	ldr	r2, [sp, #8]
   1c540:	ldr	r3, [sp, #12]
   1c544:	bl	175f8 <flatcc_builder_table_add_union@@Base>
   1c548:	cmp	r0, #0
   1c54c:	bne	1c4b0 <flatcc_json_parser_union@@Base+0x40>
   1c550:	mov	r4, r6
   1c554:	b	1c59c <flatcc_json_parser_union@@Base+0x12c>
   1c558:	ldr	r3, [r0, #4]
   1c55c:	add	r3, r3, #1
   1c560:	str	r3, [r0, #4]
   1c564:	ldr	r0, [r5, #16]
   1c568:	str	r0, [r2, #8]
   1c56c:	ldr	r0, [r5, #4]
   1c570:	str	r0, [r2, #4]
   1c574:	str	r6, [r1]
   1c578:	mov	r0, r5
   1c57c:	mov	r1, r6
   1c580:	mov	r2, r4
   1c584:	bl	1a288 <flatcc_json_parser_generic_json@@Base>
   1c588:	mov	r4, r0
   1c58c:	b	1c59c <flatcc_json_parser_union@@Base+0x12c>
   1c590:	ldr	r0, [r5, #24]
   1c594:	cmp	r0, #0
   1c598:	beq	1c5a8 <flatcc_json_parser_union@@Base+0x138>
   1c59c:	mov	r0, r4
   1c5a0:	sub	sp, fp, #16
   1c5a4:	pop	{r4, r5, r6, r7, fp, pc}
   1c5a8:	mov	r0, #25
   1c5ac:	b	1c4c0 <flatcc_json_parser_union@@Base+0x50>

0001c5b0 <flatcc_json_parser_union_type@@Base>:
   1c5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5b4:	add	fp, sp, #28
   1c5b8:	sub	sp, sp, #20
   1c5bc:	mov	r8, r1
   1c5c0:	mov	r5, r0
   1c5c4:	ldr	r0, [r0]
   1c5c8:	ldr	r1, [fp, #12]
   1c5cc:	mov	r6, r3
   1c5d0:	mov	r4, r2
   1c5d4:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1c5d8:	add	r2, r0, #8
   1c5dc:	add	r3, r6, r6, lsl #1
   1c5e0:	mov	r9, r0
   1c5e4:	add	sl, r2, r3, lsl #3
   1c5e8:	mov	r0, sl
   1c5ec:	ldrb	r1, [r0, #12]!
   1c5f0:	cmp	r1, #0
   1c5f4:	beq	1c624 <flatcc_json_parser_union_type@@Base+0x74>
   1c5f8:	ldr	r0, [r5, #24]
   1c5fc:	cmp	r0, #0
   1c600:	bne	1c8fc <flatcc_json_parser_union_type@@Base+0x34c>
   1c604:	str	r8, [r5, #36]	; 0x24
   1c608:	mov	r0, #28
   1c60c:	add	r2, r8, #1
   1c610:	ldr	r1, [r5, #4]
   1c614:	sub	r1, r2, r1
   1c618:	str	r1, [r5, #20]
   1c61c:	str	r0, [r5, #24]
   1c620:	b	1c8fc <flatcc_json_parser_union_type@@Base+0x34c>
   1c624:	mov	r1, #1
   1c628:	mov	r6, #0
   1c62c:	mov	lr, sl
   1c630:	cmp	r8, r4
   1c634:	str	r3, [sp, #4]
   1c638:	str	r2, [sp, #8]
   1c63c:	strb	r1, [r0]
   1c640:	strb	r6, [lr, #13]!
   1c644:	beq	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c648:	mov	r2, r8
   1c64c:	ldrb	ip, [r2], #1
   1c650:	cmp	ip, #45	; 0x2d
   1c654:	movne	r2, r8
   1c658:	cmp	r2, r4
   1c65c:	beq	1c70c <flatcc_json_parser_union_type@@Base+0x15c>
   1c660:	mov	r6, #0
   1c664:	mov	r0, #10
   1c668:	mov	r7, #0
   1c66c:	ldrb	r1, [r2]
   1c670:	sub	r3, r1, #48	; 0x30
   1c674:	uxtb	r3, r3
   1c678:	cmp	r3, #9
   1c67c:	bhi	1c798 <flatcc_json_parser_union_type@@Base+0x1e8>
   1c680:	add	r3, r7, r7, lsl #2
   1c684:	lsl	r3, r3, #1
   1c688:	umlal	r1, r3, r6, r0
   1c68c:	subs	r1, r1, #48	; 0x30
   1c690:	sbc	r3, r3, #0
   1c694:	subs	r6, r1, r6
   1c698:	sbcs	r7, r3, r7
   1c69c:	bcc	1c7a8 <flatcc_json_parser_union_type@@Base+0x1f8>
   1c6a0:	add	r2, r2, #1
   1c6a4:	mov	r6, r1
   1c6a8:	mov	r7, r3
   1c6ac:	cmp	r4, r2
   1c6b0:	bne	1c66c <flatcc_json_parser_union_type@@Base+0xbc>
   1c6b4:	mov	r0, #0
   1c6b8:	mov	r2, r4
   1c6bc:	mov	r6, r1
   1c6c0:	mov	r7, r3
   1c6c4:	cmp	r2, r8
   1c6c8:	beq	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c6cc:	cmp	r0, #0
   1c6d0:	beq	1c724 <flatcc_json_parser_union_type@@Base+0x174>
   1c6d4:	ldrb	r0, [r2]
   1c6d8:	cmp	r0, #46	; 0x2e
   1c6dc:	beq	1c6ec <flatcc_json_parser_union_type@@Base+0x13c>
   1c6e0:	cmp	r0, #101	; 0x65
   1c6e4:	cmpne	r0, #69	; 0x45
   1c6e8:	bne	1c724 <flatcc_json_parser_union_type@@Base+0x174>
   1c6ec:	ldr	r0, [r5, #24]
   1c6f0:	mov	r6, #0
   1c6f4:	mov	r7, #0
   1c6f8:	cmp	r0, #0
   1c6fc:	mov	r0, r4
   1c700:	bne	1c7e8 <flatcc_json_parser_union_type@@Base+0x238>
   1c704:	mov	r0, #12
   1c708:	b	1c7c4 <flatcc_json_parser_union_type@@Base+0x214>
   1c70c:	mov	r2, r4
   1c710:	mov	r7, #0
   1c714:	mov	r0, #0
   1c718:	cmp	r2, r8
   1c71c:	bne	1c6cc <flatcc_json_parser_union_type@@Base+0x11c>
   1c720:	b	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c724:	mov	r0, r2
   1c728:	cmp	r0, r8
   1c72c:	beq	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c730:	cmp	ip, #45	; 0x2d
   1c734:	bne	1c750 <flatcc_json_parser_union_type@@Base+0x1a0>
   1c738:	ldr	r1, [r5, #24]
   1c73c:	mov	r2, r4
   1c740:	cmp	r1, #0
   1c744:	bne	1c7fc <flatcc_json_parser_union_type@@Base+0x24c>
   1c748:	mov	r1, #8
   1c74c:	b	1c770 <flatcc_json_parser_union_type@@Base+0x1c0>
   1c750:	subs	r1, r6, #256	; 0x100
   1c754:	sbcs	r1, r7, #0
   1c758:	bcc	1c7f4 <flatcc_json_parser_union_type@@Base+0x244>
   1c75c:	ldr	r1, [r5, #24]
   1c760:	mov	r2, r4
   1c764:	cmp	r1, #0
   1c768:	bne	1c7fc <flatcc_json_parser_union_type@@Base+0x24c>
   1c76c:	mov	r1, #7
   1c770:	str	r0, [r5, #36]	; 0x24
   1c774:	add	r0, r0, #1
   1c778:	ldr	r2, [r5, #4]
   1c77c:	sub	r0, r0, r2
   1c780:	mov	r2, r4
   1c784:	str	r0, [r5, #20]
   1c788:	str	r1, [r5, #24]
   1c78c:	cmp	r2, r8
   1c790:	bne	1c828 <flatcc_json_parser_union_type@@Base+0x278>
   1c794:	b	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c798:	mov	r0, #1
   1c79c:	cmp	r2, r8
   1c7a0:	bne	1c6cc <flatcc_json_parser_union_type@@Base+0x11c>
   1c7a4:	b	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c7a8:	ldr	r0, [r5, #24]
   1c7ac:	mov	r6, #0
   1c7b0:	mov	r7, #0
   1c7b4:	cmp	r0, #0
   1c7b8:	mov	r0, r4
   1c7bc:	bne	1c7e8 <flatcc_json_parser_union_type@@Base+0x238>
   1c7c0:	mov	r0, #8
   1c7c4:	str	r2, [r5, #36]	; 0x24
   1c7c8:	add	r2, r2, #1
   1c7cc:	mov	r6, #0
   1c7d0:	mov	r7, #0
   1c7d4:	ldr	r1, [r5, #4]
   1c7d8:	sub	r1, r2, r1
   1c7dc:	str	r1, [r5, #20]
   1c7e0:	str	r0, [r5, #24]
   1c7e4:	mov	r0, r4
   1c7e8:	cmp	r0, r8
   1c7ec:	bne	1c730 <flatcc_json_parser_union_type@@Base+0x180>
   1c7f0:	b	1c804 <flatcc_json_parser_union_type@@Base+0x254>
   1c7f4:	mov	r2, r0
   1c7f8:	strb	r6, [lr]
   1c7fc:	cmp	r2, r8
   1c800:	bne	1c828 <flatcc_json_parser_union_type@@Base+0x278>
   1c804:	ldr	r3, [fp, #16]
   1c808:	mov	r0, r5
   1c80c:	mov	r1, r8
   1c810:	mov	r2, r4
   1c814:	str	lr, [sp]
   1c818:	mov	r6, lr
   1c81c:	bl	1c934 <flatcc_json_parser_union_type@@Base+0x384>
   1c820:	mov	lr, r6
   1c824:	mov	r2, r0
   1c828:	ldr	r0, [sp, #8]
   1c82c:	ldr	r1, [sp, #4]
   1c830:	ldr	r1, [r0, r1, lsl #3]
   1c834:	cmp	r1, #0
   1c838:	beq	1c8d4 <flatcc_json_parser_union_type@@Base+0x324>
   1c83c:	ldr	r0, [r9, #4]
   1c840:	str	r2, [sp, #8]
   1c844:	cmp	r0, #0
   1c848:	beq	1c908 <flatcc_json_parser_union_type@@Base+0x358>
   1c84c:	sub	r0, r0, #1
   1c850:	ldr	r6, [fp, #20]
   1c854:	mov	r2, r4
   1c858:	str	r0, [r9, #4]
   1c85c:	ldr	r0, [sl, #8]
   1c860:	ldr	r8, [r5, #4]
   1c864:	ldr	r7, [r5, #16]
   1c868:	str	r0, [r5, #16]
   1c86c:	ldr	r0, [sl, #4]
   1c870:	str	r0, [r5, #4]
   1c874:	add	r0, sp, #12
   1c878:	ldrb	r3, [lr]
   1c87c:	add	r0, r0, #4
   1c880:	str	r0, [sp]
   1c884:	mov	r0, r5
   1c888:	strb	r3, [sp, #12]
   1c88c:	blx	r6
   1c890:	cmp	r0, r4
   1c894:	beq	1c8fc <flatcc_json_parser_union_type@@Base+0x34c>
   1c898:	ldr	r1, [fp, #8]
   1c89c:	ldr	r0, [r5]
   1c8a0:	ldr	r2, [sp, #12]
   1c8a4:	ldr	r3, [sp, #16]
   1c8a8:	bl	175f8 <flatcc_builder_table_add_union@@Base>
   1c8ac:	cmp	r0, #0
   1c8b0:	beq	1c8f0 <flatcc_json_parser_union_type@@Base+0x340>
   1c8b4:	ldr	r0, [r5, #24]
   1c8b8:	cmp	r0, #0
   1c8bc:	bne	1c8fc <flatcc_json_parser_union_type@@Base+0x34c>
   1c8c0:	ldr	r2, [sp, #8]
   1c8c4:	mov	r0, #28
   1c8c8:	str	r2, [r5, #36]	; 0x24
   1c8cc:	add	r2, r2, #1
   1c8d0:	b	1c610 <flatcc_json_parser_union_type@@Base+0x60>
   1c8d4:	ldrb	r0, [lr]
   1c8d8:	ldr	r1, [r9, #4]
   1c8dc:	mov	r4, r2
   1c8e0:	cmp	r0, #0
   1c8e4:	addne	r1, r1, #1
   1c8e8:	str	r1, [r9, #4]
   1c8ec:	b	1c8fc <flatcc_json_parser_union_type@@Base+0x34c>
   1c8f0:	ldr	r4, [sp, #8]
   1c8f4:	str	r8, [r5, #4]
   1c8f8:	str	r7, [r5, #16]
   1c8fc:	mov	r0, r4
   1c900:	sub	sp, fp, #28
   1c904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c908:	ldr	r0, [pc, #24]	; 1c928 <flatcc_json_parser_union_type@@Base+0x378>
   1c90c:	ldr	r1, [pc, #24]	; 1c92c <flatcc_json_parser_union_type@@Base+0x37c>
   1c910:	ldr	r3, [pc, #24]	; 1c930 <flatcc_json_parser_union_type@@Base+0x380>
   1c914:	movw	r2, #965	; 0x3c5
   1c918:	add	r0, pc, r0
   1c91c:	add	r1, pc, r1
   1c920:	add	r3, pc, r3
   1c924:	bl	129c0 <__assert_fail@plt>
   1c928:	andeq	r3, r0, r0, asr #13
   1c92c:	andeq	r3, r0, fp, asr #13
   1c930:	andeq	r3, r0, r8, lsr #14
   1c934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c938:	add	fp, sp, #28
   1c93c:	sub	sp, sp, #44	; 0x2c
   1c940:	mov	r4, r2
   1c944:	mov	r2, r1
   1c948:	ldr	r1, [fp, #8]
   1c94c:	mov	r5, r0
   1c950:	mov	r0, #0
   1c954:	cmp	r2, r4
   1c958:	strb	r0, [r1]
   1c95c:	beq	1c9c0 <flatcc_json_parser_union_type@@Base+0x410>
   1c960:	ldrb	r0, [r2]
   1c964:	cmp	r0, #46	; 0x2e
   1c968:	beq	1c984 <flatcc_json_parser_union_type@@Base+0x3d4>
   1c96c:	cmp	r0, #34	; 0x22
   1c970:	bne	1c9b8 <flatcc_json_parser_union_type@@Base+0x408>
   1c974:	mov	r0, #0
   1c978:	add	r1, r2, #1
   1c97c:	str	r0, [r5, #12]
   1c980:	b	1c9c4 <flatcc_json_parser_union_type@@Base+0x414>
   1c984:	ldr	r0, [r5, #24]
   1c988:	mov	r1, r4
   1c98c:	cmp	r0, #0
   1c990:	bne	1c9c4 <flatcc_json_parser_union_type@@Base+0x414>
   1c994:	str	r2, [r5, #36]	; 0x24
   1c998:	add	r2, r2, #1
   1c99c:	mov	r0, #5
   1c9a0:	ldr	r1, [r5, #4]
   1c9a4:	sub	r1, r2, r1
   1c9a8:	str	r1, [r5, #20]
   1c9ac:	str	r0, [r5, #24]
   1c9b0:	mov	r1, r4
   1c9b4:	b	1c9c4 <flatcc_json_parser_union_type@@Base+0x414>
   1c9b8:	mov	r0, #1
   1c9bc:	str	r0, [r5, #12]
   1c9c0:	mov	r1, r2
   1c9c4:	ldr	r0, [r5, #12]
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1c9e0 <flatcc_json_parser_union_type@@Base+0x430>
   1c9d0:	mov	r7, r1
   1c9d4:	cmp	r7, r4
   1c9d8:	bne	1ca2c <flatcc_json_parser_union_type@@Base+0x47c>
   1c9dc:	b	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1c9e0:	sub	r0, r4, r1
   1c9e4:	cmp	r0, #2
   1c9e8:	blt	1ca0c <flatcc_json_parser_union_type@@Base+0x45c>
   1c9ec:	ldrb	r0, [r1]
   1c9f0:	cmp	r0, #32
   1c9f4:	bhi	1c9d0 <flatcc_json_parser_union_type@@Base+0x420>
   1c9f8:	bne	1ca0c <flatcc_json_parser_union_type@@Base+0x45c>
   1c9fc:	mov	r7, r1
   1ca00:	ldrb	r0, [r7, #1]!
   1ca04:	cmp	r0, #32
   1ca08:	bhi	1ca24 <flatcc_json_parser_union_type@@Base+0x474>
   1ca0c:	mov	r0, r5
   1ca10:	mov	r2, r4
   1ca14:	mov	r6, r3
   1ca18:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1ca1c:	mov	r3, r6
   1ca20:	mov	r7, r0
   1ca24:	cmp	r7, r4
   1ca28:	beq	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1ca2c:	add	r9, r3, #4
   1ca30:	mov	r6, #0
   1ca34:	add	sl, sp, #32
   1ca38:	add	r8, sp, #28
   1ca3c:	str	r3, [sp, #16]
   1ca40:	str	r9, [sp, #12]
   1ca44:	b	1ca7c <flatcc_json_parser_union_type@@Base+0x4cc>
   1ca48:	ldr	r2, [fp, #8]
   1ca4c:	ldr	r9, [sp, #12]
   1ca50:	add	r6, r6, #1
   1ca54:	mov	r7, r0
   1ca58:	mov	r3, r2
   1ca5c:	ldrb	r2, [r2]
   1ca60:	add	r1, r2, r1
   1ca64:	strb	r1, [r3]
   1ca68:	ldr	r3, [sp, #16]
   1ca6c:	ldr	r1, [sp, #24]
   1ca70:	cmp	r1, #0
   1ca74:	subeq	sp, fp, #28
   1ca78:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca7c:	str	r6, [sp, #20]
   1ca80:	mov	r6, r3
   1ca84:	ldr	r6, [r3]
   1ca88:	add	r0, sp, #24
   1ca8c:	mov	r1, r7
   1ca90:	mov	r2, r4
   1ca94:	mov	r3, r8
   1ca98:	str	sl, [sp]
   1ca9c:	str	r0, [sp, #4]
   1caa0:	mov	r0, r5
   1caa4:	blx	r6
   1caa8:	cmp	r0, r4
   1caac:	beq	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1cab0:	cmp	r0, r7
   1cab4:	bne	1cac8 <flatcc_json_parser_union_type@@Base+0x518>
   1cab8:	ldr	r6, [r9], #4
   1cabc:	cmp	r6, #0
   1cac0:	bne	1ca88 <flatcc_json_parser_union_type@@Base+0x4d8>
   1cac4:	b	1cb10 <flatcc_json_parser_union_type@@Base+0x560>
   1cac8:	ldr	r6, [sp, #20]
   1cacc:	cmp	r6, #0
   1cad0:	ldrne	r1, [r5, #12]
   1cad4:	cmpne	r1, #0
   1cad8:	bne	1cb58 <flatcc_json_parser_union_type@@Base+0x5a8>
   1cadc:	ldr	r1, [sp, #28]
   1cae0:	cmp	r1, #0
   1cae4:	bne	1cb44 <flatcc_json_parser_union_type@@Base+0x594>
   1cae8:	ldr	r1, [sp, #32]
   1caec:	ldr	r2, [sp, #36]	; 0x24
   1caf0:	subs	r3, r1, #256	; 0x100
   1caf4:	sbcs	r2, r2, #0
   1caf8:	bcc	1ca48 <flatcc_json_parser_union_type@@Base+0x498>
   1cafc:	ldr	r1, [r5, #24]
   1cb00:	cmp	r1, #0
   1cb04:	bne	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1cb08:	mov	r1, #7
   1cb0c:	b	1cb68 <flatcc_json_parser_union_type@@Base+0x5b8>
   1cb10:	ldr	r0, [r5, #24]
   1cb14:	cmp	r0, #0
   1cb18:	bne	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1cb1c:	str	r7, [r5, #36]	; 0x24
   1cb20:	add	r2, r7, #1
   1cb24:	mov	r0, #23
   1cb28:	ldr	r1, [r5, #4]
   1cb2c:	sub	r1, r2, r1
   1cb30:	str	r1, [r5, #20]
   1cb34:	str	r0, [r5, #24]
   1cb38:	mov	r0, r4
   1cb3c:	sub	sp, fp, #28
   1cb40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb44:	ldr	r1, [r5, #24]
   1cb48:	cmp	r1, #0
   1cb4c:	bne	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1cb50:	mov	r1, #8
   1cb54:	b	1cb68 <flatcc_json_parser_union_type@@Base+0x5b8>
   1cb58:	ldr	r1, [r5, #24]
   1cb5c:	cmp	r1, #0
   1cb60:	bne	1cb38 <flatcc_json_parser_union_type@@Base+0x588>
   1cb64:	mov	r1, #14
   1cb68:	str	r0, [r5, #36]	; 0x24
   1cb6c:	add	r0, r0, #1
   1cb70:	ldr	r2, [r5, #4]
   1cb74:	sub	r0, r0, r2
   1cb78:	str	r0, [r5, #20]
   1cb7c:	str	r1, [r5, #24]
   1cb80:	b	1cb38 <flatcc_json_parser_union_type@@Base+0x588>

0001cb84 <flatcc_json_parser_union_vector@@Base>:
   1cb84:	push	{r4, r5, r6, r7, fp, lr}
   1cb88:	add	fp, sp, #16
   1cb8c:	sub	sp, sp, #16
   1cb90:	mov	r6, r1
   1cb94:	mov	r5, r0
   1cb98:	ldr	r0, [r0]
   1cb9c:	ldr	r1, [fp, #12]
   1cba0:	mov	r7, r3
   1cba4:	mov	r4, r2
   1cba8:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1cbac:	add	r2, r0, #8
   1cbb0:	add	r3, r7, r7, lsl #1
   1cbb4:	mov	r1, r2
   1cbb8:	ldr	r7, [r1, r3, lsl #3]!
   1cbbc:	cmp	r7, #0
   1cbc0:	beq	1cbf8 <flatcc_json_parser_union_vector@@Base+0x74>
   1cbc4:	ldr	r0, [r5, #24]
   1cbc8:	cmp	r0, #0
   1cbcc:	bne	1cbec <flatcc_json_parser_union_vector@@Base+0x68>
   1cbd0:	str	r6, [r5, #36]	; 0x24
   1cbd4:	add	r2, r6, #1
   1cbd8:	mov	r0, #28
   1cbdc:	ldr	r1, [r5, #4]
   1cbe0:	sub	r1, r2, r1
   1cbe4:	str	r1, [r5, #20]
   1cbe8:	str	r0, [r5, #24]
   1cbec:	mov	r0, r4
   1cbf0:	sub	sp, fp, #16
   1cbf4:	pop	{r4, r5, r6, r7, fp, pc}
   1cbf8:	add	r2, r2, r3, lsl #3
   1cbfc:	ldr	r3, [r0, #4]
   1cc00:	ldrb	r7, [r2, #12]
   1cc04:	cmp	r7, #0
   1cc08:	beq	1cc44 <flatcc_json_parser_union_vector@@Base+0xc0>
   1cc0c:	sub	r3, r3, #1
   1cc10:	ldr	r1, [fp, #16]
   1cc14:	ldr	r7, [fp, #8]
   1cc18:	str	r3, [r0, #4]
   1cc1c:	ldr	r0, [r2, #16]
   1cc20:	ldr	r3, [r2, #20]
   1cc24:	mov	r2, r4
   1cc28:	stm	sp, {r0, r7}
   1cc2c:	str	r1, [sp, #8]
   1cc30:	mov	r0, r5
   1cc34:	mov	r1, r6
   1cc38:	bl	1cc78 <flatcc_json_parser_union_vector@@Base+0xf4>
   1cc3c:	sub	sp, fp, #16
   1cc40:	pop	{r4, r5, r6, r7, fp, pc}
   1cc44:	add	r3, r3, #1
   1cc48:	str	r3, [r0, #4]
   1cc4c:	ldr	r0, [r5, #16]
   1cc50:	str	r0, [r2, #8]
   1cc54:	ldr	r0, [r5, #4]
   1cc58:	str	r0, [r2, #4]
   1cc5c:	str	r6, [r1]
   1cc60:	mov	r0, r5
   1cc64:	mov	r1, r6
   1cc68:	mov	r2, r4
   1cc6c:	sub	sp, fp, #16
   1cc70:	pop	{r4, r5, r6, r7, fp, lr}
   1cc74:	b	1a288 <flatcc_json_parser_generic_json@@Base>
   1cc78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc7c:	add	fp, sp, #28
   1cc80:	sub	sp, sp, #12
   1cc84:	mov	r5, r0
   1cc88:	mov	r0, #0
   1cc8c:	mov	r8, r3
   1cc90:	mov	r6, r2
   1cc94:	mov	r7, r1
   1cc98:	str	r0, [sp, #8]
   1cc9c:	ldr	r0, [r5]
   1cca0:	bl	15fb8 <flatcc_builder_start_offset_vector@@Base>
   1cca4:	cmp	r0, #0
   1cca8:	beq	1ccc8 <flatcc_json_parser_union_vector@@Base+0x144>
   1ccac:	ldr	r0, [r5, #24]
   1ccb0:	cmp	r0, #0
   1ccb4:	bne	1cd44 <flatcc_json_parser_union_vector@@Base+0x1c0>
   1ccb8:	str	r7, [r5, #36]	; 0x24
   1ccbc:	mov	r0, #33	; 0x21
   1ccc0:	add	r2, r7, #1
   1ccc4:	b	1cd34 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1ccc8:	ldr	sl, [fp, #8]
   1cccc:	cmp	r7, r6
   1ccd0:	beq	1cd04 <flatcc_json_parser_union_vector@@Base+0x180>
   1ccd4:	ldrb	r0, [r7]
   1ccd8:	cmp	r0, #91	; 0x5b
   1ccdc:	bne	1cd04 <flatcc_json_parser_union_vector@@Base+0x180>
   1cce0:	add	r1, r7, #1
   1cce4:	sub	r0, r6, r1
   1cce8:	cmp	r0, #2
   1ccec:	blt	1cdd8 <flatcc_json_parser_union_vector@@Base+0x254>
   1ccf0:	ldrb	r0, [r1]
   1ccf4:	cmp	r0, #32
   1ccf8:	bls	1cdc8 <flatcc_json_parser_union_vector@@Base+0x244>
   1ccfc:	mov	r7, r1
   1cd00:	b	1cde8 <flatcc_json_parser_union_vector@@Base+0x264>
   1cd04:	ldr	r0, [r5, #24]
   1cd08:	mov	r9, r6
   1cd0c:	cmp	r0, #0
   1cd10:	beq	1cd50 <flatcc_json_parser_union_vector@@Base+0x1cc>
   1cd14:	cmp	sl, #0
   1cd18:	beq	1cd78 <flatcc_json_parser_union_vector@@Base+0x1f4>
   1cd1c:	ldr	r0, [r5, #24]
   1cd20:	cmp	r0, #0
   1cd24:	bne	1cd44 <flatcc_json_parser_union_vector@@Base+0x1c0>
   1cd28:	str	r9, [r5, #36]	; 0x24
   1cd2c:	mov	r0, #30
   1cd30:	add	r2, r9, #1
   1cd34:	ldr	r1, [r5, #4]
   1cd38:	sub	r1, r2, r1
   1cd3c:	str	r1, [r5, #20]
   1cd40:	str	r0, [r5, #24]
   1cd44:	mov	r0, r6
   1cd48:	sub	sp, fp, #28
   1cd4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd50:	str	r7, [r5, #36]	; 0x24
   1cd54:	add	r2, r7, #1
   1cd58:	mov	r0, #22
   1cd5c:	mov	r9, r6
   1cd60:	ldr	r1, [r5, #4]
   1cd64:	sub	r1, r2, r1
   1cd68:	str	r1, [r5, #20]
   1cd6c:	str	r0, [r5, #24]
   1cd70:	cmp	sl, #0
   1cd74:	bne	1cd1c <flatcc_json_parser_union_vector@@Base+0x198>
   1cd78:	ldr	r0, [r5]
   1cd7c:	mov	r1, r8
   1cd80:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1cd84:	mov	r1, r0
   1cd88:	ldr	r0, [r5]
   1cd8c:	bl	17500 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1cd90:	cmp	r0, #0
   1cd94:	str	r0, [sp, #8]
   1cd98:	beq	1cdc0 <flatcc_json_parser_union_vector@@Base+0x23c>
   1cd9c:	ldr	r1, [fp, #12]
   1cda0:	ldr	r0, [r5]
   1cda4:	bl	17728 <flatcc_builder_table_add_offset@@Base>
   1cda8:	cmp	r0, #0
   1cdac:	beq	1cdc0 <flatcc_json_parser_union_vector@@Base+0x23c>
   1cdb0:	ldr	r1, [sp, #8]
   1cdb4:	mov	r6, r9
   1cdb8:	str	r1, [r0]
   1cdbc:	b	1cd44 <flatcc_json_parser_union_vector@@Base+0x1c0>
   1cdc0:	mov	r7, r9
   1cdc4:	b	1ccac <flatcc_json_parser_union_vector@@Base+0x128>
   1cdc8:	bne	1cdd8 <flatcc_json_parser_union_vector@@Base+0x254>
   1cdcc:	ldrb	r0, [r7, #2]!
   1cdd0:	cmp	r0, #32
   1cdd4:	bhi	1cde8 <flatcc_json_parser_union_vector@@Base+0x264>
   1cdd8:	mov	r0, r5
   1cddc:	mov	r2, r6
   1cde0:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1cde4:	mov	r7, r0
   1cde8:	cmp	r7, r6
   1cdec:	mov	r4, r6
   1cdf0:	beq	1ce30 <flatcc_json_parser_union_vector@@Base+0x2ac>
   1cdf4:	ldrb	r0, [r7]
   1cdf8:	cmp	r0, #93	; 0x5d
   1cdfc:	bne	1ce2c <flatcc_json_parser_union_vector@@Base+0x2a8>
   1ce00:	add	r1, r7, #1
   1ce04:	sub	r0, r6, r1
   1ce08:	cmp	r0, #2
   1ce0c:	blt	1cf9c <flatcc_json_parser_union_vector@@Base+0x418>
   1ce10:	ldrb	r0, [r1]
   1ce14:	cmp	r0, #32
   1ce18:	bls	1cf88 <flatcc_json_parser_union_vector@@Base+0x404>
   1ce1c:	mov	r9, r1
   1ce20:	cmp	sl, #0
   1ce24:	bne	1cd1c <flatcc_json_parser_union_vector@@Base+0x198>
   1ce28:	b	1cd78 <flatcc_json_parser_union_vector@@Base+0x1f4>
   1ce2c:	mov	r4, r7
   1ce30:	cmp	sl, #0
   1ce34:	beq	1cf6c <flatcc_json_parser_union_vector@@Base+0x3e8>
   1ce38:	add	r0, r6, #1
   1ce3c:	mov	sl, #0
   1ce40:	add	r9, sp, #8
   1ce44:	str	r0, [sp, #4]
   1ce48:	ldr	r0, [r5]
   1ce4c:	mov	r1, r8
   1ce50:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1ce54:	ldrb	r3, [r0, -sl]
   1ce58:	ldr	r7, [fp, #16]
   1ce5c:	mov	r0, r5
   1ce60:	mov	r1, r4
   1ce64:	mov	r2, r6
   1ce68:	str	r9, [sp]
   1ce6c:	blx	r7
   1ce70:	cmp	r0, r6
   1ce74:	beq	1cd44 <flatcc_json_parser_union_vector@@Base+0x1c0>
   1ce78:	mov	r7, r0
   1ce7c:	ldr	r0, [r5]
   1ce80:	mov	r1, #1
   1ce84:	bl	15710 <flatcc_builder_extend_offset_vector@@Base>
   1ce88:	cmp	r0, #0
   1ce8c:	beq	1ccac <flatcc_json_parser_union_vector@@Base+0x128>
   1ce90:	ldr	r1, [sp, #8]
   1ce94:	str	r1, [r0]
   1ce98:	sub	r0, r6, r7
   1ce9c:	cmp	r0, #2
   1cea0:	blt	1ced4 <flatcc_json_parser_union_vector@@Base+0x350>
   1cea4:	ldrb	r0, [r7]
   1cea8:	cmp	r0, #32
   1ceac:	bls	1cec0 <flatcc_json_parser_union_vector@@Base+0x33c>
   1ceb0:	mov	r4, r7
   1ceb4:	cmp	r4, r6
   1ceb8:	bne	1cef0 <flatcc_json_parser_union_vector@@Base+0x36c>
   1cebc:	b	1cfb8 <flatcc_json_parser_union_vector@@Base+0x434>
   1cec0:	bne	1ced4 <flatcc_json_parser_union_vector@@Base+0x350>
   1cec4:	mov	r4, r7
   1cec8:	ldrb	r0, [r4, #1]!
   1cecc:	cmp	r0, #32
   1ced0:	bhi	1cee8 <flatcc_json_parser_union_vector@@Base+0x364>
   1ced4:	mov	r0, r5
   1ced8:	mov	r1, r7
   1cedc:	mov	r2, r6
   1cee0:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1cee4:	mov	r4, r0
   1cee8:	cmp	r4, r6
   1ceec:	beq	1cfb8 <flatcc_json_parser_union_vector@@Base+0x434>
   1cef0:	ldrb	r0, [r4]
   1cef4:	cmp	r0, #44	; 0x2c
   1cef8:	bne	1cfc0 <flatcc_json_parser_union_vector@@Base+0x43c>
   1cefc:	add	r1, r4, #1
   1cf00:	sub	r0, r6, r1
   1cf04:	cmp	r0, #2
   1cf08:	blt	1cf38 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1cf0c:	ldrb	r0, [r1]
   1cf10:	cmp	r0, #32
   1cf14:	bls	1cf28 <flatcc_json_parser_union_vector@@Base+0x3a4>
   1cf18:	mov	r4, r1
   1cf1c:	cmp	r4, r6
   1cf20:	bne	1cf50 <flatcc_json_parser_union_vector@@Base+0x3cc>
   1cf24:	b	1cfec <flatcc_json_parser_union_vector@@Base+0x468>
   1cf28:	bne	1cf38 <flatcc_json_parser_union_vector@@Base+0x3b4>
   1cf2c:	ldrb	r0, [r4, #2]!
   1cf30:	cmp	r0, #32
   1cf34:	bhi	1cf48 <flatcc_json_parser_union_vector@@Base+0x3c4>
   1cf38:	mov	r0, r5
   1cf3c:	mov	r2, r6
   1cf40:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1cf44:	mov	r4, r0
   1cf48:	cmp	r4, r6
   1cf4c:	beq	1cfec <flatcc_json_parser_union_vector@@Base+0x468>
   1cf50:	ldrb	r0, [r4]
   1cf54:	cmp	r0, #93	; 0x5d
   1cf58:	beq	1cfc8 <flatcc_json_parser_union_vector@@Base+0x444>
   1cf5c:	ldr	r0, [fp, #8]
   1cf60:	sub	sl, sl, #1
   1cf64:	adds	r0, r0, sl
   1cf68:	bne	1ce48 <flatcc_json_parser_union_vector@@Base+0x2c4>
   1cf6c:	ldr	r0, [r5, #24]
   1cf70:	cmp	r0, #0
   1cf74:	bne	1cd44 <flatcc_json_parser_union_vector@@Base+0x1c0>
   1cf78:	str	r4, [r5, #36]	; 0x24
   1cf7c:	mov	r0, #30
   1cf80:	add	r2, r4, #1
   1cf84:	b	1cd34 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1cf88:	bne	1cf9c <flatcc_json_parser_union_vector@@Base+0x418>
   1cf8c:	ldrb	r0, [r7, #2]!
   1cf90:	cmp	r0, #32
   1cf94:	mov	r9, r7
   1cf98:	bhi	1cd14 <flatcc_json_parser_union_vector@@Base+0x190>
   1cf9c:	mov	r0, r5
   1cfa0:	mov	r2, r6
   1cfa4:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1cfa8:	mov	r9, r0
   1cfac:	cmp	sl, #0
   1cfb0:	bne	1cd1c <flatcc_json_parser_union_vector@@Base+0x198>
   1cfb4:	b	1cd78 <flatcc_json_parser_union_vector@@Base+0x1f4>
   1cfb8:	mov	r9, r6
   1cfbc:	b	1d064 <flatcc_json_parser_union_vector@@Base+0x4e0>
   1cfc0:	cmp	r0, #93	; 0x5d
   1cfc4:	bne	1d00c <flatcc_json_parser_union_vector@@Base+0x488>
   1cfc8:	add	r1, r4, #1
   1cfcc:	sub	r0, r6, r1
   1cfd0:	cmp	r0, #2
   1cfd4:	blt	1d054 <flatcc_json_parser_union_vector@@Base+0x4d0>
   1cfd8:	ldrb	r0, [r1]
   1cfdc:	cmp	r0, #32
   1cfe0:	bls	1d040 <flatcc_json_parser_union_vector@@Base+0x4bc>
   1cfe4:	mov	r9, r1
   1cfe8:	b	1d064 <flatcc_json_parser_union_vector@@Base+0x4e0>
   1cfec:	ldr	r0, [r5, #24]
   1cff0:	mov	r9, r6
   1cff4:	cmp	r0, #0
   1cff8:	bne	1d064 <flatcc_json_parser_union_vector@@Base+0x4e0>
   1cffc:	str	r6, [r5, #36]	; 0x24
   1d000:	ldr	r2, [sp, #4]
   1d004:	mov	r0, #9
   1d008:	b	1d028 <flatcc_json_parser_union_vector@@Base+0x4a4>
   1d00c:	ldr	r0, [r5, #24]
   1d010:	mov	r9, r6
   1d014:	cmp	r0, #0
   1d018:	bne	1d064 <flatcc_json_parser_union_vector@@Base+0x4e0>
   1d01c:	str	r4, [r5, #36]	; 0x24
   1d020:	mov	r0, #9
   1d024:	add	r2, r4, #1
   1d028:	ldr	r1, [r5, #4]
   1d02c:	sub	r1, r2, r1
   1d030:	mov	r9, r6
   1d034:	str	r1, [r5, #20]
   1d038:	str	r0, [r5, #24]
   1d03c:	b	1d064 <flatcc_json_parser_union_vector@@Base+0x4e0>
   1d040:	bne	1d054 <flatcc_json_parser_union_vector@@Base+0x4d0>
   1d044:	ldrb	r0, [r4, #2]!
   1d048:	cmp	r0, #32
   1d04c:	mov	r9, r4
   1d050:	bhi	1d064 <flatcc_json_parser_union_vector@@Base+0x4e0>
   1d054:	mov	r0, r5
   1d058:	mov	r2, r6
   1d05c:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1d060:	mov	r9, r0
   1d064:	ldr	r0, [fp, #8]
   1d068:	add	r0, r0, sl
   1d06c:	cmp	r0, #1
   1d070:	bne	1cd1c <flatcc_json_parser_union_vector@@Base+0x198>
   1d074:	b	1cd78 <flatcc_json_parser_union_vector@@Base+0x1f4>

0001d078 <flatcc_json_parser_union_type_vector@@Base>:
   1d078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d07c:	add	fp, sp, #28
   1d080:	sub	sp, sp, #28
   1d084:	mov	r7, r1
   1d088:	mov	r5, r0
   1d08c:	ldr	r0, [r0]
   1d090:	ldr	r1, [fp, #12]
   1d094:	mov	r4, r3
   1d098:	mov	r8, r2
   1d09c:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1d0a0:	add	r0, r0, #8
   1d0a4:	add	r6, r4, r4, lsl #1
   1d0a8:	add	r4, r0, r6, lsl #3
   1d0ac:	mov	r0, r4
   1d0b0:	ldrb	r1, [r0, #12]!
   1d0b4:	cmp	r1, #0
   1d0b8:	beq	1d0d8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   1d0bc:	ldr	r0, [r5, #24]
   1d0c0:	cmp	r0, #0
   1d0c4:	bne	1d128 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d0c8:	str	r7, [r5, #36]	; 0x24
   1d0cc:	mov	r0, #28
   1d0d0:	add	r2, r7, #1
   1d0d4:	b	1d118 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1d0d8:	mov	r1, #1
   1d0dc:	mov	r2, #1
   1d0e0:	mvn	r3, #0
   1d0e4:	strb	r1, [r0]
   1d0e8:	mov	r1, #1
   1d0ec:	ldr	r0, [r5]
   1d0f0:	bl	15f2c <flatcc_builder_start_vector@@Base>
   1d0f4:	cmp	r0, #0
   1d0f8:	beq	1d134 <flatcc_json_parser_union_type_vector@@Base+0xbc>
   1d0fc:	mov	sl, r7
   1d100:	ldr	r0, [r5, #24]
   1d104:	cmp	r0, #0
   1d108:	bne	1d128 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d10c:	str	sl, [r5, #36]	; 0x24
   1d110:	mov	r0, #33	; 0x21
   1d114:	add	r2, sl, #1
   1d118:	ldr	r1, [r5, #4]
   1d11c:	sub	r1, r2, r1
   1d120:	str	r1, [r5, #20]
   1d124:	str	r0, [r5, #24]
   1d128:	mov	r0, r8
   1d12c:	sub	sp, fp, #28
   1d130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d134:	cmp	r7, r8
   1d138:	beq	1d16c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1d13c:	ldrb	r0, [r7]
   1d140:	cmp	r0, #91	; 0x5b
   1d144:	bne	1d16c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1d148:	add	r1, r7, #1
   1d14c:	sub	r0, r8, r1
   1d150:	cmp	r0, #2
   1d154:	blt	1d1b0 <flatcc_json_parser_union_type_vector@@Base+0x138>
   1d158:	ldrb	r0, [r1]
   1d15c:	cmp	r0, #32
   1d160:	bls	1d1a0 <flatcc_json_parser_union_type_vector@@Base+0x128>
   1d164:	mov	r7, r1
   1d168:	b	1d1c0 <flatcc_json_parser_union_type_vector@@Base+0x148>
   1d16c:	ldr	r0, [r5, #24]
   1d170:	cmp	r0, #0
   1d174:	mov	r0, r8
   1d178:	bne	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d17c:	str	r7, [r5, #36]	; 0x24
   1d180:	mov	r0, #22
   1d184:	add	r2, r7, #1
   1d188:	ldr	r1, [r5, #4]
   1d18c:	sub	r1, r2, r1
   1d190:	str	r1, [r5, #20]
   1d194:	str	r0, [r5, #24]
   1d198:	mov	r0, r8
   1d19c:	b	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d1a0:	bne	1d1b0 <flatcc_json_parser_union_type_vector@@Base+0x138>
   1d1a4:	ldrb	r0, [r7, #2]!
   1d1a8:	cmp	r0, #32
   1d1ac:	bhi	1d1c0 <flatcc_json_parser_union_type_vector@@Base+0x148>
   1d1b0:	mov	r0, r5
   1d1b4:	mov	r2, r8
   1d1b8:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1d1bc:	mov	r7, r0
   1d1c0:	cmp	r7, r8
   1d1c4:	mov	sl, r8
   1d1c8:	beq	1d210 <flatcc_json_parser_union_type_vector@@Base+0x198>
   1d1cc:	ldrb	r0, [r7]
   1d1d0:	cmp	r0, #93	; 0x5d
   1d1d4:	bne	1d20c <flatcc_json_parser_union_type_vector@@Base+0x194>
   1d1d8:	add	r1, r7, #1
   1d1dc:	sub	r0, r8, r1
   1d1e0:	cmp	r0, #2
   1d1e4:	blt	1d638 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1d1e8:	ldrb	r0, [r1]
   1d1ec:	cmp	r0, #32
   1d1f0:	bhi	1d5b8 <flatcc_json_parser_union_type_vector@@Base+0x540>
   1d1f4:	bne	1d638 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1d1f8:	ldrb	r0, [r7, #2]!
   1d1fc:	cmp	r0, #32
   1d200:	mov	r0, r7
   1d204:	bls	1d638 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1d208:	b	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d20c:	mov	sl, r7
   1d210:	ldr	r0, [r5]
   1d214:	mov	r1, #1
   1d218:	bl	15368 <flatcc_builder_extend_vector@@Base>
   1d21c:	cmp	r0, #0
   1d220:	beq	1d100 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d224:	mov	r1, r0
   1d228:	add	r0, r8, #1
   1d22c:	str	r4, [sp, #16]
   1d230:	str	r0, [sp, #12]
   1d234:	mov	r9, #0
   1d238:	cmp	sl, r8
   1d23c:	mov	r4, r8
   1d240:	str	r1, [sp, #20]
   1d244:	strb	r9, [sp, #27]
   1d248:	beq	1d438 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
   1d24c:	mov	r2, sl
   1d250:	mov	r9, #0
   1d254:	ldrb	ip, [r2], #1
   1d258:	cmp	ip, #45	; 0x2d
   1d25c:	movne	r2, sl
   1d260:	cmp	r2, r8
   1d264:	beq	1d2d0 <flatcc_json_parser_union_type_vector@@Base+0x258>
   1d268:	mov	r7, #0
   1d26c:	mov	r0, #0
   1d270:	mov	r4, #10
   1d274:	ldrb	r1, [r2]
   1d278:	sub	r3, r1, #48	; 0x30
   1d27c:	uxtb	r3, r3
   1d280:	cmp	r3, #9
   1d284:	bhi	1d2e4 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   1d288:	add	r3, r0, r0, lsl #2
   1d28c:	lsl	r3, r3, #1
   1d290:	umlal	r1, r3, r7, r4
   1d294:	subs	r1, r1, #48	; 0x30
   1d298:	sbc	r3, r3, #0
   1d29c:	subs	r7, r1, r7
   1d2a0:	sbcs	r0, r3, r0
   1d2a4:	bcc	1d350 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   1d2a8:	add	r2, r2, #1
   1d2ac:	mov	r7, r1
   1d2b0:	mov	r0, r3
   1d2b4:	cmp	r8, r2
   1d2b8:	bne	1d274 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   1d2bc:	mov	lr, #0
   1d2c0:	mov	r2, r8
   1d2c4:	mov	r7, r1
   1d2c8:	mov	r0, r3
   1d2cc:	b	1d2e8 <flatcc_json_parser_union_type_vector@@Base+0x270>
   1d2d0:	mov	r2, r8
   1d2d4:	mov	r7, #0
   1d2d8:	mov	r0, #0
   1d2dc:	mov	lr, #0
   1d2e0:	b	1d2e8 <flatcc_json_parser_union_type_vector@@Base+0x270>
   1d2e4:	mov	lr, #1
   1d2e8:	cmp	r2, sl
   1d2ec:	mov	r4, sl
   1d2f0:	beq	1d438 <flatcc_json_parser_union_type_vector@@Base+0x3c0>
   1d2f4:	cmp	lr, #0
   1d2f8:	beq	1d348 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   1d2fc:	ldrb	r1, [r2]
   1d300:	cmp	r1, #46	; 0x2e
   1d304:	beq	1d314 <flatcc_json_parser_union_type_vector@@Base+0x29c>
   1d308:	cmp	r1, #101	; 0x65
   1d30c:	cmpne	r1, #69	; 0x45
   1d310:	bne	1d348 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   1d314:	ldr	r0, [r5, #24]
   1d318:	mov	r7, #0
   1d31c:	mov	r4, r8
   1d320:	cmp	r0, #0
   1d324:	mov	r0, #0
   1d328:	bne	1d390 <flatcc_json_parser_union_type_vector@@Base+0x318>
   1d32c:	str	r2, [r5, #36]	; 0x24
   1d330:	add	r1, r2, #1
   1d334:	ldr	r0, [r5, #4]
   1d338:	sub	r0, r1, r0
   1d33c:	str	r0, [r5, #20]
   1d340:	mov	r0, #12
   1d344:	b	1d380 <flatcc_json_parser_union_type_vector@@Base+0x308>
   1d348:	mov	r4, r2
   1d34c:	b	1d390 <flatcc_json_parser_union_type_vector@@Base+0x318>
   1d350:	ldr	r0, [r5, #24]
   1d354:	mov	r7, #0
   1d358:	mov	r4, r8
   1d35c:	cmp	r0, #0
   1d360:	mov	r0, #0
   1d364:	bne	1d390 <flatcc_json_parser_union_type_vector@@Base+0x318>
   1d368:	str	r2, [r5, #36]	; 0x24
   1d36c:	add	r1, r2, #1
   1d370:	ldr	r0, [r5, #4]
   1d374:	sub	r0, r1, r0
   1d378:	str	r0, [r5, #20]
   1d37c:	mov	r0, #8
   1d380:	str	r0, [r5, #24]
   1d384:	mov	r7, #0
   1d388:	mov	r0, #0
   1d38c:	mov	r4, r8
   1d390:	mov	r9, #0
   1d394:	cmp	r4, sl
   1d398:	beq	1d3cc <flatcc_json_parser_union_type_vector@@Base+0x354>
   1d39c:	cmp	ip, #45	; 0x2d
   1d3a0:	bne	1d3dc <flatcc_json_parser_union_type_vector@@Base+0x364>
   1d3a4:	ldr	r0, [r5, #24]
   1d3a8:	cmp	r0, #0
   1d3ac:	bne	1d3f4 <flatcc_json_parser_union_type_vector@@Base+0x37c>
   1d3b0:	str	r4, [r5, #36]	; 0x24
   1d3b4:	add	r1, r4, #1
   1d3b8:	ldr	r0, [r5, #4]
   1d3bc:	sub	r0, r1, r0
   1d3c0:	str	r0, [r5, #20]
   1d3c4:	mov	r0, #8
   1d3c8:	b	1d430 <flatcc_json_parser_union_type_vector@@Base+0x3b8>
   1d3cc:	mov	r4, sl
   1d3d0:	cmp	sl, r4
   1d3d4:	bne	1d474 <flatcc_json_parser_union_type_vector@@Base+0x3fc>
   1d3d8:	b	1d440 <flatcc_json_parser_union_type_vector@@Base+0x3c8>
   1d3dc:	subs	r1, r7, #256	; 0x100
   1d3e0:	sbcs	r0, r0, #0
   1d3e4:	bcc	1d404 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   1d3e8:	ldr	r0, [r5, #24]
   1d3ec:	cmp	r0, #0
   1d3f0:	beq	1d418 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   1d3f4:	mov	r4, r8
   1d3f8:	cmp	sl, r4
   1d3fc:	bne	1d474 <flatcc_json_parser_union_type_vector@@Base+0x3fc>
   1d400:	b	1d440 <flatcc_json_parser_union_type_vector@@Base+0x3c8>
   1d404:	mov	r9, r7
   1d408:	strb	r7, [sp, #27]
   1d40c:	cmp	sl, r4
   1d410:	bne	1d474 <flatcc_json_parser_union_type_vector@@Base+0x3fc>
   1d414:	b	1d440 <flatcc_json_parser_union_type_vector@@Base+0x3c8>
   1d418:	str	r4, [r5, #36]	; 0x24
   1d41c:	add	r1, r4, #1
   1d420:	ldr	r0, [r5, #4]
   1d424:	sub	r0, r1, r0
   1d428:	str	r0, [r5, #20]
   1d42c:	mov	r0, #7
   1d430:	str	r0, [r5, #24]
   1d434:	mov	r4, r8
   1d438:	cmp	sl, r4
   1d43c:	bne	1d474 <flatcc_json_parser_union_type_vector@@Base+0x3fc>
   1d440:	ldr	r3, [fp, #16]
   1d444:	add	r0, sp, #27
   1d448:	mov	r1, sl
   1d44c:	mov	r2, r8
   1d450:	str	r0, [sp]
   1d454:	mov	r0, r5
   1d458:	bl	1c934 <flatcc_json_parser_union_type@@Base+0x384>
   1d45c:	mov	r4, r0
   1d460:	cmp	r0, sl
   1d464:	beq	1d600 <flatcc_json_parser_union_type_vector@@Base+0x588>
   1d468:	cmp	r4, r8
   1d46c:	beq	1d600 <flatcc_json_parser_union_type_vector@@Base+0x588>
   1d470:	ldrb	r9, [sp, #27]
   1d474:	ldr	r1, [fp, #24]
   1d478:	uxtb	r0, r9
   1d47c:	blx	r1
   1d480:	cmp	r0, #0
   1d484:	bne	1d49c <flatcc_json_parser_union_type_vector@@Base+0x424>
   1d488:	ldrb	r0, [r5, #8]
   1d48c:	tst	r0, #1
   1d490:	beq	1d608 <flatcc_json_parser_union_type_vector@@Base+0x590>
   1d494:	mov	r9, #0
   1d498:	strb	r9, [sp, #27]
   1d49c:	ldr	r0, [sp, #20]
   1d4a0:	strb	r9, [r0]
   1d4a4:	sub	r0, r8, r4
   1d4a8:	cmp	r0, #2
   1d4ac:	blt	1d4e0 <flatcc_json_parser_union_type_vector@@Base+0x468>
   1d4b0:	ldrb	r0, [r4]
   1d4b4:	cmp	r0, #32
   1d4b8:	bls	1d4cc <flatcc_json_parser_union_type_vector@@Base+0x454>
   1d4bc:	mov	sl, r4
   1d4c0:	cmp	sl, r8
   1d4c4:	bne	1d4fc <flatcc_json_parser_union_type_vector@@Base+0x484>
   1d4c8:	b	1d588 <flatcc_json_parser_union_type_vector@@Base+0x510>
   1d4cc:	bne	1d4e0 <flatcc_json_parser_union_type_vector@@Base+0x468>
   1d4d0:	mov	sl, r4
   1d4d4:	ldrb	r0, [sl, #1]!
   1d4d8:	cmp	r0, #32
   1d4dc:	bhi	1d4f4 <flatcc_json_parser_union_type_vector@@Base+0x47c>
   1d4e0:	mov	r0, r5
   1d4e4:	mov	r1, r4
   1d4e8:	mov	r2, r8
   1d4ec:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1d4f0:	mov	sl, r0
   1d4f4:	cmp	sl, r8
   1d4f8:	beq	1d588 <flatcc_json_parser_union_type_vector@@Base+0x510>
   1d4fc:	ldrb	r0, [sl]
   1d500:	ldr	r4, [sp, #16]
   1d504:	cmp	r0, #44	; 0x2c
   1d508:	bne	1d594 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   1d50c:	add	r1, sl, #1
   1d510:	sub	r0, r8, r1
   1d514:	cmp	r0, #2
   1d518:	blt	1d548 <flatcc_json_parser_union_type_vector@@Base+0x4d0>
   1d51c:	ldrb	r0, [r1]
   1d520:	cmp	r0, #32
   1d524:	bls	1d538 <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   1d528:	mov	sl, r1
   1d52c:	cmp	sl, r8
   1d530:	bne	1d560 <flatcc_json_parser_union_type_vector@@Base+0x4e8>
   1d534:	b	1d5c0 <flatcc_json_parser_union_type_vector@@Base+0x548>
   1d538:	bne	1d548 <flatcc_json_parser_union_type_vector@@Base+0x4d0>
   1d53c:	ldrb	r0, [sl, #2]!
   1d540:	cmp	r0, #32
   1d544:	bhi	1d558 <flatcc_json_parser_union_type_vector@@Base+0x4e0>
   1d548:	mov	r0, r5
   1d54c:	mov	r2, r8
   1d550:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1d554:	mov	sl, r0
   1d558:	cmp	sl, r8
   1d55c:	beq	1d5c0 <flatcc_json_parser_union_type_vector@@Base+0x548>
   1d560:	ldrb	r0, [sl]
   1d564:	cmp	r0, #93	; 0x5d
   1d568:	beq	1d59c <flatcc_json_parser_union_type_vector@@Base+0x524>
   1d56c:	ldr	r0, [r5]
   1d570:	mov	r1, #1
   1d574:	bl	15368 <flatcc_builder_extend_vector@@Base>
   1d578:	mov	r1, r0
   1d57c:	cmp	r0, #0
   1d580:	bne	1d234 <flatcc_json_parser_union_type_vector@@Base+0x1bc>
   1d584:	b	1d100 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d588:	ldr	r4, [sp, #16]
   1d58c:	mov	r0, r8
   1d590:	b	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d594:	cmp	r0, #93	; 0x5d
   1d598:	bne	1d5e0 <flatcc_json_parser_union_type_vector@@Base+0x568>
   1d59c:	add	r1, sl, #1
   1d5a0:	sub	r0, r8, r1
   1d5a4:	cmp	r0, #2
   1d5a8:	blt	1d638 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1d5ac:	ldrb	r0, [r1]
   1d5b0:	cmp	r0, #32
   1d5b4:	bls	1d624 <flatcc_json_parser_union_type_vector@@Base+0x5ac>
   1d5b8:	mov	r0, r1
   1d5bc:	b	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d5c0:	ldr	r0, [r5, #24]
   1d5c4:	cmp	r0, #0
   1d5c8:	mov	r0, r8
   1d5cc:	bne	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d5d0:	str	r8, [r5, #36]	; 0x24
   1d5d4:	ldr	r2, [sp, #12]
   1d5d8:	mov	r0, #9
   1d5dc:	b	1d188 <flatcc_json_parser_union_type_vector@@Base+0x110>
   1d5e0:	ldr	r0, [r5, #24]
   1d5e4:	cmp	r0, #0
   1d5e8:	mov	r0, r8
   1d5ec:	bne	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d5f0:	str	sl, [r5, #36]	; 0x24
   1d5f4:	mov	r0, #9
   1d5f8:	add	r2, sl, #1
   1d5fc:	b	1d188 <flatcc_json_parser_union_type_vector@@Base+0x110>
   1d600:	mov	sl, r4
   1d604:	b	1d100 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d608:	ldr	r0, [r5, #24]
   1d60c:	cmp	r0, #0
   1d610:	bne	1d128 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d614:	str	r4, [r5, #36]	; 0x24
   1d618:	mov	r0, #15
   1d61c:	add	r2, r4, #1
   1d620:	b	1d118 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1d624:	bne	1d638 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   1d628:	ldrb	r0, [sl, #2]!
   1d62c:	cmp	r0, #32
   1d630:	mov	r0, sl
   1d634:	bhi	1d644 <flatcc_json_parser_union_type_vector@@Base+0x5cc>
   1d638:	mov	r0, r5
   1d63c:	mov	r2, r8
   1d640:	bl	19820 <flatcc_json_parser_space_ext@@Base>
   1d644:	mov	sl, r0
   1d648:	ldr	r0, [r5]
   1d64c:	bl	172a8 <flatcc_builder_vector_count@@Base>
   1d650:	str	r0, [r4, #16]
   1d654:	mov	r7, r0
   1d658:	ldr	r0, [r5]
   1d65c:	mov	r1, r7
   1d660:	bl	1462c <flatcc_builder_enter_user_frame@@Base>
   1d664:	mov	r9, r0
   1d668:	ldr	r0, [r5]
   1d66c:	mov	r1, r9
   1d670:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1d674:	mov	r4, r0
   1d678:	ldr	r0, [r5]
   1d67c:	bl	172b4 <flatcc_builder_vector_edit@@Base>
   1d680:	mov	r1, r0
   1d684:	mov	r0, r4
   1d688:	mov	r2, r7
   1d68c:	bl	12900 <memcpy@plt>
   1d690:	ldr	r0, [r5]
   1d694:	bl	171ac <flatcc_builder_end_vector@@Base>
   1d698:	cmp	r0, #0
   1d69c:	beq	1d100 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d6a0:	ldr	r1, [fp, #8]
   1d6a4:	mov	r4, r0
   1d6a8:	ldr	r0, [r5]
   1d6ac:	sub	r1, r1, #1
   1d6b0:	bl	17728 <flatcc_builder_table_add_offset@@Base>
   1d6b4:	cmp	r0, #0
   1d6b8:	beq	1d100 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d6bc:	str	r4, [r0]
   1d6c0:	ldr	r1, [fp, #12]
   1d6c4:	ldr	r0, [r5]
   1d6c8:	bl	147ec <flatcc_builder_get_user_frame_ptr@@Base>
   1d6cc:	add	r2, r0, #8
   1d6d0:	mov	r3, r2
   1d6d4:	ldr	r1, [r3, r6, lsl #3]!
   1d6d8:	str	r9, [r3, #20]
   1d6dc:	cmp	r1, #0
   1d6e0:	ldr	r3, [r0, #4]
   1d6e4:	beq	1d748 <flatcc_json_parser_union_type_vector@@Base+0x6d0>
   1d6e8:	cmp	r3, #0
   1d6ec:	beq	1d758 <flatcc_json_parser_union_type_vector@@Base+0x6e0>
   1d6f0:	sub	r3, r3, #1
   1d6f4:	ldr	ip, [fp, #20]
   1d6f8:	str	r3, [r0, #4]
   1d6fc:	add	r0, r2, r6, lsl #3
   1d700:	mov	r3, r9
   1d704:	ldr	r2, [r0, #8]
   1d708:	ldr	r6, [r5, #4]
   1d70c:	ldr	r4, [r5, #16]
   1d710:	str	r2, [r5, #16]
   1d714:	mov	r2, r8
   1d718:	ldr	r0, [r0, #4]
   1d71c:	str	r0, [r5, #4]
   1d720:	ldr	r0, [fp, #8]
   1d724:	str	r7, [sp]
   1d728:	stmib	sp, {r0, ip}
   1d72c:	mov	r0, r5
   1d730:	bl	1cc78 <flatcc_json_parser_union_vector@@Base+0xf4>
   1d734:	cmp	r0, r8
   1d738:	beq	1d128 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d73c:	str	r6, [r5, #4]
   1d740:	str	r4, [r5, #16]
   1d744:	b	1d750 <flatcc_json_parser_union_type_vector@@Base+0x6d8>
   1d748:	add	r1, r3, #1
   1d74c:	str	r1, [r0, #4]
   1d750:	mov	r8, sl
   1d754:	b	1d128 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d758:	ldr	r0, [pc, #24]	; 1d778 <flatcc_json_parser_union_type_vector@@Base+0x700>
   1d75c:	ldr	r1, [pc, #24]	; 1d77c <flatcc_json_parser_union_type_vector@@Base+0x704>
   1d760:	ldr	r3, [pc, #24]	; 1d780 <flatcc_json_parser_union_type_vector@@Base+0x708>
   1d764:	movw	r2, #1122	; 0x462
   1d768:	add	r0, pc, r0
   1d76c:	add	r1, pc, r1
   1d770:	add	r3, pc, r3
   1d774:	bl	129c0 <__assert_fail@plt>
   1d778:	andeq	r2, r0, r0, ror r8
   1d77c:	andeq	r2, r0, fp, ror r8
   1d780:	andeq	r2, r0, r4, lsr #19

0001d784 <flatcc_json_parser_table_as_root@@Base>:
   1d784:	push	{r4, r5, r6, r7, fp, lr}
   1d788:	add	fp, sp, #16
   1d78c:	sub	sp, sp, #48	; 0x30
   1d790:	add	r5, sp, #4
   1d794:	cmp	r1, #0
   1d798:	mov	r6, r0
   1d79c:	vmov.i32	q8, #0	; 0x00000000
   1d7a0:	add	r7, r2, r3
   1d7a4:	mov	r4, r2
   1d7a8:	movne	r5, r1
   1d7ac:	mov	r1, #1
   1d7b0:	add	r0, r5, #12
   1d7b4:	vst1.32	{d16-d17}, [r0]
   1d7b8:	add	r0, r5, #28
   1d7bc:	vst1.32	{d16-d17}, [r0]
   1d7c0:	ldr	r0, [fp, #8]
   1d7c4:	str	r6, [r5]
   1d7c8:	str	r2, [r5, #4]
   1d7cc:	str	r0, [r5, #8]
   1d7d0:	str	r1, [r5, #16]
   1d7d4:	mov	r1, #2
   1d7d8:	str	r2, [r5, #28]
   1d7dc:	str	r7, [r5, #32]
   1d7e0:	str	r2, [r5, #36]	; 0x24
   1d7e4:	mov	r2, #0
   1d7e8:	and	r3, r1, r0, lsr #1
   1d7ec:	ldr	r1, [fp, #12]
   1d7f0:	mov	r0, r6
   1d7f4:	bl	14e60 <flatcc_builder_start_buffer@@Base>
   1d7f8:	mov	r1, r0
   1d7fc:	mvn	r0, #0
   1d800:	cmp	r1, #0
   1d804:	bne	1d82c <flatcc_json_parser_table_as_root@@Base+0xa8>
   1d808:	ldr	ip, [fp, #16]
   1d80c:	mov	r3, sp
   1d810:	mov	r0, r5
   1d814:	mov	r1, r4
   1d818:	mov	r2, r7
   1d81c:	blx	ip
   1d820:	ldr	r0, [r5, #24]
   1d824:	cmp	r0, #0
   1d828:	beq	1d834 <flatcc_json_parser_table_as_root@@Base+0xb0>
   1d82c:	sub	sp, fp, #16
   1d830:	pop	{r4, r5, r6, r7, fp, pc}
   1d834:	ldr	r1, [sp]
   1d838:	mov	r0, r6
   1d83c:	bl	15060 <flatcc_builder_end_buffer@@Base>
   1d840:	cmp	r0, #0
   1d844:	mvn	r0, #0
   1d848:	movne	r0, #0
   1d84c:	strne	r4, [r5, #40]	; 0x28
   1d850:	sub	sp, fp, #16
   1d854:	pop	{r4, r5, r6, r7, fp, pc}

0001d858 <flatcc_json_parser_struct_as_root@@Base>:
   1d858:	push	{r4, r5, r6, r7, fp, lr}
   1d85c:	add	fp, sp, #16
   1d860:	sub	sp, sp, #48	; 0x30
   1d864:	add	r5, sp, #4
   1d868:	cmp	r1, #0
   1d86c:	mov	r6, r0
   1d870:	vmov.i32	q8, #0	; 0x00000000
   1d874:	add	r7, r2, r3
   1d878:	mov	r4, r2
   1d87c:	movne	r5, r1
   1d880:	mov	r1, #1
   1d884:	add	r0, r5, #12
   1d888:	vst1.32	{d16-d17}, [r0]
   1d88c:	add	r0, r5, #28
   1d890:	vst1.32	{d16-d17}, [r0]
   1d894:	ldr	r0, [fp, #8]
   1d898:	str	r6, [r5]
   1d89c:	str	r2, [r5, #4]
   1d8a0:	str	r0, [r5, #8]
   1d8a4:	str	r1, [r5, #16]
   1d8a8:	mov	r1, #2
   1d8ac:	str	r2, [r5, #28]
   1d8b0:	str	r7, [r5, #32]
   1d8b4:	str	r2, [r5, #36]	; 0x24
   1d8b8:	mov	r2, #0
   1d8bc:	and	r3, r1, r0, lsr #1
   1d8c0:	ldr	r1, [fp, #12]
   1d8c4:	mov	r0, r6
   1d8c8:	bl	14e60 <flatcc_builder_start_buffer@@Base>
   1d8cc:	mov	r1, r0
   1d8d0:	mvn	r0, #0
   1d8d4:	cmp	r1, #0
   1d8d8:	bne	1d900 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   1d8dc:	ldr	ip, [fp, #16]
   1d8e0:	mov	r3, sp
   1d8e4:	mov	r0, r5
   1d8e8:	mov	r1, r4
   1d8ec:	mov	r2, r7
   1d8f0:	blx	ip
   1d8f4:	ldr	r0, [r5, #24]
   1d8f8:	cmp	r0, #0
   1d8fc:	beq	1d908 <flatcc_json_parser_struct_as_root@@Base+0xb0>
   1d900:	sub	sp, fp, #16
   1d904:	pop	{r4, r5, r6, r7, fp, pc}
   1d908:	ldr	r1, [sp]
   1d90c:	mov	r0, r6
   1d910:	bl	15060 <flatcc_builder_end_buffer@@Base>
   1d914:	cmp	r0, #0
   1d918:	mvn	r0, #0
   1d91c:	movne	r0, #0
   1d920:	strne	r4, [r5, #40]	; 0x28
   1d924:	sub	sp, fp, #16
   1d928:	pop	{r4, r5, r6, r7, fp, pc}
   1d92c:	eor	r1, r1, #-2147483648	; 0x80000000
   1d930:	b	1d938 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   1d934:	eor	r3, r3, #-2147483648	; 0x80000000
   1d938:	push	{r4, r5, lr}
   1d93c:	lsl	r4, r1, #1
   1d940:	lsl	r5, r3, #1
   1d944:	teq	r4, r5
   1d948:	teqeq	r0, r2
   1d94c:	orrsne	ip, r4, r0
   1d950:	orrsne	ip, r5, r2
   1d954:	mvnsne	ip, r4, asr #21
   1d958:	mvnsne	ip, r5, asr #21
   1d95c:	beq	1db48 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   1d960:	lsr	r4, r4, #21
   1d964:	rsbs	r5, r4, r5, lsr #21
   1d968:	rsblt	r5, r5, #0
   1d96c:	ble	1d98c <flatcc_json_parser_struct_as_root@@Base+0x134>
   1d970:	add	r4, r4, r5
   1d974:	eor	r2, r0, r2
   1d978:	eor	r3, r1, r3
   1d97c:	eor	r0, r2, r0
   1d980:	eor	r1, r3, r1
   1d984:	eor	r2, r0, r2
   1d988:	eor	r3, r1, r3
   1d98c:	cmp	r5, #54	; 0x36
   1d990:	pophi	{r4, r5, pc}
   1d994:	tst	r1, #-2147483648	; 0x80000000
   1d998:	lsl	r1, r1, #12
   1d99c:	mov	ip, #1048576	; 0x100000
   1d9a0:	orr	r1, ip, r1, lsr #12
   1d9a4:	beq	1d9b0 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1d9a8:	rsbs	r0, r0, #0
   1d9ac:	rsc	r1, r1, #0
   1d9b0:	tst	r3, #-2147483648	; 0x80000000
   1d9b4:	lsl	r3, r3, #12
   1d9b8:	orr	r3, ip, r3, lsr #12
   1d9bc:	beq	1d9c8 <flatcc_json_parser_struct_as_root@@Base+0x170>
   1d9c0:	rsbs	r2, r2, #0
   1d9c4:	rsc	r3, r3, #0
   1d9c8:	teq	r4, r5
   1d9cc:	beq	1db30 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   1d9d0:	sub	r4, r4, #1
   1d9d4:	rsbs	lr, r5, #32
   1d9d8:	blt	1d9f4 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   1d9dc:	lsl	ip, r2, lr
   1d9e0:	adds	r0, r0, r2, lsr r5
   1d9e4:	adc	r1, r1, #0
   1d9e8:	adds	r0, r0, r3, lsl lr
   1d9ec:	adcs	r1, r1, r3, asr r5
   1d9f0:	b	1da10 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   1d9f4:	sub	r5, r5, #32
   1d9f8:	add	lr, lr, #32
   1d9fc:	cmp	r2, #1
   1da00:	lsl	ip, r3, lr
   1da04:	orrcs	ip, ip, #2
   1da08:	adds	r0, r0, r3, asr r5
   1da0c:	adcs	r1, r1, r3, asr #31
   1da10:	and	r5, r1, #-2147483648	; 0x80000000
   1da14:	bpl	1da24 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1da18:	rsbs	ip, ip, #0
   1da1c:	rscs	r0, r0, #0
   1da20:	rsc	r1, r1, #0
   1da24:	cmp	r1, #1048576	; 0x100000
   1da28:	bcc	1da68 <flatcc_json_parser_struct_as_root@@Base+0x210>
   1da2c:	cmp	r1, #2097152	; 0x200000
   1da30:	bcc	1da50 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1da34:	lsrs	r1, r1, #1
   1da38:	rrxs	r0, r0
   1da3c:	rrx	ip, ip
   1da40:	add	r4, r4, #1
   1da44:	lsl	r2, r4, #21
   1da48:	cmn	r2, #4194304	; 0x400000
   1da4c:	bcs	1dba8 <flatcc_json_parser_struct_as_root@@Base+0x350>
   1da50:	cmp	ip, #-2147483648	; 0x80000000
   1da54:	lsrseq	ip, r0, #1
   1da58:	adcs	r0, r0, #0
   1da5c:	adc	r1, r1, r4, lsl #20
   1da60:	orr	r1, r1, r5
   1da64:	pop	{r4, r5, pc}
   1da68:	lsls	ip, ip, #1
   1da6c:	adcs	r0, r0, r0
   1da70:	adc	r1, r1, r1
   1da74:	tst	r1, #1048576	; 0x100000
   1da78:	sub	r4, r4, #1
   1da7c:	bne	1da50 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1da80:	teq	r1, #0
   1da84:	moveq	r1, r0
   1da88:	moveq	r0, #0
   1da8c:	clz	r3, r1
   1da90:	addeq	r3, r3, #32
   1da94:	sub	r3, r3, #11
   1da98:	subs	r2, r3, #32
   1da9c:	bge	1dac0 <flatcc_json_parser_struct_as_root@@Base+0x268>
   1daa0:	adds	r2, r2, #12
   1daa4:	ble	1dabc <flatcc_json_parser_struct_as_root@@Base+0x264>
   1daa8:	add	ip, r2, #20
   1daac:	rsb	r2, r2, #12
   1dab0:	lsl	r0, r1, ip
   1dab4:	lsr	r1, r1, r2
   1dab8:	b	1dad0 <flatcc_json_parser_struct_as_root@@Base+0x278>
   1dabc:	add	r2, r2, #20
   1dac0:	rsble	ip, r2, #32
   1dac4:	lsl	r1, r1, r2
   1dac8:	orrle	r1, r1, r0, lsr ip
   1dacc:	lslle	r0, r0, r2
   1dad0:	subs	r4, r4, r3
   1dad4:	addge	r1, r1, r4, lsl #20
   1dad8:	orrge	r1, r1, r5
   1dadc:	popge	{r4, r5, pc}
   1dae0:	mvn	r4, r4
   1dae4:	subs	r4, r4, #31
   1dae8:	bge	1db24 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   1daec:	adds	r4, r4, #12
   1daf0:	bgt	1db0c <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   1daf4:	add	r4, r4, #20
   1daf8:	rsb	r2, r4, #32
   1dafc:	lsr	r0, r0, r4
   1db00:	orr	r0, r0, r1, lsl r2
   1db04:	orr	r1, r5, r1, lsr r4
   1db08:	pop	{r4, r5, pc}
   1db0c:	rsb	r4, r4, #12
   1db10:	rsb	r2, r4, #32
   1db14:	lsr	r0, r0, r2
   1db18:	orr	r0, r0, r1, lsl r4
   1db1c:	mov	r1, r5
   1db20:	pop	{r4, r5, pc}
   1db24:	lsr	r0, r1, r4
   1db28:	mov	r1, r5
   1db2c:	pop	{r4, r5, pc}
   1db30:	teq	r4, #0
   1db34:	eor	r3, r3, #1048576	; 0x100000
   1db38:	eoreq	r1, r1, #1048576	; 0x100000
   1db3c:	addeq	r4, r4, #1
   1db40:	subne	r5, r5, #1
   1db44:	b	1d9d0 <flatcc_json_parser_struct_as_root@@Base+0x178>
   1db48:	mvns	ip, r4, asr #21
   1db4c:	mvnsne	ip, r5, asr #21
   1db50:	beq	1dbb8 <flatcc_json_parser_struct_as_root@@Base+0x360>
   1db54:	teq	r4, r5
   1db58:	teqeq	r0, r2
   1db5c:	beq	1db70 <flatcc_json_parser_struct_as_root@@Base+0x318>
   1db60:	orrs	ip, r4, r0
   1db64:	moveq	r1, r3
   1db68:	moveq	r0, r2
   1db6c:	pop	{r4, r5, pc}
   1db70:	teq	r1, r3
   1db74:	movne	r1, #0
   1db78:	movne	r0, #0
   1db7c:	popne	{r4, r5, pc}
   1db80:	lsrs	ip, r4, #21
   1db84:	bne	1db98 <flatcc_json_parser_struct_as_root@@Base+0x340>
   1db88:	lsls	r0, r0, #1
   1db8c:	adcs	r1, r1, r1
   1db90:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1db94:	pop	{r4, r5, pc}
   1db98:	adds	r4, r4, #4194304	; 0x400000
   1db9c:	addcc	r1, r1, #1048576	; 0x100000
   1dba0:	popcc	{r4, r5, pc}
   1dba4:	and	r5, r1, #-2147483648	; 0x80000000
   1dba8:	orr	r1, r5, #2130706432	; 0x7f000000
   1dbac:	orr	r1, r1, #15728640	; 0xf00000
   1dbb0:	mov	r0, #0
   1dbb4:	pop	{r4, r5, pc}
   1dbb8:	mvns	ip, r4, asr #21
   1dbbc:	movne	r1, r3
   1dbc0:	movne	r0, r2
   1dbc4:	mvnseq	ip, r5, asr #21
   1dbc8:	movne	r3, r1
   1dbcc:	movne	r2, r0
   1dbd0:	orrs	r4, r0, r1, lsl #12
   1dbd4:	orrseq	r5, r2, r3, lsl #12
   1dbd8:	teqeq	r1, r3
   1dbdc:	orrne	r1, r1, #524288	; 0x80000
   1dbe0:	pop	{r4, r5, pc}
   1dbe4:	teq	r0, #0
   1dbe8:	moveq	r1, #0
   1dbec:	bxeq	lr
   1dbf0:	push	{r4, r5, lr}
   1dbf4:	mov	r4, #1024	; 0x400
   1dbf8:	add	r4, r4, #50	; 0x32
   1dbfc:	mov	r5, #0
   1dc00:	mov	r1, #0
   1dc04:	b	1da80 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dc08:	teq	r0, #0
   1dc0c:	moveq	r1, #0
   1dc10:	bxeq	lr
   1dc14:	push	{r4, r5, lr}
   1dc18:	mov	r4, #1024	; 0x400
   1dc1c:	add	r4, r4, #50	; 0x32
   1dc20:	ands	r5, r0, #-2147483648	; 0x80000000
   1dc24:	rsbmi	r0, r0, #0
   1dc28:	mov	r1, #0
   1dc2c:	b	1da80 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dc30:	lsls	r2, r0, #1
   1dc34:	asr	r1, r2, #3
   1dc38:	rrx	r1, r1
   1dc3c:	lsl	r0, r2, #28
   1dc40:	andsne	r3, r2, #-16777216	; 0xff000000
   1dc44:	teqne	r3, #-16777216	; 0xff000000
   1dc48:	eorne	r1, r1, #939524096	; 0x38000000
   1dc4c:	bxne	lr
   1dc50:	bics	r2, r2, #-16777216	; 0xff000000
   1dc54:	bxeq	lr
   1dc58:	teq	r3, #-16777216	; 0xff000000
   1dc5c:	orreq	r1, r1, #524288	; 0x80000
   1dc60:	bxeq	lr
   1dc64:	push	{r4, r5, lr}
   1dc68:	mov	r4, #896	; 0x380
   1dc6c:	and	r5, r1, #-2147483648	; 0x80000000
   1dc70:	bic	r1, r1, #-2147483648	; 0x80000000
   1dc74:	b	1da80 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dc78:	orrs	r2, r0, r1
   1dc7c:	bxeq	lr
   1dc80:	push	{r4, r5, lr}
   1dc84:	mov	r5, #0
   1dc88:	b	1dca8 <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dc8c:	orrs	r2, r0, r1
   1dc90:	bxeq	lr
   1dc94:	push	{r4, r5, lr}
   1dc98:	ands	r5, r1, #-2147483648	; 0x80000000
   1dc9c:	bpl	1dca8 <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dca0:	rsbs	r0, r0, #0
   1dca4:	rsc	r1, r1, #0
   1dca8:	mov	r4, #1024	; 0x400
   1dcac:	add	r4, r4, #50	; 0x32
   1dcb0:	lsrs	ip, r1, #22
   1dcb4:	beq	1da24 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1dcb8:	mov	r2, #3
   1dcbc:	lsrs	ip, ip, #3
   1dcc0:	addne	r2, r2, #3
   1dcc4:	lsrs	ip, ip, #3
   1dcc8:	addne	r2, r2, #3
   1dccc:	add	r2, r2, ip, lsr #3
   1dcd0:	rsb	r3, r2, #32
   1dcd4:	lsl	ip, r0, r3
   1dcd8:	lsr	r0, r0, r2
   1dcdc:	orr	r0, r0, r1, lsl r3
   1dce0:	lsr	r1, r1, r2
   1dce4:	add	r4, r4, r2
   1dce8:	b	1da24 <flatcc_json_parser_struct_as_root@@Base+0x1cc>

0001dcec <__libc_csu_init@@Base>:
   1dcec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dcf0:	mov	r7, r0
   1dcf4:	ldr	r6, [pc, #72]	; 1dd44 <__libc_csu_init@@Base+0x58>
   1dcf8:	ldr	r5, [pc, #72]	; 1dd48 <__libc_csu_init@@Base+0x5c>
   1dcfc:	add	r6, pc, r6
   1dd00:	add	r5, pc, r5
   1dd04:	sub	r6, r6, r5
   1dd08:	mov	r8, r1
   1dd0c:	mov	r9, r2
   1dd10:	bl	128d4 <free@plt-0x20>
   1dd14:	asrs	r6, r6, #2
   1dd18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd1c:	mov	r4, #0
   1dd20:	add	r4, r4, #1
   1dd24:	ldr	r3, [r5], #4
   1dd28:	mov	r2, r9
   1dd2c:	mov	r1, r8
   1dd30:	mov	r0, r7
   1dd34:	blx	r3
   1dd38:	cmp	r6, r4
   1dd3c:	bne	1dd20 <__libc_csu_init@@Base+0x34>
   1dd40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd44:	andeq	r3, r1, r8, ror r1
   1dd48:	andeq	r3, r1, r0, ror r1

0001dd4c <__libc_csu_fini@@Base>:
   1dd4c:	bx	lr

Disassembly of section .fini:

0001dd50 <.fini>:
   1dd50:	push	{r3, lr}
   1dd54:	pop	{r3, pc}
