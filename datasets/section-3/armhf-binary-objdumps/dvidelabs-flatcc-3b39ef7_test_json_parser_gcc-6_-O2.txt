
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

0001256c <.init>:
   1256c:	push	{r3, lr}
   12570:	bl	12a38 <_start@@Base+0x3c>
   12574:	pop	{r3, pc}

Disassembly of section .plt:

00012578 <fopen@plt-0x14>:
   12578:	push	{lr}		; (str lr, [sp, #-4]!)
   1257c:	ldr	lr, [pc, #4]	; 12588 <fopen@plt-0x4>
   12580:	add	lr, pc, lr
   12584:	ldr	pc, [lr, #8]!
   12588:	andeq	sl, r2, r8, ror sl

0001258c <fopen@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #172032	; 0x2a000
   12594:	ldr	pc, [ip, #2680]!	; 0xa78

00012598 <free@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #172032	; 0x2a000
   125a0:	ldr	pc, [ip, #2672]!	; 0xa70

000125a4 <memcpy@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #172032	; 0x2a000
   125ac:	ldr	pc, [ip, #2664]!	; 0xa68

000125b0 <ftell@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #172032	; 0x2a000
   125b8:	ldr	pc, [ip, #2656]!	; 0xa60

000125bc <memcmp@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #172032	; 0x2a000
   125c4:	ldr	pc, [ip, #2648]!	; 0xa58

000125c8 <rewind@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #172032	; 0x2a000
   125d0:	ldr	pc, [ip, #2640]!	; 0xa50

000125d4 <realloc@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #172032	; 0x2a000
   125dc:	ldr	pc, [ip, #2632]!	; 0xa48

000125e0 <fwrite@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #172032	; 0x2a000
   125e8:	ldr	pc, [ip, #2624]!	; 0xa40

000125ec <fread@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #172032	; 0x2a000
   125f4:	ldr	pc, [ip, #2616]!	; 0xa38

000125f8 <malloc@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #172032	; 0x2a000
   12600:	ldr	pc, [ip, #2608]!	; 0xa30

00012604 <__libc_start_main@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #172032	; 0x2a000
   1260c:	ldr	pc, [ip, #2600]!	; 0xa28

00012610 <__gmon_start__@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #172032	; 0x2a000
   12618:	ldr	pc, [ip, #2592]!	; 0xa20

0001261c <exit@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #172032	; 0x2a000
   12624:	ldr	pc, [ip, #2584]!	; 0xa18

00012628 <strlen@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #172032	; 0x2a000
   12630:	ldr	pc, [ip, #2576]!	; 0xa10

00012634 <fprintf@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #172032	; 0x2a000
   1263c:	ldr	pc, [ip, #2568]!	; 0xa08

00012640 <posix_memalign@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #172032	; 0x2a000
   12648:	ldr	pc, [ip, #2560]!	; 0xa00

0001264c <memset@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #172032	; 0x2a000
   12654:	ldr	pc, [ip, #2552]!	; 0x9f8

00012658 <strtod@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #172032	; 0x2a000
   12660:	ldr	pc, [ip, #2544]!	; 0x9f0

00012664 <memchr@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #172032	; 0x2a000
   1266c:	ldr	pc, [ip, #2536]!	; 0x9e8

00012670 <fclose@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #172032	; 0x2a000
   12678:	ldr	pc, [ip, #2528]!	; 0x9e0

0001267c <fputc@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #172032	; 0x2a000
   12684:	ldr	pc, [ip, #2520]!	; 0x9d8

00012688 <fseek@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #172032	; 0x2a000
   12690:	ldr	pc, [ip, #2512]!	; 0x9d0

00012694 <abort@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #172032	; 0x2a000
   1269c:	ldr	pc, [ip, #2504]!	; 0x9c8

000126a0 <__assert_fail@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #172032	; 0x2a000
   126a8:	ldr	pc, [ip, #2496]!	; 0x9c0

Disassembly of section .text:

000126b0 <main@@Base-0x2bc>:
   126b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126b4:	sub	sp, sp, #52	; 0x34
   126b8:	mov	r6, #0
   126bc:	ldr	r8, [sp, #88]	; 0x58
   126c0:	mov	r7, #0
   126c4:	cmp	r1, r2
   126c8:	strd	r6, [r8]
   126cc:	mov	r5, r1
   126d0:	mov	r4, r2
   126d4:	str	r3, [sp, #20]
   126d8:	mov	r6, r0
   126dc:	beq	12714 <__assert_fail@plt+0x74>
   126e0:	ldrb	r3, [r1]
   126e4:	cmp	r3, #34	; 0x22
   126e8:	moveq	r3, #0
   126ec:	addeq	r5, r1, #1
   126f0:	streq	r3, [r0, #12]
   126f4:	beq	12714 <__assert_fail@plt+0x74>
   126f8:	cmp	r3, #46	; 0x2e
   126fc:	movne	r3, #1
   12700:	strne	r3, [r0, #12]
   12704:	bne	12714 <__assert_fail@plt+0x74>
   12708:	mov	r3, #5
   1270c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   12710:	mov	r5, r0
   12714:	ldr	r3, [r6, #12]
   12718:	cmp	r3, #0
   1271c:	bne	12734 <__assert_fail@plt+0x94>
   12720:	mov	r1, r5
   12724:	mov	r2, r4
   12728:	mov	r0, r6
   1272c:	bl	12fa4 <_start@@Base+0x5a8>
   12730:	mov	r5, r0
   12734:	cmp	r4, r5
   12738:	beq	1285c <__assert_fail@plt+0x1bc>
   1273c:	mov	r3, #0
   12740:	mov	r2, #0
   12744:	mov	sl, #0
   12748:	strd	r2, [sp, #8]
   1274c:	add	r9, sp, #32
   12750:	add	r3, sp, #36	; 0x24
   12754:	str	r3, [sp, #24]
   12758:	add	r3, sp, #40	; 0x28
   1275c:	str	r3, [sp, #28]
   12760:	ldr	fp, [sp, #20]
   12764:	ldr	r3, [sp, #24]
   12768:	mov	r2, r4
   1276c:	str	r3, [sp, #4]
   12770:	ldr	r3, [sp, #28]
   12774:	mov	r1, r5
   12778:	str	r3, [sp]
   1277c:	ldr	r7, [fp]
   12780:	mov	r3, r9
   12784:	mov	r0, r6
   12788:	blx	r7
   1278c:	cmp	r4, r0
   12790:	beq	1285c <__assert_fail@plt+0x1bc>
   12794:	cmp	r5, r0
   12798:	bne	127c4 <__assert_fail@plt+0x124>
   1279c:	ldr	r3, [fp, #4]!
   127a0:	cmp	r3, #0
   127a4:	bne	12764 <__assert_fail@plt+0xc4>
   127a8:	mov	r2, r4
   127ac:	mov	r1, r5
   127b0:	mov	r0, r6
   127b4:	mov	r3, #23
   127b8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   127bc:	mov	r4, r0
   127c0:	b	1285c <__assert_fail@plt+0x1bc>
   127c4:	cmp	sl, #0
   127c8:	mov	r7, r0
   127cc:	beq	127f8 <__assert_fail@plt+0x158>
   127d0:	ldr	r3, [r6, #12]
   127d4:	cmp	r3, #0
   127d8:	beq	127f8 <__assert_fail@plt+0x158>
   127dc:	mov	r2, r4
   127e0:	mov	r1, r7
   127e4:	mov	r0, r6
   127e8:	mov	r3, #14
   127ec:	bl	27994 <flatcc_json_parser_set_error@@Base>
   127f0:	mov	r4, r0
   127f4:	b	1285c <__assert_fail@plt+0x1bc>
   127f8:	ldr	r3, [sp, #32]
   127fc:	cmp	r3, #0
   12800:	ldrdeq	r2, [sp, #40]	; 0x28
   12804:	strdeq	r2, [sp, #8]
   12808:	beq	12828 <__assert_fail@plt+0x188>
   1280c:	mov	r3, #8
   12810:	mov	r2, r4
   12814:	mov	r1, r7
   12818:	mov	r0, r6
   1281c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   12820:	cmp	r4, r0
   12824:	beq	1285c <__assert_fail@plt+0x1bc>
   12828:	ldrd	r2, [r8]
   1282c:	ldrd	r0, [sp, #8]
   12830:	ldr	ip, [sp, #36]	; 0x24
   12834:	add	sl, sl, #1
   12838:	adds	r0, r0, r2
   1283c:	adc	r1, r1, r3
   12840:	mov	r2, r0
   12844:	mov	r3, r1
   12848:	cmp	ip, #0
   1284c:	strd	r2, [r8]
   12850:	movne	r5, r7
   12854:	bne	12760 <__assert_fail@plt+0xc0>
   12858:	mov	r4, r7
   1285c:	mov	r0, r4
   12860:	add	sp, sp, #52	; 0x34
   12864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12868:	ldr	r3, [pc, #28]	; 1288c <__assert_fail@plt+0x1ec>
   1286c:	ldr	r1, [pc, #28]	; 12890 <__assert_fail@plt+0x1f0>
   12870:	ldr	r0, [pc, #28]	; 12894 <__assert_fail@plt+0x1f4>
   12874:	push	{r4, lr}
   12878:	add	r3, pc, r3
   1287c:	mov	r2, #308	; 0x134
   12880:	add	r1, pc, r1
   12884:	add	r0, pc, r0
   12888:	bl	126a0 <__assert_fail@plt>
   1288c:	andeq	r8, r1, r0, asr #19
   12890:	andeq	r9, r1, r8, lsl #2
   12894:	andeq	r9, r1, ip, lsl #3
   12898:	ldr	r3, [pc, #32]	; 128c0 <__assert_fail@plt+0x220>
   1289c:	ldr	r1, [pc, #32]	; 128c4 <__assert_fail@plt+0x224>
   128a0:	ldr	r0, [pc, #32]	; 128c8 <__assert_fail@plt+0x228>
   128a4:	add	r3, pc, r3
   128a8:	push	{r4, lr}
   128ac:	add	r3, r3, #16
   128b0:	ldr	r2, [pc, #20]	; 128cc <__assert_fail@plt+0x22c>
   128b4:	add	r1, pc, r1
   128b8:	add	r0, pc, r0
   128bc:	bl	126a0 <__assert_fail@plt>
   128c0:	muleq	r1, r4, r9
   128c4:	ldrdeq	r9, [r1], -r4
   128c8:	andeq	r9, r1, r8, asr r1
   128cc:	andeq	r0, r0, r1, lsr #5
   128d0:	ldr	r3, [pc, #32]	; 128f8 <__assert_fail@plt+0x258>
   128d4:	ldr	r1, [pc, #32]	; 128fc <__assert_fail@plt+0x25c>
   128d8:	ldr	r0, [pc, #32]	; 12900 <__assert_fail@plt+0x260>
   128dc:	add	r3, pc, r3
   128e0:	push	{r4, lr}
   128e4:	add	r3, r3, #28
   128e8:	ldr	r2, [pc, #20]	; 12904 <__assert_fail@plt+0x264>
   128ec:	add	r1, pc, r1
   128f0:	add	r0, pc, r0
   128f4:	bl	126a0 <__assert_fail@plt>
   128f8:	andeq	r8, r1, ip, asr r9
   128fc:	muleq	r1, ip, r0
   12900:	andeq	r9, r1, r0, lsr #2
   12904:	andeq	r0, r0, r7, lsl #5
   12908:	ldr	r3, [pc, #32]	; 12930 <__assert_fail@plt+0x290>
   1290c:	ldr	r1, [pc, #32]	; 12934 <__assert_fail@plt+0x294>
   12910:	ldr	r0, [pc, #32]	; 12938 <__assert_fail@plt+0x298>
   12914:	add	r3, pc, r3
   12918:	push	{r4, lr}
   1291c:	mov	r2, #892	; 0x37c
   12920:	add	r3, r3, #40	; 0x28
   12924:	add	r1, pc, r1
   12928:	add	r0, pc, r0
   1292c:	bl	126a0 <__assert_fail@plt>
   12930:	andeq	r8, r1, r4, lsr #18
   12934:	andeq	r9, r1, r4, rrx
   12938:	andeq	r9, r1, r0, asr #1
   1293c:	ldr	r3, [pc, #28]	; 12960 <__assert_fail@plt+0x2c0>
   12940:	ldr	r1, [pc, #28]	; 12964 <__assert_fail@plt+0x2c4>
   12944:	ldr	r0, [pc, #28]	; 12968 <__assert_fail@plt+0x2c8>
   12948:	push	{r4, lr}
   1294c:	add	r3, pc, r3
   12950:	mov	r2, #260	; 0x104
   12954:	add	r1, pc, r1
   12958:	add	r0, pc, r0
   1295c:	bl	126a0 <__assert_fail@plt>
   12960:	andeq	r9, r1, r4, ror #8
   12964:	andeq	r9, r1, r8, ror #24
   12968:	ldrdeq	r9, [r1], -r4

0001296c <main@@Base>:
   1296c:	push	{r4, r5, r6, r7, r8, lr}
   12970:	mov	r5, r0
   12974:	ldr	r4, [pc, #108]	; 129e8 <main@@Base+0x7c>
   12978:	ldr	r3, [pc, #108]	; 129ec <main@@Base+0x80>
   1297c:	add	r4, pc, r4
   12980:	ldr	r0, [pc, #104]	; 129f0 <main@@Base+0x84>
   12984:	ldr	r6, [r4, r3]
   12988:	mov	r7, r1
   1298c:	mov	r2, #16
   12990:	ldr	r3, [r6]
   12994:	mov	r1, #1
   12998:	add	r0, pc, r0
   1299c:	bl	125e0 <fwrite@plt>
   129a0:	sub	r3, r5, #1
   129a4:	cmp	r3, #1
   129a8:	bhi	129c8 <main@@Base+0x5c>
   129ac:	cmp	r5, #2
   129b0:	ldreq	r3, [pc, #60]	; 129f4 <main@@Base+0x88>
   129b4:	ldreq	r2, [r7, #4]
   129b8:	ldreq	r3, [r4, r3]
   129bc:	streq	r2, [r3]
   129c0:	pop	{r4, r5, r6, r7, r8, lr}
   129c4:	b	2198c <test_parse@@Base>
   129c8:	ldr	r0, [pc, #40]	; 129f8 <main@@Base+0x8c>
   129cc:	ldr	r3, [r6]
   129d0:	mov	r2, #63	; 0x3f
   129d4:	mov	r1, #1
   129d8:	add	r0, pc, r0
   129dc:	bl	125e0 <fwrite@plt>
   129e0:	mov	r0, #1
   129e4:	bl	1261c <exit@plt>
   129e8:	andeq	sl, r2, ip, ror r6
   129ec:	andeq	r0, r0, r0, ror r0
   129f0:	andeq	r8, r1, r4, lsr r8
   129f4:	andeq	r0, r0, r8, ror r0
   129f8:	andeq	r8, r1, r8, lsl #16

000129fc <_start@@Base>:
   129fc:	mov	fp, #0
   12a00:	mov	lr, #0
   12a04:	pop	{r1}		; (ldr r1, [sp], #4)
   12a08:	mov	r2, sp
   12a0c:	push	{r2}		; (str r2, [sp, #-4]!)
   12a10:	push	{r0}		; (str r0, [sp, #-4]!)
   12a14:	ldr	ip, [pc, #16]	; 12a2c <_start@@Base+0x30>
   12a18:	push	{ip}		; (str ip, [sp, #-4]!)
   12a1c:	ldr	r0, [pc, #12]	; 12a30 <_start@@Base+0x34>
   12a20:	ldr	r3, [pc, #12]	; 12a34 <_start@@Base+0x38>
   12a24:	bl	12604 <__libc_start_main@plt>
   12a28:	bl	12694 <abort@plt>
   12a2c:	andeq	sl, r2, r8, ror #30
   12a30:	andeq	r2, r1, ip, ror #18
   12a34:	andeq	sl, r2, r8, lsl #30
   12a38:	ldr	r3, [pc, #20]	; 12a54 <_start@@Base+0x58>
   12a3c:	ldr	r2, [pc, #20]	; 12a58 <_start@@Base+0x5c>
   12a40:	add	r3, pc, r3
   12a44:	ldr	r2, [r3, r2]
   12a48:	cmp	r2, #0
   12a4c:	bxeq	lr
   12a50:	b	12610 <__gmon_start__@plt>
   12a54:			; <UNDEFINED> instruction: 0x0002a5b8
   12a58:	andeq	r0, r0, r4, ror r0
   12a5c:	ldr	r3, [pc, #28]	; 12a80 <_start@@Base+0x84>
   12a60:	ldr	r0, [pc, #28]	; 12a84 <_start@@Base+0x88>
   12a64:	sub	r3, r3, r0
   12a68:	cmp	r3, #6
   12a6c:	bxls	lr
   12a70:	ldr	r3, [pc, #16]	; 12a88 <_start@@Base+0x8c>
   12a74:	cmp	r3, #0
   12a78:	bxeq	lr
   12a7c:	bx	r3
   12a80:	ldrdeq	sp, [r3], -r3
   12a84:	ldrdeq	sp, [r3], -r0
   12a88:	andeq	r0, r0, r0
   12a8c:	ldr	r1, [pc, #36]	; 12ab8 <_start@@Base+0xbc>
   12a90:	ldr	r0, [pc, #36]	; 12abc <_start@@Base+0xc0>
   12a94:	sub	r1, r1, r0
   12a98:	asr	r1, r1, #2
   12a9c:	add	r1, r1, r1, lsr #31
   12aa0:	asrs	r1, r1, #1
   12aa4:	bxeq	lr
   12aa8:	ldr	r3, [pc, #16]	; 12ac0 <_start@@Base+0xc4>
   12aac:	cmp	r3, #0
   12ab0:	bxeq	lr
   12ab4:	bx	r3
   12ab8:	ldrdeq	sp, [r3], -r0
   12abc:	ldrdeq	sp, [r3], -r0
   12ac0:	andeq	r0, r0, r0
   12ac4:	push	{r4, lr}
   12ac8:	ldr	r4, [pc, #24]	; 12ae8 <_start@@Base+0xec>
   12acc:	ldrb	r3, [r4]
   12ad0:	cmp	r3, #0
   12ad4:	popne	{r4, pc}
   12ad8:	bl	12a5c <_start@@Base+0x60>
   12adc:	mov	r3, #1
   12ae0:	strb	r3, [r4]
   12ae4:	pop	{r4, pc}
   12ae8:	ldrdeq	sp, [r3], -r0
   12aec:	ldr	r0, [pc, #40]	; 12b1c <_start@@Base+0x120>
   12af0:	ldr	r3, [r0]
   12af4:	cmp	r3, #0
   12af8:	bne	12b00 <_start@@Base+0x104>
   12afc:	b	12a8c <_start@@Base+0x90>
   12b00:	ldr	r3, [pc, #24]	; 12b20 <_start@@Base+0x124>
   12b04:	cmp	r3, #0
   12b08:	beq	12afc <_start@@Base+0x100>
   12b0c:	push	{r4, lr}
   12b10:	blx	r3
   12b14:	pop	{r4, lr}
   12b18:	b	12a8c <_start@@Base+0x90>
   12b1c:	andeq	ip, r3, r4, lsl pc
	...
   12b28:	sub	r1, r1, r0
   12b2c:	cmp	r1, #8
   12b30:	push	{r4, r5, r6, r7}
   12b34:	bls	12bd0 <_start@@Base+0x1d4>
   12b38:	ldrb	r4, [r0, #7]
   12b3c:	mov	r5, #0
   12b40:	ldrb	r6, [r0, #6]
   12b44:	lsr	r3, r6, #24
   12b48:	lsl	r2, r6, #8
   12b4c:	orr	r4, r4, r2
   12b50:	orr	r5, r5, r3
   12b54:	ldrb	r6, [r0, #5]
   12b58:	lsr	r3, r6, #16
   12b5c:	lsl	r2, r6, #16
   12b60:	orr	r4, r4, r2
   12b64:	orr	r5, r5, r3
   12b68:	ldrb	r6, [r0, #4]
   12b6c:	lsr	r3, r6, #8
   12b70:	lsl	r2, r6, #24
   12b74:	orr	r4, r4, r2
   12b78:	orr	r5, r5, r3
   12b7c:	ldrb	r3, [r0, #3]
   12b80:	mov	r2, #0
   12b84:	orr	r4, r4, r2
   12b88:	orr	r5, r5, r3
   12b8c:	ldrb	r6, [r0, #2]
   12b90:	mov	r2, #0
   12b94:	orr	r4, r4, r2
   12b98:	lsl	r3, r6, #8
   12b9c:	orr	r5, r5, r3
   12ba0:	ldrb	r6, [r0, #1]
   12ba4:	mov	r2, #0
   12ba8:	orr	r2, r2, r4
   12bac:	lsl	r3, r6, #16
   12bb0:	orr	r3, r3, r5
   12bb4:	ldrb	r4, [r0]
   12bb8:	mov	r0, #0
   12bbc:	orr	r0, r0, r2
   12bc0:	lsl	r1, r4, #24
   12bc4:	orr	r1, r1, r3
   12bc8:	pop	{r4, r5, r6, r7}
   12bcc:	bx	lr
   12bd0:	sub	r1, r1, #1
   12bd4:	cmp	r1, #7
   12bd8:	addls	pc, pc, r1, lsl #2
   12bdc:	b	12c54 <_start@@Base+0x258>
   12be0:	b	12c0c <_start@@Base+0x210>
   12be4:	b	12c18 <_start@@Base+0x21c>
   12be8:	b	12c24 <_start@@Base+0x228>
   12bec:	b	12c30 <_start@@Base+0x234>
   12bf0:	b	12c3c <_start@@Base+0x240>
   12bf4:	b	12c48 <_start@@Base+0x24c>
   12bf8:	b	12c00 <_start@@Base+0x204>
   12bfc:	b	12b38 <_start@@Base+0x13c>
   12c00:	mov	r4, #0
   12c04:	mov	r5, #0
   12c08:	b	12b40 <_start@@Base+0x144>
   12c0c:	mov	r2, #0
   12c10:	mov	r3, #0
   12c14:	b	12bb4 <_start@@Base+0x1b8>
   12c18:	mov	r4, #0
   12c1c:	mov	r5, #0
   12c20:	b	12ba0 <_start@@Base+0x1a4>
   12c24:	mov	r4, #0
   12c28:	mov	r5, #0
   12c2c:	b	12b8c <_start@@Base+0x190>
   12c30:	mov	r4, #0
   12c34:	mov	r5, #0
   12c38:	b	12b7c <_start@@Base+0x180>
   12c3c:	mov	r4, #0
   12c40:	mov	r5, #0
   12c44:	b	12b68 <_start@@Base+0x16c>
   12c48:	mov	r4, #0
   12c4c:	mov	r5, #0
   12c50:	b	12b54 <_start@@Base+0x158>
   12c54:	mov	r0, #0
   12c58:	mov	r1, #0
   12c5c:	b	12bc8 <_start@@Base+0x1cc>
   12c60:	cmp	r0, #4
   12c64:	movhi	r0, #0
   12c68:	movls	r0, #1
   12c6c:	bx	lr
   12c70:	cmp	r0, #11
   12c74:	bhi	12c98 <_start@@Base+0x29c>
   12c78:	cmp	r0, #8
   12c7c:	bcs	12ca0 <_start@@Base+0x2a4>
   12c80:	cmp	r0, #0
   12c84:	beq	12ca0 <_start@@Base+0x2a4>
   12c88:	cmp	r0, #2
   12c8c:	beq	12ca0 <_start@@Base+0x2a4>
   12c90:	mov	r0, #0
   12c94:	bx	lr
   12c98:	cmp	r0, #255	; 0xff
   12c9c:	bne	12c90 <_start@@Base+0x294>
   12ca0:	mov	r0, #1
   12ca4:	bx	lr
   12ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cac:	mov	r4, r1
   12cb0:	sub	sp, sp, #12
   12cb4:	mov	r1, r2
   12cb8:	mov	r5, r0
   12cbc:	mov	r0, r4
   12cc0:	mov	sl, r2
   12cc4:	mov	fp, r3
   12cc8:	bl	12b28 <_start@@Base+0x12c>
   12ccc:	add	r3, pc, #628	; 0x274
   12cd0:	ldrd	r2, [r3]
   12cd4:	cmp	r1, r3
   12cd8:	cmpeq	r0, r2
   12cdc:	bhi	12d50 <_start@@Base+0x354>
   12ce0:	add	r3, pc, #616	; 0x268
   12ce4:	ldrd	r2, [r3]
   12ce8:	cmp	r1, r3
   12cec:	cmpeq	r0, r2
   12cf0:	bls	12e18 <_start@@Base+0x41c>
   12cf4:	add	r7, pc, #604	; 0x25c
   12cf8:	ldrd	r6, [r7]
   12cfc:	and	r8, r0, #-16777216	; 0xff000000
   12d00:	cmp	r1, r7
   12d04:	cmpeq	r8, r6
   12d08:	beq	12eec <_start@@Base+0x4f0>
   12d0c:	add	r3, pc, #588	; 0x24c
   12d10:	ldrd	r2, [r3]
   12d14:	bic	r0, r0, #255	; 0xff
   12d18:	cmp	r1, r3
   12d1c:	cmpeq	r0, r2
   12d20:	bne	12d7c <_start@@Base+0x380>
   12d24:	ldr	r3, [sp, #52]	; 0x34
   12d28:	mov	r2, sl
   12d2c:	str	r3, [sp]
   12d30:	mov	r0, r5
   12d34:	mov	r3, #7
   12d38:	mov	r1, r4
   12d3c:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12d40:	cmp	r4, r0
   12d44:	movne	r6, #10
   12d48:	bne	12e58 <_start@@Base+0x45c>
   12d4c:	b	12d7c <_start@@Base+0x380>
   12d50:	add	r3, pc, #528	; 0x210
   12d54:	ldrd	r2, [r3]
   12d58:	cmp	r1, r3
   12d5c:	cmpeq	r0, r2
   12d60:	bhi	12d88 <_start@@Base+0x38c>
   12d64:	add	r3, pc, #516	; 0x204
   12d68:	ldrd	r2, [r3]
   12d6c:	mov	r0, #0
   12d70:	cmp	r1, r3
   12d74:	cmpeq	r0, r2
   12d78:	beq	12ec0 <_start@@Base+0x4c4>
   12d7c:	mov	r0, r4
   12d80:	add	sp, sp, #12
   12d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d88:	add	r3, pc, #488	; 0x1e8
   12d8c:	ldrd	r2, [r3]
   12d90:	cmp	r1, r3
   12d94:	cmpeq	r0, r2
   12d98:	bls	12e7c <_start@@Base+0x480>
   12d9c:	add	r7, pc, #476	; 0x1dc
   12da0:	ldrd	r6, [r7]
   12da4:	ldr	r2, [pc, #500]	; 12fa0 <_start@@Base+0x5a4>
   12da8:	mvn	r3, #0
   12dac:	and	r3, r3, r1
   12db0:	and	r2, r2, r0
   12db4:	cmp	r3, r7
   12db8:	cmpeq	r2, r6
   12dbc:	beq	12f18 <_start@@Base+0x51c>
   12dc0:	add	r3, pc, #448	; 0x1c0
   12dc4:	ldrd	r2, [r3]
   12dc8:	cmp	r1, r3
   12dcc:	cmpeq	r0, r2
   12dd0:	bne	12d7c <_start@@Base+0x380>
   12dd4:	ldr	r3, [sp, #52]	; 0x34
   12dd8:	mov	r2, sl
   12ddc:	str	r3, [sp]
   12de0:	mov	r0, r5
   12de4:	mov	r3, #8
   12de8:	mov	r1, r4
   12dec:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12df0:	cmp	r4, r0
   12df4:	beq	12d7c <_start@@Base+0x380>
   12df8:	ldr	r2, [sp, #48]	; 0x30
   12dfc:	mov	r4, r0
   12e00:	mov	r1, #0
   12e04:	mov	r0, #8
   12e08:	mov	r3, #0
   12e0c:	strd	r0, [r2]
   12e10:	str	r3, [fp]
   12e14:	b	12d7c <_start@@Base+0x380>
   12e18:	add	r3, pc, #368	; 0x170
   12e1c:	ldrd	r2, [r3]
   12e20:	and	r0, r0, #-16777216	; 0xff000000
   12e24:	cmp	r1, r3
   12e28:	cmpeq	r0, r2
   12e2c:	bne	12d7c <_start@@Base+0x380>
   12e30:	ldr	r3, [sp, #52]	; 0x34
   12e34:	mov	r2, sl
   12e38:	str	r3, [sp]
   12e3c:	mov	r0, r5
   12e40:	mov	r3, #5
   12e44:	mov	r1, r4
   12e48:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12e4c:	cmp	r4, r0
   12e50:	movne	r6, #9
   12e54:	beq	12d7c <_start@@Base+0x380>
   12e58:	ldr	r2, [sp, #48]	; 0x30
   12e5c:	mov	r7, #0
   12e60:	mov	r3, #0
   12e64:	mov	r4, r0
   12e68:	strd	r6, [r2]
   12e6c:	mov	r0, r4
   12e70:	str	r3, [fp]
   12e74:	add	sp, sp, #12
   12e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e7c:	add	r3, pc, #276	; 0x114
   12e80:	ldrd	r2, [r3]
   12e84:	and	r0, r0, #-16777216	; 0xff000000
   12e88:	cmp	r1, r3
   12e8c:	cmpeq	r0, r2
   12e90:	bne	12d7c <_start@@Base+0x380>
   12e94:	ldr	r3, [sp, #52]	; 0x34
   12e98:	mov	r2, sl
   12e9c:	str	r3, [sp]
   12ea0:	mov	r0, r5
   12ea4:	mov	r3, #5
   12ea8:	mov	r1, r4
   12eac:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12eb0:	cmp	r4, r0
   12eb4:	beq	12d7c <_start@@Base+0x380>
   12eb8:	mov	r6, #11
   12ebc:	b	12e58 <_start@@Base+0x45c>
   12ec0:	ldr	r3, [sp, #52]	; 0x34
   12ec4:	mov	r2, sl
   12ec8:	str	r3, [sp]
   12ecc:	mov	r0, r5
   12ed0:	mov	r3, #4
   12ed4:	mov	r1, r4
   12ed8:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12edc:	cmp	r4, r0
   12ee0:	movne	r6, #0
   12ee4:	bne	12e58 <_start@@Base+0x45c>
   12ee8:	b	12d7c <_start@@Base+0x380>
   12eec:	ldr	r3, [sp, #52]	; 0x34
   12ef0:	mov	r2, sl
   12ef4:	str	r3, [sp]
   12ef8:	mov	r0, r5
   12efc:	mov	r3, #5
   12f00:	mov	r1, r4
   12f04:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12f08:	cmp	r4, r0
   12f0c:	movne	r6, #2
   12f10:	bne	12e58 <_start@@Base+0x45c>
   12f14:	b	12d7c <_start@@Base+0x380>
   12f18:	ldr	r3, [sp, #52]	; 0x34
   12f1c:	mov	r2, sl
   12f20:	str	r3, [sp]
   12f24:	mov	r0, r5
   12f28:	mov	r3, #6
   12f2c:	mov	r1, r4
   12f30:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   12f34:	cmp	r4, r0
   12f38:	movne	r6, #255	; 0xff
   12f3c:	bne	12e58 <_start@@Base+0x45c>
   12f40:	b	12d7c <_start@@Base+0x380>
   12f44:	nop			; (mov r0, r0)
   12f48:			; <UNDEFINED> instruction: 0xffffffff
   12f4c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12f50:			; <UNDEFINED> instruction: 0x46616dff
   12f54:	rsbmi	r6, pc, #428	; 0x1ac
   12f58:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12f5c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12f60:	strbtmi	r6, [r1], -r0, lsl #28
   12f64:	rsbmi	r6, pc, #428	; 0x1ac
   12f68:	ldrshvc	pc, [pc, #255]	; 1306f <_start@@Base+0x673>	; <UNPREDICTABLE>
   12f6c:	svcmi	0x00746865
   12f70:	andeq	r0, r0, r0
   12f74:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12f78:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12f7c:	rsbpl	r7, r1, #117	; 0x75
   12f80:	strbvs	r0, [r4, #-0]!
   12f84:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12f88:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12f8c:	rsbpl	r7, r1, #117	; 0x75
   12f90:	strvs	r0, [r0, #-0]
   12f94:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12f98:	andvc	r0, r0, #0
   12f9c:	svcmi	0x00746865
   12fa0:			; <UNDEFINED> instruction: 0xffff0000
   12fa4:	sub	r3, r2, r1
   12fa8:	cmp	r3, #1
   12fac:	ble	12fc0 <_start@@Base+0x5c4>
   12fb0:	ldrb	r3, [r1]
   12fb4:	cmp	r3, #32
   12fb8:	bhi	12fc4 <_start@@Base+0x5c8>
   12fbc:	beq	12fcc <_start@@Base+0x5d0>
   12fc0:	b	27a88 <flatcc_json_parser_space_ext@@Base>
   12fc4:	mov	r0, r1
   12fc8:	bx	lr
   12fcc:	ldrb	r3, [r1, #1]
   12fd0:	cmp	r3, #32
   12fd4:	bls	12fc0 <_start@@Base+0x5c4>
   12fd8:	add	r0, r1, #1
   12fdc:	bx	lr
   12fe0:	push	{r4, r5, r6, r7, lr}
   12fe4:	mov	r6, #0
   12fe8:	sub	sp, sp, #28
   12fec:	mov	r7, #0
   12ff0:	mov	lr, #0
   12ff4:	cmp	r1, r2
   12ff8:	strb	lr, [r3]
   12ffc:	str	lr, [sp, #12]
   13000:	strd	r6, [sp, #16]
   13004:	moveq	r0, r1
   13008:	beq	13054 <_start@@Base+0x658>
   1300c:	mov	r5, r3
   13010:	add	r3, sp, #16
   13014:	str	r3, [sp]
   13018:	add	r3, sp, #12
   1301c:	mov	r4, r1
   13020:	mov	r7, r0
   13024:	mov	r6, r2
   13028:	bl	296fc <flatcc_json_parser_integer@@Base>
   1302c:	cmp	r4, r0
   13030:	beq	13054 <_start@@Base+0x658>
   13034:	ldr	r3, [sp, #12]
   13038:	cmp	r3, #0
   1303c:	bne	1305c <_start@@Base+0x660>
   13040:	ldrd	r2, [sp, #16]
   13044:	cmp	r3, #0
   13048:	cmpeq	r2, #255	; 0xff
   1304c:	strbls	r2, [r5]
   13050:	bhi	13078 <_start@@Base+0x67c>
   13054:	add	sp, sp, #28
   13058:	pop	{r4, r5, r6, r7, pc}
   1305c:	mov	r1, r0
   13060:	mov	r2, r6
   13064:	mov	r0, r7
   13068:	mov	r3, #8
   1306c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13070:	add	sp, sp, #28
   13074:	pop	{r4, r5, r6, r7, pc}
   13078:	mov	r1, r0
   1307c:	mov	r2, r6
   13080:	mov	r0, r7
   13084:	mov	r3, #7
   13088:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1308c:	add	sp, sp, #28
   13090:	pop	{r4, r5, r6, r7, pc}
   13094:	push	{r4, r5, r6, r7, r8, r9, lr}
   13098:	mov	r6, #0
   1309c:	sub	sp, sp, #28
   130a0:	mov	r7, #0
   130a4:	mov	lr, #0
   130a8:	cmp	r1, r2
   130ac:	str	lr, [r3]
   130b0:	str	lr, [sp, #12]
   130b4:	strd	r6, [sp, #16]
   130b8:	moveq	r0, r1
   130bc:	beq	13110 <_start@@Base+0x714>
   130c0:	mov	r5, r3
   130c4:	add	r3, sp, #16
   130c8:	str	r3, [sp]
   130cc:	add	r3, sp, #12
   130d0:	mov	r4, r1
   130d4:	mov	r7, r0
   130d8:	mov	r6, r2
   130dc:	bl	296fc <flatcc_json_parser_integer@@Base>
   130e0:	cmp	r4, r0
   130e4:	beq	13110 <_start@@Base+0x714>
   130e8:	ldr	r3, [sp, #12]
   130ec:	cmp	r3, #0
   130f0:	bne	13118 <_start@@Base+0x71c>
   130f4:	ldrd	r2, [sp, #16]
   130f8:	mov	r9, #0
   130fc:	mvn	r8, #0
   13100:	cmp	r3, r9
   13104:	cmpeq	r2, r8
   13108:	strls	r2, [r5]
   1310c:	bhi	13134 <_start@@Base+0x738>
   13110:	add	sp, sp, #28
   13114:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13118:	mov	r1, r0
   1311c:	mov	r2, r6
   13120:	mov	r0, r7
   13124:	mov	r3, #8
   13128:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1312c:	add	sp, sp, #28
   13130:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13134:	mov	r1, r0
   13138:	mov	r2, r6
   1313c:	mov	r0, r7
   13140:	mov	r3, #7
   13144:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13148:	add	sp, sp, #28
   1314c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13150:	push	{r4, r5, r6, r7, r8, r9, lr}
   13154:	mov	r6, #0
   13158:	sub	sp, sp, #28
   1315c:	mov	r7, #0
   13160:	mov	lr, #0
   13164:	cmp	r1, r2
   13168:	strh	lr, [r3]
   1316c:	str	lr, [sp, #12]
   13170:	strd	r6, [sp, #16]
   13174:	moveq	r0, r1
   13178:	beq	131c8 <_start@@Base+0x7cc>
   1317c:	mov	r5, r3
   13180:	add	r3, sp, #16
   13184:	str	r3, [sp]
   13188:	add	r3, sp, #12
   1318c:	mov	r4, r1
   13190:	mov	r7, r0
   13194:	mov	r6, r2
   13198:	bl	296fc <flatcc_json_parser_integer@@Base>
   1319c:	cmp	r4, r0
   131a0:	beq	131c8 <_start@@Base+0x7cc>
   131a4:	ldr	r1, [sp, #12]
   131a8:	ldrd	r2, [sp, #16]
   131ac:	cmp	r1, #0
   131b0:	beq	131d0 <_start@@Base+0x7d4>
   131b4:	cmp	r3, #0
   131b8:	cmpeq	r2, #32768	; 0x8000
   131bc:	rsbls	r2, r2, #0
   131c0:	strhls	r2, [r5]
   131c4:	bhi	13200 <_start@@Base+0x804>
   131c8:	add	sp, sp, #28
   131cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   131d0:	ldr	r8, [pc, #64]	; 13218 <_start@@Base+0x81c>
   131d4:	mov	r9, #0
   131d8:	cmp	r3, r9
   131dc:	cmpeq	r2, r8
   131e0:	strhls	r2, [r5]
   131e4:	bls	131c8 <_start@@Base+0x7cc>
   131e8:	mov	r1, r0
   131ec:	mov	r2, r6
   131f0:	mov	r0, r7
   131f4:	mov	r3, #7
   131f8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   131fc:	b	131c8 <_start@@Base+0x7cc>
   13200:	mov	r1, r0
   13204:	mov	r2, r6
   13208:	mov	r0, r7
   1320c:	mov	r3, #8
   13210:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13214:	b	131c8 <_start@@Base+0x7cc>
   13218:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1321c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13220:	mov	r6, #0
   13224:	sub	sp, sp, #28
   13228:	mov	r7, #0
   1322c:	mov	lr, #0
   13230:	cmp	r1, r2
   13234:	str	lr, [r3]
   13238:	str	lr, [sp, #12]
   1323c:	strd	r6, [sp, #16]
   13240:	moveq	r0, r1
   13244:	beq	13294 <_start@@Base+0x898>
   13248:	mov	r5, r3
   1324c:	add	r3, sp, #16
   13250:	str	r3, [sp]
   13254:	add	r3, sp, #12
   13258:	mov	r4, r1
   1325c:	mov	r7, r0
   13260:	mov	r6, r2
   13264:	bl	296fc <flatcc_json_parser_integer@@Base>
   13268:	cmp	r4, r0
   1326c:	beq	13294 <_start@@Base+0x898>
   13270:	ldr	r1, [sp, #12]
   13274:	ldrd	r2, [sp, #16]
   13278:	cmp	r1, #0
   1327c:	beq	1329c <_start@@Base+0x8a0>
   13280:	cmp	r3, #0
   13284:	cmpeq	r2, #-2147483648	; 0x80000000
   13288:	rsbls	r2, r2, #0
   1328c:	strls	r2, [r5]
   13290:	bhi	132cc <_start@@Base+0x8d0>
   13294:	add	sp, sp, #28
   13298:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1329c:	mov	r9, #0
   132a0:	cmp	r3, r9
   132a4:	mvn	r8, #-2147483648	; 0x80000000
   132a8:	cmpeq	r2, r8
   132ac:	strls	r2, [r5]
   132b0:	bls	13294 <_start@@Base+0x898>
   132b4:	mov	r1, r0
   132b8:	mov	r2, r6
   132bc:	mov	r0, r7
   132c0:	mov	r3, #7
   132c4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   132c8:	b	13294 <_start@@Base+0x898>
   132cc:	mov	r1, r0
   132d0:	mov	r2, r6
   132d4:	mov	r0, r7
   132d8:	mov	r3, #8
   132dc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   132e0:	b	13294 <_start@@Base+0x898>
   132e4:	push	{r4, r5, r6, r7, lr}
   132e8:	mov	r4, #0
   132ec:	sub	sp, sp, #28
   132f0:	mov	r5, #0
   132f4:	cmp	r1, r2
   132f8:	strd	r4, [r3]
   132fc:	strd	r4, [sp, #16]
   13300:	str	r4, [sp, #12]
   13304:	moveq	r0, r1
   13308:	beq	1335c <_start@@Base+0x960>
   1330c:	mov	r5, r3
   13310:	add	r3, sp, #16
   13314:	str	r3, [sp]
   13318:	add	r3, sp, #12
   1331c:	mov	r4, r1
   13320:	mov	r6, r2
   13324:	mov	r7, r0
   13328:	bl	296fc <flatcc_json_parser_integer@@Base>
   1332c:	cmp	r4, r0
   13330:	beq	1335c <_start@@Base+0x960>
   13334:	ldr	r1, [sp, #12]
   13338:	ldrd	r2, [sp, #16]
   1333c:	cmp	r1, #0
   13340:	beq	13364 <_start@@Base+0x968>
   13344:	cmp	r3, #-2147483648	; 0x80000000
   13348:	cmpeq	r2, #0
   1334c:	bhi	1337c <_start@@Base+0x980>
   13350:	rsbs	r2, r2, #0
   13354:	rsc	r3, r3, #0
   13358:	strd	r2, [r5]
   1335c:	add	sp, sp, #28
   13360:	pop	{r4, r5, r6, r7, pc}
   13364:	cmp	r2, #0
   13368:	sbcs	r1, r3, #0
   1336c:	blt	13394 <_start@@Base+0x998>
   13370:	strd	r2, [r5]
   13374:	add	sp, sp, #28
   13378:	pop	{r4, r5, r6, r7, pc}
   1337c:	mov	r1, r0
   13380:	mov	r2, r6
   13384:	mov	r0, r7
   13388:	mov	r3, #8
   1338c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13390:	b	1335c <_start@@Base+0x960>
   13394:	mov	r1, r0
   13398:	mov	r2, r6
   1339c:	mov	r0, r7
   133a0:	mov	r3, #7
   133a4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   133a8:	b	1335c <_start@@Base+0x960>
   133ac:	cmp	r1, r2
   133b0:	beq	133c0 <_start@@Base+0x9c4>
   133b4:	ldrb	ip, [r1]
   133b8:	cmp	ip, #123	; 0x7b
   133bc:	beq	133d0 <_start@@Base+0x9d4>
   133c0:	mov	ip, #0
   133c4:	str	ip, [r3]
   133c8:	mov	r3, #21
   133cc:	b	27994 <flatcc_json_parser_set_error@@Base>
   133d0:	push	{r4, r5, r6, lr}
   133d4:	mov	r5, r0
   133d8:	add	r0, r1, #1
   133dc:	mov	r6, r3
   133e0:	sub	r3, r2, r0
   133e4:	cmp	r3, #1
   133e8:	mov	r4, r2
   133ec:	ble	13400 <_start@@Base+0xa04>
   133f0:	ldrb	r3, [r1, #1]
   133f4:	cmp	r3, #32
   133f8:	bhi	13410 <_start@@Base+0xa14>
   133fc:	beq	13430 <_start@@Base+0xa34>
   13400:	mov	r1, r0
   13404:	mov	r2, r4
   13408:	mov	r0, r5
   1340c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   13410:	cmp	r4, r0
   13414:	beq	13424 <_start@@Base+0xa28>
   13418:	ldrb	r3, [r0]
   1341c:	cmp	r3, #125	; 0x7d
   13420:	beq	13444 <_start@@Base+0xa48>
   13424:	mov	r3, #1
   13428:	str	r3, [r6]
   1342c:	pop	{r4, r5, r6, pc}
   13430:	ldrb	r3, [r1, #2]
   13434:	cmp	r3, #32
   13438:	addhi	r0, r1, #2
   1343c:	bls	13400 <_start@@Base+0xa04>
   13440:	b	13410 <_start@@Base+0xa14>
   13444:	mov	r3, #0
   13448:	mov	r2, r4
   1344c:	add	r1, r0, #1
   13450:	str	r3, [r6]
   13454:	mov	r0, r5
   13458:	pop	{r4, r5, r6, lr}
   1345c:	b	12fa4 <_start@@Base+0x5a8>
   13460:	cmp	r1, r2
   13464:	beq	13474 <_start@@Base+0xa78>
   13468:	ldrb	ip, [r1]
   1346c:	cmp	ip, #91	; 0x5b
   13470:	beq	13484 <_start@@Base+0xa88>
   13474:	mov	ip, #0
   13478:	str	ip, [r3]
   1347c:	mov	r3, #22
   13480:	b	27994 <flatcc_json_parser_set_error@@Base>
   13484:	push	{r4, r5, r6, lr}
   13488:	mov	r5, r0
   1348c:	add	r0, r1, #1
   13490:	mov	r6, r3
   13494:	sub	r3, r2, r0
   13498:	cmp	r3, #1
   1349c:	mov	r4, r2
   134a0:	ble	134b4 <_start@@Base+0xab8>
   134a4:	ldrb	r3, [r1, #1]
   134a8:	cmp	r3, #32
   134ac:	bhi	134c4 <_start@@Base+0xac8>
   134b0:	beq	134e4 <_start@@Base+0xae8>
   134b4:	mov	r1, r0
   134b8:	mov	r2, r4
   134bc:	mov	r0, r5
   134c0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   134c4:	cmp	r4, r0
   134c8:	beq	134d8 <_start@@Base+0xadc>
   134cc:	ldrb	r3, [r0]
   134d0:	cmp	r3, #93	; 0x5d
   134d4:	beq	134f8 <_start@@Base+0xafc>
   134d8:	mov	r3, #1
   134dc:	str	r3, [r6]
   134e0:	pop	{r4, r5, r6, pc}
   134e4:	ldrb	r3, [r1, #2]
   134e8:	cmp	r3, #32
   134ec:	addhi	r0, r1, #2
   134f0:	bls	134b4 <_start@@Base+0xab8>
   134f4:	b	134c4 <_start@@Base+0xac8>
   134f8:	mov	r3, #0
   134fc:	mov	r2, r4
   13500:	add	r1, r0, #1
   13504:	str	r3, [r6]
   13508:	mov	r0, r5
   1350c:	pop	{r4, r5, r6, lr}
   13510:	b	12fa4 <_start@@Base+0x5a8>
   13514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13518:	sub	sp, sp, #36	; 0x24
   1351c:	mov	ip, #0
   13520:	str	r3, [sp, #12]
   13524:	ldr	r3, [sp, #72]	; 0x48
   13528:	cmp	r1, r2
   1352c:	mov	r5, r1
   13530:	mov	r6, r2
   13534:	str	ip, [r3]
   13538:	mov	r8, r0
   1353c:	beq	136ac <_start@@Base+0xcb0>
   13540:	ldrb	r3, [r1]
   13544:	cmp	r3, #34	; 0x22
   13548:	beq	1365c <_start@@Base+0xc60>
   1354c:	cmp	r3, #46	; 0x2e
   13550:	movne	r3, #1
   13554:	strne	r3, [r0, #12]
   13558:	beq	136bc <_start@@Base+0xcc0>
   1355c:	add	fp, sp, #16
   13560:	add	sl, sp, #20
   13564:	add	r9, sp, #24
   13568:	mov	r3, #0
   1356c:	str	r3, [sp, #8]
   13570:	ldr	r3, [sp, #12]
   13574:	mov	r7, r3
   13578:	ldr	r4, [r3]
   1357c:	b	13594 <_start@@Base+0xb98>
   13580:	cmp	r5, r0
   13584:	bne	135c0 <_start@@Base+0xbc4>
   13588:	ldr	r4, [r7, #4]!
   1358c:	cmp	r4, #0
   13590:	beq	1362c <_start@@Base+0xc30>
   13594:	stm	sp, {r9, sl}
   13598:	mov	r3, fp
   1359c:	mov	r2, r6
   135a0:	mov	r1, r5
   135a4:	mov	r0, r8
   135a8:	blx	r4
   135ac:	cmp	r6, r0
   135b0:	bne	13580 <_start@@Base+0xb84>
   135b4:	mov	r0, r6
   135b8:	add	sp, sp, #36	; 0x24
   135bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c0:	ldr	r3, [sp, #8]
   135c4:	mov	r4, r0
   135c8:	cmp	r3, #0
   135cc:	beq	135dc <_start@@Base+0xbe0>
   135d0:	ldr	r3, [r8, #12]
   135d4:	cmp	r3, #0
   135d8:	bne	136f8 <_start@@Base+0xcfc>
   135dc:	ldr	r3, [sp, #16]
   135e0:	ldrd	r0, [sp, #24]
   135e4:	cmp	r3, #0
   135e8:	beq	13650 <_start@@Base+0xc54>
   135ec:	bl	2ae7c <flatcc_json_parser_table_as_root@@Base+0x588>
   135f0:	vmov	s15, r0
   135f4:	vneg.f32	s14, s15
   135f8:	ldr	r3, [sp, #72]	; 0x48
   135fc:	ldr	r2, [sp, #8]
   13600:	vldr	s15, [r3]
   13604:	ldr	r3, [sp, #20]
   13608:	add	r2, r2, #1
   1360c:	cmp	r3, #0
   13610:	vadd.f32	s15, s15, s14
   13614:	ldr	r3, [sp, #72]	; 0x48
   13618:	str	r2, [sp, #8]
   1361c:	vstr	s15, [r3]
   13620:	beq	136f0 <_start@@Base+0xcf4>
   13624:	mov	r5, r4
   13628:	b	13570 <_start@@Base+0xb74>
   1362c:	mov	r2, r6
   13630:	mov	r1, r5
   13634:	mov	r0, r8
   13638:	mov	r3, #23
   1363c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13640:	mov	r6, r0
   13644:	mov	r0, r6
   13648:	add	sp, sp, #36	; 0x24
   1364c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13650:	bl	2ae7c <flatcc_json_parser_table_as_root@@Base+0x588>
   13654:	vmov	s14, r0
   13658:	b	135f8 <_start@@Base+0xbfc>
   1365c:	add	r5, r1, #1
   13660:	sub	r3, r6, r5
   13664:	mov	r2, #0
   13668:	str	r2, [r0, #12]
   1366c:	cmp	r3, #1
   13670:	ble	13684 <_start@@Base+0xc88>
   13674:	ldrb	r3, [r5]
   13678:	cmp	r3, #32
   1367c:	bhi	13698 <_start@@Base+0xc9c>
   13680:	beq	136dc <_start@@Base+0xce0>
   13684:	mov	r1, r5
   13688:	mov	r2, r6
   1368c:	mov	r0, r8
   13690:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   13694:	mov	r5, r0
   13698:	cmp	r6, r5
   1369c:	bne	1355c <_start@@Base+0xb60>
   136a0:	mov	r0, r6
   136a4:	add	sp, sp, #36	; 0x24
   136a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ac:	ldr	r3, [r0, #12]
   136b0:	cmp	r3, #0
   136b4:	beq	13684 <_start@@Base+0xc88>
   136b8:	b	135b4 <_start@@Base+0xbb8>
   136bc:	mov	r3, #5
   136c0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   136c4:	ldr	r3, [r8, #12]
   136c8:	cmp	r3, #0
   136cc:	mov	r5, r0
   136d0:	subeq	r3, r6, r0
   136d4:	beq	1366c <_start@@Base+0xc70>
   136d8:	b	13698 <_start@@Base+0xc9c>
   136dc:	ldrb	r3, [r5, #1]
   136e0:	cmp	r3, #32
   136e4:	addhi	r5, r5, #1
   136e8:	bls	13684 <_start@@Base+0xc88>
   136ec:	b	13698 <_start@@Base+0xc9c>
   136f0:	mov	r6, r4
   136f4:	b	135b4 <_start@@Base+0xbb8>
   136f8:	mov	r2, r6
   136fc:	mov	r1, r4
   13700:	mov	r0, r8
   13704:	mov	r3, #14
   13708:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1370c:	mov	r6, r0
   13710:	b	135b4 <_start@@Base+0xbb8>
   13714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13718:	sub	sp, sp, #36	; 0x24
   1371c:	mov	r8, #0
   13720:	str	r3, [sp, #12]
   13724:	ldr	r3, [sp, #72]	; 0x48
   13728:	mov	r9, #0
   1372c:	cmp	r1, r2
   13730:	strd	r8, [r3]
   13734:	mov	r5, r1
   13738:	mov	r6, r2
   1373c:	mov	r8, r0
   13740:	beq	138b0 <_start@@Base+0xeb4>
   13744:	ldrb	r3, [r1]
   13748:	cmp	r3, #34	; 0x22
   1374c:	beq	13860 <_start@@Base+0xe64>
   13750:	cmp	r3, #46	; 0x2e
   13754:	movne	r3, #1
   13758:	strne	r3, [r0, #12]
   1375c:	beq	138c0 <_start@@Base+0xec4>
   13760:	add	fp, sp, #16
   13764:	add	sl, sp, #20
   13768:	add	r9, sp, #24
   1376c:	mov	r3, #0
   13770:	str	r3, [sp, #8]
   13774:	ldr	r3, [sp, #12]
   13778:	mov	r7, r3
   1377c:	ldr	r4, [r3]
   13780:	b	13798 <_start@@Base+0xd9c>
   13784:	cmp	r5, r0
   13788:	bne	137c4 <_start@@Base+0xdc8>
   1378c:	ldr	r4, [r7, #4]!
   13790:	cmp	r4, #0
   13794:	beq	13830 <_start@@Base+0xe34>
   13798:	stm	sp, {r9, sl}
   1379c:	mov	r3, fp
   137a0:	mov	r2, r6
   137a4:	mov	r1, r5
   137a8:	mov	r0, r8
   137ac:	blx	r4
   137b0:	cmp	r6, r0
   137b4:	bne	13784 <_start@@Base+0xd88>
   137b8:	mov	r0, r6
   137bc:	add	sp, sp, #36	; 0x24
   137c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c4:	ldr	r3, [sp, #8]
   137c8:	mov	r4, r0
   137cc:	cmp	r3, #0
   137d0:	beq	137e0 <_start@@Base+0xde4>
   137d4:	ldr	r3, [r8, #12]
   137d8:	cmp	r3, #0
   137dc:	bne	138fc <_start@@Base+0xf00>
   137e0:	ldr	r3, [sp, #16]
   137e4:	ldrd	r0, [sp, #24]
   137e8:	cmp	r3, #0
   137ec:	beq	13854 <_start@@Base+0xe58>
   137f0:	bl	2ac44 <flatcc_json_parser_table_as_root@@Base+0x350>
   137f4:	vmov	d7, r0, r1
   137f8:	vneg.f64	d6, d7
   137fc:	ldr	r3, [sp, #72]	; 0x48
   13800:	ldr	r2, [sp, #8]
   13804:	vldr	d7, [r3]
   13808:	ldr	r3, [sp, #20]
   1380c:	add	r2, r2, #1
   13810:	cmp	r3, #0
   13814:	vadd.f64	d7, d7, d6
   13818:	ldr	r3, [sp, #72]	; 0x48
   1381c:	str	r2, [sp, #8]
   13820:	vstr	d7, [r3]
   13824:	beq	138f4 <_start@@Base+0xef8>
   13828:	mov	r5, r4
   1382c:	b	13774 <_start@@Base+0xd78>
   13830:	mov	r2, r6
   13834:	mov	r1, r5
   13838:	mov	r0, r8
   1383c:	mov	r3, #23
   13840:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13844:	mov	r6, r0
   13848:	mov	r0, r6
   1384c:	add	sp, sp, #36	; 0x24
   13850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13854:	bl	2ac44 <flatcc_json_parser_table_as_root@@Base+0x350>
   13858:	vmov	d6, r0, r1
   1385c:	b	137fc <_start@@Base+0xe00>
   13860:	add	r5, r1, #1
   13864:	sub	r3, r6, r5
   13868:	mov	r2, #0
   1386c:	str	r2, [r0, #12]
   13870:	cmp	r3, #1
   13874:	ble	13888 <_start@@Base+0xe8c>
   13878:	ldrb	r3, [r5]
   1387c:	cmp	r3, #32
   13880:	bhi	1389c <_start@@Base+0xea0>
   13884:	beq	138e0 <_start@@Base+0xee4>
   13888:	mov	r1, r5
   1388c:	mov	r2, r6
   13890:	mov	r0, r8
   13894:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   13898:	mov	r5, r0
   1389c:	cmp	r6, r5
   138a0:	bne	13760 <_start@@Base+0xd64>
   138a4:	mov	r0, r6
   138a8:	add	sp, sp, #36	; 0x24
   138ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138b0:	ldr	r3, [r0, #12]
   138b4:	cmp	r3, #0
   138b8:	beq	13888 <_start@@Base+0xe8c>
   138bc:	b	137b8 <_start@@Base+0xdbc>
   138c0:	mov	r3, #5
   138c4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   138c8:	ldr	r3, [r8, #12]
   138cc:	cmp	r3, #0
   138d0:	mov	r5, r0
   138d4:	subeq	r3, r6, r0
   138d8:	beq	13870 <_start@@Base+0xe74>
   138dc:	b	1389c <_start@@Base+0xea0>
   138e0:	ldrb	r3, [r5, #1]
   138e4:	cmp	r3, #32
   138e8:	addhi	r5, r5, #1
   138ec:	bls	13888 <_start@@Base+0xe8c>
   138f0:	b	1389c <_start@@Base+0xea0>
   138f4:	mov	r6, r4
   138f8:	b	137b8 <_start@@Base+0xdbc>
   138fc:	mov	r2, r6
   13900:	mov	r1, r4
   13904:	mov	r0, r8
   13908:	mov	r3, #14
   1390c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13910:	mov	r6, r0
   13914:	b	137b8 <_start@@Base+0xdbc>
   13918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1391c:	sub	sp, sp, #44	; 0x2c
   13920:	mov	ip, #0
   13924:	str	r3, [sp, #20]
   13928:	ldr	r3, [sp, #80]	; 0x50
   1392c:	cmp	r1, r2
   13930:	mov	r6, r1
   13934:	mov	r5, r2
   13938:	strb	ip, [r3]
   1393c:	mov	r8, r0
   13940:	beq	13ad0 <_start@@Base+0x10d4>
   13944:	ldrb	r3, [r1]
   13948:	cmp	r3, #34	; 0x22
   1394c:	beq	13a84 <_start@@Base+0x1088>
   13950:	cmp	r3, #46	; 0x2e
   13954:	movne	r3, #1
   13958:	strne	r3, [r0, #12]
   1395c:	beq	13ae0 <_start@@Base+0x10e4>
   13960:	add	fp, sp, #24
   13964:	add	sl, sp, #28
   13968:	add	r9, sp, #32
   1396c:	mov	r3, #0
   13970:	str	r3, [sp, #12]
   13974:	str	r3, [sp, #16]
   13978:	ldr	r3, [sp, #20]
   1397c:	mov	r7, r3
   13980:	ldr	r4, [r3]
   13984:	b	1399c <_start@@Base+0xfa0>
   13988:	cmp	r6, r0
   1398c:	bne	139c8 <_start@@Base+0xfcc>
   13990:	ldr	r4, [r7, #4]!
   13994:	cmp	r4, #0
   13998:	beq	13a40 <_start@@Base+0x1044>
   1399c:	stm	sp, {r9, sl}
   139a0:	mov	r3, fp
   139a4:	mov	r2, r5
   139a8:	mov	r1, r6
   139ac:	mov	r0, r8
   139b0:	blx	r4
   139b4:	cmp	r5, r0
   139b8:	bne	13988 <_start@@Base+0xf8c>
   139bc:	mov	r0, r5
   139c0:	add	sp, sp, #44	; 0x2c
   139c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	ldr	r3, [sp, #12]
   139cc:	mov	r4, r0
   139d0:	cmp	r3, #0
   139d4:	beq	139e4 <_start@@Base+0xfe8>
   139d8:	ldr	r3, [r8, #12]
   139dc:	cmp	r3, #0
   139e0:	bne	13b1c <_start@@Base+0x1120>
   139e4:	ldr	r3, [sp, #24]
   139e8:	cmp	r3, #0
   139ec:	bne	13a64 <_start@@Base+0x1068>
   139f0:	ldr	r3, [sp, #36]	; 0x24
   139f4:	ldr	r2, [sp, #32]
   139f8:	orrs	r3, r2, r3
   139fc:	movne	r3, #1
   13a00:	moveq	r3, #0
   13a04:	str	r3, [sp, #16]
   13a08:	ldr	r3, [sp, #80]	; 0x50
   13a0c:	ldr	r1, [sp, #12]
   13a10:	ldr	r2, [sp, #28]
   13a14:	ldrb	r3, [r3]
   13a18:	add	r1, r1, #1
   13a1c:	str	r1, [sp, #12]
   13a20:	cmp	r2, #0
   13a24:	ldr	r1, [sp, #16]
   13a28:	ldr	r2, [sp, #80]	; 0x50
   13a2c:	add	r3, r1, r3
   13a30:	strb	r3, [r2]
   13a34:	beq	13b14 <_start@@Base+0x1118>
   13a38:	mov	r6, r4
   13a3c:	b	13978 <_start@@Base+0xf7c>
   13a40:	mov	r2, r5
   13a44:	mov	r1, r6
   13a48:	mov	r0, r8
   13a4c:	mov	r3, #23
   13a50:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13a54:	mov	r5, r0
   13a58:	mov	r0, r5
   13a5c:	add	sp, sp, #44	; 0x2c
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	mov	r3, #8
   13a68:	mov	r2, r5
   13a6c:	mov	r1, r4
   13a70:	mov	r0, r8
   13a74:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13a78:	cmp	r5, r0
   13a7c:	bne	13a08 <_start@@Base+0x100c>
   13a80:	b	139bc <_start@@Base+0xfc0>
   13a84:	add	r6, r1, #1
   13a88:	sub	r3, r2, r6
   13a8c:	str	ip, [r0, #12]
   13a90:	cmp	r3, #1
   13a94:	ble	13aa8 <_start@@Base+0x10ac>
   13a98:	ldrb	r3, [r6]
   13a9c:	cmp	r3, #32
   13aa0:	bhi	13abc <_start@@Base+0x10c0>
   13aa4:	beq	13b00 <_start@@Base+0x1104>
   13aa8:	mov	r1, r6
   13aac:	mov	r2, r5
   13ab0:	mov	r0, r8
   13ab4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   13ab8:	mov	r6, r0
   13abc:	cmp	r5, r6
   13ac0:	bne	13960 <_start@@Base+0xf64>
   13ac4:	mov	r0, r5
   13ac8:	add	sp, sp, #44	; 0x2c
   13acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad0:	ldr	r3, [r0, #12]
   13ad4:	cmp	r3, #0
   13ad8:	beq	13aa8 <_start@@Base+0x10ac>
   13adc:	b	139bc <_start@@Base+0xfc0>
   13ae0:	mov	r3, #5
   13ae4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13ae8:	ldr	r3, [r8, #12]
   13aec:	cmp	r3, #0
   13af0:	mov	r6, r0
   13af4:	subeq	r3, r5, r0
   13af8:	beq	13a90 <_start@@Base+0x1094>
   13afc:	b	13abc <_start@@Base+0x10c0>
   13b00:	ldrb	r3, [r6, #1]
   13b04:	cmp	r3, #32
   13b08:	addhi	r6, r6, #1
   13b0c:	bls	13aa8 <_start@@Base+0x10ac>
   13b10:	b	13abc <_start@@Base+0x10c0>
   13b14:	mov	r5, r4
   13b18:	b	139bc <_start@@Base+0xfc0>
   13b1c:	mov	r2, r5
   13b20:	mov	r1, r4
   13b24:	mov	r0, r8
   13b28:	mov	r3, #14
   13b2c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13b30:	mov	r5, r0
   13b34:	b	139bc <_start@@Base+0xfc0>
   13b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b3c:	sub	sp, sp, #44	; 0x2c
   13b40:	mov	ip, #0
   13b44:	str	r3, [sp, #20]
   13b48:	ldr	r3, [sp, #80]	; 0x50
   13b4c:	cmp	r1, r2
   13b50:	mov	r6, r1
   13b54:	mov	r5, r2
   13b58:	str	ip, [r3]
   13b5c:	mov	r8, r0
   13b60:	beq	13d14 <_start@@Base+0x1318>
   13b64:	ldrb	r3, [r1]
   13b68:	cmp	r3, #34	; 0x22
   13b6c:	beq	13cd0 <_start@@Base+0x12d4>
   13b70:	cmp	r3, #46	; 0x2e
   13b74:	movne	r3, #1
   13b78:	strne	r3, [r0, #12]
   13b7c:	beq	13d24 <_start@@Base+0x1328>
   13b80:	add	fp, sp, #24
   13b84:	add	sl, sp, #28
   13b88:	add	r9, sp, #32
   13b8c:	mov	r3, #0
   13b90:	str	r3, [sp, #12]
   13b94:	str	r3, [sp, #16]
   13b98:	ldr	r7, [sp, #20]
   13b9c:	ldr	r4, [r7]
   13ba0:	b	13bb8 <_start@@Base+0x11bc>
   13ba4:	cmp	r6, r0
   13ba8:	bne	13be4 <_start@@Base+0x11e8>
   13bac:	ldr	r4, [r7, #4]!
   13bb0:	cmp	r4, #0
   13bb4:	beq	13c5c <_start@@Base+0x1260>
   13bb8:	stm	sp, {r9, sl}
   13bbc:	mov	r3, fp
   13bc0:	mov	r2, r5
   13bc4:	mov	r1, r6
   13bc8:	mov	r0, r8
   13bcc:	blx	r4
   13bd0:	cmp	r5, r0
   13bd4:	bne	13ba4 <_start@@Base+0x11a8>
   13bd8:	mov	r0, r5
   13bdc:	add	sp, sp, #44	; 0x2c
   13be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be4:	ldr	r3, [sp, #12]
   13be8:	mov	r4, r0
   13bec:	cmp	r3, #0
   13bf0:	beq	13c00 <_start@@Base+0x1204>
   13bf4:	ldr	r3, [r8, #12]
   13bf8:	cmp	r3, #0
   13bfc:	bne	13d60 <_start@@Base+0x1364>
   13c00:	ldr	r1, [sp, #24]
   13c04:	ldrd	r2, [sp, #32]
   13c08:	cmp	r1, #0
   13c0c:	beq	13c80 <_start@@Base+0x1284>
   13c10:	cmp	r3, #0
   13c14:	cmpeq	r2, #-2147483648	; 0x80000000
   13c18:	rsbls	r3, r2, #0
   13c1c:	strls	r3, [sp, #16]
   13c20:	bhi	13cb0 <_start@@Base+0x12b4>
   13c24:	ldr	r2, [sp, #28]
   13c28:	ldr	r3, [sp, #80]	; 0x50
   13c2c:	cmp	r2, #0
   13c30:	ldr	r2, [sp, #12]
   13c34:	ldr	r3, [r3]
   13c38:	add	r2, r2, #1
   13c3c:	ldr	r1, [sp, #16]
   13c40:	str	r2, [sp, #12]
   13c44:	ldr	r2, [sp, #80]	; 0x50
   13c48:	add	r3, r3, r1
   13c4c:	str	r3, [r2]
   13c50:	beq	13d58 <_start@@Base+0x135c>
   13c54:	mov	r6, r4
   13c58:	b	13b98 <_start@@Base+0x119c>
   13c5c:	mov	r2, r5
   13c60:	mov	r1, r6
   13c64:	mov	r0, r8
   13c68:	mov	r3, #23
   13c6c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13c70:	mov	r5, r0
   13c74:	mov	r0, r5
   13c78:	add	sp, sp, #44	; 0x2c
   13c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c80:	mov	r1, #0
   13c84:	cmp	r3, r1
   13c88:	mvn	r0, #-2147483648	; 0x80000000
   13c8c:	cmpeq	r2, r0
   13c90:	strls	r2, [sp, #16]
   13c94:	bls	13c24 <_start@@Base+0x1228>
   13c98:	mov	r3, #7
   13c9c:	mov	r2, r5
   13ca0:	mov	r1, r4
   13ca4:	mov	r0, r8
   13ca8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13cac:	b	13cc4 <_start@@Base+0x12c8>
   13cb0:	mov	r3, #8
   13cb4:	mov	r2, r5
   13cb8:	mov	r1, r4
   13cbc:	mov	r0, r8
   13cc0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13cc4:	cmp	r5, r0
   13cc8:	bne	13c24 <_start@@Base+0x1228>
   13ccc:	b	13bd8 <_start@@Base+0x11dc>
   13cd0:	add	r6, r1, #1
   13cd4:	sub	r3, r2, r6
   13cd8:	str	ip, [r0, #12]
   13cdc:	cmp	r3, #1
   13ce0:	ble	13cf4 <_start@@Base+0x12f8>
   13ce4:	ldrb	r3, [r6]
   13ce8:	cmp	r3, #32
   13cec:	bhi	13d08 <_start@@Base+0x130c>
   13cf0:	beq	13d44 <_start@@Base+0x1348>
   13cf4:	mov	r1, r6
   13cf8:	mov	r2, r5
   13cfc:	mov	r0, r8
   13d00:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   13d04:	mov	r6, r0
   13d08:	cmp	r5, r6
   13d0c:	bne	13b80 <_start@@Base+0x1184>
   13d10:	b	13bd8 <_start@@Base+0x11dc>
   13d14:	ldr	r3, [r0, #12]
   13d18:	cmp	r3, #0
   13d1c:	bne	13bd8 <_start@@Base+0x11dc>
   13d20:	b	13cf4 <_start@@Base+0x12f8>
   13d24:	mov	r3, #5
   13d28:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13d2c:	ldr	r3, [r8, #12]
   13d30:	cmp	r3, #0
   13d34:	mov	r6, r0
   13d38:	subeq	r3, r5, r0
   13d3c:	beq	13cdc <_start@@Base+0x12e0>
   13d40:	b	13d08 <_start@@Base+0x130c>
   13d44:	ldrb	r3, [r6, #1]
   13d48:	cmp	r3, #32
   13d4c:	addhi	r6, r6, #1
   13d50:	bls	13cf4 <_start@@Base+0x12f8>
   13d54:	b	13d08 <_start@@Base+0x130c>
   13d58:	mov	r5, r4
   13d5c:	b	13bd8 <_start@@Base+0x11dc>
   13d60:	mov	r2, r5
   13d64:	mov	r1, r4
   13d68:	mov	r0, r8
   13d6c:	mov	r3, #14
   13d70:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13d74:	mov	r5, r0
   13d78:	b	13bd8 <_start@@Base+0x11dc>
   13d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d80:	sub	sp, sp, #44	; 0x2c
   13d84:	mov	ip, #0
   13d88:	str	r3, [sp, #16]
   13d8c:	ldr	r3, [sp, #80]	; 0x50
   13d90:	cmp	r1, r2
   13d94:	mov	r6, r1
   13d98:	mov	r5, r2
   13d9c:	str	ip, [r3]
   13da0:	mov	r8, r0
   13da4:	beq	13f4c <_start@@Base+0x1550>
   13da8:	ldrb	r3, [r1]
   13dac:	cmp	r3, #34	; 0x22
   13db0:	beq	13f00 <_start@@Base+0x1504>
   13db4:	cmp	r3, #46	; 0x2e
   13db8:	movne	r3, #1
   13dbc:	strne	r3, [r0, #12]
   13dc0:	beq	13f5c <_start@@Base+0x1560>
   13dc4:	add	fp, sp, #24
   13dc8:	add	sl, sp, #28
   13dcc:	add	r9, sp, #32
   13dd0:	mov	r3, #0
   13dd4:	str	r3, [sp, #12]
   13dd8:	str	r3, [sp, #20]
   13ddc:	ldr	r7, [sp, #16]
   13de0:	ldr	r4, [r7]
   13de4:	b	13dfc <_start@@Base+0x1400>
   13de8:	cmp	r6, r0
   13dec:	bne	13e28 <_start@@Base+0x142c>
   13df0:	ldr	r4, [r7, #4]!
   13df4:	cmp	r4, #0
   13df8:	beq	13ea4 <_start@@Base+0x14a8>
   13dfc:	stm	sp, {r9, sl}
   13e00:	mov	r3, fp
   13e04:	mov	r2, r5
   13e08:	mov	r1, r6
   13e0c:	mov	r0, r8
   13e10:	blx	r4
   13e14:	cmp	r5, r0
   13e18:	bne	13de8 <_start@@Base+0x13ec>
   13e1c:	mov	r0, r5
   13e20:	add	sp, sp, #44	; 0x2c
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	ldr	r3, [sp, #12]
   13e2c:	mov	r4, r0
   13e30:	cmp	r3, #0
   13e34:	beq	13e44 <_start@@Base+0x1448>
   13e38:	ldr	r3, [r8, #12]
   13e3c:	cmp	r3, #0
   13e40:	bne	13f98 <_start@@Base+0x159c>
   13e44:	ldr	r3, [sp, #24]
   13e48:	cmp	r3, #0
   13e4c:	bne	13ec8 <_start@@Base+0x14cc>
   13e50:	ldrd	r2, [sp, #32]
   13e54:	mov	r1, #0
   13e58:	mvn	r0, #0
   13e5c:	cmp	r3, r1
   13e60:	cmpeq	r2, r0
   13e64:	strls	r2, [sp, #20]
   13e68:	bhi	13ee8 <_start@@Base+0x14ec>
   13e6c:	ldr	r2, [sp, #28]
   13e70:	ldr	r3, [sp, #80]	; 0x50
   13e74:	cmp	r2, #0
   13e78:	ldr	r2, [sp, #12]
   13e7c:	ldr	r3, [r3]
   13e80:	add	r2, r2, #1
   13e84:	ldr	r1, [sp, #20]
   13e88:	str	r2, [sp, #12]
   13e8c:	ldr	r2, [sp, #80]	; 0x50
   13e90:	add	r3, r3, r1
   13e94:	str	r3, [r2]
   13e98:	beq	13f90 <_start@@Base+0x1594>
   13e9c:	mov	r6, r4
   13ea0:	b	13ddc <_start@@Base+0x13e0>
   13ea4:	mov	r2, r5
   13ea8:	mov	r1, r6
   13eac:	mov	r0, r8
   13eb0:	mov	r3, #23
   13eb4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13eb8:	mov	r5, r0
   13ebc:	mov	r0, r5
   13ec0:	add	sp, sp, #44	; 0x2c
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	mov	r3, #8
   13ecc:	mov	r2, r5
   13ed0:	mov	r1, r4
   13ed4:	mov	r0, r8
   13ed8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13edc:	cmp	r5, r0
   13ee0:	bne	13e6c <_start@@Base+0x1470>
   13ee4:	b	13e1c <_start@@Base+0x1420>
   13ee8:	mov	r3, #7
   13eec:	mov	r2, r5
   13ef0:	mov	r1, r4
   13ef4:	mov	r0, r8
   13ef8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13efc:	b	13edc <_start@@Base+0x14e0>
   13f00:	add	r6, r1, #1
   13f04:	sub	r3, r2, r6
   13f08:	str	ip, [r0, #12]
   13f0c:	cmp	r3, #1
   13f10:	ble	13f24 <_start@@Base+0x1528>
   13f14:	ldrb	r3, [r6]
   13f18:	cmp	r3, #32
   13f1c:	bhi	13f38 <_start@@Base+0x153c>
   13f20:	beq	13f7c <_start@@Base+0x1580>
   13f24:	mov	r1, r6
   13f28:	mov	r2, r5
   13f2c:	mov	r0, r8
   13f30:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   13f34:	mov	r6, r0
   13f38:	cmp	r5, r6
   13f3c:	bne	13dc4 <_start@@Base+0x13c8>
   13f40:	mov	r0, r5
   13f44:	add	sp, sp, #44	; 0x2c
   13f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f4c:	ldr	r3, [r0, #12]
   13f50:	cmp	r3, #0
   13f54:	beq	13f24 <_start@@Base+0x1528>
   13f58:	b	13e1c <_start@@Base+0x1420>
   13f5c:	mov	r3, #5
   13f60:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13f64:	ldr	r3, [r8, #12]
   13f68:	cmp	r3, #0
   13f6c:	mov	r6, r0
   13f70:	subeq	r3, r5, r0
   13f74:	beq	13f0c <_start@@Base+0x1510>
   13f78:	b	13f38 <_start@@Base+0x153c>
   13f7c:	ldrb	r3, [r6, #1]
   13f80:	cmp	r3, #32
   13f84:	addhi	r6, r6, #1
   13f88:	bls	13f24 <_start@@Base+0x1528>
   13f8c:	b	13f38 <_start@@Base+0x153c>
   13f90:	mov	r5, r4
   13f94:	b	13e1c <_start@@Base+0x1420>
   13f98:	mov	r2, r5
   13f9c:	mov	r1, r4
   13fa0:	mov	r0, r8
   13fa4:	mov	r3, #14
   13fa8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   13fac:	mov	r5, r0
   13fb0:	b	13e1c <_start@@Base+0x1420>
   13fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fb8:	sub	sp, sp, #44	; 0x2c
   13fbc:	mov	ip, #0
   13fc0:	str	r3, [sp, #16]
   13fc4:	ldr	r3, [sp, #80]	; 0x50
   13fc8:	cmp	r1, r2
   13fcc:	mov	r6, r1
   13fd0:	mov	r5, r2
   13fd4:	strh	ip, [r3]
   13fd8:	mov	r8, r0
   13fdc:	beq	14188 <_start@@Base+0x178c>
   13fe0:	ldrb	r3, [r1]
   13fe4:	cmp	r3, #34	; 0x22
   13fe8:	beq	1413c <_start@@Base+0x1740>
   13fec:	cmp	r3, #46	; 0x2e
   13ff0:	movne	r3, #1
   13ff4:	strne	r3, [r0, #12]
   13ff8:	beq	14198 <_start@@Base+0x179c>
   13ffc:	add	fp, sp, #24
   14000:	add	sl, sp, #28
   14004:	add	r9, sp, #32
   14008:	mov	r3, #0
   1400c:	str	r3, [sp, #12]
   14010:	str	r3, [sp, #20]
   14014:	ldr	r7, [sp, #16]
   14018:	ldr	r4, [r7]
   1401c:	b	14034 <_start@@Base+0x1638>
   14020:	cmp	r6, r0
   14024:	bne	14060 <_start@@Base+0x1664>
   14028:	ldr	r4, [r7, #4]!
   1402c:	cmp	r4, #0
   14030:	beq	140e0 <_start@@Base+0x16e4>
   14034:	stm	sp, {r9, sl}
   14038:	mov	r3, fp
   1403c:	mov	r2, r5
   14040:	mov	r1, r6
   14044:	mov	r0, r8
   14048:	blx	r4
   1404c:	cmp	r5, r0
   14050:	bne	14020 <_start@@Base+0x1624>
   14054:	mov	r0, r5
   14058:	add	sp, sp, #44	; 0x2c
   1405c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14060:	ldr	r3, [sp, #12]
   14064:	mov	r4, r0
   14068:	cmp	r3, #0
   1406c:	beq	1407c <_start@@Base+0x1680>
   14070:	ldr	r3, [r8, #12]
   14074:	cmp	r3, #0
   14078:	bne	141d4 <_start@@Base+0x17d8>
   1407c:	ldr	r3, [sp, #24]
   14080:	cmp	r3, #0
   14084:	bne	14104 <_start@@Base+0x1708>
   14088:	ldrd	r2, [sp, #32]
   1408c:	ldr	r0, [pc, #348]	; 141f0 <_start@@Base+0x17f4>
   14090:	mov	r1, #0
   14094:	cmp	r3, r1
   14098:	cmpeq	r2, r0
   1409c:	uxthls	r3, r2
   140a0:	strls	r3, [sp, #20]
   140a4:	bhi	14124 <_start@@Base+0x1728>
   140a8:	ldr	r3, [sp, #80]	; 0x50
   140ac:	ldr	r1, [sp, #12]
   140b0:	ldr	r2, [sp, #28]
   140b4:	ldrh	r3, [r3]
   140b8:	add	r1, r1, #1
   140bc:	str	r1, [sp, #12]
   140c0:	cmp	r2, #0
   140c4:	ldr	r1, [sp, #20]
   140c8:	ldr	r2, [sp, #80]	; 0x50
   140cc:	add	r3, r1, r3
   140d0:	strh	r3, [r2]
   140d4:	beq	141cc <_start@@Base+0x17d0>
   140d8:	mov	r6, r4
   140dc:	b	14014 <_start@@Base+0x1618>
   140e0:	mov	r2, r5
   140e4:	mov	r1, r6
   140e8:	mov	r0, r8
   140ec:	mov	r3, #23
   140f0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   140f4:	mov	r5, r0
   140f8:	mov	r0, r5
   140fc:	add	sp, sp, #44	; 0x2c
   14100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14104:	mov	r3, #8
   14108:	mov	r2, r5
   1410c:	mov	r1, r4
   14110:	mov	r0, r8
   14114:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14118:	cmp	r5, r0
   1411c:	bne	140a8 <_start@@Base+0x16ac>
   14120:	b	14054 <_start@@Base+0x1658>
   14124:	mov	r3, #7
   14128:	mov	r2, r5
   1412c:	mov	r1, r4
   14130:	mov	r0, r8
   14134:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14138:	b	14118 <_start@@Base+0x171c>
   1413c:	add	r6, r1, #1
   14140:	sub	r3, r2, r6
   14144:	str	ip, [r0, #12]
   14148:	cmp	r3, #1
   1414c:	ble	14160 <_start@@Base+0x1764>
   14150:	ldrb	r3, [r6]
   14154:	cmp	r3, #32
   14158:	bhi	14174 <_start@@Base+0x1778>
   1415c:	beq	141b8 <_start@@Base+0x17bc>
   14160:	mov	r1, r6
   14164:	mov	r2, r5
   14168:	mov	r0, r8
   1416c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14170:	mov	r6, r0
   14174:	cmp	r5, r6
   14178:	bne	13ffc <_start@@Base+0x1600>
   1417c:	mov	r0, r5
   14180:	add	sp, sp, #44	; 0x2c
   14184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14188:	ldr	r3, [r0, #12]
   1418c:	cmp	r3, #0
   14190:	beq	14160 <_start@@Base+0x1764>
   14194:	b	14054 <_start@@Base+0x1658>
   14198:	mov	r3, #5
   1419c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   141a0:	ldr	r3, [r8, #12]
   141a4:	cmp	r3, #0
   141a8:	mov	r6, r0
   141ac:	subeq	r3, r5, r0
   141b0:	beq	14148 <_start@@Base+0x174c>
   141b4:	b	14174 <_start@@Base+0x1778>
   141b8:	ldrb	r3, [r6, #1]
   141bc:	cmp	r3, #32
   141c0:	addhi	r6, r6, #1
   141c4:	bls	14160 <_start@@Base+0x1764>
   141c8:	b	14174 <_start@@Base+0x1778>
   141cc:	mov	r5, r4
   141d0:	b	14054 <_start@@Base+0x1658>
   141d4:	mov	r2, r5
   141d8:	mov	r1, r4
   141dc:	mov	r0, r8
   141e0:	mov	r3, #14
   141e4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   141e8:	mov	r5, r0
   141ec:	b	14054 <_start@@Base+0x1658>
   141f0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   141f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f8:	sub	sp, sp, #44	; 0x2c
   141fc:	mov	ip, #0
   14200:	str	r3, [sp, #20]
   14204:	ldr	r3, [sp, #80]	; 0x50
   14208:	cmp	r1, r2
   1420c:	mov	r6, r1
   14210:	mov	r5, r2
   14214:	strb	ip, [r3]
   14218:	mov	r8, r0
   1421c:	beq	143d4 <_start@@Base+0x19d8>
   14220:	ldrb	r3, [r1]
   14224:	cmp	r3, #34	; 0x22
   14228:	beq	14390 <_start@@Base+0x1994>
   1422c:	cmp	r3, #46	; 0x2e
   14230:	movne	r3, #1
   14234:	strne	r3, [r0, #12]
   14238:	beq	143e4 <_start@@Base+0x19e8>
   1423c:	add	fp, sp, #24
   14240:	add	sl, sp, #28
   14244:	add	r9, sp, #32
   14248:	mov	r3, #0
   1424c:	str	r3, [sp, #12]
   14250:	str	r3, [sp, #16]
   14254:	ldr	r3, [sp, #20]
   14258:	mov	r7, r3
   1425c:	ldr	r4, [r3]
   14260:	b	14278 <_start@@Base+0x187c>
   14264:	cmp	r6, r0
   14268:	bne	142a4 <_start@@Base+0x18a8>
   1426c:	ldr	r4, [r7, #4]!
   14270:	cmp	r4, #0
   14274:	beq	14320 <_start@@Base+0x1924>
   14278:	stm	sp, {r9, sl}
   1427c:	mov	r3, fp
   14280:	mov	r2, r5
   14284:	mov	r1, r6
   14288:	mov	r0, r8
   1428c:	blx	r4
   14290:	cmp	r5, r0
   14294:	bne	14264 <_start@@Base+0x1868>
   14298:	mov	r0, r5
   1429c:	add	sp, sp, #44	; 0x2c
   142a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a4:	ldr	r3, [sp, #12]
   142a8:	mov	r4, r0
   142ac:	cmp	r3, #0
   142b0:	beq	142c0 <_start@@Base+0x18c4>
   142b4:	ldr	r3, [r8, #12]
   142b8:	cmp	r3, #0
   142bc:	bne	14420 <_start@@Base+0x1a24>
   142c0:	ldr	r1, [sp, #24]
   142c4:	ldrd	r2, [sp, #32]
   142c8:	cmp	r1, #0
   142cc:	beq	14344 <_start@@Base+0x1948>
   142d0:	cmp	r3, #0
   142d4:	cmpeq	r2, #128	; 0x80
   142d8:	rsbls	r2, r2, #0
   142dc:	sxtbls	r3, r2
   142e0:	strls	r3, [sp, #16]
   142e4:	bhi	14370 <_start@@Base+0x1974>
   142e8:	ldr	r3, [sp, #80]	; 0x50
   142ec:	ldr	r1, [sp, #12]
   142f0:	ldr	r2, [sp, #28]
   142f4:	ldrb	r3, [r3]
   142f8:	add	r1, r1, #1
   142fc:	str	r1, [sp, #12]
   14300:	cmp	r2, #0
   14304:	ldr	r1, [sp, #16]
   14308:	ldr	r2, [sp, #80]	; 0x50
   1430c:	add	r3, r3, r1
   14310:	strb	r3, [r2]
   14314:	beq	14418 <_start@@Base+0x1a1c>
   14318:	mov	r6, r4
   1431c:	b	14254 <_start@@Base+0x1858>
   14320:	mov	r2, r5
   14324:	mov	r1, r6
   14328:	mov	r0, r8
   1432c:	mov	r3, #23
   14330:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14334:	mov	r5, r0
   14338:	mov	r0, r5
   1433c:	add	sp, sp, #44	; 0x2c
   14340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14344:	cmp	r3, #0
   14348:	cmpeq	r2, #127	; 0x7f
   1434c:	sxtbls	r3, r2
   14350:	strls	r3, [sp, #16]
   14354:	bls	142e8 <_start@@Base+0x18ec>
   14358:	mov	r3, #7
   1435c:	mov	r2, r5
   14360:	mov	r1, r4
   14364:	mov	r0, r8
   14368:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1436c:	b	14384 <_start@@Base+0x1988>
   14370:	mov	r3, #8
   14374:	mov	r2, r5
   14378:	mov	r1, r4
   1437c:	mov	r0, r8
   14380:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14384:	cmp	r5, r0
   14388:	bne	142e8 <_start@@Base+0x18ec>
   1438c:	b	14298 <_start@@Base+0x189c>
   14390:	add	r6, r1, #1
   14394:	sub	r3, r2, r6
   14398:	str	ip, [r0, #12]
   1439c:	cmp	r3, #1
   143a0:	ble	143b4 <_start@@Base+0x19b8>
   143a4:	ldrb	r3, [r6]
   143a8:	cmp	r3, #32
   143ac:	bhi	143c8 <_start@@Base+0x19cc>
   143b0:	beq	14404 <_start@@Base+0x1a08>
   143b4:	mov	r1, r6
   143b8:	mov	r2, r5
   143bc:	mov	r0, r8
   143c0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   143c4:	mov	r6, r0
   143c8:	cmp	r5, r6
   143cc:	bne	1423c <_start@@Base+0x1840>
   143d0:	b	14298 <_start@@Base+0x189c>
   143d4:	ldr	r3, [r0, #12]
   143d8:	cmp	r3, #0
   143dc:	bne	14298 <_start@@Base+0x189c>
   143e0:	b	143b4 <_start@@Base+0x19b8>
   143e4:	mov	r3, #5
   143e8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   143ec:	ldr	r3, [r8, #12]
   143f0:	cmp	r3, #0
   143f4:	mov	r6, r0
   143f8:	subeq	r3, r5, r0
   143fc:	beq	1439c <_start@@Base+0x19a0>
   14400:	b	143c8 <_start@@Base+0x19cc>
   14404:	ldrb	r3, [r6, #1]
   14408:	cmp	r3, #32
   1440c:	addhi	r6, r6, #1
   14410:	bls	143b4 <_start@@Base+0x19b8>
   14414:	b	143c8 <_start@@Base+0x19cc>
   14418:	mov	r5, r4
   1441c:	b	14298 <_start@@Base+0x189c>
   14420:	mov	r2, r5
   14424:	mov	r1, r4
   14428:	mov	r0, r8
   1442c:	mov	r3, #14
   14430:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14434:	mov	r5, r0
   14438:	b	14298 <_start@@Base+0x189c>
   1443c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14440:	sub	sp, sp, #44	; 0x2c
   14444:	mov	ip, #0
   14448:	str	r3, [sp, #16]
   1444c:	ldr	r3, [sp, #80]	; 0x50
   14450:	cmp	r1, r2
   14454:	mov	r6, r1
   14458:	mov	r5, r2
   1445c:	strb	ip, [r3]
   14460:	mov	r8, r0
   14464:	beq	1460c <_start@@Base+0x1c10>
   14468:	ldrb	r3, [r1]
   1446c:	cmp	r3, #34	; 0x22
   14470:	beq	145c0 <_start@@Base+0x1bc4>
   14474:	cmp	r3, #46	; 0x2e
   14478:	movne	r3, #1
   1447c:	strne	r3, [r0, #12]
   14480:	beq	1461c <_start@@Base+0x1c20>
   14484:	add	fp, sp, #24
   14488:	add	sl, sp, #28
   1448c:	add	r9, sp, #32
   14490:	mov	r3, #0
   14494:	str	r3, [sp, #12]
   14498:	str	r3, [sp, #20]
   1449c:	ldr	r3, [sp, #16]
   144a0:	mov	r7, r3
   144a4:	ldr	r4, [r3]
   144a8:	b	144c0 <_start@@Base+0x1ac4>
   144ac:	cmp	r6, r0
   144b0:	bne	144ec <_start@@Base+0x1af0>
   144b4:	ldr	r4, [r7, #4]!
   144b8:	cmp	r4, #0
   144bc:	beq	14564 <_start@@Base+0x1b68>
   144c0:	stm	sp, {r9, sl}
   144c4:	mov	r3, fp
   144c8:	mov	r2, r5
   144cc:	mov	r1, r6
   144d0:	mov	r0, r8
   144d4:	blx	r4
   144d8:	cmp	r5, r0
   144dc:	bne	144ac <_start@@Base+0x1ab0>
   144e0:	mov	r0, r5
   144e4:	add	sp, sp, #44	; 0x2c
   144e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144ec:	ldr	r3, [sp, #12]
   144f0:	mov	r4, r0
   144f4:	cmp	r3, #0
   144f8:	beq	14508 <_start@@Base+0x1b0c>
   144fc:	ldr	r3, [r8, #12]
   14500:	cmp	r3, #0
   14504:	bne	14658 <_start@@Base+0x1c5c>
   14508:	ldr	r3, [sp, #24]
   1450c:	cmp	r3, #0
   14510:	bne	14588 <_start@@Base+0x1b8c>
   14514:	ldrd	r2, [sp, #32]
   14518:	cmp	r3, #0
   1451c:	cmpeq	r2, #255	; 0xff
   14520:	uxtbls	r3, r2
   14524:	strls	r3, [sp, #20]
   14528:	bhi	145a8 <_start@@Base+0x1bac>
   1452c:	ldr	r3, [sp, #80]	; 0x50
   14530:	ldr	r1, [sp, #12]
   14534:	ldr	r2, [sp, #28]
   14538:	ldrb	r3, [r3]
   1453c:	add	r1, r1, #1
   14540:	str	r1, [sp, #12]
   14544:	cmp	r2, #0
   14548:	ldr	r1, [sp, #20]
   1454c:	ldr	r2, [sp, #80]	; 0x50
   14550:	add	r3, r1, r3
   14554:	strb	r3, [r2]
   14558:	beq	14650 <_start@@Base+0x1c54>
   1455c:	mov	r6, r4
   14560:	b	1449c <_start@@Base+0x1aa0>
   14564:	mov	r2, r5
   14568:	mov	r1, r6
   1456c:	mov	r0, r8
   14570:	mov	r3, #23
   14574:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14578:	mov	r5, r0
   1457c:	mov	r0, r5
   14580:	add	sp, sp, #44	; 0x2c
   14584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14588:	mov	r3, #8
   1458c:	mov	r2, r5
   14590:	mov	r1, r4
   14594:	mov	r0, r8
   14598:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1459c:	cmp	r5, r0
   145a0:	bne	1452c <_start@@Base+0x1b30>
   145a4:	b	144e0 <_start@@Base+0x1ae4>
   145a8:	mov	r3, #7
   145ac:	mov	r2, r5
   145b0:	mov	r1, r4
   145b4:	mov	r0, r8
   145b8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   145bc:	b	1459c <_start@@Base+0x1ba0>
   145c0:	add	r6, r1, #1
   145c4:	sub	r3, r2, r6
   145c8:	str	ip, [r0, #12]
   145cc:	cmp	r3, #1
   145d0:	ble	145e4 <_start@@Base+0x1be8>
   145d4:	ldrb	r3, [r6]
   145d8:	cmp	r3, #32
   145dc:	bhi	145f8 <_start@@Base+0x1bfc>
   145e0:	beq	1463c <_start@@Base+0x1c40>
   145e4:	mov	r1, r6
   145e8:	mov	r2, r5
   145ec:	mov	r0, r8
   145f0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   145f4:	mov	r6, r0
   145f8:	cmp	r5, r6
   145fc:	bne	14484 <_start@@Base+0x1a88>
   14600:	mov	r0, r5
   14604:	add	sp, sp, #44	; 0x2c
   14608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1460c:	ldr	r3, [r0, #12]
   14610:	cmp	r3, #0
   14614:	beq	145e4 <_start@@Base+0x1be8>
   14618:	b	144e0 <_start@@Base+0x1ae4>
   1461c:	mov	r3, #5
   14620:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14624:	ldr	r3, [r8, #12]
   14628:	cmp	r3, #0
   1462c:	mov	r6, r0
   14630:	subeq	r3, r5, r0
   14634:	beq	145cc <_start@@Base+0x1bd0>
   14638:	b	145f8 <_start@@Base+0x1bfc>
   1463c:	ldrb	r3, [r6, #1]
   14640:	cmp	r3, #32
   14644:	addhi	r6, r6, #1
   14648:	bls	145e4 <_start@@Base+0x1be8>
   1464c:	b	145f8 <_start@@Base+0x1bfc>
   14650:	mov	r5, r4
   14654:	b	144e0 <_start@@Base+0x1ae4>
   14658:	mov	r2, r5
   1465c:	mov	r1, r4
   14660:	mov	r0, r8
   14664:	mov	r3, #14
   14668:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1466c:	mov	r5, r0
   14670:	b	144e0 <_start@@Base+0x1ae4>
   14674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14678:	sub	sp, sp, #44	; 0x2c
   1467c:	mov	ip, #0
   14680:	str	r3, [sp, #20]
   14684:	ldr	r3, [sp, #80]	; 0x50
   14688:	cmp	r1, r2
   1468c:	mov	r6, r1
   14690:	mov	r5, r2
   14694:	strh	ip, [r3]
   14698:	mov	r8, r0
   1469c:	beq	14858 <_start@@Base+0x1e5c>
   146a0:	ldrb	r3, [r1]
   146a4:	cmp	r3, #34	; 0x22
   146a8:	beq	14814 <_start@@Base+0x1e18>
   146ac:	cmp	r3, #46	; 0x2e
   146b0:	movne	r3, #1
   146b4:	strne	r3, [r0, #12]
   146b8:	beq	14868 <_start@@Base+0x1e6c>
   146bc:	add	fp, sp, #24
   146c0:	add	sl, sp, #28
   146c4:	add	r9, sp, #32
   146c8:	mov	r3, #0
   146cc:	str	r3, [sp, #12]
   146d0:	str	r3, [sp, #16]
   146d4:	ldr	r7, [sp, #20]
   146d8:	ldr	r4, [r7]
   146dc:	b	146f4 <_start@@Base+0x1cf8>
   146e0:	cmp	r6, r0
   146e4:	bne	14720 <_start@@Base+0x1d24>
   146e8:	ldr	r4, [r7, #4]!
   146ec:	cmp	r4, #0
   146f0:	beq	1479c <_start@@Base+0x1da0>
   146f4:	stm	sp, {r9, sl}
   146f8:	mov	r3, fp
   146fc:	mov	r2, r5
   14700:	mov	r1, r6
   14704:	mov	r0, r8
   14708:	blx	r4
   1470c:	cmp	r5, r0
   14710:	bne	146e0 <_start@@Base+0x1ce4>
   14714:	mov	r0, r5
   14718:	add	sp, sp, #44	; 0x2c
   1471c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14720:	ldr	r3, [sp, #12]
   14724:	mov	r4, r0
   14728:	cmp	r3, #0
   1472c:	beq	1473c <_start@@Base+0x1d40>
   14730:	ldr	r3, [r8, #12]
   14734:	cmp	r3, #0
   14738:	bne	148a4 <_start@@Base+0x1ea8>
   1473c:	ldr	r1, [sp, #24]
   14740:	ldrd	r2, [sp, #32]
   14744:	cmp	r1, #0
   14748:	beq	147c0 <_start@@Base+0x1dc4>
   1474c:	cmp	r3, #0
   14750:	cmpeq	r2, #32768	; 0x8000
   14754:	rsbls	r2, r2, #0
   14758:	sxthls	r3, r2
   1475c:	strls	r3, [sp, #16]
   14760:	bhi	147f4 <_start@@Base+0x1df8>
   14764:	ldr	r3, [sp, #80]	; 0x50
   14768:	ldr	r1, [sp, #12]
   1476c:	ldr	r2, [sp, #28]
   14770:	ldrh	r3, [r3]
   14774:	add	r1, r1, #1
   14778:	str	r1, [sp, #12]
   1477c:	cmp	r2, #0
   14780:	ldr	r1, [sp, #16]
   14784:	ldr	r2, [sp, #80]	; 0x50
   14788:	add	r3, r3, r1
   1478c:	strh	r3, [r2]
   14790:	beq	1489c <_start@@Base+0x1ea0>
   14794:	mov	r6, r4
   14798:	b	146d4 <_start@@Base+0x1cd8>
   1479c:	mov	r2, r5
   147a0:	mov	r1, r6
   147a4:	mov	r0, r8
   147a8:	mov	r3, #23
   147ac:	bl	27994 <flatcc_json_parser_set_error@@Base>
   147b0:	mov	r5, r0
   147b4:	mov	r0, r5
   147b8:	add	sp, sp, #44	; 0x2c
   147bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c0:	ldr	r0, [pc, #248]	; 148c0 <_start@@Base+0x1ec4>
   147c4:	mov	r1, #0
   147c8:	cmp	r3, r1
   147cc:	cmpeq	r2, r0
   147d0:	sxthls	r3, r2
   147d4:	strls	r3, [sp, #16]
   147d8:	bls	14764 <_start@@Base+0x1d68>
   147dc:	mov	r3, #7
   147e0:	mov	r2, r5
   147e4:	mov	r1, r4
   147e8:	mov	r0, r8
   147ec:	bl	27994 <flatcc_json_parser_set_error@@Base>
   147f0:	b	14808 <_start@@Base+0x1e0c>
   147f4:	mov	r3, #8
   147f8:	mov	r2, r5
   147fc:	mov	r1, r4
   14800:	mov	r0, r8
   14804:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14808:	cmp	r5, r0
   1480c:	bne	14764 <_start@@Base+0x1d68>
   14810:	b	14714 <_start@@Base+0x1d18>
   14814:	add	r6, r1, #1
   14818:	sub	r3, r2, r6
   1481c:	str	ip, [r0, #12]
   14820:	cmp	r3, #1
   14824:	ble	14838 <_start@@Base+0x1e3c>
   14828:	ldrb	r3, [r6]
   1482c:	cmp	r3, #32
   14830:	bhi	1484c <_start@@Base+0x1e50>
   14834:	beq	14888 <_start@@Base+0x1e8c>
   14838:	mov	r1, r6
   1483c:	mov	r2, r5
   14840:	mov	r0, r8
   14844:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14848:	mov	r6, r0
   1484c:	cmp	r5, r6
   14850:	bne	146bc <_start@@Base+0x1cc0>
   14854:	b	14714 <_start@@Base+0x1d18>
   14858:	ldr	r3, [r0, #12]
   1485c:	cmp	r3, #0
   14860:	bne	14714 <_start@@Base+0x1d18>
   14864:	b	14838 <_start@@Base+0x1e3c>
   14868:	mov	r3, #5
   1486c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14870:	ldr	r3, [r8, #12]
   14874:	cmp	r3, #0
   14878:	mov	r6, r0
   1487c:	subeq	r3, r5, r0
   14880:	beq	14820 <_start@@Base+0x1e24>
   14884:	b	1484c <_start@@Base+0x1e50>
   14888:	ldrb	r3, [r6, #1]
   1488c:	cmp	r3, #32
   14890:	addhi	r6, r6, #1
   14894:	bls	14838 <_start@@Base+0x1e3c>
   14898:	b	1484c <_start@@Base+0x1e50>
   1489c:	mov	r5, r4
   148a0:	b	14714 <_start@@Base+0x1d18>
   148a4:	mov	r2, r5
   148a8:	mov	r1, r4
   148ac:	mov	r0, r8
   148b0:	mov	r3, #14
   148b4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   148b8:	mov	r5, r0
   148bc:	b	14714 <_start@@Base+0x1d18>
   148c0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   148c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148c8:	sub	sp, sp, #44	; 0x2c
   148cc:	mov	r8, #0
   148d0:	str	r3, [sp, #20]
   148d4:	ldr	r3, [sp, #80]	; 0x50
   148d8:	mov	r9, #0
   148dc:	cmp	r1, r2
   148e0:	strd	r8, [r3]
   148e4:	mov	r5, r1
   148e8:	mov	r6, r2
   148ec:	mov	r8, r0
   148f0:	beq	14aac <_start@@Base+0x20b0>
   148f4:	ldrb	r3, [r1]
   148f8:	cmp	r3, #34	; 0x22
   148fc:	beq	14a5c <_start@@Base+0x2060>
   14900:	cmp	r3, #46	; 0x2e
   14904:	movne	r3, #1
   14908:	strne	r3, [r0, #12]
   1490c:	beq	14abc <_start@@Base+0x20c0>
   14910:	mov	r3, #0
   14914:	str	r3, [sp, #16]
   14918:	mov	r2, #0
   1491c:	mov	r3, #0
   14920:	add	fp, sp, #24
   14924:	add	sl, sp, #28
   14928:	add	r9, sp, #32
   1492c:	strd	r2, [sp, #8]
   14930:	ldr	r7, [sp, #20]
   14934:	ldr	r4, [r7]
   14938:	b	14950 <_start@@Base+0x1f54>
   1493c:	cmp	r5, r0
   14940:	bne	1497c <_start@@Base+0x1f80>
   14944:	ldr	r4, [r7, #4]!
   14948:	cmp	r4, #0
   1494c:	beq	14a04 <_start@@Base+0x2008>
   14950:	stm	sp, {r9, sl}
   14954:	mov	r3, fp
   14958:	mov	r2, r6
   1495c:	mov	r1, r5
   14960:	mov	r0, r8
   14964:	blx	r4
   14968:	cmp	r6, r0
   1496c:	bne	1493c <_start@@Base+0x1f40>
   14970:	mov	r0, r6
   14974:	add	sp, sp, #44	; 0x2c
   14978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1497c:	ldr	r3, [sp, #16]
   14980:	mov	r4, r0
   14984:	cmp	r3, #0
   14988:	beq	14998 <_start@@Base+0x1f9c>
   1498c:	ldr	r3, [r8, #12]
   14990:	cmp	r3, #0
   14994:	bne	14b10 <_start@@Base+0x2114>
   14998:	ldr	r1, [sp, #24]
   1499c:	ldrd	r2, [sp, #32]
   149a0:	cmp	r1, #0
   149a4:	beq	14a28 <_start@@Base+0x202c>
   149a8:	cmp	r3, #-2147483648	; 0x80000000
   149ac:	cmpeq	r2, #0
   149b0:	bhi	14a3c <_start@@Base+0x2040>
   149b4:	rsbs	r2, r2, #0
   149b8:	rsc	r3, r3, #0
   149bc:	strd	r2, [sp, #8]
   149c0:	ldr	r1, [sp, #16]
   149c4:	ldr	r3, [sp, #80]	; 0x50
   149c8:	add	r1, r1, #1
   149cc:	str	r1, [sp, #16]
   149d0:	ldrd	r2, [r3]
   149d4:	ldrd	r0, [sp, #8]
   149d8:	ldr	ip, [sp, #28]
   149dc:	adds	r0, r0, r2
   149e0:	adc	r1, r1, r3
   149e4:	mov	r3, r1
   149e8:	ldr	r1, [sp, #80]	; 0x50
   149ec:	mov	r2, r0
   149f0:	cmp	ip, #0
   149f4:	strd	r2, [r1]
   149f8:	beq	14b08 <_start@@Base+0x210c>
   149fc:	mov	r5, r4
   14a00:	b	14930 <_start@@Base+0x1f34>
   14a04:	mov	r2, r6
   14a08:	mov	r1, r5
   14a0c:	mov	r0, r8
   14a10:	mov	r3, #23
   14a14:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14a18:	mov	r6, r0
   14a1c:	mov	r0, r6
   14a20:	add	sp, sp, #44	; 0x2c
   14a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a28:	cmp	r2, #0
   14a2c:	sbcs	r1, r3, #0
   14a30:	blt	14adc <_start@@Base+0x20e0>
   14a34:	strd	r2, [sp, #8]
   14a38:	b	149c0 <_start@@Base+0x1fc4>
   14a3c:	mov	r3, #8
   14a40:	mov	r2, r6
   14a44:	mov	r1, r4
   14a48:	mov	r0, r8
   14a4c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14a50:	cmp	r6, r0
   14a54:	bne	149c0 <_start@@Base+0x1fc4>
   14a58:	b	14970 <_start@@Base+0x1f74>
   14a5c:	add	r5, r1, #1
   14a60:	sub	r3, r6, r5
   14a64:	mov	r2, #0
   14a68:	str	r2, [r0, #12]
   14a6c:	cmp	r3, #1
   14a70:	ble	14a84 <_start@@Base+0x2088>
   14a74:	ldrb	r3, [r5]
   14a78:	cmp	r3, #32
   14a7c:	bhi	14a98 <_start@@Base+0x209c>
   14a80:	beq	14af4 <_start@@Base+0x20f8>
   14a84:	mov	r1, r5
   14a88:	mov	r2, r6
   14a8c:	mov	r0, r8
   14a90:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14a94:	mov	r5, r0
   14a98:	cmp	r6, r5
   14a9c:	bne	14910 <_start@@Base+0x1f14>
   14aa0:	mov	r0, r6
   14aa4:	add	sp, sp, #44	; 0x2c
   14aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aac:	ldr	r3, [r0, #12]
   14ab0:	cmp	r3, #0
   14ab4:	beq	14a84 <_start@@Base+0x2088>
   14ab8:	b	14970 <_start@@Base+0x1f74>
   14abc:	mov	r3, #5
   14ac0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14ac4:	ldr	r3, [r8, #12]
   14ac8:	cmp	r3, #0
   14acc:	mov	r5, r0
   14ad0:	subeq	r3, r6, r0
   14ad4:	beq	14a6c <_start@@Base+0x2070>
   14ad8:	b	14a98 <_start@@Base+0x209c>
   14adc:	mov	r3, #7
   14ae0:	mov	r2, r6
   14ae4:	mov	r1, r4
   14ae8:	mov	r0, r8
   14aec:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14af0:	b	14a50 <_start@@Base+0x2054>
   14af4:	ldrb	r3, [r5, #1]
   14af8:	cmp	r3, #32
   14afc:	addhi	r5, r5, #1
   14b00:	bls	14a84 <_start@@Base+0x2088>
   14b04:	b	14a98 <_start@@Base+0x209c>
   14b08:	mov	r6, r4
   14b0c:	b	14970 <_start@@Base+0x1f74>
   14b10:	mov	r2, r6
   14b14:	mov	r1, r4
   14b18:	mov	r0, r8
   14b1c:	mov	r3, #14
   14b20:	bl	27994 <flatcc_json_parser_set_error@@Base>
   14b24:	mov	r6, r0
   14b28:	b	14970 <_start@@Base+0x1f74>
   14b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b30:	sub	sp, sp, #12
   14b34:	mov	sl, r2
   14b38:	str	r3, [sp]
   14b3c:	sub	r2, r2, r1
   14b40:	ldr	r3, [sp, #48]	; 0x30
   14b44:	cmp	r2, #8
   14b48:	mov	r4, r1
   14b4c:	mov	r5, r0
   14b50:	str	r3, [sp, #4]
   14b54:	ldr	fp, [sp, #52]	; 0x34
   14b58:	bls	14c30 <_start@@Base+0x2234>
   14b5c:	ldrb	r6, [r4, #7]
   14b60:	mov	r7, #0
   14b64:	ldrb	r0, [r4, #6]
   14b68:	lsr	r3, r0, #24
   14b6c:	lsl	r2, r0, #8
   14b70:	orr	r6, r6, r2
   14b74:	orr	r7, r7, r3
   14b78:	ldrb	r0, [r4, #5]
   14b7c:	lsr	r3, r0, #16
   14b80:	lsl	r2, r0, #16
   14b84:	orr	r6, r6, r2
   14b88:	orr	r7, r7, r3
   14b8c:	ldrb	r0, [r4, #4]
   14b90:	lsr	r3, r0, #8
   14b94:	lsl	r2, r0, #24
   14b98:	orr	r6, r6, r2
   14b9c:	orr	r7, r7, r3
   14ba0:	ldrb	r3, [r4, #3]
   14ba4:	mov	r2, #0
   14ba8:	orr	r2, r2, r6
   14bac:	orr	r3, r3, r7
   14bb0:	ldrb	r0, [r4, #2]
   14bb4:	mov	r6, #0
   14bb8:	orr	r2, r2, r6
   14bbc:	lsl	r7, r0, #8
   14bc0:	orr	r3, r3, r7
   14bc4:	ldrb	r0, [r4, #1]
   14bc8:	mov	r6, #0
   14bcc:	orr	r6, r6, r2
   14bd0:	lsl	r7, r0, #16
   14bd4:	orr	r7, r7, r3
   14bd8:	ldrb	r2, [r4]
   14bdc:	add	r9, pc, #284	; 0x11c
   14be0:	ldrd	r8, [r9]
   14be4:	mov	r0, #0
   14be8:	orr	r0, r0, r6
   14bec:	lsl	r1, r2, #24
   14bf0:	orr	r1, r1, r7
   14bf4:	cmp	r1, r9
   14bf8:	cmpeq	r0, r8
   14bfc:	bne	14c24 <_start@@Base+0x2228>
   14c00:	add	r6, r4, #8
   14c04:	mov	r0, r6
   14c08:	mov	r1, sl
   14c0c:	bl	12b28 <_start@@Base+0x12c>
   14c10:	mov	r0, #0
   14c14:	and	r1, r1, #-16777216	; 0xff000000
   14c18:	cmp	r1, #1912602624	; 0x72000000
   14c1c:	cmpeq	r0, #0
   14c20:	beq	14c60 <_start@@Base+0x2264>
   14c24:	mov	r0, r4
   14c28:	add	sp, sp, #12
   14c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c30:	sub	r2, r2, #1
   14c34:	cmp	r2, #7
   14c38:	addls	pc, pc, r2, lsl #2
   14c3c:	b	14c24 <_start@@Base+0x2228>
   14c40:	b	14ca8 <_start@@Base+0x22ac>
   14c44:	b	14cb4 <_start@@Base+0x22b8>
   14c48:	b	14cc0 <_start@@Base+0x22c4>
   14c4c:	b	14ccc <_start@@Base+0x22d0>
   14c50:	b	14cd8 <_start@@Base+0x22dc>
   14c54:	b	14ce4 <_start@@Base+0x22e8>
   14c58:	b	14cf0 <_start@@Base+0x22f4>
   14c5c:	b	14b5c <_start@@Base+0x2160>
   14c60:	sub	r3, sl, r6
   14c64:	cmp	r3, #1
   14c68:	ble	14c24 <_start@@Base+0x2228>
   14c6c:	ldrb	r3, [r4, #9]
   14c70:	cmp	r3, #46	; 0x2e
   14c74:	bne	14c24 <_start@@Base+0x2228>
   14c78:	add	r1, r4, #10
   14c7c:	cmp	r6, r1
   14c80:	beq	14c24 <_start@@Base+0x2228>
   14c84:	ldr	r3, [sp, #4]
   14c88:	str	fp, [sp, #52]	; 0x34
   14c8c:	str	r3, [sp, #48]	; 0x30
   14c90:	mov	r2, sl
   14c94:	ldr	r3, [sp]
   14c98:	mov	r0, r5
   14c9c:	add	sp, sp, #12
   14ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ca4:	b	12ca8 <_start@@Base+0x2ac>
   14ca8:	mov	r6, #0
   14cac:	mov	r7, #0
   14cb0:	b	14bd8 <_start@@Base+0x21dc>
   14cb4:	mov	r2, #0
   14cb8:	mov	r3, #0
   14cbc:	b	14bc4 <_start@@Base+0x21c8>
   14cc0:	mov	r2, #0
   14cc4:	mov	r3, #0
   14cc8:	b	14bb0 <_start@@Base+0x21b4>
   14ccc:	mov	r6, #0
   14cd0:	mov	r7, #0
   14cd4:	b	14ba0 <_start@@Base+0x21a4>
   14cd8:	mov	r6, #0
   14cdc:	mov	r7, #0
   14ce0:	b	14b8c <_start@@Base+0x2190>
   14ce4:	mov	r6, #0
   14ce8:	mov	r7, #0
   14cec:	b	14b78 <_start@@Base+0x217c>
   14cf0:	mov	r6, #0
   14cf4:	mov	r7, #0
   14cf8:	b	14b64 <_start@@Base+0x2168>
   14cfc:	nop			; (mov r0, r0)
   14d00:	cmnvs	r3, r5, ror #8
   14d04:	cmnmi	r8, #-2147483620	; 0x8000001c
   14d08:	push	{r4, r5, r6, lr}
   14d0c:	mov	r4, r2
   14d10:	sub	r2, r2, r1
   14d14:	cmp	r2, #1
   14d18:	mov	r5, r0
   14d1c:	mov	r6, r3
   14d20:	ble	14d34 <_start@@Base+0x2338>
   14d24:	ldrb	r3, [r1]
   14d28:	cmp	r3, #32
   14d2c:	bhi	14d44 <_start@@Base+0x2348>
   14d30:	beq	14db4 <_start@@Base+0x23b8>
   14d34:	mov	r2, r4
   14d38:	mov	r0, r5
   14d3c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14d40:	mov	r1, r0
   14d44:	cmp	r4, r1
   14d48:	beq	14e18 <_start@@Base+0x241c>
   14d4c:	ldrb	r3, [r1]
   14d50:	cmp	r3, #44	; 0x2c
   14d54:	beq	14dc8 <_start@@Base+0x23cc>
   14d58:	mov	r3, #0
   14d5c:	str	r3, [r6]
   14d60:	ldrb	r3, [r1]
   14d64:	cmp	r3, #93	; 0x5d
   14d68:	beq	14d80 <_start@@Base+0x2384>
   14d6c:	mov	r2, r4
   14d70:	mov	r0, r5
   14d74:	mov	r3, #9
   14d78:	pop	{r4, r5, r6, lr}
   14d7c:	b	27994 <flatcc_json_parser_set_error@@Base>
   14d80:	add	r0, r1, #1
   14d84:	sub	r3, r4, r0
   14d88:	cmp	r3, #1
   14d8c:	ble	14da0 <_start@@Base+0x23a4>
   14d90:	ldrb	r3, [r1, #1]
   14d94:	cmp	r3, #32
   14d98:	pophi	{r4, r5, r6, pc}
   14d9c:	beq	14e3c <_start@@Base+0x2440>
   14da0:	mov	r2, r4
   14da4:	mov	r1, r0
   14da8:	mov	r0, r5
   14dac:	pop	{r4, r5, r6, lr}
   14db0:	b	27a88 <flatcc_json_parser_space_ext@@Base>
   14db4:	ldrb	r3, [r1, #1]
   14db8:	cmp	r3, #32
   14dbc:	addhi	r1, r1, #1
   14dc0:	bls	14d34 <_start@@Base+0x2338>
   14dc4:	b	14d44 <_start@@Base+0x2348>
   14dc8:	add	r0, r1, #1
   14dcc:	sub	r3, r4, r0
   14dd0:	cmp	r3, #1
   14dd4:	ble	14de8 <_start@@Base+0x23ec>
   14dd8:	ldrb	r3, [r1, #1]
   14ddc:	cmp	r3, #32
   14de0:	bhi	14df8 <_start@@Base+0x23fc>
   14de4:	beq	14e28 <_start@@Base+0x242c>
   14de8:	mov	r1, r0
   14dec:	mov	r2, r4
   14df0:	mov	r0, r5
   14df4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14df8:	cmp	r4, r0
   14dfc:	beq	14e6c <_start@@Base+0x2470>
   14e00:	ldrb	r3, [r0]
   14e04:	cmp	r3, #93	; 0x5d
   14e08:	beq	14e50 <_start@@Base+0x2454>
   14e0c:	mov	r3, #1
   14e10:	str	r3, [r6]
   14e14:	pop	{r4, r5, r6, pc}
   14e18:	mov	r3, #0
   14e1c:	mov	r0, r4
   14e20:	str	r3, [r6]
   14e24:	pop	{r4, r5, r6, pc}
   14e28:	ldrb	r3, [r1, #2]
   14e2c:	cmp	r3, #32
   14e30:	addhi	r0, r1, #2
   14e34:	bls	14de8 <_start@@Base+0x23ec>
   14e38:	b	14df8 <_start@@Base+0x23fc>
   14e3c:	ldrb	r3, [r1, #2]
   14e40:	cmp	r3, #32
   14e44:	bls	14da0 <_start@@Base+0x23a4>
   14e48:	add	r0, r1, #2
   14e4c:	pop	{r4, r5, r6, pc}
   14e50:	mov	r3, #0
   14e54:	mov	r2, r4
   14e58:	add	r1, r0, #1
   14e5c:	str	r3, [r6]
   14e60:	mov	r0, r5
   14e64:	pop	{r4, r5, r6, lr}
   14e68:	b	12fa4 <_start@@Base+0x5a8>
   14e6c:	mov	r3, #0
   14e70:	str	r3, [r6]
   14e74:	mov	r0, r5
   14e78:	mov	r2, r4
   14e7c:	mov	r1, r4
   14e80:	mov	r3, #9
   14e84:	pop	{r4, r5, r6, lr}
   14e88:	b	27994 <flatcc_json_parser_set_error@@Base>
   14e8c:	push	{r4, r5, r6, lr}
   14e90:	mov	r4, r2
   14e94:	sub	r2, r2, r1
   14e98:	cmp	r2, #1
   14e9c:	mov	r5, r0
   14ea0:	mov	r6, r3
   14ea4:	ble	14eb8 <_start@@Base+0x24bc>
   14ea8:	ldrb	r3, [r1]
   14eac:	cmp	r3, #32
   14eb0:	bhi	14ec8 <_start@@Base+0x24cc>
   14eb4:	beq	14f38 <_start@@Base+0x253c>
   14eb8:	mov	r2, r4
   14ebc:	mov	r0, r5
   14ec0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14ec4:	mov	r1, r0
   14ec8:	cmp	r4, r1
   14ecc:	beq	14f9c <_start@@Base+0x25a0>
   14ed0:	ldrb	r3, [r1]
   14ed4:	cmp	r3, #44	; 0x2c
   14ed8:	beq	14f4c <_start@@Base+0x2550>
   14edc:	mov	r3, #0
   14ee0:	str	r3, [r6]
   14ee4:	ldrb	r3, [r1]
   14ee8:	cmp	r3, #125	; 0x7d
   14eec:	beq	14f04 <_start@@Base+0x2508>
   14ef0:	mov	r2, r4
   14ef4:	mov	r0, r5
   14ef8:	mov	r3, #10
   14efc:	pop	{r4, r5, r6, lr}
   14f00:	b	27994 <flatcc_json_parser_set_error@@Base>
   14f04:	add	r0, r1, #1
   14f08:	sub	r3, r4, r0
   14f0c:	cmp	r3, #1
   14f10:	ble	14f24 <_start@@Base+0x2528>
   14f14:	ldrb	r3, [r1, #1]
   14f18:	cmp	r3, #32
   14f1c:	pophi	{r4, r5, r6, pc}
   14f20:	beq	14fc0 <_start@@Base+0x25c4>
   14f24:	mov	r2, r4
   14f28:	mov	r1, r0
   14f2c:	mov	r0, r5
   14f30:	pop	{r4, r5, r6, lr}
   14f34:	b	27a88 <flatcc_json_parser_space_ext@@Base>
   14f38:	ldrb	r3, [r1, #1]
   14f3c:	cmp	r3, #32
   14f40:	addhi	r1, r1, #1
   14f44:	bls	14eb8 <_start@@Base+0x24bc>
   14f48:	b	14ec8 <_start@@Base+0x24cc>
   14f4c:	add	r0, r1, #1
   14f50:	sub	r3, r4, r0
   14f54:	cmp	r3, #1
   14f58:	ble	14f6c <_start@@Base+0x2570>
   14f5c:	ldrb	r3, [r1, #1]
   14f60:	cmp	r3, #32
   14f64:	bhi	14f7c <_start@@Base+0x2580>
   14f68:	beq	14fac <_start@@Base+0x25b0>
   14f6c:	mov	r1, r0
   14f70:	mov	r2, r4
   14f74:	mov	r0, r5
   14f78:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   14f7c:	cmp	r4, r0
   14f80:	beq	14ff0 <_start@@Base+0x25f4>
   14f84:	ldrb	r3, [r0]
   14f88:	cmp	r3, #125	; 0x7d
   14f8c:	beq	14fd4 <_start@@Base+0x25d8>
   14f90:	mov	r3, #1
   14f94:	str	r3, [r6]
   14f98:	pop	{r4, r5, r6, pc}
   14f9c:	mov	r3, #0
   14fa0:	mov	r0, r4
   14fa4:	str	r3, [r6]
   14fa8:	pop	{r4, r5, r6, pc}
   14fac:	ldrb	r3, [r1, #2]
   14fb0:	cmp	r3, #32
   14fb4:	addhi	r0, r1, #2
   14fb8:	bls	14f6c <_start@@Base+0x2570>
   14fbc:	b	14f7c <_start@@Base+0x2580>
   14fc0:	ldrb	r3, [r1, #2]
   14fc4:	cmp	r3, #32
   14fc8:	bls	14f24 <_start@@Base+0x2528>
   14fcc:	add	r0, r1, #2
   14fd0:	pop	{r4, r5, r6, pc}
   14fd4:	mov	r3, #0
   14fd8:	mov	r2, r4
   14fdc:	add	r1, r0, #1
   14fe0:	str	r3, [r6]
   14fe4:	mov	r0, r5
   14fe8:	pop	{r4, r5, r6, lr}
   14fec:	b	12fa4 <_start@@Base+0x5a8>
   14ff0:	mov	r3, #0
   14ff4:	str	r3, [r6]
   14ff8:	mov	r0, r5
   14ffc:	mov	r2, r4
   15000:	mov	r1, r4
   15004:	mov	r3, #10
   15008:	pop	{r4, r5, r6, lr}
   1500c:	b	27994 <flatcc_json_parser_set_error@@Base>
   15010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15014:	sub	sp, sp, #100	; 0x64
   15018:	cmp	r1, r2
   1501c:	mov	r5, r2
   15020:	mov	r6, r0
   15024:	str	r3, [sp, #64]	; 0x40
   15028:	beq	15038 <_start@@Base+0x263c>
   1502c:	ldrb	r3, [r1]
   15030:	cmp	r3, #123	; 0x7b
   15034:	beq	15058 <_start@@Base+0x265c>
   15038:	mov	r2, r5
   1503c:	mov	r0, r6
   15040:	mov	r3, #21
   15044:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15048:	mov	r5, r0
   1504c:	mov	r0, r5
   15050:	add	sp, sp, #100	; 0x64
   15054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15058:	add	r4, r1, #1
   1505c:	sub	r3, r2, r4
   15060:	cmp	r3, #1
   15064:	ble	15078 <_start@@Base+0x267c>
   15068:	ldrb	r3, [r1, #1]
   1506c:	cmp	r3, #32
   15070:	bhi	1508c <_start@@Base+0x2690>
   15074:	beq	15850 <_start@@Base+0x2e54>
   15078:	mov	r1, r4
   1507c:	mov	r2, r5
   15080:	mov	r0, r6
   15084:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   15088:	mov	r4, r0
   1508c:	cmp	r5, r4
   15090:	beq	150a0 <_start@@Base+0x26a4>
   15094:	ldrb	r3, [r4]
   15098:	cmp	r3, #125	; 0x7d
   1509c:	beq	15864 <_start@@Base+0x2e68>
   150a0:	ldr	r3, [pc, #2004]	; 1587c <_start@@Base+0x2e80>
   150a4:	ldr	r2, [pc, #2004]	; 15880 <_start@@Base+0x2e84>
   150a8:	add	r3, pc, r3
   150ac:	mov	r7, #0
   150b0:	add	r2, pc, r2
   150b4:	add	r3, r3, #12
   150b8:	str	r2, [sp, #76]	; 0x4c
   150bc:	str	r3, [sp, #72]	; 0x48
   150c0:	strd	r8, [sp, #32]
   150c4:	cmp	r5, r4
   150c8:	beq	15378 <_start@@Base+0x297c>
   150cc:	ldrb	r3, [r4]
   150d0:	cmp	r3, #34	; 0x22
   150d4:	beq	15538 <_start@@Base+0x2b3c>
   150d8:	cmp	r3, #46	; 0x2e
   150dc:	movne	r3, #1
   150e0:	subne	ip, r5, r4
   150e4:	strne	r3, [r6, #12]
   150e8:	beq	15674 <_start@@Base+0x2c78>
   150ec:	cmp	ip, #8
   150f0:	bls	1538c <_start@@Base+0x2990>
   150f4:	mov	r9, #0
   150f8:	ldrb	r2, [r4, #6]
   150fc:	lsr	r1, r2, #24
   15100:	lsl	r3, r2, #8
   15104:	str	r1, [sp, #60]	; 0x3c
   15108:	str	r3, [sp, #56]	; 0x38
   1510c:	ldrd	r2, [sp, #56]	; 0x38
   15110:	orr	r3, r3, r9
   15114:	mov	r9, r3
   15118:	ldrb	r2, [r4, #5]
   1511c:	lsr	r1, r2, #16
   15120:	lsl	r3, r2, #16
   15124:	str	r1, [sp, #52]	; 0x34
   15128:	str	r3, [sp, #48]	; 0x30
   1512c:	ldrd	r2, [sp, #48]	; 0x30
   15130:	orr	r3, r3, r9
   15134:	mov	r9, r3
   15138:	ldrb	r2, [r4, #4]
   1513c:	lsr	r1, r2, #8
   15140:	lsl	r3, r2, #24
   15144:	str	r1, [sp, #28]
   15148:	str	r3, [sp, #24]
   1514c:	ldrd	r2, [sp, #24]
   15150:	orr	r3, r3, r9
   15154:	mov	r9, r3
   15158:	ldrb	r3, [r4, #3]
   1515c:	str	r3, [sp, #44]	; 0x2c
   15160:	mov	r3, #0
   15164:	str	r3, [sp, #40]	; 0x28
   15168:	ldrd	r2, [sp, #40]	; 0x28
   1516c:	orr	r3, r3, r9
   15170:	mov	r9, r3
   15174:	ldrb	r2, [r4, #2]
   15178:	lsl	r3, r2, #8
   1517c:	str	r3, [sp, #20]
   15180:	mov	r3, #0
   15184:	str	r3, [sp, #16]
   15188:	ldrd	r2, [sp, #16]
   1518c:	orr	r3, r3, r9
   15190:	mov	r9, r3
   15194:	ldrb	r2, [r4]
   15198:	ldrb	r0, [r4, #1]
   1519c:	mov	sl, #0
   151a0:	str	sl, [sp, #8]
   151a4:	lsl	r3, r2, #24
   151a8:	str	r3, [sp, #12]
   151ac:	ldrd	r2, [sp, #8]
   151b0:	lsl	fp, r0, #16
   151b4:	orr	r9, r9, fp
   151b8:	orr	r3, r3, r9
   151bc:	and	r3, r3, #-16777216	; 0xff000000
   151c0:	mov	r2, #0
   151c4:	cmp	r3, #1644167168	; 0x62000000
   151c8:	cmpeq	r2, #0
   151cc:	strd	r2, [sp, #32]
   151d0:	beq	15404 <_start@@Base+0x2a08>
   151d4:	ldrd	r2, [sp, #32]
   151d8:	cmp	r3, #1627389952	; 0x61000000
   151dc:	cmpeq	r2, #0
   151e0:	bne	15378 <_start@@Base+0x297c>
   151e4:	cmp	ip, #1
   151e8:	ble	15378 <_start@@Base+0x297c>
   151ec:	ldr	r3, [r6, #12]
   151f0:	cmp	r3, #0
   151f4:	ldrb	r3, [r4, #1]
   151f8:	beq	155d8 <_start@@Base+0x2bdc>
   151fc:	cmp	r3, #58	; 0x3a
   15200:	cmpne	r3, #32
   15204:	movls	r3, #0
   15208:	movhi	r3, #1
   1520c:	strls	r3, [r6, #12]
   15210:	addls	r1, r4, #1
   15214:	bhi	15378 <_start@@Base+0x297c>
   15218:	sub	r3, r5, r1
   1521c:	cmp	r3, #1
   15220:	ble	15234 <_start@@Base+0x2838>
   15224:	ldrb	r3, [r1]
   15228:	cmp	r3, #32
   1522c:	bhi	15244 <_start@@Base+0x2848>
   15230:	beq	15780 <_start@@Base+0x2d84>
   15234:	mov	r2, r5
   15238:	mov	r0, r6
   1523c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   15240:	mov	r1, r0
   15244:	cmp	r5, r1
   15248:	beq	15258 <_start@@Base+0x285c>
   1524c:	ldrb	r3, [r1]
   15250:	cmp	r3, #58	; 0x3a
   15254:	beq	157a8 <_start@@Base+0x2dac>
   15258:	mov	r3, #4
   1525c:	mov	r2, r5
   15260:	mov	r0, r6
   15264:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15268:	str	r0, [sp, #68]	; 0x44
   1526c:	ldr	r3, [sp, #68]	; 0x44
   15270:	cmp	r3, r4
   15274:	beq	15378 <_start@@Base+0x297c>
   15278:	mov	r4, r3
   1527c:	cmp	r5, r3
   15280:	mov	r3, #0
   15284:	strh	r7, [sp, #82]	; 0x52
   15288:	str	r3, [sp, #88]	; 0x58
   1528c:	str	r3, [sp, #92]	; 0x5c
   15290:	str	r7, [sp, #84]	; 0x54
   15294:	beq	156d8 <_start@@Base+0x2cdc>
   15298:	add	r3, sp, #88	; 0x58
   1529c:	str	r3, [sp]
   152a0:	mov	r2, r5
   152a4:	add	r3, sp, #84	; 0x54
   152a8:	mov	r1, r4
   152ac:	mov	r0, r6
   152b0:	bl	296fc <flatcc_json_parser_integer@@Base>
   152b4:	cmp	r4, r0
   152b8:	beq	156d8 <_start@@Base+0x2cdc>
   152bc:	ldr	r1, [sp, #84]	; 0x54
   152c0:	ldrd	r2, [sp, #88]	; 0x58
   152c4:	cmp	r1, #0
   152c8:	beq	155e8 <_start@@Base+0x2bec>
   152cc:	cmp	r3, #0
   152d0:	cmpeq	r2, #32768	; 0x8000
   152d4:	rsbls	r2, r2, #0
   152d8:	sxthls	r2, r2
   152dc:	bhi	156a8 <_start@@Base+0x2cac>
   152e0:	ldr	r3, [sp, #64]	; 0x40
   152e4:	strh	r2, [r3]
   152e8:	sub	r3, r5, r0
   152ec:	cmp	r3, #1
   152f0:	ble	15304 <_start@@Base+0x2908>
   152f4:	ldrb	r3, [r0]
   152f8:	cmp	r3, #32
   152fc:	bhi	15314 <_start@@Base+0x2918>
   15300:	beq	15548 <_start@@Base+0x2b4c>
   15304:	mov	r1, r0
   15308:	mov	r2, r5
   1530c:	mov	r0, r6
   15310:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   15314:	cmp	r5, r0
   15318:	beq	1504c <_start@@Base+0x2650>
   1531c:	ldrb	r3, [r0]
   15320:	cmp	r3, #44	; 0x2c
   15324:	beq	1555c <_start@@Base+0x2b60>
   15328:	cmp	r3, #125	; 0x7d
   1532c:	beq	15504 <_start@@Base+0x2b08>
   15330:	mov	r2, r5
   15334:	mov	r1, r0
   15338:	mov	r3, #10
   1533c:	mov	r0, r6
   15340:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15344:	mov	r5, r0
   15348:	mov	r0, r5
   1534c:	add	sp, sp, #100	; 0x64
   15350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15354:	ldrb	r2, [r4]
   15358:	lsl	r3, r2, #24
   1535c:	str	r3, [sp, #36]	; 0x24
   15360:	mov	r3, #0
   15364:	str	r3, [sp, #32]
   15368:	ldrd	r2, [sp, #32]
   1536c:	cmp	r3, #1644167168	; 0x62000000
   15370:	cmpeq	r2, #0
   15374:	bne	151d4 <_start@@Base+0x27d8>
   15378:	mov	r1, r4
   1537c:	mov	r2, r5
   15380:	mov	r0, r6
   15384:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   15388:	b	152e8 <_start@@Base+0x28ec>
   1538c:	sub	r3, ip, #1
   15390:	cmp	r3, #7
   15394:	addls	pc, pc, r3, lsl #2
   15398:	b	15378 <_start@@Base+0x297c>
   1539c:	b	15354 <_start@@Base+0x2958>
   153a0:	b	153f8 <_start@@Base+0x29fc>
   153a4:	b	153ec <_start@@Base+0x29f0>
   153a8:	b	153e0 <_start@@Base+0x29e4>
   153ac:	b	153d4 <_start@@Base+0x29d8>
   153b0:	b	153c8 <_start@@Base+0x29cc>
   153b4:	b	153bc <_start@@Base+0x29c0>
   153b8:	b	150f4 <_start@@Base+0x26f8>
   153bc:	mov	r8, #0
   153c0:	mov	r9, r8
   153c4:	b	150f8 <_start@@Base+0x26fc>
   153c8:	mov	r8, #0
   153cc:	mov	r9, r8
   153d0:	b	15118 <_start@@Base+0x271c>
   153d4:	mov	r8, #0
   153d8:	mov	r9, r8
   153dc:	b	15138 <_start@@Base+0x273c>
   153e0:	mov	r8, #0
   153e4:	mov	r9, r8
   153e8:	b	15158 <_start@@Base+0x275c>
   153ec:	mov	r8, #0
   153f0:	mov	r9, r8
   153f4:	b	15174 <_start@@Base+0x2778>
   153f8:	mov	r8, #0
   153fc:	mov	r9, r8
   15400:	b	15194 <_start@@Base+0x2798>
   15404:	cmp	ip, #1
   15408:	ble	15378 <_start@@Base+0x297c>
   1540c:	ldr	r3, [r6, #12]
   15410:	cmp	r3, sl
   15414:	ldrb	r3, [r4, #1]
   15418:	beq	15630 <_start@@Base+0x2c34>
   1541c:	cmp	r3, #58	; 0x3a
   15420:	cmpne	r3, #32
   15424:	movls	r3, #0
   15428:	movhi	r3, #1
   1542c:	strls	r3, [r6, #12]
   15430:	addls	r1, r4, #1
   15434:	bhi	15378 <_start@@Base+0x297c>
   15438:	sub	r3, r5, r1
   1543c:	cmp	r3, #1
   15440:	ble	15454 <_start@@Base+0x2a58>
   15444:	ldrb	r3, [r1]
   15448:	cmp	r3, #32
   1544c:	bhi	15464 <_start@@Base+0x2a68>
   15450:	beq	15794 <_start@@Base+0x2d98>
   15454:	mov	r2, r5
   15458:	mov	r0, r6
   1545c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   15460:	mov	r1, r0
   15464:	cmp	r5, r1
   15468:	beq	15478 <_start@@Base+0x2a7c>
   1546c:	ldrb	r3, [r1]
   15470:	cmp	r3, #58	; 0x3a
   15474:	beq	157e4 <_start@@Base+0x2de8>
   15478:	mov	r3, #4
   1547c:	mov	r2, r5
   15480:	mov	r0, r6
   15484:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15488:	mov	r8, r0
   1548c:	cmp	r8, r4
   15490:	beq	15378 <_start@@Base+0x297c>
   15494:	mov	r3, #0
   15498:	cmp	r5, r8
   1549c:	strb	r7, [sp, #82]	; 0x52
   154a0:	str	r3, [sp, #88]	; 0x58
   154a4:	str	r3, [sp, #92]	; 0x5c
   154a8:	str	r7, [sp, #84]	; 0x54
   154ac:	beq	15754 <_start@@Base+0x2d58>
   154b0:	add	r3, sp, #88	; 0x58
   154b4:	str	r3, [sp]
   154b8:	mov	r2, r5
   154bc:	add	r3, sp, #84	; 0x54
   154c0:	mov	r1, r8
   154c4:	mov	r0, r6
   154c8:	bl	296fc <flatcc_json_parser_integer@@Base>
   154cc:	cmp	r8, r0
   154d0:	beq	15754 <_start@@Base+0x2d58>
   154d4:	ldr	r1, [sp, #84]	; 0x54
   154d8:	ldrd	r2, [sp, #88]	; 0x58
   154dc:	cmp	r1, #0
   154e0:	beq	15640 <_start@@Base+0x2c44>
   154e4:	cmp	r3, #0
   154e8:	cmpeq	r2, #128	; 0x80
   154ec:	rsbls	r2, r2, #0
   154f0:	sxtbls	r2, r2
   154f4:	bhi	156c0 <_start@@Base+0x2cc4>
   154f8:	ldr	r3, [sp, #64]	; 0x40
   154fc:	strb	r2, [r3, #2]
   15500:	b	152e8 <_start@@Base+0x28ec>
   15504:	add	r1, r0, #1
   15508:	sub	r3, r5, r1
   1550c:	cmp	r3, #1
   15510:	ble	15524 <_start@@Base+0x2b28>
   15514:	ldrb	r3, [r0, #1]
   15518:	cmp	r3, #32
   1551c:	bhi	15628 <_start@@Base+0x2c2c>
   15520:	beq	15694 <_start@@Base+0x2c98>
   15524:	mov	r2, r5
   15528:	mov	r0, r6
   1552c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   15530:	mov	r5, r0
   15534:	b	1504c <_start@@Base+0x2650>
   15538:	add	r4, r4, #1
   1553c:	str	r7, [r6, #12]
   15540:	sub	ip, r5, r4
   15544:	b	150ec <_start@@Base+0x26f0>
   15548:	ldrb	r3, [r0, #1]
   1554c:	cmp	r3, #32
   15550:	addhi	r0, r0, #1
   15554:	bls	15304 <_start@@Base+0x2908>
   15558:	b	15314 <_start@@Base+0x2918>
   1555c:	add	r4, r0, #1
   15560:	sub	r3, r5, r4
   15564:	cmp	r3, #1
   15568:	ble	1557c <_start@@Base+0x2b80>
   1556c:	ldrb	r3, [r0, #1]
   15570:	cmp	r3, #32
   15574:	bhi	15590 <_start@@Base+0x2b94>
   15578:	beq	15720 <_start@@Base+0x2d24>
   1557c:	mov	r1, r4
   15580:	mov	r2, r5
   15584:	mov	r0, r6
   15588:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1558c:	mov	r4, r0
   15590:	cmp	r5, r4
   15594:	beq	15738 <_start@@Base+0x2d3c>
   15598:	ldrb	r3, [r4]
   1559c:	cmp	r3, #125	; 0x7d
   155a0:	bne	150c4 <_start@@Base+0x26c8>
   155a4:	add	r1, r4, #1
   155a8:	sub	r3, r5, r1
   155ac:	cmp	r3, #1
   155b0:	ble	15524 <_start@@Base+0x2b28>
   155b4:	ldrb	r3, [r4, #1]
   155b8:	cmp	r3, #32
   155bc:	bhi	15628 <_start@@Base+0x2c2c>
   155c0:	bne	15524 <_start@@Base+0x2b28>
   155c4:	ldrb	r3, [r4, #2]
   155c8:	cmp	r3, #32
   155cc:	addhi	r5, r4, #2
   155d0:	bls	15524 <_start@@Base+0x2b28>
   155d4:	b	1504c <_start@@Base+0x2650>
   155d8:	cmp	r3, #34	; 0x22
   155dc:	bne	15378 <_start@@Base+0x297c>
   155e0:	add	r1, r4, #2
   155e4:	b	15218 <_start@@Base+0x281c>
   155e8:	ldr	r8, [pc, #660]	; 15884 <_start@@Base+0x2e88>
   155ec:	mov	r9, #0
   155f0:	cmp	r3, r9
   155f4:	cmpeq	r2, r8
   155f8:	sxthls	r2, r2
   155fc:	bls	152e0 <_start@@Base+0x28e4>
   15600:	mov	r1, r0
   15604:	mov	r3, #7
   15608:	mov	r2, r5
   1560c:	mov	r0, r6
   15610:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15614:	ldr	r3, [sp, #68]	; 0x44
   15618:	cmp	r3, r0
   1561c:	beq	156d8 <_start@@Base+0x2cdc>
   15620:	ldrsh	r2, [sp, #82]	; 0x52
   15624:	b	152e0 <_start@@Base+0x28e4>
   15628:	mov	r5, r1
   1562c:	b	1504c <_start@@Base+0x2650>
   15630:	cmp	r3, #34	; 0x22
   15634:	bne	15378 <_start@@Base+0x297c>
   15638:	add	r1, r4, #2
   1563c:	b	15438 <_start@@Base+0x2a3c>
   15640:	cmp	r3, #0
   15644:	cmpeq	r2, #127	; 0x7f
   15648:	sxtbls	r2, r2
   1564c:	bls	154f8 <_start@@Base+0x2afc>
   15650:	mov	r1, r0
   15654:	mov	r3, #7
   15658:	mov	r2, r5
   1565c:	mov	r0, r6
   15660:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15664:	cmp	r8, r0
   15668:	beq	15754 <_start@@Base+0x2d58>
   1566c:	ldrsb	r2, [sp, #82]	; 0x52
   15670:	b	154f8 <_start@@Base+0x2afc>
   15674:	mov	r1, r4
   15678:	mov	r3, #5
   1567c:	mov	r2, r5
   15680:	mov	r0, r6
   15684:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15688:	mov	r4, r0
   1568c:	sub	ip, r5, r0
   15690:	b	150ec <_start@@Base+0x26f0>
   15694:	ldrb	r3, [r0, #2]
   15698:	cmp	r3, #32
   1569c:	addhi	r5, r0, #2
   156a0:	bls	15524 <_start@@Base+0x2b28>
   156a4:	b	1504c <_start@@Base+0x2650>
   156a8:	mov	r1, r0
   156ac:	mov	r3, #8
   156b0:	mov	r2, r5
   156b4:	mov	r0, r6
   156b8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   156bc:	b	15614 <_start@@Base+0x2c18>
   156c0:	mov	r1, r0
   156c4:	mov	r3, #8
   156c8:	mov	r2, r5
   156cc:	mov	r0, r6
   156d0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   156d4:	b	15664 <_start@@Base+0x2c68>
   156d8:	ldr	r4, [sp, #68]	; 0x44
   156dc:	add	r3, sp, #82	; 0x52
   156e0:	str	r3, [sp]
   156e4:	mov	r2, r5
   156e8:	ldr	r3, [sp, #72]	; 0x48
   156ec:	mov	r1, r4
   156f0:	mov	r0, r6
   156f4:	bl	14674 <_start@@Base+0x1c78>
   156f8:	cmp	r5, r0
   156fc:	cmpne	r0, r4
   15700:	bne	15620 <_start@@Base+0x2c24>
   15704:	mov	r2, r5
   15708:	mov	r1, r0
   1570c:	mov	r3, #33	; 0x21
   15710:	mov	r0, r6
   15714:	bl	27994 <flatcc_json_parser_set_error@@Base>
   15718:	mov	r5, r0
   1571c:	b	1504c <_start@@Base+0x2650>
   15720:	ldrb	r3, [r0, #2]
   15724:	cmp	r3, #32
   15728:	addhi	r4, r0, #2
   1572c:	bls	1557c <_start@@Base+0x2b80>
   15730:	cmp	r5, r4
   15734:	bne	15598 <_start@@Base+0x2b9c>
   15738:	mov	r2, r5
   1573c:	mov	r1, r5
   15740:	mov	r0, r6
   15744:	mov	r3, #10
   15748:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1574c:	mov	r5, r0
   15750:	b	1504c <_start@@Base+0x2650>
   15754:	add	r3, sp, #82	; 0x52
   15758:	str	r3, [sp]
   1575c:	mov	r2, r5
   15760:	ldr	r3, [sp, #76]	; 0x4c
   15764:	mov	r1, r8
   15768:	mov	r0, r6
   1576c:	bl	141f4 <_start@@Base+0x17f8>
   15770:	cmp	r5, r0
   15774:	cmpne	r0, r8
   15778:	bne	1566c <_start@@Base+0x2c70>
   1577c:	b	15704 <_start@@Base+0x2d08>
   15780:	ldrb	r3, [r1, #1]
   15784:	cmp	r3, #32
   15788:	addhi	r1, r1, #1
   1578c:	bls	15234 <_start@@Base+0x2838>
   15790:	b	15244 <_start@@Base+0x2848>
   15794:	ldrb	r3, [r1, #1]
   15798:	cmp	r3, #32
   1579c:	addhi	r1, r1, #1
   157a0:	bls	15454 <_start@@Base+0x2a58>
   157a4:	b	15464 <_start@@Base+0x2a68>
   157a8:	add	r3, r1, #1
   157ac:	str	r3, [sp, #68]	; 0x44
   157b0:	sub	r3, r5, r3
   157b4:	cmp	r3, #1
   157b8:	ble	157cc <_start@@Base+0x2dd0>
   157bc:	ldrb	r3, [r1, #1]
   157c0:	cmp	r3, #32
   157c4:	bhi	1526c <_start@@Base+0x2870>
   157c8:	beq	15820 <_start@@Base+0x2e24>
   157cc:	ldr	r1, [sp, #68]	; 0x44
   157d0:	mov	r2, r5
   157d4:	mov	r0, r6
   157d8:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   157dc:	str	r0, [sp, #68]	; 0x44
   157e0:	b	1526c <_start@@Base+0x2870>
   157e4:	add	r3, r1, #1
   157e8:	mov	r8, r3
   157ec:	sub	r3, r5, r3
   157f0:	cmp	r3, #1
   157f4:	ble	15808 <_start@@Base+0x2e0c>
   157f8:	ldrb	r3, [r1, #1]
   157fc:	cmp	r3, #32
   15800:	bhi	1548c <_start@@Base+0x2a90>
   15804:	beq	15838 <_start@@Base+0x2e3c>
   15808:	mov	r1, r8
   1580c:	mov	r2, r5
   15810:	mov	r0, r6
   15814:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   15818:	mov	r8, r0
   1581c:	b	1548c <_start@@Base+0x2a90>
   15820:	ldrb	r3, [r1, #2]
   15824:	cmp	r3, #32
   15828:	addhi	r3, r1, #2
   1582c:	strhi	r3, [sp, #68]	; 0x44
   15830:	bls	157cc <_start@@Base+0x2dd0>
   15834:	b	1526c <_start@@Base+0x2870>
   15838:	ldrb	r3, [r1, #2]
   1583c:	cmp	r3, #32
   15840:	addhi	r3, r1, #2
   15844:	movhi	r8, r3
   15848:	bls	15808 <_start@@Base+0x2e0c>
   1584c:	b	1548c <_start@@Base+0x2a90>
   15850:	ldrb	r3, [r1, #2]
   15854:	cmp	r3, #32
   15858:	addhi	r4, r1, #2
   1585c:	bls	15078 <_start@@Base+0x267c>
   15860:	b	1508c <_start@@Base+0x2690>
   15864:	mov	r2, r5
   15868:	add	r1, r4, #1
   1586c:	mov	r0, r6
   15870:	bl	12fa4 <_start@@Base+0x5a8>
   15874:	mov	r5, r0
   15878:	b	1504c <_start@@Base+0x2650>
   1587c:	andeq	r7, r2, r0, ror #31
   15880:	ldrdeq	r7, [r2], -r8
   15884:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   15888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1588c:	mov	r5, r2
   15890:	sub	r2, r2, r1
   15894:	cmp	r2, #8
   15898:	sub	sp, sp, #8
   1589c:	mov	r4, r1
   158a0:	mov	r8, r0
   158a4:	mov	r9, r3
   158a8:	bls	15974 <_start@@Base+0x2f78>
   158ac:	ldrb	r6, [r4, #7]
   158b0:	mov	r7, #0
   158b4:	ldrb	r2, [r4, #6]
   158b8:	lsr	r1, r2, #24
   158bc:	lsl	r0, r2, #8
   158c0:	orr	r6, r6, r0
   158c4:	orr	r7, r7, r1
   158c8:	ldrb	r2, [r4, #5]
   158cc:	lsr	r1, r2, #16
   158d0:	lsl	r0, r2, #16
   158d4:	orr	r0, r0, r6
   158d8:	orr	r1, r1, r7
   158dc:	ldrb	r2, [r4, #4]
   158e0:	lsr	r7, r2, #8
   158e4:	lsl	r6, r2, #24
   158e8:	orr	r6, r6, r0
   158ec:	orr	r7, r7, r1
   158f0:	ldrb	r1, [r4, #3]
   158f4:	mov	r0, #0
   158f8:	orr	r6, r6, r0
   158fc:	orr	r7, r7, r1
   15900:	ldrb	r2, [r4, #2]
   15904:	mov	r0, #0
   15908:	orr	r6, r6, r0
   1590c:	lsl	r1, r2, #8
   15910:	orr	r7, r7, r1
   15914:	ldrb	r2, [r4, #1]
   15918:	mov	r0, #0
   1591c:	orr	r0, r0, r6
   15920:	lsl	r1, r2, #16
   15924:	orr	r1, r1, r7
   15928:	ldrb	r2, [r4]
   1592c:	mov	r6, #0
   15930:	orr	r0, r0, r6
   15934:	lsl	r7, r2, #24
   15938:	add	r3, pc, #376	; 0x178
   1593c:	ldrd	r2, [r3]
   15940:	orr	r1, r1, r7
   15944:	cmp	r1, r3
   15948:	cmpeq	r0, r2
   1594c:	beq	159a4 <_start@@Base+0x2fa8>
   15950:	add	r3, pc, #360	; 0x168
   15954:	ldrd	r2, [r3]
   15958:	mov	r0, #0
   1595c:	cmp	r1, r3
   15960:	cmpeq	r0, r2
   15964:	beq	15a24 <_start@@Base+0x3028>
   15968:	mov	r0, r4
   1596c:	add	sp, sp, #8
   15970:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15974:	sub	r2, r2, #1
   15978:	cmp	r2, #7
   1597c:	addls	pc, pc, r2, lsl #2
   15980:	b	15968 <_start@@Base+0x2f6c>
   15984:	b	15a64 <_start@@Base+0x3068>
   15988:	b	15a70 <_start@@Base+0x3074>
   1598c:	b	15a7c <_start@@Base+0x3080>
   15990:	b	15a88 <_start@@Base+0x308c>
   15994:	b	15a94 <_start@@Base+0x3098>
   15998:	b	15aa0 <_start@@Base+0x30a4>
   1599c:	b	15aac <_start@@Base+0x30b0>
   159a0:	b	158ac <_start@@Base+0x2eb0>
   159a4:	mov	r1, r5
   159a8:	add	r0, r4, #8
   159ac:	bl	12b28 <_start@@Base+0x12c>
   159b0:	add	r3, pc, #272	; 0x110
   159b4:	ldrd	r2, [r3]
   159b8:	cmp	r1, r3
   159bc:	cmpeq	r0, r2
   159c0:	bne	15968 <_start@@Base+0x2f6c>
   159c4:	add	sl, r4, #16
   159c8:	mov	r0, sl
   159cc:	mov	r1, r5
   159d0:	bl	12b28 <_start@@Base+0x12c>
   159d4:	mov	r0, #0
   159d8:	and	r1, r1, #-16777216	; 0xff000000
   159dc:	cmp	r1, #1694498816	; 0x65000000
   159e0:	cmpeq	r0, #0
   159e4:	bne	15968 <_start@@Base+0x2f6c>
   159e8:	ldr	r3, [sp, #44]	; 0x2c
   159ec:	mov	r2, r5
   159f0:	str	r3, [sp]
   159f4:	mov	r0, r8
   159f8:	mov	r3, #1
   159fc:	mov	r1, sl
   15a00:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15a04:	cmp	sl, r0
   15a08:	beq	15968 <_start@@Base+0x2f6c>
   15a0c:	ldr	r1, [sp, #40]	; 0x28
   15a10:	mov	r2, #1
   15a14:	mov	r3, #0
   15a18:	strd	r2, [r1]
   15a1c:	str	r6, [r9]
   15a20:	b	1596c <_start@@Base+0x2f70>
   15a24:	ldr	r3, [sp, #44]	; 0x2c
   15a28:	mov	r2, r5
   15a2c:	str	r3, [sp]
   15a30:	mov	r0, r8
   15a34:	mov	r3, #4
   15a38:	mov	r1, r4
   15a3c:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15a40:	cmp	r4, r0
   15a44:	beq	1596c <_start@@Base+0x2f70>
   15a48:	ldr	r1, [sp, #40]	; 0x28
   15a4c:	mov	r2, #0
   15a50:	mov	r3, #0
   15a54:	strd	r2, [r1]
   15a58:	str	r6, [r9]
   15a5c:	add	sp, sp, #8
   15a60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a64:	mov	r0, #0
   15a68:	mov	r1, #0
   15a6c:	b	15928 <_start@@Base+0x2f2c>
   15a70:	mov	r6, #0
   15a74:	mov	r7, #0
   15a78:	b	15914 <_start@@Base+0x2f18>
   15a7c:	mov	r6, #0
   15a80:	mov	r7, #0
   15a84:	b	15900 <_start@@Base+0x2f04>
   15a88:	mov	r6, #0
   15a8c:	mov	r7, #0
   15a90:	b	158f0 <_start@@Base+0x2ef4>
   15a94:	mov	r0, #0
   15a98:	mov	r1, #0
   15a9c:	b	158dc <_start@@Base+0x2ee0>
   15aa0:	mov	r6, #0
   15aa4:	mov	r7, #0
   15aa8:	b	158c8 <_start@@Base+0x2ecc>
   15aac:	mov	r6, #0
   15ab0:	mov	r7, #0
   15ab4:	b	158b4 <_start@@Base+0x2eb8>
   15ab8:	rsbvc	r6, r5, #116, 28	; 0x740
   15abc:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   15ac0:	andeq	r0, r0, r0
   15ac4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   15ac8:	cmnvc	r0, #-1073741800	; 0xc0000018
   15acc:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   15ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ad4:	mov	r6, r1
   15ad8:	sub	r1, r2, r1
   15adc:	cmp	r1, #8
   15ae0:	sub	sp, sp, #12
   15ae4:	mov	r7, r3
   15ae8:	bls	15bc8 <_start@@Base+0x31cc>
   15aec:	ldrb	sl, [r6, #7]
   15af0:	mov	fp, #0
   15af4:	ldrb	r4, [r6, #6]
   15af8:	lsr	r9, r4, #24
   15afc:	lsl	r8, r4, #8
   15b00:	orr	sl, sl, r8
   15b04:	orr	fp, fp, r9
   15b08:	ldrb	r4, [r6, #5]
   15b0c:	lsr	r9, r4, #16
   15b10:	lsl	r8, r4, #16
   15b14:	orr	r8, r8, sl
   15b18:	orr	r9, r9, fp
   15b1c:	ldrb	r4, [r6, #4]
   15b20:	lsr	fp, r4, #8
   15b24:	lsl	sl, r4, #24
   15b28:	orr	sl, sl, r8
   15b2c:	orr	fp, fp, r9
   15b30:	ldrb	r9, [r6, #3]
   15b34:	mov	r8, #0
   15b38:	orr	sl, sl, r8
   15b3c:	orr	fp, fp, r9
   15b40:	ldrb	r4, [r6, #2]
   15b44:	mov	r8, #0
   15b48:	orr	sl, sl, r8
   15b4c:	lsl	r9, r4, #8
   15b50:	orr	fp, fp, r9
   15b54:	ldrb	r4, [r6, #1]
   15b58:	mov	r8, #0
   15b5c:	orr	r8, r8, sl
   15b60:	lsl	r9, r4, #16
   15b64:	orr	r9, r9, fp
   15b68:	ldrb	sl, [r6]
   15b6c:	mov	r4, #0
   15b70:	orr	r4, r4, r8
   15b74:	lsl	r5, sl, #24
   15b78:	add	fp, pc, #392	; 0x188
   15b7c:	ldrd	sl, [fp]
   15b80:	orr	r5, r5, r9
   15b84:	cmp	r5, fp
   15b88:	cmpeq	r4, sl
   15b8c:	bls	15bf8 <_start@@Base+0x31fc>
   15b90:	add	fp, pc, #376	; 0x178
   15b94:	ldrd	sl, [fp]
   15b98:	mov	r4, #0
   15b9c:	cmp	r5, fp
   15ba0:	cmpeq	r4, sl
   15ba4:	beq	15ce4 <_start@@Base+0x32e8>
   15ba8:	add	r9, pc, #360	; 0x168
   15bac:	ldrd	r8, [r9]
   15bb0:	cmp	r5, r9
   15bb4:	cmpeq	r4, r8
   15bb8:	beq	15c54 <_start@@Base+0x3258>
   15bbc:	mov	r0, r6
   15bc0:	add	sp, sp, #12
   15bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc8:	sub	r1, r1, #1
   15bcc:	cmp	r1, #7
   15bd0:	addls	pc, pc, r1, lsl #2
   15bd4:	b	15bbc <_start@@Base+0x31c0>
   15bd8:	b	15c90 <_start@@Base+0x3294>
   15bdc:	b	15cb4 <_start@@Base+0x32b8>
   15be0:	b	15cc0 <_start@@Base+0x32c4>
   15be4:	b	15ccc <_start@@Base+0x32d0>
   15be8:	b	15cd8 <_start@@Base+0x32dc>
   15bec:	b	15c9c <_start@@Base+0x32a0>
   15bf0:	b	15ca8 <_start@@Base+0x32ac>
   15bf4:	b	15aec <_start@@Base+0x30f0>
   15bf8:	add	fp, pc, #288	; 0x120
   15bfc:	ldrd	sl, [fp]
   15c00:	mov	r4, #0
   15c04:	cmp	r5, fp
   15c08:	cmpeq	r4, sl
   15c0c:	bne	15bbc <_start@@Base+0x31c0>
   15c10:	ldr	r3, [sp, #52]	; 0x34
   15c14:	mov	r1, r6
   15c18:	str	r3, [sp]
   15c1c:	mov	r3, #4
   15c20:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15c24:	cmp	r6, r0
   15c28:	mvnne	r4, #11
   15c2c:	beq	15bbc <_start@@Base+0x31c0>
   15c30:	ldr	r2, [sp, #48]	; 0x30
   15c34:	mvn	r5, #0
   15c38:	mov	r3, #1
   15c3c:	mov	r6, r0
   15c40:	strd	r4, [r2]
   15c44:	mov	r0, r6
   15c48:	str	r3, [r7]
   15c4c:	add	sp, sp, #12
   15c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c54:	ldr	r3, [sp, #52]	; 0x34
   15c58:	mov	r1, r6
   15c5c:	str	r3, [sp]
   15c60:	mov	r3, #4
   15c64:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15c68:	cmp	r6, r0
   15c6c:	beq	15bbc <_start@@Base+0x31c0>
   15c70:	ldr	r2, [sp, #48]	; 0x30
   15c74:	mov	r6, r0
   15c78:	mvn	r1, #0
   15c7c:	mvn	r0, #10
   15c80:	mov	r3, #1
   15c84:	strd	r0, [r2]
   15c88:	str	r3, [r7]
   15c8c:	b	15bbc <_start@@Base+0x31c0>
   15c90:	mov	r8, #0
   15c94:	mov	r9, #0
   15c98:	b	15b68 <_start@@Base+0x316c>
   15c9c:	mov	sl, #0
   15ca0:	mov	fp, #0
   15ca4:	b	15b08 <_start@@Base+0x310c>
   15ca8:	mov	sl, #0
   15cac:	mov	fp, #0
   15cb0:	b	15af4 <_start@@Base+0x30f8>
   15cb4:	mov	sl, #0
   15cb8:	mov	fp, #0
   15cbc:	b	15b54 <_start@@Base+0x3158>
   15cc0:	mov	sl, #0
   15cc4:	mov	fp, #0
   15cc8:	b	15b40 <_start@@Base+0x3144>
   15ccc:	mov	sl, #0
   15cd0:	mov	fp, #0
   15cd4:	b	15b30 <_start@@Base+0x3134>
   15cd8:	mov	r8, #0
   15cdc:	mov	r9, #0
   15ce0:	b	15b1c <_start@@Base+0x3120>
   15ce4:	ldr	r3, [sp, #52]	; 0x34
   15ce8:	mov	r1, r6
   15cec:	str	r3, [sp]
   15cf0:	mov	r3, #4
   15cf4:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15cf8:	cmp	r6, r0
   15cfc:	beq	15bbc <_start@@Base+0x31c0>
   15d00:	mvn	r4, #9
   15d04:	b	15c30 <_start@@Base+0x3234>
   15d08:			; <UNDEFINED> instruction: 0xffffffff
   15d0c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   15d10:	andeq	r0, r0, r0
   15d14:	mcrvs	7, 3, r6, cr5, cr3, {1}
   15d18:	andeq	r0, r0, r0
   15d1c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   15d20:	andeq	r0, r0, r0
   15d24:	mcrvs	7, 3, r6, cr5, cr1, {1}
   15d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d2c:	mov	r6, r1
   15d30:	sub	r1, r2, r1
   15d34:	cmp	r1, #8
   15d38:	sub	sp, sp, #12
   15d3c:	mov	ip, r0
   15d40:	mov	r7, r3
   15d44:	bls	15e2c <_start@@Base+0x3430>
   15d48:	ldrb	r8, [r6, #7]
   15d4c:	mov	r9, #0
   15d50:	ldrb	r0, [r6, #6]
   15d54:	lsr	r5, r0, #24
   15d58:	lsl	r4, r0, #8
   15d5c:	orr	r8, r8, r4
   15d60:	orr	r9, r9, r5
   15d64:	ldrb	r0, [r6, #5]
   15d68:	lsr	r5, r0, #16
   15d6c:	lsl	r4, r0, #16
   15d70:	orr	r4, r4, r8
   15d74:	orr	r5, r5, r9
   15d78:	ldrb	r0, [r6, #4]
   15d7c:	lsr	r9, r0, #8
   15d80:	lsl	r8, r0, #24
   15d84:	orr	r8, r8, r4
   15d88:	orr	r9, r9, r5
   15d8c:	ldrb	r1, [r6, #3]
   15d90:	mov	r0, #0
   15d94:	orr	r8, r8, r0
   15d98:	orr	r9, r9, r1
   15d9c:	ldrb	r4, [r6, #2]
   15da0:	mov	r0, #0
   15da4:	orr	r8, r8, r0
   15da8:	lsl	r1, r4, #8
   15dac:	orr	r9, r9, r1
   15db0:	ldrb	r4, [r6, #1]
   15db4:	mov	r0, #0
   15db8:	orr	r0, r0, r8
   15dbc:	lsl	r1, r4, #16
   15dc0:	orr	r1, r1, r9
   15dc4:	ldrb	r8, [r6]
   15dc8:	mov	r4, #0
   15dcc:	orr	r0, r0, r4
   15dd0:	lsl	r5, r8, #24
   15dd4:	add	r9, pc, #404	; 0x194
   15dd8:	ldrd	r8, [r9]
   15ddc:	orr	r1, r1, r5
   15de0:	cmp	r1, r9
   15de4:	cmpeq	r0, r8
   15de8:	bls	15e5c <_start@@Base+0x3460>
   15dec:	add	r9, pc, #388	; 0x184
   15df0:	ldrd	r8, [r9]
   15df4:	bic	fp, r1, #255	; 0xff
   15df8:	mov	sl, #0
   15dfc:	cmp	fp, r9
   15e00:	cmpeq	sl, r8
   15e04:	beq	15f48 <_start@@Base+0x354c>
   15e08:	add	r9, pc, #368	; 0x170
   15e0c:	ldrd	r8, [r9]
   15e10:	and	r0, r0, #-16777216	; 0xff000000
   15e14:	cmp	r1, r9
   15e18:	cmpeq	r0, r8
   15e1c:	beq	15eb8 <_start@@Base+0x34bc>
   15e20:	mov	r0, r6
   15e24:	add	sp, sp, #12
   15e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e2c:	sub	r1, r1, #1
   15e30:	cmp	r1, #7
   15e34:	addls	pc, pc, r1, lsl #2
   15e38:	b	15e20 <_start@@Base+0x3424>
   15e3c:	b	15ef4 <_start@@Base+0x34f8>
   15e40:	b	15f18 <_start@@Base+0x351c>
   15e44:	b	15f24 <_start@@Base+0x3528>
   15e48:	b	15f30 <_start@@Base+0x3534>
   15e4c:	b	15f3c <_start@@Base+0x3540>
   15e50:	b	15f00 <_start@@Base+0x3504>
   15e54:	b	15f0c <_start@@Base+0x3510>
   15e58:	b	15d48 <_start@@Base+0x334c>
   15e5c:	add	r9, pc, #292	; 0x124
   15e60:	ldrd	r8, [r9]
   15e64:	mov	r0, #0
   15e68:	cmp	r1, r9
   15e6c:	cmpeq	r0, r8
   15e70:	bne	15e20 <_start@@Base+0x3424>
   15e74:	ldr	r3, [sp, #52]	; 0x34
   15e78:	mov	r0, ip
   15e7c:	str	r3, [sp]
   15e80:	mov	r1, r6
   15e84:	mov	r3, #4
   15e88:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15e8c:	cmp	r6, r0
   15e90:	movne	r2, #8
   15e94:	beq	15e20 <_start@@Base+0x3424>
   15e98:	ldr	r1, [sp, #48]	; 0x30
   15e9c:	mov	r3, #0
   15ea0:	mov	r6, r0
   15ea4:	strd	r2, [r1]
   15ea8:	mov	r0, r6
   15eac:	str	r4, [r7]
   15eb0:	add	sp, sp, #12
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	ldr	r3, [sp, #52]	; 0x34
   15ebc:	mov	r0, ip
   15ec0:	str	r3, [sp]
   15ec4:	mov	r1, r6
   15ec8:	mov	r3, #5
   15ecc:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15ed0:	cmp	r6, r0
   15ed4:	beq	15e20 <_start@@Base+0x3424>
   15ed8:	ldr	r1, [sp, #48]	; 0x30
   15edc:	mov	r2, #2
   15ee0:	mov	r3, #0
   15ee4:	mov	r6, r0
   15ee8:	strd	r2, [r1]
   15eec:	str	r4, [r7]
   15ef0:	b	15e20 <_start@@Base+0x3424>
   15ef4:	mov	r0, #0
   15ef8:	mov	r1, #0
   15efc:	b	15dc4 <_start@@Base+0x33c8>
   15f00:	mov	r8, #0
   15f04:	mov	r9, #0
   15f08:	b	15d64 <_start@@Base+0x3368>
   15f0c:	mov	r8, #0
   15f10:	mov	r9, #0
   15f14:	b	15d50 <_start@@Base+0x3354>
   15f18:	mov	r8, #0
   15f1c:	mov	r9, #0
   15f20:	b	15db0 <_start@@Base+0x33b4>
   15f24:	mov	r8, #0
   15f28:	mov	r9, #0
   15f2c:	b	15d9c <_start@@Base+0x33a0>
   15f30:	mov	r8, #0
   15f34:	mov	r9, #0
   15f38:	b	15d8c <_start@@Base+0x3390>
   15f3c:	mov	r4, #0
   15f40:	mov	r5, #0
   15f44:	b	15d78 <_start@@Base+0x337c>
   15f48:	ldr	r3, [sp, #52]	; 0x34
   15f4c:	mov	r0, ip
   15f50:	str	r3, [sp]
   15f54:	mov	r1, r6
   15f58:	mov	r3, #3
   15f5c:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   15f60:	cmp	r6, r0
   15f64:	beq	15e20 <_start@@Base+0x3424>
   15f68:	mov	r2, #1
   15f6c:	b	15e98 <_start@@Base+0x349c>
   15f70:	ldclvs	15, cr15, [pc, #1020]!	; 16374 <_start@@Base+0x3978>
   15f74:	ldrbmi	r6, [r2, -r5, ror #10]!
   15f78:	andeq	r0, r0, r0
   15f7c:	rsbpl	r6, r5, #0, 8
   15f80:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   15f84:	ldrbmi	r6, [r2, -r5, ror #10]!
   15f88:	andeq	r0, r0, r0
   15f8c:	rsbmi	r7, ip, #423624704	; 0x19400000
   15f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f94:	mov	r6, r1
   15f98:	sub	r1, r2, r1
   15f9c:	cmp	r1, #8
   15fa0:	sub	sp, sp, #12
   15fa4:	mov	ip, r0
   15fa8:	mov	r7, r3
   15fac:	bls	1609c <_start@@Base+0x36a0>
   15fb0:	ldrb	r8, [r6, #7]
   15fb4:	mov	r9, #0
   15fb8:	ldrb	r0, [r6, #6]
   15fbc:	lsr	r5, r0, #24
   15fc0:	lsl	r4, r0, #8
   15fc4:	orr	r8, r8, r4
   15fc8:	orr	r9, r9, r5
   15fcc:	ldrb	r0, [r6, #5]
   15fd0:	lsr	r5, r0, #16
   15fd4:	lsl	r4, r0, #16
   15fd8:	orr	r4, r4, r8
   15fdc:	orr	r5, r5, r9
   15fe0:	ldrb	r0, [r6, #4]
   15fe4:	lsr	r9, r0, #8
   15fe8:	lsl	r8, r0, #24
   15fec:	orr	r8, r8, r4
   15ff0:	orr	r9, r9, r5
   15ff4:	ldrb	r1, [r6, #3]
   15ff8:	mov	r0, #0
   15ffc:	orr	r8, r8, r0
   16000:	orr	r9, r9, r1
   16004:	ldrb	r4, [r6, #2]
   16008:	mov	r0, #0
   1600c:	orr	r8, r8, r0
   16010:	lsl	r1, r4, #8
   16014:	orr	r9, r9, r1
   16018:	ldrb	r4, [r6, #1]
   1601c:	mov	r0, #0
   16020:	orr	r0, r0, r8
   16024:	lsl	r1, r4, #16
   16028:	orr	r1, r1, r9
   1602c:	ldrb	r8, [r6]
   16030:	mov	r4, #0
   16034:	orr	r0, r0, r4
   16038:	lsl	r5, r8, #24
   1603c:	add	r9, pc, #428	; 0x1ac
   16040:	ldrd	r8, [r9]
   16044:	orr	r1, r1, r5
   16048:	cmp	r1, r9
   1604c:	cmpeq	r0, r8
   16050:	bls	160cc <_start@@Base+0x36d0>
   16054:	add	fp, pc, #412	; 0x19c
   16058:	ldrd	sl, [fp]
   1605c:	ldr	r8, [pc, #436]	; 16218 <_start@@Base+0x381c>
   16060:	mvn	r9, #0
   16064:	and	r9, r9, r1
   16068:	and	r8, r8, r0
   1606c:	cmp	r9, fp
   16070:	cmpeq	r8, sl
   16074:	beq	161b0 <_start@@Base+0x37b4>
   16078:	add	r9, pc, #384	; 0x180
   1607c:	ldrd	r8, [r9]
   16080:	mov	r0, #0
   16084:	cmp	r1, r9
   16088:	cmpeq	r0, r8
   1608c:	beq	16120 <_start@@Base+0x3724>
   16090:	mov	r0, r6
   16094:	add	sp, sp, #12
   16098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1609c:	sub	r1, r1, #1
   160a0:	cmp	r1, #7
   160a4:	addls	pc, pc, r1, lsl #2
   160a8:	b	16090 <_start@@Base+0x3694>
   160ac:	b	1615c <_start@@Base+0x3760>
   160b0:	b	16180 <_start@@Base+0x3784>
   160b4:	b	1618c <_start@@Base+0x3790>
   160b8:	b	16198 <_start@@Base+0x379c>
   160bc:	b	161a4 <_start@@Base+0x37a8>
   160c0:	b	16168 <_start@@Base+0x376c>
   160c4:	b	16174 <_start@@Base+0x3778>
   160c8:	b	15fb0 <_start@@Base+0x35b4>
   160cc:	add	r9, pc, #308	; 0x134
   160d0:	ldrd	r8, [r9]
   160d4:	mov	r0, #0
   160d8:	cmp	r1, r9
   160dc:	cmpeq	r0, r8
   160e0:	bne	16090 <_start@@Base+0x3694>
   160e4:	ldr	r3, [sp, #52]	; 0x34
   160e8:	mov	r0, ip
   160ec:	str	r3, [sp]
   160f0:	mov	r1, r6
   160f4:	mov	r3, #4
   160f8:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   160fc:	cmp	r6, r0
   16100:	beq	16090 <_start@@Base+0x3694>
   16104:	ldr	r1, [sp, #48]	; 0x30
   16108:	mov	r2, #3
   1610c:	mov	r3, #0
   16110:	mov	r6, r0
   16114:	strd	r2, [r1]
   16118:	str	r4, [r7]
   1611c:	b	16090 <_start@@Base+0x3694>
   16120:	ldr	r3, [sp, #52]	; 0x34
   16124:	mov	r0, ip
   16128:	str	r3, [sp]
   1612c:	mov	r1, r6
   16130:	mov	r3, #4
   16134:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16138:	cmp	r6, r0
   1613c:	beq	16090 <_start@@Base+0x3694>
   16140:	add	r3, pc, #200	; 0xc8
   16144:	ldrd	r2, [r3]
   16148:	ldr	r1, [sp, #48]	; 0x30
   1614c:	mov	r6, r0
   16150:	strd	r2, [r1]
   16154:	str	r4, [r7]
   16158:	b	16090 <_start@@Base+0x3694>
   1615c:	mov	r0, #0
   16160:	mov	r1, #0
   16164:	b	1602c <_start@@Base+0x3630>
   16168:	mov	r8, #0
   1616c:	mov	r9, #0
   16170:	b	15fcc <_start@@Base+0x35d0>
   16174:	mov	r8, #0
   16178:	mov	r9, #0
   1617c:	b	15fb8 <_start@@Base+0x35bc>
   16180:	mov	r8, #0
   16184:	mov	r9, #0
   16188:	b	16018 <_start@@Base+0x361c>
   1618c:	mov	r8, #0
   16190:	mov	r9, #0
   16194:	b	16004 <_start@@Base+0x3608>
   16198:	mov	r8, #0
   1619c:	mov	r9, #0
   161a0:	b	15ff4 <_start@@Base+0x35f8>
   161a4:	mov	r4, #0
   161a8:	mov	r5, #0
   161ac:	b	15fe0 <_start@@Base+0x35e4>
   161b0:	ldr	r3, [sp, #52]	; 0x34
   161b4:	mov	r0, ip
   161b8:	str	r3, [sp]
   161bc:	mov	r1, r6
   161c0:	mov	r3, #6
   161c4:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   161c8:	cmp	r6, r0
   161cc:	beq	16090 <_start@@Base+0x3694>
   161d0:	ldr	r2, [sp, #48]	; 0x30
   161d4:	mvn	r4, #1
   161d8:	mvn	r5, #0
   161dc:	mov	r3, #1
   161e0:	strd	r4, [r2]
   161e4:	mov	r6, r0
   161e8:	str	r3, [r7]
   161ec:	b	16090 <_start@@Base+0x3694>
   161f0:			; <UNDEFINED> instruction: 0xffffffff
   161f4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   161f8:	strbvs	r0, [r7, #-0]!
   161fc:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16200:	andeq	r0, r0, r0
   16204:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16208:	andeq	r0, r0, r0
   1620c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16210:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16214:	andeq	r0, r0, r0
   16218:			; <UNDEFINED> instruction: 0xffff0000
   1621c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16220:	sub	sp, sp, #156	; 0x9c
   16224:	mov	r8, r0
   16228:	mov	r0, r3
   1622c:	str	r3, [sp, #124]	; 0x7c
   16230:	mov	r4, r2
   16234:	mov	r3, #0
   16238:	mov	r2, #4
   1623c:	str	r3, [r0]
   16240:	mov	r5, r1
   16244:	ldr	r0, [r8]
   16248:	mov	r1, r2
   1624c:	bl	230ac <flatcc_builder_start_struct@@Base>
   16250:	subs	r3, r0, #0
   16254:	str	r3, [sp, #116]	; 0x74
   16258:	beq	16a38 <_start@@Base+0x403c>
   1625c:	cmp	r5, r4
   16260:	beq	16270 <_start@@Base+0x3874>
   16264:	ldrb	r3, [r5]
   16268:	cmp	r3, #123	; 0x7b
   1626c:	beq	162d0 <_start@@Base+0x38d4>
   16270:	mov	r1, r5
   16274:	mov	r3, #21
   16278:	mov	r2, r4
   1627c:	mov	r0, r8
   16280:	bl	27994 <flatcc_json_parser_set_error@@Base>
   16284:	mov	r1, r0
   16288:	cmp	r4, r1
   1628c:	beq	162b0 <_start@@Base+0x38b4>
   16290:	ldr	r0, [r8]
   16294:	str	r1, [sp, #8]
   16298:	bl	23154 <flatcc_builder_end_struct@@Base>
   1629c:	ldr	r3, [sp, #124]	; 0x7c
   162a0:	ldr	r1, [sp, #8]
   162a4:	cmp	r0, #0
   162a8:	str	r0, [r3]
   162ac:	bne	162c4 <_start@@Base+0x38c8>
   162b0:	mov	r2, r4
   162b4:	mov	r0, r8
   162b8:	mov	r3, #33	; 0x21
   162bc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   162c0:	mov	r1, r0
   162c4:	mov	r0, r1
   162c8:	add	sp, sp, #156	; 0x9c
   162cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d0:	add	r3, r5, #1
   162d4:	sub	r2, r4, r3
   162d8:	cmp	r2, #1
   162dc:	ble	162f0 <_start@@Base+0x38f4>
   162e0:	ldrb	r2, [r5, #1]
   162e4:	cmp	r2, #32
   162e8:	bhi	16304 <_start@@Base+0x3908>
   162ec:	beq	16aac <_start@@Base+0x40b0>
   162f0:	mov	r1, r3
   162f4:	mov	r2, r4
   162f8:	mov	r0, r8
   162fc:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   16300:	mov	r3, r0
   16304:	cmp	r4, r3
   16308:	beq	16318 <_start@@Base+0x391c>
   1630c:	ldrb	r2, [r3]
   16310:	cmp	r2, #125	; 0x7d
   16314:	beq	16ac0 <_start@@Base+0x40c4>
   16318:	ldr	r2, [pc, #1312]	; 16840 <_start@@Base+0x3e44>
   1631c:	mov	r9, #0
   16320:	add	r2, pc, r2
   16324:	add	r2, r2, #24
   16328:	mov	r1, r3
   1632c:	str	r2, [sp, #128]	; 0x80
   16330:	add	r2, sp, #136	; 0x88
   16334:	str	r2, [sp, #132]	; 0x84
   16338:	cmp	r4, r1
   1633c:	beq	1664c <_start@@Base+0x3c50>
   16340:	ldrb	r3, [r1]
   16344:	cmp	r3, #34	; 0x22
   16348:	moveq	r3, #0
   1634c:	addeq	r1, r1, #1
   16350:	streq	r3, [r8, #12]
   16354:	beq	16368 <_start@@Base+0x396c>
   16358:	cmp	r3, #46	; 0x2e
   1635c:	movne	r3, #1
   16360:	strne	r3, [r8, #12]
   16364:	beq	16948 <_start@@Base+0x3f4c>
   16368:	sub	r3, r4, r1
   1636c:	cmp	r3, #8
   16370:	bls	1665c <_start@@Base+0x3c60>
   16374:	ldrb	r6, [r1, #7]
   16378:	mov	r7, #0
   1637c:	ldrb	r2, [r1, #6]
   16380:	lsr	r0, r2, #24
   16384:	lsl	r3, r2, #8
   16388:	str	r0, [sp, #76]	; 0x4c
   1638c:	str	r3, [sp, #72]	; 0x48
   16390:	ldrd	r2, [sp, #72]	; 0x48
   16394:	orr	r2, r2, r6
   16398:	orr	r3, r3, r7
   1639c:	ldrb	r6, [r1, #5]
   163a0:	lsr	r0, r6, #16
   163a4:	str	r0, [sp, #52]	; 0x34
   163a8:	lsl	r0, r6, #16
   163ac:	str	r0, [sp, #48]	; 0x30
   163b0:	ldrd	r6, [sp, #48]	; 0x30
   163b4:	orr	r6, r6, r2
   163b8:	orr	r7, r7, r3
   163bc:	mov	r2, r6
   163c0:	mov	r3, r7
   163c4:	ldrb	r6, [r1, #4]
   163c8:	lsr	r0, r6, #8
   163cc:	str	r0, [sp, #28]
   163d0:	lsl	r0, r6, #24
   163d4:	str	r0, [sp, #24]
   163d8:	ldrd	r6, [sp, #24]
   163dc:	orr	r6, r6, r2
   163e0:	orr	r7, r7, r3
   163e4:	mov	r2, r6
   163e8:	mov	r3, r7
   163ec:	ldrb	r0, [r1, #3]
   163f0:	str	r0, [sp, #36]	; 0x24
   163f4:	mov	r0, #0
   163f8:	str	r0, [sp, #32]
   163fc:	ldrd	r6, [sp, #32]
   16400:	orr	r6, r6, r2
   16404:	orr	r7, r7, r3
   16408:	mov	r2, r6
   1640c:	mov	r3, r7
   16410:	ldrb	r6, [r1, #2]
   16414:	lsl	r0, r6, #8
   16418:	str	r0, [sp, #20]
   1641c:	mov	r0, #0
   16420:	str	r0, [sp, #16]
   16424:	ldrd	r6, [sp, #16]
   16428:	orr	r6, r6, r2
   1642c:	orr	r7, r7, r3
   16430:	mov	r2, r6
   16434:	mov	r3, r7
   16438:	ldrb	r6, [r1, #1]
   1643c:	lsl	r0, r6, #16
   16440:	str	r0, [sp, #12]
   16444:	mov	r0, #0
   16448:	str	r0, [sp, #8]
   1644c:	ldrd	r6, [sp, #8]
   16450:	orr	r6, r6, r2
   16454:	orr	r7, r7, r3
   16458:	mov	r2, r6
   1645c:	mov	r3, r7
   16460:	ldrb	r6, [r1]
   16464:	mov	sl, #0
   16468:	orr	r2, r2, sl
   1646c:	lsl	fp, r6, #24
   16470:	add	r7, pc, #960	; 0x3c0
   16474:	ldrd	r6, [r7]
   16478:	orr	r3, r3, fp
   1647c:	cmp	r3, r7
   16480:	cmpeq	r2, r6
   16484:	bne	1664c <_start@@Base+0x3c50>
   16488:	add	r5, r1, #8
   1648c:	sub	r0, r4, r5
   16490:	cmp	r0, #8
   16494:	bls	166e0 <_start@@Base+0x3ce4>
   16498:	ldrb	r6, [r1, #15]
   1649c:	mov	r7, #0
   164a0:	ldrb	r2, [r1, #14]
   164a4:	lsr	ip, r2, #24
   164a8:	lsl	r3, r2, #8
   164ac:	str	ip, [sp, #108]	; 0x6c
   164b0:	str	r3, [sp, #104]	; 0x68
   164b4:	ldrd	r2, [sp, #104]	; 0x68
   164b8:	orr	r2, r2, r6
   164bc:	orr	r3, r3, r7
   164c0:	mov	r6, r2
   164c4:	mov	r7, r3
   164c8:	ldrb	r2, [r1, #13]
   164cc:	lsr	ip, r2, #16
   164d0:	lsl	r3, r2, #16
   164d4:	str	ip, [sp, #100]	; 0x64
   164d8:	str	r3, [sp, #96]	; 0x60
   164dc:	ldrd	r2, [sp, #96]	; 0x60
   164e0:	orr	r2, r2, r6
   164e4:	orr	r3, r3, r7
   164e8:	mov	r6, r2
   164ec:	mov	r7, r3
   164f0:	ldrb	r2, [r1, #12]
   164f4:	lsr	ip, r2, #8
   164f8:	lsl	r3, r2, #24
   164fc:	str	ip, [sp, #84]	; 0x54
   16500:	str	r3, [sp, #80]	; 0x50
   16504:	ldrd	r2, [sp, #80]	; 0x50
   16508:	orr	r2, r2, r6
   1650c:	orr	r3, r3, r7
   16510:	mov	r6, r2
   16514:	mov	r7, r3
   16518:	ldrb	r3, [r1, #11]
   1651c:	str	r3, [sp, #92]	; 0x5c
   16520:	mov	r3, #0
   16524:	str	r3, [sp, #88]	; 0x58
   16528:	ldrd	r2, [sp, #88]	; 0x58
   1652c:	orr	r2, r2, r6
   16530:	orr	r3, r3, r7
   16534:	mov	r6, r2
   16538:	mov	r7, r3
   1653c:	ldrb	r2, [r1, #10]
   16540:	lsl	r3, r2, #8
   16544:	str	r3, [sp, #68]	; 0x44
   16548:	mov	r3, #0
   1654c:	str	r3, [sp, #64]	; 0x40
   16550:	ldrd	r2, [sp, #64]	; 0x40
   16554:	orr	r2, r2, r6
   16558:	orr	r3, r3, r7
   1655c:	ldrb	r6, [r1, #9]
   16560:	lsl	ip, r6, #16
   16564:	str	ip, [sp, #60]	; 0x3c
   16568:	mov	ip, #0
   1656c:	str	ip, [sp, #56]	; 0x38
   16570:	ldrd	r6, [sp, #56]	; 0x38
   16574:	orr	r6, r6, r2
   16578:	orr	r7, r7, r3
   1657c:	mov	r2, r6
   16580:	mov	r3, r7
   16584:	ldrb	r6, [r1, #8]
   16588:	lsl	ip, r6, #24
   1658c:	str	ip, [sp, #44]	; 0x2c
   16590:	mov	ip, #0
   16594:	str	ip, [sp, #40]	; 0x28
   16598:	ldrd	r6, [sp, #40]	; 0x28
   1659c:	orr	r7, r7, r3
   165a0:	mov	r3, r7
   165a4:	ldr	r7, [pc, #664]	; 16844 <_start@@Base+0x3e48>
   165a8:	orr	r6, r6, r2
   165ac:	and	r3, r3, r7
   165b0:	ldr	r7, [pc, #656]	; 16848 <_start@@Base+0x3e4c>
   165b4:	mov	r2, r6
   165b8:	mov	r6, #0
   165bc:	and	r2, r2, r6
   165c0:	cmp	r3, r7
   165c4:	mov	r6, #0
   165c8:	cmpeq	r2, r6
   165cc:	bne	165d8 <_start@@Base+0x3bdc>
   165d0:	cmp	r0, #2
   165d4:	bgt	1684c <_start@@Base+0x3e50>
   165d8:	mov	r1, r5
   165dc:	mov	r2, r4
   165e0:	mov	r0, r8
   165e4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   165e8:	sub	r3, r4, r0
   165ec:	cmp	r3, #1
   165f0:	ble	16604 <_start@@Base+0x3c08>
   165f4:	ldrb	r3, [r0]
   165f8:	cmp	r3, #32
   165fc:	bhi	16614 <_start@@Base+0x3c18>
   16600:	beq	16798 <_start@@Base+0x3d9c>
   16604:	mov	r1, r0
   16608:	mov	r2, r4
   1660c:	mov	r0, r8
   16610:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   16614:	cmp	r4, r0
   16618:	beq	167b0 <_start@@Base+0x3db4>
   1661c:	ldrb	r3, [r0]
   16620:	cmp	r3, #44	; 0x2c
   16624:	beq	167b8 <_start@@Base+0x3dbc>
   16628:	cmp	r3, #125	; 0x7d
   1662c:	beq	16764 <_start@@Base+0x3d68>
   16630:	mov	r1, r0
   16634:	mov	r3, #10
   16638:	mov	r2, r4
   1663c:	mov	r0, r8
   16640:	bl	27994 <flatcc_json_parser_set_error@@Base>
   16644:	mov	r1, r0
   16648:	b	16288 <_start@@Base+0x388c>
   1664c:	mov	r2, r4
   16650:	mov	r0, r8
   16654:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   16658:	b	165e8 <_start@@Base+0x3bec>
   1665c:	sub	r3, r3, #1
   16660:	cmp	r3, #7
   16664:	addls	pc, pc, r3, lsl #2
   16668:	b	1664c <_start@@Base+0x3c50>
   1666c:	b	166d4 <_start@@Base+0x3cd8>
   16670:	b	166c8 <_start@@Base+0x3ccc>
   16674:	b	166bc <_start@@Base+0x3cc0>
   16678:	b	166b0 <_start@@Base+0x3cb4>
   1667c:	b	166a4 <_start@@Base+0x3ca8>
   16680:	b	16698 <_start@@Base+0x3c9c>
   16684:	b	1668c <_start@@Base+0x3c90>
   16688:	b	16374 <_start@@Base+0x3978>
   1668c:	mov	r6, r9
   16690:	mov	r7, #0
   16694:	b	1637c <_start@@Base+0x3980>
   16698:	mov	r2, r9
   1669c:	mov	r3, #0
   166a0:	b	1639c <_start@@Base+0x39a0>
   166a4:	mov	r2, r9
   166a8:	mov	r3, #0
   166ac:	b	163c4 <_start@@Base+0x39c8>
   166b0:	mov	r2, r9
   166b4:	mov	r3, #0
   166b8:	b	163ec <_start@@Base+0x39f0>
   166bc:	mov	r2, r9
   166c0:	mov	r3, #0
   166c4:	b	16410 <_start@@Base+0x3a14>
   166c8:	mov	r2, r9
   166cc:	mov	r3, #0
   166d0:	b	16438 <_start@@Base+0x3a3c>
   166d4:	mov	r2, r9
   166d8:	mov	r3, #0
   166dc:	b	16460 <_start@@Base+0x3a64>
   166e0:	sub	r3, r0, #1
   166e4:	cmp	r3, #7
   166e8:	addls	pc, pc, r3, lsl #2
   166ec:	b	165d8 <_start@@Base+0x3bdc>
   166f0:	b	16758 <_start@@Base+0x3d5c>
   166f4:	b	1674c <_start@@Base+0x3d50>
   166f8:	b	16740 <_start@@Base+0x3d44>
   166fc:	b	16734 <_start@@Base+0x3d38>
   16700:	b	16728 <_start@@Base+0x3d2c>
   16704:	b	1671c <_start@@Base+0x3d20>
   16708:	b	16710 <_start@@Base+0x3d14>
   1670c:	b	16498 <_start@@Base+0x3a9c>
   16710:	mov	r6, r9
   16714:	mov	r7, #0
   16718:	b	164a0 <_start@@Base+0x3aa4>
   1671c:	mov	r6, r9
   16720:	mov	r7, #0
   16724:	b	164c8 <_start@@Base+0x3acc>
   16728:	mov	r6, r9
   1672c:	mov	r7, #0
   16730:	b	164f0 <_start@@Base+0x3af4>
   16734:	mov	r6, r9
   16738:	mov	r7, #0
   1673c:	b	16518 <_start@@Base+0x3b1c>
   16740:	mov	r6, r9
   16744:	mov	r7, #0
   16748:	b	1653c <_start@@Base+0x3b40>
   1674c:	mov	r2, r9
   16750:	mov	r3, #0
   16754:	b	1655c <_start@@Base+0x3b60>
   16758:	mov	r2, r9
   1675c:	mov	r3, #0
   16760:	b	16584 <_start@@Base+0x3b88>
   16764:	add	r1, r0, #1
   16768:	sub	r3, r4, r1
   1676c:	cmp	r3, #1
   16770:	ble	16784 <_start@@Base+0x3d88>
   16774:	ldrb	r3, [r0, #1]
   16778:	cmp	r3, #32
   1677c:	bhi	16288 <_start@@Base+0x388c>
   16780:	beq	169b0 <_start@@Base+0x3fb4>
   16784:	mov	r2, r4
   16788:	mov	r0, r8
   1678c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   16790:	mov	r1, r0
   16794:	b	16288 <_start@@Base+0x388c>
   16798:	ldrb	r3, [r0, #1]
   1679c:	cmp	r3, #32
   167a0:	addhi	r0, r0, #1
   167a4:	bls	16604 <_start@@Base+0x3c08>
   167a8:	cmp	r4, r0
   167ac:	bne	1661c <_start@@Base+0x3c20>
   167b0:	mov	r1, r4
   167b4:	b	162b0 <_start@@Base+0x38b4>
   167b8:	add	r1, r0, #1
   167bc:	sub	r3, r4, r1
   167c0:	cmp	r3, #1
   167c4:	ble	167d8 <_start@@Base+0x3ddc>
   167c8:	ldrb	r3, [r0, #1]
   167cc:	cmp	r3, #32
   167d0:	bhi	167e8 <_start@@Base+0x3dec>
   167d4:	beq	169c4 <_start@@Base+0x3fc8>
   167d8:	mov	r2, r4
   167dc:	mov	r0, r8
   167e0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   167e4:	mov	r1, r0
   167e8:	cmp	r4, r1
   167ec:	beq	16a40 <_start@@Base+0x4044>
   167f0:	ldrb	r3, [r1]
   167f4:	cmp	r3, #125	; 0x7d
   167f8:	bne	16338 <_start@@Base+0x393c>
   167fc:	mov	r3, r1
   16800:	add	r1, r1, #1
   16804:	sub	r2, r4, r1
   16808:	cmp	r2, #1
   1680c:	ble	16784 <_start@@Base+0x3d88>
   16810:	ldrb	r2, [r3, #1]
   16814:	cmp	r2, #32
   16818:	bhi	16288 <_start@@Base+0x388c>
   1681c:	bne	16784 <_start@@Base+0x3d88>
   16820:	ldrb	r2, [r3, #2]
   16824:	cmp	r2, #32
   16828:	addhi	r1, r3, #2
   1682c:	bls	16784 <_start@@Base+0x3d88>
   16830:	b	16288 <_start@@Base+0x388c>
   16834:	nop			; (mov r0, r0)
   16838:	cmpvc	pc, #1342177286	; 0x50000006
   1683c:	rsbvs	r6, pc, #428	; 0x1ac
   16840:	andeq	r6, r2, r8, ror #26
   16844:			; <UNDEFINED> instruction: 0xffff0000
   16848:	cmnvs	r4, r0
   1684c:	ldr	r3, [r8, #12]
   16850:	cmp	r3, ip
   16854:	ldrb	r3, [r1, #10]
   16858:	beq	169a0 <_start@@Base+0x3fa4>
   1685c:	cmp	r3, #58	; 0x3a
   16860:	cmpne	r3, #32
   16864:	movls	r3, #0
   16868:	movhi	r3, #1
   1686c:	addls	r1, r1, #10
   16870:	strls	r3, [r8, #12]
   16874:	bhi	165d8 <_start@@Base+0x3bdc>
   16878:	sub	r3, r4, r1
   1687c:	cmp	r3, #1
   16880:	ble	16894 <_start@@Base+0x3e98>
   16884:	ldrb	r3, [r1]
   16888:	cmp	r3, #32
   1688c:	bhi	168a4 <_start@@Base+0x3ea8>
   16890:	beq	16a5c <_start@@Base+0x4060>
   16894:	mov	r2, r4
   16898:	mov	r0, r8
   1689c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   168a0:	mov	r1, r0
   168a4:	cmp	r4, r1
   168a8:	beq	168b8 <_start@@Base+0x3ebc>
   168ac:	ldrb	r3, [r1]
   168b0:	cmp	r3, #58	; 0x3a
   168b4:	beq	16a70 <_start@@Base+0x4074>
   168b8:	mov	r3, #4
   168bc:	mov	r2, r4
   168c0:	mov	r0, r8
   168c4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   168c8:	str	r0, [sp, #120]	; 0x78
   168cc:	ldr	r3, [sp, #120]	; 0x78
   168d0:	cmp	r5, r3
   168d4:	beq	165d8 <_start@@Base+0x3bdc>
   168d8:	mov	r5, r3
   168dc:	cmp	r4, r3
   168e0:	mov	r3, #0
   168e4:	str	r3, [sp, #136]	; 0x88
   168e8:	str	r9, [sp, #144]	; 0x90
   168ec:	str	r3, [sp, #148]	; 0x94
   168f0:	str	r3, [sp, #140]	; 0x8c
   168f4:	beq	169f0 <_start@@Base+0x3ff4>
   168f8:	add	r3, sp, #144	; 0x90
   168fc:	str	r3, [sp]
   16900:	mov	r2, r4
   16904:	add	r3, sp, #140	; 0x8c
   16908:	mov	r1, r5
   1690c:	mov	r0, r8
   16910:	bl	296fc <flatcc_json_parser_integer@@Base>
   16914:	cmp	r5, r0
   16918:	beq	169f0 <_start@@Base+0x3ff4>
   1691c:	ldr	r1, [sp, #140]	; 0x8c
   16920:	ldrd	r2, [sp, #144]	; 0x90
   16924:	cmp	r1, #0
   16928:	beq	16960 <_start@@Base+0x3f64>
   1692c:	cmp	r3, #0
   16930:	cmpeq	r2, #-2147483648	; 0x80000000
   16934:	rsbls	r3, r2, #0
   16938:	bhi	169d8 <_start@@Base+0x3fdc>
   1693c:	ldr	r2, [sp, #116]	; 0x74
   16940:	str	r3, [r2]
   16944:	b	165e8 <_start@@Base+0x3bec>
   16948:	mov	r3, #5
   1694c:	mov	r2, r4
   16950:	mov	r0, r8
   16954:	bl	27994 <flatcc_json_parser_set_error@@Base>
   16958:	mov	r1, r0
   1695c:	b	16368 <_start@@Base+0x396c>
   16960:	mov	r7, #0
   16964:	cmp	r3, r7
   16968:	mvn	r6, #-2147483648	; 0x80000000
   1696c:	cmpeq	r2, r6
   16970:	movls	r3, r2
   16974:	bls	1693c <_start@@Base+0x3f40>
   16978:	mov	r1, r0
   1697c:	mov	r3, #7
   16980:	mov	r2, r4
   16984:	mov	r0, r8
   16988:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1698c:	ldr	r3, [sp, #120]	; 0x78
   16990:	cmp	r3, r0
   16994:	beq	169f0 <_start@@Base+0x3ff4>
   16998:	ldr	r3, [sp, #136]	; 0x88
   1699c:	b	1693c <_start@@Base+0x3f40>
   169a0:	cmp	r3, #34	; 0x22
   169a4:	bne	165d8 <_start@@Base+0x3bdc>
   169a8:	add	r1, r1, #11
   169ac:	b	16878 <_start@@Base+0x3e7c>
   169b0:	ldrb	r3, [r0, #2]
   169b4:	cmp	r3, #32
   169b8:	addhi	r1, r0, #2
   169bc:	bls	16784 <_start@@Base+0x3d88>
   169c0:	b	16288 <_start@@Base+0x388c>
   169c4:	ldrb	r3, [r0, #2]
   169c8:	cmp	r3, #32
   169cc:	addhi	r1, r0, #2
   169d0:	bls	167d8 <_start@@Base+0x3ddc>
   169d4:	b	167e8 <_start@@Base+0x3dec>
   169d8:	mov	r1, r0
   169dc:	mov	r3, #8
   169e0:	mov	r2, r4
   169e4:	mov	r0, r8
   169e8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   169ec:	b	1698c <_start@@Base+0x3f90>
   169f0:	ldr	r3, [sp, #132]	; 0x84
   169f4:	ldr	r5, [sp, #120]	; 0x78
   169f8:	str	r3, [sp]
   169fc:	mov	r2, r4
   16a00:	ldr	r3, [sp, #128]	; 0x80
   16a04:	mov	r1, r5
   16a08:	mov	r0, r8
   16a0c:	bl	13b38 <_start@@Base+0x113c>
   16a10:	cmp	r4, r0
   16a14:	cmpne	r0, r5
   16a18:	bne	16998 <_start@@Base+0x3f9c>
   16a1c:	mov	r1, r0
   16a20:	mov	r3, #33	; 0x21
   16a24:	mov	r2, r4
   16a28:	mov	r0, r8
   16a2c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   16a30:	mov	r1, r0
   16a34:	b	16288 <_start@@Base+0x388c>
   16a38:	mov	r1, r5
   16a3c:	b	162b0 <_start@@Base+0x38b4>
   16a40:	mov	r1, r4
   16a44:	mov	r3, #10
   16a48:	mov	r2, r4
   16a4c:	mov	r0, r8
   16a50:	bl	27994 <flatcc_json_parser_set_error@@Base>
   16a54:	mov	r1, r0
   16a58:	b	16288 <_start@@Base+0x388c>
   16a5c:	ldrb	r3, [r1, #1]
   16a60:	cmp	r3, #32
   16a64:	addhi	r1, r1, #1
   16a68:	bls	16894 <_start@@Base+0x3e98>
   16a6c:	b	168a4 <_start@@Base+0x3ea8>
   16a70:	add	r3, r1, #1
   16a74:	str	r3, [sp, #120]	; 0x78
   16a78:	sub	r3, r4, r3
   16a7c:	cmp	r3, #1
   16a80:	ble	16a94 <_start@@Base+0x4098>
   16a84:	ldrb	r3, [r1, #1]
   16a88:	cmp	r3, #32
   16a8c:	bhi	168cc <_start@@Base+0x3ed0>
   16a90:	beq	16ad8 <_start@@Base+0x40dc>
   16a94:	ldr	r1, [sp, #120]	; 0x78
   16a98:	mov	r2, r4
   16a9c:	mov	r0, r8
   16aa0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   16aa4:	str	r0, [sp, #120]	; 0x78
   16aa8:	b	168cc <_start@@Base+0x3ed0>
   16aac:	ldrb	r2, [r5, #2]
   16ab0:	cmp	r2, #32
   16ab4:	addhi	r3, r5, #2
   16ab8:	bls	162f0 <_start@@Base+0x38f4>
   16abc:	b	16304 <_start@@Base+0x3908>
   16ac0:	add	r1, r3, #1
   16ac4:	mov	r2, r4
   16ac8:	mov	r0, r8
   16acc:	bl	12fa4 <_start@@Base+0x5a8>
   16ad0:	mov	r1, r0
   16ad4:	b	16288 <_start@@Base+0x388c>
   16ad8:	ldrb	r3, [r1, #2]
   16adc:	cmp	r3, #32
   16ae0:	addhi	r3, r1, #2
   16ae4:	strhi	r3, [sp, #120]	; 0x78
   16ae8:	bls	16a94 <_start@@Base+0x4098>
   16aec:	b	168cc <_start@@Base+0x3ed0>
   16af0:	push	{r4, r5, r6, r7, r8, r9, lr}
   16af4:	mov	r6, r1
   16af8:	sub	r1, r2, r1
   16afc:	cmp	r1, #8
   16b00:	sub	sp, sp, #12
   16b04:	mov	ip, r0
   16b08:	mov	r7, r3
   16b0c:	bls	16bec <_start@@Base+0x41f0>
   16b10:	ldrb	r8, [r6, #7]
   16b14:	mov	r9, #0
   16b18:	ldrb	r0, [r6, #6]
   16b1c:	lsr	r5, r0, #24
   16b20:	lsl	r4, r0, #8
   16b24:	orr	r8, r8, r4
   16b28:	orr	r9, r9, r5
   16b2c:	ldrb	r0, [r6, #5]
   16b30:	lsr	r5, r0, #16
   16b34:	lsl	r4, r0, #16
   16b38:	orr	r4, r4, r8
   16b3c:	orr	r5, r5, r9
   16b40:	ldrb	r0, [r6, #4]
   16b44:	lsr	r9, r0, #8
   16b48:	lsl	r8, r0, #24
   16b4c:	orr	r8, r8, r4
   16b50:	orr	r9, r9, r5
   16b54:	ldrb	r1, [r6, #3]
   16b58:	mov	r0, #0
   16b5c:	orr	r8, r8, r0
   16b60:	orr	r9, r9, r1
   16b64:	ldrb	r4, [r6, #2]
   16b68:	mov	r0, #0
   16b6c:	orr	r8, r8, r0
   16b70:	lsl	r1, r4, #8
   16b74:	orr	r9, r9, r1
   16b78:	ldrb	r4, [r6, #1]
   16b7c:	mov	r0, #0
   16b80:	orr	r0, r0, r8
   16b84:	lsl	r1, r4, #16
   16b88:	orr	r1, r1, r9
   16b8c:	ldrb	r8, [r6]
   16b90:	mov	r4, #0
   16b94:	orr	r0, r0, r4
   16b98:	lsl	r5, r8, #24
   16b9c:	add	r9, pc, #524	; 0x20c
   16ba0:	ldrd	r8, [r9]
   16ba4:	orr	r1, r1, r5
   16ba8:	cmp	r1, r9
   16bac:	cmpeq	r0, r8
   16bb0:	bls	16c1c <_start@@Base+0x4220>
   16bb4:	add	r9, pc, #508	; 0x1fc
   16bb8:	ldrd	r8, [r9]
   16bbc:	cmp	r1, r9
   16bc0:	cmpeq	r0, r8
   16bc4:	bhi	16c78 <_start@@Base+0x427c>
   16bc8:	add	r9, pc, #496	; 0x1f0
   16bcc:	ldrd	r8, [r9]
   16bd0:	mov	r0, #0
   16bd4:	cmp	r1, r9
   16bd8:	cmpeq	r0, r8
   16bdc:	beq	16d48 <_start@@Base+0x434c>
   16be0:	mov	r0, r6
   16be4:	add	sp, sp, #12
   16be8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16bec:	sub	r1, r1, #1
   16bf0:	cmp	r1, #7
   16bf4:	addls	pc, pc, r1, lsl #2
   16bf8:	b	16be0 <_start@@Base+0x41e4>
   16bfc:	b	16cf4 <_start@@Base+0x42f8>
   16c00:	b	16d00 <_start@@Base+0x4304>
   16c04:	b	16d0c <_start@@Base+0x4310>
   16c08:	b	16d18 <_start@@Base+0x431c>
   16c0c:	b	16d24 <_start@@Base+0x4328>
   16c10:	b	16d30 <_start@@Base+0x4334>
   16c14:	b	16d3c <_start@@Base+0x4340>
   16c18:	b	16b10 <_start@@Base+0x4114>
   16c1c:	add	r9, pc, #420	; 0x1a4
   16c20:	ldrd	r8, [r9]
   16c24:	mov	r0, #0
   16c28:	cmp	r1, r9
   16c2c:	cmpeq	r0, r8
   16c30:	bne	16be0 <_start@@Base+0x41e4>
   16c34:	ldr	r3, [sp, #44]	; 0x2c
   16c38:	mov	r0, ip
   16c3c:	str	r3, [sp]
   16c40:	mov	r1, r6
   16c44:	mov	r3, #4
   16c48:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16c4c:	cmp	r6, r0
   16c50:	movne	r2, #2
   16c54:	beq	16be0 <_start@@Base+0x41e4>
   16c58:	ldr	r1, [sp, #40]	; 0x28
   16c5c:	mov	r3, #0
   16c60:	mov	r6, r0
   16c64:	strd	r2, [r1]
   16c68:	mov	r0, r6
   16c6c:	str	r4, [r7]
   16c70:	add	sp, sp, #12
   16c74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16c78:	add	r5, pc, #336	; 0x150
   16c7c:	ldrd	r4, [r5]
   16c80:	bic	r8, r0, #255	; 0xff
   16c84:	cmp	r1, r5
   16c88:	cmpeq	r8, r4
   16c8c:	beq	16d70 <_start@@Base+0x4374>
   16c90:	add	r9, pc, #320	; 0x140
   16c94:	ldrd	r8, [r9]
   16c98:	ldr	r4, [pc, #320]	; 16de0 <_start@@Base+0x43e4>
   16c9c:	mvn	r5, #0
   16ca0:	and	r1, r1, r5
   16ca4:	and	r0, r0, r4
   16ca8:	cmp	r1, r9
   16cac:	cmpeq	r0, r8
   16cb0:	bne	16be0 <_start@@Base+0x41e4>
   16cb4:	ldr	r3, [sp, #44]	; 0x2c
   16cb8:	mov	r0, ip
   16cbc:	str	r3, [sp]
   16cc0:	mov	r1, r6
   16cc4:	mov	r3, #6
   16cc8:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16ccc:	cmp	r6, r0
   16cd0:	beq	16be0 <_start@@Base+0x41e4>
   16cd4:	ldr	r2, [sp, #40]	; 0x28
   16cd8:	mov	r6, r0
   16cdc:	mvn	r1, #0
   16ce0:	mvn	r0, #1
   16ce4:	mov	r3, #1
   16ce8:	strd	r0, [r2]
   16cec:	str	r3, [r7]
   16cf0:	b	16be0 <_start@@Base+0x41e4>
   16cf4:	mov	r0, #0
   16cf8:	mov	r1, #0
   16cfc:	b	16b8c <_start@@Base+0x4190>
   16d00:	mov	r8, #0
   16d04:	mov	r9, #0
   16d08:	b	16b78 <_start@@Base+0x417c>
   16d0c:	mov	r8, #0
   16d10:	mov	r9, #0
   16d14:	b	16b64 <_start@@Base+0x4168>
   16d18:	mov	r8, #0
   16d1c:	mov	r9, #0
   16d20:	b	16b54 <_start@@Base+0x4158>
   16d24:	mov	r4, #0
   16d28:	mov	r5, #0
   16d2c:	b	16b40 <_start@@Base+0x4144>
   16d30:	mov	r8, #0
   16d34:	mov	r9, #0
   16d38:	b	16b2c <_start@@Base+0x4130>
   16d3c:	mov	r8, #0
   16d40:	mov	r9, #0
   16d44:	b	16b18 <_start@@Base+0x411c>
   16d48:	ldr	r3, [sp, #44]	; 0x2c
   16d4c:	mov	r0, ip
   16d50:	str	r3, [sp]
   16d54:	mov	r1, r6
   16d58:	mov	r3, #4
   16d5c:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16d60:	cmp	r6, r0
   16d64:	beq	16be0 <_start@@Base+0x41e4>
   16d68:	mov	r2, #42	; 0x2a
   16d6c:	b	16c58 <_start@@Base+0x425c>
   16d70:	ldr	r3, [sp, #44]	; 0x2c
   16d74:	mov	r0, ip
   16d78:	str	r3, [sp]
   16d7c:	mov	r1, r6
   16d80:	mov	r3, #7
   16d84:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16d88:	cmp	r6, r0
   16d8c:	beq	16be0 <_start@@Base+0x41e4>
   16d90:	ldr	r2, [sp, #40]	; 0x28
   16d94:	mvn	r4, #0
   16d98:	mvn	r5, #0
   16d9c:	mov	r3, #1
   16da0:	strd	r4, [r2]
   16da4:	mov	r6, r0
   16da8:	str	r3, [r7]
   16dac:	b	16be0 <_start@@Base+0x41e4>
   16db0:			; <UNDEFINED> instruction: 0xffffffff
   16db4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16db8:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16dbc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16dc0:	andeq	r0, r0, r0
   16dc4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16dc8:	andeq	r0, r0, r0
   16dcc:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16dd0:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16dd4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16dd8:	strbvs	r0, [r7, #-0]!
   16ddc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16de0:			; <UNDEFINED> instruction: 0xffff0000
   16de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16de8:	mov	r7, r2
   16dec:	sub	r2, r2, r1
   16df0:	cmp	r2, #8
   16df4:	sub	sp, sp, #12
   16df8:	mov	r6, r1
   16dfc:	mov	sl, r0
   16e00:	mov	fp, r3
   16e04:	bls	16f10 <_start@@Base+0x4514>
   16e08:	ldrb	r0, [r6, #7]
   16e0c:	mov	r1, #0
   16e10:	ldrb	r2, [r6, #6]
   16e14:	lsr	r5, r2, #24
   16e18:	lsl	r4, r2, #8
   16e1c:	orr	r0, r0, r4
   16e20:	orr	r1, r1, r5
   16e24:	ldrb	r2, [r6, #5]
   16e28:	lsr	r5, r2, #16
   16e2c:	lsl	r4, r2, #16
   16e30:	orr	r4, r4, r0
   16e34:	orr	r5, r5, r1
   16e38:	ldrb	r2, [r6, #4]
   16e3c:	lsr	r1, r2, #8
   16e40:	lsl	r0, r2, #24
   16e44:	orr	r4, r4, r0
   16e48:	orr	r5, r5, r1
   16e4c:	ldrb	r1, [r6, #3]
   16e50:	mov	r0, #0
   16e54:	orr	r4, r4, r0
   16e58:	orr	r5, r5, r1
   16e5c:	ldrb	r2, [r6, #2]
   16e60:	mov	r0, #0
   16e64:	orr	r0, r0, r4
   16e68:	lsl	r1, r2, #8
   16e6c:	orr	r1, r1, r5
   16e70:	ldrb	r2, [r6, #1]
   16e74:	mov	r4, #0
   16e78:	orr	r4, r4, r0
   16e7c:	lsl	r5, r2, #16
   16e80:	orr	r5, r5, r1
   16e84:	ldrb	r2, [r6]
   16e88:	mov	r8, #0
   16e8c:	orr	r4, r4, r8
   16e90:	lsl	r9, r2, #24
   16e94:	add	r3, pc, #636	; 0x27c
   16e98:	ldrd	r2, [r3]
   16e9c:	orr	r5, r5, r9
   16ea0:	cmp	r5, r3
   16ea4:	cmpeq	r4, r2
   16ea8:	bls	16f40 <_start@@Base+0x4544>
   16eac:	add	r3, pc, #620	; 0x26c
   16eb0:	ldrd	r2, [r3]
   16eb4:	cmp	r5, r3
   16eb8:	cmpeq	r4, r2
   16ebc:	beq	17074 <_start@@Base+0x4678>
   16ec0:	add	r3, pc, #608	; 0x260
   16ec4:	ldrd	r2, [r3]
   16ec8:	bic	r0, r4, #255	; 0xff
   16ecc:	cmp	r5, r3
   16ed0:	cmpeq	r0, r2
   16ed4:	beq	170b0 <_start@@Base+0x46b4>
   16ed8:	add	r3, pc, #592	; 0x250
   16edc:	ldrd	r2, [r3]
   16ee0:	mov	r0, #0
   16ee4:	cmp	r5, r3
   16ee8:	cmpeq	r0, r2
   16eec:	beq	170ec <_start@@Base+0x46f0>
   16ef0:	add	r3, pc, #576	; 0x240
   16ef4:	ldrd	r2, [r3]
   16ef8:	cmp	r5, r3
   16efc:	cmpeq	r4, r2
   16f00:	beq	16f98 <_start@@Base+0x459c>
   16f04:	mov	r0, r6
   16f08:	add	sp, sp, #12
   16f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f10:	sub	r2, r2, #1
   16f14:	cmp	r2, #7
   16f18:	addls	pc, pc, r2, lsl #2
   16f1c:	b	16f04 <_start@@Base+0x4508>
   16f20:	b	17020 <_start@@Base+0x4624>
   16f24:	b	1702c <_start@@Base+0x4630>
   16f28:	b	17038 <_start@@Base+0x463c>
   16f2c:	b	17044 <_start@@Base+0x4648>
   16f30:	b	17050 <_start@@Base+0x4654>
   16f34:	b	1705c <_start@@Base+0x4660>
   16f38:	b	17068 <_start@@Base+0x466c>
   16f3c:	b	16e08 <_start@@Base+0x440c>
   16f40:	add	r3, pc, #504	; 0x1f8
   16f44:	ldrd	r2, [r3]
   16f48:	bic	r5, r5, #255	; 0xff
   16f4c:	mov	r4, #0
   16f50:	cmp	r5, r3
   16f54:	cmpeq	r4, r2
   16f58:	bne	16f04 <_start@@Base+0x4508>
   16f5c:	ldr	r3, [sp, #52]	; 0x34
   16f60:	mov	r2, r7
   16f64:	str	r3, [sp]
   16f68:	mov	r0, sl
   16f6c:	mov	r3, #3
   16f70:	mov	r1, r6
   16f74:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16f78:	cmp	r6, r0
   16f7c:	beq	16f08 <_start@@Base+0x450c>
   16f80:	ldr	r1, [sp, #48]	; 0x30
   16f84:	mov	r2, #4
   16f88:	mov	r3, #0
   16f8c:	strd	r2, [r1]
   16f90:	str	r8, [fp]
   16f94:	b	16f08 <_start@@Base+0x450c>
   16f98:	mov	r1, r7
   16f9c:	add	r0, r6, #8
   16fa0:	bl	12b28 <_start@@Base+0x12c>
   16fa4:	add	r3, pc, #412	; 0x19c
   16fa8:	ldrd	r2, [r3]
   16fac:	cmp	r1, r3
   16fb0:	cmpeq	r0, r2
   16fb4:	bne	16f04 <_start@@Base+0x4508>
   16fb8:	add	r4, r6, #16
   16fbc:	mov	r0, r4
   16fc0:	mov	r1, r7
   16fc4:	bl	12b28 <_start@@Base+0x12c>
   16fc8:	add	r3, pc, #384	; 0x180
   16fcc:	ldrd	r2, [r3]
   16fd0:	bic	r0, r0, #255	; 0xff
   16fd4:	cmp	r1, r3
   16fd8:	cmpeq	r0, r2
   16fdc:	bne	16f04 <_start@@Base+0x4508>
   16fe0:	ldr	r3, [sp, #52]	; 0x34
   16fe4:	mov	r2, r7
   16fe8:	str	r3, [sp]
   16fec:	mov	r0, sl
   16ff0:	mov	r3, #7
   16ff4:	mov	r1, r4
   16ff8:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   16ffc:	cmp	r4, r0
   17000:	beq	16f04 <_start@@Base+0x4508>
   17004:	mov	r4, #2
   17008:	ldr	r2, [sp, #48]	; 0x30
   1700c:	mov	r5, #0
   17010:	mov	r3, #0
   17014:	strd	r4, [r2]
   17018:	str	r3, [fp]
   1701c:	b	16f08 <_start@@Base+0x450c>
   17020:	mov	r4, #0
   17024:	mov	r5, #0
   17028:	b	16e84 <_start@@Base+0x4488>
   1702c:	mov	r0, #0
   17030:	mov	r1, #0
   17034:	b	16e70 <_start@@Base+0x4474>
   17038:	mov	r4, #0
   1703c:	mov	r5, #0
   17040:	b	16e5c <_start@@Base+0x4460>
   17044:	mov	r4, #0
   17048:	mov	r5, #0
   1704c:	b	16e4c <_start@@Base+0x4450>
   17050:	mov	r4, #0
   17054:	mov	r5, #0
   17058:	b	16e38 <_start@@Base+0x443c>
   1705c:	mov	r0, #0
   17060:	mov	r1, #0
   17064:	b	16e24 <_start@@Base+0x4428>
   17068:	mov	r0, #0
   1706c:	mov	r1, #0
   17070:	b	16e10 <_start@@Base+0x4414>
   17074:	ldr	r3, [sp, #52]	; 0x34
   17078:	mov	r2, r7
   1707c:	str	r3, [sp]
   17080:	mov	r0, sl
   17084:	mov	r3, #8
   17088:	mov	r1, r6
   1708c:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   17090:	cmp	r6, r0
   17094:	beq	16f04 <_start@@Base+0x4508>
   17098:	ldr	r1, [sp, #48]	; 0x30
   1709c:	mov	r2, #3
   170a0:	mov	r3, #0
   170a4:	strd	r2, [r1]
   170a8:	str	r8, [fp]
   170ac:	b	16f08 <_start@@Base+0x450c>
   170b0:	ldr	r3, [sp, #52]	; 0x34
   170b4:	mov	r2, r7
   170b8:	str	r3, [sp]
   170bc:	mov	r1, r6
   170c0:	mov	r3, #7
   170c4:	mov	r0, sl
   170c8:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   170cc:	cmp	r6, r0
   170d0:	beq	16ed8 <_start@@Base+0x44dc>
   170d4:	ldr	r1, [sp, #48]	; 0x30
   170d8:	mov	r2, #1
   170dc:	mov	r3, #0
   170e0:	strd	r2, [r1]
   170e4:	str	r8, [fp]
   170e8:	b	16f08 <_start@@Base+0x450c>
   170ec:	ldr	r3, [sp, #52]	; 0x34
   170f0:	mov	r2, r7
   170f4:	str	r3, [sp]
   170f8:	mov	r0, sl
   170fc:	mov	r3, #4
   17100:	mov	r1, r6
   17104:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   17108:	cmp	r6, r0
   1710c:	movne	r4, #0
   17110:	bne	17008 <_start@@Base+0x460c>
   17114:	b	16f04 <_start@@Base+0x4508>
   17118:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   1711c:	stclmi	14, cr6, [pc, #-460]!	; 16f58 <_start@@Base+0x455c>
   17120:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   17124:	stclmi	14, cr6, [pc, #-460]!	; 16f60 <_start@@Base+0x4564>
   17128:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   1712c:	stclmi	14, cr6, [pc, #-460]!	; 16f68 <_start@@Base+0x456c>
   17130:	andeq	r0, r0, r0
   17134:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17138:	cmnpl	r9, #112, 26	; 0x1c00
   1713c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   17140:	andeq	r0, r0, r0
   17144:	cmnmi	ip, r0, lsl #8
   17148:	rsbvs	r6, ip, #364904448	; 0x15c00000
   1714c:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   17150:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17154:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   17158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1715c:	mov	r4, r1
   17160:	sub	sp, sp, #28
   17164:	mov	r1, r2
   17168:	mov	r8, r0
   1716c:	mov	r0, r4
   17170:	mov	r5, r2
   17174:	mov	sl, r3
   17178:	bl	12b28 <_start@@Base+0x12c>
   1717c:	add	r3, pc, #956	; 0x3bc
   17180:	ldrd	r2, [r3]
   17184:	ldr	r7, [sp, #64]	; 0x40
   17188:	ldr	fp, [sp, #68]	; 0x44
   1718c:	cmp	r1, r3
   17190:	cmpeq	r0, r2
   17194:	bhi	171b8 <_start@@Base+0x47bc>
   17198:	add	r3, pc, #936	; 0x3a8
   1719c:	ldrd	r2, [r3]
   171a0:	cmp	r1, r3
   171a4:	cmpeq	r0, r2
   171a8:	beq	172cc <_start@@Base+0x48d0>
   171ac:	mov	r0, r4
   171b0:	add	sp, sp, #28
   171b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171b8:	add	r3, pc, #912	; 0x390
   171bc:	ldrd	r2, [r3]
   171c0:	cmp	r1, r3
   171c4:	cmpeq	r0, r2
   171c8:	beq	1734c <_start@@Base+0x4950>
   171cc:	add	r3, pc, #900	; 0x384
   171d0:	ldrd	r2, [r3]
   171d4:	cmp	r1, r3
   171d8:	cmpeq	r0, r2
   171dc:	bne	171ac <_start@@Base+0x47b0>
   171e0:	mov	r1, r5
   171e4:	add	r0, r4, #8
   171e8:	bl	12b28 <_start@@Base+0x12c>
   171ec:	add	r3, pc, #876	; 0x36c
   171f0:	ldrd	r2, [r3]
   171f4:	cmp	r1, r3
   171f8:	cmpeq	r0, r2
   171fc:	bne	171ac <_start@@Base+0x47b0>
   17200:	mov	r1, r5
   17204:	add	r0, r4, #16
   17208:	bl	12b28 <_start@@Base+0x12c>
   1720c:	add	r3, pc, #852	; 0x354
   17210:	ldrd	r2, [r3]
   17214:	cmp	r1, r3
   17218:	cmpeq	r0, r2
   1721c:	bne	171ac <_start@@Base+0x47b0>
   17220:	mov	r1, r5
   17224:	add	r0, r4, #24
   17228:	bl	12b28 <_start@@Base+0x12c>
   1722c:	add	r3, pc, #828	; 0x33c
   17230:	ldrd	r2, [r3]
   17234:	cmp	r1, r3
   17238:	cmpeq	r0, r2
   1723c:	bne	171ac <_start@@Base+0x47b0>
   17240:	add	r6, r4, #32
   17244:	mov	r0, r6
   17248:	mov	r1, r5
   1724c:	bl	12b28 <_start@@Base+0x12c>
   17250:	mov	r0, #0
   17254:	and	r1, r1, #-16777216	; 0xff000000
   17258:	cmp	r1, #1694498816	; 0x65000000
   1725c:	cmpeq	r0, #0
   17260:	bne	171ac <_start@@Base+0x47b0>
   17264:	sub	r6, r5, r6
   17268:	cmp	r6, #1
   1726c:	ble	171ac <_start@@Base+0x47b0>
   17270:	ldrb	r3, [r4, #33]	; 0x21
   17274:	cmp	r3, #46	; 0x2e
   17278:	bne	171ac <_start@@Base+0x47b0>
   1727c:	add	r9, r4, #34	; 0x22
   17280:	mov	r0, r9
   17284:	mov	r1, r5
   17288:	bl	12b28 <_start@@Base+0x12c>
   1728c:	mov	r2, #0
   17290:	bic	r3, r1, #255	; 0xff
   17294:	strd	r0, [sp, #8]
   17298:	add	r1, pc, #728	; 0x2d8
   1729c:	ldrd	r0, [r1]
   172a0:	cmp	r3, r1
   172a4:	cmpeq	r2, r0
   172a8:	beq	178dc <_start@@Base+0x4ee0>
   172ac:	add	r3, pc, #716	; 0x2cc
   172b0:	ldrd	r2, [r3]
   172b4:	ldrd	r0, [sp, #8]
   172b8:	cmp	r1, r3
   172bc:	cmpeq	r0, r2
   172c0:	beq	1786c <_start@@Base+0x4e70>
   172c4:	mov	r4, r9
   172c8:	b	171ac <_start@@Base+0x47b0>
   172cc:	mov	r1, r5
   172d0:	add	r0, r4, #8
   172d4:	bl	12b28 <_start@@Base+0x12c>
   172d8:	add	r3, pc, #680	; 0x2a8
   172dc:	ldrd	r2, [r3]
   172e0:	cmp	r1, r3
   172e4:	cmpeq	r0, r2
   172e8:	bne	171ac <_start@@Base+0x47b0>
   172ec:	add	r6, r4, #16
   172f0:	mov	r0, r6
   172f4:	mov	r1, r5
   172f8:	bl	12b28 <_start@@Base+0x12c>
   172fc:	mov	r0, #0
   17300:	and	r1, r1, #-16777216	; 0xff000000
   17304:	cmp	r1, #1912602624	; 0x72000000
   17308:	cmpeq	r0, #0
   1730c:	bne	171ac <_start@@Base+0x47b0>
   17310:	sub	r6, r5, r6
   17314:	cmp	r6, #1
   17318:	ble	171ac <_start@@Base+0x47b0>
   1731c:	ldrb	r3, [r4, #17]
   17320:	cmp	r3, #46	; 0x2e
   17324:	bne	171ac <_start@@Base+0x47b0>
   17328:	str	fp, [sp, #68]	; 0x44
   1732c:	str	r7, [sp, #64]	; 0x40
   17330:	mov	r3, sl
   17334:	mov	r2, r5
   17338:	add	r1, r4, #18
   1733c:	mov	r0, r8
   17340:	add	sp, sp, #28
   17344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17348:	b	12ca8 <_start@@Base+0x2ac>
   1734c:	mov	r1, r5
   17350:	add	r0, r4, #8
   17354:	bl	12b28 <_start@@Base+0x12c>
   17358:	add	r3, pc, #560	; 0x230
   1735c:	ldrd	r2, [r3]
   17360:	cmp	r1, r3
   17364:	cmpeq	r0, r2
   17368:	bhi	17418 <_start@@Base+0x4a1c>
   1736c:	add	r3, pc, #548	; 0x224
   17370:	ldrd	r2, [r3]
   17374:	cmp	r1, r3
   17378:	cmpeq	r0, r2
   1737c:	bls	174b8 <_start@@Base+0x4abc>
   17380:	add	r3, pc, #536	; 0x218
   17384:	ldrd	r2, [r3]
   17388:	cmp	r1, r3
   1738c:	cmpeq	r0, r2
   17390:	beq	177cc <_start@@Base+0x4dd0>
   17394:	add	r3, pc, #524	; 0x20c
   17398:	ldrd	r2, [r3]
   1739c:	cmp	r1, r3
   173a0:	cmpeq	r0, r2
   173a4:	bne	171ac <_start@@Base+0x47b0>
   173a8:	add	r6, r4, #16
   173ac:	mov	r0, r6
   173b0:	mov	r1, r5
   173b4:	bl	12b28 <_start@@Base+0x12c>
   173b8:	ldr	r3, [pc, #536]	; 175d8 <_start@@Base+0x4bdc>
   173bc:	mov	r2, #0
   173c0:	and	r3, r3, r1
   173c4:	ldr	r1, [pc, #528]	; 175dc <_start@@Base+0x4be0>
   173c8:	and	r2, r2, r0
   173cc:	cmp	r3, r1
   173d0:	mov	r0, #0
   173d4:	cmpeq	r2, r0
   173d8:	bne	171ac <_start@@Base+0x47b0>
   173dc:	sub	r6, r5, r6
   173e0:	cmp	r6, #2
   173e4:	ble	171ac <_start@@Base+0x47b0>
   173e8:	ldrb	r3, [r4, #18]
   173ec:	cmp	r3, #46	; 0x2e
   173f0:	bne	171ac <_start@@Base+0x47b0>
   173f4:	str	fp, [sp, #68]	; 0x44
   173f8:	str	r7, [sp, #64]	; 0x40
   173fc:	mov	r3, sl
   17400:	mov	r2, r5
   17404:	add	r1, r4, #19
   17408:	mov	r0, r8
   1740c:	add	sp, sp, #28
   17410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17414:	b	15888 <_start@@Base+0x2e8c>
   17418:	add	r3, pc, #400	; 0x190
   1741c:	ldrd	r2, [r3]
   17420:	cmp	r1, r3
   17424:	cmpeq	r0, r2
   17428:	beq	175e4 <_start@@Base+0x4be8>
   1742c:	add	r3, pc, #388	; 0x184
   17430:	ldrd	r2, [r3]
   17434:	cmp	r1, r3
   17438:	cmpeq	r0, r2
   1743c:	bhi	17648 <_start@@Base+0x4c4c>
   17440:	add	r3, pc, #376	; 0x178
   17444:	ldrd	r2, [r3]
   17448:	cmp	r1, r3
   1744c:	cmpeq	r0, r2
   17450:	bne	171ac <_start@@Base+0x47b0>
   17454:	add	r6, r4, #16
   17458:	mov	r0, r6
   1745c:	mov	r1, r5
   17460:	bl	12b28 <_start@@Base+0x12c>
   17464:	add	r3, pc, #348	; 0x15c
   17468:	ldrd	r2, [r3]
   1746c:	bic	r0, r0, #255	; 0xff
   17470:	cmp	r1, r3
   17474:	cmpeq	r0, r2
   17478:	bne	171ac <_start@@Base+0x47b0>
   1747c:	sub	r6, r5, r6
   17480:	cmp	r6, #7
   17484:	ble	171ac <_start@@Base+0x47b0>
   17488:	ldrb	r3, [r4, #23]
   1748c:	cmp	r3, #46	; 0x2e
   17490:	bne	171ac <_start@@Base+0x47b0>
   17494:	str	fp, [sp, #68]	; 0x44
   17498:	str	r7, [sp, #64]	; 0x40
   1749c:	mov	r3, sl
   174a0:	mov	r2, r5
   174a4:	add	r1, r4, #24
   174a8:	mov	r0, r8
   174ac:	add	sp, sp, #28
   174b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b4:	b	16af0 <_start@@Base+0x40f4>
   174b8:	add	r3, pc, #272	; 0x110
   174bc:	ldrd	r2, [r3]
   174c0:	cmp	r1, r3
   174c4:	cmpeq	r0, r2
   174c8:	bne	171ac <_start@@Base+0x47b0>
   174cc:	add	r6, r4, #16
   174d0:	mov	r0, r6
   174d4:	mov	r1, r5
   174d8:	bl	12b28 <_start@@Base+0x12c>
   174dc:	ldr	r3, [pc, #244]	; 175d8 <_start@@Base+0x4bdc>
   174e0:	mov	r2, #0
   174e4:	and	r3, r3, r1
   174e8:	ldr	r1, [pc, #240]	; 175e0 <_start@@Base+0x4be4>
   174ec:	and	r2, r2, r0
   174f0:	cmp	r3, r1
   174f4:	mov	r0, #0
   174f8:	cmpeq	r2, r0
   174fc:	bne	171ac <_start@@Base+0x47b0>
   17500:	sub	r6, r5, r6
   17504:	cmp	r6, #2
   17508:	ble	171ac <_start@@Base+0x47b0>
   1750c:	ldrb	r3, [r4, #18]
   17510:	cmp	r3, #46	; 0x2e
   17514:	bne	171ac <_start@@Base+0x47b0>
   17518:	str	fp, [sp, #68]	; 0x44
   1751c:	str	r7, [sp, #64]	; 0x40
   17520:	mov	r3, sl
   17524:	mov	r2, r5
   17528:	add	r1, r4, #19
   1752c:	mov	r0, r8
   17530:	add	sp, sp, #28
   17534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17538:	b	16de4 <_start@@Base+0x43e8>
   1753c:	nop			; (mov r0, r0)
   17540:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   17544:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17548:	cmnvs	r3, lr, lsr #18
   1754c:			; <UNDEFINED> instruction: 0x46616e74
   17550:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   17554:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17558:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   1755c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17560:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17564:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17568:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   1756c:	cmnpl	r0, #-1073741800	; 0xc0000018
   17570:	cmnvs	ip, #100, 10	; 0x19000000
   17574:	svcvs	0x006d496e
   17578:	andeq	r0, r0, r0
   1757c:	strbtmi	r6, [pc], -r0, lsl #30
   17580:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   17584:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   17588:	cmnvs	r3, r5, ror #8
   1758c:	cmnmi	r8, #-2147483620	; 0x8000001c
   17590:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   17594:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17598:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1759c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175a0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   175a4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175a8:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   175ac:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175b0:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   175b4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175b8:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   175bc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175c0:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   175c4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175c8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   175cc:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   175d0:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   175d4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175d8:			; <UNDEFINED> instruction: 0xffff0000
   175dc:	svcvs	0x006f0000
   175e0:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   175e4:	add	r6, r4, #16
   175e8:	mov	r0, r6
   175ec:	mov	r1, r5
   175f0:	bl	12b28 <_start@@Base+0x12c>
   175f4:	add	r3, pc, #940	; 0x3ac
   175f8:	ldrd	r2, [r3]
   175fc:	bic	r0, r0, #255	; 0xff
   17600:	cmp	r1, r3
   17604:	cmpeq	r0, r2
   17608:	bne	171ac <_start@@Base+0x47b0>
   1760c:	sub	r6, r5, r6
   17610:	cmp	r6, #7
   17614:	ble	171ac <_start@@Base+0x47b0>
   17618:	ldrb	r3, [r4, #23]
   1761c:	cmp	r3, #46	; 0x2e
   17620:	bne	171ac <_start@@Base+0x47b0>
   17624:	str	fp, [sp, #68]	; 0x44
   17628:	str	r7, [sp, #64]	; 0x40
   1762c:	mov	r3, sl
   17630:	mov	r2, r5
   17634:	add	r1, r4, #24
   17638:	mov	r0, r8
   1763c:	add	sp, sp, #28
   17640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17644:	b	15f90 <_start@@Base+0x3594>
   17648:	add	r3, pc, #864	; 0x360
   1764c:	ldrd	r2, [r3]
   17650:	cmp	r1, r3
   17654:	cmpeq	r0, r2
   17658:	bne	171ac <_start@@Base+0x47b0>
   1765c:	add	r9, r4, #16
   17660:	mov	r0, r9
   17664:	mov	r1, r5
   17668:	bl	12b28 <_start@@Base+0x12c>
   1766c:	mov	r3, r1
   17670:	bic	r2, r0, #255	; 0xff
   17674:	strd	r0, [sp, #8]
   17678:	add	r1, pc, #824	; 0x338
   1767c:	ldrd	r0, [r1]
   17680:	cmp	r3, r1
   17684:	cmpeq	r2, r0
   17688:	beq	17830 <_start@@Base+0x4e34>
   1768c:	add	r3, pc, #812	; 0x32c
   17690:	ldrd	r2, [r3]
   17694:	ldrd	r0, [sp, #8]
   17698:	cmp	r1, r3
   1769c:	cmpeq	r0, r2
   176a0:	bne	171ac <_start@@Base+0x47b0>
   176a4:	add	r6, r4, #24
   176a8:	mov	r0, r6
   176ac:	mov	r1, r5
   176b0:	bl	12b28 <_start@@Base+0x12c>
   176b4:	add	r3, pc, #780	; 0x30c
   176b8:	ldrd	r2, [r3]
   176bc:	mov	r0, #0
   176c0:	bic	r1, r1, #255	; 0xff
   176c4:	cmp	r1, r3
   176c8:	cmpeq	r0, r2
   176cc:	bne	171ac <_start@@Base+0x47b0>
   176d0:	sub	r6, r5, r6
   176d4:	cmp	r6, #3
   176d8:	ble	171ac <_start@@Base+0x47b0>
   176dc:	ldrb	r3, [r4, #27]
   176e0:	cmp	r3, #46	; 0x2e
   176e4:	bne	171ac <_start@@Base+0x47b0>
   176e8:	add	r6, r4, #28
   176ec:	sub	r3, r5, r6
   176f0:	cmp	r3, #8
   176f4:	bls	17918 <_start@@Base+0x4f1c>
   176f8:	ldrb	r2, [r4, #35]	; 0x23
   176fc:	mov	r3, #0
   17700:	strd	r2, [sp, #8]
   17704:	ldrb	r0, [r4, #34]	; 0x22
   17708:	lsr	r3, r0, #24
   1770c:	lsl	r2, r0, #8
   17710:	ldrd	r0, [sp, #8]
   17714:	orr	r0, r0, r2
   17718:	orr	r1, r1, r3
   1771c:	strd	r0, [sp, #8]
   17720:	ldrb	r0, [r4, #33]	; 0x21
   17724:	lsr	r3, r0, #16
   17728:	lsl	r2, r0, #16
   1772c:	ldrd	r0, [sp, #8]
   17730:	orr	r0, r0, r2
   17734:	orr	r1, r1, r3
   17738:	strd	r0, [sp, #8]
   1773c:	ldrb	r0, [r4, #32]
   17740:	lsr	r3, r0, #8
   17744:	ldrd	r0, [sp, #8]
   17748:	orr	r1, r1, r3
   1774c:	mov	r3, r1
   17750:	ldrb	r1, [r4, #31]
   17754:	orr	r1, r1, r3
   17758:	ldrb	r2, [r4, #30]
   1775c:	mov	r3, #0
   17760:	strd	r2, [sp, #8]
   17764:	ldr	ip, [sp, #8]
   17768:	lsl	r3, ip, #8
   1776c:	orr	r3, r3, r1
   17770:	ldrb	r0, [r4, #29]
   17774:	mov	r1, #0
   17778:	strd	r0, [sp, #8]
   1777c:	ldr	ip, [sp, #8]
   17780:	lsl	r1, ip, #16
   17784:	orr	r3, r3, r1
   17788:	ldrb	r0, [r4, #28]
   1778c:	mov	r1, #0
   17790:	mov	r2, #0
   17794:	strd	r0, [sp, #16]
   17798:	ldr	r1, [sp, #16]
   1779c:	lsl	r1, r1, #24
   177a0:	str	r1, [sp, #12]
   177a4:	mov	r1, #0
   177a8:	str	r1, [sp, #8]
   177ac:	ldrd	r0, [sp, #8]
   177b0:	orr	r1, r1, r3
   177b4:	and	r3, r1, #-16777216	; 0xff000000
   177b8:	cmp	r3, #2013265920	; 0x78000000
   177bc:	cmpeq	r2, #0
   177c0:	beq	17948 <_start@@Base+0x4f4c>
   177c4:	mov	r4, r6
   177c8:	b	171ac <_start@@Base+0x47b0>
   177cc:	add	r6, r4, #16
   177d0:	mov	r0, r6
   177d4:	mov	r1, r5
   177d8:	bl	12b28 <_start@@Base+0x12c>
   177dc:	add	r3, pc, #492	; 0x1ec
   177e0:	ldrd	r2, [r3]
   177e4:	mov	r0, #0
   177e8:	cmp	r1, r3
   177ec:	cmpeq	r0, r2
   177f0:	bne	171ac <_start@@Base+0x47b0>
   177f4:	sub	r6, r5, r6
   177f8:	cmp	r6, #4
   177fc:	ble	171ac <_start@@Base+0x47b0>
   17800:	ldrb	r3, [r4, #20]
   17804:	cmp	r3, #46	; 0x2e
   17808:	bne	171ac <_start@@Base+0x47b0>
   1780c:	str	fp, [sp, #68]	; 0x44
   17810:	str	r7, [sp, #64]	; 0x40
   17814:	mov	r3, sl
   17818:	mov	r2, r5
   1781c:	add	r1, r4, #21
   17820:	mov	r0, r8
   17824:	add	sp, sp, #28
   17828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1782c:	b	15d28 <_start@@Base+0x332c>
   17830:	sub	r9, r5, r9
   17834:	cmp	r9, #7
   17838:	ble	171ac <_start@@Base+0x47b0>
   1783c:	ldrb	r3, [r4, #23]
   17840:	cmp	r3, #46	; 0x2e
   17844:	bne	171ac <_start@@Base+0x47b0>
   17848:	str	fp, [sp, #68]	; 0x44
   1784c:	str	r7, [sp, #64]	; 0x40
   17850:	mov	r3, sl
   17854:	mov	r2, r5
   17858:	add	r1, r4, #24
   1785c:	mov	r0, r8
   17860:	add	sp, sp, #28
   17864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17868:	b	15ad0 <_start@@Base+0x30d4>
   1786c:	add	r6, r4, #42	; 0x2a
   17870:	mov	r0, r6
   17874:	mov	r1, r5
   17878:	bl	12b28 <_start@@Base+0x12c>
   1787c:	ldr	r3, [pc, #340]	; 179d8 <_start@@Base+0x4fdc>
   17880:	mov	r2, #0
   17884:	and	r3, r3, r1
   17888:	ldr	r1, [pc, #332]	; 179dc <_start@@Base+0x4fe0>
   1788c:	and	r2, r2, r0
   17890:	cmp	r3, r1
   17894:	mov	r0, #0
   17898:	cmpeq	r2, r0
   1789c:	bne	172c4 <_start@@Base+0x48c8>
   178a0:	str	fp, [sp]
   178a4:	mov	r2, r5
   178a8:	mov	r0, r8
   178ac:	mov	r3, #2
   178b0:	mov	r1, r6
   178b4:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   178b8:	cmp	r6, r0
   178bc:	mov	r4, r0
   178c0:	beq	172c4 <_start@@Base+0x48c8>
   178c4:	mov	r0, #0
   178c8:	mov	r1, #0
   178cc:	mov	r3, #0
   178d0:	strd	r0, [r7]
   178d4:	str	r3, [sl]
   178d8:	b	171ac <_start@@Base+0x47b0>
   178dc:	str	fp, [sp]
   178e0:	mov	r2, r5
   178e4:	mov	r0, r8
   178e8:	mov	r3, #3
   178ec:	mov	r1, r9
   178f0:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   178f4:	cmp	r9, r0
   178f8:	mov	r4, r0
   178fc:	beq	171ac <_start@@Base+0x47b0>
   17900:	mov	r0, #17
   17904:	mov	r1, #0
   17908:	mov	r3, #0
   1790c:	strd	r0, [r7]
   17910:	str	r3, [sl]
   17914:	b	171ac <_start@@Base+0x47b0>
   17918:	sub	r3, r3, #1
   1791c:	cmp	r3, #7
   17920:	addls	pc, pc, r3, lsl #2
   17924:	b	177c4 <_start@@Base+0x4dc8>
   17928:	b	17a08 <_start@@Base+0x500c>
   1792c:	b	17a00 <_start@@Base+0x5004>
   17930:	b	179f8 <_start@@Base+0x4ffc>
   17934:	b	179f0 <_start@@Base+0x4ff4>
   17938:	b	179e0 <_start@@Base+0x4fe4>
   1793c:	b	17994 <_start@@Base+0x4f98>
   17940:	b	17984 <_start@@Base+0x4f88>
   17944:	b	176f8 <_start@@Base+0x4cfc>
   17948:	str	fp, [sp]
   1794c:	mov	r2, r5
   17950:	mov	r0, r8
   17954:	mov	r3, #1
   17958:	mov	r1, r6
   1795c:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   17960:	cmp	r6, r0
   17964:	mov	r4, r0
   17968:	beq	171ac <_start@@Base+0x47b0>
   1796c:	mov	r3, #0
   17970:	mov	r2, #0
   17974:	strd	r2, [r7]
   17978:	ldr	r3, [sp, #8]
   1797c:	str	r3, [sl]
   17980:	b	171ac <_start@@Base+0x47b0>
   17984:	mov	r2, #0
   17988:	mov	r3, #0
   1798c:	strd	r2, [sp, #8]
   17990:	b	17704 <_start@@Base+0x4d08>
   17994:	mov	r2, #0
   17998:	mov	r3, #0
   1799c:	strd	r2, [sp, #8]
   179a0:	b	17720 <_start@@Base+0x4d24>
   179a4:	nop			; (mov r0, r0)
   179a8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   179ac:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   179b0:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   179b4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   179b8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   179bc:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   179c0:	rsbsvc	r7, r4, r5, ror #18
   179c4:	svcvs	0x0074656d
   179c8:	andeq	r0, r0, r0
   179cc:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   179d0:	andeq	r0, r0, r0
   179d4:	svcvs	0x006c6f72
   179d8:			; <UNDEFINED> instruction: 0xffff0000
   179dc:	cmnvs	ip, r0
   179e0:	mov	r2, #0
   179e4:	mov	r3, #0
   179e8:	strd	r2, [sp, #8]
   179ec:	b	1773c <_start@@Base+0x4d40>
   179f0:	mov	r3, #0
   179f4:	b	17750 <_start@@Base+0x4d54>
   179f8:	mov	r1, #0
   179fc:	b	17758 <_start@@Base+0x4d5c>
   17a00:	mov	r3, #0
   17a04:	b	17770 <_start@@Base+0x4d74>
   17a08:	mov	r3, #0
   17a0c:	b	17788 <_start@@Base+0x4d8c>
   17a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a14:	mov	r4, r1
   17a18:	sub	sp, sp, #12
   17a1c:	mov	r1, r2
   17a20:	mov	r5, r0
   17a24:	mov	r0, r4
   17a28:	mov	sl, r2
   17a2c:	mov	fp, r3
   17a30:	bl	12b28 <_start@@Base+0x12c>
   17a34:	add	r3, pc, #780	; 0x30c
   17a38:	ldrd	r2, [r3]
   17a3c:	ldr	r8, [sp, #48]	; 0x30
   17a40:	ldr	r9, [sp, #52]	; 0x34
   17a44:	cmp	r1, r3
   17a48:	cmpeq	r0, r2
   17a4c:	bhi	17a8c <_start@@Base+0x5090>
   17a50:	add	r3, pc, #760	; 0x2f8
   17a54:	ldrd	r2, [r3]
   17a58:	cmp	r1, r3
   17a5c:	cmpeq	r0, r2
   17a60:	bhi	17bd8 <_start@@Base+0x51dc>
   17a64:	add	r3, pc, #748	; 0x2ec
   17a68:	ldrd	r2, [r3]
   17a6c:	bic	r1, r1, #255	; 0xff
   17a70:	mov	r0, #0
   17a74:	cmp	r1, r3
   17a78:	cmpeq	r0, r2
   17a7c:	beq	17c98 <_start@@Base+0x529c>
   17a80:	mov	r0, r4
   17a84:	add	sp, sp, #12
   17a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a8c:	add	r3, pc, #716	; 0x2cc
   17a90:	ldrd	r2, [r3]
   17a94:	cmp	r1, r3
   17a98:	cmpeq	r0, r2
   17a9c:	bhi	17af0 <_start@@Base+0x50f4>
   17aa0:	add	r3, pc, #704	; 0x2c0
   17aa4:	ldrd	r2, [r3]
   17aa8:	cmp	r1, r3
   17aac:	cmpeq	r0, r2
   17ab0:	bne	17a80 <_start@@Base+0x5084>
   17ab4:	sub	r3, sl, r4
   17ab8:	cmp	r3, #8
   17abc:	ble	17a80 <_start@@Base+0x5084>
   17ac0:	ldrb	r3, [r4, #8]
   17ac4:	cmp	r3, #46	; 0x2e
   17ac8:	bne	17a80 <_start@@Base+0x5084>
   17acc:	str	r9, [sp, #52]	; 0x34
   17ad0:	str	r8, [sp, #48]	; 0x30
   17ad4:	mov	r3, fp
   17ad8:	mov	r2, sl
   17adc:	add	r1, r4, #9
   17ae0:	mov	r0, r5
   17ae4:	add	sp, sp, #12
   17ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aec:	b	15f90 <_start@@Base+0x3594>
   17af0:	add	r3, pc, #632	; 0x278
   17af4:	ldrd	r2, [r3]
   17af8:	cmp	r1, r3
   17afc:	cmpeq	r0, r2
   17b00:	bls	17c48 <_start@@Base+0x524c>
   17b04:	add	r3, pc, #620	; 0x26c
   17b08:	ldrd	r2, [r3]
   17b0c:	cmp	r1, r3
   17b10:	cmpeq	r0, r2
   17b14:	beq	17d08 <_start@@Base+0x530c>
   17b18:	add	r3, pc, #608	; 0x260
   17b1c:	ldrd	r2, [r3]
   17b20:	cmp	r1, r3
   17b24:	cmpeq	r0, r2
   17b28:	bne	17a80 <_start@@Base+0x5084>
   17b2c:	add	r6, r4, #8
   17b30:	mov	r0, r6
   17b34:	mov	r1, sl
   17b38:	bl	12b28 <_start@@Base+0x12c>
   17b3c:	add	r3, pc, #580	; 0x244
   17b40:	ldrd	r2, [r3]
   17b44:	mov	r0, #0
   17b48:	cmp	r1, r3
   17b4c:	cmpeq	r0, r2
   17b50:	bne	17a80 <_start@@Base+0x5084>
   17b54:	sub	r3, sl, r6
   17b58:	cmp	r3, #4
   17b5c:	ble	17a80 <_start@@Base+0x5084>
   17b60:	ldrb	r3, [r4, #12]
   17b64:	cmp	r3, #46	; 0x2e
   17b68:	bne	17a80 <_start@@Base+0x5084>
   17b6c:	add	r7, r4, #13
   17b70:	cmp	r6, r7
   17b74:	beq	17a80 <_start@@Base+0x5084>
   17b78:	mov	r1, sl
   17b7c:	mov	r0, r7
   17b80:	bl	12b28 <_start@@Base+0x12c>
   17b84:	mov	r0, #0
   17b88:	and	r1, r1, #-16777216	; 0xff000000
   17b8c:	cmp	r1, #2013265920	; 0x78000000
   17b90:	cmpeq	r0, #0
   17b94:	movne	r4, r7
   17b98:	bne	17a80 <_start@@Base+0x5084>
   17b9c:	str	r9, [sp]
   17ba0:	mov	r2, sl
   17ba4:	mov	r0, r5
   17ba8:	mov	r3, #1
   17bac:	mov	r1, r7
   17bb0:	bl	28714 <flatcc_json_parser_match_constant@@Base>
   17bb4:	cmp	r7, r0
   17bb8:	mov	r4, r0
   17bbc:	beq	17a80 <_start@@Base+0x5084>
   17bc0:	mov	r0, #0
   17bc4:	mov	r1, #0
   17bc8:	mov	r3, #0
   17bcc:	strd	r0, [r8]
   17bd0:	str	r3, [fp]
   17bd4:	b	17a80 <_start@@Base+0x5084>
   17bd8:	add	r7, pc, #432	; 0x1b0
   17bdc:	ldrd	r6, [r7]
   17be0:	bic	r3, r1, #255	; 0xff
   17be4:	mov	r2, #0
   17be8:	cmp	r3, r7
   17bec:	cmpeq	r2, r6
   17bf0:	beq	17ccc <_start@@Base+0x52d0>
   17bf4:	add	r3, pc, #412	; 0x19c
   17bf8:	ldrd	r2, [r3]
   17bfc:	and	r0, r0, #-16777216	; 0xff000000
   17c00:	cmp	r1, r3
   17c04:	cmpeq	r0, r2
   17c08:	bne	17a80 <_start@@Base+0x5084>
   17c0c:	sub	r3, sl, r4
   17c10:	cmp	r3, #5
   17c14:	ble	17a80 <_start@@Base+0x5084>
   17c18:	ldrb	r3, [r4, #5]
   17c1c:	cmp	r3, #46	; 0x2e
   17c20:	bne	17a80 <_start@@Base+0x5084>
   17c24:	str	r9, [sp, #52]	; 0x34
   17c28:	str	r8, [sp, #48]	; 0x30
   17c2c:	mov	r3, fp
   17c30:	mov	r2, sl
   17c34:	add	r1, r4, #6
   17c38:	mov	r0, r5
   17c3c:	add	sp, sp, #12
   17c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c44:	b	15d28 <_start@@Base+0x332c>
   17c48:	add	r3, pc, #336	; 0x150
   17c4c:	ldrd	r2, [r3]
   17c50:	cmp	r1, r3
   17c54:	cmpeq	r0, r2
   17c58:	bne	17a80 <_start@@Base+0x5084>
   17c5c:	sub	r3, sl, r4
   17c60:	cmp	r3, #8
   17c64:	ble	17a80 <_start@@Base+0x5084>
   17c68:	ldrb	r3, [r4, #8]
   17c6c:	cmp	r3, #46	; 0x2e
   17c70:	bne	17a80 <_start@@Base+0x5084>
   17c74:	str	r9, [sp, #52]	; 0x34
   17c78:	str	r8, [sp, #48]	; 0x30
   17c7c:	mov	r3, fp
   17c80:	mov	r2, sl
   17c84:	add	r1, r4, #9
   17c88:	mov	r0, r5
   17c8c:	add	sp, sp, #12
   17c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c94:	b	16af0 <_start@@Base+0x40f4>
   17c98:	sub	r3, sl, r4
   17c9c:	cmp	r3, #3
   17ca0:	ble	17a80 <_start@@Base+0x5084>
   17ca4:	ldrb	r3, [r4, #3]
   17ca8:	cmp	r3, #46	; 0x2e
   17cac:	bne	17a80 <_start@@Base+0x5084>
   17cb0:	mov	r3, fp
   17cb4:	mov	r2, sl
   17cb8:	add	r1, r4, #4
   17cbc:	mov	r0, r5
   17cc0:	add	sp, sp, #12
   17cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cc8:	b	16de4 <_start@@Base+0x43e8>
   17ccc:	sub	r3, sl, r4
   17cd0:	cmp	r3, #3
   17cd4:	ble	17a80 <_start@@Base+0x5084>
   17cd8:	ldrb	r3, [r4, #3]
   17cdc:	cmp	r3, #46	; 0x2e
   17ce0:	bne	17a80 <_start@@Base+0x5084>
   17ce4:	str	r9, [sp, #52]	; 0x34
   17ce8:	str	r8, [sp, #48]	; 0x30
   17cec:	mov	r3, fp
   17cf0:	mov	r2, sl
   17cf4:	add	r1, r4, #4
   17cf8:	mov	r0, r5
   17cfc:	add	sp, sp, #12
   17d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d04:	b	15888 <_start@@Base+0x2e8c>
   17d08:	sub	r3, sl, r4
   17d0c:	cmp	r3, #8
   17d10:	ble	17a80 <_start@@Base+0x5084>
   17d14:	ldrb	r3, [r4, #8]
   17d18:	cmp	r3, #46	; 0x2e
   17d1c:	bne	17a80 <_start@@Base+0x5084>
   17d20:	str	r9, [sp, #52]	; 0x34
   17d24:	str	r8, [sp, #48]	; 0x30
   17d28:	mov	r3, fp
   17d2c:	mov	r2, sl
   17d30:	add	r1, r4, #9
   17d34:	mov	r0, r5
   17d38:	add	sp, sp, #12
   17d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d40:	b	15ad0 <_start@@Base+0x30d4>
   17d44:	nop			; (mov r0, r0)
   17d48:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   17d4c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   17d50:	ldrshvc	pc, [pc, #255]	; 17e57 <_start@@Base+0x545b>	; <UNPREDICTABLE>
   17d54:	cmnmi	pc, #28416	; 0x6f00
   17d58:	andeq	r0, r0, r0
   17d5c:	cmnmi	lr, r0, lsl #18
   17d60:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   17d64:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   17d68:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17d6c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   17d70:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   17d74:	mcrvs	7, 3, r6, cr5, cr15, {2}
   17d78:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17d7c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   17d80:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   17d84:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   17d88:	andeq	r0, r0, r0
   17d8c:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17d90:	andeq	r0, r0, r0
   17d94:	strbtmi	r6, [pc], -r0, lsl #30
   17d98:	andvc	r0, r0, #0
   17d9c:	cmnmi	pc, #28416	; 0x6f00
   17da0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17da4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   17da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17dac:	mov	r7, r3
   17db0:	mov	r3, #0
   17db4:	mov	r5, r0
   17db8:	mov	r6, r1
   17dbc:	str	r3, [r7]
   17dc0:	mov	r1, r3
   17dc4:	ldr	r0, [r0]
   17dc8:	mov	r4, r2
   17dcc:	bl	23ce8 <flatcc_builder_start_table@@Base>
   17dd0:	cmp	r0, #0
   17dd4:	bne	17e10 <_start@@Base+0x5414>
   17dd8:	cmp	r6, r4
   17ddc:	beq	17dec <_start@@Base+0x53f0>
   17de0:	ldrb	r3, [r6]
   17de4:	cmp	r3, #123	; 0x7b
   17de8:	beq	17e44 <_start@@Base+0x5448>
   17dec:	mov	r1, r6
   17df0:	mov	r3, #21
   17df4:	mov	r2, r4
   17df8:	mov	r0, r5
   17dfc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   17e00:	mov	r6, r0
   17e04:	ldr	r3, [r5, #24]
   17e08:	cmp	r3, #0
   17e0c:	beq	17e28 <_start@@Base+0x542c>
   17e10:	mov	r2, r4
   17e14:	mov	r1, r6
   17e18:	mov	r0, r5
   17e1c:	mov	r3, #33	; 0x21
   17e20:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e24:	b	27994 <flatcc_json_parser_set_error@@Base>
   17e28:	ldr	r0, [r5]
   17e2c:	bl	246dc <flatcc_builder_end_table@@Base>
   17e30:	cmp	r0, #0
   17e34:	str	r0, [r7]
   17e38:	beq	17e10 <_start@@Base+0x5414>
   17e3c:	mov	r0, r6
   17e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e44:	add	r1, r6, #1
   17e48:	sub	r3, r4, r1
   17e4c:	cmp	r3, #1
   17e50:	ble	17e64 <_start@@Base+0x5468>
   17e54:	ldrb	r3, [r6, #1]
   17e58:	cmp	r3, #32
   17e5c:	bhi	17e74 <_start@@Base+0x5478>
   17e60:	beq	1803c <_start@@Base+0x5640>
   17e64:	mov	r2, r4
   17e68:	mov	r0, r5
   17e6c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   17e70:	mov	r1, r0
   17e74:	cmp	r4, r1
   17e78:	beq	17e88 <_start@@Base+0x548c>
   17e7c:	ldrb	r3, [r1]
   17e80:	cmp	r3, #125	; 0x7d
   17e84:	beq	1806c <_start@@Base+0x5670>
   17e88:	mov	r6, #1
   17e8c:	mov	r9, #5
   17e90:	mov	r8, #0
   17e94:	cmp	r4, r1
   17e98:	beq	17ebc <_start@@Base+0x54c0>
   17e9c:	ldrb	r3, [r1]
   17ea0:	cmp	r3, #34	; 0x22
   17ea4:	addeq	r1, r1, #1
   17ea8:	streq	r8, [r5, #12]
   17eac:	beq	17ebc <_start@@Base+0x54c0>
   17eb0:	cmp	r3, #46	; 0x2e
   17eb4:	strne	r6, [r5, #12]
   17eb8:	beq	17ffc <_start@@Base+0x5600>
   17ebc:	mov	r2, r4
   17ec0:	mov	r0, r5
   17ec4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   17ec8:	sub	r3, r4, r0
   17ecc:	cmp	r3, #1
   17ed0:	ble	17ee4 <_start@@Base+0x54e8>
   17ed4:	ldrb	r3, [r0]
   17ed8:	cmp	r3, #32
   17edc:	bhi	17ef4 <_start@@Base+0x54f8>
   17ee0:	beq	17f64 <_start@@Base+0x5568>
   17ee4:	mov	r1, r0
   17ee8:	mov	r2, r4
   17eec:	mov	r0, r5
   17ef0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   17ef4:	cmp	r4, r0
   17ef8:	beq	17f7c <_start@@Base+0x5580>
   17efc:	ldrb	r3, [r0]
   17f00:	cmp	r3, #44	; 0x2c
   17f04:	beq	17f84 <_start@@Base+0x5588>
   17f08:	cmp	r3, #125	; 0x7d
   17f0c:	beq	17f2c <_start@@Base+0x5530>
   17f10:	mov	r1, r0
   17f14:	mov	r3, #10
   17f18:	mov	r2, r4
   17f1c:	mov	r0, r5
   17f20:	bl	27994 <flatcc_json_parser_set_error@@Base>
   17f24:	mov	r6, r0
   17f28:	b	17e04 <_start@@Base+0x5408>
   17f2c:	add	r6, r0, #1
   17f30:	sub	r3, r4, r6
   17f34:	cmp	r3, #1
   17f38:	ble	17f4c <_start@@Base+0x5550>
   17f3c:	ldrb	r3, [r0, #1]
   17f40:	cmp	r3, #32
   17f44:	bhi	17e04 <_start@@Base+0x5408>
   17f48:	beq	18014 <_start@@Base+0x5618>
   17f4c:	mov	r1, r6
   17f50:	mov	r2, r4
   17f54:	mov	r0, r5
   17f58:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   17f5c:	mov	r6, r0
   17f60:	b	17e04 <_start@@Base+0x5408>
   17f64:	ldrb	r3, [r0, #1]
   17f68:	cmp	r3, #32
   17f6c:	addhi	r0, r0, #1
   17f70:	bls	17ee4 <_start@@Base+0x54e8>
   17f74:	cmp	r4, r0
   17f78:	bne	17efc <_start@@Base+0x5500>
   17f7c:	mov	r6, r4
   17f80:	b	17e04 <_start@@Base+0x5408>
   17f84:	add	r1, r0, #1
   17f88:	sub	r3, r4, r1
   17f8c:	cmp	r3, #1
   17f90:	ble	17fa4 <_start@@Base+0x55a8>
   17f94:	ldrb	r3, [r0, #1]
   17f98:	cmp	r3, #32
   17f9c:	bhi	17fb4 <_start@@Base+0x55b8>
   17fa0:	beq	18028 <_start@@Base+0x562c>
   17fa4:	mov	r2, r4
   17fa8:	mov	r0, r5
   17fac:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   17fb0:	mov	r1, r0
   17fb4:	cmp	r4, r1
   17fb8:	beq	18050 <_start@@Base+0x5654>
   17fbc:	ldrb	r3, [r1]
   17fc0:	cmp	r3, #125	; 0x7d
   17fc4:	bne	17e94 <_start@@Base+0x5498>
   17fc8:	add	r6, r1, #1
   17fcc:	sub	r3, r4, r6
   17fd0:	cmp	r3, #1
   17fd4:	ble	17f4c <_start@@Base+0x5550>
   17fd8:	ldrb	r3, [r1, #1]
   17fdc:	cmp	r3, #32
   17fe0:	bhi	17e04 <_start@@Base+0x5408>
   17fe4:	bne	17f4c <_start@@Base+0x5550>
   17fe8:	ldrb	r3, [r1, #2]
   17fec:	cmp	r3, #32
   17ff0:	addhi	r6, r1, #2
   17ff4:	bls	17f4c <_start@@Base+0x5550>
   17ff8:	b	17e04 <_start@@Base+0x5408>
   17ffc:	mov	r3, r9
   18000:	mov	r2, r4
   18004:	mov	r0, r5
   18008:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1800c:	mov	r1, r0
   18010:	b	17ebc <_start@@Base+0x54c0>
   18014:	ldrb	r3, [r0, #2]
   18018:	cmp	r3, #32
   1801c:	addhi	r6, r0, #2
   18020:	bls	17f4c <_start@@Base+0x5550>
   18024:	b	17e04 <_start@@Base+0x5408>
   18028:	ldrb	r3, [r0, #2]
   1802c:	cmp	r3, #32
   18030:	addhi	r1, r0, #2
   18034:	bls	17fa4 <_start@@Base+0x55a8>
   18038:	b	17fb4 <_start@@Base+0x55b8>
   1803c:	ldrb	r3, [r6, #2]
   18040:	cmp	r3, #32
   18044:	addhi	r1, r6, #2
   18048:	bls	17e64 <_start@@Base+0x5468>
   1804c:	b	17e74 <_start@@Base+0x5478>
   18050:	mov	r3, #10
   18054:	mov	r2, r4
   18058:	mov	r1, r4
   1805c:	mov	r0, r5
   18060:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18064:	mov	r6, r0
   18068:	b	17e04 <_start@@Base+0x5408>
   1806c:	add	r1, r1, #1
   18070:	mov	r2, r4
   18074:	mov	r0, r5
   18078:	bl	12fa4 <_start@@Base+0x5a8>
   1807c:	mov	r6, r0
   18080:	b	17e04 <_start@@Base+0x5408>
   18084:	push	{r4, r5, r6, lr}
   18088:	mov	r4, r0
   1808c:	ldr	r0, [r0, #12]
   18090:	mov	r5, r2
   18094:	cmp	r0, #0
   18098:	ldrb	r2, [r1, r3]
   1809c:	beq	18114 <_start@@Base+0x5718>
   180a0:	cmp	r2, #58	; 0x3a
   180a4:	cmpne	r2, #32
   180a8:	movls	r2, #0
   180ac:	add	r0, r1, r3
   180b0:	movhi	r2, #1
   180b4:	strls	r2, [r4, #12]
   180b8:	bhi	1811c <_start@@Base+0x5720>
   180bc:	sub	r2, r5, r0
   180c0:	cmp	r2, #1
   180c4:	ble	180d8 <_start@@Base+0x56dc>
   180c8:	ldrb	r2, [r0]
   180cc:	cmp	r2, #32
   180d0:	bhi	180e8 <_start@@Base+0x56ec>
   180d4:	beq	18130 <_start@@Base+0x5734>
   180d8:	mov	r1, r0
   180dc:	mov	r2, r5
   180e0:	mov	r0, r4
   180e4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   180e8:	cmp	r5, r0
   180ec:	beq	180fc <_start@@Base+0x5700>
   180f0:	ldrb	r2, [r0]
   180f4:	cmp	r2, #58	; 0x3a
   180f8:	beq	18144 <_start@@Base+0x5748>
   180fc:	mov	r2, r5
   18100:	mov	r1, r0
   18104:	mov	r3, #4
   18108:	mov	r0, r4
   1810c:	pop	{r4, r5, r6, lr}
   18110:	b	27994 <flatcc_json_parser_set_error@@Base>
   18114:	cmp	r2, #34	; 0x22
   18118:	beq	18124 <_start@@Base+0x5728>
   1811c:	mov	r0, r1
   18120:	pop	{r4, r5, r6, pc}
   18124:	add	r3, r3, #1
   18128:	add	r0, r1, r3
   1812c:	b	180bc <_start@@Base+0x56c0>
   18130:	ldrb	r2, [r0, #1]
   18134:	cmp	r2, #32
   18138:	addhi	r0, r0, #1
   1813c:	bls	180d8 <_start@@Base+0x56dc>
   18140:	b	180e8 <_start@@Base+0x56ec>
   18144:	add	r1, r0, #1
   18148:	sub	r2, r5, r1
   1814c:	cmp	r2, #1
   18150:	ble	18164 <_start@@Base+0x5768>
   18154:	ldrb	r2, [r0, #1]
   18158:	cmp	r2, #32
   1815c:	bhi	1811c <_start@@Base+0x5720>
   18160:	beq	18174 <_start@@Base+0x5778>
   18164:	mov	r2, r5
   18168:	mov	r0, r4
   1816c:	pop	{r4, r5, r6, lr}
   18170:	b	27a88 <flatcc_json_parser_space_ext@@Base>
   18174:	ldrb	r2, [r0, #2]
   18178:	cmp	r2, #32
   1817c:	addhi	r1, r0, #2
   18180:	bls	18164 <_start@@Base+0x5768>
   18184:	b	1811c <_start@@Base+0x5720>
   18188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1818c:	mov	r9, r3
   18190:	mov	r3, #0
   18194:	sub	sp, sp, #100	; 0x64
   18198:	mov	r8, r0
   1819c:	mov	r4, r1
   181a0:	str	r3, [r9]
   181a4:	ldr	r0, [r0]
   181a8:	mov	r1, #9
   181ac:	mov	r5, r2
   181b0:	bl	23ce8 <flatcc_builder_start_table@@Base>
   181b4:	cmp	r0, #0
   181b8:	bne	18468 <_start@@Base+0x5a6c>
   181bc:	add	r3, sp, #80	; 0x50
   181c0:	mov	r2, r5
   181c4:	mov	r0, r8
   181c8:	mov	r1, r4
   181cc:	bl	133ac <_start@@Base+0x9b0>
   181d0:	ldr	r3, [pc, #1312]	; 186f8 <_start@@Base+0x5cfc>
   181d4:	ldr	r2, [pc, #1312]	; 186fc <_start@@Base+0x5d00>
   181d8:	add	r3, pc, r3
   181dc:	add	r3, r3, #84	; 0x54
   181e0:	str	r3, [sp, #72]	; 0x48
   181e4:	ldr	r3, [sp, #80]	; 0x50
   181e8:	add	r2, pc, r2
   181ec:	str	r9, [sp, #68]	; 0x44
   181f0:	strd	sl, [sp, #40]	; 0x28
   181f4:	mov	r9, r5
   181f8:	mov	fp, r8
   181fc:	add	r2, r2, #96	; 0x60
   18200:	str	r2, [sp, #76]	; 0x4c
   18204:	mov	r8, r0
   18208:	cmp	r3, #0
   1820c:	beq	18578 <_start@@Base+0x5b7c>
   18210:	ldrd	r6, [sp, #40]	; 0x28
   18214:	cmp	r9, r8
   18218:	beq	184e4 <_start@@Base+0x5ae8>
   1821c:	ldrb	r3, [r8]
   18220:	cmp	r3, #34	; 0x22
   18224:	beq	1864c <_start@@Base+0x5c50>
   18228:	cmp	r3, #46	; 0x2e
   1822c:	movne	r3, #1
   18230:	subne	ip, r9, r8
   18234:	strne	r3, [fp, #12]
   18238:	beq	18a28 <_start@@Base+0x602c>
   1823c:	cmp	ip, #8
   18240:	bls	1858c <_start@@Base+0x5b90>
   18244:	ldrb	r2, [r8, #7]
   18248:	mov	r3, #0
   1824c:	ldrb	r0, [r8, #6]
   18250:	lsr	lr, r0, #24
   18254:	lsl	r1, r0, #8
   18258:	str	lr, [sp, #60]	; 0x3c
   1825c:	str	r1, [sp, #56]	; 0x38
   18260:	ldrd	r0, [sp, #56]	; 0x38
   18264:	orr	r0, r0, r2
   18268:	orr	r1, r1, r3
   1826c:	mov	r2, r0
   18270:	mov	r3, r1
   18274:	ldrb	r0, [r8, #5]
   18278:	lsr	lr, r0, #16
   1827c:	lsl	r1, r0, #16
   18280:	str	lr, [sp, #52]	; 0x34
   18284:	str	r1, [sp, #48]	; 0x30
   18288:	ldrd	r0, [sp, #48]	; 0x30
   1828c:	orr	r0, r0, r2
   18290:	orr	r1, r1, r3
   18294:	mov	r2, r0
   18298:	mov	r3, r1
   1829c:	ldrb	r0, [r8, #4]
   182a0:	lsr	lr, r0, #8
   182a4:	lsl	r1, r0, #24
   182a8:	str	lr, [sp, #28]
   182ac:	str	r1, [sp, #24]
   182b0:	ldrd	r0, [sp, #24]
   182b4:	orr	r0, r0, r2
   182b8:	orr	r1, r1, r3
   182bc:	mov	r2, r0
   182c0:	mov	r3, r1
   182c4:	ldrb	r1, [r8, #3]
   182c8:	str	r1, [sp, #36]	; 0x24
   182cc:	mov	r1, #0
   182d0:	str	r1, [sp, #32]
   182d4:	ldrd	r0, [sp, #32]
   182d8:	orr	r0, r0, r2
   182dc:	orr	r1, r1, r3
   182e0:	mov	r2, r0
   182e4:	mov	r3, r1
   182e8:	ldrb	r0, [r8, #2]
   182ec:	lsl	r1, r0, #8
   182f0:	str	r1, [sp, #20]
   182f4:	mov	r1, #0
   182f8:	str	r1, [sp, #16]
   182fc:	ldrd	r0, [sp, #16]
   18300:	orr	r0, r0, r2
   18304:	orr	r1, r1, r3
   18308:	mov	r2, r0
   1830c:	mov	r3, r1
   18310:	ldrb	r0, [r8, #1]
   18314:	lsl	r1, r0, #16
   18318:	str	r1, [sp, #12]
   1831c:	mov	r1, #0
   18320:	str	r1, [sp, #8]
   18324:	ldrd	r0, [sp, #8]
   18328:	orr	r0, r0, r2
   1832c:	orr	r1, r1, r3
   18330:	mov	r2, r0
   18334:	mov	r3, r1
   18338:	ldrb	r4, [r8]
   1833c:	add	r1, pc, #884	; 0x374
   18340:	ldrd	r0, [r1]
   18344:	mov	r6, #0
   18348:	orr	r2, r2, r6
   1834c:	lsl	r7, r4, #24
   18350:	orr	r3, r3, r7
   18354:	cmp	r3, r1
   18358:	cmpeq	r2, r0
   1835c:	bls	18484 <_start@@Base+0x5a88>
   18360:	add	r1, pc, #856	; 0x358
   18364:	ldrd	r0, [r1]
   18368:	cmp	r3, r1
   1836c:	cmpeq	r2, r0
   18370:	beq	187c8 <_start@@Base+0x5dcc>
   18374:	add	r1, pc, #844	; 0x34c
   18378:	ldrd	r0, [r1]
   1837c:	mov	r4, #0
   18380:	cmp	r3, r1
   18384:	cmpeq	r4, r0
   18388:	beq	188d8 <_start@@Base+0x5edc>
   1838c:	add	r1, pc, #828	; 0x33c
   18390:	ldrd	r0, [r1]
   18394:	cmp	r3, r1
   18398:	cmpeq	r2, r0
   1839c:	bne	184e4 <_start@@Base+0x5ae8>
   183a0:	cmp	ip, #8
   183a4:	bgt	18a48 <_start@@Base+0x604c>
   183a8:	add	r8, r8, #8
   183ac:	mov	r0, r8
   183b0:	mov	r1, r9
   183b4:	bl	12b28 <_start@@Base+0x12c>
   183b8:	mov	r0, #0
   183bc:	and	r1, r1, #-16777216	; 0xff000000
   183c0:	cmp	r1, #889192448	; 0x35000000
   183c4:	cmpeq	r0, #0
   183c8:	bne	184e4 <_start@@Base+0x5ae8>
   183cc:	sub	r3, r9, r8
   183d0:	cmp	r3, #1
   183d4:	ble	184e4 <_start@@Base+0x5ae8>
   183d8:	mov	r3, #1
   183dc:	mov	r2, r9
   183e0:	mov	r1, r8
   183e4:	mov	r0, fp
   183e8:	bl	18084 <_start@@Base+0x5688>
   183ec:	cmp	r8, r0
   183f0:	mov	sl, r0
   183f4:	beq	184e4 <_start@@Base+0x5ae8>
   183f8:	add	r5, sp, #96	; 0x60
   183fc:	mov	r3, #0
   18400:	str	r3, [r5, #-8]!
   18404:	mov	r1, r0
   18408:	mov	r2, r9
   1840c:	mov	r3, r5
   18410:	mov	r0, fp
   18414:	bl	13094 <_start@@Base+0x698>
   18418:	cmp	r0, sl
   1841c:	mov	r4, r0
   18420:	beq	18d44 <_start@@Base+0x6348>
   18424:	ldr	r3, [sp, #88]	; 0x58
   18428:	cmp	r3, #0
   1842c:	bne	1843c <_start@@Base+0x5a40>
   18430:	ldr	r3, [fp, #8]
   18434:	tst	r3, #2
   18438:	beq	184f8 <_start@@Base+0x5afc>
   1843c:	mov	r3, #4
   18440:	mov	r2, r3
   18444:	mov	r1, #8
   18448:	ldr	r0, [fp]
   1844c:	bl	25728 <flatcc_builder_table_add@@Base>
   18450:	cmp	r0, #0
   18454:	bne	187bc <_start@@Base+0x5dc0>
   18458:	mov	r6, r4
   1845c:	mov	r8, fp
   18460:	mov	r5, r9
   18464:	mov	r4, r6
   18468:	mov	r2, r5
   1846c:	mov	r1, r4
   18470:	mov	r0, r8
   18474:	mov	r3, #33	; 0x21
   18478:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1847c:	add	sp, sp, #100	; 0x64
   18480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18484:	add	r1, pc, #588	; 0x24c
   18488:	ldrd	r0, [r1]
   1848c:	cmp	r3, r1
   18490:	cmpeq	r2, r0
   18494:	beq	18710 <_start@@Base+0x5d14>
   18498:	add	r5, pc, #576	; 0x240
   1849c:	ldrd	r4, [r5]
   184a0:	mov	r0, #0
   184a4:	mov	r1, r3
   184a8:	cmp	r3, r5
   184ac:	cmpeq	r0, r4
   184b0:	beq	18938 <_start@@Base+0x5f3c>
   184b4:	add	r5, pc, #556	; 0x22c
   184b8:	ldrd	r4, [r5]
   184bc:	cmp	r3, r5
   184c0:	cmpeq	r2, r4
   184c4:	beq	18998 <_start@@Base+0x5f9c>
   184c8:	add	r3, pc, #544	; 0x220
   184cc:	ldrd	r2, [r3]
   184d0:	cmp	r1, r3
   184d4:	cmpeq	r0, r2
   184d8:	bne	184e4 <_start@@Base+0x5ae8>
   184dc:	cmp	ip, #4
   184e0:	bgt	18b60 <_start@@Base+0x6164>
   184e4:	mov	r1, r8
   184e8:	mov	r2, r9
   184ec:	mov	r0, fp
   184f0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   184f4:	mov	r4, r0
   184f8:	sub	r3, r9, r4
   184fc:	cmp	r3, #1
   18500:	ble	18514 <_start@@Base+0x5b18>
   18504:	ldrb	r3, [r4]
   18508:	cmp	r3, #32
   1850c:	bhi	18528 <_start@@Base+0x5b2c>
   18510:	beq	18660 <_start@@Base+0x5c64>
   18514:	mov	r1, r4
   18518:	mov	r2, r9
   1851c:	mov	r0, fp
   18520:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   18524:	mov	r4, r0
   18528:	cmp	r9, r4
   1852c:	beq	18678 <_start@@Base+0x5c7c>
   18530:	ldrb	r3, [r4]
   18534:	cmp	r3, #44	; 0x2c
   18538:	beq	18884 <_start@@Base+0x5e88>
   1853c:	mov	r3, #0
   18540:	str	r3, [sp, #80]	; 0x50
   18544:	ldrb	r3, [r4]
   18548:	strd	r6, [sp, #40]	; 0x28
   1854c:	cmp	r3, #125	; 0x7d
   18550:	beq	18610 <_start@@Base+0x5c14>
   18554:	mov	r3, #10
   18558:	mov	r1, r4
   1855c:	mov	r2, r9
   18560:	mov	r0, fp
   18564:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18568:	ldr	r3, [sp, #80]	; 0x50
   1856c:	cmp	r3, #0
   18570:	mov	r8, r0
   18574:	bne	18210 <_start@@Base+0x5814>
   18578:	mov	r4, r8
   1857c:	mov	r5, r9
   18580:	mov	r8, fp
   18584:	ldr	r9, [sp, #68]	; 0x44
   18588:	b	18690 <_start@@Base+0x5c94>
   1858c:	sub	r3, ip, #1
   18590:	cmp	r3, #7
   18594:	addls	pc, pc, r3, lsl #2
   18598:	b	184e4 <_start@@Base+0x5ae8>
   1859c:	b	18604 <_start@@Base+0x5c08>
   185a0:	b	185f8 <_start@@Base+0x5bfc>
   185a4:	b	185ec <_start@@Base+0x5bf0>
   185a8:	b	185e0 <_start@@Base+0x5be4>
   185ac:	b	185d4 <_start@@Base+0x5bd8>
   185b0:	b	185c8 <_start@@Base+0x5bcc>
   185b4:	b	185bc <_start@@Base+0x5bc0>
   185b8:	b	18244 <_start@@Base+0x5848>
   185bc:	mov	r2, #0
   185c0:	mov	r3, #0
   185c4:	b	1824c <_start@@Base+0x5850>
   185c8:	mov	r2, #0
   185cc:	mov	r3, #0
   185d0:	b	18274 <_start@@Base+0x5878>
   185d4:	mov	r2, #0
   185d8:	mov	r3, #0
   185dc:	b	1829c <_start@@Base+0x58a0>
   185e0:	mov	r2, #0
   185e4:	mov	r3, #0
   185e8:	b	182c4 <_start@@Base+0x58c8>
   185ec:	mov	r2, #0
   185f0:	mov	r3, #0
   185f4:	b	182e8 <_start@@Base+0x58ec>
   185f8:	mov	r2, #0
   185fc:	mov	r3, #0
   18600:	b	18310 <_start@@Base+0x5914>
   18604:	mov	r2, #0
   18608:	mov	r3, #0
   1860c:	b	18338 <_start@@Base+0x593c>
   18610:	add	r8, r4, #1
   18614:	sub	r3, r9, r8
   18618:	cmp	r3, #1
   1861c:	ble	18630 <_start@@Base+0x5c34>
   18620:	ldrb	r3, [r4, #1]
   18624:	cmp	r3, #32
   18628:	bhi	18578 <_start@@Base+0x5b7c>
   1862c:	beq	18bc0 <_start@@Base+0x61c4>
   18630:	mov	r1, r8
   18634:	mov	r2, r9
   18638:	mov	r0, fp
   1863c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   18640:	ldr	r3, [sp, #80]	; 0x50
   18644:	mov	r8, r0
   18648:	b	18208 <_start@@Base+0x580c>
   1864c:	add	r8, r8, #1
   18650:	mov	r3, #0
   18654:	sub	ip, r9, r8
   18658:	str	r3, [fp, #12]
   1865c:	b	1823c <_start@@Base+0x5840>
   18660:	ldrb	r3, [r4, #1]
   18664:	cmp	r3, #32
   18668:	addhi	r4, r4, #1
   1866c:	bls	18514 <_start@@Base+0x5b18>
   18670:	cmp	r9, r4
   18674:	bne	18530 <_start@@Base+0x5b34>
   18678:	mov	r5, r9
   1867c:	ldr	r9, [sp, #68]	; 0x44
   18680:	mov	r8, fp
   18684:	mov	r4, r5
   18688:	mov	r3, #0
   1868c:	str	r3, [sp, #80]	; 0x50
   18690:	ldr	r3, [r8, #24]
   18694:	cmp	r3, #0
   18698:	bne	18468 <_start@@Base+0x5a6c>
   1869c:	ldr	r0, [r8]
   186a0:	bl	246dc <flatcc_builder_end_table@@Base>
   186a4:	cmp	r0, #0
   186a8:	str	r0, [r9]
   186ac:	beq	18468 <_start@@Base+0x5a6c>
   186b0:	mov	r0, r4
   186b4:	b	1847c <_start@@Base+0x5a80>
   186b8:			; <UNDEFINED> instruction: 0xffffffff
   186bc:	cmnvs	r3, #-2013265919	; 0x88000001
   186c0:	teqcc	r2, r4, lsr r3
   186c4:	cmnvs	r3, #-1946157055	; 0x8c000001
   186c8:	andeq	r0, r0, r0
   186cc:	cmnvs	r3, #-1946157055	; 0x8c000001
   186d0:	teqcc	r2, r4, lsr r3
   186d4:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   186d8:	teqcc	r2, r4, lsr r3
   186dc:	cmnvs	r1, r1, ror #2
   186e0:	andeq	r0, r0, r0
   186e4:	cmnvs	r1, r1, ror #2
   186e8:	teqcc	r2, r4, lsr r3
   186ec:	rsbvs	r6, r2, #536870918	; 0x20000006
   186f0:	andeq	r0, r0, r0
   186f4:	rsbvs	r6, r2, #536870918	; 0x20000006
   186f8:			; <UNDEFINED> instruction: 0x00024eb0
   186fc:	andeq	r4, r2, r0, lsr #29
   18700:	andeq	r4, r2, r8, lsr r4
   18704:	ldrdeq	r4, [r2], -r8
   18708:	andeq	r4, r2, r4, lsr #7
   1870c:	andeq	r4, r2, r0, ror r3
   18710:	add	r8, r8, #8
   18714:	mov	r0, r8
   18718:	mov	r1, r9
   1871c:	bl	12b28 <_start@@Base+0x12c>
   18720:	mov	r0, #0
   18724:	and	r1, r1, #-16777216	; 0xff000000
   18728:	cmp	r1, #889192448	; 0x35000000
   1872c:	cmpeq	r0, #0
   18730:	bne	184e4 <_start@@Base+0x5ae8>
   18734:	sub	r3, r9, r8
   18738:	cmp	r3, #1
   1873c:	ble	184e4 <_start@@Base+0x5ae8>
   18740:	mov	r3, #1
   18744:	mov	r2, r9
   18748:	mov	r1, r8
   1874c:	mov	r0, fp
   18750:	bl	18084 <_start@@Base+0x5688>
   18754:	cmp	r8, r0
   18758:	mov	sl, r0
   1875c:	beq	184e4 <_start@@Base+0x5ae8>
   18760:	add	r5, sp, #96	; 0x60
   18764:	mov	r1, r0
   18768:	str	r6, [r5, #-8]!
   1876c:	mov	r2, r9
   18770:	mov	r3, r5
   18774:	mov	r0, fp
   18778:	bl	13094 <_start@@Base+0x698>
   1877c:	cmp	r0, sl
   18780:	mov	r4, r0
   18784:	beq	18cdc <_start@@Base+0x62e0>
   18788:	ldr	r3, [sp, #88]	; 0x58
   1878c:	cmp	r3, #0
   18790:	bne	187a0 <_start@@Base+0x5da4>
   18794:	ldr	r3, [fp, #8]
   18798:	tst	r3, #2
   1879c:	beq	184f8 <_start@@Base+0x5afc>
   187a0:	mov	r3, #4
   187a4:	mov	r2, r3
   187a8:	mov	r1, #1
   187ac:	ldr	r0, [fp]
   187b0:	bl	25728 <flatcc_builder_table_add@@Base>
   187b4:	cmp	r0, #0
   187b8:	beq	18458 <_start@@Base+0x5a5c>
   187bc:	ldr	r3, [sp, #88]	; 0x58
   187c0:	str	r3, [r0]
   187c4:	b	184f8 <_start@@Base+0x5afc>
   187c8:	cmp	ip, #8
   187cc:	bgt	18ad8 <_start@@Base+0x60dc>
   187d0:	add	r8, r8, #8
   187d4:	mov	r0, r8
   187d8:	mov	r1, r9
   187dc:	bl	12b28 <_start@@Base+0x12c>
   187e0:	mov	r0, #0
   187e4:	and	r1, r1, #-16777216	; 0xff000000
   187e8:	cmp	r1, #889192448	; 0x35000000
   187ec:	cmpeq	r0, #0
   187f0:	bne	184e4 <_start@@Base+0x5ae8>
   187f4:	sub	r3, r9, r8
   187f8:	cmp	r3, #1
   187fc:	ble	184e4 <_start@@Base+0x5ae8>
   18800:	mov	r3, #1
   18804:	mov	r2, r9
   18808:	mov	r1, r8
   1880c:	mov	r0, fp
   18810:	bl	18084 <_start@@Base+0x5688>
   18814:	cmp	r8, r0
   18818:	mov	sl, r0
   1881c:	beq	184e4 <_start@@Base+0x5ae8>
   18820:	add	r5, sp, #96	; 0x60
   18824:	mov	r3, #0
   18828:	str	r3, [r5, #-8]!
   1882c:	mov	r1, r0
   18830:	mov	r2, r9
   18834:	mov	r3, r5
   18838:	mov	r0, fp
   1883c:	bl	13094 <_start@@Base+0x698>
   18840:	cmp	r0, sl
   18844:	mov	r4, r0
   18848:	beq	18d10 <_start@@Base+0x6314>
   1884c:	ldr	r3, [sp, #88]	; 0x58
   18850:	cmp	r3, #0
   18854:	bne	18864 <_start@@Base+0x5e68>
   18858:	ldr	r3, [fp, #8]
   1885c:	tst	r3, #2
   18860:	beq	184f8 <_start@@Base+0x5afc>
   18864:	mov	r3, #4
   18868:	mov	r2, r3
   1886c:	mov	r1, #6
   18870:	ldr	r0, [fp]
   18874:	bl	25728 <flatcc_builder_table_add@@Base>
   18878:	cmp	r0, #0
   1887c:	bne	187bc <_start@@Base+0x5dc0>
   18880:	b	18458 <_start@@Base+0x5a5c>
   18884:	add	r8, r4, #1
   18888:	sub	r3, r9, r8
   1888c:	cmp	r3, #1
   18890:	ble	188a4 <_start@@Base+0x5ea8>
   18894:	ldrb	r3, [r4, #1]
   18898:	cmp	r3, #32
   1889c:	bhi	188b8 <_start@@Base+0x5ebc>
   188a0:	beq	18be0 <_start@@Base+0x61e4>
   188a4:	mov	r1, r8
   188a8:	mov	r2, r9
   188ac:	mov	r0, fp
   188b0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   188b4:	mov	r8, r0
   188b8:	cmp	r9, r8
   188bc:	beq	18c7c <_start@@Base+0x6280>
   188c0:	ldrb	r3, [r8]
   188c4:	cmp	r3, #125	; 0x7d
   188c8:	beq	18bf4 <_start@@Base+0x61f8>
   188cc:	mov	r3, #1
   188d0:	str	r3, [sp, #80]	; 0x50
   188d4:	b	18214 <_start@@Base+0x5818>
   188d8:	cmp	ip, #4
   188dc:	ble	184e4 <_start@@Base+0x5ae8>
   188e0:	mov	r1, r8
   188e4:	mov	r3, #4
   188e8:	mov	r2, r9
   188ec:	mov	r0, fp
   188f0:	bl	18084 <_start@@Base+0x5688>
   188f4:	cmp	r0, r8
   188f8:	mov	r1, r0
   188fc:	beq	184e4 <_start@@Base+0x5ae8>
   18900:	add	r3, sp, #84	; 0x54
   18904:	mov	r2, r9
   18908:	mov	r0, fp
   1890c:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   18910:	ldr	r3, [sp, #84]	; 0x54
   18914:	cmp	r3, #0
   18918:	mov	r4, r0
   1891c:	beq	18458 <_start@@Base+0x5a5c>
   18920:	mov	r1, #4
   18924:	ldr	r0, [fp]
   18928:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1892c:	cmp	r0, #0
   18930:	bne	18bb4 <_start@@Base+0x61b8>
   18934:	b	18458 <_start@@Base+0x5a5c>
   18938:	cmp	ip, #4
   1893c:	ble	184e4 <_start@@Base+0x5ae8>
   18940:	mov	r1, r8
   18944:	mov	r3, #4
   18948:	mov	r2, r9
   1894c:	mov	r0, fp
   18950:	bl	18084 <_start@@Base+0x5688>
   18954:	cmp	r0, r8
   18958:	mov	r1, r0
   1895c:	beq	184e4 <_start@@Base+0x5ae8>
   18960:	add	r3, sp, #84	; 0x54
   18964:	mov	r2, r9
   18968:	mov	r0, fp
   1896c:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   18970:	ldr	r3, [sp, #84]	; 0x54
   18974:	cmp	r3, #0
   18978:	mov	r4, r0
   1897c:	beq	18458 <_start@@Base+0x5a5c>
   18980:	mov	r1, r6
   18984:	ldr	r0, [fp]
   18988:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1898c:	cmp	r0, #0
   18990:	bne	18bb4 <_start@@Base+0x61b8>
   18994:	b	18458 <_start@@Base+0x5a5c>
   18998:	cmp	ip, #8
   1899c:	ble	184e4 <_start@@Base+0x5ae8>
   189a0:	mov	r3, #8
   189a4:	mov	r2, r9
   189a8:	mov	r1, r8
   189ac:	mov	r0, fp
   189b0:	bl	18084 <_start@@Base+0x5688>
   189b4:	cmp	r0, r8
   189b8:	mov	sl, r0
   189bc:	beq	184e4 <_start@@Base+0x5ae8>
   189c0:	mov	r0, #0
   189c4:	mov	r1, #0
   189c8:	add	r5, sp, #96	; 0x60
   189cc:	mov	r2, r9
   189d0:	strd	r0, [r5, #-8]!
   189d4:	mov	r1, sl
   189d8:	mov	r3, r5
   189dc:	mov	r0, fp
   189e0:	bl	132e4 <_start@@Base+0x8e8>
   189e4:	cmp	r0, sl
   189e8:	mov	r4, r0
   189ec:	beq	18ca8 <_start@@Base+0x62ac>
   189f0:	ldrd	r2, [sp, #88]	; 0x58
   189f4:	orrs	r3, r2, r3
   189f8:	bne	18a08 <_start@@Base+0x600c>
   189fc:	ldr	r3, [fp, #8]
   18a00:	tst	r3, #2
   18a04:	beq	184f8 <_start@@Base+0x5afc>
   18a08:	mov	r3, #8
   18a0c:	mov	r2, r3
   18a10:	mov	r1, #3
   18a14:	ldr	r0, [fp]
   18a18:	bl	25728 <flatcc_builder_table_add@@Base>
   18a1c:	cmp	r0, #0
   18a20:	bne	18acc <_start@@Base+0x60d0>
   18a24:	b	18458 <_start@@Base+0x5a5c>
   18a28:	mov	r1, r8
   18a2c:	mov	r3, #5
   18a30:	mov	r2, r9
   18a34:	mov	r0, fp
   18a38:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18a3c:	mov	r8, r0
   18a40:	sub	ip, r9, r0
   18a44:	b	1823c <_start@@Base+0x5840>
   18a48:	mov	r3, #8
   18a4c:	mov	r2, r9
   18a50:	mov	r1, r8
   18a54:	mov	r0, fp
   18a58:	bl	18084 <_start@@Base+0x5688>
   18a5c:	cmp	r0, r8
   18a60:	mov	sl, r0
   18a64:	beq	183a8 <_start@@Base+0x59ac>
   18a68:	mov	r0, #0
   18a6c:	mov	r1, #0
   18a70:	add	r5, sp, #96	; 0x60
   18a74:	mov	r2, r9
   18a78:	strd	r0, [r5, #-8]!
   18a7c:	mov	r1, sl
   18a80:	mov	r3, r5
   18a84:	mov	r0, fp
   18a88:	bl	132e4 <_start@@Base+0x8e8>
   18a8c:	cmp	r0, sl
   18a90:	mov	r4, r0
   18a94:	beq	18c1c <_start@@Base+0x6220>
   18a98:	ldrd	r2, [sp, #88]	; 0x58
   18a9c:	orrs	r3, r2, r3
   18aa0:	bne	18ab0 <_start@@Base+0x60b4>
   18aa4:	ldr	r3, [fp, #8]
   18aa8:	tst	r3, #2
   18aac:	beq	184f8 <_start@@Base+0x5afc>
   18ab0:	mov	r3, #8
   18ab4:	mov	r2, r3
   18ab8:	mov	r1, #7
   18abc:	ldr	r0, [fp]
   18ac0:	bl	25728 <flatcc_builder_table_add@@Base>
   18ac4:	cmp	r0, #0
   18ac8:	beq	18458 <_start@@Base+0x5a5c>
   18acc:	ldrd	r2, [sp, #88]	; 0x58
   18ad0:	strd	r2, [r0]
   18ad4:	b	184f8 <_start@@Base+0x5afc>
   18ad8:	mov	r3, #8
   18adc:	mov	r2, r9
   18ae0:	mov	r1, r8
   18ae4:	mov	r0, fp
   18ae8:	bl	18084 <_start@@Base+0x5688>
   18aec:	cmp	r0, r8
   18af0:	mov	sl, r0
   18af4:	beq	187d0 <_start@@Base+0x5dd4>
   18af8:	mov	r0, #0
   18afc:	mov	r1, #0
   18b00:	add	r5, sp, #96	; 0x60
   18b04:	mov	r2, r9
   18b08:	strd	r0, [r5, #-8]!
   18b0c:	mov	r1, sl
   18b10:	mov	r3, r5
   18b14:	mov	r0, fp
   18b18:	bl	132e4 <_start@@Base+0x8e8>
   18b1c:	cmp	r0, sl
   18b20:	mov	r4, r0
   18b24:	beq	18c48 <_start@@Base+0x624c>
   18b28:	ldrd	r2, [sp, #88]	; 0x58
   18b2c:	orrs	r3, r2, r3
   18b30:	bne	18b40 <_start@@Base+0x6144>
   18b34:	ldr	r3, [fp, #8]
   18b38:	tst	r3, #2
   18b3c:	beq	184f8 <_start@@Base+0x5afc>
   18b40:	mov	r3, #8
   18b44:	mov	r2, r3
   18b48:	mov	r1, #5
   18b4c:	ldr	r0, [fp]
   18b50:	bl	25728 <flatcc_builder_table_add@@Base>
   18b54:	cmp	r0, #0
   18b58:	bne	18acc <_start@@Base+0x60d0>
   18b5c:	b	18458 <_start@@Base+0x5a5c>
   18b60:	mov	r1, r8
   18b64:	mov	r3, #4
   18b68:	mov	r2, r9
   18b6c:	mov	r0, fp
   18b70:	bl	18084 <_start@@Base+0x5688>
   18b74:	cmp	r0, r8
   18b78:	mov	r1, r0
   18b7c:	beq	184e4 <_start@@Base+0x5ae8>
   18b80:	add	r3, sp, #84	; 0x54
   18b84:	mov	r2, r9
   18b88:	mov	r0, fp
   18b8c:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   18b90:	ldr	r3, [sp, #84]	; 0x54
   18b94:	cmp	r3, #0
   18b98:	mov	r4, r0
   18b9c:	beq	18458 <_start@@Base+0x5a5c>
   18ba0:	mov	r1, #2
   18ba4:	ldr	r0, [fp]
   18ba8:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   18bac:	cmp	r0, #0
   18bb0:	beq	18458 <_start@@Base+0x5a5c>
   18bb4:	ldr	r3, [sp, #84]	; 0x54
   18bb8:	str	r3, [r0]
   18bbc:	b	184f8 <_start@@Base+0x5afc>
   18bc0:	ldrb	r3, [r4, #2]
   18bc4:	cmp	r3, #32
   18bc8:	bls	18630 <_start@@Base+0x5c34>
   18bcc:	mov	r5, r9
   18bd0:	mov	r8, fp
   18bd4:	ldr	r9, [sp, #68]	; 0x44
   18bd8:	add	r4, r4, #2
   18bdc:	b	18690 <_start@@Base+0x5c94>
   18be0:	ldrb	r3, [r4, #2]
   18be4:	cmp	r3, #32
   18be8:	addhi	r8, r4, #2
   18bec:	bls	188a4 <_start@@Base+0x5ea8>
   18bf0:	b	188b8 <_start@@Base+0x5ebc>
   18bf4:	mov	r3, #0
   18bf8:	add	r1, r8, #1
   18bfc:	mov	r2, r9
   18c00:	mov	r0, fp
   18c04:	str	r3, [sp, #80]	; 0x50
   18c08:	strd	r6, [sp, #40]	; 0x28
   18c0c:	bl	12fa4 <_start@@Base+0x5a8>
   18c10:	ldr	r3, [sp, #80]	; 0x50
   18c14:	mov	r8, r0
   18c18:	b	18208 <_start@@Base+0x580c>
   18c1c:	mov	r1, r0
   18c20:	str	r5, [sp]
   18c24:	ldr	r3, [sp, #72]	; 0x48
   18c28:	mov	r2, r9
   18c2c:	mov	r0, fp
   18c30:	bl	148c4 <_start@@Base+0x1ec8>
   18c34:	cmp	r9, r0
   18c38:	cmpne	r4, r0
   18c3c:	beq	18d6c <_start@@Base+0x6370>
   18c40:	mov	r4, r0
   18c44:	b	18a98 <_start@@Base+0x609c>
   18c48:	ldr	r3, [pc, #-1360]	; 18700 <_start@@Base+0x5d04>
   18c4c:	mov	r1, r0
   18c50:	add	r3, pc, r3
   18c54:	str	r5, [sp]
   18c58:	add	r3, r3, #60	; 0x3c
   18c5c:	mov	r2, r9
   18c60:	mov	r0, fp
   18c64:	bl	148c4 <_start@@Base+0x1ec8>
   18c68:	cmp	r9, r0
   18c6c:	cmpne	r4, r0
   18c70:	beq	18d6c <_start@@Base+0x6370>
   18c74:	mov	r4, r0
   18c78:	b	18b28 <_start@@Base+0x612c>
   18c7c:	mov	ip, #0
   18c80:	mov	r3, #10
   18c84:	mov	r2, r9
   18c88:	mov	r1, r9
   18c8c:	mov	r0, fp
   18c90:	strd	r6, [sp, #40]	; 0x28
   18c94:	str	ip, [sp, #80]	; 0x50
   18c98:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18c9c:	ldr	r3, [sp, #80]	; 0x50
   18ca0:	mov	r8, r0
   18ca4:	b	18208 <_start@@Base+0x580c>
   18ca8:	ldr	r3, [pc, #-1452]	; 18704 <_start@@Base+0x5d08>
   18cac:	mov	r1, r0
   18cb0:	add	r3, pc, r3
   18cb4:	str	r5, [sp]
   18cb8:	add	r3, r3, #48	; 0x30
   18cbc:	mov	r2, r9
   18cc0:	mov	r0, fp
   18cc4:	bl	148c4 <_start@@Base+0x1ec8>
   18cc8:	cmp	r9, r0
   18ccc:	cmpne	r4, r0
   18cd0:	beq	18d6c <_start@@Base+0x6370>
   18cd4:	mov	r4, r0
   18cd8:	b	189f0 <_start@@Base+0x5ff4>
   18cdc:	ldr	r3, [pc, #-1500]	; 18708 <_start@@Base+0x5d0c>
   18ce0:	mov	r1, r0
   18ce4:	add	r3, pc, r3
   18ce8:	str	r5, [sp]
   18cec:	add	r3, r3, #36	; 0x24
   18cf0:	mov	r2, r9
   18cf4:	mov	r0, fp
   18cf8:	bl	13d7c <_start@@Base+0x1380>
   18cfc:	cmp	r9, r0
   18d00:	cmpne	r4, r0
   18d04:	beq	18d6c <_start@@Base+0x6370>
   18d08:	mov	r4, r0
   18d0c:	b	18788 <_start@@Base+0x5d8c>
   18d10:	ldr	r3, [pc, #-1548]	; 1870c <_start@@Base+0x5d10>
   18d14:	mov	r1, r0
   18d18:	add	r3, pc, r3
   18d1c:	str	r5, [sp]
   18d20:	add	r3, r3, #72	; 0x48
   18d24:	mov	r2, r9
   18d28:	mov	r0, fp
   18d2c:	bl	13d7c <_start@@Base+0x1380>
   18d30:	cmp	r9, r0
   18d34:	cmpne	r4, r0
   18d38:	beq	18d6c <_start@@Base+0x6370>
   18d3c:	mov	r4, r0
   18d40:	b	1884c <_start@@Base+0x5e50>
   18d44:	mov	r1, r0
   18d48:	str	r5, [sp]
   18d4c:	ldr	r3, [sp, #76]	; 0x4c
   18d50:	mov	r2, r9
   18d54:	mov	r0, fp
   18d58:	bl	13d7c <_start@@Base+0x1380>
   18d5c:	cmp	r9, r0
   18d60:	cmpne	r4, r0
   18d64:	movne	r4, r0
   18d68:	bne	18424 <_start@@Base+0x5a28>
   18d6c:	mov	r8, fp
   18d70:	mov	r5, r9
   18d74:	mov	r6, r0
   18d78:	b	18464 <_start@@Base+0x5a68>
   18d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d80:	sub	sp, sp, #244	; 0xf4
   18d84:	mov	ip, #0
   18d88:	ldr	lr, [sp, #280]	; 0x118
   18d8c:	cmp	r3, #9
   18d90:	mov	r5, r0
   18d94:	str	ip, [lr]
   18d98:	mov	r4, r2
   18d9c:	beq	18e4c <_start@@Base+0x6450>
   18da0:	mov	r6, r1
   18da4:	bls	18dec <_start@@Base+0x63f0>
   18da8:	cmp	r3, #11
   18dac:	beq	18e94 <_start@@Base+0x6498>
   18db0:	bcc	18e4c <_start@@Base+0x6450>
   18db4:	cmp	r3, #255	; 0xff
   18db8:	beq	18e94 <_start@@Base+0x6498>
   18dbc:	ldr	r3, [r5, #8]
   18dc0:	mov	r2, r4
   18dc4:	tst	r3, #1
   18dc8:	mov	r1, r6
   18dcc:	mov	r0, r5
   18dd0:	bne	199a4 <_start@@Base+0x6fa8>
   18dd4:	mov	r3, #15
   18dd8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18ddc:	mov	r1, r0
   18de0:	mov	r0, r1
   18de4:	add	sp, sp, #244	; 0xf4
   18de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dec:	cmp	r3, #2
   18df0:	beq	193b8 <_start@@Base+0x69bc>
   18df4:	cmp	r3, #8
   18df8:	beq	18ea4 <_start@@Base+0x64a8>
   18dfc:	cmp	r3, ip
   18e00:	bne	18dbc <_start@@Base+0x63c0>
   18e04:	sub	r3, r2, r1
   18e08:	cmp	r3, #3
   18e0c:	ble	18e30 <_start@@Base+0x6434>
   18e10:	ldr	r1, [pc, #1424]	; 193a8 <_start@@Base+0x69ac>
   18e14:	mov	r2, #4
   18e18:	add	r1, pc, r1
   18e1c:	mov	r0, r6
   18e20:	bl	125bc <memcmp@plt>
   18e24:	cmp	r0, #0
   18e28:	addeq	r1, r6, #4
   18e2c:	beq	18de0 <_start@@Base+0x63e4>
   18e30:	mov	r1, r6
   18e34:	mov	r2, r4
   18e38:	mov	r0, r5
   18e3c:	mov	r3, #26
   18e40:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18e44:	mov	r1, r0
   18e48:	b	18de0 <_start@@Base+0x63e4>
   18e4c:	ldr	r3, [sp, #280]	; 0x118
   18e50:	bl	1621c <_start@@Base+0x3820>
   18e54:	mov	r1, r0
   18e58:	ldr	r3, [r5, #24]
   18e5c:	cmp	r3, #0
   18e60:	bne	18de0 <_start@@Base+0x63e4>
   18e64:	ldr	r3, [sp, #280]	; 0x118
   18e68:	ldr	r3, [r3]
   18e6c:	cmp	r3, #0
   18e70:	bne	18de0 <_start@@Base+0x63e4>
   18e74:	mov	r2, r4
   18e78:	mov	r0, r5
   18e7c:	mov	r3, #33	; 0x21
   18e80:	bl	27994 <flatcc_json_parser_set_error@@Base>
   18e84:	mov	r1, r0
   18e88:	mov	r0, r1
   18e8c:	add	sp, sp, #244	; 0xf4
   18e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e94:	ldr	r3, [sp, #280]	; 0x118
   18e98:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   18e9c:	mov	r1, r0
   18ea0:	b	18e58 <_start@@Base+0x645c>
   18ea4:	mov	r2, #2
   18ea8:	mov	r1, r2
   18eac:	ldr	r0, [r0]
   18eb0:	bl	230ac <flatcc_builder_start_struct@@Base>
   18eb4:	subs	r3, r0, #0
   18eb8:	str	r3, [sp, #24]
   18ebc:	beq	1937c <_start@@Base+0x6980>
   18ec0:	add	r7, sp, #224	; 0xe0
   18ec4:	mov	r1, r6
   18ec8:	mov	r3, r7
   18ecc:	mov	r2, r4
   18ed0:	mov	r0, r5
   18ed4:	bl	133ac <_start@@Base+0x9b0>
   18ed8:	ldr	r3, [sp, #224]	; 0xe0
   18edc:	cmp	r3, #0
   18ee0:	mov	r1, r0
   18ee4:	beq	198a0 <_start@@Base+0x6ea4>
   18ee8:	ldr	r3, [pc, #1212]	; 193ac <_start@@Base+0x69b0>
   18eec:	mov	r8, r5
   18ef0:	add	r3, pc, r3
   18ef4:	add	r3, r3, #120	; 0x78
   18ef8:	str	r3, [sp, #64]	; 0x40
   18efc:	mov	r9, r7
   18f00:	b	19040 <_start@@Base+0x6644>
   18f04:	add	r5, r0, #8
   18f08:	sub	r1, r4, r5
   18f0c:	cmp	r1, #8
   18f10:	bls	19234 <_start@@Base+0x6838>
   18f14:	mov	r7, #0
   18f18:	ldrb	r2, [r0, #14]
   18f1c:	lsr	ip, r2, #24
   18f20:	lsl	r3, r2, #8
   18f24:	str	ip, [sp, #204]	; 0xcc
   18f28:	str	r3, [sp, #200]	; 0xc8
   18f2c:	ldrd	r2, [sp, #200]	; 0xc8
   18f30:	orr	r3, r3, r7
   18f34:	mov	r7, r3
   18f38:	ldrb	r2, [r0, #13]
   18f3c:	lsr	ip, r2, #16
   18f40:	lsl	r3, r2, #16
   18f44:	str	ip, [sp, #188]	; 0xbc
   18f48:	str	r3, [sp, #184]	; 0xb8
   18f4c:	ldrd	r2, [sp, #184]	; 0xb8
   18f50:	orr	r3, r3, r7
   18f54:	mov	r7, r3
   18f58:	ldrb	r2, [r0, #12]
   18f5c:	lsr	ip, r2, #8
   18f60:	lsl	r3, r2, #24
   18f64:	str	ip, [sp, #140]	; 0x8c
   18f68:	str	r3, [sp, #136]	; 0x88
   18f6c:	ldrd	r2, [sp, #136]	; 0x88
   18f70:	orr	r3, r3, r7
   18f74:	ldrb	ip, [r0, #11]
   18f78:	str	ip, [sp, #156]	; 0x9c
   18f7c:	mov	ip, #0
   18f80:	str	ip, [sp, #152]	; 0x98
   18f84:	ldrd	r6, [sp, #152]	; 0x98
   18f88:	orr	r7, r7, r3
   18f8c:	mov	r3, r7
   18f90:	ldrb	r6, [r0, #10]
   18f94:	lsl	ip, r6, #8
   18f98:	str	ip, [sp, #116]	; 0x74
   18f9c:	mov	ip, #0
   18fa0:	str	ip, [sp, #112]	; 0x70
   18fa4:	ldrd	r6, [sp, #112]	; 0x70
   18fa8:	orr	r7, r7, r3
   18fac:	mov	r3, r7
   18fb0:	ldrb	r6, [r0, #9]
   18fb4:	lsl	ip, r6, #16
   18fb8:	str	ip, [sp, #100]	; 0x64
   18fbc:	mov	ip, #0
   18fc0:	str	ip, [sp, #96]	; 0x60
   18fc4:	ldrd	r6, [sp, #96]	; 0x60
   18fc8:	orr	r7, r7, r3
   18fcc:	mov	r3, r7
   18fd0:	ldrb	r6, [r0, #8]
   18fd4:	mov	r2, #0
   18fd8:	lsl	r0, r6, #24
   18fdc:	str	r0, [sp, #60]	; 0x3c
   18fe0:	mov	r0, #0
   18fe4:	str	r0, [sp, #56]	; 0x38
   18fe8:	ldrd	r6, [sp, #56]	; 0x38
   18fec:	orr	r7, r7, r3
   18ff0:	bic	r3, r7, #255	; 0xff
   18ff4:	add	r7, pc, #924	; 0x39c
   18ff8:	ldrd	r6, [r7]
   18ffc:	cmp	r3, r7
   19000:	cmpeq	r2, r6
   19004:	bne	19010 <_start@@Base+0x6614>
   19008:	cmp	r1, #3
   1900c:	bgt	192b8 <_start@@Base+0x68bc>
   19010:	mov	r1, r5
   19014:	mov	r2, r4
   19018:	mov	r0, r8
   1901c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19020:	mov	r1, r0
   19024:	mov	r3, r9
   19028:	mov	r2, r4
   1902c:	mov	r0, r8
   19030:	bl	14e8c <_start@@Base+0x2490>
   19034:	ldr	r3, [sp, #224]	; 0xe0
   19038:	cmp	r3, #0
   1903c:	beq	198cc <_start@@Base+0x6ed0>
   19040:	cmp	r4, r0
   19044:	beq	19198 <_start@@Base+0x679c>
   19048:	ldrb	r3, [r0]
   1904c:	cmp	r3, #34	; 0x22
   19050:	moveq	r3, #0
   19054:	addeq	r0, r0, #1
   19058:	streq	r3, [r8, #12]
   1905c:	beq	19070 <_start@@Base+0x6674>
   19060:	cmp	r3, #46	; 0x2e
   19064:	movne	r3, #1
   19068:	strne	r3, [r8, #12]
   1906c:	beq	19358 <_start@@Base+0x695c>
   19070:	sub	r3, r4, r0
   19074:	cmp	r3, #8
   19078:	bls	191b0 <_start@@Base+0x67b4>
   1907c:	ldrb	r2, [r0, #7]
   19080:	mov	r3, #0
   19084:	ldrb	r6, [r0, #6]
   19088:	lsr	r1, r6, #24
   1908c:	str	r1, [sp, #132]	; 0x84
   19090:	lsl	r1, r6, #8
   19094:	str	r1, [sp, #128]	; 0x80
   19098:	ldrd	r6, [sp, #128]	; 0x80
   1909c:	orr	r6, r6, r2
   190a0:	orr	r7, r7, r3
   190a4:	mov	r2, r6
   190a8:	mov	r3, r7
   190ac:	ldrb	r6, [r0, #5]
   190b0:	lsr	r1, r6, #16
   190b4:	str	r1, [sp, #84]	; 0x54
   190b8:	lsl	r1, r6, #16
   190bc:	str	r1, [sp, #80]	; 0x50
   190c0:	ldrd	r6, [sp, #80]	; 0x50
   190c4:	orr	r6, r6, r2
   190c8:	orr	r7, r7, r3
   190cc:	mov	r2, r6
   190d0:	mov	r3, r7
   190d4:	ldrb	r6, [r0, #4]
   190d8:	lsr	r1, r6, #8
   190dc:	str	r1, [sp, #36]	; 0x24
   190e0:	lsl	r1, r6, #24
   190e4:	str	r1, [sp, #32]
   190e8:	ldrd	r6, [sp, #32]
   190ec:	orr	r6, r6, r2
   190f0:	orr	r7, r7, r3
   190f4:	mov	r2, r6
   190f8:	mov	r3, r7
   190fc:	ldrb	r1, [r0, #3]
   19100:	str	r1, [sp, #52]	; 0x34
   19104:	mov	r1, #0
   19108:	str	r1, [sp, #48]	; 0x30
   1910c:	ldrd	r6, [sp, #48]	; 0x30
   19110:	orr	r6, r6, r2
   19114:	orr	r7, r7, r3
   19118:	mov	r2, r6
   1911c:	mov	r3, r7
   19120:	ldrb	r6, [r0, #2]
   19124:	lsl	r1, r6, #8
   19128:	str	r1, [sp, #20]
   1912c:	mov	r1, #0
   19130:	str	r1, [sp, #16]
   19134:	ldrd	r6, [sp, #16]
   19138:	orr	r6, r6, r2
   1913c:	orr	r7, r7, r3
   19140:	mov	r2, r6
   19144:	mov	r3, r7
   19148:	ldrb	r6, [r0, #1]
   1914c:	lsl	r1, r6, #16
   19150:	str	r1, [sp, #12]
   19154:	mov	r1, #0
   19158:	str	r1, [sp, #8]
   1915c:	ldrd	r6, [sp, #8]
   19160:	orr	r6, r6, r2
   19164:	orr	r7, r7, r3
   19168:	mov	r2, r6
   1916c:	mov	r3, r7
   19170:	ldrb	r6, [r0]
   19174:	mov	sl, #0
   19178:	orr	r2, r2, sl
   1917c:	lsl	fp, r6, #24
   19180:	add	r7, pc, #536	; 0x218
   19184:	ldrd	r6, [r7]
   19188:	orr	r3, r3, fp
   1918c:	cmp	r3, r7
   19190:	cmpeq	r2, r6
   19194:	beq	18f04 <_start@@Base+0x6508>
   19198:	mov	r1, r0
   1919c:	mov	r2, r4
   191a0:	mov	r0, r8
   191a4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   191a8:	mov	r1, r0
   191ac:	b	19024 <_start@@Base+0x6628>
   191b0:	sub	r3, r3, #1
   191b4:	cmp	r3, #7
   191b8:	addls	pc, pc, r3, lsl #2
   191bc:	b	19198 <_start@@Base+0x679c>
   191c0:	b	19228 <_start@@Base+0x682c>
   191c4:	b	1921c <_start@@Base+0x6820>
   191c8:	b	19210 <_start@@Base+0x6814>
   191cc:	b	19204 <_start@@Base+0x6808>
   191d0:	b	191f8 <_start@@Base+0x67fc>
   191d4:	b	191ec <_start@@Base+0x67f0>
   191d8:	b	191e0 <_start@@Base+0x67e4>
   191dc:	b	1907c <_start@@Base+0x6680>
   191e0:	mov	r2, #0
   191e4:	mov	r3, r2
   191e8:	b	19084 <_start@@Base+0x6688>
   191ec:	mov	r2, #0
   191f0:	mov	r3, r2
   191f4:	b	190ac <_start@@Base+0x66b0>
   191f8:	mov	r2, #0
   191fc:	mov	r3, r2
   19200:	b	190d4 <_start@@Base+0x66d8>
   19204:	mov	r2, #0
   19208:	mov	r3, r2
   1920c:	b	190fc <_start@@Base+0x6700>
   19210:	mov	r2, #0
   19214:	mov	r3, r2
   19218:	b	19120 <_start@@Base+0x6724>
   1921c:	mov	r2, #0
   19220:	mov	r3, r2
   19224:	b	19148 <_start@@Base+0x674c>
   19228:	mov	r2, #0
   1922c:	mov	r3, r2
   19230:	b	19170 <_start@@Base+0x6774>
   19234:	sub	r3, r1, #1
   19238:	cmp	r3, #7
   1923c:	addls	pc, pc, r3, lsl #2
   19240:	b	19010 <_start@@Base+0x6614>
   19244:	b	192ac <_start@@Base+0x68b0>
   19248:	b	192a0 <_start@@Base+0x68a4>
   1924c:	b	19294 <_start@@Base+0x6898>
   19250:	b	19288 <_start@@Base+0x688c>
   19254:	b	1927c <_start@@Base+0x6880>
   19258:	b	19270 <_start@@Base+0x6874>
   1925c:	b	19264 <_start@@Base+0x6868>
   19260:	b	18f14 <_start@@Base+0x6518>
   19264:	mov	r6, #0
   19268:	mov	r7, r6
   1926c:	b	18f18 <_start@@Base+0x651c>
   19270:	mov	r6, #0
   19274:	mov	r7, r6
   19278:	b	18f38 <_start@@Base+0x653c>
   1927c:	mov	r6, #0
   19280:	mov	r7, r6
   19284:	b	18f58 <_start@@Base+0x655c>
   19288:	mov	r2, #0
   1928c:	mov	r3, r2
   19290:	b	18f74 <_start@@Base+0x6578>
   19294:	mov	r2, #0
   19298:	mov	r3, r2
   1929c:	b	18f90 <_start@@Base+0x6594>
   192a0:	mov	r2, #0
   192a4:	mov	r3, r2
   192a8:	b	18fb0 <_start@@Base+0x65b4>
   192ac:	mov	r2, #0
   192b0:	mov	r3, r2
   192b4:	b	18fd0 <_start@@Base+0x65d4>
   192b8:	mov	r3, #3
   192bc:	mov	r2, r4
   192c0:	mov	r1, r5
   192c4:	mov	r0, r8
   192c8:	bl	18084 <_start@@Base+0x5688>
   192cc:	cmp	r5, r0
   192d0:	str	r0, [sp, #40]	; 0x28
   192d4:	beq	19010 <_start@@Base+0x6614>
   192d8:	ldrd	r2, [sp, #56]	; 0x38
   192dc:	mov	r1, #0
   192e0:	cmp	r4, r0
   192e4:	mov	r5, r0
   192e8:	strh	r2, [sp, #220]	; 0xdc
   192ec:	str	r1, [sp, #232]	; 0xe8
   192f0:	str	r1, [sp, #236]	; 0xec
   192f4:	str	r2, [sp, #228]	; 0xe4
   192f8:	beq	19858 <_start@@Base+0x6e5c>
   192fc:	add	r3, sp, #232	; 0xe8
   19300:	mov	r1, r0
   19304:	str	r3, [sp]
   19308:	mov	r2, r4
   1930c:	add	r3, sp, #228	; 0xe4
   19310:	mov	r0, r8
   19314:	bl	296fc <flatcc_json_parser_integer@@Base>
   19318:	cmp	r5, r0
   1931c:	mov	r1, r0
   19320:	beq	19858 <_start@@Base+0x6e5c>
   19324:	ldr	r3, [sp, #228]	; 0xe4
   19328:	cmp	r3, #0
   1932c:	bne	199e4 <_start@@Base+0x6fe8>
   19330:	ldrd	r2, [sp, #232]	; 0xe8
   19334:	ldr	r6, [pc, #116]	; 193b0 <_start@@Base+0x69b4>
   19338:	mov	r7, #0
   1933c:	cmp	r3, r7
   19340:	cmpeq	r2, r6
   19344:	uxthls	r2, r2
   19348:	bhi	19a58 <_start@@Base+0x705c>
   1934c:	ldr	r3, [sp, #24]
   19350:	strh	r2, [r3]
   19354:	b	19024 <_start@@Base+0x6628>
   19358:	mov	r1, r0
   1935c:	mov	r3, #5
   19360:	mov	r2, r4
   19364:	mov	r0, r8
   19368:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1936c:	b	19070 <_start@@Base+0x6674>
   19370:	ldr	r3, [r5, #24]
   19374:	cmp	r3, #0
   19378:	beq	19a0c <_start@@Base+0x7010>
   1937c:	mov	r1, r6
   19380:	mov	r3, #33	; 0x21
   19384:	mov	r2, r4
   19388:	mov	r0, r5
   1938c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19390:	mov	r1, r0
   19394:	b	18e58 <_start@@Base+0x645c>
   19398:	andeq	r0, r0, r0
   1939c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   193a0:	svcpl	0x006c656e
   193a4:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   193a8:	andeq	r2, r1, r8, lsl #3
   193ac:	muleq	r2, r8, r1
   193b0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   193b4:	andeq	r3, r2, r8, lsl #25
   193b8:	mov	r1, #1
   193bc:	ldr	r0, [r0]
   193c0:	bl	23ce8 <flatcc_builder_start_table@@Base>
   193c4:	cmp	r0, #0
   193c8:	bne	1937c <_start@@Base+0x6980>
   193cc:	add	r7, sp, #220	; 0xdc
   193d0:	mov	r1, r6
   193d4:	mov	r3, r7
   193d8:	mov	r2, r4
   193dc:	mov	r0, r5
   193e0:	bl	133ac <_start@@Base+0x9b0>
   193e4:	ldr	r3, [sp, #220]	; 0xdc
   193e8:	cmp	r3, #0
   193ec:	mov	r6, r0
   193f0:	beq	19370 <_start@@Base+0x6974>
   193f4:	ldr	r3, [pc, #-72]	; 193b4 <_start@@Base+0x69b8>
   193f8:	add	fp, pc, #928	; 0x3a0
   193fc:	ldrd	sl, [fp]
   19400:	add	r3, pc, r3
   19404:	add	r3, r3, #108	; 0x6c
   19408:	str	r3, [sp, #16]
   1940c:	b	196c4 <_start@@Base+0x6cc8>
   19410:	ldrb	r0, [r6, #7]
   19414:	mov	r1, #0
   19418:	ldrb	r2, [r6, #6]
   1941c:	lsr	ip, r2, #24
   19420:	lsl	r3, r2, #8
   19424:	str	ip, [sp, #164]	; 0xa4
   19428:	str	r3, [sp, #160]	; 0xa0
   1942c:	ldrd	r2, [sp, #160]	; 0xa0
   19430:	orr	r2, r2, r0
   19434:	orr	r3, r3, r1
   19438:	ldrb	r0, [r6, #5]
   1943c:	lsr	ip, r0, #16
   19440:	lsl	r1, r0, #16
   19444:	str	ip, [sp, #108]	; 0x6c
   19448:	str	r1, [sp, #104]	; 0x68
   1944c:	ldrd	r0, [sp, #104]	; 0x68
   19450:	orr	r0, r0, r2
   19454:	orr	r1, r1, r3
   19458:	mov	r2, r0
   1945c:	mov	r3, r1
   19460:	ldrb	r0, [r6, #4]
   19464:	lsr	ip, r0, #8
   19468:	lsl	r1, r0, #24
   1946c:	str	ip, [sp, #68]	; 0x44
   19470:	str	r1, [sp, #64]	; 0x40
   19474:	ldrd	r0, [sp, #64]	; 0x40
   19478:	orr	r0, r0, r2
   1947c:	orr	r1, r1, r3
   19480:	mov	r2, r0
   19484:	mov	r3, r1
   19488:	ldrb	r1, [r6, #3]
   1948c:	str	r1, [sp, #76]	; 0x4c
   19490:	mov	r1, #0
   19494:	str	r1, [sp, #72]	; 0x48
   19498:	ldrd	r0, [sp, #72]	; 0x48
   1949c:	orr	r0, r0, r2
   194a0:	orr	r1, r1, r3
   194a4:	mov	r2, r0
   194a8:	mov	r3, r1
   194ac:	ldrb	r0, [r6, #2]
   194b0:	lsl	r1, r0, #8
   194b4:	str	r1, [sp, #44]	; 0x2c
   194b8:	mov	r1, #0
   194bc:	str	r1, [sp, #40]	; 0x28
   194c0:	ldrd	r0, [sp, #40]	; 0x28
   194c4:	orr	r0, r0, r2
   194c8:	orr	r1, r1, r3
   194cc:	mov	r2, r0
   194d0:	mov	r3, r1
   194d4:	ldrb	r0, [r6, #1]
   194d8:	lsl	r1, r0, #16
   194dc:	str	r1, [sp, #28]
   194e0:	mov	r1, #0
   194e4:	str	r1, [sp, #24]
   194e8:	ldrd	r0, [sp, #24]
   194ec:	orr	r0, r0, r2
   194f0:	orr	r1, r1, r3
   194f4:	mov	r2, r0
   194f8:	mov	r3, r1
   194fc:	ldrb	r0, [r6]
   19500:	mov	r8, #0
   19504:	orr	r2, r2, r8
   19508:	lsl	r9, r0, #24
   1950c:	orr	r3, r3, r9
   19510:	cmp	r3, fp
   19514:	cmpeq	r2, sl
   19518:	bne	1968c <_start@@Base+0x6c90>
   1951c:	add	ip, r6, #8
   19520:	sub	r3, r4, ip
   19524:	cmp	r3, #8
   19528:	bls	197b8 <_start@@Base+0x6dbc>
   1952c:	ldrb	r0, [r6, #15]
   19530:	mov	r1, #0
   19534:	ldrb	r2, [r6, #14]
   19538:	lsr	lr, r2, #24
   1953c:	lsl	r3, r2, #8
   19540:	str	lr, [sp, #212]	; 0xd4
   19544:	str	r3, [sp, #208]	; 0xd0
   19548:	ldrd	r2, [sp, #208]	; 0xd0
   1954c:	orr	r2, r2, r0
   19550:	orr	r3, r3, r1
   19554:	mov	r0, r2
   19558:	mov	r1, r3
   1955c:	ldrb	r2, [r6, #13]
   19560:	lsr	lr, r2, #16
   19564:	lsl	r3, r2, #16
   19568:	str	lr, [sp, #196]	; 0xc4
   1956c:	str	r3, [sp, #192]	; 0xc0
   19570:	ldrd	r2, [sp, #192]	; 0xc0
   19574:	orr	r2, r2, r0
   19578:	orr	r3, r3, r1
   1957c:	mov	r0, r2
   19580:	mov	r1, r3
   19584:	ldrb	r2, [r6, #12]
   19588:	lsr	lr, r2, #8
   1958c:	lsl	r3, r2, #24
   19590:	str	lr, [sp, #172]	; 0xac
   19594:	str	r3, [sp, #168]	; 0xa8
   19598:	ldrd	r2, [sp, #168]	; 0xa8
   1959c:	orr	r2, r2, r0
   195a0:	orr	r3, r3, r1
   195a4:	ldrb	r1, [r6, #11]
   195a8:	str	r1, [sp, #180]	; 0xb4
   195ac:	mov	r1, #0
   195b0:	str	r1, [sp, #176]	; 0xb0
   195b4:	ldrd	r0, [sp, #176]	; 0xb0
   195b8:	orr	r0, r0, r2
   195bc:	orr	r1, r1, r3
   195c0:	mov	r2, r0
   195c4:	mov	r3, r1
   195c8:	ldrb	r0, [r6, #10]
   195cc:	lsl	r1, r0, #8
   195d0:	str	r1, [sp, #148]	; 0x94
   195d4:	mov	r1, #0
   195d8:	str	r1, [sp, #144]	; 0x90
   195dc:	ldrd	r0, [sp, #144]	; 0x90
   195e0:	orr	r0, r0, r2
   195e4:	orr	r1, r1, r3
   195e8:	mov	r2, r0
   195ec:	mov	r3, r1
   195f0:	ldrb	r0, [r6, #9]
   195f4:	lsl	r1, r0, #16
   195f8:	str	r1, [sp, #124]	; 0x7c
   195fc:	mov	r1, #0
   19600:	str	r1, [sp, #120]	; 0x78
   19604:	ldrd	r0, [sp, #120]	; 0x78
   19608:	orr	r0, r0, r2
   1960c:	orr	r1, r1, r3
   19610:	mov	r2, r0
   19614:	mov	r3, r1
   19618:	ldrb	r0, [r6, #8]
   1961c:	lsl	r1, r0, #24
   19620:	str	r1, [sp, #92]	; 0x5c
   19624:	mov	r1, #0
   19628:	str	r1, [sp, #88]	; 0x58
   1962c:	ldrd	r0, [sp, #88]	; 0x58
   19630:	orr	r0, r0, r2
   19634:	orr	r1, r1, r3
   19638:	mov	r2, r0
   1963c:	mov	r3, r1
   19640:	add	r1, pc, #352	; 0x160
   19644:	ldrd	r0, [r1]
   19648:	cmp	r3, r1
   1964c:	cmpeq	r2, r0
   19650:	bne	19784 <_start@@Base+0x6d88>
   19654:	add	r6, r6, #16
   19658:	mov	r0, r6
   1965c:	mov	r1, r4
   19660:	bl	12b28 <_start@@Base+0x12c>
   19664:	add	r3, pc, #324	; 0x144
   19668:	ldrd	r2, [r3]
   1966c:	mov	r0, #0
   19670:	bic	r1, r1, #255	; 0xff
   19674:	cmp	r1, r3
   19678:	cmpeq	r0, r2
   1967c:	bne	1968c <_start@@Base+0x6c90>
   19680:	sub	r3, r4, r6
   19684:	cmp	r3, #3
   19688:	bgt	198d8 <_start@@Base+0x6edc>
   1968c:	mov	r1, r6
   19690:	mov	r2, r4
   19694:	mov	r0, r5
   19698:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1969c:	mov	r6, r0
   196a0:	mov	r1, r6
   196a4:	mov	r3, r7
   196a8:	mov	r2, r4
   196ac:	mov	r0, r5
   196b0:	bl	14e8c <_start@@Base+0x2490>
   196b4:	ldr	r3, [sp, #220]	; 0xdc
   196b8:	cmp	r3, #0
   196bc:	mov	r6, r0
   196c0:	beq	19370 <_start@@Base+0x6974>
   196c4:	cmp	r4, r6
   196c8:	beq	1968c <_start@@Base+0x6c90>
   196cc:	ldrb	r3, [r6]
   196d0:	cmp	r3, #34	; 0x22
   196d4:	moveq	r3, #0
   196d8:	addeq	r6, r6, #1
   196dc:	streq	r3, [r5, #12]
   196e0:	beq	196f4 <_start@@Base+0x6cf8>
   196e4:	cmp	r3, #46	; 0x2e
   196e8:	movne	r3, #1
   196ec:	strne	r3, [r5, #12]
   196f0:	beq	1983c <_start@@Base+0x6e40>
   196f4:	sub	r3, r4, r6
   196f8:	cmp	r3, #8
   196fc:	bhi	19410 <_start@@Base+0x6a14>
   19700:	sub	r3, r3, #1
   19704:	cmp	r3, #7
   19708:	addls	pc, pc, r3, lsl #2
   1970c:	b	1968c <_start@@Base+0x6c90>
   19710:	b	19778 <_start@@Base+0x6d7c>
   19714:	b	1976c <_start@@Base+0x6d70>
   19718:	b	19760 <_start@@Base+0x6d64>
   1971c:	b	19754 <_start@@Base+0x6d58>
   19720:	b	19748 <_start@@Base+0x6d4c>
   19724:	b	1973c <_start@@Base+0x6d40>
   19728:	b	19730 <_start@@Base+0x6d34>
   1972c:	b	19410 <_start@@Base+0x6a14>
   19730:	mov	r0, #0
   19734:	mov	r1, r0
   19738:	b	19418 <_start@@Base+0x6a1c>
   1973c:	mov	r2, #0
   19740:	mov	r3, r2
   19744:	b	19438 <_start@@Base+0x6a3c>
   19748:	mov	r2, #0
   1974c:	mov	r3, r2
   19750:	b	19460 <_start@@Base+0x6a64>
   19754:	mov	r2, #0
   19758:	mov	r3, r2
   1975c:	b	19488 <_start@@Base+0x6a8c>
   19760:	mov	r2, #0
   19764:	mov	r3, r2
   19768:	b	194ac <_start@@Base+0x6ab0>
   1976c:	mov	r2, #0
   19770:	mov	r3, r2
   19774:	b	194d4 <_start@@Base+0x6ad8>
   19778:	mov	r2, #0
   1977c:	mov	r3, r2
   19780:	b	194fc <_start@@Base+0x6b00>
   19784:	mov	r1, ip
   19788:	mov	r2, r4
   1978c:	mov	r0, r5
   19790:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19794:	mov	r6, r0
   19798:	b	196a0 <_start@@Base+0x6ca4>
   1979c:	nop			; (mov r0, r0)
   197a0:	ldrbvs	r6, [pc], #-372	; 197a8 <_start@@Base+0x6dac>
   197a4:	cmnvc	r7, #456	; 0x1c8
   197a8:	svcpl	0x0064616d
   197ac:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   197b0:	andeq	r0, r0, r0
   197b4:	cmnvs	r7, r0, lsl #10
   197b8:	sub	r3, r3, #1
   197bc:	cmp	r3, #7
   197c0:	addls	pc, pc, r3, lsl #2
   197c4:	b	19784 <_start@@Base+0x6d88>
   197c8:	b	19830 <_start@@Base+0x6e34>
   197cc:	b	19824 <_start@@Base+0x6e28>
   197d0:	b	19818 <_start@@Base+0x6e1c>
   197d4:	b	1980c <_start@@Base+0x6e10>
   197d8:	b	19800 <_start@@Base+0x6e04>
   197dc:	b	197f4 <_start@@Base+0x6df8>
   197e0:	b	197e8 <_start@@Base+0x6dec>
   197e4:	b	1952c <_start@@Base+0x6b30>
   197e8:	mov	r0, #0
   197ec:	mov	r1, r0
   197f0:	b	19534 <_start@@Base+0x6b38>
   197f4:	mov	r0, #0
   197f8:	mov	r1, r0
   197fc:	b	1955c <_start@@Base+0x6b60>
   19800:	mov	r0, #0
   19804:	mov	r1, r0
   19808:	b	19584 <_start@@Base+0x6b88>
   1980c:	mov	r2, #0
   19810:	mov	r3, r2
   19814:	b	195a4 <_start@@Base+0x6ba8>
   19818:	mov	r2, #0
   1981c:	mov	r3, r2
   19820:	b	195c8 <_start@@Base+0x6bcc>
   19824:	mov	r2, #0
   19828:	mov	r3, r2
   1982c:	b	195f0 <_start@@Base+0x6bf4>
   19830:	mov	r2, #0
   19834:	mov	r3, r2
   19838:	b	19618 <_start@@Base+0x6c1c>
   1983c:	mov	r1, r6
   19840:	mov	r3, #5
   19844:	mov	r2, r4
   19848:	mov	r0, r5
   1984c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19850:	mov	r6, r0
   19854:	b	196f4 <_start@@Base+0x6cf8>
   19858:	ldr	r5, [sp, #40]	; 0x28
   1985c:	add	r3, sp, #220	; 0xdc
   19860:	str	r3, [sp]
   19864:	mov	r1, r5
   19868:	ldr	r3, [sp, #64]	; 0x40
   1986c:	mov	r2, r4
   19870:	mov	r0, r8
   19874:	bl	13fb4 <_start@@Base+0x15b8>
   19878:	cmp	r4, r0
   1987c:	cmpne	r0, r5
   19880:	mov	r1, r0
   19884:	bne	19a04 <_start@@Base+0x7008>
   19888:	mov	r3, #33	; 0x21
   1988c:	mov	r2, r4
   19890:	mov	r0, r8
   19894:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19898:	mov	r5, r8
   1989c:	mov	r1, r0
   198a0:	cmp	r4, r1
   198a4:	beq	19380 <_start@@Base+0x6984>
   198a8:	ldr	r0, [r5]
   198ac:	str	r1, [sp, #8]
   198b0:	bl	23154 <flatcc_builder_end_struct@@Base>
   198b4:	ldr	r3, [sp, #280]	; 0x118
   198b8:	ldr	r1, [sp, #8]
   198bc:	cmp	r0, #0
   198c0:	str	r0, [r3]
   198c4:	beq	19380 <_start@@Base+0x6984>
   198c8:	b	18de0 <_start@@Base+0x63e4>
   198cc:	mov	r1, r0
   198d0:	mov	r5, r8
   198d4:	b	198a0 <_start@@Base+0x6ea4>
   198d8:	mov	r1, r6
   198dc:	mov	r3, #3
   198e0:	mov	r2, r4
   198e4:	mov	r0, r5
   198e8:	bl	18084 <_start@@Base+0x5688>
   198ec:	cmp	r6, r0
   198f0:	mov	r1, r0
   198f4:	str	r0, [sp, #8]
   198f8:	beq	1968c <_start@@Base+0x6c90>
   198fc:	ldrd	r2, [sp, #88]	; 0x58
   19900:	cmp	r4, r0
   19904:	mov	r0, #0
   19908:	str	r2, [sp, #224]	; 0xe0
   1990c:	str	r0, [sp, #232]	; 0xe8
   19910:	str	r0, [sp, #236]	; 0xec
   19914:	str	r2, [sp, #228]	; 0xe4
   19918:	beq	19a74 <_start@@Base+0x7078>
   1991c:	add	r3, sp, #232	; 0xe8
   19920:	str	r3, [sp]
   19924:	mov	r2, r4
   19928:	add	r3, sp, #228	; 0xe4
   1992c:	mov	r0, r5
   19930:	bl	296fc <flatcc_json_parser_integer@@Base>
   19934:	ldr	r3, [sp, #8]
   19938:	cmp	r3, r0
   1993c:	mov	r6, r0
   19940:	beq	19a70 <_start@@Base+0x7074>
   19944:	ldr	r3, [sp, #228]	; 0xe4
   19948:	ldrd	r0, [sp, #232]	; 0xe8
   1994c:	cmp	r3, #0
   19950:	beq	199b0 <_start@@Base+0x6fb4>
   19954:	cmp	r1, #0
   19958:	cmpeq	r0, #-2147483648	; 0x80000000
   1995c:	rsbls	r0, r0, #0
   19960:	strls	r0, [sp, #224]	; 0xe0
   19964:	bhi	19a2c <_start@@Base+0x7030>
   19968:	cmp	r0, #0
   1996c:	bne	1997c <_start@@Base+0x6f80>
   19970:	ldr	r3, [r5, #8]
   19974:	tst	r3, #2
   19978:	beq	196a0 <_start@@Base+0x6ca4>
   1997c:	mov	r3, #4
   19980:	mov	r2, r3
   19984:	mov	r1, #0
   19988:	ldr	r0, [r5]
   1998c:	bl	25728 <flatcc_builder_table_add@@Base>
   19990:	cmp	r0, #0
   19994:	beq	1937c <_start@@Base+0x6980>
   19998:	ldr	r3, [sp, #224]	; 0xe0
   1999c:	str	r3, [r0]
   199a0:	b	196a0 <_start@@Base+0x6ca4>
   199a4:	bl	28ad8 <flatcc_json_parser_generic_json@@Base>
   199a8:	mov	r1, r0
   199ac:	b	18de0 <_start@@Base+0x63e4>
   199b0:	mov	r3, #0
   199b4:	cmp	r1, r3
   199b8:	mvn	r2, #-2147483648	; 0x80000000
   199bc:	cmpeq	r0, r2
   199c0:	strls	r0, [sp, #224]	; 0xe0
   199c4:	bls	19968 <_start@@Base+0x6f6c>
   199c8:	mov	r1, r6
   199cc:	mov	r3, #7
   199d0:	mov	r2, r4
   199d4:	mov	r0, r5
   199d8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   199dc:	mov	r6, r0
   199e0:	b	19a44 <_start@@Base+0x7048>
   199e4:	mov	r3, #8
   199e8:	mov	r2, r4
   199ec:	mov	r0, r8
   199f0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   199f4:	mov	r1, r0
   199f8:	ldr	r3, [sp, #40]	; 0x28
   199fc:	cmp	r3, r1
   19a00:	beq	19858 <_start@@Base+0x6e5c>
   19a04:	ldrh	r2, [sp, #220]	; 0xdc
   19a08:	b	1934c <_start@@Base+0x6950>
   19a0c:	ldr	r0, [r5]
   19a10:	bl	246dc <flatcc_builder_end_table@@Base>
   19a14:	ldr	r3, [sp, #280]	; 0x118
   19a18:	cmp	r0, #0
   19a1c:	str	r0, [r3]
   19a20:	movne	r1, r6
   19a24:	beq	1937c <_start@@Base+0x6980>
   19a28:	b	18e58 <_start@@Base+0x645c>
   19a2c:	mov	r1, r6
   19a30:	mov	r3, #8
   19a34:	mov	r2, r4
   19a38:	mov	r0, r5
   19a3c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19a40:	mov	r6, r0
   19a44:	ldr	r3, [sp, #8]
   19a48:	cmp	r3, r6
   19a4c:	beq	19a74 <_start@@Base+0x7078>
   19a50:	ldr	r0, [sp, #224]	; 0xe0
   19a54:	b	19968 <_start@@Base+0x6f6c>
   19a58:	mov	r3, #7
   19a5c:	mov	r2, r4
   19a60:	mov	r0, r8
   19a64:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19a68:	mov	r1, r0
   19a6c:	b	199f8 <_start@@Base+0x6ffc>
   19a70:	str	r0, [sp, #8]
   19a74:	add	r3, sp, #224	; 0xe0
   19a78:	str	r3, [sp]
   19a7c:	mov	r2, r4
   19a80:	ldr	r3, [sp, #16]
   19a84:	ldr	r1, [sp, #8]
   19a88:	mov	r0, r5
   19a8c:	bl	13b38 <_start@@Base+0x113c>
   19a90:	ldr	r3, [sp, #8]
   19a94:	cmp	r4, r0
   19a98:	cmpne	r0, r3
   19a9c:	mov	r6, r0
   19aa0:	bne	19a50 <_start@@Base+0x7054>
   19aa4:	b	1937c <_start@@Base+0x6980>
   19aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19aac:	vpush	{d8-d9}
   19ab0:	mov	sl, r0
   19ab4:	mov	r0, r3
   19ab8:	mov	fp, r1
   19abc:	sub	sp, sp, #156	; 0x9c
   19ac0:	mov	r1, #36	; 0x24
   19ac4:	str	r3, [sp, #76]	; 0x4c
   19ac8:	mov	r3, #0
   19acc:	str	r3, [r0]
   19ad0:	ldr	r0, [sl]
   19ad4:	mov	r9, r2
   19ad8:	bl	23ce8 <flatcc_builder_start_table@@Base>
   19adc:	cmp	r0, #0
   19ae0:	bne	19ca8 <_start@@Base+0x72ac>
   19ae4:	add	r3, sp, #124	; 0x7c
   19ae8:	str	r3, [sp]
   19aec:	mov	r2, r9
   19af0:	mov	r3, #1
   19af4:	mov	r1, fp
   19af8:	mov	r0, sl
   19afc:	bl	29db0 <flatcc_json_parser_prepare_unions@@Base>
   19b00:	cmp	r9, r0
   19b04:	beq	19ca8 <_start@@Base+0x72ac>
   19b08:	add	r3, sp, #116	; 0x74
   19b0c:	mov	r1, fp
   19b10:	mov	r2, r9
   19b14:	mov	r0, sl
   19b18:	mov	r4, r3
   19b1c:	bl	133ac <_start@@Base+0x9b0>
   19b20:	ldr	r3, [sp, #116]	; 0x74
   19b24:	cmp	r3, #0
   19b28:	mov	fp, r0
   19b2c:	beq	19c70 <_start@@Base+0x7274>
   19b30:	ldr	r1, [pc, #1152]	; 19fb8 <_start@@Base+0x75bc>
   19b34:	ldr	r2, [pc, #1152]	; 19fbc <_start@@Base+0x75c0>
   19b38:	ldr	r3, [pc, #1152]	; 19fc0 <_start@@Base+0x75c4>
   19b3c:	add	r1, pc, r1
   19b40:	add	r2, pc, r2
   19b44:	add	r3, pc, r3
   19b48:	mov	fp, r9
   19b4c:	mov	r7, r0
   19b50:	mov	r9, r4
   19b54:	add	r1, r1, #468	; 0x1d4
   19b58:	add	r2, r2, #444	; 0x1bc
   19b5c:	add	r3, r3, #420	; 0x1a4
   19b60:	str	r1, [sp, #80]	; 0x50
   19b64:	str	r2, [sp, #84]	; 0x54
   19b68:	str	r3, [sp, #96]	; 0x60
   19b6c:	cmp	fp, r7
   19b70:	beq	19b9c <_start@@Base+0x71a0>
   19b74:	ldrb	r3, [r7]
   19b78:	cmp	r3, #34	; 0x22
   19b7c:	moveq	r3, #0
   19b80:	addeq	r7, r7, #1
   19b84:	streq	r3, [sl, #12]
   19b88:	beq	19b9c <_start@@Base+0x71a0>
   19b8c:	cmp	r3, #46	; 0x2e
   19b90:	movne	r3, #1
   19b94:	strne	r3, [sl, #12]
   19b98:	beq	1a14c <_start@@Base+0x7750>
   19b9c:	mov	r1, fp
   19ba0:	mov	r0, r7
   19ba4:	bl	12b28 <_start@@Base+0x12c>
   19ba8:	add	r3, pc, #880	; 0x370
   19bac:	ldrd	r2, [r3]
   19bb0:	cmp	r1, r3
   19bb4:	cmpeq	r0, r2
   19bb8:	mov	r4, r0
   19bbc:	mov	r5, r1
   19bc0:	bhi	19cc8 <_start@@Base+0x72cc>
   19bc4:	add	r3, pc, #860	; 0x35c
   19bc8:	ldrd	r2, [r3]
   19bcc:	cmp	r1, r3
   19bd0:	cmpeq	r0, r2
   19bd4:	bhi	19d44 <_start@@Base+0x7348>
   19bd8:	add	r3, pc, #848	; 0x350
   19bdc:	ldrd	r2, [r3]
   19be0:	cmp	r1, r3
   19be4:	cmpeq	r0, r2
   19be8:	bhi	19df8 <_start@@Base+0x73fc>
   19bec:	add	r3, pc, #836	; 0x344
   19bf0:	ldrd	r2, [r3]
   19bf4:	and	r4, r0, #-16777216	; 0xff000000
   19bf8:	cmp	r1, r3
   19bfc:	cmpeq	r4, r2
   19c00:	beq	1a654 <_start@@Base+0x7c58>
   19c04:	add	r3, pc, #820	; 0x334
   19c08:	ldrd	r2, [r3]
   19c0c:	cmp	r1, r3
   19c10:	cmpeq	r4, r2
   19c14:	beq	1a2b8 <_start@@Base+0x78bc>
   19c18:	mov	r1, r7
   19c1c:	mov	r2, fp
   19c20:	mov	r0, sl
   19c24:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19c28:	mov	r7, r0
   19c2c:	b	19c44 <_start@@Base+0x7248>
   19c30:	mov	r1, r7
   19c34:	mov	r2, fp
   19c38:	mov	r0, sl
   19c3c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19c40:	mov	r7, r0
   19c44:	mov	r1, r7
   19c48:	mov	r3, r9
   19c4c:	mov	r2, fp
   19c50:	mov	r0, sl
   19c54:	bl	14e8c <_start@@Base+0x2490>
   19c58:	ldr	r3, [sp, #116]	; 0x74
   19c5c:	cmp	r3, #0
   19c60:	mov	r7, r0
   19c64:	bne	19b6c <_start@@Base+0x7170>
   19c68:	mov	r9, fp
   19c6c:	mov	fp, r0
   19c70:	ldr	r3, [sl, #24]
   19c74:	cmp	r3, #0
   19c78:	bne	19ca8 <_start@@Base+0x72ac>
   19c7c:	mov	r1, #3
   19c80:	ldr	r0, [sl]
   19c84:	bl	24504 <flatcc_builder_check_required_field@@Base>
   19c88:	mov	r1, fp
   19c8c:	cmp	r0, #0
   19c90:	bne	1ca7c <_start@@Base+0xa080>
   19c94:	mov	r3, #29
   19c98:	mov	r2, r9
   19c9c:	mov	r0, sl
   19ca0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19ca4:	mov	fp, r0
   19ca8:	mov	r2, r9
   19cac:	mov	r1, fp
   19cb0:	mov	r0, sl
   19cb4:	mov	r3, #33	; 0x21
   19cb8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   19cbc:	add	sp, sp, #156	; 0x9c
   19cc0:	vpop	{d8-d9}
   19cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cc8:	add	r3, pc, #632	; 0x278
   19ccc:	ldrd	r2, [r3]
   19cd0:	cmp	r1, r3
   19cd4:	cmpeq	r0, r2
   19cd8:	bhi	19d9c <_start@@Base+0x73a0>
   19cdc:	add	r3, pc, #620	; 0x26c
   19ce0:	ldrd	r2, [r3]
   19ce4:	cmp	r1, r3
   19ce8:	cmpeq	r0, r2
   19cec:	beq	1a0c0 <_start@@Base+0x76c4>
   19cf0:	add	r3, pc, #608	; 0x260
   19cf4:	ldrd	r2, [r3]
   19cf8:	cmp	r1, r3
   19cfc:	cmpeq	r0, r2
   19d00:	bhi	1a064 <_start@@Base+0x7668>
   19d04:	add	r3, pc, #596	; 0x254
   19d08:	ldrd	r2, [r3]
   19d0c:	cmp	r1, r3
   19d10:	cmpeq	r0, r2
   19d14:	beq	1a6c8 <_start@@Base+0x7ccc>
   19d18:	add	r3, pc, #584	; 0x248
   19d1c:	ldrd	r2, [r3]
   19d20:	cmp	r1, r3
   19d24:	cmpeq	r0, r2
   19d28:	beq	1a340 <_start@@Base+0x7944>
   19d2c:	mov	r1, r7
   19d30:	mov	r2, fp
   19d34:	mov	r0, sl
   19d38:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19d3c:	mov	r7, r0
   19d40:	b	19c44 <_start@@Base+0x7248>
   19d44:	add	r3, pc, #548	; 0x224
   19d48:	ldrd	r2, [r3]
   19d4c:	cmp	r1, r3
   19d50:	cmpeq	r0, r2
   19d54:	bhi	19e3c <_start@@Base+0x7440>
   19d58:	add	r3, pc, #536	; 0x218
   19d5c:	ldrd	r2, [r3]
   19d60:	cmp	r1, r3
   19d64:	cmpeq	r0, r2
   19d68:	bhi	1a168 <_start@@Base+0x776c>
   19d6c:	add	r3, pc, #524	; 0x20c
   19d70:	ldrd	r2, [r3]
   19d74:	mov	r4, #0
   19d78:	cmp	r1, r3
   19d7c:	cmpeq	r4, r2
   19d80:	beq	1a458 <_start@@Base+0x7a5c>
   19d84:	mov	r1, r7
   19d88:	mov	r2, fp
   19d8c:	mov	r0, sl
   19d90:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19d94:	mov	r7, r0
   19d98:	b	19c44 <_start@@Base+0x7248>
   19d9c:	add	r3, pc, #484	; 0x1e4
   19da0:	ldrd	r2, [r3]
   19da4:	cmp	r1, r3
   19da8:	cmpeq	r0, r2
   19dac:	bhi	19fd4 <_start@@Base+0x75d8>
   19db0:	add	r3, pc, #472	; 0x1d8
   19db4:	ldrd	r2, [r3]
   19db8:	ldr	r0, [pc, #516]	; 19fc4 <_start@@Base+0x75c8>
   19dbc:	mvn	r1, #0
   19dc0:	and	r5, r5, r1
   19dc4:	and	r4, r4, r0
   19dc8:	cmp	r5, r3
   19dcc:	cmpeq	r4, r2
   19dd0:	bne	19c30 <_start@@Base+0x7234>
   19dd4:	sub	r3, fp, r7
   19dd8:	cmp	r3, #6
   19ddc:	bgt	1a4a0 <_start@@Base+0x7aa4>
   19de0:	mov	r1, r7
   19de4:	mov	r2, fp
   19de8:	mov	r0, sl
   19dec:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19df0:	mov	r7, r0
   19df4:	b	19c44 <_start@@Base+0x7248>
   19df8:	ldr	r3, [pc, #456]	; 19fc8 <_start@@Base+0x75cc>
   19dfc:	mvn	r2, #0
   19e00:	cmp	r1, r3
   19e04:	cmpeq	r0, r2
   19e08:	bhi	1a1bc <_start@@Base+0x77c0>
   19e0c:	add	r3, pc, #388	; 0x184
   19e10:	ldrd	r2, [r3]
   19e14:	mov	r4, #0
   19e18:	cmp	r1, r3
   19e1c:	cmpeq	r4, r2
   19e20:	beq	1a47c <_start@@Base+0x7a80>
   19e24:	mov	r1, r7
   19e28:	mov	r2, fp
   19e2c:	mov	r0, sl
   19e30:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   19e34:	mov	r7, r0
   19e38:	b	19c44 <_start@@Base+0x7248>
   19e3c:	add	r3, pc, #348	; 0x15c
   19e40:	ldrd	r2, [r3]
   19e44:	and	r0, r0, #-16777216	; 0xff000000
   19e48:	cmp	r1, r3
   19e4c:	cmpeq	r0, r2
   19e50:	strd	r0, [sp, #56]	; 0x38
   19e54:	beq	1a58c <_start@@Base+0x7b90>
   19e58:	sub	r6, fp, r7
   19e5c:	cmp	r6, #4
   19e60:	bgt	1bec4 <_start@@Base+0x94c8>
   19e64:	add	r3, pc, #316	; 0x13c
   19e68:	ldrd	r2, [r3]
   19e6c:	ldrd	r0, [sp, #56]	; 0x38
   19e70:	cmp	r1, r3
   19e74:	cmpeq	r0, r2
   19e78:	beq	1a56c <_start@@Base+0x7b70>
   19e7c:	add	r3, pc, #300	; 0x12c
   19e80:	ldrd	r2, [r3]
   19e84:	cmp	r5, r3
   19e88:	cmpeq	r4, r2
   19e8c:	bne	1a574 <_start@@Base+0x7b78>
   19e90:	add	r7, r7, #8
   19e94:	mov	r0, r7
   19e98:	mov	r1, fp
   19e9c:	bl	12b28 <_start@@Base+0x12c>
   19ea0:	mov	r0, #0
   19ea4:	and	r1, r1, #-16777216	; 0xff000000
   19ea8:	cmp	r1, #1694498816	; 0x65000000
   19eac:	cmpeq	r0, #0
   19eb0:	bne	1a8b0 <_start@@Base+0x7eb4>
   19eb4:	sub	r3, fp, r7
   19eb8:	cmp	r3, #1
   19ebc:	ble	1af0c <_start@@Base+0x8510>
   19ec0:	mov	r1, r7
   19ec4:	mov	r3, #1
   19ec8:	mov	r2, fp
   19ecc:	mov	r0, sl
   19ed0:	bl	18084 <_start@@Base+0x5688>
   19ed4:	cmp	r7, r0
   19ed8:	mov	r1, r0
   19edc:	beq	1af0c <_start@@Base+0x8510>
   19ee0:	ldr	r3, [pc, #228]	; 19fcc <_start@@Base+0x75d0>
   19ee4:	ldr	ip, [sp, #124]	; 0x7c
   19ee8:	ldr	r2, [pc, #224]	; 19fd0 <_start@@Base+0x75d4>
   19eec:	mov	r0, #8
   19ef0:	add	r3, pc, r3
   19ef4:	add	r2, pc, r2
   19ef8:	add	r3, r3, #260	; 0x104
   19efc:	str	r3, [sp, #8]
   19f00:	str	r2, [sp, #12]
   19f04:	stm	sp, {r0, ip}
   19f08:	mov	r3, #0
   19f0c:	mov	r2, fp
   19f10:	mov	r0, sl
   19f14:	bl	29fb4 <flatcc_json_parser_union_type@@Base>
   19f18:	mov	r7, r0
   19f1c:	b	19c44 <_start@@Base+0x7248>
   19f20:	cmnvs	r2, r0, ror #4
   19f24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f28:			; <UNDEFINED> instruction: 0xffffffff
   19f2c:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   19f30:			; <UNDEFINED> instruction: 0xffffffff
   19f34:			; <UNDEFINED> instruction: 0x666c6577
   19f38:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   19f3c:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   19f40:	andvc	r0, r0, #0
   19f44:	cmnvs	pc, #28416	; 0x6f00
   19f48:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   19f4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f50:	cmnvs	r2, r1, ror #4
   19f54:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f58:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   19f5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f60:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   19f64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f68:	rsbvs	r6, pc, #108, 30	; 0x1b0
   19f6c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f70:			; <UNDEFINED> instruction: 0xffffffff
   19f74:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   19f78:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   19f7c:	rsbvc	r7, r1, r5, ror #4
   19f80:	andeq	r0, r0, r0
   19f84:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   19f88:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   19f8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f90:	ldrtvs	r0, [r3], -r0
   19f94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19f98:	andeq	r0, r0, r0
   19f9c:			; <UNDEFINED> instruction: 0x666c6578
   19fa0:	strcc	r0, [r0], #-0
   19fa4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19fa8:	strcc	r0, [r0, #-0]
   19fac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19fb0:	svcpl	0x00747970
   19fb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19fb8:	andeq	r3, r2, ip, asr #10
   19fbc:	andeq	r3, r2, r8, asr #10
   19fc0:	andeq	r3, r2, r4, asr #10
   19fc4:			; <UNDEFINED> instruction: 0xffff0000
   19fc8:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   19fcc:	muleq	r2, r8, r1
   19fd0:	andeq	r3, r0, r4, lsr #27
   19fd4:	add	r3, pc, #972	; 0x3cc
   19fd8:	ldrd	r2, [r3]
   19fdc:	cmp	r1, r3
   19fe0:	cmpeq	r0, r2
   19fe4:	beq	1a678 <_start@@Base+0x7c7c>
   19fe8:	add	r3, pc, #960	; 0x3c0
   19fec:	ldrd	r2, [r3]
   19ff0:	cmp	r1, r3
   19ff4:	cmpeq	r0, r2
   19ff8:	bls	1a268 <_start@@Base+0x786c>
   19ffc:	add	r3, pc, #948	; 0x3b4
   1a000:	ldrd	r2, [r3]
   1a004:	cmp	r1, r3
   1a008:	cmpeq	r0, r2
   1a00c:	bne	1a720 <_start@@Base+0x7d24>
   1a010:	add	r4, r7, #8
   1a014:	mov	r0, r4
   1a018:	mov	r1, fp
   1a01c:	bl	12b28 <_start@@Base+0x12c>
   1a020:	add	r3, pc, #920	; 0x398
   1a024:	ldrd	r2, [r3]
   1a028:	cmp	r1, r3
   1a02c:	cmpeq	r0, r2
   1a030:	beq	1c648 <_start@@Base+0x9c4c>
   1a034:	add	r3, pc, #908	; 0x38c
   1a038:	ldrd	r2, [r3]
   1a03c:	bic	r0, r0, #255	; 0xff
   1a040:	cmp	r1, r3
   1a044:	cmpeq	r0, r2
   1a048:	beq	1aee8 <_start@@Base+0x84ec>
   1a04c:	mov	r1, r4
   1a050:	mov	r2, fp
   1a054:	mov	r0, sl
   1a058:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a05c:	mov	r7, r0
   1a060:	b	19c44 <_start@@Base+0x7248>
   1a064:	add	r3, pc, #868	; 0x364
   1a068:	ldrd	r2, [r3]
   1a06c:	cmp	r1, r3
   1a070:	cmpeq	r0, r2
   1a074:	bls	1a218 <_start@@Base+0x781c>
   1a078:	add	r3, pc, #856	; 0x358
   1a07c:	ldrd	r2, [r3]
   1a080:	ldr	r0, [pc, #968]	; 1a450 <_start@@Base+0x7a54>
   1a084:	mvn	r1, #0
   1a088:	and	r5, r5, r1
   1a08c:	cmp	r5, r3
   1a090:	and	r4, r4, r0
   1a094:	cmpeq	r4, r2
   1a098:	sub	r3, fp, r7
   1a09c:	beq	1a970 <_start@@Base+0x7f74>
   1a0a0:	cmp	r3, #5
   1a0a4:	bgt	1c824 <_start@@Base+0x9e28>
   1a0a8:	mov	r1, r7
   1a0ac:	mov	r2, fp
   1a0b0:	mov	r0, sl
   1a0b4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a0b8:	mov	r7, r0
   1a0bc:	b	19c44 <_start@@Base+0x7248>
   1a0c0:	add	r4, r7, #8
   1a0c4:	mov	r0, r4
   1a0c8:	mov	r1, fp
   1a0cc:	bl	12b28 <_start@@Base+0x12c>
   1a0d0:	add	r3, pc, #776	; 0x308
   1a0d4:	ldrd	r2, [r3]
   1a0d8:	cmp	r1, r3
   1a0dc:	cmpeq	r0, r2
   1a0e0:	bhi	1a2dc <_start@@Base+0x78e0>
   1a0e4:	add	r3, pc, #764	; 0x2fc
   1a0e8:	ldrd	r2, [r3]
   1a0ec:	cmp	r1, r3
   1a0f0:	cmpeq	r0, r2
   1a0f4:	beq	1b81c <_start@@Base+0x8e20>
   1a0f8:	add	r3, pc, #752	; 0x2f0
   1a0fc:	ldrd	r2, [r3]
   1a100:	cmp	r1, r3
   1a104:	cmpeq	r0, r2
   1a108:	bne	1a8e4 <_start@@Base+0x7ee8>
   1a10c:	add	r4, r7, #16
   1a110:	mov	r0, r4
   1a114:	mov	r1, fp
   1a118:	bl	12b28 <_start@@Base+0x12c>
   1a11c:	add	r3, pc, #724	; 0x2d4
   1a120:	ldrd	r2, [r3]
   1a124:	bic	r0, r0, #255	; 0xff
   1a128:	cmp	r1, r3
   1a12c:	cmpeq	r0, r2
   1a130:	beq	1af60 <_start@@Base+0x8564>
   1a134:	mov	r1, r4
   1a138:	mov	r2, fp
   1a13c:	mov	r0, sl
   1a140:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a144:	mov	r7, r0
   1a148:	b	19c44 <_start@@Base+0x7248>
   1a14c:	mov	r1, r7
   1a150:	mov	r3, #5
   1a154:	mov	r2, fp
   1a158:	mov	r0, sl
   1a15c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1a160:	mov	r7, r0
   1a164:	b	19b9c <_start@@Base+0x71a0>
   1a168:	add	r3, pc, #656	; 0x290
   1a16c:	ldrd	r2, [r3]
   1a170:	cmp	r1, r3
   1a174:	cmpeq	r0, r2
   1a178:	beq	1a530 <_start@@Base+0x7b34>
   1a17c:	add	r3, pc, #644	; 0x284
   1a180:	ldrd	r2, [r3]
   1a184:	bic	r5, r1, #255	; 0xff
   1a188:	mov	r4, #0
   1a18c:	cmp	r5, r3
   1a190:	cmpeq	r4, r2
   1a194:	bne	1a768 <_start@@Base+0x7d6c>
   1a198:	sub	r3, fp, r7
   1a19c:	cmp	r3, #3
   1a1a0:	bgt	1bf14 <_start@@Base+0x9518>
   1a1a4:	mov	r1, r7
   1a1a8:	mov	r2, fp
   1a1ac:	mov	r0, sl
   1a1b0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a1b4:	mov	r7, r0
   1a1b8:	b	19c44 <_start@@Base+0x7248>
   1a1bc:	add	r3, pc, #588	; 0x24c
   1a1c0:	ldrd	r2, [r3]
   1a1c4:	cmp	r1, r3
   1a1c8:	cmpeq	r0, r2
   1a1cc:	bhi	1a364 <_start@@Base+0x7968>
   1a1d0:	ldr	r3, [pc, #632]	; 1a450 <_start@@Base+0x7a54>
   1a1d4:	mov	r2, #0
   1a1d8:	and	r5, r5, r3
   1a1dc:	ldr	r3, [pc, #624]	; 1a454 <_start@@Base+0x7a58>
   1a1e0:	and	r4, r4, r2
   1a1e4:	cmp	r5, r3
   1a1e8:	mov	r2, #0
   1a1ec:	cmpeq	r4, r2
   1a1f0:	bne	1a8c8 <_start@@Base+0x7ecc>
   1a1f4:	sub	r3, fp, r7
   1a1f8:	cmp	r3, #2
   1a1fc:	bgt	1b10c <_start@@Base+0x8710>
   1a200:	mov	r1, r7
   1a204:	mov	r2, fp
   1a208:	mov	r0, sl
   1a20c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a210:	mov	r7, r0
   1a214:	b	19c44 <_start@@Base+0x7248>
   1a218:	add	r3, pc, #504	; 0x1f8
   1a21c:	ldrd	r2, [r3]
   1a220:	cmp	r1, r3
   1a224:	cmpeq	r0, r2
   1a228:	bne	1a750 <_start@@Base+0x7d54>
   1a22c:	add	r4, r7, #8
   1a230:	mov	r0, r4
   1a234:	mov	r1, fp
   1a238:	bl	12b28 <_start@@Base+0x12c>
   1a23c:	mov	r0, #0
   1a240:	and	r1, r1, #-16777216	; 0xff000000
   1a244:	cmp	r1, #2030043136	; 0x79000000
   1a248:	cmpeq	r0, #0
   1a24c:	beq	1aabc <_start@@Base+0x80c0>
   1a250:	mov	r1, r4
   1a254:	mov	r2, fp
   1a258:	mov	r0, sl
   1a25c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a260:	mov	r7, r0
   1a264:	b	19c44 <_start@@Base+0x7248>
   1a268:	add	r3, pc, #432	; 0x1b0
   1a26c:	ldrd	r2, [r3]
   1a270:	cmp	r1, r3
   1a274:	cmpeq	r0, r2
   1a278:	bne	1a738 <_start@@Base+0x7d3c>
   1a27c:	add	r4, r7, #8
   1a280:	mov	r0, r4
   1a284:	mov	r1, fp
   1a288:	bl	12b28 <_start@@Base+0x12c>
   1a28c:	add	r3, pc, #404	; 0x194
   1a290:	ldrd	r2, [r3]
   1a294:	cmp	r1, r3
   1a298:	cmpeq	r0, r2
   1a29c:	beq	1aca8 <_start@@Base+0x82ac>
   1a2a0:	mov	r1, r4
   1a2a4:	mov	r2, fp
   1a2a8:	mov	r0, sl
   1a2ac:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a2b0:	mov	r7, r0
   1a2b4:	b	19c44 <_start@@Base+0x7248>
   1a2b8:	sub	r3, fp, r7
   1a2bc:	cmp	r3, #5
   1a2c0:	bgt	1a990 <_start@@Base+0x7f94>
   1a2c4:	mov	r1, r7
   1a2c8:	mov	r2, fp
   1a2cc:	mov	r0, sl
   1a2d0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a2d4:	mov	r7, r0
   1a2d8:	b	19c44 <_start@@Base+0x7248>
   1a2dc:	add	r3, pc, #332	; 0x14c
   1a2e0:	ldrd	r2, [r3]
   1a2e4:	cmp	r1, r3
   1a2e8:	cmpeq	r0, r2
   1a2ec:	beq	1b6fc <_start@@Base+0x8d00>
   1a2f0:	add	r3, pc, #320	; 0x140
   1a2f4:	ldrd	r2, [r3]
   1a2f8:	cmp	r1, r3
   1a2fc:	cmpeq	r0, r2
   1a300:	bne	1a8fc <_start@@Base+0x7f00>
   1a304:	add	r4, r7, #16
   1a308:	mov	r0, r4
   1a30c:	mov	r1, fp
   1a310:	bl	12b28 <_start@@Base+0x12c>
   1a314:	mov	r0, #0
   1a318:	and	r1, r1, #-16777216	; 0xff000000
   1a31c:	cmp	r1, #1929379840	; 0x73000000
   1a320:	cmpeq	r0, #0
   1a324:	beq	1b038 <_start@@Base+0x863c>
   1a328:	mov	r1, r4
   1a32c:	mov	r2, fp
   1a330:	mov	r0, sl
   1a334:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a338:	mov	r7, r0
   1a33c:	b	19c44 <_start@@Base+0x7248>
   1a340:	sub	r3, fp, r7
   1a344:	cmp	r3, #8
   1a348:	bgt	1ba30 <_start@@Base+0x9034>
   1a34c:	mov	r1, r7
   1a350:	mov	r2, fp
   1a354:	mov	r0, sl
   1a358:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a35c:	mov	r7, r0
   1a360:	b	19c44 <_start@@Base+0x7248>
   1a364:	add	r3, pc, #212	; 0xd4
   1a368:	ldrd	r2, [r3]
   1a36c:	cmp	r1, r3
   1a370:	cmpeq	r0, r2
   1a374:	beq	1bd0c <_start@@Base+0x9310>
   1a378:	add	r3, pc, #200	; 0xc8
   1a37c:	ldrd	r2, [r3]
   1a380:	mov	r4, #0
   1a384:	cmp	r1, r3
   1a388:	cmpeq	r4, r2
   1a38c:	beq	1aa98 <_start@@Base+0x809c>
   1a390:	mov	r1, r7
   1a394:	mov	r2, fp
   1a398:	mov	r0, sl
   1a39c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a3a0:	mov	r7, r0
   1a3a4:	b	19c44 <_start@@Base+0x7248>
   1a3a8:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1a3ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a3b0:	svcvs	0x00725f6e
   1a3b4:			; <UNDEFINED> instruction: 0x76656374
   1a3b8:	svcvs	0x00725f6f
   1a3bc:			; <UNDEFINED> instruction: 0x76656374
   1a3c0:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1a3c4:	ldrbvs	r6, [pc], -pc, ror #8
   1a3c8:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1a3cc:	ldrbvs	r6, [pc], -pc, ror #24
   1a3d0:	ldrbvs	pc, [pc, #4095]!	; 1b3d7 <_start@@Base+0x89db>	; <UNPREDICTABLE>
   1a3d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a3d8:	ldrtvs	r0, [r2], -r0
   1a3dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a3e0:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1a3e4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a3e8:	svcvs	0x006f6c73
   1a3ec:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a3f0:	svcvs	0x00727465
   1a3f4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a3f8:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1a3fc:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1a400:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1a404:	rsbvc	r7, r1, r5, ror #4
   1a408:	andeq	r0, r0, r0
   1a40c:	rsbvc	r7, pc, r0, lsl #6
   1a410:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1a414:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1a418:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1a41c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a420:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1a424:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a428:	cmnvs	r4, r5, ror r2
   1a42c:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1a430:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1a434:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a438:	cmnvs	r2, r5, ror #24
   1a43c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a440:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1a444:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1a448:	andeq	r0, r0, r0
   1a44c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1a450:			; <UNDEFINED> instruction: 0xffff0000
   1a454:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1a458:	sub	r3, fp, r7
   1a45c:	cmp	r3, #4
   1a460:	bgt	1bc90 <_start@@Base+0x9294>
   1a464:	mov	r1, r7
   1a468:	mov	r2, fp
   1a46c:	mov	r0, sl
   1a470:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a474:	mov	r7, r0
   1a478:	b	19c44 <_start@@Base+0x7248>
   1a47c:	sub	r3, fp, r7
   1a480:	cmp	r3, #4
   1a484:	bgt	1bb50 <_start@@Base+0x9154>
   1a488:	mov	r1, r7
   1a48c:	mov	r2, fp
   1a490:	mov	r0, sl
   1a494:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a498:	mov	r7, r0
   1a49c:	b	19c44 <_start@@Base+0x7248>
   1a4a0:	mov	r3, #6
   1a4a4:	mov	r2, fp
   1a4a8:	mov	r1, r7
   1a4ac:	mov	r0, sl
   1a4b0:	bl	18084 <_start@@Base+0x5688>
   1a4b4:	cmp	r0, r7
   1a4b8:	mov	r5, r0
   1a4bc:	beq	19de0 <_start@@Base+0x73e4>
   1a4c0:	add	r4, sp, #152	; 0x98
   1a4c4:	mov	r3, #0
   1a4c8:	mov	r1, r0
   1a4cc:	str	r3, [r4, #-8]!
   1a4d0:	mov	r2, fp
   1a4d4:	mov	r0, sl
   1a4d8:	mov	r3, r4
   1a4dc:	bl	289d0 <flatcc_json_parser_float@@Base>
   1a4e0:	cmp	r0, r5
   1a4e4:	mov	r7, r0
   1a4e8:	beq	1c924 <_start@@Base+0x9f28>
   1a4ec:	vldr	s15, [sp, #144]	; 0x90
   1a4f0:	vcmp.f32	s15, #0.0
   1a4f4:	vmrs	APSR_nzcv, fpscr
   1a4f8:	bne	1a508 <_start@@Base+0x7b0c>
   1a4fc:	ldr	r3, [sl, #8]
   1a500:	tst	r3, #2
   1a504:	beq	19c44 <_start@@Base+0x7248>
   1a508:	mov	r3, #4
   1a50c:	mov	r2, r3
   1a510:	mov	r1, #27
   1a514:	ldr	r0, [sl]
   1a518:	bl	25728 <flatcc_builder_table_add@@Base>
   1a51c:	cmp	r0, #0
   1a520:	beq	1a648 <_start@@Base+0x7c4c>
   1a524:	ldr	r3, [sp, #144]	; 0x90
   1a528:	str	r3, [r0]
   1a52c:	b	19c44 <_start@@Base+0x7248>
   1a530:	add	r4, r7, #8
   1a534:	mov	r0, r4
   1a538:	mov	r1, fp
   1a53c:	bl	12b28 <_start@@Base+0x12c>
   1a540:	add	r3, pc, #976	; 0x3d0
   1a544:	ldrd	r2, [r3]
   1a548:	cmp	r1, r3
   1a54c:	cmpeq	r0, r2
   1a550:	beq	1ae9c <_start@@Base+0x84a0>
   1a554:	mov	r1, r4
   1a558:	mov	r2, fp
   1a55c:	mov	r0, sl
   1a560:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a564:	mov	r7, r0
   1a568:	b	19c44 <_start@@Base+0x7248>
   1a56c:	cmp	r6, #5
   1a570:	bgt	1af84 <_start@@Base+0x8588>
   1a574:	mov	r1, r7
   1a578:	mov	r2, fp
   1a57c:	mov	r0, sl
   1a580:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a584:	mov	r7, r0
   1a588:	b	19c44 <_start@@Base+0x7248>
   1a58c:	sub	r3, fp, r7
   1a590:	cmp	r3, #5
   1a594:	ble	1a574 <_start@@Base+0x7b78>
   1a598:	mov	r3, #5
   1a59c:	mov	r2, fp
   1a5a0:	mov	r1, r7
   1a5a4:	mov	r0, sl
   1a5a8:	bl	18084 <_start@@Base+0x5688>
   1a5ac:	cmp	r0, r7
   1a5b0:	mov	r4, r0
   1a5b4:	beq	1a574 <_start@@Base+0x7b78>
   1a5b8:	mvn	r3, #-1073741824	; 0xc0000000
   1a5bc:	mov	r2, #2
   1a5c0:	mov	r1, #4
   1a5c4:	ldr	r0, [sl]
   1a5c8:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1a5cc:	cmp	r0, #0
   1a5d0:	bne	1d28c <_start@@Base+0xa890>
   1a5d4:	mov	r3, r9
   1a5d8:	mov	r1, r4
   1a5dc:	mov	r2, fp
   1a5e0:	mov	r0, sl
   1a5e4:	bl	13460 <_start@@Base+0xa64>
   1a5e8:	ldr	r3, [sp, #116]	; 0x74
   1a5ec:	cmp	r3, #0
   1a5f0:	mov	r7, r0
   1a5f4:	beq	1b544 <_start@@Base+0x8b48>
   1a5f8:	mov	r4, #1
   1a5fc:	b	1a628 <_start@@Base+0x7c2c>
   1a600:	bl	15010 <_start@@Base+0x2614>
   1a604:	mov	r3, r9
   1a608:	mov	r2, fp
   1a60c:	mov	r1, r0
   1a610:	mov	r0, sl
   1a614:	bl	14d08 <_start@@Base+0x230c>
   1a618:	ldr	r3, [sp, #116]	; 0x74
   1a61c:	cmp	r3, #0
   1a620:	mov	r7, r0
   1a624:	beq	1b544 <_start@@Base+0x8b48>
   1a628:	mov	r1, r4
   1a62c:	ldr	r0, [sl]
   1a630:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1a634:	mov	r1, r7
   1a638:	mov	r2, fp
   1a63c:	subs	r3, r0, #0
   1a640:	mov	r0, sl
   1a644:	bne	1a600 <_start@@Base+0x7c04>
   1a648:	mov	r9, fp
   1a64c:	mov	fp, r7
   1a650:	b	19ca8 <_start@@Base+0x72ac>
   1a654:	sub	r3, fp, r7
   1a658:	cmp	r3, #5
   1a65c:	bgt	1b69c <_start@@Base+0x8ca0>
   1a660:	mov	r1, r7
   1a664:	mov	r2, fp
   1a668:	mov	r0, sl
   1a66c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a670:	mov	r7, r0
   1a674:	b	19c44 <_start@@Base+0x7248>
   1a678:	add	r7, r7, #8
   1a67c:	mov	r0, r7
   1a680:	mov	r1, fp
   1a684:	bl	12b28 <_start@@Base+0x12c>
   1a688:	add	r3, pc, #656	; 0x290
   1a68c:	ldrd	r2, [r3]
   1a690:	cmp	r1, r3
   1a694:	cmpeq	r0, r2
   1a698:	bhi	1a780 <_start@@Base+0x7d84>
   1a69c:	add	r3, pc, #644	; 0x284
   1a6a0:	ldrd	r2, [r3]
   1a6a4:	cmp	r1, r3
   1a6a8:	cmpeq	r0, r2
   1a6ac:	beq	1add4 <_start@@Base+0x83d8>
   1a6b0:	mov	r1, r7
   1a6b4:	mov	r2, fp
   1a6b8:	mov	r0, sl
   1a6bc:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a6c0:	mov	r7, r0
   1a6c4:	b	19c44 <_start@@Base+0x7248>
   1a6c8:	add	r4, r7, #8
   1a6cc:	mov	r0, r4
   1a6d0:	mov	r1, fp
   1a6d4:	bl	12b28 <_start@@Base+0x12c>
   1a6d8:	ldr	r3, [pc, #616]	; 1a948 <_start@@Base+0x7f4c>
   1a6dc:	ldr	r7, [pc, #616]	; 1a94c <_start@@Base+0x7f50>
   1a6e0:	mov	r2, #0
   1a6e4:	mov	r6, #0
   1a6e8:	and	r3, r3, r1
   1a6ec:	and	r2, r2, r0
   1a6f0:	cmp	r3, r7
   1a6f4:	cmpeq	r2, r6
   1a6f8:	bne	1a958 <_start@@Base+0x7f5c>
   1a6fc:	sub	r3, fp, r4
   1a700:	cmp	r3, #2
   1a704:	bgt	1b22c <_start@@Base+0x8830>
   1a708:	mov	r1, r4
   1a70c:	mov	r2, fp
   1a710:	mov	r0, sl
   1a714:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a718:	mov	r7, r0
   1a71c:	b	19c44 <_start@@Base+0x7248>
   1a720:	mov	r1, r7
   1a724:	mov	r2, fp
   1a728:	mov	r0, sl
   1a72c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a730:	mov	r7, r0
   1a734:	b	19c44 <_start@@Base+0x7248>
   1a738:	mov	r1, r7
   1a73c:	mov	r2, fp
   1a740:	mov	r0, sl
   1a744:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a748:	mov	r7, r0
   1a74c:	b	19c44 <_start@@Base+0x7248>
   1a750:	mov	r1, r7
   1a754:	mov	r2, fp
   1a758:	mov	r0, sl
   1a75c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a760:	mov	r7, r0
   1a764:	b	19c44 <_start@@Base+0x7248>
   1a768:	mov	r1, r7
   1a76c:	mov	r2, fp
   1a770:	mov	r0, sl
   1a774:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a778:	mov	r7, r0
   1a77c:	b	19c44 <_start@@Base+0x7248>
   1a780:	add	r3, pc, #424	; 0x1a8
   1a784:	ldrd	r2, [r3]
   1a788:	cmp	r1, r3
   1a78c:	cmpeq	r0, r2
   1a790:	bls	1acf4 <_start@@Base+0x82f8>
   1a794:	add	r3, pc, #412	; 0x19c
   1a798:	ldrd	r2, [r3]
   1a79c:	cmp	r1, r3
   1a7a0:	cmpeq	r0, r2
   1a7a4:	beq	1cb94 <_start@@Base+0xa198>
   1a7a8:	add	r3, pc, #400	; 0x190
   1a7ac:	ldrd	r2, [r3]
   1a7b0:	cmp	r1, r3
   1a7b4:	cmpeq	r0, r2
   1a7b8:	bne	1ca48 <_start@@Base+0xa04c>
   1a7bc:	sub	r3, fp, r7
   1a7c0:	cmp	r3, #8
   1a7c4:	bgt	1d530 <_start@@Base+0xab34>
   1a7c8:	add	r7, r7, #8
   1a7cc:	mov	r0, r7
   1a7d0:	mov	r1, fp
   1a7d4:	bl	12b28 <_start@@Base+0x12c>
   1a7d8:	mov	r0, #0
   1a7dc:	and	r1, r1, #-16777216	; 0xff000000
   1a7e0:	cmp	r1, #1627389952	; 0x61000000
   1a7e4:	cmpeq	r0, #0
   1a7e8:	bne	1d840 <_start@@Base+0xae44>
   1a7ec:	sub	r3, fp, r7
   1a7f0:	cmp	r3, #1
   1a7f4:	ble	1db80 <_start@@Base+0xb184>
   1a7f8:	mov	r3, #1
   1a7fc:	mov	r2, fp
   1a800:	mov	r1, r7
   1a804:	mov	r0, sl
   1a808:	bl	18084 <_start@@Base+0x5688>
   1a80c:	cmp	r7, r0
   1a810:	mov	r4, r0
   1a814:	beq	1db84 <_start@@Base+0xb188>
   1a818:	mov	r2, #0
   1a81c:	mov	r3, #0
   1a820:	mov	r1, #0
   1a824:	cmp	fp, r0
   1a828:	strd	r2, [sp, #136]	; 0x88
   1a82c:	strd	r2, [sp, #144]	; 0x90
   1a830:	str	r1, [sp, #132]	; 0x84
   1a834:	beq	1db9c <_start@@Base+0xb1a0>
   1a838:	add	r3, sp, #144	; 0x90
   1a83c:	str	r3, [sp]
   1a840:	mov	r1, r0
   1a844:	add	r3, sp, #132	; 0x84
   1a848:	mov	r2, fp
   1a84c:	mov	r0, sl
   1a850:	bl	296fc <flatcc_json_parser_integer@@Base>
   1a854:	cmp	r4, r0
   1a858:	mov	r7, r0
   1a85c:	beq	1dba0 <_start@@Base+0xb1a4>
   1a860:	ldr	r1, [sp, #132]	; 0x84
   1a864:	ldrd	r2, [sp, #144]	; 0x90
   1a868:	cmp	r1, #0
   1a86c:	bne	1db38 <_start@@Base+0xb13c>
   1a870:	strd	r2, [sp, #136]	; 0x88
   1a874:	orrs	r3, r2, r3
   1a878:	bne	1a888 <_start@@Base+0x7e8c>
   1a87c:	ldr	r3, [sl, #8]
   1a880:	tst	r3, #2
   1a884:	beq	19c44 <_start@@Base+0x7248>
   1a888:	mov	r3, #8
   1a88c:	mov	r2, r3
   1a890:	mov	r1, #23
   1a894:	ldr	r0, [sl]
   1a898:	bl	25728 <flatcc_builder_table_add@@Base>
   1a89c:	cmp	r0, #0
   1a8a0:	beq	1a648 <_start@@Base+0x7c4c>
   1a8a4:	ldrd	r2, [sp, #136]	; 0x88
   1a8a8:	strd	r2, [r0]
   1a8ac:	b	19c44 <_start@@Base+0x7248>
   1a8b0:	mov	r1, r7
   1a8b4:	mov	r2, fp
   1a8b8:	mov	r0, sl
   1a8bc:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a8c0:	mov	r7, r0
   1a8c4:	b	19c44 <_start@@Base+0x7248>
   1a8c8:	mov	r1, r7
   1a8cc:	mov	r2, fp
   1a8d0:	mov	r0, sl
   1a8d4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a8d8:	mov	r7, r0
   1a8dc:	b	19c44 <_start@@Base+0x7248>
   1a8e0:	mov	r4, r0
   1a8e4:	mov	r1, r4
   1a8e8:	mov	r2, fp
   1a8ec:	mov	r0, sl
   1a8f0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a8f4:	mov	r7, r0
   1a8f8:	b	19c44 <_start@@Base+0x7248>
   1a8fc:	mov	r1, r4
   1a900:	mov	r2, fp
   1a904:	mov	r0, sl
   1a908:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a90c:	mov	r7, r0
   1a910:	b	19c44 <_start@@Base+0x7248>
   1a914:	nop			; (mov r0, r0)
   1a918:	rsbvc	r6, r1, r5, ror #6
   1a91c:	smcvs	54867	; 0xd653
   1a920:			; <UNDEFINED> instruction: 0x666e7630
   1a924:	teqvc	r6, #1593835520	; 0x5f000000
   1a928:			; <UNDEFINED> instruction: 0x666e7631
   1a92c:	teqvc	r3, #-268435451	; 0xf0000005
   1a930:			; <UNDEFINED> instruction: 0x666e7630
   1a934:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1a938:			; <UNDEFINED> instruction: 0x666e7631
   1a93c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1a940:			; <UNDEFINED> instruction: 0x666e7631
   1a944:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1a948:			; <UNDEFINED> instruction: 0xffff0000
   1a94c:	ldrtcc	r0, [r4], -r0
   1a950:	andeq	r2, r2, r4, asr r5
   1a954:	andeq	r2, r2, r0, asr r5
   1a958:	mov	r1, r4
   1a95c:	mov	r2, fp
   1a960:	mov	r0, sl
   1a964:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a968:	mov	r7, r0
   1a96c:	b	19c44 <_start@@Base+0x7248>
   1a970:	cmp	r3, #6
   1a974:	bgt	1b198 <_start@@Base+0x879c>
   1a978:	mov	r1, r7
   1a97c:	mov	r2, fp
   1a980:	mov	r0, sl
   1a984:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1a988:	mov	r7, r0
   1a98c:	b	19c44 <_start@@Base+0x7248>
   1a990:	mov	r3, #5
   1a994:	mov	r2, fp
   1a998:	mov	r1, r7
   1a99c:	mov	r0, sl
   1a9a0:	bl	18084 <_start@@Base+0x5688>
   1a9a4:	cmp	r0, r7
   1a9a8:	mov	r4, r0
   1a9ac:	beq	1a2c4 <_start@@Base+0x78c8>
   1a9b0:	mov	r0, #0
   1a9b4:	mov	r1, #0
   1a9b8:	mov	r3, #0
   1a9bc:	cmp	fp, r4
   1a9c0:	strd	r0, [sp, #144]	; 0x90
   1a9c4:	strb	r3, [sp, #132]	; 0x84
   1a9c8:	str	r3, [sp, #136]	; 0x88
   1a9cc:	beq	1c610 <_start@@Base+0x9c14>
   1a9d0:	add	r3, sp, #144	; 0x90
   1a9d4:	str	r3, [sp]
   1a9d8:	mov	r2, fp
   1a9dc:	add	r3, sp, #136	; 0x88
   1a9e0:	mov	r1, r4
   1a9e4:	mov	r0, sl
   1a9e8:	bl	296fc <flatcc_json_parser_integer@@Base>
   1a9ec:	cmp	r4, r0
   1a9f0:	mov	r7, r0
   1a9f4:	beq	1c60c <_start@@Base+0x9c10>
   1a9f8:	ldr	r1, [sp, #136]	; 0x88
   1a9fc:	ldrd	r2, [sp, #144]	; 0x90
   1aa00:	cmp	r1, #0
   1aa04:	bne	1aa58 <_start@@Base+0x805c>
   1aa08:	cmp	r3, #0
   1aa0c:	cmpeq	r2, #127	; 0x7f
   1aa10:	sxtbls	r2, r2
   1aa14:	strbls	r2, [sp, #132]	; 0x84
   1aa18:	bhi	1cb78 <_start@@Base+0xa17c>
   1aa1c:	cmp	r2, #8
   1aa20:	bne	1aa30 <_start@@Base+0x8034>
   1aa24:	ldr	r3, [sl, #8]
   1aa28:	tst	r3, #2
   1aa2c:	beq	19c44 <_start@@Base+0x7248>
   1aa30:	mov	r3, #1
   1aa34:	mov	r2, r3
   1aa38:	mov	r1, #6
   1aa3c:	ldr	r0, [sl]
   1aa40:	bl	25728 <flatcc_builder_table_add@@Base>
   1aa44:	cmp	r0, #0
   1aa48:	beq	1a648 <_start@@Base+0x7c4c>
   1aa4c:	ldrsb	r3, [sp, #132]	; 0x84
   1aa50:	strb	r3, [r0]
   1aa54:	b	19c44 <_start@@Base+0x7248>
   1aa58:	cmp	r3, #0
   1aa5c:	cmpeq	r2, #128	; 0x80
   1aa60:	rsbls	r2, r2, #0
   1aa64:	sxtbls	r2, r2
   1aa68:	strbls	r2, [sp, #132]	; 0x84
   1aa6c:	bls	1aa1c <_start@@Base+0x8020>
   1aa70:	mov	r1, r0
   1aa74:	mov	r3, #8
   1aa78:	mov	r2, fp
   1aa7c:	mov	r0, sl
   1aa80:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1aa84:	mov	r7, r0
   1aa88:	cmp	r4, r7
   1aa8c:	beq	1c610 <_start@@Base+0x9c14>
   1aa90:	ldrsb	r2, [sp, #132]	; 0x84
   1aa94:	b	1aa1c <_start@@Base+0x8020>
   1aa98:	sub	r3, fp, r7
   1aa9c:	cmp	r3, #4
   1aaa0:	bgt	1c970 <_start@@Base+0x9f74>
   1aaa4:	mov	r1, r7
   1aaa8:	mov	r2, fp
   1aaac:	mov	r0, sl
   1aab0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1aab4:	mov	r7, r0
   1aab8:	b	19c44 <_start@@Base+0x7248>
   1aabc:	sub	r3, fp, r4
   1aac0:	cmp	r3, #1
   1aac4:	ble	1d214 <_start@@Base+0xa818>
   1aac8:	mov	r3, #1
   1aacc:	mov	r2, fp
   1aad0:	mov	r1, r4
   1aad4:	mov	r0, sl
   1aad8:	bl	18084 <_start@@Base+0x5688>
   1aadc:	cmp	r4, r0
   1aae0:	mov	r7, r0
   1aae4:	beq	1d210 <_start@@Base+0xa814>
   1aae8:	mov	r3, #0
   1aaec:	mov	r1, #3
   1aaf0:	ldr	r0, [sl]
   1aaf4:	str	r3, [sp, #120]	; 0x78
   1aaf8:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1aafc:	cmp	r0, #0
   1ab00:	bne	1be4c <_start@@Base+0x9450>
   1ab04:	add	r6, sp, #128	; 0x80
   1ab08:	mov	r1, r7
   1ab0c:	mov	r3, r6
   1ab10:	mov	r2, fp
   1ab14:	mov	r0, sl
   1ab18:	bl	133ac <_start@@Base+0x9b0>
   1ab1c:	ldr	r3, [sp, #128]	; 0x80
   1ab20:	cmp	r3, #0
   1ab24:	mov	r7, r0
   1ab28:	beq	1cb08 <_start@@Base+0xa10c>
   1ab2c:	ldr	r2, [pc, #-484]	; 1a950 <_start@@Base+0x7f54>
   1ab30:	ldr	r3, [pc, #-484]	; 1a954 <_start@@Base+0x7f58>
   1ab34:	add	r2, pc, r2
   1ab38:	add	r3, pc, r3
   1ab3c:	add	r2, r2, #336	; 0x150
   1ab40:	add	r3, r3, #324	; 0x144
   1ab44:	str	r2, [sp, #56]	; 0x38
   1ab48:	str	r3, [sp, #72]	; 0x48
   1ab4c:	mov	r8, #1
   1ab50:	b	1abb0 <_start@@Base+0x81b4>
   1ab54:	add	r3, pc, #972	; 0x3cc
   1ab58:	ldrd	r2, [r3]
   1ab5c:	and	r0, r0, #-16777216	; 0xff000000
   1ab60:	cmp	r1, r3
   1ab64:	cmpeq	r0, r2
   1ab68:	bne	1ab78 <_start@@Base+0x817c>
   1ab6c:	sub	r3, fp, r7
   1ab70:	cmp	r3, #5
   1ab74:	bgt	1b578 <_start@@Base+0x8b7c>
   1ab78:	mov	r1, r7
   1ab7c:	mov	r2, fp
   1ab80:	mov	r0, sl
   1ab84:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1ab88:	mov	r7, r0
   1ab8c:	mov	r1, r7
   1ab90:	mov	r3, r6
   1ab94:	mov	r2, fp
   1ab98:	mov	r0, sl
   1ab9c:	bl	14e8c <_start@@Base+0x2490>
   1aba0:	ldr	r3, [sp, #128]	; 0x80
   1aba4:	cmp	r3, #0
   1aba8:	mov	r7, r0
   1abac:	beq	1cb08 <_start@@Base+0xa10c>
   1abb0:	cmp	fp, r7
   1abb4:	beq	1abdc <_start@@Base+0x81e0>
   1abb8:	ldrb	r3, [r7]
   1abbc:	cmp	r3, #34	; 0x22
   1abc0:	moveq	r3, #0
   1abc4:	addeq	r7, r7, #1
   1abc8:	streq	r3, [sl, #12]
   1abcc:	beq	1abdc <_start@@Base+0x81e0>
   1abd0:	cmp	r3, #46	; 0x2e
   1abd4:	strne	r8, [sl, #12]
   1abd8:	beq	1b9b4 <_start@@Base+0x8fb8>
   1abdc:	mov	r1, fp
   1abe0:	mov	r0, r7
   1abe4:	bl	12b28 <_start@@Base+0x12c>
   1abe8:	ldr	r3, [pc, #864]	; 1af50 <_start@@Base+0x8554>
   1abec:	mvn	r2, #0
   1abf0:	cmp	r1, r3
   1abf4:	cmpeq	r0, r2
   1abf8:	bls	1ab54 <_start@@Base+0x8158>
   1abfc:	add	r3, pc, #812	; 0x32c
   1ac00:	ldrd	r2, [r3]
   1ac04:	bic	r5, r1, #255	; 0xff
   1ac08:	mov	r4, #0
   1ac0c:	cmp	r5, r3
   1ac10:	cmpeq	r4, r2
   1ac14:	beq	1b3fc <_start@@Base+0x8a00>
   1ac18:	ldr	r3, [pc, #820]	; 1af54 <_start@@Base+0x8558>
   1ac1c:	mov	r2, #0
   1ac20:	and	r1, r1, r3
   1ac24:	ldr	r3, [pc, #812]	; 1af58 <_start@@Base+0x855c>
   1ac28:	and	r0, r0, r2
   1ac2c:	cmp	r1, r3
   1ac30:	mov	r2, #0
   1ac34:	cmpeq	r0, r2
   1ac38:	bne	1ab78 <_start@@Base+0x817c>
   1ac3c:	sub	r3, fp, r7
   1ac40:	cmp	r3, #2
   1ac44:	ble	1ab78 <_start@@Base+0x817c>
   1ac48:	mov	r1, r7
   1ac4c:	mov	r3, #2
   1ac50:	mov	r2, fp
   1ac54:	mov	r0, sl
   1ac58:	bl	18084 <_start@@Base+0x5688>
   1ac5c:	cmp	r0, r7
   1ac60:	mov	r1, r0
   1ac64:	beq	1ab78 <_start@@Base+0x817c>
   1ac68:	add	r3, sp, #132	; 0x84
   1ac6c:	mov	r2, fp
   1ac70:	mov	r0, sl
   1ac74:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   1ac78:	ldr	r3, [sp, #132]	; 0x84
   1ac7c:	cmp	r3, #0
   1ac80:	mov	r7, r0
   1ac84:	beq	1be4c <_start@@Base+0x9450>
   1ac88:	mov	r1, #0
   1ac8c:	ldr	r0, [sl]
   1ac90:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1ac94:	cmp	r0, #0
   1ac98:	beq	1be4c <_start@@Base+0x9450>
   1ac9c:	ldr	r3, [sp, #132]	; 0x84
   1aca0:	str	r3, [r0]
   1aca4:	b	1ab8c <_start@@Base+0x8190>
   1aca8:	add	r4, r7, #16
   1acac:	mov	r0, r4
   1acb0:	mov	r1, fp
   1acb4:	bl	12b28 <_start@@Base+0x12c>
   1acb8:	add	r3, pc, #632	; 0x278
   1acbc:	ldrd	r2, [r3]
   1acc0:	mov	r0, #0
   1acc4:	cmp	r1, r3
   1acc8:	cmpeq	r0, r2
   1accc:	bne	1c7c4 <_start@@Base+0x9dc8>
   1acd0:	sub	r3, fp, r4
   1acd4:	cmp	r3, #4
   1acd8:	bgt	1d2d0 <_start@@Base+0xa8d4>
   1acdc:	mov	r1, r4
   1ace0:	mov	r2, fp
   1ace4:	mov	r0, sl
   1ace8:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1acec:	mov	r7, r0
   1acf0:	b	19c44 <_start@@Base+0x7248>
   1acf4:	add	r3, pc, #580	; 0x244
   1acf8:	ldrd	r2, [r3]
   1acfc:	cmp	r1, r3
   1ad00:	cmpeq	r0, r2
   1ad04:	bne	1c8d0 <_start@@Base+0x9ed4>
   1ad08:	sub	r3, fp, r7
   1ad0c:	cmp	r3, #8
   1ad10:	bgt	1d3ac <_start@@Base+0xa9b0>
   1ad14:	add	r7, r7, #8
   1ad18:	mov	r0, r7
   1ad1c:	mov	r1, fp
   1ad20:	bl	12b28 <_start@@Base+0x12c>
   1ad24:	mov	r0, #0
   1ad28:	and	r1, r1, #-16777216	; 0xff000000
   1ad2c:	cmp	r1, #1627389952	; 0x61000000
   1ad30:	cmpeq	r0, #0
   1ad34:	bne	1d7f4 <_start@@Base+0xadf8>
   1ad38:	sub	r3, fp, r7
   1ad3c:	cmp	r3, #1
   1ad40:	ble	1dab4 <_start@@Base+0xb0b8>
   1ad44:	mov	r3, #1
   1ad48:	mov	r2, fp
   1ad4c:	mov	r1, r7
   1ad50:	mov	r0, sl
   1ad54:	bl	18084 <_start@@Base+0x5688>
   1ad58:	cmp	r7, r0
   1ad5c:	mov	r4, r0
   1ad60:	beq	1dab8 <_start@@Base+0xb0bc>
   1ad64:	mov	r0, #0
   1ad68:	mov	r1, #0
   1ad6c:	add	r5, sp, #152	; 0x98
   1ad70:	mov	r2, fp
   1ad74:	strd	r0, [r5, #-8]!
   1ad78:	mov	r1, r4
   1ad7c:	mov	r3, r5
   1ad80:	mov	r0, sl
   1ad84:	bl	132e4 <_start@@Base+0x8e8>
   1ad88:	cmp	r0, r4
   1ad8c:	mov	r7, r0
   1ad90:	beq	1dc0c <_start@@Base+0xb210>
   1ad94:	ldrd	r2, [sp, #144]	; 0x90
   1ad98:	orrs	r3, r2, r3
   1ad9c:	bne	1adac <_start@@Base+0x83b0>
   1ada0:	ldr	r3, [sl, #8]
   1ada4:	tst	r3, #2
   1ada8:	beq	19c44 <_start@@Base+0x7248>
   1adac:	mov	r3, #8
   1adb0:	mov	r2, r3
   1adb4:	mov	r1, #22
   1adb8:	ldr	r0, [sl]
   1adbc:	bl	25728 <flatcc_builder_table_add@@Base>
   1adc0:	cmp	r0, #0
   1adc4:	beq	1dc8c <_start@@Base+0xb290>
   1adc8:	ldrd	r2, [sp, #144]	; 0x90
   1adcc:	strd	r2, [r0]
   1add0:	b	19c44 <_start@@Base+0x7248>
   1add4:	sub	r3, fp, r7
   1add8:	cmp	r3, #8
   1addc:	bgt	1cc5c <_start@@Base+0xa260>
   1ade0:	add	r7, r7, #8
   1ade4:	mov	r0, r7
   1ade8:	mov	r1, fp
   1adec:	bl	12b28 <_start@@Base+0x12c>
   1adf0:	mov	r0, #0
   1adf4:	and	r1, r1, #-16777216	; 0xff000000
   1adf8:	cmp	r1, #1627389952	; 0x61000000
   1adfc:	cmpeq	r0, #0
   1ae00:	bne	1d394 <_start@@Base+0xa998>
   1ae04:	sub	r3, fp, r7
   1ae08:	cmp	r3, #1
   1ae0c:	ble	1da64 <_start@@Base+0xb068>
   1ae10:	mov	r3, #1
   1ae14:	mov	r2, fp
   1ae18:	mov	r1, r7
   1ae1c:	mov	r0, sl
   1ae20:	bl	18084 <_start@@Base+0x5688>
   1ae24:	cmp	r7, r0
   1ae28:	mov	r4, r0
   1ae2c:	beq	1da64 <_start@@Base+0xb068>
   1ae30:	add	r5, sp, #152	; 0x98
   1ae34:	mov	r3, #0
   1ae38:	str	r3, [r5, #-8]!
   1ae3c:	mov	r1, r0
   1ae40:	mov	r2, fp
   1ae44:	mov	r3, r5
   1ae48:	mov	r0, sl
   1ae4c:	bl	1321c <_start@@Base+0x820>
   1ae50:	cmp	r0, r4
   1ae54:	mov	r7, r0
   1ae58:	beq	1dc58 <_start@@Base+0xb25c>
   1ae5c:	ldr	r3, [sp, #144]	; 0x90
   1ae60:	cmp	r3, #0
   1ae64:	bne	1ae74 <_start@@Base+0x8478>
   1ae68:	ldr	r3, [sl, #8]
   1ae6c:	tst	r3, #2
   1ae70:	beq	19c44 <_start@@Base+0x7248>
   1ae74:	mov	r3, #4
   1ae78:	mov	r2, r3
   1ae7c:	mov	r1, #20
   1ae80:	ldr	r0, [sl]
   1ae84:	bl	25728 <flatcc_builder_table_add@@Base>
   1ae88:	cmp	r0, #0
   1ae8c:	beq	1dc8c <_start@@Base+0xb290>
   1ae90:	ldr	r3, [sp, #144]	; 0x90
   1ae94:	str	r3, [r0]
   1ae98:	b	19c44 <_start@@Base+0x7248>
   1ae9c:	add	r7, r7, #16
   1aea0:	mov	r0, r7
   1aea4:	mov	r1, fp
   1aea8:	bl	12b28 <_start@@Base+0x12c>
   1aeac:	add	r3, pc, #148	; 0x94
   1aeb0:	ldrd	r2, [r3]
   1aeb4:	and	r0, r0, #-16777216	; 0xff000000
   1aeb8:	cmp	r1, r3
   1aebc:	cmpeq	r0, r2
   1aec0:	bne	1c8e8 <_start@@Base+0x9eec>
   1aec4:	sub	r3, fp, r7
   1aec8:	cmp	r3, #5
   1aecc:	bgt	1d49c <_start@@Base+0xaaa0>
   1aed0:	mov	r1, r7
   1aed4:	mov	r2, fp
   1aed8:	mov	r0, sl
   1aedc:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1aee0:	mov	r7, r0
   1aee4:	b	19c44 <_start@@Base+0x7248>
   1aee8:	sub	r3, fp, r4
   1aeec:	cmp	r3, #7
   1aef0:	bgt	1cd14 <_start@@Base+0xa318>
   1aef4:	mov	r1, r4
   1aef8:	mov	r2, fp
   1aefc:	mov	r0, sl
   1af00:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1af04:	mov	r7, r0
   1af08:	b	19c44 <_start@@Base+0x7248>
   1af0c:	mov	r1, r7
   1af10:	mov	r2, fp
   1af14:	mov	r0, sl
   1af18:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1af1c:	mov	r7, r0
   1af20:	b	19c44 <_start@@Base+0x7248>
   1af24:	nop			; (mov r0, r0)
   1af28:	strvc	r0, [r0], #-0
   1af2c:	cmnvs	pc, #461373440	; 0x1b800000
   1af30:	andeq	r0, r0, r0
   1af34:	strbtvc	r6, [r1], -r0, lsl #24
   1af38:	andeq	r0, r0, r0
   1af3c:			; <UNDEFINED> instruction: 0x66666572
   1af40:			; <UNDEFINED> instruction: 0x666e7631
   1af44:	teqvc	r6, #1593835520	; 0x5f000000
   1af48:	strvc	r0, [r0], #-0
   1af4c:	svcpl	0x00746573
   1af50:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1af54:			; <UNDEFINED> instruction: 0xffff0000
   1af58:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1af5c:	submi	r0, r0, r0
   1af60:	sub	r3, fp, r4
   1af64:	cmp	r3, #7
   1af68:	bgt	1ce78 <_start@@Base+0xa47c>
   1af6c:	mov	r1, r4
   1af70:	mov	r2, fp
   1af74:	mov	r0, sl
   1af78:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1af7c:	mov	r7, r0
   1af80:	b	19c44 <_start@@Base+0x7248>
   1af84:	mov	r3, #5
   1af88:	mov	r2, fp
   1af8c:	mov	r1, r7
   1af90:	mov	r0, sl
   1af94:	bl	18084 <_start@@Base+0x5688>
   1af98:	cmp	r0, r7
   1af9c:	mov	r4, r0
   1afa0:	beq	1a574 <_start@@Base+0x7b78>
   1afa4:	mvn	r3, #-1073741824	; 0xc0000000
   1afa8:	mov	r2, #2
   1afac:	mov	r1, #4
   1afb0:	ldr	r0, [sl]
   1afb4:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1afb8:	cmp	r0, #0
   1afbc:	bne	1d28c <_start@@Base+0xa890>
   1afc0:	mov	r3, r9
   1afc4:	mov	r1, r4
   1afc8:	mov	r2, fp
   1afcc:	mov	r0, sl
   1afd0:	bl	13460 <_start@@Base+0xa64>
   1afd4:	ldr	r3, [sp, #116]	; 0x74
   1afd8:	cmp	r3, #0
   1afdc:	mov	r7, r0
   1afe0:	beq	1be90 <_start@@Base+0x9494>
   1afe4:	mov	r4, #1
   1afe8:	b	1b014 <_start@@Base+0x8618>
   1afec:	bl	15010 <_start@@Base+0x2614>
   1aff0:	mov	r3, r9
   1aff4:	mov	r2, fp
   1aff8:	mov	r1, r0
   1affc:	mov	r0, sl
   1b000:	bl	14d08 <_start@@Base+0x230c>
   1b004:	ldr	r3, [sp, #116]	; 0x74
   1b008:	cmp	r3, #0
   1b00c:	mov	r7, r0
   1b010:	beq	1be90 <_start@@Base+0x9494>
   1b014:	mov	r1, r4
   1b018:	ldr	r0, [sl]
   1b01c:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1b020:	mov	r1, r7
   1b024:	mov	r2, fp
   1b028:	subs	r3, r0, #0
   1b02c:	mov	r0, sl
   1b030:	bne	1afec <_start@@Base+0x85f0>
   1b034:	b	1a648 <_start@@Base+0x7c4c>
   1b038:	sub	r3, fp, r4
   1b03c:	cmp	r3, #1
   1b040:	ble	1d620 <_start@@Base+0xac24>
   1b044:	mov	r3, #1
   1b048:	mov	r2, fp
   1b04c:	mov	r1, r4
   1b050:	mov	r0, sl
   1b054:	bl	18084 <_start@@Base+0x5688>
   1b058:	cmp	r4, r0
   1b05c:	mov	r7, r0
   1b060:	beq	1d61c <_start@@Base+0xac20>
   1b064:	ldr	r0, [sl]
   1b068:	bl	23b00 <flatcc_builder_start_offset_vector@@Base>
   1b06c:	cmp	r0, #0
   1b070:	bne	1a648 <_start@@Base+0x7c4c>
   1b074:	mov	r1, r7
   1b078:	mov	r3, r9
   1b07c:	mov	r2, fp
   1b080:	mov	r0, sl
   1b084:	bl	13460 <_start@@Base+0xa64>
   1b088:	ldr	r3, [sp, #116]	; 0x74
   1b08c:	cmp	r3, #0
   1b090:	mov	r7, r0
   1b094:	beq	1d258 <_start@@Base+0xa85c>
   1b098:	add	r4, sp, #120	; 0x78
   1b09c:	mov	r5, #1
   1b0a0:	b	1b0e0 <_start@@Base+0x86e4>
   1b0a4:	ldr	r0, [sl]
   1b0a8:	bl	23498 <flatcc_builder_extend_offset_vector@@Base>
   1b0ac:	mov	r3, r9
   1b0b0:	mov	r2, fp
   1b0b4:	mov	r1, r7
   1b0b8:	subs	ip, r0, #0
   1b0bc:	mov	r0, sl
   1b0c0:	beq	1a648 <_start@@Base+0x7c4c>
   1b0c4:	ldr	lr, [sp, #120]	; 0x78
   1b0c8:	str	lr, [ip]
   1b0cc:	bl	14d08 <_start@@Base+0x230c>
   1b0d0:	ldr	r3, [sp, #116]	; 0x74
   1b0d4:	cmp	r3, #0
   1b0d8:	mov	r7, r0
   1b0dc:	beq	1d258 <_start@@Base+0xa85c>
   1b0e0:	mov	r1, r7
   1b0e4:	mov	r3, r4
   1b0e8:	mov	r2, fp
   1b0ec:	mov	r0, sl
   1b0f0:	bl	19aa8 <_start@@Base+0x70ac>
   1b0f4:	ldr	r3, [sp, #120]	; 0x78
   1b0f8:	mov	r1, r5
   1b0fc:	cmp	r3, #0
   1b100:	mov	r7, r0
   1b104:	bne	1b0a4 <_start@@Base+0x86a8>
   1b108:	b	1a648 <_start@@Base+0x7c4c>
   1b10c:	mov	r3, #2
   1b110:	mov	r2, fp
   1b114:	mov	r1, r7
   1b118:	mov	r0, sl
   1b11c:	bl	18084 <_start@@Base+0x5688>
   1b120:	cmp	r0, r7
   1b124:	mov	r5, r0
   1b128:	beq	1a200 <_start@@Base+0x7804>
   1b12c:	add	r4, sp, #152	; 0x98
   1b130:	mov	r3, #0
   1b134:	strh	r3, [r4, #-8]!
   1b138:	mov	r1, r0
   1b13c:	mov	r2, fp
   1b140:	mov	r3, r4
   1b144:	mov	r0, sl
   1b148:	bl	13150 <_start@@Base+0x754>
   1b14c:	cmp	r5, r0
   1b150:	mov	r7, r0
   1b154:	beq	1d638 <_start@@Base+0xac3c>
   1b158:	ldrsh	r3, [sp, #144]	; 0x90
   1b15c:	cmp	r3, #100	; 0x64
   1b160:	bne	1b170 <_start@@Base+0x8774>
   1b164:	ldr	r3, [sl, #8]
   1b168:	tst	r3, #2
   1b16c:	beq	19c44 <_start@@Base+0x7248>
   1b170:	mov	r3, #2
   1b174:	mov	r2, r3
   1b178:	mov	r1, r3
   1b17c:	ldr	r0, [sl]
   1b180:	bl	25728 <flatcc_builder_table_add@@Base>
   1b184:	cmp	r0, #0
   1b188:	beq	1a648 <_start@@Base+0x7c4c>
   1b18c:	ldrsh	r3, [sp, #144]	; 0x90
   1b190:	strh	r3, [r0]
   1b194:	b	19c44 <_start@@Base+0x7248>
   1b198:	mov	r3, #6
   1b19c:	mov	r2, fp
   1b1a0:	mov	r1, r7
   1b1a4:	mov	r0, sl
   1b1a8:	bl	18084 <_start@@Base+0x5688>
   1b1ac:	cmp	r0, r7
   1b1b0:	mov	r5, r0
   1b1b4:	beq	1a978 <_start@@Base+0x7f7c>
   1b1b8:	add	r4, sp, #152	; 0x98
   1b1bc:	mov	r3, #0
   1b1c0:	mov	r1, r0
   1b1c4:	str	r3, [r4, #-8]!
   1b1c8:	mov	r2, fp
   1b1cc:	mov	r0, sl
   1b1d0:	mov	r3, r4
   1b1d4:	bl	289d0 <flatcc_json_parser_float@@Base>
   1b1d8:	cmp	r0, r5
   1b1dc:	mov	r7, r0
   1b1e0:	beq	1d66c <_start@@Base+0xac70>
   1b1e4:	vldr	s15, [pc, #-656]	; 1af5c <_start@@Base+0x8560>
   1b1e8:	vldr	s14, [sp, #144]	; 0x90
   1b1ec:	vcmp.f32	s14, s15
   1b1f0:	vmrs	APSR_nzcv, fpscr
   1b1f4:	bne	1b204 <_start@@Base+0x8808>
   1b1f8:	ldr	r3, [sl, #8]
   1b1fc:	tst	r3, #2
   1b200:	beq	19c44 <_start@@Base+0x7248>
   1b204:	mov	r3, #4
   1b208:	mov	r2, r3
   1b20c:	mov	r1, #26
   1b210:	ldr	r0, [sl]
   1b214:	bl	25728 <flatcc_builder_table_add@@Base>
   1b218:	cmp	r0, #0
   1b21c:	beq	1a648 <_start@@Base+0x7c4c>
   1b220:	ldr	r3, [sp, #144]	; 0x90
   1b224:	str	r3, [r0]
   1b228:	b	19c44 <_start@@Base+0x7248>
   1b22c:	mov	r3, #2
   1b230:	mov	r2, fp
   1b234:	mov	r1, r4
   1b238:	mov	r0, sl
   1b23c:	bl	18084 <_start@@Base+0x5688>
   1b240:	cmp	r4, r0
   1b244:	mov	r7, r0
   1b248:	beq	1dc48 <_start@@Base+0xb24c>
   1b24c:	mov	r3, #0
   1b250:	mov	r1, #3
   1b254:	ldr	r0, [sl]
   1b258:	str	r3, [sp, #120]	; 0x78
   1b25c:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1b260:	cmp	r0, #0
   1b264:	bne	1b500 <_start@@Base+0x8b04>
   1b268:	add	r4, sp, #136	; 0x88
   1b26c:	mov	r1, r7
   1b270:	mov	r3, r4
   1b274:	mov	r2, fp
   1b278:	mov	r0, sl
   1b27c:	bl	133ac <_start@@Base+0x9b0>
   1b280:	ldr	r3, [sp, #136]	; 0x88
   1b284:	cmp	r3, #0
   1b288:	mov	r7, r0
   1b28c:	beq	1cb30 <_start@@Base+0xa134>
   1b290:	mov	r5, #1
   1b294:	str	r9, [sp, #56]	; 0x38
   1b298:	b	1b2f8 <_start@@Base+0x88fc>
   1b29c:	add	r3, pc, #932	; 0x3a4
   1b2a0:	ldrd	r2, [r3]
   1b2a4:	mov	r0, #0
   1b2a8:	cmp	r1, r3
   1b2ac:	cmpeq	r0, r2
   1b2b0:	bne	1b2c0 <_start@@Base+0x88c4>
   1b2b4:	sub	r3, fp, r7
   1b2b8:	cmp	r3, #4
   1b2bc:	bgt	1b9d0 <_start@@Base+0x8fd4>
   1b2c0:	mov	r1, r7
   1b2c4:	mov	r2, fp
   1b2c8:	mov	r0, sl
   1b2cc:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1b2d0:	mov	r7, r0
   1b2d4:	mov	r1, r7
   1b2d8:	mov	r3, r4
   1b2dc:	mov	r2, fp
   1b2e0:	mov	r0, sl
   1b2e4:	bl	14e8c <_start@@Base+0x2490>
   1b2e8:	ldr	r3, [sp, #136]	; 0x88
   1b2ec:	cmp	r3, #0
   1b2f0:	mov	r7, r0
   1b2f4:	beq	1cb2c <_start@@Base+0xa130>
   1b2f8:	cmp	fp, r7
   1b2fc:	beq	1b324 <_start@@Base+0x8928>
   1b300:	ldrb	r3, [r7]
   1b304:	cmp	r3, #34	; 0x22
   1b308:	moveq	r3, #0
   1b30c:	addeq	r7, r7, #1
   1b310:	streq	r3, [sl, #12]
   1b314:	beq	1b324 <_start@@Base+0x8928>
   1b318:	cmp	r3, #46	; 0x2e
   1b31c:	strne	r5, [sl, #12]
   1b320:	beq	1bcf0 <_start@@Base+0x92f4>
   1b324:	mov	r1, fp
   1b328:	mov	r0, r7
   1b32c:	bl	12b28 <_start@@Base+0x12c>
   1b330:	add	r3, pc, #792	; 0x318
   1b334:	ldrd	r2, [r3]
   1b338:	cmp	r1, r3
   1b33c:	cmpeq	r0, r2
   1b340:	bls	1b29c <_start@@Base+0x88a0>
   1b344:	add	r9, pc, #780	; 0x30c
   1b348:	ldrd	r8, [r9]
   1b34c:	bic	r2, r0, #255	; 0xff
   1b350:	cmp	r1, r9
   1b354:	cmpeq	r2, r8
   1b358:	beq	1b498 <_start@@Base+0x8a9c>
   1b35c:	ldr	r2, [pc, #776]	; 1b66c <_start@@Base+0x8c70>
   1b360:	mvn	r3, #0
   1b364:	and	r2, r2, r0
   1b368:	and	r3, r3, r1
   1b36c:	mov	r0, r2
   1b370:	mov	r1, r3
   1b374:	add	r3, pc, #740	; 0x2e4
   1b378:	ldrd	r2, [r3]
   1b37c:	cmp	r1, r3
   1b380:	cmpeq	r0, r2
   1b384:	bne	1b2c0 <_start@@Base+0x88c4>
   1b388:	sub	r3, fp, r7
   1b38c:	cmp	r3, #6
   1b390:	ble	1b2c0 <_start@@Base+0x88c4>
   1b394:	mov	r1, r7
   1b398:	mov	r3, #6
   1b39c:	mov	r2, fp
   1b3a0:	mov	r0, sl
   1b3a4:	bl	18084 <_start@@Base+0x5688>
   1b3a8:	cmp	r0, r7
   1b3ac:	mov	r1, r0
   1b3b0:	beq	1b2c0 <_start@@Base+0x88c4>
   1b3b4:	mov	r3, #0
   1b3b8:	str	r3, [sp]
   1b3bc:	mov	r2, fp
   1b3c0:	add	r3, sp, #144	; 0x90
   1b3c4:	mov	r0, sl
   1b3c8:	bl	29810 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b3cc:	ldr	r3, [sp, #144]	; 0x90
   1b3d0:	cmp	r3, #0
   1b3d4:	mov	r7, r0
   1b3d8:	beq	1b4fc <_start@@Base+0x8b00>
   1b3dc:	mov	r1, #2
   1b3e0:	ldr	r0, [sl]
   1b3e4:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1b3e8:	cmp	r0, #0
   1b3ec:	beq	1b4fc <_start@@Base+0x8b00>
   1b3f0:	ldr	r3, [sp, #144]	; 0x90
   1b3f4:	str	r3, [r0]
   1b3f8:	b	1b2d4 <_start@@Base+0x88d8>
   1b3fc:	sub	r3, fp, r7
   1b400:	cmp	r3, #3
   1b404:	ble	1ab78 <_start@@Base+0x817c>
   1b408:	mov	r3, #3
   1b40c:	mov	r2, fp
   1b410:	mov	r1, r7
   1b414:	mov	r0, sl
   1b418:	bl	18084 <_start@@Base+0x5688>
   1b41c:	cmp	r0, r7
   1b420:	mov	r5, r0
   1b424:	beq	1ab78 <_start@@Base+0x817c>
   1b428:	mov	r0, #0
   1b42c:	mov	r1, #0
   1b430:	add	r4, sp, #152	; 0x98
   1b434:	mov	r2, fp
   1b438:	strd	r0, [r4, #-8]!
   1b43c:	mov	r1, r5
   1b440:	mov	r3, r4
   1b444:	mov	r0, sl
   1b448:	bl	132e4 <_start@@Base+0x8e8>
   1b44c:	cmp	r5, r0
   1b450:	mov	r7, r0
   1b454:	beq	1d470 <_start@@Base+0xaa74>
   1b458:	ldrd	r2, [sp, #144]	; 0x90
   1b45c:	orrs	r3, r2, r3
   1b460:	bne	1b470 <_start@@Base+0x8a74>
   1b464:	ldr	r3, [sl, #8]
   1b468:	tst	r3, #2
   1b46c:	beq	1ab8c <_start@@Base+0x8190>
   1b470:	mov	r3, #8
   1b474:	mov	r2, r3
   1b478:	mov	r1, r8
   1b47c:	ldr	r0, [sl]
   1b480:	bl	25728 <flatcc_builder_table_add@@Base>
   1b484:	cmp	r0, #0
   1b488:	beq	1be44 <_start@@Base+0x9448>
   1b48c:	ldrd	r2, [sp, #144]	; 0x90
   1b490:	strd	r2, [r0]
   1b494:	b	1ab8c <_start@@Base+0x8190>
   1b498:	sub	r3, fp, r7
   1b49c:	cmp	r3, #7
   1b4a0:	ble	1b2c0 <_start@@Base+0x88c4>
   1b4a4:	mov	r1, r7
   1b4a8:	mov	r3, #7
   1b4ac:	mov	r2, fp
   1b4b0:	mov	r0, sl
   1b4b4:	bl	18084 <_start@@Base+0x5688>
   1b4b8:	cmp	r0, r7
   1b4bc:	mov	r1, r0
   1b4c0:	beq	1b2c0 <_start@@Base+0x88c4>
   1b4c4:	add	r3, sp, #144	; 0x90
   1b4c8:	str	r5, [sp]
   1b4cc:	mov	r2, fp
   1b4d0:	mov	r0, sl
   1b4d4:	bl	29810 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b4d8:	ldr	r3, [sp, #144]	; 0x90
   1b4dc:	cmp	r3, #0
   1b4e0:	mov	r7, r0
   1b4e4:	beq	1b4fc <_start@@Base+0x8b00>
   1b4e8:	mov	r1, r5
   1b4ec:	ldr	r0, [sl]
   1b4f0:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1b4f4:	cmp	r0, #0
   1b4f8:	bne	1b3f0 <_start@@Base+0x89f4>
   1b4fc:	ldr	r9, [sp, #56]	; 0x38
   1b500:	mov	r1, r7
   1b504:	mov	r3, #33	; 0x21
   1b508:	mov	r2, fp
   1b50c:	mov	r0, sl
   1b510:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1b514:	ldr	r3, [sp, #120]	; 0x78
   1b518:	cmp	r3, #0
   1b51c:	mov	r7, r0
   1b520:	beq	1a648 <_start@@Base+0x7c4c>
   1b524:	mov	r1, #35	; 0x23
   1b528:	ldr	r0, [sl]
   1b52c:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1b530:	cmp	r0, #0
   1b534:	beq	1a648 <_start@@Base+0x7c4c>
   1b538:	ldr	r3, [sp, #120]	; 0x78
   1b53c:	str	r3, [r0]
   1b540:	b	19c44 <_start@@Base+0x7248>
   1b544:	ldr	r0, [sl]
   1b548:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1b54c:	cmp	r0, #0
   1b550:	str	r0, [sp, #120]	; 0x78
   1b554:	beq	1a648 <_start@@Base+0x7c4c>
   1b558:	mov	r1, #9
   1b55c:	ldr	r0, [sl]
   1b560:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1b564:	cmp	r0, #0
   1b568:	beq	1a648 <_start@@Base+0x7c4c>
   1b56c:	ldr	r3, [sp, #120]	; 0x78
   1b570:	str	r3, [r0]
   1b574:	b	19c44 <_start@@Base+0x7248>
   1b578:	mov	r3, #5
   1b57c:	mov	r2, fp
   1b580:	mov	r1, r7
   1b584:	mov	r0, sl
   1b588:	bl	18084 <_start@@Base+0x5688>
   1b58c:	cmp	r0, r7
   1b590:	mov	r4, r0
   1b594:	beq	1ab78 <_start@@Base+0x817c>
   1b598:	mov	r0, #0
   1b59c:	mov	r1, #0
   1b5a0:	mov	r3, #0
   1b5a4:	cmp	fp, r4
   1b5a8:	strd	r0, [sp, #144]	; 0x90
   1b5ac:	strh	r3, [sp, #114]	; 0x72
   1b5b0:	str	r3, [sp, #136]	; 0x88
   1b5b4:	beq	1c7f0 <_start@@Base+0x9df4>
   1b5b8:	add	r3, sp, #144	; 0x90
   1b5bc:	str	r3, [sp]
   1b5c0:	mov	r2, fp
   1b5c4:	add	r3, sp, #136	; 0x88
   1b5c8:	mov	r1, r4
   1b5cc:	mov	r0, sl
   1b5d0:	bl	296fc <flatcc_json_parser_integer@@Base>
   1b5d4:	cmp	r4, r0
   1b5d8:	mov	r7, r0
   1b5dc:	beq	1c7ec <_start@@Base+0x9df0>
   1b5e0:	ldr	r3, [sp, #136]	; 0x88
   1b5e4:	cmp	r3, #0
   1b5e8:	bne	1c900 <_start@@Base+0x9f04>
   1b5ec:	ldrd	r2, [sp, #144]	; 0x90
   1b5f0:	ldr	r0, [pc, #112]	; 1b668 <_start@@Base+0x8c6c>
   1b5f4:	mov	r1, #0
   1b5f8:	cmp	r3, r1
   1b5fc:	cmpeq	r2, r0
   1b600:	uxthls	r2, r2
   1b604:	strhls	r2, [sp, #114]	; 0x72
   1b608:	bhi	1ca60 <_start@@Base+0xa064>
   1b60c:	cmp	r2, #0
   1b610:	bne	1b620 <_start@@Base+0x8c24>
   1b614:	ldr	r3, [sl, #8]
   1b618:	tst	r3, #2
   1b61c:	beq	1ab8c <_start@@Base+0x8190>
   1b620:	mov	r3, #2
   1b624:	mov	r2, r3
   1b628:	mov	r1, r3
   1b62c:	ldr	r0, [sl]
   1b630:	bl	25728 <flatcc_builder_table_add@@Base>
   1b634:	cmp	r0, #0
   1b638:	beq	1be4c <_start@@Base+0x9450>
   1b63c:	ldrh	r3, [sp, #114]	; 0x72
   1b640:	strh	r3, [r0]
   1b644:	b	1ab8c <_start@@Base+0x8190>
   1b648:	andeq	r0, r0, r0
   1b64c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1b650:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1b654:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b658:	cmnvs	r4, r0, lsl #2
   1b65c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1b660:	strbvs	r0, [r4, #-0]!
   1b664:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b668:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1b66c:			; <UNDEFINED> instruction: 0xffff0000
   1b670:	ldrvs	r0, [r2, -r0]!
   1b674:	andeq	pc, r0, r8, lsl r7	; <UNPREDICTABLE>
   1b678:	andeq	r1, r2, ip, ror #15
   1b67c:	andeq	pc, r0, r0, lsl r7	; <UNPREDICTABLE>
   1b680:	andeq	pc, r0, ip, lsr r5	; <UNPREDICTABLE>
   1b684:	andeq	pc, r0, r4, lsr #10
   1b688:	ldrdeq	r1, [r2], -r0
   1b68c:	andeq	r1, r2, r4, ror #5
   1b690:	andeq	r1, r0, r8, lsr #27
   1b694:	andeq	r1, r2, r4, lsl #2
   1b698:	andeq	r1, r2, r0, lsl #2
   1b69c:	mov	r1, r7
   1b6a0:	mov	r3, #5
   1b6a4:	mov	r2, fp
   1b6a8:	mov	r0, sl
   1b6ac:	bl	18084 <_start@@Base+0x5688>
   1b6b0:	cmp	r0, r7
   1b6b4:	mov	r1, r0
   1b6b8:	beq	1a660 <_start@@Base+0x7c64>
   1b6bc:	add	r3, sp, #120	; 0x78
   1b6c0:	mov	r2, fp
   1b6c4:	mov	r0, sl
   1b6c8:	bl	19aa8 <_start@@Base+0x70ac>
   1b6cc:	ldr	r3, [sp, #120]	; 0x78
   1b6d0:	cmp	r3, #0
   1b6d4:	mov	r7, r0
   1b6d8:	beq	1a648 <_start@@Base+0x7c4c>
   1b6dc:	mov	r1, #12
   1b6e0:	ldr	r0, [sl]
   1b6e4:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1b6e8:	cmp	r0, #0
   1b6ec:	beq	1a648 <_start@@Base+0x7c4c>
   1b6f0:	ldr	r3, [sp, #120]	; 0x78
   1b6f4:	str	r3, [r0]
   1b6f8:	b	19c44 <_start@@Base+0x7248>
   1b6fc:	add	r4, r7, #16
   1b700:	mov	r0, r4
   1b704:	mov	r1, fp
   1b708:	bl	12b28 <_start@@Base+0x12c>
   1b70c:	ldr	r3, [pc, #-168]	; 1b66c <_start@@Base+0x8c70>
   1b710:	mov	r2, #0
   1b714:	and	r3, r3, r1
   1b718:	mov	r7, r1
   1b71c:	ldr	r1, [pc, #-180]	; 1b670 <_start@@Base+0x8c74>
   1b720:	and	r2, r2, r0
   1b724:	cmp	r3, r1
   1b728:	mov	r0, #0
   1b72c:	cmpeq	r2, r0
   1b730:	beq	1cb54 <_start@@Base+0xa158>
   1b734:	and	r7, r7, #-16777216	; 0xff000000
   1b738:	mov	r6, #0
   1b73c:	cmp	r7, #1728053248	; 0x67000000
   1b740:	cmpeq	r6, #0
   1b744:	bne	1c958 <_start@@Base+0x9f5c>
   1b748:	sub	r3, fp, r4
   1b74c:	cmp	r3, #1
   1b750:	ble	1d990 <_start@@Base+0xaf94>
   1b754:	mov	r3, #1
   1b758:	mov	r2, fp
   1b75c:	mov	r1, r4
   1b760:	mov	r0, sl
   1b764:	bl	18084 <_start@@Base+0x5688>
   1b768:	cmp	r4, r0
   1b76c:	mov	r7, r0
   1b770:	beq	1d98c <_start@@Base+0xaf90>
   1b774:	ldr	r0, [sl]
   1b778:	bl	23b00 <flatcc_builder_start_offset_vector@@Base>
   1b77c:	cmp	r0, #0
   1b780:	bne	1a648 <_start@@Base+0x7c4c>
   1b784:	mov	r1, r7
   1b788:	mov	r3, r9
   1b78c:	mov	r2, fp
   1b790:	mov	r0, sl
   1b794:	bl	13460 <_start@@Base+0xa64>
   1b798:	ldr	r3, [sp, #116]	; 0x74
   1b79c:	cmp	r3, #0
   1b7a0:	mov	r7, r0
   1b7a4:	beq	1d4fc <_start@@Base+0xab00>
   1b7a8:	add	r4, sp, #120	; 0x78
   1b7ac:	mov	r5, #1
   1b7b0:	b	1b7f0 <_start@@Base+0x8df4>
   1b7b4:	ldr	r0, [sl]
   1b7b8:	bl	23498 <flatcc_builder_extend_offset_vector@@Base>
   1b7bc:	mov	r3, r9
   1b7c0:	mov	r2, fp
   1b7c4:	mov	r1, r7
   1b7c8:	subs	ip, r0, #0
   1b7cc:	mov	r0, sl
   1b7d0:	beq	1a648 <_start@@Base+0x7c4c>
   1b7d4:	ldr	lr, [sp, #120]	; 0x78
   1b7d8:	str	lr, [ip]
   1b7dc:	bl	14d08 <_start@@Base+0x230c>
   1b7e0:	ldr	r3, [sp, #116]	; 0x74
   1b7e4:	cmp	r3, #0
   1b7e8:	mov	r7, r0
   1b7ec:	beq	1d4fc <_start@@Base+0xab00>
   1b7f0:	mov	r1, r7
   1b7f4:	mov	r3, r4
   1b7f8:	mov	r2, fp
   1b7fc:	mov	r0, sl
   1b800:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   1b804:	ldr	r3, [sp, #120]	; 0x78
   1b808:	mov	r1, r5
   1b80c:	cmp	r3, #0
   1b810:	mov	r7, r0
   1b814:	bne	1b7b4 <_start@@Base+0x8db8>
   1b818:	b	1a648 <_start@@Base+0x7c4c>
   1b81c:	sub	r3, fp, r4
   1b820:	cmp	r3, #8
   1b824:	ble	1a8e4 <_start@@Base+0x7ee8>
   1b828:	mov	r3, #8
   1b82c:	mov	r2, fp
   1b830:	mov	r1, r4
   1b834:	mov	r0, sl
   1b838:	bl	18084 <_start@@Base+0x5688>
   1b83c:	cmp	r4, r0
   1b840:	mov	r7, r0
   1b844:	beq	1a8e0 <_start@@Base+0x7ee4>
   1b848:	mov	r2, #1
   1b84c:	mov	r1, r2
   1b850:	mvn	r3, #0
   1b854:	ldr	r0, [sl]
   1b858:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1b85c:	subs	r6, r0, #0
   1b860:	bne	1a648 <_start@@Base+0x7c4c>
   1b864:	mov	r1, r7
   1b868:	mov	r3, r9
   1b86c:	mov	r2, fp
   1b870:	mov	r0, sl
   1b874:	bl	13460 <_start@@Base+0xa64>
   1b878:	ldr	r3, [sp, #116]	; 0x74
   1b87c:	cmp	r3, #0
   1b880:	mov	r7, r0
   1b884:	beq	1ca14 <_start@@Base+0xa018>
   1b888:	ldr	r2, [pc, #-540]	; 1b674 <_start@@Base+0x8c78>
   1b88c:	ldr	r3, [pc, #-540]	; 1b678 <_start@@Base+0x8c7c>
   1b890:	add	r2, pc, r2
   1b894:	str	r2, [sp, #72]	; 0x48
   1b898:	ldr	r2, [pc, #-548]	; 1b67c <_start@@Base+0x8c80>
   1b89c:	add	r3, pc, r3
   1b8a0:	add	r2, pc, r2
   1b8a4:	add	r3, r3, #276	; 0x114
   1b8a8:	str	r2, [sp, #56]	; 0x38
   1b8ac:	str	r3, [sp, #100]	; 0x64
   1b8b0:	mov	r5, #1
   1b8b4:	b	1b8e0 <_start@@Base+0x8ee4>
   1b8b8:	ldrb	r2, [sp, #136]	; 0x88
   1b8bc:	mov	r3, r9
   1b8c0:	mov	r0, sl
   1b8c4:	strb	r2, [r4]
   1b8c8:	mov	r2, fp
   1b8cc:	bl	14d08 <_start@@Base+0x230c>
   1b8d0:	ldr	r3, [sp, #116]	; 0x74
   1b8d4:	cmp	r3, #0
   1b8d8:	mov	r7, r0
   1b8dc:	beq	1ca14 <_start@@Base+0xa018>
   1b8e0:	mov	r1, r5
   1b8e4:	ldr	r0, [sl]
   1b8e8:	strb	r6, [sp, #136]	; 0x88
   1b8ec:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1b8f0:	subs	r4, r0, #0
   1b8f4:	beq	1a648 <_start@@Base+0x7c4c>
   1b8f8:	sub	r8, fp, r7
   1b8fc:	cmp	r8, #3
   1b900:	ble	1b94c <_start@@Base+0x8f50>
   1b904:	ldr	r1, [sp, #72]	; 0x48
   1b908:	mov	r2, #4
   1b90c:	mov	r0, r7
   1b910:	bl	125bc <memcmp@plt>
   1b914:	cmp	r0, #0
   1b918:	strbeq	r5, [sp, #136]	; 0x88
   1b91c:	addeq	r1, r7, #4
   1b920:	beq	1b974 <_start@@Base+0x8f78>
   1b924:	cmp	r8, #4
   1b928:	beq	1b94c <_start@@Base+0x8f50>
   1b92c:	ldr	r1, [sp, #56]	; 0x38
   1b930:	mov	r2, #5
   1b934:	mov	r0, r7
   1b938:	bl	125bc <memcmp@plt>
   1b93c:	cmp	r0, #0
   1b940:	strbeq	r0, [sp, #136]	; 0x88
   1b944:	addeq	r1, r7, #5
   1b948:	beq	1b974 <_start@@Base+0x8f78>
   1b94c:	add	r3, sp, #144	; 0x90
   1b950:	mov	r1, r7
   1b954:	mov	r2, fp
   1b958:	mov	r0, sl
   1b95c:	bl	12fe0 <_start@@Base+0x5e4>
   1b960:	ldrb	r3, [sp, #144]	; 0x90
   1b964:	adds	r3, r3, #0
   1b968:	movne	r3, #1
   1b96c:	strb	r3, [sp, #136]	; 0x88
   1b970:	mov	r1, r0
   1b974:	cmp	r1, r7
   1b978:	bne	1b8b8 <_start@@Base+0x8ebc>
   1b97c:	add	r3, sp, #136	; 0x88
   1b980:	str	r3, [sp]
   1b984:	mov	r1, r7
   1b988:	ldr	r3, [sp, #100]	; 0x64
   1b98c:	mov	r2, fp
   1b990:	mov	r0, sl
   1b994:	bl	13918 <_start@@Base+0xf1c>
   1b998:	cmp	fp, r0
   1b99c:	cmpne	r0, r7
   1b9a0:	mov	r1, r0
   1b9a4:	bne	1b8b8 <_start@@Base+0x8ebc>
   1b9a8:	mov	r9, fp
   1b9ac:	mov	fp, r0
   1b9b0:	b	19ca8 <_start@@Base+0x72ac>
   1b9b4:	mov	r1, r7
   1b9b8:	mov	r3, #5
   1b9bc:	mov	r2, fp
   1b9c0:	mov	r0, sl
   1b9c4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1b9c8:	mov	r7, r0
   1b9cc:	b	1abdc <_start@@Base+0x81e0>
   1b9d0:	mov	r1, r7
   1b9d4:	mov	r3, #4
   1b9d8:	mov	r2, fp
   1b9dc:	mov	r0, sl
   1b9e0:	bl	18084 <_start@@Base+0x5688>
   1b9e4:	cmp	r0, r7
   1b9e8:	mov	r1, r0
   1b9ec:	beq	1b2c0 <_start@@Base+0x88c4>
   1b9f0:	mov	r6, #0
   1b9f4:	add	r3, sp, #144	; 0x90
   1b9f8:	str	r6, [sp]
   1b9fc:	mov	r2, fp
   1ba00:	mov	r0, sl
   1ba04:	bl	29810 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1ba08:	ldr	r3, [sp, #144]	; 0x90
   1ba0c:	cmp	r3, r6
   1ba10:	mov	r7, r0
   1ba14:	beq	1b4fc <_start@@Base+0x8b00>
   1ba18:	mov	r1, r6
   1ba1c:	ldr	r0, [sl]
   1ba20:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1ba24:	cmp	r0, #0
   1ba28:	bne	1b3f0 <_start@@Base+0x89f4>
   1ba2c:	b	1b4fc <_start@@Base+0x8b00>
   1ba30:	mov	r3, #8
   1ba34:	mov	r2, fp
   1ba38:	mov	r1, r7
   1ba3c:	mov	r0, sl
   1ba40:	bl	18084 <_start@@Base+0x5688>
   1ba44:	cmp	r0, r7
   1ba48:	mov	r4, r0
   1ba4c:	beq	1a34c <_start@@Base+0x7950>
   1ba50:	sub	r5, fp, r0
   1ba54:	mov	r3, #0
   1ba58:	cmp	r5, #3
   1ba5c:	strb	r3, [sp, #132]	; 0x84
   1ba60:	ble	1baa4 <_start@@Base+0x90a8>
   1ba64:	ldr	r1, [pc, #-1004]	; 1b680 <_start@@Base+0x8c84>
   1ba68:	mov	r2, #4
   1ba6c:	add	r1, pc, r1
   1ba70:	bl	125bc <memcmp@plt>
   1ba74:	cmp	r0, #0
   1ba78:	beq	1c7dc <_start@@Base+0x9de0>
   1ba7c:	cmp	r5, #4
   1ba80:	beq	1baa4 <_start@@Base+0x90a8>
   1ba84:	ldr	r1, [pc, #-1032]	; 1b684 <_start@@Base+0x8c88>
   1ba88:	mov	r2, #5
   1ba8c:	add	r1, pc, r1
   1ba90:	mov	r0, r4
   1ba94:	bl	125bc <memcmp@plt>
   1ba98:	cmp	r0, #0
   1ba9c:	addeq	r7, r4, #5
   1baa0:	beq	1bb28 <_start@@Base+0x912c>
   1baa4:	mov	r0, #0
   1baa8:	mov	r1, #0
   1baac:	mov	r3, #0
   1bab0:	cmp	fp, r4
   1bab4:	strd	r0, [sp, #144]	; 0x90
   1bab8:	str	r3, [sp, #136]	; 0x88
   1babc:	beq	1c780 <_start@@Base+0x9d84>
   1bac0:	add	r3, sp, #144	; 0x90
   1bac4:	str	r3, [sp]
   1bac8:	mov	r2, fp
   1bacc:	add	r3, sp, #136	; 0x88
   1bad0:	mov	r1, r4
   1bad4:	mov	r0, sl
   1bad8:	bl	296fc <flatcc_json_parser_integer@@Base>
   1badc:	cmp	r4, r0
   1bae0:	mov	r7, r0
   1bae4:	beq	1c780 <_start@@Base+0x9d84>
   1bae8:	ldr	r3, [sp, #136]	; 0x88
   1baec:	cmp	r3, #0
   1baf0:	bne	1ce4c <_start@@Base+0xa450>
   1baf4:	ldrd	r2, [sp, #144]	; 0x90
   1baf8:	cmp	r3, #0
   1bafc:	cmpeq	r2, #255	; 0xff
   1bb00:	bhi	1d378 <_start@@Base+0xa97c>
   1bb04:	tst	r2, #255	; 0xff
   1bb08:	movne	r3, #1
   1bb0c:	moveq	r3, #0
   1bb10:	strb	r3, [sp, #132]	; 0x84
   1bb14:	cmp	r3, #1
   1bb18:	bne	1bb28 <_start@@Base+0x912c>
   1bb1c:	ldr	r3, [sl, #8]
   1bb20:	tst	r3, #2
   1bb24:	beq	19c44 <_start@@Base+0x7248>
   1bb28:	mov	r3, #1
   1bb2c:	mov	r2, r3
   1bb30:	mov	r1, #15
   1bb34:	ldr	r0, [sl]
   1bb38:	bl	25728 <flatcc_builder_table_add@@Base>
   1bb3c:	cmp	r0, #0
   1bb40:	beq	1a648 <_start@@Base+0x7c4c>
   1bb44:	ldrb	r3, [sp, #132]	; 0x84
   1bb48:	strb	r3, [r0]
   1bb4c:	b	19c44 <_start@@Base+0x7248>
   1bb50:	mov	r3, #4
   1bb54:	mov	r2, fp
   1bb58:	mov	r1, r7
   1bb5c:	mov	r0, sl
   1bb60:	bl	18084 <_start@@Base+0x5688>
   1bb64:	cmp	r0, r7
   1bb68:	mov	r4, r0
   1bb6c:	beq	1a488 <_start@@Base+0x7a8c>
   1bb70:	mov	r2, #1
   1bb74:	mov	r1, r2
   1bb78:	mvn	r3, #0
   1bb7c:	ldr	r0, [sl]
   1bb80:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1bb84:	subs	r6, r0, #0
   1bb88:	bne	1d28c <_start@@Base+0xa890>
   1bb8c:	mov	r3, r9
   1bb90:	mov	r1, r4
   1bb94:	mov	r2, fp
   1bb98:	mov	r0, sl
   1bb9c:	bl	13460 <_start@@Base+0xa64>
   1bba0:	ldr	r3, [sp, #116]	; 0x74
   1bba4:	cmp	r3, #0
   1bba8:	mov	r7, r0
   1bbac:	beq	1bc5c <_start@@Base+0x9260>
   1bbb0:	ldr	r3, [pc, #-1328]	; 1b688 <_start@@Base+0x8c8c>
   1bbb4:	mov	r8, #1
   1bbb8:	add	r3, pc, r3
   1bbbc:	add	r3, r3, #148	; 0x94
   1bbc0:	str	r3, [sp, #56]	; 0x38
   1bbc4:	add	r5, sp, #144	; 0x90
   1bbc8:	b	1bbf8 <_start@@Base+0x91fc>
   1bbcc:	ldrb	r2, [sp, #144]	; 0x90
   1bbd0:	mov	r1, r0
   1bbd4:	mov	r3, r9
   1bbd8:	strb	r2, [r4]
   1bbdc:	mov	r0, sl
   1bbe0:	mov	r2, fp
   1bbe4:	bl	14d08 <_start@@Base+0x230c>
   1bbe8:	ldr	r3, [sp, #116]	; 0x74
   1bbec:	cmp	r3, #0
   1bbf0:	mov	r7, r0
   1bbf4:	beq	1bc5c <_start@@Base+0x9260>
   1bbf8:	mov	r1, r8
   1bbfc:	ldr	r0, [sl]
   1bc00:	strb	r6, [sp, #144]	; 0x90
   1bc04:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1bc08:	mov	r1, r7
   1bc0c:	mov	r3, r5
   1bc10:	mov	r2, fp
   1bc14:	subs	r4, r0, #0
   1bc18:	mov	r0, sl
   1bc1c:	beq	1a648 <_start@@Base+0x7c4c>
   1bc20:	bl	12fe0 <_start@@Base+0x5e4>
   1bc24:	cmp	r0, r7
   1bc28:	bne	1bbcc <_start@@Base+0x91d0>
   1bc2c:	str	r5, [sp]
   1bc30:	ldr	r3, [sp, #56]	; 0x38
   1bc34:	mov	r2, fp
   1bc38:	mov	r1, r7
   1bc3c:	mov	r0, sl
   1bc40:	bl	1443c <_start@@Base+0x1a40>
   1bc44:	cmp	fp, r0
   1bc48:	cmpne	r0, r7
   1bc4c:	bne	1bbcc <_start@@Base+0x91d0>
   1bc50:	mov	r9, fp
   1bc54:	mov	fp, r0
   1bc58:	b	19ca8 <_start@@Base+0x72ac>
   1bc5c:	ldr	r0, [sl]
   1bc60:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1bc64:	cmp	r0, #0
   1bc68:	str	r0, [sp, #120]	; 0x78
   1bc6c:	beq	1a648 <_start@@Base+0x7c4c>
   1bc70:	mov	r1, #30
   1bc74:	ldr	r0, [sl]
   1bc78:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1bc7c:	cmp	r0, #0
   1bc80:	beq	1a648 <_start@@Base+0x7c4c>
   1bc84:	ldr	r3, [sp, #120]	; 0x78
   1bc88:	str	r3, [r0]
   1bc8c:	b	19c44 <_start@@Base+0x7248>
   1bc90:	mov	r1, r7
   1bc94:	mov	r3, #4
   1bc98:	mov	r2, fp
   1bc9c:	mov	r0, sl
   1bca0:	bl	18084 <_start@@Base+0x5688>
   1bca4:	cmp	r0, r7
   1bca8:	mov	r1, r0
   1bcac:	beq	1a464 <_start@@Base+0x7a68>
   1bcb0:	add	r3, sp, #120	; 0x78
   1bcb4:	mov	r2, fp
   1bcb8:	mov	r0, sl
   1bcbc:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   1bcc0:	ldr	r3, [sp, #120]	; 0x78
   1bcc4:	cmp	r3, #0
   1bcc8:	mov	r7, r0
   1bccc:	beq	1a648 <_start@@Base+0x7c4c>
   1bcd0:	mov	r1, #3
   1bcd4:	ldr	r0, [sl]
   1bcd8:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1bcdc:	cmp	r0, #0
   1bce0:	beq	1a648 <_start@@Base+0x7c4c>
   1bce4:	ldr	r3, [sp, #120]	; 0x78
   1bce8:	str	r3, [r0]
   1bcec:	b	19c44 <_start@@Base+0x7248>
   1bcf0:	mov	r1, r7
   1bcf4:	mov	r3, #5
   1bcf8:	mov	r2, fp
   1bcfc:	mov	r0, sl
   1bd00:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1bd04:	mov	r7, r0
   1bd08:	b	1b324 <_start@@Base+0x8928>
   1bd0c:	add	r4, r7, #8
   1bd10:	mov	r0, r4
   1bd14:	mov	r1, fp
   1bd18:	bl	12b28 <_start@@Base+0x12c>
   1bd1c:	mov	r0, #0
   1bd20:	and	r1, r1, #-16777216	; 0xff000000
   1bd24:	cmp	r1, #2030043136	; 0x79000000
   1bd28:	cmpeq	r0, #0
   1bd2c:	bne	1c8b8 <_start@@Base+0x9ebc>
   1bd30:	sub	r3, fp, r4
   1bd34:	cmp	r3, #1
   1bd38:	ble	1d940 <_start@@Base+0xaf44>
   1bd3c:	mov	r3, #1
   1bd40:	mov	r2, fp
   1bd44:	mov	r1, r4
   1bd48:	mov	r0, sl
   1bd4c:	bl	18084 <_start@@Base+0x5688>
   1bd50:	cmp	r4, r0
   1bd54:	mov	r7, r0
   1bd58:	beq	1d93c <_start@@Base+0xaf40>
   1bd5c:	mov	r2, #1
   1bd60:	mov	r1, r2
   1bd64:	mvn	r3, #0
   1bd68:	ldr	r0, [sl]
   1bd6c:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1bd70:	cmp	r0, #0
   1bd74:	bne	1a648 <_start@@Base+0x7c4c>
   1bd78:	mov	r1, r7
   1bd7c:	mov	r3, r9
   1bd80:	mov	r2, fp
   1bd84:	mov	r0, sl
   1bd88:	bl	13460 <_start@@Base+0xa64>
   1bd8c:	ldr	r3, [sp, #116]	; 0x74
   1bd90:	cmp	r3, #0
   1bd94:	mov	r7, r0
   1bd98:	beq	1d1dc <_start@@Base+0xa7e0>
   1bd9c:	ldr	r3, [pc, #-1816]	; 1b68c <_start@@Base+0x8c90>
   1bda0:	mov	r8, #0
   1bda4:	add	r3, pc, r3
   1bda8:	add	r3, r3, #172	; 0xac
   1bdac:	str	r3, [sp, #56]	; 0x38
   1bdb0:	mov	r6, #1
   1bdb4:	add	r5, sp, #144	; 0x90
   1bdb8:	b	1bde8 <_start@@Base+0x93ec>
   1bdbc:	ldrb	r2, [sp, #144]	; 0x90
   1bdc0:	mov	r1, r0
   1bdc4:	mov	r3, r9
   1bdc8:	strb	r2, [r4]
   1bdcc:	mov	r0, sl
   1bdd0:	mov	r2, fp
   1bdd4:	bl	14d08 <_start@@Base+0x230c>
   1bdd8:	ldr	r3, [sp, #116]	; 0x74
   1bddc:	cmp	r3, #0
   1bde0:	mov	r7, r0
   1bde4:	beq	1d1dc <_start@@Base+0xa7e0>
   1bde8:	mov	r1, r6
   1bdec:	ldr	r0, [sl]
   1bdf0:	strb	r8, [sp, #144]	; 0x90
   1bdf4:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1bdf8:	mov	r1, r7
   1bdfc:	mov	r3, r5
   1be00:	mov	r2, fp
   1be04:	subs	r4, r0, #0
   1be08:	mov	r0, sl
   1be0c:	beq	1a648 <_start@@Base+0x7c4c>
   1be10:	bl	12fe0 <_start@@Base+0x5e4>
   1be14:	cmp	r0, r7
   1be18:	bne	1bdbc <_start@@Base+0x93c0>
   1be1c:	str	r5, [sp]
   1be20:	ldr	r3, [sp, #56]	; 0x38
   1be24:	mov	r2, fp
   1be28:	mov	r1, r7
   1be2c:	mov	r0, sl
   1be30:	bl	1443c <_start@@Base+0x1a40>
   1be34:	cmp	fp, r0
   1be38:	cmpne	r0, r7
   1be3c:	bne	1bdbc <_start@@Base+0x93c0>
   1be40:	b	1bc50 <_start@@Base+0x9254>
   1be44:	mov	r0, r7
   1be48:	mov	r7, r0
   1be4c:	mov	r1, r7
   1be50:	mov	r3, #33	; 0x21
   1be54:	mov	r2, fp
   1be58:	mov	r0, sl
   1be5c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1be60:	ldr	r3, [sp, #120]	; 0x78
   1be64:	cmp	r3, #0
   1be68:	mov	r7, r0
   1be6c:	beq	1a648 <_start@@Base+0x7c4c>
   1be70:	mov	r1, #14
   1be74:	ldr	r0, [sl]
   1be78:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1be7c:	cmp	r0, #0
   1be80:	beq	1a648 <_start@@Base+0x7c4c>
   1be84:	ldr	r3, [sp, #120]	; 0x78
   1be88:	str	r3, [r0]
   1be8c:	b	19c44 <_start@@Base+0x7248>
   1be90:	ldr	r0, [sl]
   1be94:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1be98:	cmp	r0, #0
   1be9c:	str	r0, [sp, #120]	; 0x78
   1bea0:	beq	1a648 <_start@@Base+0x7c4c>
   1bea4:	mov	r1, #31
   1bea8:	ldr	r0, [sl]
   1beac:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1beb0:	cmp	r0, #0
   1beb4:	beq	1a648 <_start@@Base+0x7c4c>
   1beb8:	ldr	r3, [sp, #120]	; 0x78
   1bebc:	str	r3, [r0]
   1bec0:	b	19c44 <_start@@Base+0x7248>
   1bec4:	mov	r1, r7
   1bec8:	mov	r3, #4
   1becc:	mov	r2, fp
   1bed0:	mov	r0, sl
   1bed4:	bl	18084 <_start@@Base+0x5688>
   1bed8:	cmp	r0, r7
   1bedc:	mov	r1, r0
   1bee0:	beq	19e64 <_start@@Base+0x7468>
   1bee4:	ldr	ip, [sp, #124]	; 0x7c
   1bee8:	ldr	r3, [pc, #-2144]	; 1b690 <_start@@Base+0x8c94>
   1beec:	mov	r2, #8
   1bef0:	add	r3, pc, r3
   1bef4:	str	r3, [sp, #8]
   1bef8:	stm	sp, {r2, ip}
   1befc:	mov	r3, #0
   1bf00:	mov	r2, fp
   1bf04:	mov	r0, sl
   1bf08:	bl	29e70 <flatcc_json_parser_union@@Base>
   1bf0c:	mov	r7, r0
   1bf10:	b	19c44 <_start@@Base+0x7248>
   1bf14:	mov	r3, #3
   1bf18:	mov	r2, fp
   1bf1c:	mov	r1, r7
   1bf20:	mov	r0, sl
   1bf24:	bl	18084 <_start@@Base+0x5688>
   1bf28:	cmp	r0, r7
   1bf2c:	mov	r6, r0
   1bf30:	beq	1a1a4 <_start@@Base+0x77a8>
   1bf34:	mov	r3, #16
   1bf38:	mov	r2, #32
   1bf3c:	mov	r1, #0
   1bf40:	ldr	r0, [sl]
   1bf44:	bl	25728 <flatcc_builder_table_add@@Base>
   1bf48:	subs	r3, r0, #0
   1bf4c:	str	r3, [sp, #72]	; 0x48
   1bf50:	beq	1d9f8 <_start@@Base+0xaffc>
   1bf54:	add	r8, sp, #132	; 0x84
   1bf58:	mov	r3, r8
   1bf5c:	mov	r1, r6
   1bf60:	mov	r2, fp
   1bf64:	mov	r0, sl
   1bf68:	bl	133ac <_start@@Base+0x9b0>
   1bf6c:	ldr	r3, [sp, #132]	; 0x84
   1bf70:	cmp	r3, #0
   1bf74:	mov	r7, r0
   1bf78:	beq	19c44 <_start@@Base+0x7248>
   1bf7c:	ldr	r2, [pc, #-2288]	; 1b694 <_start@@Base+0x8c98>
   1bf80:	ldr	r3, [pc, #-2288]	; 1b698 <_start@@Base+0x8c9c>
   1bf84:	add	r2, pc, r2
   1bf88:	add	r3, pc, r3
   1bf8c:	add	r2, r2, #248	; 0xf8
   1bf90:	add	r3, r3, #236	; 0xec
   1bf94:	str	r9, [sp, #100]	; 0x64
   1bf98:	str	r8, [sp, #56]	; 0x38
   1bf9c:	vldr	s18, [pc, #900]	; 1c328 <_start@@Base+0x992c>
   1bfa0:	vldr	d8, [pc, #856]	; 1c300 <_start@@Base+0x9904>
   1bfa4:	str	r2, [sp, #104]	; 0x68
   1bfa8:	str	r3, [sp, #108]	; 0x6c
   1bfac:	ldrd	r8, [sp, #88]	; 0x58
   1bfb0:	b	1c13c <_start@@Base+0x9740>
   1bfb4:	ldrb	r2, [r7, #7]
   1bfb8:	mov	r3, #0
   1bfbc:	ldrb	r0, [r7, #6]
   1bfc0:	lsr	lr, r0, #24
   1bfc4:	lsl	r1, r0, #8
   1bfc8:	str	lr, [sp, #68]	; 0x44
   1bfcc:	str	r1, [sp, #64]	; 0x40
   1bfd0:	ldrd	r0, [sp, #64]	; 0x40
   1bfd4:	orr	r0, r0, r2
   1bfd8:	orr	r1, r1, r3
   1bfdc:	mov	r2, r0
   1bfe0:	mov	r3, r1
   1bfe4:	ldrb	r0, [r7, #5]
   1bfe8:	lsr	lr, r0, #16
   1bfec:	lsl	r1, r0, #16
   1bff0:	str	lr, [sp, #52]	; 0x34
   1bff4:	str	r1, [sp, #48]	; 0x30
   1bff8:	ldrd	r0, [sp, #48]	; 0x30
   1bffc:	orr	r0, r0, r2
   1c000:	orr	r1, r1, r3
   1c004:	mov	r2, r0
   1c008:	mov	r3, r1
   1c00c:	ldrb	r0, [r7, #4]
   1c010:	lsr	lr, r0, #8
   1c014:	lsl	r1, r0, #24
   1c018:	str	lr, [sp, #36]	; 0x24
   1c01c:	str	r1, [sp, #32]
   1c020:	ldrd	r0, [sp, #32]
   1c024:	orr	r0, r0, r2
   1c028:	orr	r1, r1, r3
   1c02c:	mov	r2, r0
   1c030:	mov	r3, r1
   1c034:	ldrb	r1, [r7, #3]
   1c038:	str	r1, [sp, #44]	; 0x2c
   1c03c:	mov	r1, #0
   1c040:	str	r1, [sp, #40]	; 0x28
   1c044:	ldrd	r0, [sp, #40]	; 0x28
   1c048:	orr	r0, r0, r2
   1c04c:	orr	r1, r1, r3
   1c050:	mov	r2, r0
   1c054:	mov	r3, r1
   1c058:	ldrb	r0, [r7, #2]
   1c05c:	lsl	r1, r0, #8
   1c060:	str	r1, [sp, #28]
   1c064:	mov	r1, #0
   1c068:	str	r1, [sp, #24]
   1c06c:	ldrd	r0, [sp, #24]
   1c070:	orr	r0, r0, r2
   1c074:	orr	r1, r1, r3
   1c078:	mov	r2, r0
   1c07c:	mov	r3, r1
   1c080:	ldrb	r0, [r7, #1]
   1c084:	lsl	r1, r0, #16
   1c088:	str	r1, [sp, #20]
   1c08c:	mov	r1, #0
   1c090:	str	r1, [sp, #16]
   1c094:	ldrd	r0, [sp, #16]
   1c098:	orr	r0, r0, r2
   1c09c:	orr	r1, r1, r3
   1c0a0:	mov	r2, r0
   1c0a4:	mov	r3, r1
   1c0a8:	ldrb	r4, [r7]
   1c0ac:	add	r1, pc, #596	; 0x254
   1c0b0:	ldrd	r0, [r1]
   1c0b4:	mov	r8, #0
   1c0b8:	orr	r2, r2, r8
   1c0bc:	lsl	r9, r4, #24
   1c0c0:	orr	r3, r3, r9
   1c0c4:	cmp	r3, r1
   1c0c8:	cmpeq	r2, r0
   1c0cc:	bls	1c1fc <_start@@Base+0x9800>
   1c0d0:	mvn	r1, #-2013265920	; 0x88000000
   1c0d4:	mvn	r0, #0
   1c0d8:	cmp	r3, r1
   1c0dc:	cmpeq	r2, r0
   1c0e0:	bhi	1c288 <_start@@Base+0x988c>
   1c0e4:	add	r1, pc, #548	; 0x224
   1c0e8:	ldrd	r0, [r1]
   1c0ec:	and	r2, r2, #-16777216	; 0xff000000
   1c0f0:	cmp	r3, r1
   1c0f4:	cmpeq	r2, r0
   1c0f8:	bne	1c104 <_start@@Base+0x9708>
   1c0fc:	cmp	ip, #5
   1c100:	bgt	1c4b8 <_start@@Base+0x9abc>
   1c104:	mov	r1, r7
   1c108:	mov	r2, fp
   1c10c:	mov	r0, sl
   1c110:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c114:	mov	r4, r0
   1c118:	ldr	r3, [sp, #56]	; 0x38
   1c11c:	mov	r1, r4
   1c120:	mov	r2, fp
   1c124:	mov	r0, sl
   1c128:	bl	14e8c <_start@@Base+0x2490>
   1c12c:	ldr	r3, [sp, #132]	; 0x84
   1c130:	cmp	r3, #0
   1c134:	mov	r7, r0
   1c138:	beq	1c558 <_start@@Base+0x9b5c>
   1c13c:	cmp	fp, r7
   1c140:	beq	1c45c <_start@@Base+0x9a60>
   1c144:	ldrb	r3, [r7]
   1c148:	cmp	r3, #34	; 0x22
   1c14c:	moveq	r3, #0
   1c150:	addeq	r7, r7, #1
   1c154:	streq	r3, [sl, #12]
   1c158:	beq	1c16c <_start@@Base+0x9770>
   1c15c:	cmp	r3, #46	; 0x2e
   1c160:	movne	r3, #1
   1c164:	strne	r3, [sl, #12]
   1c168:	beq	1c464 <_start@@Base+0x9a68>
   1c16c:	sub	ip, fp, r7
   1c170:	cmp	ip, #8
   1c174:	bhi	1bfb4 <_start@@Base+0x95b8>
   1c178:	sub	r3, ip, #1
   1c17c:	cmp	r3, #7
   1c180:	addls	pc, pc, r3, lsl #2
   1c184:	b	1c104 <_start@@Base+0x9708>
   1c188:	b	1c1f0 <_start@@Base+0x97f4>
   1c18c:	b	1c1e4 <_start@@Base+0x97e8>
   1c190:	b	1c1d8 <_start@@Base+0x97dc>
   1c194:	b	1c1cc <_start@@Base+0x97d0>
   1c198:	b	1c1c0 <_start@@Base+0x97c4>
   1c19c:	b	1c1b4 <_start@@Base+0x97b8>
   1c1a0:	b	1c1a8 <_start@@Base+0x97ac>
   1c1a4:	b	1bfb4 <_start@@Base+0x95b8>
   1c1a8:	mov	r2, #0
   1c1ac:	mov	r3, #0
   1c1b0:	b	1bfbc <_start@@Base+0x95c0>
   1c1b4:	mov	r2, #0
   1c1b8:	mov	r3, #0
   1c1bc:	b	1bfe4 <_start@@Base+0x95e8>
   1c1c0:	mov	r2, #0
   1c1c4:	mov	r3, #0
   1c1c8:	b	1c00c <_start@@Base+0x9610>
   1c1cc:	mov	r2, #0
   1c1d0:	mov	r3, #0
   1c1d4:	b	1c034 <_start@@Base+0x9638>
   1c1d8:	mov	r2, #0
   1c1dc:	mov	r3, #0
   1c1e0:	b	1c058 <_start@@Base+0x965c>
   1c1e4:	mov	r2, #0
   1c1e8:	mov	r3, #0
   1c1ec:	b	1c080 <_start@@Base+0x9684>
   1c1f0:	mov	r2, #0
   1c1f4:	mov	r3, #0
   1c1f8:	b	1c0a8 <_start@@Base+0x96ac>
   1c1fc:	add	r1, pc, #276	; 0x114
   1c200:	ldrd	r0, [r1]
   1c204:	and	r2, r2, #-16777216	; 0xff000000
   1c208:	cmp	r3, r1
   1c20c:	cmpeq	r2, r0
   1c210:	beq	1c33c <_start@@Base+0x9940>
   1c214:	add	r1, pc, #260	; 0x104
   1c218:	ldrd	r0, [r1]
   1c21c:	cmp	r3, r1
   1c220:	cmpeq	r2, r0
   1c224:	bne	1c104 <_start@@Base+0x9708>
   1c228:	cmp	ip, #5
   1c22c:	ble	1c104 <_start@@Base+0x9708>
   1c230:	mov	r3, #5
   1c234:	mov	r2, fp
   1c238:	mov	r1, r7
   1c23c:	mov	r0, sl
   1c240:	bl	18084 <_start@@Base+0x5688>
   1c244:	cmp	r0, r7
   1c248:	mov	r5, r0
   1c24c:	beq	1c104 <_start@@Base+0x9708>
   1c250:	add	r6, sp, #152	; 0x98
   1c254:	mov	r1, r0
   1c258:	vstmdb	r6!, {d8}
   1c25c:	mov	r2, fp
   1c260:	mov	r0, sl
   1c264:	mov	r3, r6
   1c268:	bl	288fc <flatcc_json_parser_double@@Base>
   1c26c:	cmp	r5, r0
   1c270:	mov	r4, r0
   1c274:	beq	1c580 <_start@@Base+0x9b84>
   1c278:	ldrd	r2, [sp, #144]	; 0x90
   1c27c:	ldr	r1, [sp, #72]	; 0x48
   1c280:	strd	r2, [r1, #16]
   1c284:	b	1c118 <_start@@Base+0x971c>
   1c288:	mvn	r1, #-2030043136	; 0x87000000
   1c28c:	mvn	r0, #0
   1c290:	cmp	r3, r1
   1c294:	cmpeq	r2, r0
   1c298:	bhi	1c3d8 <_start@@Base+0x99dc>
   1c29c:	cmp	ip, #1
   1c2a0:	ble	1c104 <_start@@Base+0x9708>
   1c2a4:	mov	r3, #1
   1c2a8:	mov	r2, fp
   1c2ac:	mov	r1, r7
   1c2b0:	mov	r0, sl
   1c2b4:	bl	18084 <_start@@Base+0x5688>
   1c2b8:	cmp	r0, r7
   1c2bc:	mov	r5, r0
   1c2c0:	beq	1c104 <_start@@Base+0x9708>
   1c2c4:	vmov	r3, s18
   1c2c8:	add	r6, sp, #152	; 0x98
   1c2cc:	mov	r1, r0
   1c2d0:	mov	r2, fp
   1c2d4:	str	r3, [r6, #-8]!
   1c2d8:	mov	r0, sl
   1c2dc:	mov	r3, r6
   1c2e0:	bl	289d0 <flatcc_json_parser_float@@Base>
   1c2e4:	cmp	r5, r0
   1c2e8:	mov	r4, r0
   1c2ec:	beq	1cad4 <_start@@Base+0xa0d8>
   1c2f0:	ldr	r2, [sp, #72]	; 0x48
   1c2f4:	ldr	r3, [sp, #144]	; 0x90
   1c2f8:	str	r3, [r2]
   1c2fc:	b	1c118 <_start@@Base+0x971c>
	...
   1c308:	rscscc	pc, pc, #1020	; 0x3fc
   1c30c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c310:	movwcc	r0, #0
   1c314:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c318:	andcc	r0, r0, #0
   1c31c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c320:	mrscc	r0, (UNDEF: 0)
   1c324:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c328:	andeq	r0, r0, r0
   1c32c:	andeq	r0, r2, r0, lsl #22
   1c330:	andeq	r0, r2, ip, asr #21
   1c334:	andeq	r0, r2, r0, ror sl
   1c338:	andeq	r0, r2, r8, lsr #19
   1c33c:	cmp	ip, #5
   1c340:	ble	1c104 <_start@@Base+0x9708>
   1c344:	mov	r3, #5
   1c348:	mov	r2, fp
   1c34c:	mov	r1, r7
   1c350:	mov	r0, sl
   1c354:	bl	18084 <_start@@Base+0x5688>
   1c358:	cmp	r0, r7
   1c35c:	mov	r5, r0
   1c360:	beq	1c104 <_start@@Base+0x9708>
   1c364:	mov	r2, #0
   1c368:	mov	r3, #0
   1c36c:	cmp	fp, r0
   1c370:	strb	r8, [sp, #128]	; 0x80
   1c374:	str	r8, [sp, #136]	; 0x88
   1c378:	strd	r2, [sp, #144]	; 0x90
   1c37c:	beq	1c5b4 <_start@@Base+0x9bb8>
   1c380:	add	r3, sp, #144	; 0x90
   1c384:	str	r3, [sp]
   1c388:	mov	r1, r0
   1c38c:	add	r3, sp, #136	; 0x88
   1c390:	mov	r2, fp
   1c394:	mov	r0, sl
   1c398:	bl	296fc <flatcc_json_parser_integer@@Base>
   1c39c:	cmp	r5, r0
   1c3a0:	mov	r4, r0
   1c3a4:	beq	1c5b4 <_start@@Base+0x9bb8>
   1c3a8:	ldr	r1, [sp, #136]	; 0x88
   1c3ac:	ldrd	r2, [sp, #144]	; 0x90
   1c3b0:	cmp	r1, r8
   1c3b4:	beq	1c480 <_start@@Base+0x9a84>
   1c3b8:	cmp	r3, #0
   1c3bc:	cmpeq	r2, #128	; 0x80
   1c3c0:	rsbls	r2, r2, #0
   1c3c4:	sxtbls	r2, r2
   1c3c8:	bhi	1c564 <_start@@Base+0x9b68>
   1c3cc:	ldr	r3, [sp, #72]	; 0x48
   1c3d0:	strb	r2, [r3, #24]
   1c3d4:	b	1c118 <_start@@Base+0x971c>
   1c3d8:	and	r3, r3, #-16777216	; 0xff000000
   1c3dc:	mov	r2, #0
   1c3e0:	cmp	r3, #2046820352	; 0x7a000000
   1c3e4:	cmpeq	r2, #0
   1c3e8:	beq	1c4f4 <_start@@Base+0x9af8>
   1c3ec:	cmp	r3, #2030043136	; 0x79000000
   1c3f0:	cmpeq	r2, #0
   1c3f4:	bne	1c104 <_start@@Base+0x9708>
   1c3f8:	cmp	ip, #1
   1c3fc:	ble	1c104 <_start@@Base+0x9708>
   1c400:	mov	r3, #1
   1c404:	mov	r2, fp
   1c408:	mov	r1, r7
   1c40c:	mov	r0, sl
   1c410:	bl	18084 <_start@@Base+0x5688>
   1c414:	cmp	r0, r7
   1c418:	mov	r5, r0
   1c41c:	beq	1c104 <_start@@Base+0x9708>
   1c420:	vmov	r3, s18
   1c424:	add	r6, sp, #152	; 0x98
   1c428:	mov	r1, r0
   1c42c:	mov	r2, fp
   1c430:	str	r3, [r6, #-8]!
   1c434:	mov	r0, sl
   1c438:	mov	r3, r6
   1c43c:	bl	289d0 <flatcc_json_parser_float@@Base>
   1c440:	cmp	r5, r0
   1c444:	mov	r4, r0
   1c448:	beq	1cce8 <_start@@Base+0xa2ec>
   1c44c:	ldr	r2, [sp, #72]	; 0x48
   1c450:	ldr	r3, [sp, #144]	; 0x90
   1c454:	str	r3, [r2, #4]
   1c458:	b	1c118 <_start@@Base+0x971c>
   1c45c:	mov	r7, fp
   1c460:	b	1c104 <_start@@Base+0x9708>
   1c464:	mov	r1, r7
   1c468:	mov	r3, #5
   1c46c:	mov	r2, fp
   1c470:	mov	r0, sl
   1c474:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1c478:	mov	r7, r0
   1c47c:	b	1c16c <_start@@Base+0x9770>
   1c480:	cmp	r3, #0
   1c484:	cmpeq	r2, #127	; 0x7f
   1c488:	sxtbls	r2, r2
   1c48c:	bls	1c3cc <_start@@Base+0x99d0>
   1c490:	mov	r1, r0
   1c494:	mov	r3, #7
   1c498:	mov	r2, fp
   1c49c:	mov	r0, sl
   1c4a0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1c4a4:	mov	r4, r0
   1c4a8:	cmp	r5, r4
   1c4ac:	beq	1c5b4 <_start@@Base+0x9bb8>
   1c4b0:	ldrsb	r2, [sp, #128]	; 0x80
   1c4b4:	b	1c3cc <_start@@Base+0x99d0>
   1c4b8:	mov	r1, r7
   1c4bc:	mov	r3, #5
   1c4c0:	mov	r2, fp
   1c4c4:	mov	r0, sl
   1c4c8:	bl	18084 <_start@@Base+0x5688>
   1c4cc:	cmp	r0, r7
   1c4d0:	mov	r1, r0
   1c4d4:	beq	1c104 <_start@@Base+0x9708>
   1c4d8:	ldr	r3, [sp, #72]	; 0x48
   1c4dc:	mov	r2, fp
   1c4e0:	add	r3, r3, #26
   1c4e4:	mov	r0, sl
   1c4e8:	bl	15010 <_start@@Base+0x2614>
   1c4ec:	mov	r4, r0
   1c4f0:	b	1c118 <_start@@Base+0x971c>
   1c4f4:	cmp	ip, #1
   1c4f8:	ble	1c104 <_start@@Base+0x9708>
   1c4fc:	mov	r3, #1
   1c500:	mov	r2, fp
   1c504:	mov	r1, r7
   1c508:	mov	r0, sl
   1c50c:	bl	18084 <_start@@Base+0x5688>
   1c510:	cmp	r0, r7
   1c514:	mov	r5, r0
   1c518:	beq	1c104 <_start@@Base+0x9708>
   1c51c:	vmov	r3, s18
   1c520:	add	r6, sp, #152	; 0x98
   1c524:	mov	r1, r0
   1c528:	mov	r2, fp
   1c52c:	str	r3, [r6, #-8]!
   1c530:	mov	r0, sl
   1c534:	mov	r3, r6
   1c538:	bl	289d0 <flatcc_json_parser_float@@Base>
   1c53c:	cmp	r5, r0
   1c540:	mov	r4, r0
   1c544:	beq	1d22c <_start@@Base+0xa830>
   1c548:	ldr	r2, [sp, #72]	; 0x48
   1c54c:	ldr	r3, [sp, #144]	; 0x90
   1c550:	str	r3, [r2, #8]
   1c554:	b	1c118 <_start@@Base+0x971c>
   1c558:	strd	r8, [sp, #88]	; 0x58
   1c55c:	ldr	r9, [sp, #100]	; 0x64
   1c560:	b	19c44 <_start@@Base+0x7248>
   1c564:	mov	r1, r0
   1c568:	mov	r3, #8
   1c56c:	mov	r2, fp
   1c570:	mov	r0, sl
   1c574:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1c578:	mov	r4, r0
   1c57c:	b	1c4a8 <_start@@Base+0x9aac>
   1c580:	ldr	r3, [pc, #-604]	; 1c32c <_start@@Base+0x9930>
   1c584:	mov	r1, r0
   1c588:	add	r3, pc, r3
   1c58c:	str	r6, [sp]
   1c590:	add	r3, r3, #212	; 0xd4
   1c594:	mov	r2, fp
   1c598:	mov	r0, sl
   1c59c:	bl	13714 <_start@@Base+0xd18>
   1c5a0:	cmp	fp, r0
   1c5a4:	cmpne	r4, r0
   1c5a8:	beq	1da54 <_start@@Base+0xb058>
   1c5ac:	mov	r4, r0
   1c5b0:	b	1c278 <_start@@Base+0x987c>
   1c5b4:	ldr	r3, [pc, #-652]	; 1c330 <_start@@Base+0x9934>
   1c5b8:	add	r2, sp, #128	; 0x80
   1c5bc:	add	r3, pc, r3
   1c5c0:	str	r2, [sp]
   1c5c4:	add	r3, r3, #196	; 0xc4
   1c5c8:	mov	r2, fp
   1c5cc:	mov	r1, r5
   1c5d0:	mov	r0, sl
   1c5d4:	bl	141f4 <_start@@Base+0x17f8>
   1c5d8:	cmp	fp, r0
   1c5dc:	cmpne	r0, r5
   1c5e0:	mov	r4, r0
   1c5e4:	bne	1c4b0 <_start@@Base+0x9ab4>
   1c5e8:	strd	r8, [sp, #88]	; 0x58
   1c5ec:	ldr	r9, [sp, #100]	; 0x64
   1c5f0:	mov	r1, r4
   1c5f4:	mov	r3, #33	; 0x21
   1c5f8:	mov	r2, fp
   1c5fc:	mov	r0, sl
   1c600:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1c604:	mov	r7, r0
   1c608:	b	19c44 <_start@@Base+0x7248>
   1c60c:	mov	r4, r0
   1c610:	ldr	r3, [pc, #-740]	; 1c334 <_start@@Base+0x9938>
   1c614:	add	r2, sp, #132	; 0x84
   1c618:	add	r3, pc, r3
   1c61c:	str	r2, [sp]
   1c620:	add	r3, r3, #132	; 0x84
   1c624:	mov	r2, fp
   1c628:	mov	r1, r4
   1c62c:	mov	r0, sl
   1c630:	bl	141f4 <_start@@Base+0x17f8>
   1c634:	cmp	fp, r0
   1c638:	cmpne	r0, r4
   1c63c:	mov	r7, r0
   1c640:	bne	1aa90 <_start@@Base+0x8094>
   1c644:	b	1a648 <_start@@Base+0x7c4c>
   1c648:	add	r4, r7, #16
   1c64c:	mov	r0, r4
   1c650:	mov	r1, fp
   1c654:	bl	12b28 <_start@@Base+0x12c>
   1c658:	mov	r0, #0
   1c65c:	and	r1, r1, #-16777216	; 0xff000000
   1c660:	cmp	r1, #1929379840	; 0x73000000
   1c664:	cmpeq	r0, #0
   1c668:	bne	1c9fc <_start@@Base+0xa000>
   1c66c:	sub	r3, fp, r4
   1c670:	cmp	r3, #1
   1c674:	ble	1da08 <_start@@Base+0xb00c>
   1c678:	mov	r3, #1
   1c67c:	mov	r2, fp
   1c680:	mov	r1, r4
   1c684:	mov	r0, sl
   1c688:	bl	18084 <_start@@Base+0x5688>
   1c68c:	cmp	r4, r0
   1c690:	mov	r7, r0
   1c694:	beq	1da04 <_start@@Base+0xb008>
   1c698:	mov	r2, #8
   1c69c:	mov	r1, r2
   1c6a0:	mvn	r3, #-536870912	; 0xe0000000
   1c6a4:	ldr	r0, [sl]
   1c6a8:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1c6ac:	cmp	r0, #0
   1c6b0:	bne	1a648 <_start@@Base+0x7c4c>
   1c6b4:	mov	r1, r7
   1c6b8:	mov	r3, r9
   1c6bc:	mov	r2, fp
   1c6c0:	mov	r0, sl
   1c6c4:	bl	13460 <_start@@Base+0xa64>
   1c6c8:	ldr	r3, [sp, #116]	; 0x74
   1c6cc:	cmp	r3, #0
   1c6d0:	mov	r7, r0
   1c6d4:	beq	1d43c <_start@@Base+0xaa40>
   1c6d8:	ldr	r8, [pc, #-936]	; 1c338 <_start@@Base+0x993c>
   1c6dc:	vldr	d8, [pc, #972]	; 1cab0 <_start@@Base+0xa0b4>
   1c6e0:	add	r8, pc, r8
   1c6e4:	add	r8, r8, #492	; 0x1ec
   1c6e8:	mov	r6, #1
   1c6ec:	add	r5, sp, #144	; 0x90
   1c6f0:	b	1c720 <_start@@Base+0x9d24>
   1c6f4:	vldr	d7, [sp, #144]	; 0x90
   1c6f8:	mov	r1, r0
   1c6fc:	mov	r3, r9
   1c700:	mov	r2, fp
   1c704:	vstr	d7, [r4]
   1c708:	mov	r0, sl
   1c70c:	bl	14d08 <_start@@Base+0x230c>
   1c710:	ldr	r3, [sp, #116]	; 0x74
   1c714:	cmp	r3, #0
   1c718:	mov	r7, r0
   1c71c:	beq	1d43c <_start@@Base+0xaa40>
   1c720:	mov	r1, r6
   1c724:	ldr	r0, [sl]
   1c728:	vstr	d8, [sp, #144]	; 0x90
   1c72c:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1c730:	mov	r1, r7
   1c734:	mov	r3, r5
   1c738:	mov	r2, fp
   1c73c:	subs	r4, r0, #0
   1c740:	mov	r0, sl
   1c744:	beq	1a648 <_start@@Base+0x7c4c>
   1c748:	bl	288fc <flatcc_json_parser_double@@Base>
   1c74c:	cmp	r0, r7
   1c750:	bne	1c6f4 <_start@@Base+0x9cf8>
   1c754:	str	r5, [sp]
   1c758:	mov	r3, r8
   1c75c:	mov	r2, fp
   1c760:	mov	r1, r7
   1c764:	mov	r0, sl
   1c768:	bl	13714 <_start@@Base+0xd18>
   1c76c:	cmp	fp, r0
   1c770:	cmpne	r0, r7
   1c774:	bne	1c6f4 <_start@@Base+0x9cf8>
   1c778:	mov	r9, fp
   1c77c:	b	19ca4 <_start@@Base+0x72a8>
   1c780:	mov	r3, #0
   1c784:	strb	r3, [sp, #132]	; 0x84
   1c788:	ldr	r3, [pc, #812]	; 1cabc <_start@@Base+0xa0c0>
   1c78c:	add	r2, sp, #132	; 0x84
   1c790:	add	r3, pc, r3
   1c794:	str	r2, [sp]
   1c798:	add	r3, r3, #312	; 0x138
   1c79c:	mov	r2, fp
   1c7a0:	mov	r1, r4
   1c7a4:	mov	r0, sl
   1c7a8:	bl	13918 <_start@@Base+0xf1c>
   1c7ac:	cmp	fp, r0
   1c7b0:	cmpne	r0, r4
   1c7b4:	mov	r7, r0
   1c7b8:	beq	1a648 <_start@@Base+0x7c4c>
   1c7bc:	ldrb	r3, [sp, #132]	; 0x84
   1c7c0:	b	1bb14 <_start@@Base+0x9118>
   1c7c4:	mov	r1, r4
   1c7c8:	mov	r2, fp
   1c7cc:	mov	r0, sl
   1c7d0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c7d4:	mov	r7, r0
   1c7d8:	b	19c44 <_start@@Base+0x7248>
   1c7dc:	mov	r3, #1
   1c7e0:	add	r7, r4, #4
   1c7e4:	strb	r3, [sp, #132]	; 0x84
   1c7e8:	b	1bb1c <_start@@Base+0x9120>
   1c7ec:	mov	r4, r0
   1c7f0:	add	r3, sp, #114	; 0x72
   1c7f4:	str	r3, [sp]
   1c7f8:	mov	r2, fp
   1c7fc:	ldr	r3, [sp, #72]	; 0x48
   1c800:	mov	r1, r4
   1c804:	mov	r0, sl
   1c808:	bl	13fb4 <_start@@Base+0x15b8>
   1c80c:	cmp	fp, r0
   1c810:	cmpne	r0, r4
   1c814:	mov	r7, r0
   1c818:	beq	1be4c <_start@@Base+0x9450>
   1c81c:	ldrh	r2, [sp, #114]	; 0x72
   1c820:	b	1b60c <_start@@Base+0x8c10>
   1c824:	mov	r3, #5
   1c828:	mov	r2, fp
   1c82c:	mov	r1, r7
   1c830:	mov	r0, sl
   1c834:	bl	18084 <_start@@Base+0x5688>
   1c838:	cmp	r0, r7
   1c83c:	mov	r5, r0
   1c840:	beq	1a0a8 <_start@@Base+0x76ac>
   1c844:	add	r4, sp, #152	; 0x98
   1c848:	mov	r3, #0
   1c84c:	mov	r1, r0
   1c850:	str	r3, [r4, #-8]!
   1c854:	mov	r2, fp
   1c858:	mov	r0, sl
   1c85c:	mov	r3, r4
   1c860:	bl	289d0 <flatcc_json_parser_float@@Base>
   1c864:	cmp	r0, r5
   1c868:	mov	r7, r0
   1c86c:	beq	1d5e8 <_start@@Base+0xabec>
   1c870:	vldr	s15, [pc, #576]	; 1cab8 <_start@@Base+0xa0bc>
   1c874:	vldr	s14, [sp, #144]	; 0x90
   1c878:	vcmp.f32	s14, s15
   1c87c:	vmrs	APSR_nzcv, fpscr
   1c880:	bne	1c890 <_start@@Base+0x9e94>
   1c884:	ldr	r3, [sl, #8]
   1c888:	tst	r3, #2
   1c88c:	beq	19c44 <_start@@Base+0x7248>
   1c890:	mov	r3, #4
   1c894:	mov	r2, r3
   1c898:	mov	r1, #25
   1c89c:	ldr	r0, [sl]
   1c8a0:	bl	25728 <flatcc_builder_table_add@@Base>
   1c8a4:	cmp	r0, #0
   1c8a8:	beq	1a648 <_start@@Base+0x7c4c>
   1c8ac:	ldr	r3, [sp, #144]	; 0x90
   1c8b0:	str	r3, [r0]
   1c8b4:	b	19c44 <_start@@Base+0x7248>
   1c8b8:	mov	r1, r4
   1c8bc:	mov	r2, fp
   1c8c0:	mov	r0, sl
   1c8c4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c8c8:	mov	r7, r0
   1c8cc:	b	19c44 <_start@@Base+0x7248>
   1c8d0:	mov	r1, r7
   1c8d4:	mov	r2, fp
   1c8d8:	mov	r0, sl
   1c8dc:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c8e0:	mov	r7, r0
   1c8e4:	b	19c44 <_start@@Base+0x7248>
   1c8e8:	mov	r1, r7
   1c8ec:	mov	r2, fp
   1c8f0:	mov	r0, sl
   1c8f4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c8f8:	mov	r7, r0
   1c8fc:	b	19c44 <_start@@Base+0x7248>
   1c900:	mov	r1, r0
   1c904:	mov	r3, #8
   1c908:	mov	r2, fp
   1c90c:	mov	r0, sl
   1c910:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1c914:	mov	r7, r0
   1c918:	cmp	r4, r7
   1c91c:	bne	1c81c <_start@@Base+0x9e20>
   1c920:	b	1c7f0 <_start@@Base+0x9df4>
   1c924:	ldr	r3, [pc, #404]	; 1cac0 <_start@@Base+0xa0c4>
   1c928:	mov	r1, r0
   1c92c:	add	r3, pc, r3
   1c930:	str	r4, [sp]
   1c934:	add	r3, r3, #372	; 0x174
   1c938:	mov	r2, fp
   1c93c:	mov	r0, sl
   1c940:	bl	13514 <_start@@Base+0xb18>
   1c944:	cmp	fp, r0
   1c948:	cmpne	r7, r0
   1c94c:	beq	1c778 <_start@@Base+0x9d7c>
   1c950:	mov	r7, r0
   1c954:	b	1a4ec <_start@@Base+0x7af0>
   1c958:	mov	r1, r4
   1c95c:	mov	r2, fp
   1c960:	mov	r0, sl
   1c964:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1c968:	mov	r7, r0
   1c96c:	b	19c44 <_start@@Base+0x7248>
   1c970:	mov	r3, #4
   1c974:	mov	r2, fp
   1c978:	mov	r1, r7
   1c97c:	mov	r0, sl
   1c980:	bl	18084 <_start@@Base+0x5688>
   1c984:	cmp	r0, r7
   1c988:	mov	r5, r0
   1c98c:	beq	1aaa4 <_start@@Base+0x80a8>
   1c990:	add	r4, sp, #152	; 0x98
   1c994:	mov	r3, #0
   1c998:	strh	r3, [r4, #-8]!
   1c99c:	mov	r1, r0
   1c9a0:	mov	r2, fp
   1c9a4:	mov	r3, r4
   1c9a8:	mov	r0, sl
   1c9ac:	bl	13150 <_start@@Base+0x754>
   1c9b0:	cmp	r0, r5
   1c9b4:	mov	r7, r0
   1c9b8:	beq	1d958 <_start@@Base+0xaf5c>
   1c9bc:	ldrsh	r3, [sp, #144]	; 0x90
   1c9c0:	cmp	r3, #150	; 0x96
   1c9c4:	bne	1c9d4 <_start@@Base+0x9fd8>
   1c9c8:	ldr	r3, [sl, #8]
   1c9cc:	tst	r3, #2
   1c9d0:	beq	19c44 <_start@@Base+0x7248>
   1c9d4:	mov	r3, #2
   1c9d8:	mov	r2, r3
   1c9dc:	mov	r1, #1
   1c9e0:	ldr	r0, [sl]
   1c9e4:	bl	25728 <flatcc_builder_table_add@@Base>
   1c9e8:	cmp	r0, #0
   1c9ec:	beq	1a648 <_start@@Base+0x7c4c>
   1c9f0:	ldrsh	r3, [sp, #144]	; 0x90
   1c9f4:	strh	r3, [r0]
   1c9f8:	b	19c44 <_start@@Base+0x7248>
   1c9fc:	mov	r1, r4
   1ca00:	mov	r2, fp
   1ca04:	mov	r0, sl
   1ca08:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca0c:	mov	r7, r0
   1ca10:	b	19c44 <_start@@Base+0x7248>
   1ca14:	ldr	r0, [sl]
   1ca18:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1ca1c:	cmp	r0, #0
   1ca20:	str	r0, [sp, #120]	; 0x78
   1ca24:	beq	1a648 <_start@@Base+0x7c4c>
   1ca28:	mov	r1, #24
   1ca2c:	ldr	r0, [sl]
   1ca30:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1ca34:	cmp	r0, #0
   1ca38:	beq	1a648 <_start@@Base+0x7c4c>
   1ca3c:	ldr	r3, [sp, #120]	; 0x78
   1ca40:	str	r3, [r0]
   1ca44:	b	19c44 <_start@@Base+0x7248>
   1ca48:	mov	r1, r7
   1ca4c:	mov	r2, fp
   1ca50:	mov	r0, sl
   1ca54:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca58:	mov	r7, r0
   1ca5c:	b	19c44 <_start@@Base+0x7248>
   1ca60:	mov	r1, r7
   1ca64:	mov	r3, #7
   1ca68:	mov	r2, fp
   1ca6c:	mov	r0, sl
   1ca70:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1ca74:	mov	r7, r0
   1ca78:	b	1c918 <_start@@Base+0x9f1c>
   1ca7c:	ldr	r3, [sp, #124]	; 0x7c
   1ca80:	mov	r2, r9
   1ca84:	mov	r0, sl
   1ca88:	bl	29e18 <flatcc_json_parser_finalize_unions@@Base>
   1ca8c:	mov	fp, r0
   1ca90:	ldr	r0, [sl]
   1ca94:	bl	246dc <flatcc_builder_end_table@@Base>
   1ca98:	ldr	r3, [sp, #76]	; 0x4c
   1ca9c:	cmp	r0, #0
   1caa0:	str	r0, [r3]
   1caa4:	beq	19ca8 <_start@@Base+0x72ac>
   1caa8:	mov	r0, fp
   1caac:	b	19cbc <_start@@Base+0x72c0>
	...
   1cab8:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1cabc:	strdeq	r0, [r2], -r8
   1cac0:	andeq	r0, r2, ip, asr r7
   1cac4:	andeq	r0, r2, ip, lsr #11
   1cac8:	andeq	r0, r2, ip, lsl #6
   1cacc:	andeq	r0, r2, r8, lsr #3
   1cad0:	andeq	r0, r2, r4, lsr #3
   1cad4:	ldr	r3, [pc, #-24]	; 1cac4 <_start@@Base+0xa0c8>
   1cad8:	mov	r1, r0
   1cadc:	add	r3, pc, r3
   1cae0:	str	r6, [sp]
   1cae4:	add	r3, r3, #224	; 0xe0
   1cae8:	mov	r2, fp
   1caec:	mov	r0, sl
   1caf0:	bl	13514 <_start@@Base+0xb18>
   1caf4:	cmp	fp, r0
   1caf8:	cmpne	r4, r0
   1cafc:	beq	1da54 <_start@@Base+0xb058>
   1cb00:	mov	r4, r0
   1cb04:	b	1c2f0 <_start@@Base+0x98f4>
   1cb08:	ldr	r3, [sl, #24]
   1cb0c:	cmp	r3, #0
   1cb10:	bne	1be4c <_start@@Base+0x9450>
   1cb14:	ldr	r0, [sl]
   1cb18:	bl	246dc <flatcc_builder_end_table@@Base>
   1cb1c:	cmp	r0, #0
   1cb20:	str	r0, [sp, #120]	; 0x78
   1cb24:	beq	1be4c <_start@@Base+0x9450>
   1cb28:	b	1be70 <_start@@Base+0x9474>
   1cb2c:	ldr	r9, [sp, #56]	; 0x38
   1cb30:	ldr	r3, [sl, #24]
   1cb34:	cmp	r3, #0
   1cb38:	bne	1b500 <_start@@Base+0x8b04>
   1cb3c:	ldr	r0, [sl]
   1cb40:	bl	246dc <flatcc_builder_end_table@@Base>
   1cb44:	cmp	r0, #0
   1cb48:	str	r0, [sp, #120]	; 0x78
   1cb4c:	beq	1b500 <_start@@Base+0x8b04>
   1cb50:	b	1b524 <_start@@Base+0x8b28>
   1cb54:	sub	r3, fp, r4
   1cb58:	cmp	r3, #2
   1cb5c:	bgt	1d72c <_start@@Base+0xad30>
   1cb60:	mov	r1, r4
   1cb64:	mov	r2, fp
   1cb68:	mov	r0, sl
   1cb6c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1cb70:	mov	r7, r0
   1cb74:	b	19c44 <_start@@Base+0x7248>
   1cb78:	mov	r1, r0
   1cb7c:	mov	r3, #7
   1cb80:	mov	r2, fp
   1cb84:	mov	r0, sl
   1cb88:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1cb8c:	mov	r7, r0
   1cb90:	b	1aa88 <_start@@Base+0x808c>
   1cb94:	sub	r3, fp, r7
   1cb98:	cmp	r3, #8
   1cb9c:	bgt	1d6a0 <_start@@Base+0xaca4>
   1cba0:	add	r7, r7, #8
   1cba4:	mov	r0, r7
   1cba8:	mov	r1, fp
   1cbac:	bl	12b28 <_start@@Base+0x12c>
   1cbb0:	mov	r0, #0
   1cbb4:	and	r1, r1, #-16777216	; 0xff000000
   1cbb8:	cmp	r1, #1627389952	; 0x61000000
   1cbbc:	cmpeq	r0, #0
   1cbc0:	bne	1d9b8 <_start@@Base+0xafbc>
   1cbc4:	sub	r3, fp, r7
   1cbc8:	cmp	r3, #1
   1cbcc:	ble	1db64 <_start@@Base+0xb168>
   1cbd0:	mov	r3, #1
   1cbd4:	mov	r2, fp
   1cbd8:	mov	r1, r7
   1cbdc:	mov	r0, sl
   1cbe0:	bl	18084 <_start@@Base+0x5688>
   1cbe4:	cmp	r7, r0
   1cbe8:	mov	r4, r0
   1cbec:	beq	1db68 <_start@@Base+0xb16c>
   1cbf0:	add	r5, sp, #152	; 0x98
   1cbf4:	mov	r3, #0
   1cbf8:	str	r3, [r5, #-8]!
   1cbfc:	mov	r1, r0
   1cc00:	mov	r2, fp
   1cc04:	mov	r3, r5
   1cc08:	mov	r0, sl
   1cc0c:	bl	13094 <_start@@Base+0x698>
   1cc10:	cmp	r0, r4
   1cc14:	mov	r7, r0
   1cc18:	beq	1dbd8 <_start@@Base+0xb1dc>
   1cc1c:	ldr	r3, [sp, #144]	; 0x90
   1cc20:	cmp	r3, #0
   1cc24:	bne	1cc34 <_start@@Base+0xa238>
   1cc28:	ldr	r3, [sl, #8]
   1cc2c:	tst	r3, #2
   1cc30:	beq	19c44 <_start@@Base+0x7248>
   1cc34:	mov	r3, #4
   1cc38:	mov	r2, r3
   1cc3c:	mov	r1, #21
   1cc40:	ldr	r0, [sl]
   1cc44:	bl	25728 <flatcc_builder_table_add@@Base>
   1cc48:	cmp	r0, #0
   1cc4c:	beq	1dc8c <_start@@Base+0xb290>
   1cc50:	ldr	r3, [sp, #144]	; 0x90
   1cc54:	str	r3, [r0]
   1cc58:	b	19c44 <_start@@Base+0x7248>
   1cc5c:	mov	r3, #8
   1cc60:	mov	r2, fp
   1cc64:	mov	r1, r7
   1cc68:	mov	r0, sl
   1cc6c:	bl	18084 <_start@@Base+0x5688>
   1cc70:	cmp	r7, r0
   1cc74:	mov	r4, r0
   1cc78:	beq	1ade0 <_start@@Base+0x83e4>
   1cc7c:	add	r5, sp, #152	; 0x98
   1cc80:	mov	r3, #0
   1cc84:	str	r3, [r5, #-8]!
   1cc88:	mov	r1, r0
   1cc8c:	mov	r2, fp
   1cc90:	mov	r3, r5
   1cc94:	mov	r0, sl
   1cc98:	bl	1321c <_start@@Base+0x820>
   1cc9c:	cmp	r0, r4
   1cca0:	mov	r7, r0
   1cca4:	beq	1da20 <_start@@Base+0xb024>
   1cca8:	ldr	r3, [sp, #144]	; 0x90
   1ccac:	cmp	r3, #0
   1ccb0:	bne	1ccc0 <_start@@Base+0xa2c4>
   1ccb4:	ldr	r3, [sl, #8]
   1ccb8:	tst	r3, #2
   1ccbc:	beq	19c44 <_start@@Base+0x7248>
   1ccc0:	mov	r3, #4
   1ccc4:	mov	r2, r3
   1ccc8:	mov	r1, #16
   1cccc:	ldr	r0, [sl]
   1ccd0:	bl	25728 <flatcc_builder_table_add@@Base>
   1ccd4:	cmp	r0, #0
   1ccd8:	beq	1dc8c <_start@@Base+0xb290>
   1ccdc:	ldr	r3, [sp, #144]	; 0x90
   1cce0:	str	r3, [r0]
   1cce4:	b	19c44 <_start@@Base+0x7248>
   1cce8:	mov	r1, r0
   1ccec:	str	r6, [sp]
   1ccf0:	ldr	r3, [sp, #104]	; 0x68
   1ccf4:	mov	r2, fp
   1ccf8:	mov	r0, sl
   1ccfc:	bl	13514 <_start@@Base+0xb18>
   1cd00:	cmp	fp, r0
   1cd04:	cmpne	r4, r0
   1cd08:	beq	1da54 <_start@@Base+0xb058>
   1cd0c:	mov	r4, r0
   1cd10:	b	1c44c <_start@@Base+0x9a50>
   1cd14:	mov	r3, #7
   1cd18:	mov	r2, fp
   1cd1c:	mov	r1, r4
   1cd20:	mov	r0, sl
   1cd24:	bl	18084 <_start@@Base+0x5688>
   1cd28:	cmp	r4, r0
   1cd2c:	mov	r7, r0
   1cd30:	beq	1dc38 <_start@@Base+0xb23c>
   1cd34:	mov	r2, #8
   1cd38:	mov	r1, r2
   1cd3c:	mvn	r3, #-536870912	; 0xe0000000
   1cd40:	ldr	r0, [sl]
   1cd44:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1cd48:	cmp	r0, #0
   1cd4c:	bne	1a648 <_start@@Base+0x7c4c>
   1cd50:	mov	r1, r7
   1cd54:	mov	r3, r9
   1cd58:	mov	r2, fp
   1cd5c:	mov	r0, sl
   1cd60:	bl	13460 <_start@@Base+0xa64>
   1cd64:	ldr	r3, [sp, #116]	; 0x74
   1cd68:	cmp	r3, #0
   1cd6c:	mov	r7, r0
   1cd70:	beq	1ce18 <_start@@Base+0xa41c>
   1cd74:	ldr	r3, [pc, #-692]	; 1cac8 <_start@@Base+0xa0cc>
   1cd78:	add	r5, sp, #144	; 0x90
   1cd7c:	add	r3, pc, r3
   1cd80:	add	r8, r3, #504	; 0x1f8
   1cd84:	b	1cdb4 <_start@@Base+0xa3b8>
   1cd88:	ldrd	r6, [sp, #144]	; 0x90
   1cd8c:	mov	r1, r0
   1cd90:	mov	r3, r9
   1cd94:	strd	r6, [r4]
   1cd98:	mov	r2, fp
   1cd9c:	mov	r0, sl
   1cda0:	bl	14d08 <_start@@Base+0x230c>
   1cda4:	ldr	r3, [sp, #116]	; 0x74
   1cda8:	cmp	r3, #0
   1cdac:	mov	r7, r0
   1cdb0:	beq	1ce18 <_start@@Base+0xa41c>
   1cdb4:	mov	r2, #0
   1cdb8:	mov	r3, #0
   1cdbc:	mov	r1, #1
   1cdc0:	ldr	r0, [sl]
   1cdc4:	strd	r2, [sp, #144]	; 0x90
   1cdc8:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1cdcc:	mov	r1, r7
   1cdd0:	mov	r3, r5
   1cdd4:	mov	r2, fp
   1cdd8:	subs	r4, r0, #0
   1cddc:	mov	r0, sl
   1cde0:	beq	1a648 <_start@@Base+0x7c4c>
   1cde4:	bl	132e4 <_start@@Base+0x8e8>
   1cde8:	cmp	r0, r7
   1cdec:	bne	1cd88 <_start@@Base+0xa38c>
   1cdf0:	str	r5, [sp]
   1cdf4:	mov	r3, r8
   1cdf8:	mov	r2, fp
   1cdfc:	mov	r1, r7
   1ce00:	mov	r0, sl
   1ce04:	bl	148c4 <_start@@Base+0x1ec8>
   1ce08:	cmp	fp, r0
   1ce0c:	cmpne	r0, r7
   1ce10:	bne	1cd88 <_start@@Base+0xa38c>
   1ce14:	b	1c778 <_start@@Base+0x9d7c>
   1ce18:	ldr	r0, [sl]
   1ce1c:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1ce20:	cmp	r0, #0
   1ce24:	str	r0, [sp, #120]	; 0x78
   1ce28:	beq	1a648 <_start@@Base+0x7c4c>
   1ce2c:	mov	r1, #32
   1ce30:	ldr	r0, [sl]
   1ce34:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1ce38:	cmp	r0, #0
   1ce3c:	beq	1a648 <_start@@Base+0x7c4c>
   1ce40:	ldr	r3, [sp, #120]	; 0x78
   1ce44:	str	r3, [r0]
   1ce48:	b	19c44 <_start@@Base+0x7248>
   1ce4c:	mov	r1, r0
   1ce50:	mov	r3, #8
   1ce54:	mov	r2, fp
   1ce58:	mov	r0, sl
   1ce5c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1ce60:	mov	r7, r0
   1ce64:	mov	r3, #0
   1ce68:	cmp	r4, r7
   1ce6c:	strb	r3, [sp, #132]	; 0x84
   1ce70:	bne	1bb28 <_start@@Base+0x912c>
   1ce74:	b	1c788 <_start@@Base+0x9d8c>
   1ce78:	mov	r3, #7
   1ce7c:	mov	r2, fp
   1ce80:	mov	r1, r4
   1ce84:	mov	r0, sl
   1ce88:	bl	18084 <_start@@Base+0x5688>
   1ce8c:	cmp	r4, r0
   1ce90:	mov	r7, r0
   1ce94:	beq	1dc50 <_start@@Base+0xb254>
   1ce98:	mvn	r3, #-536870912	; 0xe0000000
   1ce9c:	mov	r2, #4
   1cea0:	mov	r1, #8
   1cea4:	ldr	r0, [sl]
   1cea8:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1ceac:	cmp	r0, #0
   1ceb0:	bne	1a648 <_start@@Base+0x7c4c>
   1ceb4:	mov	r1, r7
   1ceb8:	mov	r3, r9
   1cebc:	mov	r2, fp
   1cec0:	mov	r0, sl
   1cec4:	bl	13460 <_start@@Base+0xa64>
   1cec8:	ldr	r3, [sp, #116]	; 0x74
   1cecc:	cmp	r3, #0
   1ced0:	mov	r7, r0
   1ced4:	beq	1d150 <_start@@Base+0xa754>
   1ced8:	ldr	r2, [pc, #-1044]	; 1cacc <_start@@Base+0xa0d0>
   1cedc:	ldr	r3, [pc, #-1044]	; 1cad0 <_start@@Base+0xa0d4>
   1cee0:	add	r2, pc, r2
   1cee4:	add	r3, pc, r3
   1cee8:	mov	r8, #1
   1ceec:	add	r2, r2, #300	; 0x12c
   1cef0:	add	r3, r3, #288	; 0x120
   1cef4:	str	r2, [sp, #100]	; 0x64
   1cef8:	str	r3, [sp, #104]	; 0x68
   1cefc:	str	r9, [sp, #72]	; 0x48
   1cf00:	mov	r1, r8
   1cf04:	ldr	r0, [sl]
   1cf08:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1cf0c:	subs	r3, r0, #0
   1cf10:	str	r3, [sp, #56]	; 0x38
   1cf14:	beq	1a648 <_start@@Base+0x7c4c>
   1cf18:	add	r9, sp, #136	; 0x88
   1cf1c:	mov	r3, r9
   1cf20:	mov	r1, r7
   1cf24:	mov	r2, fp
   1cf28:	mov	r0, sl
   1cf2c:	bl	133ac <_start@@Base+0x9b0>
   1cf30:	ldr	r3, [sp, #136]	; 0x88
   1cf34:	cmp	r3, #0
   1cf38:	mov	r4, r0
   1cf3c:	bne	1cf9c <_start@@Base+0xa5a0>
   1cf40:	b	1d128 <_start@@Base+0xa72c>
   1cf44:	add	r3, pc, #844	; 0x34c
   1cf48:	ldrd	r2, [r3]
   1cf4c:	cmp	r1, r3
   1cf50:	cmpeq	r0, r2
   1cf54:	bne	1cf64 <_start@@Base+0xa568>
   1cf58:	sub	r3, fp, r4
   1cf5c:	cmp	r3, #8
   1cf60:	bgt	1d060 <_start@@Base+0xa664>
   1cf64:	mov	r1, r4
   1cf68:	mov	r2, fp
   1cf6c:	mov	r0, sl
   1cf70:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf74:	mov	r4, r0
   1cf78:	mov	r1, r4
   1cf7c:	mov	r3, r9
   1cf80:	mov	r2, fp
   1cf84:	mov	r0, sl
   1cf88:	bl	14e8c <_start@@Base+0x2490>
   1cf8c:	ldr	r3, [sp, #136]	; 0x88
   1cf90:	cmp	r3, #0
   1cf94:	mov	r4, r0
   1cf98:	beq	1d128 <_start@@Base+0xa72c>
   1cf9c:	cmp	fp, r4
   1cfa0:	beq	1d0bc <_start@@Base+0xa6c0>
   1cfa4:	ldrb	r3, [r4]
   1cfa8:	cmp	r3, #34	; 0x22
   1cfac:	moveq	r3, #0
   1cfb0:	addeq	r4, r4, #1
   1cfb4:	streq	r3, [sl, #12]
   1cfb8:	beq	1cfc8 <_start@@Base+0xa5cc>
   1cfbc:	cmp	r3, #46	; 0x2e
   1cfc0:	strne	r8, [sl, #12]
   1cfc4:	beq	1d0f4 <_start@@Base+0xa6f8>
   1cfc8:	mov	r1, fp
   1cfcc:	mov	r0, r4
   1cfd0:	bl	12b28 <_start@@Base+0x12c>
   1cfd4:	ldr	r3, [pc, #708]	; 1d2a0 <_start@@Base+0xa8a4>
   1cfd8:	ldr	r7, [pc, #708]	; 1d2a4 <_start@@Base+0xa8a8>
   1cfdc:	mov	r2, #0
   1cfe0:	mov	r6, #0
   1cfe4:	and	r3, r3, r1
   1cfe8:	and	r2, r2, r0
   1cfec:	cmp	r3, r7
   1cff0:	cmpeq	r2, r6
   1cff4:	bne	1cf44 <_start@@Base+0xa548>
   1cff8:	sub	r3, fp, r4
   1cffc:	cmp	r3, #2
   1d000:	ble	1cf64 <_start@@Base+0xa568>
   1d004:	mov	r3, #2
   1d008:	mov	r2, fp
   1d00c:	mov	r1, r4
   1d010:	mov	r0, sl
   1d014:	bl	18084 <_start@@Base+0x5688>
   1d018:	cmp	r0, r4
   1d01c:	mov	r5, r0
   1d020:	beq	1cf64 <_start@@Base+0xa568>
   1d024:	add	r6, sp, #152	; 0x98
   1d028:	mov	r3, #0
   1d02c:	str	r3, [r6, #-8]!
   1d030:	mov	r1, r0
   1d034:	mov	r2, fp
   1d038:	mov	r3, r6
   1d03c:	mov	r0, sl
   1d040:	bl	13094 <_start@@Base+0x698>
   1d044:	cmp	r5, r0
   1d048:	mov	r4, r0
   1d04c:	beq	1d1b0 <_start@@Base+0xa7b4>
   1d050:	ldr	r2, [sp, #56]	; 0x38
   1d054:	ldr	r3, [sp, #144]	; 0x90
   1d058:	str	r3, [r2]
   1d05c:	b	1cf78 <_start@@Base+0xa57c>
   1d060:	mov	r3, #8
   1d064:	mov	r2, fp
   1d068:	mov	r1, r4
   1d06c:	mov	r0, sl
   1d070:	bl	18084 <_start@@Base+0x5688>
   1d074:	cmp	r0, r4
   1d078:	mov	r5, r0
   1d07c:	beq	1cf64 <_start@@Base+0xa568>
   1d080:	add	r6, sp, #152	; 0x98
   1d084:	mov	r3, #0
   1d088:	str	r3, [r6, #-8]!
   1d08c:	mov	r1, r0
   1d090:	mov	r2, fp
   1d094:	mov	r3, r6
   1d098:	mov	r0, sl
   1d09c:	bl	13094 <_start@@Base+0x698>
   1d0a0:	cmp	r5, r0
   1d0a4:	mov	r4, r0
   1d0a8:	beq	1d184 <_start@@Base+0xa788>
   1d0ac:	ldr	r2, [sp, #56]	; 0x38
   1d0b0:	ldr	r3, [sp, #144]	; 0x90
   1d0b4:	str	r3, [r2, #4]
   1d0b8:	b	1cf78 <_start@@Base+0xa57c>
   1d0bc:	mov	r1, fp
   1d0c0:	mov	r0, fp
   1d0c4:	bl	12b28 <_start@@Base+0x12c>
   1d0c8:	ldr	r3, [pc, #464]	; 1d2a0 <_start@@Base+0xa8a4>
   1d0cc:	ldr	r5, [pc, #464]	; 1d2a4 <_start@@Base+0xa8a8>
   1d0d0:	mov	r2, #0
   1d0d4:	mov	r4, #0
   1d0d8:	and	r3, r3, r1
   1d0dc:	and	r2, r2, r0
   1d0e0:	cmp	r3, r5
   1d0e4:	cmpeq	r2, r4
   1d0e8:	mov	r4, fp
   1d0ec:	bne	1cf44 <_start@@Base+0xa548>
   1d0f0:	b	1cf64 <_start@@Base+0xa568>
   1d0f4:	mov	r1, r4
   1d0f8:	mov	r3, #5
   1d0fc:	mov	r2, fp
   1d100:	mov	r0, sl
   1d104:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1d108:	mov	r4, r0
   1d10c:	b	1cfc8 <_start@@Base+0xa5cc>
   1d110:	mov	r1, r0
   1d114:	mov	r3, #33	; 0x21
   1d118:	mov	r2, fp
   1d11c:	mov	r0, sl
   1d120:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1d124:	mov	r4, r0
   1d128:	ldr	r3, [sp, #72]	; 0x48
   1d12c:	mov	r1, r4
   1d130:	mov	r2, fp
   1d134:	mov	r0, sl
   1d138:	bl	14d08 <_start@@Base+0x230c>
   1d13c:	ldr	r3, [sp, #116]	; 0x74
   1d140:	cmp	r3, #0
   1d144:	mov	r7, r0
   1d148:	bne	1cf00 <_start@@Base+0xa504>
   1d14c:	ldr	r9, [sp, #72]	; 0x48
   1d150:	ldr	r0, [sl]
   1d154:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1d158:	cmp	r0, #0
   1d15c:	str	r0, [sp, #120]	; 0x78
   1d160:	beq	1a648 <_start@@Base+0x7c4c>
   1d164:	mov	r1, #29
   1d168:	ldr	r0, [sl]
   1d16c:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d170:	cmp	r0, #0
   1d174:	beq	1a648 <_start@@Base+0x7c4c>
   1d178:	ldr	r3, [sp, #120]	; 0x78
   1d17c:	str	r3, [r0]
   1d180:	b	19c44 <_start@@Base+0x7248>
   1d184:	mov	r1, r0
   1d188:	str	r6, [sp]
   1d18c:	ldr	r3, [sp, #100]	; 0x64
   1d190:	mov	r2, fp
   1d194:	mov	r0, sl
   1d198:	bl	13d7c <_start@@Base+0x1380>
   1d19c:	cmp	fp, r0
   1d1a0:	cmpne	r4, r0
   1d1a4:	beq	1d110 <_start@@Base+0xa714>
   1d1a8:	mov	r4, r0
   1d1ac:	b	1d0ac <_start@@Base+0xa6b0>
   1d1b0:	mov	r1, r0
   1d1b4:	str	r6, [sp]
   1d1b8:	ldr	r3, [sp, #104]	; 0x68
   1d1bc:	mov	r2, fp
   1d1c0:	mov	r0, sl
   1d1c4:	bl	13d7c <_start@@Base+0x1380>
   1d1c8:	cmp	fp, r0
   1d1cc:	cmpne	r4, r0
   1d1d0:	beq	1d110 <_start@@Base+0xa714>
   1d1d4:	mov	r4, r0
   1d1d8:	b	1d050 <_start@@Base+0xa654>
   1d1dc:	ldr	r0, [sl]
   1d1e0:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1d1e4:	cmp	r0, #0
   1d1e8:	str	r0, [sp, #120]	; 0x78
   1d1ec:	beq	1a648 <_start@@Base+0x7c4c>
   1d1f0:	mov	r1, #5
   1d1f4:	ldr	r0, [sl]
   1d1f8:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d1fc:	cmp	r0, #0
   1d200:	beq	1a648 <_start@@Base+0x7c4c>
   1d204:	ldr	r3, [sp, #120]	; 0x78
   1d208:	str	r3, [r0]
   1d20c:	b	19c44 <_start@@Base+0x7248>
   1d210:	mov	r4, r0
   1d214:	mov	r1, r4
   1d218:	mov	r2, fp
   1d21c:	mov	r0, sl
   1d220:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d224:	mov	r7, r0
   1d228:	b	19c44 <_start@@Base+0x7248>
   1d22c:	mov	r1, r0
   1d230:	str	r6, [sp]
   1d234:	ldr	r3, [sp, #108]	; 0x6c
   1d238:	mov	r2, fp
   1d23c:	mov	r0, sl
   1d240:	bl	13514 <_start@@Base+0xb18>
   1d244:	cmp	fp, r0
   1d248:	cmpne	r4, r0
   1d24c:	beq	1da54 <_start@@Base+0xb058>
   1d250:	mov	r4, r0
   1d254:	b	1c548 <_start@@Base+0x9b4c>
   1d258:	ldr	r0, [sl]
   1d25c:	bl	24b4c <flatcc_builder_end_offset_vector@@Base>
   1d260:	cmp	r0, #0
   1d264:	str	r0, [sp, #120]	; 0x78
   1d268:	beq	1a648 <_start@@Base+0x7c4c>
   1d26c:	mov	r1, #11
   1d270:	ldr	r0, [sl]
   1d274:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d278:	cmp	r0, #0
   1d27c:	beq	1a648 <_start@@Base+0x7c4c>
   1d280:	ldr	r3, [sp, #120]	; 0x78
   1d284:	str	r3, [r0]
   1d288:	b	19c44 <_start@@Base+0x7248>
   1d28c:	mov	r9, fp
   1d290:	mov	fp, r4
   1d294:	b	19ca8 <_start@@Base+0x72ac>
   1d298:	cmnvs	lr, r5, ror #6
   1d29c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1d2a0:			; <UNDEFINED> instruction: 0xffff0000
   1d2a4:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1d2a8:	muleq	r1, r8, sl
   1d2ac:	andeq	pc, r1, r8, asr #20
   1d2b0:	andeq	pc, r1, r4, lsl sl	; <UNPREDICTABLE>
   1d2b4:	andeq	pc, r1, r8, ror #15
   1d2b8:	andeq	pc, r1, r8, lsr #14
   1d2bc:	andeq	pc, r1, r0, ror #12
   1d2c0:	andeq	pc, r1, r4, lsl #12
   1d2c4:			; <UNDEFINED> instruction: 0x0001f5b0
   1d2c8:	andeq	pc, r1, ip, ror r5	; <UNPREDICTABLE>
   1d2cc:	andeq	pc, r1, r8, lsr #8
   1d2d0:	mov	r3, #4
   1d2d4:	mov	r2, fp
   1d2d8:	mov	r1, r4
   1d2dc:	mov	r0, sl
   1d2e0:	bl	18084 <_start@@Base+0x5688>
   1d2e4:	cmp	r4, r0
   1d2e8:	mov	r7, r0
   1d2ec:	beq	1dc40 <_start@@Base+0xb244>
   1d2f0:	cmp	fp, r0
   1d2f4:	beq	1d304 <_start@@Base+0xa908>
   1d2f8:	ldrb	r3, [r0]
   1d2fc:	cmp	r3, #91	; 0x5b
   1d300:	beq	1d858 <_start@@Base+0xae5c>
   1d304:	mov	r3, #0
   1d308:	mov	r2, r3
   1d30c:	mov	r1, r3
   1d310:	ldr	r0, [sl]
   1d314:	bl	22eb0 <flatcc_builder_start_buffer@@Base>
   1d318:	cmp	r0, #0
   1d31c:	bne	1a648 <_start@@Base+0x7c4c>
   1d320:	mov	r1, r7
   1d324:	add	r3, sp, #120	; 0x78
   1d328:	mov	r2, fp
   1d32c:	mov	r0, sl
   1d330:	bl	19aa8 <_start@@Base+0x70ac>
   1d334:	ldr	r1, [sp, #120]	; 0x78
   1d338:	cmp	r1, #0
   1d33c:	mov	r7, r0
   1d340:	beq	1a648 <_start@@Base+0x7c4c>
   1d344:	ldr	r0, [sl]
   1d348:	bl	22f68 <flatcc_builder_end_buffer@@Base>
   1d34c:	str	r0, [sp, #120]	; 0x78
   1d350:	cmp	r0, #0
   1d354:	beq	1a648 <_start@@Base+0x7c4c>
   1d358:	mov	r1, #13
   1d35c:	ldr	r0, [sl]
   1d360:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d364:	cmp	r0, #0
   1d368:	beq	1a648 <_start@@Base+0x7c4c>
   1d36c:	ldr	r3, [sp, #120]	; 0x78
   1d370:	str	r3, [r0]
   1d374:	b	19c44 <_start@@Base+0x7248>
   1d378:	mov	r1, r0
   1d37c:	mov	r3, #7
   1d380:	mov	r2, fp
   1d384:	mov	r0, sl
   1d388:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1d38c:	mov	r7, r0
   1d390:	b	1ce64 <_start@@Base+0xa468>
   1d394:	mov	r1, r7
   1d398:	mov	r2, fp
   1d39c:	mov	r0, sl
   1d3a0:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d3a4:	mov	r7, r0
   1d3a8:	b	19c44 <_start@@Base+0x7248>
   1d3ac:	mov	r3, #8
   1d3b0:	mov	r2, fp
   1d3b4:	mov	r1, r7
   1d3b8:	mov	r0, sl
   1d3bc:	bl	18084 <_start@@Base+0x5688>
   1d3c0:	cmp	r7, r0
   1d3c4:	mov	r5, r0
   1d3c8:	beq	1ad14 <_start@@Base+0x8318>
   1d3cc:	mov	r0, #0
   1d3d0:	mov	r1, #0
   1d3d4:	add	r4, sp, #152	; 0x98
   1d3d8:	mov	r2, fp
   1d3dc:	strd	r0, [r4, #-8]!
   1d3e0:	mov	r1, r5
   1d3e4:	mov	r3, r4
   1d3e8:	mov	r0, sl
   1d3ec:	bl	132e4 <_start@@Base+0x8e8>
   1d3f0:	cmp	r0, r5
   1d3f4:	mov	r7, r0
   1d3f8:	beq	1db04 <_start@@Base+0xb108>
   1d3fc:	ldrd	r2, [sp, #144]	; 0x90
   1d400:	orrs	r3, r2, r3
   1d404:	bne	1d414 <_start@@Base+0xaa18>
   1d408:	ldr	r3, [sl, #8]
   1d40c:	tst	r3, #2
   1d410:	beq	19c44 <_start@@Base+0x7248>
   1d414:	mov	r3, #8
   1d418:	mov	r2, r3
   1d41c:	mov	r1, #18
   1d420:	ldr	r0, [sl]
   1d424:	bl	25728 <flatcc_builder_table_add@@Base>
   1d428:	cmp	r0, #0
   1d42c:	beq	1dc8c <_start@@Base+0xb290>
   1d430:	ldrd	r2, [sp, #144]	; 0x90
   1d434:	strd	r2, [r0]
   1d438:	b	19c44 <_start@@Base+0x7248>
   1d43c:	ldr	r0, [sl]
   1d440:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1d444:	cmp	r0, #0
   1d448:	str	r0, [sp, #120]	; 0x78
   1d44c:	beq	1a648 <_start@@Base+0x7c4c>
   1d450:	mov	r1, #33	; 0x21
   1d454:	ldr	r0, [sl]
   1d458:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d45c:	cmp	r0, #0
   1d460:	beq	1a648 <_start@@Base+0x7c4c>
   1d464:	ldr	r3, [sp, #120]	; 0x78
   1d468:	str	r3, [r0]
   1d46c:	b	19c44 <_start@@Base+0x7248>
   1d470:	mov	r1, r0
   1d474:	str	r4, [sp]
   1d478:	ldr	r3, [sp, #56]	; 0x38
   1d47c:	mov	r2, fp
   1d480:	mov	r0, sl
   1d484:	bl	148c4 <_start@@Base+0x1ec8>
   1d488:	cmp	fp, r0
   1d48c:	cmpne	r7, r0
   1d490:	beq	1be48 <_start@@Base+0x944c>
   1d494:	mov	r7, r0
   1d498:	b	1b458 <_start@@Base+0x8a5c>
   1d49c:	mov	r1, r7
   1d4a0:	mov	r3, #5
   1d4a4:	mov	r2, fp
   1d4a8:	mov	r0, sl
   1d4ac:	bl	18084 <_start@@Base+0x5688>
   1d4b0:	cmp	r7, r0
   1d4b4:	mov	r1, r0
   1d4b8:	beq	1aed0 <_start@@Base+0x84d4>
   1d4bc:	add	r3, sp, #120	; 0x78
   1d4c0:	mov	r2, fp
   1d4c4:	mov	r0, sl
   1d4c8:	bl	17da8 <_start@@Base+0x53ac>
   1d4cc:	ldr	r3, [sp, #120]	; 0x78
   1d4d0:	cmp	r3, #0
   1d4d4:	mov	r7, r0
   1d4d8:	beq	1a648 <_start@@Base+0x7c4c>
   1d4dc:	mov	r1, #34	; 0x22
   1d4e0:	ldr	r0, [sl]
   1d4e4:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d4e8:	cmp	r0, #0
   1d4ec:	beq	1a648 <_start@@Base+0x7c4c>
   1d4f0:	ldr	r3, [sp, #120]	; 0x78
   1d4f4:	str	r3, [r0]
   1d4f8:	b	19c44 <_start@@Base+0x7248>
   1d4fc:	ldr	r0, [sl]
   1d500:	bl	24b4c <flatcc_builder_end_offset_vector@@Base>
   1d504:	cmp	r0, #0
   1d508:	str	r0, [sp, #120]	; 0x78
   1d50c:	beq	1a648 <_start@@Base+0x7c4c>
   1d510:	mov	r1, #10
   1d514:	ldr	r0, [sl]
   1d518:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d51c:	cmp	r0, #0
   1d520:	beq	1a648 <_start@@Base+0x7c4c>
   1d524:	ldr	r3, [sp, #120]	; 0x78
   1d528:	str	r3, [r0]
   1d52c:	b	19c44 <_start@@Base+0x7248>
   1d530:	mov	r3, #8
   1d534:	mov	r2, fp
   1d538:	mov	r1, r7
   1d53c:	mov	r0, sl
   1d540:	bl	18084 <_start@@Base+0x5688>
   1d544:	cmp	r7, r0
   1d548:	mov	r4, r0
   1d54c:	beq	1dc98 <_start@@Base+0xb29c>
   1d550:	mov	r2, #0
   1d554:	mov	r3, #0
   1d558:	mov	r1, #0
   1d55c:	cmp	fp, r0
   1d560:	strd	r2, [sp, #136]	; 0x88
   1d564:	strd	r2, [sp, #144]	; 0x90
   1d568:	str	r1, [sp, #132]	; 0x84
   1d56c:	beq	1da7c <_start@@Base+0xb080>
   1d570:	add	r3, sp, #144	; 0x90
   1d574:	str	r3, [sp]
   1d578:	mov	r1, r0
   1d57c:	add	r3, sp, #132	; 0x84
   1d580:	mov	r2, fp
   1d584:	mov	r0, sl
   1d588:	bl	296fc <flatcc_json_parser_integer@@Base>
   1d58c:	cmp	r4, r0
   1d590:	mov	r7, r0
   1d594:	beq	1da7c <_start@@Base+0xb080>
   1d598:	ldr	r3, [sp, #132]	; 0x84
   1d59c:	cmp	r3, #0
   1d5a0:	bne	1d9d0 <_start@@Base+0xafd4>
   1d5a4:	ldrd	r2, [sp, #144]	; 0x90
   1d5a8:	strd	r2, [sp, #136]	; 0x88
   1d5ac:	orrs	r3, r2, r3
   1d5b0:	bne	1d5c0 <_start@@Base+0xabc4>
   1d5b4:	ldr	r3, [sl, #8]
   1d5b8:	tst	r3, #2
   1d5bc:	beq	19c44 <_start@@Base+0x7248>
   1d5c0:	mov	r3, #8
   1d5c4:	mov	r2, r3
   1d5c8:	mov	r1, #19
   1d5cc:	ldr	r0, [sl]
   1d5d0:	bl	25728 <flatcc_builder_table_add@@Base>
   1d5d4:	cmp	r0, #0
   1d5d8:	beq	1a648 <_start@@Base+0x7c4c>
   1d5dc:	ldrd	r2, [sp, #136]	; 0x88
   1d5e0:	strd	r2, [r0]
   1d5e4:	b	19c44 <_start@@Base+0x7248>
   1d5e8:	ldr	r3, [pc, #-840]	; 1d2a8 <_start@@Base+0xa8ac>
   1d5ec:	mov	r1, r0
   1d5f0:	add	r3, pc, r3
   1d5f4:	str	r4, [sp]
   1d5f8:	add	r3, r3, #360	; 0x168
   1d5fc:	mov	r2, fp
   1d600:	mov	r0, sl
   1d604:	bl	13514 <_start@@Base+0xb18>
   1d608:	cmp	fp, r0
   1d60c:	cmpne	r7, r0
   1d610:	beq	1c778 <_start@@Base+0x9d7c>
   1d614:	mov	r7, r0
   1d618:	b	1c870 <_start@@Base+0x9e74>
   1d61c:	mov	r4, r0
   1d620:	mov	r1, r4
   1d624:	mov	r2, fp
   1d628:	mov	r0, sl
   1d62c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d630:	mov	r7, r0
   1d634:	b	19c44 <_start@@Base+0x7248>
   1d638:	ldr	r3, [pc, #-916]	; 1d2ac <_start@@Base+0xa8b0>
   1d63c:	mov	r1, r0
   1d640:	add	r3, pc, r3
   1d644:	str	r4, [sp]
   1d648:	add	r3, r3, #160	; 0xa0
   1d64c:	mov	r2, fp
   1d650:	mov	r0, sl
   1d654:	bl	14674 <_start@@Base+0x1c78>
   1d658:	cmp	fp, r0
   1d65c:	cmpne	r7, r0
   1d660:	beq	1bc50 <_start@@Base+0x9254>
   1d664:	mov	r7, r0
   1d668:	b	1b158 <_start@@Base+0x875c>
   1d66c:	ldr	r3, [pc, #-964]	; 1d2b0 <_start@@Base+0xa8b4>
   1d670:	mov	r1, r0
   1d674:	add	r3, pc, r3
   1d678:	str	r4, [sp]
   1d67c:	add	r3, r3, #348	; 0x15c
   1d680:	mov	r2, fp
   1d684:	mov	r0, sl
   1d688:	bl	13514 <_start@@Base+0xb18>
   1d68c:	cmp	fp, r0
   1d690:	cmpne	r7, r0
   1d694:	beq	1c778 <_start@@Base+0x9d7c>
   1d698:	mov	r7, r0
   1d69c:	b	1b1e4 <_start@@Base+0x87e8>
   1d6a0:	mov	r3, #8
   1d6a4:	mov	r2, fp
   1d6a8:	mov	r1, r7
   1d6ac:	mov	r0, sl
   1d6b0:	bl	18084 <_start@@Base+0x5688>
   1d6b4:	cmp	r7, r0
   1d6b8:	mov	r5, r0
   1d6bc:	beq	1cba0 <_start@@Base+0xa1a4>
   1d6c0:	add	r4, sp, #152	; 0x98
   1d6c4:	mov	r3, #0
   1d6c8:	str	r3, [r4, #-8]!
   1d6cc:	mov	r1, r0
   1d6d0:	mov	r2, fp
   1d6d4:	mov	r3, r4
   1d6d8:	mov	r0, sl
   1d6dc:	bl	13094 <_start@@Base+0x698>
   1d6e0:	cmp	r0, r5
   1d6e4:	mov	r7, r0
   1d6e8:	beq	1dad0 <_start@@Base+0xb0d4>
   1d6ec:	ldr	r3, [sp, #144]	; 0x90
   1d6f0:	cmp	r3, #0
   1d6f4:	bne	1d704 <_start@@Base+0xad08>
   1d6f8:	ldr	r3, [sl, #8]
   1d6fc:	tst	r3, #2
   1d700:	beq	19c44 <_start@@Base+0x7248>
   1d704:	mov	r3, #4
   1d708:	mov	r2, r3
   1d70c:	mov	r1, #17
   1d710:	ldr	r0, [sl]
   1d714:	bl	25728 <flatcc_builder_table_add@@Base>
   1d718:	cmp	r0, #0
   1d71c:	beq	1dc8c <_start@@Base+0xb290>
   1d720:	ldr	r3, [sp, #144]	; 0x90
   1d724:	str	r3, [r0]
   1d728:	b	19c44 <_start@@Base+0x7248>
   1d72c:	mov	r3, #2
   1d730:	mov	r2, fp
   1d734:	mov	r1, r4
   1d738:	mov	r0, sl
   1d73c:	bl	18084 <_start@@Base+0x5688>
   1d740:	cmp	r4, r0
   1d744:	mov	r7, r0
   1d748:	beq	1dc04 <_start@@Base+0xb208>
   1d74c:	ldr	r0, [sl]
   1d750:	bl	23b00 <flatcc_builder_start_offset_vector@@Base>
   1d754:	cmp	r0, #0
   1d758:	bne	1a648 <_start@@Base+0x7c4c>
   1d75c:	mov	r1, r7
   1d760:	mov	r3, r9
   1d764:	mov	r2, fp
   1d768:	mov	r0, sl
   1d76c:	bl	13460 <_start@@Base+0xa64>
   1d770:	ldr	r3, [sp, #116]	; 0x74
   1d774:	cmp	r3, #0
   1d778:	mov	r7, r0
   1d77c:	beq	1d80c <_start@@Base+0xae10>
   1d780:	add	r4, sp, #120	; 0x78
   1d784:	mov	r5, #1
   1d788:	b	1d7c8 <_start@@Base+0xadcc>
   1d78c:	ldr	r0, [sl]
   1d790:	bl	23498 <flatcc_builder_extend_offset_vector@@Base>
   1d794:	mov	r3, r9
   1d798:	mov	r2, fp
   1d79c:	mov	r1, r7
   1d7a0:	subs	ip, r0, #0
   1d7a4:	mov	r0, sl
   1d7a8:	beq	1a648 <_start@@Base+0x7c4c>
   1d7ac:	ldr	lr, [sp, #120]	; 0x78
   1d7b0:	str	lr, [ip]
   1d7b4:	bl	14d08 <_start@@Base+0x230c>
   1d7b8:	ldr	r3, [sp, #116]	; 0x74
   1d7bc:	cmp	r3, #0
   1d7c0:	mov	r7, r0
   1d7c4:	beq	1d80c <_start@@Base+0xae10>
   1d7c8:	mov	r1, r7
   1d7cc:	mov	r3, r4
   1d7d0:	mov	r2, fp
   1d7d4:	mov	r0, sl
   1d7d8:	bl	29c08 <flatcc_json_parser_build_string@@Base>
   1d7dc:	ldr	r3, [sp, #120]	; 0x78
   1d7e0:	mov	r1, r5
   1d7e4:	cmp	r3, #0
   1d7e8:	mov	r7, r0
   1d7ec:	bne	1d78c <_start@@Base+0xad90>
   1d7f0:	b	1a648 <_start@@Base+0x7c4c>
   1d7f4:	mov	r1, r7
   1d7f8:	mov	r2, fp
   1d7fc:	mov	r0, sl
   1d800:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d804:	mov	r7, r0
   1d808:	b	19c44 <_start@@Base+0x7248>
   1d80c:	ldr	r0, [sl]
   1d810:	bl	24b4c <flatcc_builder_end_offset_vector@@Base>
   1d814:	cmp	r0, #0
   1d818:	str	r0, [sp, #120]	; 0x78
   1d81c:	beq	1a648 <_start@@Base+0x7c4c>
   1d820:	mov	r1, #28
   1d824:	ldr	r0, [sl]
   1d828:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1d82c:	cmp	r0, #0
   1d830:	beq	1a648 <_start@@Base+0x7c4c>
   1d834:	ldr	r3, [sp, #120]	; 0x78
   1d838:	str	r3, [r0]
   1d83c:	b	19c44 <_start@@Base+0x7248>
   1d840:	mov	r1, r7
   1d844:	mov	r2, fp
   1d848:	mov	r0, sl
   1d84c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d850:	mov	r7, r0
   1d854:	b	19c44 <_start@@Base+0x7248>
   1d858:	mov	r2, #1
   1d85c:	mov	r1, r2
   1d860:	mvn	r3, #0
   1d864:	ldr	r0, [sl]
   1d868:	bl	23a88 <flatcc_builder_start_vector@@Base>
   1d86c:	subs	r6, r0, #0
   1d870:	bne	1a648 <_start@@Base+0x7c4c>
   1d874:	mov	r1, r7
   1d878:	mov	r3, r9
   1d87c:	mov	r2, fp
   1d880:	mov	r0, sl
   1d884:	bl	13460 <_start@@Base+0xa64>
   1d888:	ldr	r3, [sp, #116]	; 0x74
   1d88c:	cmp	r3, #0
   1d890:	mov	r7, r0
   1d894:	beq	1d9a8 <_start@@Base+0xafac>
   1d898:	ldr	r3, [pc, #-1516]	; 1d2b4 <_start@@Base+0xa8b8>
   1d89c:	mov	r8, #1
   1d8a0:	add	r3, pc, r3
   1d8a4:	add	r3, r3, #480	; 0x1e0
   1d8a8:	str	r3, [sp, #56]	; 0x38
   1d8ac:	add	r5, sp, #144	; 0x90
   1d8b0:	b	1d8e0 <_start@@Base+0xaee4>
   1d8b4:	ldrb	r2, [sp, #144]	; 0x90
   1d8b8:	mov	r1, r0
   1d8bc:	mov	r3, r9
   1d8c0:	strb	r2, [r4]
   1d8c4:	mov	r0, sl
   1d8c8:	mov	r2, fp
   1d8cc:	bl	14d08 <_start@@Base+0x230c>
   1d8d0:	ldr	r3, [sp, #116]	; 0x74
   1d8d4:	cmp	r3, #0
   1d8d8:	mov	r7, r0
   1d8dc:	beq	1d9a8 <_start@@Base+0xafac>
   1d8e0:	mov	r1, r8
   1d8e4:	ldr	r0, [sl]
   1d8e8:	strb	r6, [sp, #144]	; 0x90
   1d8ec:	bl	23234 <flatcc_builder_extend_vector@@Base>
   1d8f0:	mov	r1, r7
   1d8f4:	mov	r3, r5
   1d8f8:	mov	r2, fp
   1d8fc:	subs	r4, r0, #0
   1d900:	mov	r0, sl
   1d904:	beq	1a648 <_start@@Base+0x7c4c>
   1d908:	bl	12fe0 <_start@@Base+0x5e4>
   1d90c:	cmp	r0, r7
   1d910:	bne	1d8b4 <_start@@Base+0xaeb8>
   1d914:	str	r5, [sp]
   1d918:	ldr	r3, [sp, #56]	; 0x38
   1d91c:	mov	r2, fp
   1d920:	mov	r1, r7
   1d924:	mov	r0, sl
   1d928:	bl	1443c <_start@@Base+0x1a40>
   1d92c:	cmp	fp, r0
   1d930:	cmpne	r0, r7
   1d934:	bne	1d8b4 <_start@@Base+0xaeb8>
   1d938:	b	1c778 <_start@@Base+0x9d7c>
   1d93c:	mov	r4, r0
   1d940:	mov	r1, r4
   1d944:	mov	r2, fp
   1d948:	mov	r0, sl
   1d94c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d950:	mov	r7, r0
   1d954:	b	19c44 <_start@@Base+0x7248>
   1d958:	ldr	r3, [pc, #-1704]	; 1d2b8 <_start@@Base+0xa8bc>
   1d95c:	mov	r1, r0
   1d960:	add	r3, pc, r3
   1d964:	str	r4, [sp]
   1d968:	add	r3, r3, #184	; 0xb8
   1d96c:	mov	r2, fp
   1d970:	mov	r0, sl
   1d974:	bl	14674 <_start@@Base+0x1c78>
   1d978:	cmp	fp, r0
   1d97c:	cmpne	r7, r0
   1d980:	beq	1bc50 <_start@@Base+0x9254>
   1d984:	mov	r7, r0
   1d988:	b	1c9bc <_start@@Base+0x9fc0>
   1d98c:	mov	r4, r0
   1d990:	mov	r1, r4
   1d994:	mov	r2, fp
   1d998:	mov	r0, sl
   1d99c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d9a0:	mov	r7, r0
   1d9a4:	b	19c44 <_start@@Base+0x7248>
   1d9a8:	ldr	r0, [sl]
   1d9ac:	bl	24a24 <flatcc_builder_end_vector@@Base>
   1d9b0:	str	r0, [sp, #120]	; 0x78
   1d9b4:	b	1d350 <_start@@Base+0xa954>
   1d9b8:	mov	r1, r7
   1d9bc:	mov	r2, fp
   1d9c0:	mov	r0, sl
   1d9c4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1d9c8:	mov	r7, r0
   1d9cc:	b	19c44 <_start@@Base+0x7248>
   1d9d0:	mov	r1, r0
   1d9d4:	mov	r3, #8
   1d9d8:	mov	r2, fp
   1d9dc:	mov	r0, sl
   1d9e0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1d9e4:	cmp	r4, r0
   1d9e8:	mov	r7, r0
   1d9ec:	beq	1da7c <_start@@Base+0xb080>
   1d9f0:	ldrd	r2, [sp, #136]	; 0x88
   1d9f4:	b	1d5ac <_start@@Base+0xabb0>
   1d9f8:	mov	r9, fp
   1d9fc:	mov	fp, r6
   1da00:	b	19ca8 <_start@@Base+0x72ac>
   1da04:	mov	r4, r0
   1da08:	mov	r1, r4
   1da0c:	mov	r2, fp
   1da10:	mov	r0, sl
   1da14:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1da18:	mov	r7, r0
   1da1c:	b	19c44 <_start@@Base+0x7248>
   1da20:	ldr	r3, [pc, #-1900]	; 1d2bc <_start@@Base+0xa8c0>
   1da24:	mov	r1, r0
   1da28:	add	r3, pc, r3
   1da2c:	str	r5, [sp]
   1da30:	add	r3, r3, #384	; 0x180
   1da34:	mov	r2, fp
   1da38:	mov	r0, sl
   1da3c:	bl	13b38 <_start@@Base+0x113c>
   1da40:	cmp	fp, r0
   1da44:	cmpne	r7, r0
   1da48:	beq	1c778 <_start@@Base+0x9d7c>
   1da4c:	mov	r7, r0
   1da50:	b	1cca8 <_start@@Base+0xa2ac>
   1da54:	strd	r8, [sp, #88]	; 0x58
   1da58:	mov	r4, r0
   1da5c:	ldr	r9, [sp, #100]	; 0x64
   1da60:	b	1c5f0 <_start@@Base+0x9bf4>
   1da64:	mov	r1, r7
   1da68:	mov	r2, fp
   1da6c:	mov	r0, sl
   1da70:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1da74:	mov	r7, r0
   1da78:	b	19c44 <_start@@Base+0x7248>
   1da7c:	ldr	r3, [pc, #-1988]	; 1d2c0 <_start@@Base+0xa8c4>
   1da80:	add	r2, sp, #136	; 0x88
   1da84:	add	r3, pc, r3
   1da88:	str	r2, [sp]
   1da8c:	add	r3, r3, #456	; 0x1c8
   1da90:	mov	r2, fp
   1da94:	mov	r1, r4
   1da98:	mov	r0, sl
   1da9c:	bl	126b0 <__assert_fail@plt+0x10>
   1daa0:	cmp	fp, r0
   1daa4:	cmpne	r0, r4
   1daa8:	mov	r7, r0
   1daac:	bne	1d9f0 <_start@@Base+0xaff4>
   1dab0:	b	1a648 <_start@@Base+0x7c4c>
   1dab4:	mov	r4, r7
   1dab8:	mov	r1, r4
   1dabc:	mov	r2, fp
   1dac0:	mov	r0, sl
   1dac4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1dac8:	mov	r7, r0
   1dacc:	b	19c44 <_start@@Base+0x7248>
   1dad0:	ldr	r3, [pc, #-2068]	; 1d2c4 <_start@@Base+0xa8c8>
   1dad4:	mov	r1, r0
   1dad8:	add	r3, pc, r3
   1dadc:	str	r4, [sp]
   1dae0:	add	r3, r3, #432	; 0x1b0
   1dae4:	mov	r2, fp
   1dae8:	mov	r0, sl
   1daec:	bl	13d7c <_start@@Base+0x1380>
   1daf0:	cmp	fp, r0
   1daf4:	cmpne	r7, r0
   1daf8:	beq	1c778 <_start@@Base+0x9d7c>
   1dafc:	mov	r7, r0
   1db00:	b	1d6ec <_start@@Base+0xacf0>
   1db04:	ldr	r3, [pc, #-2116]	; 1d2c8 <_start@@Base+0xa8cc>
   1db08:	mov	r1, r0
   1db0c:	add	r3, pc, r3
   1db10:	str	r4, [sp]
   1db14:	add	r3, r3, #408	; 0x198
   1db18:	mov	r2, fp
   1db1c:	mov	r0, sl
   1db20:	bl	148c4 <_start@@Base+0x1ec8>
   1db24:	cmp	fp, r0
   1db28:	cmpne	r7, r0
   1db2c:	beq	1c778 <_start@@Base+0x9d7c>
   1db30:	mov	r7, r0
   1db34:	b	1d3fc <_start@@Base+0xaa00>
   1db38:	mov	r1, r0
   1db3c:	mov	r3, #8
   1db40:	mov	r2, fp
   1db44:	mov	r0, sl
   1db48:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1db4c:	cmp	r4, r0
   1db50:	mov	r5, r0
   1db54:	beq	1dba4 <_start@@Base+0xb1a8>
   1db58:	mov	r7, r0
   1db5c:	ldrd	r2, [sp, #136]	; 0x88
   1db60:	b	1a874 <_start@@Base+0x7e78>
   1db64:	mov	r4, r7
   1db68:	mov	r1, r4
   1db6c:	mov	r2, fp
   1db70:	mov	r0, sl
   1db74:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1db78:	mov	r7, r0
   1db7c:	b	19c44 <_start@@Base+0x7248>
   1db80:	mov	r4, r7
   1db84:	mov	r1, r4
   1db88:	mov	r2, fp
   1db8c:	mov	r0, sl
   1db90:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1db94:	mov	r7, r0
   1db98:	b	19c44 <_start@@Base+0x7248>
   1db9c:	mov	r7, fp
   1dba0:	mov	r5, r7
   1dba4:	add	r3, sp, #136	; 0x88
   1dba8:	str	r3, [sp]
   1dbac:	mov	r2, fp
   1dbb0:	ldr	r3, [sp, #80]	; 0x50
   1dbb4:	mov	r1, r5
   1dbb8:	mov	r0, sl
   1dbbc:	bl	126b0 <__assert_fail@plt+0x10>
   1dbc0:	cmp	fp, r0
   1dbc4:	cmpne	r0, r5
   1dbc8:	mov	r7, r0
   1dbcc:	beq	1a648 <_start@@Base+0x7c4c>
   1dbd0:	ldrd	r2, [sp, #136]	; 0x88
   1dbd4:	b	1a874 <_start@@Base+0x7e78>
   1dbd8:	mov	r1, r0
   1dbdc:	str	r5, [sp]
   1dbe0:	ldr	r3, [sp, #84]	; 0x54
   1dbe4:	mov	r2, fp
   1dbe8:	mov	r0, sl
   1dbec:	bl	13d7c <_start@@Base+0x1380>
   1dbf0:	cmp	fp, r0
   1dbf4:	cmpne	r7, r0
   1dbf8:	beq	1c778 <_start@@Base+0x9d7c>
   1dbfc:	mov	r7, r0
   1dc00:	b	1cc1c <_start@@Base+0xa220>
   1dc04:	mov	r4, r0
   1dc08:	b	1cb60 <_start@@Base+0xa164>
   1dc0c:	mov	r1, r0
   1dc10:	str	r5, [sp]
   1dc14:	ldr	r3, [sp, #96]	; 0x60
   1dc18:	mov	r2, fp
   1dc1c:	mov	r0, sl
   1dc20:	bl	148c4 <_start@@Base+0x1ec8>
   1dc24:	cmp	fp, r0
   1dc28:	cmpne	r7, r0
   1dc2c:	beq	1c778 <_start@@Base+0x9d7c>
   1dc30:	mov	r7, r0
   1dc34:	b	1ad94 <_start@@Base+0x8398>
   1dc38:	mov	r4, r0
   1dc3c:	b	1aef4 <_start@@Base+0x84f8>
   1dc40:	mov	r4, r0
   1dc44:	b	1acdc <_start@@Base+0x82e0>
   1dc48:	mov	r4, r0
   1dc4c:	b	1a708 <_start@@Base+0x7d0c>
   1dc50:	mov	r4, r0
   1dc54:	b	1af6c <_start@@Base+0x8570>
   1dc58:	ldr	r3, [pc, #-2452]	; 1d2cc <_start@@Base+0xa8d0>
   1dc5c:	mov	r1, r0
   1dc60:	add	r3, pc, r3
   1dc64:	str	r5, [sp]
   1dc68:	add	r3, r3, #396	; 0x18c
   1dc6c:	mov	r2, fp
   1dc70:	mov	r0, sl
   1dc74:	bl	13b38 <_start@@Base+0x113c>
   1dc78:	cmp	fp, r0
   1dc7c:	cmpne	r7, r0
   1dc80:	beq	1c778 <_start@@Base+0x9d7c>
   1dc84:	mov	r7, r0
   1dc88:	b	1ae5c <_start@@Base+0x8460>
   1dc8c:	mov	r9, fp
   1dc90:	mov	r0, r7
   1dc94:	b	19ca4 <_start@@Base+0x72a8>
   1dc98:	mov	r7, r0
   1dc9c:	b	1a7c8 <_start@@Base+0x7dcc>
   1dca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dca4:	sub	sp, sp, #684	; 0x2ac
   1dca8:	mov	fp, r2
   1dcac:	ldr	r2, [sp, #720]	; 0x2d0
   1dcb0:	mov	ip, #0
   1dcb4:	mov	sl, r0
   1dcb8:	mov	r4, r1
   1dcbc:	str	ip, [r2]
   1dcc0:	cmp	r3, #4
   1dcc4:	addls	pc, pc, r3, lsl #2
   1dcc8:	b	1fb00 <_start@@Base+0xd104>
   1dccc:	b	1dfd8 <_start@@Base+0xb5dc>
   1dcd0:	b	1e020 <_start@@Base+0xb624>
   1dcd4:	b	1e0a0 <_start@@Base+0xb6a4>
   1dcd8:	b	1e3bc <_start@@Base+0xb9c0>
   1dcdc:	b	1dce0 <_start@@Base+0xb2e4>
   1dce0:	mov	r1, #4
   1dce4:	ldr	r0, [r0]
   1dce8:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1dcec:	cmp	r0, #0
   1dcf0:	bne	1e3a4 <_start@@Base+0xb9a8>
   1dcf4:	add	r3, sp, #644	; 0x284
   1dcf8:	str	r3, [sp]
   1dcfc:	mov	r2, fp
   1dd00:	mov	r3, #1
   1dd04:	mov	r1, r4
   1dd08:	mov	r0, sl
   1dd0c:	bl	29db0 <flatcc_json_parser_prepare_unions@@Base>
   1dd10:	cmp	fp, r0
   1dd14:	beq	1e3a4 <_start@@Base+0xb9a8>
   1dd18:	mov	r1, r4
   1dd1c:	add	r3, sp, #640	; 0x280
   1dd20:	mov	r2, fp
   1dd24:	mov	r0, sl
   1dd28:	bl	133ac <_start@@Base+0x9b0>
   1dd2c:	ldr	r2, [pc, #852]	; 1e088 <_start@@Base+0xb68c>
   1dd30:	ldr	r3, [sp, #640]	; 0x280
   1dd34:	add	r2, pc, r2
   1dd38:	add	r2, r2, #700	; 0x2bc
   1dd3c:	str	r2, [sp, #232]	; 0xe8
   1dd40:	mov	r4, r0
   1dd44:	cmp	r3, #0
   1dd48:	beq	1f9d8 <_start@@Base+0xcfdc>
   1dd4c:	cmp	fp, r4
   1dd50:	beq	1dd7c <_start@@Base+0xb380>
   1dd54:	ldrb	r3, [r4]
   1dd58:	cmp	r3, #34	; 0x22
   1dd5c:	moveq	r3, #0
   1dd60:	addeq	r4, r4, #1
   1dd64:	streq	r3, [sl, #12]
   1dd68:	beq	1dd7c <_start@@Base+0xb380>
   1dd6c:	cmp	r3, #46	; 0x2e
   1dd70:	movne	r3, #1
   1dd74:	strne	r3, [sl, #12]
   1dd78:	beq	1fca8 <_start@@Base+0xd2ac>
   1dd7c:	sub	r5, fp, r4
   1dd80:	cmp	r5, #8
   1dd84:	bls	1e450 <_start@@Base+0xba54>
   1dd88:	ldrb	r6, [r4, #7]
   1dd8c:	mov	r7, #0
   1dd90:	ldrb	r2, [r4, #6]
   1dd94:	lsl	r3, r2, #8
   1dd98:	str	r3, [sp, #528]	; 0x210
   1dd9c:	add	r3, sp, #528	; 0x210
   1dda0:	lsr	r1, r2, #24
   1dda4:	str	r1, [sp, #532]	; 0x214
   1dda8:	ldrd	r2, [r3]
   1ddac:	orr	r2, r2, r6
   1ddb0:	orr	r3, r3, r7
   1ddb4:	mov	r6, r2
   1ddb8:	mov	r7, r3
   1ddbc:	ldrb	r2, [r4, #5]
   1ddc0:	lsl	r3, r2, #16
   1ddc4:	str	r3, [sp, #456]	; 0x1c8
   1ddc8:	add	r3, sp, #456	; 0x1c8
   1ddcc:	lsr	r1, r2, #16
   1ddd0:	str	r1, [sp, #460]	; 0x1cc
   1ddd4:	ldrd	r2, [r3]
   1ddd8:	orr	r2, r2, r6
   1dddc:	orr	r3, r3, r7
   1dde0:	mov	r6, r2
   1dde4:	mov	r7, r3
   1dde8:	ldrb	r2, [r4, #4]
   1ddec:	lsl	r3, r2, #24
   1ddf0:	str	r3, [sp, #392]	; 0x188
   1ddf4:	add	r3, sp, #392	; 0x188
   1ddf8:	lsr	r1, r2, #8
   1ddfc:	str	r1, [sp, #396]	; 0x18c
   1de00:	ldrd	r2, [r3]
   1de04:	orr	r2, r2, r6
   1de08:	orr	r3, r3, r7
   1de0c:	mov	r6, r2
   1de10:	mov	r7, r3
   1de14:	ldrb	r3, [r4, #3]
   1de18:	str	r3, [sp, #412]	; 0x19c
   1de1c:	mov	r3, #0
   1de20:	str	r3, [sp, #408]	; 0x198
   1de24:	add	r3, sp, #408	; 0x198
   1de28:	ldrd	r2, [r3]
   1de2c:	orr	r2, r2, r6
   1de30:	orr	r3, r3, r7
   1de34:	mov	r6, r2
   1de38:	mov	r7, r3
   1de3c:	ldrb	r2, [r4, #2]
   1de40:	lsl	r3, r2, #8
   1de44:	str	r3, [sp, #380]	; 0x17c
   1de48:	mov	r3, #0
   1de4c:	str	r3, [sp, #376]	; 0x178
   1de50:	add	r3, sp, #376	; 0x178
   1de54:	ldrd	r2, [r3]
   1de58:	orr	r2, r2, r6
   1de5c:	orr	r3, r3, r7
   1de60:	mov	r6, r2
   1de64:	mov	r7, r3
   1de68:	ldrb	r2, [r4, #1]
   1de6c:	lsl	r3, r2, #16
   1de70:	str	r3, [sp, #316]	; 0x13c
   1de74:	mov	r3, #0
   1de78:	str	r3, [sp, #312]	; 0x138
   1de7c:	add	r3, sp, #312	; 0x138
   1de80:	ldrd	r2, [r3]
   1de84:	orr	r2, r2, r6
   1de88:	orr	r3, r3, r7
   1de8c:	mov	r6, r2
   1de90:	mov	r7, r3
   1de94:	ldrb	r0, [r4]
   1de98:	add	r3, pc, #456	; 0x1c8
   1de9c:	ldrd	r2, [r3]
   1dea0:	lsl	r1, r0, #24
   1dea4:	str	r1, [sp, #276]	; 0x114
   1dea8:	mov	r1, #0
   1deac:	str	r1, [sp, #272]	; 0x110
   1deb0:	add	r1, sp, #272	; 0x110
   1deb4:	ldrd	r0, [r1]
   1deb8:	orr	r1, r1, r7
   1debc:	orr	r0, r0, r6
   1dec0:	cmp	r1, r3
   1dec4:	cmpeq	r0, r2
   1dec8:	mov	r6, r0
   1decc:	mov	r7, r1
   1ded0:	beq	1e6e4 <_start@@Base+0xbce8>
   1ded4:	add	r3, pc, #404	; 0x194
   1ded8:	ldrd	r2, [r3]
   1dedc:	bic	r0, r0, #255	; 0xff
   1dee0:	cmp	r1, r3
   1dee4:	cmpeq	r0, r2
   1dee8:	movne	r8, #1
   1deec:	moveq	r8, #0
   1def0:	cmp	r5, #7
   1def4:	orrle	r8, r8, #1
   1def8:	cmp	r8, #0
   1defc:	beq	201cc <_start@@Base+0xd7d0>
   1df00:	add	r1, pc, #368	; 0x170
   1df04:	ldrd	r0, [r1]
   1df08:	ldr	r2, [pc, #380]	; 1e08c <_start@@Base+0xb690>
   1df0c:	mvn	r3, #0
   1df10:	and	r3, r3, r7
   1df14:	and	r2, r2, r6
   1df18:	cmp	r3, r1
   1df1c:	cmpeq	r2, r0
   1df20:	beq	1e8f4 <_start@@Base+0xbef8>
   1df24:	add	r3, pc, #340	; 0x154
   1df28:	ldrd	r2, [r3]
   1df2c:	and	r6, r6, #-16777216	; 0xff000000
   1df30:	cmp	r7, r3
   1df34:	cmpeq	r6, r2
   1df38:	bne	1df44 <_start@@Base+0xb548>
   1df3c:	cmp	r5, #5
   1df40:	bgt	1fcc4 <_start@@Base+0xd2c8>
   1df44:	mov	r1, r4
   1df48:	mov	r2, fp
   1df4c:	mov	r0, sl
   1df50:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1df54:	mov	r9, r0
   1df58:	sub	r3, fp, r9
   1df5c:	cmp	r3, #1
   1df60:	ble	1df74 <_start@@Base+0xb578>
   1df64:	ldrb	r3, [r9]
   1df68:	cmp	r3, #32
   1df6c:	bhi	1df88 <_start@@Base+0xb58c>
   1df70:	beq	1f864 <_start@@Base+0xce68>
   1df74:	mov	r1, r9
   1df78:	mov	r2, fp
   1df7c:	mov	r0, sl
   1df80:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1df84:	mov	r9, r0
   1df88:	cmp	fp, r9
   1df8c:	beq	1f9cc <_start@@Base+0xcfd0>
   1df90:	ldrb	r3, [r9]
   1df94:	cmp	r3, #44	; 0x2c
   1df98:	beq	1f978 <_start@@Base+0xcf7c>
   1df9c:	mov	r3, #0
   1dfa0:	str	r3, [sp, #640]	; 0x280
   1dfa4:	ldrb	r3, [r9]
   1dfa8:	cmp	r3, #125	; 0x7d
   1dfac:	beq	1e858 <_start@@Base+0xbe5c>
   1dfb0:	mov	r3, #10
   1dfb4:	mov	r1, r9
   1dfb8:	mov	r2, fp
   1dfbc:	mov	r0, sl
   1dfc0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1dfc4:	ldr	r3, [sp, #640]	; 0x280
   1dfc8:	cmp	r3, #0
   1dfcc:	mov	r4, r0
   1dfd0:	bne	1dd4c <_start@@Base+0xb350>
   1dfd4:	b	1f9d8 <_start@@Base+0xcfdc>
   1dfd8:	sub	r3, fp, r1
   1dfdc:	cmp	r3, #3
   1dfe0:	ble	1e004 <_start@@Base+0xb608>
   1dfe4:	ldr	r1, [pc, #164]	; 1e090 <_start@@Base+0xb694>
   1dfe8:	mov	r2, #4
   1dfec:	add	r1, pc, r1
   1dff0:	mov	r0, r4
   1dff4:	bl	125bc <memcmp@plt>
   1dff8:	cmp	r0, #0
   1dffc:	addeq	r0, r4, #4
   1e000:	beq	1e018 <_start@@Base+0xb61c>
   1e004:	mov	r2, fp
   1e008:	mov	r1, r4
   1e00c:	mov	r0, sl
   1e010:	mov	r3, #26
   1e014:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1e018:	add	sp, sp, #684	; 0x2ac
   1e01c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e020:	ldr	r3, [sp, #720]	; 0x2d0
   1e024:	mov	r2, fp
   1e028:	bl	19aa8 <_start@@Base+0x70ac>
   1e02c:	ldr	r3, [sl, #24]
   1e030:	cmp	r3, #0
   1e034:	bne	1e018 <_start@@Base+0xb61c>
   1e038:	ldr	r3, [sp, #720]	; 0x2d0
   1e03c:	ldr	r3, [r3]
   1e040:	cmp	r3, #0
   1e044:	bne	1e018 <_start@@Base+0xb61c>
   1e048:	mov	r1, r0
   1e04c:	mov	r2, fp
   1e050:	mov	r0, sl
   1e054:	mov	r3, #33	; 0x21
   1e058:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1e05c:	add	sp, sp, #684	; 0x2ac
   1e060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e064:	nop			; (mov r0, r0)
   1e068:	cmnvs	lr, pc, asr r9
   1e06c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1e070:	cmnvs	lr, r0, lsl #18
   1e074:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1e078:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1e07c:	rsbsvc	r6, r2, r6, ror #10
   1e080:	strvs	r0, [r0, #-0]
   1e084:	stclvs	6, cr7, [pc, #-420]!	; 1dee8 <_start@@Base+0xb4ec>
   1e088:	andeq	pc, r1, r4, asr r3	; <UNPREDICTABLE>
   1e08c:			; <UNDEFINED> instruction: 0xffff0000
   1e090:			; <UNDEFINED> instruction: 0x0000cfb4
   1e094:			; <UNDEFINED> instruction: 0x0001efb8
   1e098:	andeq	lr, r1, r4, lsr #31
   1e09c:	andeq	lr, r1, r0, lsr #31
   1e0a0:	mov	r1, #4
   1e0a4:	ldr	r0, [r0]
   1e0a8:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1e0ac:	cmp	r0, #0
   1e0b0:	bne	1e3a4 <_start@@Base+0xb9a8>
   1e0b4:	mov	r1, r4
   1e0b8:	add	r3, sp, #660	; 0x294
   1e0bc:	mov	r2, fp
   1e0c0:	mov	r0, sl
   1e0c4:	bl	133ac <_start@@Base+0x9b0>
   1e0c8:	ldr	r3, [pc, #-60]	; 1e094 <_start@@Base+0xb698>
   1e0cc:	ldr	r1, [pc, #-60]	; 1e098 <_start@@Base+0xb69c>
   1e0d0:	add	r3, pc, r3
   1e0d4:	add	r3, r3, #548	; 0x224
   1e0d8:	ldr	r2, [pc, #-68]	; 1e09c <_start@@Base+0xb6a0>
   1e0dc:	str	r3, [sp, #40]	; 0x28
   1e0e0:	ldr	r3, [sp, #660]	; 0x294
   1e0e4:	add	r1, pc, r1
   1e0e8:	add	r2, pc, r2
   1e0ec:	add	r1, r1, #560	; 0x230
   1e0f0:	add	r2, r2, #516	; 0x204
   1e0f4:	str	r1, [sp, #24]
   1e0f8:	str	r2, [sp, #32]
   1e0fc:	mov	r4, r0
   1e100:	cmp	r3, #0
   1e104:	beq	1e398 <_start@@Base+0xb99c>
   1e108:	cmp	fp, r4
   1e10c:	beq	1e138 <_start@@Base+0xb73c>
   1e110:	ldrb	r3, [r4]
   1e114:	cmp	r3, #34	; 0x22
   1e118:	moveq	r3, #0
   1e11c:	addeq	r4, r4, #1
   1e120:	streq	r3, [sl, #12]
   1e124:	beq	1e138 <_start@@Base+0xb73c>
   1e128:	cmp	r3, #46	; 0x2e
   1e12c:	movne	r3, #1
   1e130:	strne	r3, [sl, #12]
   1e134:	beq	1fae4 <_start@@Base+0xd0e8>
   1e138:	sub	r5, fp, r4
   1e13c:	cmp	r5, #8
   1e140:	bls	1e3cc <_start@@Base+0xb9d0>
   1e144:	ldrb	r6, [r4, #7]
   1e148:	mov	r7, #0
   1e14c:	ldrb	r2, [r4, #6]
   1e150:	lsl	r3, r2, #8
   1e154:	str	r3, [sp, #448]	; 0x1c0
   1e158:	add	r3, sp, #448	; 0x1c0
   1e15c:	lsr	r1, r2, #24
   1e160:	str	r1, [sp, #452]	; 0x1c4
   1e164:	ldrd	r2, [r3]
   1e168:	orr	r2, r2, r6
   1e16c:	orr	r3, r3, r7
   1e170:	mov	r6, r2
   1e174:	mov	r7, r3
   1e178:	ldrb	r2, [r4, #5]
   1e17c:	lsl	r3, r2, #16
   1e180:	str	r3, [sp, #360]	; 0x168
   1e184:	add	r3, sp, #360	; 0x168
   1e188:	lsr	r1, r2, #16
   1e18c:	str	r1, [sp, #364]	; 0x16c
   1e190:	ldrd	r2, [r3]
   1e194:	orr	r2, r2, r6
   1e198:	orr	r3, r3, r7
   1e19c:	mov	r6, r2
   1e1a0:	mov	r7, r3
   1e1a4:	ldrb	r2, [r4, #4]
   1e1a8:	lsl	r3, r2, #24
   1e1ac:	str	r3, [sp, #264]	; 0x108
   1e1b0:	add	r3, sp, #264	; 0x108
   1e1b4:	lsr	r1, r2, #8
   1e1b8:	str	r1, [sp, #268]	; 0x10c
   1e1bc:	ldrd	r2, [r3]
   1e1c0:	orr	r2, r2, r6
   1e1c4:	orr	r3, r3, r7
   1e1c8:	mov	r6, r2
   1e1cc:	mov	r7, r3
   1e1d0:	ldrb	r3, [r4, #3]
   1e1d4:	str	r3, [sp, #284]	; 0x11c
   1e1d8:	mov	r3, #0
   1e1dc:	str	r3, [sp, #280]	; 0x118
   1e1e0:	add	r3, sp, #280	; 0x118
   1e1e4:	ldrd	r2, [r3]
   1e1e8:	orr	r2, r2, r6
   1e1ec:	orr	r3, r3, r7
   1e1f0:	mov	r6, r2
   1e1f4:	mov	r7, r3
   1e1f8:	ldrb	r2, [r4, #2]
   1e1fc:	lsl	r3, r2, #8
   1e200:	str	r3, [sp, #236]	; 0xec
   1e204:	mov	r3, #0
   1e208:	str	r3, [sp, #232]	; 0xe8
   1e20c:	ldrd	r2, [sp, #232]	; 0xe8
   1e210:	orr	r2, r2, r6
   1e214:	orr	r3, r3, r7
   1e218:	mov	r6, r2
   1e21c:	mov	r7, r3
   1e220:	ldrb	r2, [r4, #1]
   1e224:	lsl	r3, r2, #16
   1e228:	str	r3, [sp, #172]	; 0xac
   1e22c:	mov	r3, #0
   1e230:	str	r3, [sp, #168]	; 0xa8
   1e234:	ldrd	r2, [sp, #168]	; 0xa8
   1e238:	orr	r2, r2, r6
   1e23c:	orr	r3, r3, r7
   1e240:	mov	r6, r2
   1e244:	mov	r7, r3
   1e248:	ldrb	r0, [r4]
   1e24c:	add	r3, pc, #924	; 0x39c
   1e250:	ldrd	r2, [r3]
   1e254:	lsl	r1, r0, #24
   1e258:	str	r1, [sp, #116]	; 0x74
   1e25c:	mov	r1, #0
   1e260:	str	r1, [sp, #112]	; 0x70
   1e264:	ldrd	r0, [sp, #112]	; 0x70
   1e268:	orr	r0, r0, r6
   1e26c:	orr	r1, r1, r7
   1e270:	mov	r6, r0
   1e274:	mov	r7, r1
   1e278:	ldr	r0, [pc, #904]	; 1e608 <_start@@Base+0xbc0c>
   1e27c:	mvn	r1, #0
   1e280:	and	r1, r1, r7
   1e284:	and	r0, r0, r6
   1e288:	cmp	r1, r3
   1e28c:	cmpeq	r0, r2
   1e290:	beq	1e4d4 <_start@@Base+0xbad8>
   1e294:	add	r3, pc, #860	; 0x35c
   1e298:	ldrd	r2, [r3]
   1e29c:	and	r0, r6, #-16777216	; 0xff000000
   1e2a0:	cmp	r7, r3
   1e2a4:	cmpeq	r0, r2
   1e2a8:	movne	r8, #1
   1e2ac:	moveq	r8, #0
   1e2b0:	cmp	r5, #5
   1e2b4:	orrle	r8, r8, #1
   1e2b8:	cmp	r8, #0
   1e2bc:	beq	1fb5c <_start@@Base+0xd160>
   1e2c0:	add	r3, pc, #824	; 0x338
   1e2c4:	ldrd	r2, [r3]
   1e2c8:	bic	r1, r7, #255	; 0xff
   1e2cc:	mov	r0, #0
   1e2d0:	cmp	r1, r3
   1e2d4:	cmpeq	r0, r2
   1e2d8:	beq	1e610 <_start@@Base+0xbc14>
   1e2dc:	ldr	r3, [pc, #804]	; 1e608 <_start@@Base+0xbc0c>
   1e2e0:	mov	r2, #0
   1e2e4:	and	r7, r7, r3
   1e2e8:	ldr	r3, [pc, #796]	; 1e60c <_start@@Base+0xbc10>
   1e2ec:	and	r6, r6, r2
   1e2f0:	cmp	r7, r3
   1e2f4:	mov	r2, #0
   1e2f8:	cmpeq	r6, r2
   1e2fc:	bne	1e308 <_start@@Base+0xb90c>
   1e300:	cmp	r5, #2
   1e304:	bgt	1fa1c <_start@@Base+0xd020>
   1e308:	mov	r1, r4
   1e30c:	mov	r2, fp
   1e310:	mov	r0, sl
   1e314:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e318:	mov	r5, r0
   1e31c:	sub	r3, fp, r5
   1e320:	cmp	r3, #1
   1e324:	ble	1e338 <_start@@Base+0xb93c>
   1e328:	ldrb	r3, [r5]
   1e32c:	cmp	r3, #32
   1e330:	bhi	1e34c <_start@@Base+0xb950>
   1e334:	beq	1e824 <_start@@Base+0xbe28>
   1e338:	mov	r1, r5
   1e33c:	mov	r2, fp
   1e340:	mov	r0, sl
   1e344:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1e348:	mov	r5, r0
   1e34c:	cmp	fp, r5
   1e350:	beq	1e83c <_start@@Base+0xbe40>
   1e354:	ldrb	r3, [r5]
   1e358:	cmp	r3, #44	; 0x2c
   1e35c:	beq	1e894 <_start@@Base+0xbe98>
   1e360:	mov	r3, #0
   1e364:	str	r3, [sp, #660]	; 0x294
   1e368:	ldrb	r3, [r5]
   1e36c:	cmp	r3, #125	; 0x7d
   1e370:	beq	1e5b0 <_start@@Base+0xbbb4>
   1e374:	mov	r3, #10
   1e378:	mov	r1, r5
   1e37c:	mov	r2, fp
   1e380:	mov	r0, sl
   1e384:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1e388:	ldr	r3, [sp, #660]	; 0x294
   1e38c:	cmp	r3, #0
   1e390:	mov	r4, r0
   1e394:	bne	1e108 <_start@@Base+0xb70c>
   1e398:	ldr	r3, [sl, #24]
   1e39c:	cmp	r3, #0
   1e3a0:	beq	1f9fc <_start@@Base+0xd000>
   1e3a4:	mov	r1, r4
   1e3a8:	mov	r3, #33	; 0x21
   1e3ac:	mov	r2, fp
   1e3b0:	mov	r0, sl
   1e3b4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1e3b8:	b	1e02c <_start@@Base+0xb630>
   1e3bc:	ldr	r3, [sp, #720]	; 0x2d0
   1e3c0:	mov	r2, fp
   1e3c4:	bl	17da8 <_start@@Base+0x53ac>
   1e3c8:	b	1e02c <_start@@Base+0xb630>
   1e3cc:	sub	r3, r5, #1
   1e3d0:	cmp	r3, #7
   1e3d4:	addls	pc, pc, r3, lsl #2
   1e3d8:	b	216cc <_start@@Base+0xecd0>
   1e3dc:	b	1e444 <_start@@Base+0xba48>
   1e3e0:	b	1e438 <_start@@Base+0xba3c>
   1e3e4:	b	1e42c <_start@@Base+0xba30>
   1e3e8:	b	1e420 <_start@@Base+0xba24>
   1e3ec:	b	1e414 <_start@@Base+0xba18>
   1e3f0:	b	1e408 <_start@@Base+0xba0c>
   1e3f4:	b	1e3fc <_start@@Base+0xba00>
   1e3f8:	b	1e144 <_start@@Base+0xb748>
   1e3fc:	mov	r6, #0
   1e400:	mov	r7, #0
   1e404:	b	1e14c <_start@@Base+0xb750>
   1e408:	mov	r6, #0
   1e40c:	mov	r7, #0
   1e410:	b	1e178 <_start@@Base+0xb77c>
   1e414:	mov	r6, #0
   1e418:	mov	r7, #0
   1e41c:	b	1e1a4 <_start@@Base+0xb7a8>
   1e420:	mov	r6, #0
   1e424:	mov	r7, #0
   1e428:	b	1e1d0 <_start@@Base+0xb7d4>
   1e42c:	mov	r6, #0
   1e430:	mov	r7, #0
   1e434:	b	1e1f8 <_start@@Base+0xb7fc>
   1e438:	mov	r6, #0
   1e43c:	mov	r7, #0
   1e440:	b	1e220 <_start@@Base+0xb824>
   1e444:	mov	r6, #0
   1e448:	mov	r7, #0
   1e44c:	b	1e248 <_start@@Base+0xb84c>
   1e450:	sub	r3, r5, #1
   1e454:	cmp	r3, #7
   1e458:	addls	pc, pc, r3, lsl #2
   1e45c:	b	216d8 <_start@@Base+0xecdc>
   1e460:	b	1e4c8 <_start@@Base+0xbacc>
   1e464:	b	1e4bc <_start@@Base+0xbac0>
   1e468:	b	1e4b0 <_start@@Base+0xbab4>
   1e46c:	b	1e4a4 <_start@@Base+0xbaa8>
   1e470:	b	1e498 <_start@@Base+0xba9c>
   1e474:	b	1e48c <_start@@Base+0xba90>
   1e478:	b	1e480 <_start@@Base+0xba84>
   1e47c:	b	1dd88 <_start@@Base+0xb38c>
   1e480:	mov	r6, #0
   1e484:	mov	r7, #0
   1e488:	b	1dd90 <_start@@Base+0xb394>
   1e48c:	mov	r6, #0
   1e490:	mov	r7, #0
   1e494:	b	1ddbc <_start@@Base+0xb3c0>
   1e498:	mov	r6, #0
   1e49c:	mov	r7, #0
   1e4a0:	b	1dde8 <_start@@Base+0xb3ec>
   1e4a4:	mov	r6, #0
   1e4a8:	mov	r7, #0
   1e4ac:	b	1de14 <_start@@Base+0xb418>
   1e4b0:	mov	r6, #0
   1e4b4:	mov	r7, #0
   1e4b8:	b	1de3c <_start@@Base+0xb440>
   1e4bc:	mov	r6, #0
   1e4c0:	mov	r7, #0
   1e4c4:	b	1de68 <_start@@Base+0xb46c>
   1e4c8:	mov	r6, #0
   1e4cc:	mov	r7, #0
   1e4d0:	b	1de94 <_start@@Base+0xb498>
   1e4d4:	cmp	r5, #6
   1e4d8:	ble	1e2dc <_start@@Base+0xb8e0>
   1e4dc:	mov	r3, #6
   1e4e0:	mov	r2, fp
   1e4e4:	mov	r1, r4
   1e4e8:	mov	r0, sl
   1e4ec:	bl	18084 <_start@@Base+0x5688>
   1e4f0:	cmp	r0, r4
   1e4f4:	mov	r8, r0
   1e4f8:	beq	1e2dc <_start@@Base+0xb8e0>
   1e4fc:	cmp	fp, r0
   1e500:	ldrd	r0, [sp, #112]	; 0x70
   1e504:	mov	r2, #0
   1e508:	mov	r3, #0
   1e50c:	add	r1, sp, #672	; 0x2a0
   1e510:	strb	r0, [sp, #656]	; 0x290
   1e514:	str	r0, [sp, #664]	; 0x298
   1e518:	strd	r2, [r1]
   1e51c:	beq	20888 <_start@@Base+0xde8c>
   1e520:	str	r1, [sp]
   1e524:	add	r3, sp, #664	; 0x298
   1e528:	mov	r2, fp
   1e52c:	mov	r1, r8
   1e530:	mov	r0, sl
   1e534:	bl	296fc <flatcc_json_parser_integer@@Base>
   1e538:	cmp	r8, r0
   1e53c:	mov	r5, r0
   1e540:	beq	20888 <_start@@Base+0xde8c>
   1e544:	ldr	r1, [sp, #664]	; 0x298
   1e548:	add	r3, sp, #672	; 0x2a0
   1e54c:	cmp	r1, #0
   1e550:	ldrd	r2, [r3]
   1e554:	beq	1fb1c <_start@@Base+0xd120>
   1e558:	cmp	r3, #0
   1e55c:	cmpeq	r2, #128	; 0x80
   1e560:	rsbls	r2, r2, #0
   1e564:	sxtbls	r2, r2
   1e568:	strbls	r2, [sp, #656]	; 0x290
   1e56c:	bhi	205f4 <_start@@Base+0xdbf8>
   1e570:	cmp	r2, #2
   1e574:	bne	1e584 <_start@@Base+0xbb88>
   1e578:	ldr	r3, [sl, #8]
   1e57c:	tst	r3, #2
   1e580:	beq	1e31c <_start@@Base+0xb920>
   1e584:	mov	r3, #1
   1e588:	mov	r2, r3
   1e58c:	mov	r1, r3
   1e590:	ldr	r0, [sl]
   1e594:	bl	25728 <flatcc_builder_table_add@@Base>
   1e598:	cmp	r0, #0
   1e59c:	beq	1fadc <_start@@Base+0xd0e0>
   1e5a0:	add	r3, sp, #656	; 0x290
   1e5a4:	ldrsb	r3, [r3]
   1e5a8:	strb	r3, [r0]
   1e5ac:	b	1e31c <_start@@Base+0xb920>
   1e5b0:	add	r4, r5, #1
   1e5b4:	sub	r3, fp, r4
   1e5b8:	cmp	r3, #1
   1e5bc:	ble	1e5d0 <_start@@Base+0xbbd4>
   1e5c0:	ldrb	r3, [r5, #1]
   1e5c4:	cmp	r3, #32
   1e5c8:	bhi	1e398 <_start@@Base+0xb99c>
   1e5cc:	beq	202d8 <_start@@Base+0xd8dc>
   1e5d0:	mov	r1, r4
   1e5d4:	mov	r2, fp
   1e5d8:	mov	r0, sl
   1e5dc:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1e5e0:	ldr	r3, [sp, #660]	; 0x294
   1e5e4:	mov	r4, r0
   1e5e8:	b	1e100 <_start@@Base+0xb704>
   1e5ec:	nop			; (mov r0, r0)
   1e5f0:	eorsvc	r0, r2, #0
   1e5f4:	cmnvs	pc, #28416	; 0x6f00
   1e5f8:	andvc	r0, r0, #0
   1e5fc:	cmnvs	pc, #28416	; 0x6f00
   1e600:	andeq	r0, r0, r0
   1e604:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   1e608:			; <UNDEFINED> instruction: 0xffff0000
   1e60c:	strbvc	r0, [r3, #-0]!
   1e610:	cmp	r5, #3
   1e614:	ble	1e308 <_start@@Base+0xb90c>
   1e618:	mov	r3, #3
   1e61c:	mov	r2, fp
   1e620:	mov	r1, r4
   1e624:	mov	r0, sl
   1e628:	bl	18084 <_start@@Base+0x5688>
   1e62c:	cmp	r0, r4
   1e630:	mov	r6, r0
   1e634:	beq	1e308 <_start@@Base+0xb90c>
   1e638:	mov	r0, #0
   1e63c:	mov	r1, #0
   1e640:	add	r2, sp, #672	; 0x2a0
   1e644:	mov	r3, #0
   1e648:	cmp	fp, r6
   1e64c:	strd	r0, [r2]
   1e650:	strb	r3, [sp, #656]	; 0x290
   1e654:	str	r3, [sp, #664]	; 0x298
   1e658:	beq	2139c <_start@@Base+0xe9a0>
   1e65c:	str	r2, [sp]
   1e660:	add	r3, sp, #664	; 0x298
   1e664:	mov	r2, fp
   1e668:	mov	r1, r6
   1e66c:	mov	r0, sl
   1e670:	bl	296fc <flatcc_json_parser_integer@@Base>
   1e674:	cmp	r6, r0
   1e678:	mov	r5, r0
   1e67c:	beq	2139c <_start@@Base+0xe9a0>
   1e680:	ldr	r3, [sp, #664]	; 0x298
   1e684:	cmp	r3, #0
   1e688:	bne	204d8 <_start@@Base+0xdadc>
   1e68c:	add	r3, sp, #672	; 0x2a0
   1e690:	ldrd	r2, [r3]
   1e694:	cmp	r3, #0
   1e698:	cmpeq	r2, #255	; 0xff
   1e69c:	uxtbls	r2, r2
   1e6a0:	strbls	r2, [sp, #656]	; 0x290
   1e6a4:	bhi	2067c <_start@@Base+0xdc80>
   1e6a8:	cmp	r2, #2
   1e6ac:	bne	1e6bc <_start@@Base+0xbcc0>
   1e6b0:	ldr	r3, [sl, #8]
   1e6b4:	tst	r3, #2
   1e6b8:	beq	1e31c <_start@@Base+0xb920>
   1e6bc:	mov	r3, #1
   1e6c0:	mov	r2, r3
   1e6c4:	mov	r1, #3
   1e6c8:	ldr	r0, [sl]
   1e6cc:	bl	25728 <flatcc_builder_table_add@@Base>
   1e6d0:	cmp	r0, #0
   1e6d4:	beq	1fadc <_start@@Base+0xd0e0>
   1e6d8:	ldrb	r3, [sp, #656]	; 0x290
   1e6dc:	strb	r3, [r0]
   1e6e0:	b	1e31c <_start@@Base+0xb920>
   1e6e4:	add	r5, r4, #8
   1e6e8:	sub	ip, fp, r5
   1e6ec:	cmp	ip, #8
   1e6f0:	bls	1f878 <_start@@Base+0xce7c>
   1e6f4:	ldrb	r0, [r4, #14]
   1e6f8:	mov	r3, #0
   1e6fc:	lsl	r1, r0, #8
   1e700:	str	r1, [sp, #632]	; 0x278
   1e704:	add	r1, sp, #632	; 0x278
   1e708:	lsr	lr, r0, #24
   1e70c:	str	lr, [sp, #636]	; 0x27c
   1e710:	ldrd	r0, [r1]
   1e714:	orr	r1, r1, r3
   1e718:	mov	r3, r1
   1e71c:	ldrb	r0, [r4, #13]
   1e720:	lsl	r1, r0, #16
   1e724:	str	r1, [sp, #624]	; 0x270
   1e728:	add	r1, sp, #624	; 0x270
   1e72c:	lsr	lr, r0, #16
   1e730:	str	lr, [sp, #628]	; 0x274
   1e734:	ldrd	r0, [r1]
   1e738:	orr	r1, r1, r3
   1e73c:	mov	r3, r1
   1e740:	ldrb	r0, [r4, #12]
   1e744:	lsl	r1, r0, #24
   1e748:	str	r1, [sp, #600]	; 0x258
   1e74c:	add	r1, sp, #600	; 0x258
   1e750:	lsr	lr, r0, #8
   1e754:	str	lr, [sp, #604]	; 0x25c
   1e758:	ldrd	r0, [r1]
   1e75c:	orr	r1, r1, r3
   1e760:	mov	r3, r1
   1e764:	ldrb	r1, [r4, #11]
   1e768:	str	r1, [sp, #612]	; 0x264
   1e76c:	mov	r1, #0
   1e770:	str	r1, [sp, #608]	; 0x260
   1e774:	add	r1, sp, #608	; 0x260
   1e778:	ldrd	r0, [r1]
   1e77c:	orr	r1, r1, r3
   1e780:	mov	r3, r1
   1e784:	ldrb	r0, [r4, #10]
   1e788:	lsl	r1, r0, #8
   1e78c:	str	r1, [sp, #588]	; 0x24c
   1e790:	mov	r1, #0
   1e794:	str	r1, [sp, #584]	; 0x248
   1e798:	add	r1, sp, #584	; 0x248
   1e79c:	ldrd	r0, [r1]
   1e7a0:	orr	r1, r1, r3
   1e7a4:	mov	r3, r1
   1e7a8:	ldrb	r0, [r4, #9]
   1e7ac:	lsl	r1, r0, #16
   1e7b0:	str	r1, [sp, #564]	; 0x234
   1e7b4:	mov	r1, #0
   1e7b8:	str	r1, [sp, #560]	; 0x230
   1e7bc:	add	r1, sp, #560	; 0x230
   1e7c0:	ldrd	r0, [r1]
   1e7c4:	orr	r1, r1, r3
   1e7c8:	mov	r3, r1
   1e7cc:	ldrb	r0, [r4, #8]
   1e7d0:	add	lr, sp, #520	; 0x208
   1e7d4:	mov	r2, #0
   1e7d8:	lsl	r1, r0, #24
   1e7dc:	str	r1, [sp, #524]	; 0x20c
   1e7e0:	mov	r1, #0
   1e7e4:	str	r1, [sp, #520]	; 0x208
   1e7e8:	ldrd	r6, [lr]
   1e7ec:	add	r1, pc, #244	; 0xf4
   1e7f0:	ldrd	r0, [r1]
   1e7f4:	orr	r7, r7, r3
   1e7f8:	cmp	r7, r1
   1e7fc:	cmpeq	r2, r0
   1e800:	bne	1e80c <_start@@Base+0xbe10>
   1e804:	cmp	ip, #4
   1e808:	bgt	203bc <_start@@Base+0xd9c0>
   1e80c:	mov	r1, r5
   1e810:	mov	r2, fp
   1e814:	mov	r0, sl
   1e818:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1e81c:	mov	r9, r0
   1e820:	b	1df58 <_start@@Base+0xb55c>
   1e824:	ldrb	r3, [r5, #1]
   1e828:	cmp	r3, #32
   1e82c:	addhi	r5, r5, #1
   1e830:	bls	1e338 <_start@@Base+0xb93c>
   1e834:	cmp	fp, r5
   1e838:	bne	1e354 <_start@@Base+0xb958>
   1e83c:	mov	r3, #0
   1e840:	str	r3, [sp, #660]	; 0x294
   1e844:	ldr	r3, [sl, #24]
   1e848:	mov	r4, fp
   1e84c:	cmp	r3, #0
   1e850:	bne	1e3a4 <_start@@Base+0xb9a8>
   1e854:	b	1f9fc <_start@@Base+0xd000>
   1e858:	add	r4, r9, #1
   1e85c:	sub	r3, fp, r4
   1e860:	cmp	r3, #1
   1e864:	ble	1e878 <_start@@Base+0xbe7c>
   1e868:	ldrb	r3, [r9, #1]
   1e86c:	cmp	r3, #32
   1e870:	bhi	1f9d8 <_start@@Base+0xcfdc>
   1e874:	beq	204c4 <_start@@Base+0xdac8>
   1e878:	mov	r1, r4
   1e87c:	mov	r2, fp
   1e880:	mov	r0, sl
   1e884:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1e888:	ldr	r3, [sp, #640]	; 0x280
   1e88c:	mov	r4, r0
   1e890:	b	1dd44 <_start@@Base+0xb348>
   1e894:	add	r4, r5, #1
   1e898:	sub	r3, fp, r4
   1e89c:	cmp	r3, #1
   1e8a0:	ble	1e8b4 <_start@@Base+0xbeb8>
   1e8a4:	ldrb	r3, [r5, #1]
   1e8a8:	cmp	r3, #32
   1e8ac:	bhi	1e8c8 <_start@@Base+0xbecc>
   1e8b0:	beq	205e0 <_start@@Base+0xdbe4>
   1e8b4:	mov	r1, r4
   1e8b8:	mov	r2, fp
   1e8bc:	mov	r0, sl
   1e8c0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1e8c4:	mov	r4, r0
   1e8c8:	cmp	fp, r4
   1e8cc:	beq	215fc <_start@@Base+0xec00>
   1e8d0:	ldrb	r3, [r4]
   1e8d4:	cmp	r3, #125	; 0x7d
   1e8d8:	beq	20918 <_start@@Base+0xdf1c>
   1e8dc:	mov	r3, #1
   1e8e0:	str	r3, [sp, #660]	; 0x294
   1e8e4:	b	1e108 <_start@@Base+0xb70c>
   1e8e8:	andeq	r0, r0, r0
   1e8ec:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1e8f0:	andeq	lr, r1, ip, lsr r7
   1e8f4:	cmp	r5, #6
   1e8f8:	ble	1df44 <_start@@Base+0xb548>
   1e8fc:	mov	r3, #6
   1e900:	mov	r2, fp
   1e904:	mov	r1, r4
   1e908:	mov	r0, sl
   1e90c:	bl	18084 <_start@@Base+0x5688>
   1e910:	cmp	r0, r4
   1e914:	mov	r9, r0
   1e918:	beq	1df44 <_start@@Base+0xb548>
   1e91c:	mov	r1, #3
   1e920:	ldr	r0, [sl]
   1e924:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1e928:	cmp	r0, #0
   1e92c:	bne	1eeb4 <_start@@Base+0xc4b8>
   1e930:	mov	r1, r9
   1e934:	add	r3, sp, #648	; 0x288
   1e938:	mov	r2, fp
   1e93c:	mov	r0, sl
   1e940:	bl	133ac <_start@@Base+0x9b0>
   1e944:	ldr	r2, [pc, #-92]	; 1e8f0 <_start@@Base+0xbef4>
   1e948:	ldr	r3, [sp, #648]	; 0x288
   1e94c:	add	r2, pc, r2
   1e950:	add	r2, r2, #624	; 0x270
   1e954:	str	r2, [sp, #112]	; 0x70
   1e958:	mov	r9, r0
   1e95c:	cmp	r3, #0
   1e960:	beq	1ee68 <_start@@Base+0xc46c>
   1e964:	cmp	fp, r0
   1e968:	beq	1eed0 <_start@@Base+0xc4d4>
   1e96c:	ldrb	r3, [r0]
   1e970:	cmp	r3, #34	; 0x22
   1e974:	moveq	r3, #0
   1e978:	addeq	r0, r0, #1
   1e97c:	streq	r3, [sl, #12]
   1e980:	beq	1e994 <_start@@Base+0xbf98>
   1e984:	cmp	r3, #46	; 0x2e
   1e988:	movne	r3, #1
   1e98c:	strne	r3, [sl, #12]
   1e990:	beq	1f834 <_start@@Base+0xce38>
   1e994:	sub	r3, fp, r0
   1e998:	cmp	r3, #8
   1e99c:	bls	1eee8 <_start@@Base+0xc4ec>
   1e9a0:	ldrb	r2, [r0, #7]
   1e9a4:	mov	r3, #0
   1e9a8:	ldrb	r4, [r0, #6]
   1e9ac:	lsr	r1, r4, #24
   1e9b0:	str	r1, [sp, #324]	; 0x144
   1e9b4:	lsl	r1, r4, #8
   1e9b8:	str	r1, [sp, #320]	; 0x140
   1e9bc:	add	r1, sp, #320	; 0x140
   1e9c0:	ldrd	r4, [r1]
   1e9c4:	orr	r4, r4, r2
   1e9c8:	orr	r5, r5, r3
   1e9cc:	mov	r2, r4
   1e9d0:	mov	r3, r5
   1e9d4:	ldrb	r4, [r0, #5]
   1e9d8:	lsr	r1, r4, #16
   1e9dc:	str	r1, [sp, #188]	; 0xbc
   1e9e0:	lsl	r1, r4, #16
   1e9e4:	str	r1, [sp, #184]	; 0xb8
   1e9e8:	ldrd	r4, [sp, #184]	; 0xb8
   1e9ec:	orr	r4, r4, r2
   1e9f0:	orr	r5, r5, r3
   1e9f4:	mov	r2, r4
   1e9f8:	mov	r3, r5
   1e9fc:	ldrb	r4, [r0, #4]
   1ea00:	lsr	r1, r4, #8
   1ea04:	str	r1, [sp, #124]	; 0x7c
   1ea08:	lsl	r1, r4, #24
   1ea0c:	str	r1, [sp, #120]	; 0x78
   1ea10:	ldrd	r4, [sp, #120]	; 0x78
   1ea14:	orr	r4, r4, r2
   1ea18:	orr	r5, r5, r3
   1ea1c:	mov	r2, r4
   1ea20:	mov	r3, r5
   1ea24:	ldrb	r1, [r0, #3]
   1ea28:	str	r1, [sp, #140]	; 0x8c
   1ea2c:	mov	r1, #0
   1ea30:	str	r1, [sp, #136]	; 0x88
   1ea34:	ldrd	r4, [sp, #136]	; 0x88
   1ea38:	orr	r4, r4, r2
   1ea3c:	orr	r5, r5, r3
   1ea40:	mov	r2, r4
   1ea44:	mov	r3, r5
   1ea48:	ldrb	r4, [r0, #2]
   1ea4c:	lsl	r1, r4, #8
   1ea50:	str	r1, [sp, #92]	; 0x5c
   1ea54:	mov	r1, #0
   1ea58:	str	r1, [sp, #88]	; 0x58
   1ea5c:	ldrd	r4, [sp, #88]	; 0x58
   1ea60:	orr	r4, r4, r2
   1ea64:	orr	r5, r5, r3
   1ea68:	mov	r2, r4
   1ea6c:	mov	r3, r5
   1ea70:	ldrb	r4, [r0, #1]
   1ea74:	lsl	r1, r4, #16
   1ea78:	str	r1, [sp, #60]	; 0x3c
   1ea7c:	mov	r1, #0
   1ea80:	str	r1, [sp, #56]	; 0x38
   1ea84:	ldrd	r4, [sp, #56]	; 0x38
   1ea88:	orr	r4, r4, r2
   1ea8c:	orr	r5, r5, r3
   1ea90:	mov	r2, r4
   1ea94:	mov	r3, r5
   1ea98:	ldrb	r4, [r0]
   1ea9c:	lsl	r1, r4, #24
   1eaa0:	str	r1, [sp, #44]	; 0x2c
   1eaa4:	mov	r1, #0
   1eaa8:	str	r1, [sp, #40]	; 0x28
   1eaac:	ldrd	r4, [sp, #40]	; 0x28
   1eab0:	orr	r4, r4, r2
   1eab4:	orr	r5, r5, r3
   1eab8:	mov	r2, r4
   1eabc:	mov	r3, r5
   1eac0:	add	r5, pc, #952	; 0x3b8
   1eac4:	ldrd	r4, [r5]
   1eac8:	cmp	r3, r5
   1eacc:	cmpeq	r2, r4
   1ead0:	bne	1eed0 <_start@@Base+0xc4d4>
   1ead4:	add	r1, r0, #8
   1ead8:	sub	r3, fp, r1
   1eadc:	cmp	r3, #8
   1eae0:	bls	1ef6c <_start@@Base+0xc570>
   1eae4:	ldrb	r2, [r0, #15]
   1eae8:	mov	r3, #0
   1eaec:	ldrb	r4, [r0, #14]
   1eaf0:	lsr	ip, r4, #24
   1eaf4:	str	ip, [sp, #484]	; 0x1e4
   1eaf8:	lsl	ip, r4, #8
   1eafc:	str	ip, [sp, #480]	; 0x1e0
   1eb00:	add	ip, sp, #480	; 0x1e0
   1eb04:	ldrd	r4, [ip]
   1eb08:	orr	r4, r4, r2
   1eb0c:	orr	r5, r5, r3
   1eb10:	mov	r2, r4
   1eb14:	mov	r3, r5
   1eb18:	ldrb	r4, [r0, #13]
   1eb1c:	lsr	ip, r4, #16
   1eb20:	str	ip, [sp, #404]	; 0x194
   1eb24:	lsl	ip, r4, #16
   1eb28:	str	ip, [sp, #400]	; 0x190
   1eb2c:	add	ip, sp, #400	; 0x190
   1eb30:	ldrd	r4, [ip]
   1eb34:	orr	r4, r4, r2
   1eb38:	orr	r5, r5, r3
   1eb3c:	mov	r2, r4
   1eb40:	mov	r3, r5
   1eb44:	ldrb	r4, [r0, #12]
   1eb48:	lsr	ip, r4, #8
   1eb4c:	str	ip, [sp, #332]	; 0x14c
   1eb50:	lsl	ip, r4, #24
   1eb54:	str	ip, [sp, #328]	; 0x148
   1eb58:	add	ip, sp, #328	; 0x148
   1eb5c:	ldrd	r4, [ip]
   1eb60:	orr	r4, r4, r2
   1eb64:	orr	r5, r5, r3
   1eb68:	mov	r2, r4
   1eb6c:	mov	r3, r5
   1eb70:	ldrb	ip, [r0, #11]
   1eb74:	str	ip, [sp, #356]	; 0x164
   1eb78:	mov	ip, #0
   1eb7c:	str	ip, [sp, #352]	; 0x160
   1eb80:	add	ip, sp, #352	; 0x160
   1eb84:	ldrd	r4, [ip]
   1eb88:	orr	r4, r4, r2
   1eb8c:	orr	r5, r5, r3
   1eb90:	mov	r2, r4
   1eb94:	mov	r3, r5
   1eb98:	ldrb	r4, [r0, #10]
   1eb9c:	lsl	ip, r4, #8
   1eba0:	str	ip, [sp, #292]	; 0x124
   1eba4:	mov	ip, #0
   1eba8:	str	ip, [sp, #288]	; 0x120
   1ebac:	add	ip, sp, #288	; 0x120
   1ebb0:	ldrd	r4, [ip]
   1ebb4:	orr	r4, r4, r2
   1ebb8:	orr	r5, r5, r3
   1ebbc:	mov	r2, r4
   1ebc0:	mov	r3, r5
   1ebc4:	ldrb	r4, [r0, #9]
   1ebc8:	lsl	ip, r4, #16
   1ebcc:	str	ip, [sp, #244]	; 0xf4
   1ebd0:	mov	ip, #0
   1ebd4:	str	ip, [sp, #240]	; 0xf0
   1ebd8:	ldrd	r4, [sp, #240]	; 0xf0
   1ebdc:	orr	r4, r4, r2
   1ebe0:	orr	r5, r5, r3
   1ebe4:	mov	r2, r4
   1ebe8:	mov	r3, r5
   1ebec:	ldrb	r4, [r0, #8]
   1ebf0:	lsl	ip, r4, #24
   1ebf4:	str	ip, [sp, #196]	; 0xc4
   1ebf8:	mov	ip, #0
   1ebfc:	str	ip, [sp, #192]	; 0xc0
   1ec00:	ldrd	r4, [sp, #192]	; 0xc0
   1ec04:	orr	r4, r4, r2
   1ec08:	orr	r5, r5, r3
   1ec0c:	mov	r2, r4
   1ec10:	mov	r3, r5
   1ec14:	add	r5, pc, #620	; 0x26c
   1ec18:	ldrd	r4, [r5]
   1ec1c:	cmp	r3, r5
   1ec20:	cmpeq	r2, r4
   1ec24:	bne	1eed4 <_start@@Base+0xc4d8>
   1ec28:	add	r5, r0, #16
   1ec2c:	sub	r4, fp, r5
   1ec30:	cmp	r4, #8
   1ec34:	bls	1f0a0 <_start@@Base+0xc6a4>
   1ec38:	ldrb	r2, [r0, #23]
   1ec3c:	mov	r3, #0
   1ec40:	ldrb	r6, [r0, #22]
   1ec44:	lsr	r1, r6, #24
   1ec48:	str	r1, [sp, #596]	; 0x254
   1ec4c:	lsl	r1, r6, #8
   1ec50:	str	r1, [sp, #592]	; 0x250
   1ec54:	add	r1, sp, #592	; 0x250
   1ec58:	ldrd	r6, [r1]
   1ec5c:	orr	r6, r6, r2
   1ec60:	orr	r7, r7, r3
   1ec64:	mov	r2, r6
   1ec68:	mov	r3, r7
   1ec6c:	ldrb	r6, [r0, #21]
   1ec70:	lsr	r1, r6, #16
   1ec74:	str	r1, [sp, #556]	; 0x22c
   1ec78:	lsl	r1, r6, #16
   1ec7c:	str	r1, [sp, #552]	; 0x228
   1ec80:	add	r1, sp, #552	; 0x228
   1ec84:	ldrd	r6, [r1]
   1ec88:	orr	r6, r6, r2
   1ec8c:	orr	r7, r7, r3
   1ec90:	mov	r2, r6
   1ec94:	mov	r3, r7
   1ec98:	ldrb	r6, [r0, #20]
   1ec9c:	lsr	r1, r6, #8
   1eca0:	str	r1, [sp, #492]	; 0x1ec
   1eca4:	lsl	r1, r6, #24
   1eca8:	str	r1, [sp, #488]	; 0x1e8
   1ecac:	add	r1, sp, #488	; 0x1e8
   1ecb0:	ldrd	r6, [r1]
   1ecb4:	orr	r6, r6, r2
   1ecb8:	orr	r7, r7, r3
   1ecbc:	mov	r2, r6
   1ecc0:	mov	r3, r7
   1ecc4:	ldrb	r1, [r0, #19]
   1ecc8:	str	r1, [sp, #508]	; 0x1fc
   1eccc:	mov	r1, #0
   1ecd0:	str	r1, [sp, #504]	; 0x1f8
   1ecd4:	add	r1, sp, #504	; 0x1f8
   1ecd8:	ldrd	r6, [r1]
   1ecdc:	orr	r6, r6, r2
   1ece0:	orr	r7, r7, r3
   1ece4:	mov	r2, r6
   1ece8:	mov	r3, r7
   1ecec:	ldrb	r6, [r0, #18]
   1ecf0:	lsl	r1, r6, #8
   1ecf4:	str	r1, [sp, #468]	; 0x1d4
   1ecf8:	mov	r1, #0
   1ecfc:	str	r1, [sp, #464]	; 0x1d0
   1ed00:	add	r1, sp, #464	; 0x1d0
   1ed04:	ldrd	r6, [r1]
   1ed08:	orr	r6, r6, r2
   1ed0c:	orr	r7, r7, r3
   1ed10:	mov	r2, r6
   1ed14:	mov	r3, r7
   1ed18:	ldrb	r6, [r0, #17]
   1ed1c:	lsl	r1, r6, #16
   1ed20:	str	r1, [sp, #444]	; 0x1bc
   1ed24:	mov	r1, #0
   1ed28:	str	r1, [sp, #440]	; 0x1b8
   1ed2c:	add	r1, sp, #440	; 0x1b8
   1ed30:	ldrd	r6, [r1]
   1ed34:	orr	r6, r6, r2
   1ed38:	orr	r7, r7, r3
   1ed3c:	mov	r2, r6
   1ed40:	mov	r3, r7
   1ed44:	ldrb	r6, [r0, #16]
   1ed48:	add	r1, pc, #320	; 0x140
   1ed4c:	ldrd	r0, [r1]
   1ed50:	lsl	ip, r6, #24
   1ed54:	str	ip, [sp, #388]	; 0x184
   1ed58:	mov	ip, #0
   1ed5c:	str	ip, [sp, #384]	; 0x180
   1ed60:	add	ip, sp, #384	; 0x180
   1ed64:	ldrd	r6, [ip]
   1ed68:	orr	r6, r6, r2
   1ed6c:	orr	r7, r7, r3
   1ed70:	mov	r2, r6
   1ed74:	mov	r3, r7
   1ed78:	ldr	r6, [pc, #296]	; 1eea8 <_start@@Base+0xc4ac>
   1ed7c:	mvn	r7, #0
   1ed80:	and	r7, r7, r3
   1ed84:	and	r6, r6, r2
   1ed88:	cmp	r7, r1
   1ed8c:	cmpeq	r6, r0
   1ed90:	beq	1f124 <_start@@Base+0xc728>
   1ed94:	add	r1, pc, #252	; 0xfc
   1ed98:	ldrd	r0, [r1]
   1ed9c:	and	r2, r2, #-16777216	; 0xff000000
   1eda0:	cmp	r3, r1
   1eda4:	cmpeq	r2, r0
   1eda8:	movne	r9, #1
   1edac:	moveq	r9, #0
   1edb0:	cmp	r4, #5
   1edb4:	orrle	r9, r9, #1
   1edb8:	cmp	r9, #0
   1edbc:	beq	2046c <_start@@Base+0xda70>
   1edc0:	add	r3, pc, #216	; 0xd8
   1edc4:	ldrd	r2, [r3]
   1edc8:	cmp	r7, r3
   1edcc:	cmpeq	r6, r2
   1edd0:	bne	1eddc <_start@@Base+0xc3e0>
   1edd4:	cmp	r4, #6
   1edd8:	bgt	2021c <_start@@Base+0xd820>
   1eddc:	mov	r1, r5
   1ede0:	mov	r2, fp
   1ede4:	mov	r0, sl
   1ede8:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1edec:	mov	r8, r0
   1edf0:	sub	r3, fp, r8
   1edf4:	cmp	r3, #1
   1edf8:	ble	1ee0c <_start@@Base+0xc410>
   1edfc:	ldrb	r3, [r8]
   1ee00:	cmp	r3, #32
   1ee04:	bhi	1ee20 <_start@@Base+0xc424>
   1ee08:	beq	1f028 <_start@@Base+0xc62c>
   1ee0c:	mov	r1, r8
   1ee10:	mov	r2, fp
   1ee14:	mov	r0, sl
   1ee18:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1ee1c:	mov	r8, r0
   1ee20:	cmp	fp, r8
   1ee24:	beq	1f040 <_start@@Base+0xc644>
   1ee28:	ldrb	r3, [r8]
   1ee2c:	cmp	r3, #44	; 0x2c
   1ee30:	beq	1f050 <_start@@Base+0xc654>
   1ee34:	mov	r3, #0
   1ee38:	str	r3, [sp, #648]	; 0x288
   1ee3c:	ldrb	r3, [r8]
   1ee40:	cmp	r3, #125	; 0x7d
   1ee44:	beq	1eff0 <_start@@Base+0xc5f4>
   1ee48:	mov	r3, #10
   1ee4c:	mov	r1, r8
   1ee50:	mov	r2, fp
   1ee54:	mov	r0, sl
   1ee58:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1ee5c:	ldr	r3, [sp, #648]	; 0x288
   1ee60:	cmp	r3, #0
   1ee64:	bne	1e964 <_start@@Base+0xbf68>
   1ee68:	mov	r9, r0
   1ee6c:	ldr	r1, [sl, #24]
   1ee70:	cmp	r1, #0
   1ee74:	beq	213cc <_start@@Base+0xe9d0>
   1ee78:	b	1eeb4 <_start@@Base+0xc4b8>
   1ee7c:	nop			; (mov r0, r0)
   1ee80:	bvs	1cfac40 <__bss_end__@@Base+0x1cbd86c>
   1ee84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ee88:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1ee8c:	rsbsvc	r6, r2, r6, ror #10
   1ee90:	ldrvs	r0, [r2, -r0]!
   1ee94:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ee98:	strvs	r0, [r0, -r0]
   1ee9c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1eea0:	ldrvs	r0, [r3, -r0]!
   1eea4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1eea8:			; <UNDEFINED> instruction: 0xffff0000
   1eeac:	andeq	sp, r1, r4, lsl #30
   1eeb0:	andeq	sp, r1, r0, lsl #30
   1eeb4:	mov	r1, r9
   1eeb8:	mov	r3, #33	; 0x21
   1eebc:	mov	r2, fp
   1eec0:	mov	r0, sl
   1eec4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1eec8:	mov	r4, r0
   1eecc:	b	1e3a4 <_start@@Base+0xb9a8>
   1eed0:	mov	r1, r0
   1eed4:	mov	r2, fp
   1eed8:	mov	r0, sl
   1eedc:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1eee0:	mov	r8, r0
   1eee4:	b	1edf0 <_start@@Base+0xc3f4>
   1eee8:	sub	r3, r3, #1
   1eeec:	cmp	r3, #7
   1eef0:	addls	pc, pc, r3, lsl #2
   1eef4:	b	1eed0 <_start@@Base+0xc4d4>
   1eef8:	b	1ef60 <_start@@Base+0xc564>
   1eefc:	b	1ef54 <_start@@Base+0xc558>
   1ef00:	b	1ef48 <_start@@Base+0xc54c>
   1ef04:	b	1ef3c <_start@@Base+0xc540>
   1ef08:	b	1ef30 <_start@@Base+0xc534>
   1ef0c:	b	1ef24 <_start@@Base+0xc528>
   1ef10:	b	1ef18 <_start@@Base+0xc51c>
   1ef14:	b	1e9a0 <_start@@Base+0xbfa4>
   1ef18:	mov	r2, #0
   1ef1c:	mov	r3, #0
   1ef20:	b	1e9a8 <_start@@Base+0xbfac>
   1ef24:	mov	r2, #0
   1ef28:	mov	r3, #0
   1ef2c:	b	1e9d4 <_start@@Base+0xbfd8>
   1ef30:	mov	r2, #0
   1ef34:	mov	r3, #0
   1ef38:	b	1e9fc <_start@@Base+0xc000>
   1ef3c:	mov	r2, #0
   1ef40:	mov	r3, #0
   1ef44:	b	1ea24 <_start@@Base+0xc028>
   1ef48:	mov	r2, #0
   1ef4c:	mov	r3, #0
   1ef50:	b	1ea48 <_start@@Base+0xc04c>
   1ef54:	mov	r2, #0
   1ef58:	mov	r3, #0
   1ef5c:	b	1ea70 <_start@@Base+0xc074>
   1ef60:	mov	r2, #0
   1ef64:	mov	r3, #0
   1ef68:	b	1ea98 <_start@@Base+0xc09c>
   1ef6c:	sub	r3, r3, #1
   1ef70:	cmp	r3, #7
   1ef74:	addls	pc, pc, r3, lsl #2
   1ef78:	b	1eed4 <_start@@Base+0xc4d8>
   1ef7c:	b	1efe4 <_start@@Base+0xc5e8>
   1ef80:	b	1efd8 <_start@@Base+0xc5dc>
   1ef84:	b	1efcc <_start@@Base+0xc5d0>
   1ef88:	b	1efc0 <_start@@Base+0xc5c4>
   1ef8c:	b	1efb4 <_start@@Base+0xc5b8>
   1ef90:	b	1efa8 <_start@@Base+0xc5ac>
   1ef94:	b	1ef9c <_start@@Base+0xc5a0>
   1ef98:	b	1eae4 <_start@@Base+0xc0e8>
   1ef9c:	mov	r2, #0
   1efa0:	mov	r3, #0
   1efa4:	b	1eaec <_start@@Base+0xc0f0>
   1efa8:	mov	r2, #0
   1efac:	mov	r3, #0
   1efb0:	b	1eb18 <_start@@Base+0xc11c>
   1efb4:	mov	r2, #0
   1efb8:	mov	r3, #0
   1efbc:	b	1eb44 <_start@@Base+0xc148>
   1efc0:	mov	r2, #0
   1efc4:	mov	r3, #0
   1efc8:	b	1eb70 <_start@@Base+0xc174>
   1efcc:	mov	r2, #0
   1efd0:	mov	r3, #0
   1efd4:	b	1eb98 <_start@@Base+0xc19c>
   1efd8:	mov	r2, #0
   1efdc:	mov	r3, #0
   1efe0:	b	1ebc4 <_start@@Base+0xc1c8>
   1efe4:	mov	r2, #0
   1efe8:	mov	r3, #0
   1efec:	b	1ebec <_start@@Base+0xc1f0>
   1eff0:	add	r0, r8, #1
   1eff4:	sub	r3, fp, r0
   1eff8:	cmp	r3, #1
   1effc:	ble	1f010 <_start@@Base+0xc614>
   1f000:	ldrb	r3, [r8, #1]
   1f004:	cmp	r3, #32
   1f008:	bhi	1ee68 <_start@@Base+0xc46c>
   1f00c:	beq	1fc38 <_start@@Base+0xd23c>
   1f010:	mov	r1, r0
   1f014:	mov	r2, fp
   1f018:	mov	r0, sl
   1f01c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1f020:	ldr	r3, [sp, #648]	; 0x288
   1f024:	b	1e95c <_start@@Base+0xbf60>
   1f028:	ldrb	r3, [r8, #1]
   1f02c:	cmp	r3, #32
   1f030:	addhi	r8, r8, #1
   1f034:	bls	1ee0c <_start@@Base+0xc410>
   1f038:	cmp	fp, r8
   1f03c:	bne	1ee28 <_start@@Base+0xc42c>
   1f040:	mov	r3, #0
   1f044:	str	r3, [sp, #648]	; 0x288
   1f048:	mov	r9, fp
   1f04c:	b	1ee6c <_start@@Base+0xc470>
   1f050:	add	r0, r8, #1
   1f054:	sub	r3, fp, r0
   1f058:	cmp	r3, #1
   1f05c:	ble	1f070 <_start@@Base+0xc674>
   1f060:	ldrb	r3, [r8, #1]
   1f064:	cmp	r3, #32
   1f068:	bhi	1f080 <_start@@Base+0xc684>
   1f06c:	beq	202ec <_start@@Base+0xd8f0>
   1f070:	mov	r1, r0
   1f074:	mov	r2, fp
   1f078:	mov	r0, sl
   1f07c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1f080:	cmp	fp, r0
   1f084:	beq	214b4 <_start@@Base+0xeab8>
   1f088:	ldrb	r3, [r0]
   1f08c:	cmp	r3, #125	; 0x7d
   1f090:	beq	205a4 <_start@@Base+0xdba8>
   1f094:	mov	r3, #1
   1f098:	str	r3, [sp, #648]	; 0x288
   1f09c:	b	1e964 <_start@@Base+0xbf68>
   1f0a0:	sub	r3, r4, #1
   1f0a4:	cmp	r3, #7
   1f0a8:	addls	pc, pc, r3, lsl #2
   1f0ac:	b	1eddc <_start@@Base+0xc3e0>
   1f0b0:	b	1f118 <_start@@Base+0xc71c>
   1f0b4:	b	1f10c <_start@@Base+0xc710>
   1f0b8:	b	1f100 <_start@@Base+0xc704>
   1f0bc:	b	1f0f4 <_start@@Base+0xc6f8>
   1f0c0:	b	1f0e8 <_start@@Base+0xc6ec>
   1f0c4:	b	1f0dc <_start@@Base+0xc6e0>
   1f0c8:	b	1f0d0 <_start@@Base+0xc6d4>
   1f0cc:	b	1ec38 <_start@@Base+0xc23c>
   1f0d0:	mov	r2, #0
   1f0d4:	mov	r3, #0
   1f0d8:	b	1ec40 <_start@@Base+0xc244>
   1f0dc:	mov	r2, #0
   1f0e0:	mov	r3, #0
   1f0e4:	b	1ec6c <_start@@Base+0xc270>
   1f0e8:	mov	r2, #0
   1f0ec:	mov	r3, #0
   1f0f0:	b	1ec98 <_start@@Base+0xc29c>
   1f0f4:	mov	r2, #0
   1f0f8:	mov	r3, #0
   1f0fc:	b	1ecc4 <_start@@Base+0xc2c8>
   1f100:	mov	r2, #0
   1f104:	mov	r3, #0
   1f108:	b	1ecec <_start@@Base+0xc2f0>
   1f10c:	mov	r2, #0
   1f110:	mov	r3, #0
   1f114:	b	1ed18 <_start@@Base+0xc31c>
   1f118:	mov	r2, #0
   1f11c:	mov	r3, #0
   1f120:	b	1ed44 <_start@@Base+0xc348>
   1f124:	cmp	r4, #6
   1f128:	ble	1eddc <_start@@Base+0xc3e0>
   1f12c:	mov	r3, #6
   1f130:	mov	r2, fp
   1f134:	mov	r1, r5
   1f138:	mov	r0, sl
   1f13c:	bl	18084 <_start@@Base+0x5688>
   1f140:	cmp	r5, r0
   1f144:	mov	r8, r0
   1f148:	beq	1eddc <_start@@Base+0xc3e0>
   1f14c:	ldr	r3, [sp, #384]	; 0x180
   1f150:	mov	r1, #2
   1f154:	ldr	r0, [sl]
   1f158:	str	r3, [sp, #652]	; 0x28c
   1f15c:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1f160:	cmp	r0, #0
   1f164:	bne	1f520 <_start@@Base+0xcb24>
   1f168:	mov	r1, r8
   1f16c:	add	r3, sp, #656	; 0x290
   1f170:	mov	r2, fp
   1f174:	mov	r0, sl
   1f178:	bl	133ac <_start@@Base+0x9b0>
   1f17c:	ldr	r9, [pc, #-728]	; 1eeac <_start@@Base+0xc4b0>
   1f180:	ldr	r3, [pc, #-728]	; 1eeb0 <_start@@Base+0xc4b4>
   1f184:	add	r9, pc, r9
   1f188:	add	r3, pc, r3
   1f18c:	add	r2, sp, #576	; 0x240
   1f190:	add	r9, r9, #600	; 0x258
   1f194:	add	r3, r3, #588	; 0x24c
   1f198:	str	r3, [sp, #168]	; 0xa8
   1f19c:	mov	r7, r9
   1f1a0:	ldr	r3, [sp, #656]	; 0x290
   1f1a4:	ldrd	r8, [r2]
   1f1a8:	cmp	r3, #0
   1f1ac:	beq	1f508 <_start@@Base+0xcb0c>
   1f1b0:	mov	r1, r0
   1f1b4:	cmp	fp, r1
   1f1b8:	beq	1f564 <_start@@Base+0xcb68>
   1f1bc:	ldrb	r3, [r1]
   1f1c0:	cmp	r3, #34	; 0x22
   1f1c4:	moveq	r3, #0
   1f1c8:	addeq	r1, r1, #1
   1f1cc:	streq	r3, [sl, #12]
   1f1d0:	beq	1f1e4 <_start@@Base+0xc7e8>
   1f1d4:	cmp	r3, #46	; 0x2e
   1f1d8:	movne	r3, #1
   1f1dc:	strne	r3, [sl, #12]
   1f1e0:	beq	1f84c <_start@@Base+0xce50>
   1f1e4:	sub	r3, fp, r1
   1f1e8:	cmp	r3, #8
   1f1ec:	bls	1f578 <_start@@Base+0xcb7c>
   1f1f0:	ldrb	r2, [r1, #7]
   1f1f4:	mov	r3, #0
   1f1f8:	ldrb	r4, [r1, #6]
   1f1fc:	lsr	r0, r4, #24
   1f200:	str	r0, [sp, #340]	; 0x154
   1f204:	lsl	r0, r4, #8
   1f208:	str	r0, [sp, #336]	; 0x150
   1f20c:	add	r0, sp, #336	; 0x150
   1f210:	ldrd	r4, [r0]
   1f214:	orr	r4, r4, r2
   1f218:	orr	r5, r5, r3
   1f21c:	mov	r2, r4
   1f220:	mov	r3, r5
   1f224:	ldrb	r4, [r1, #5]
   1f228:	lsr	r0, r4, #16
   1f22c:	str	r0, [sp, #204]	; 0xcc
   1f230:	lsl	r0, r4, #16
   1f234:	str	r0, [sp, #200]	; 0xc8
   1f238:	ldrd	r4, [sp, #200]	; 0xc8
   1f23c:	orr	r4, r4, r2
   1f240:	orr	r5, r5, r3
   1f244:	mov	r2, r4
   1f248:	mov	r3, r5
   1f24c:	ldrb	r4, [r1, #4]
   1f250:	lsr	r0, r4, #8
   1f254:	str	r0, [sp, #132]	; 0x84
   1f258:	lsl	r0, r4, #24
   1f25c:	str	r0, [sp, #128]	; 0x80
   1f260:	ldrd	r4, [sp, #128]	; 0x80
   1f264:	orr	r4, r4, r2
   1f268:	orr	r5, r5, r3
   1f26c:	mov	r2, r4
   1f270:	mov	r3, r5
   1f274:	ldrb	r0, [r1, #3]
   1f278:	str	r0, [sp, #148]	; 0x94
   1f27c:	mov	r0, #0
   1f280:	str	r0, [sp, #144]	; 0x90
   1f284:	ldrd	r4, [sp, #144]	; 0x90
   1f288:	orr	r4, r4, r2
   1f28c:	orr	r5, r5, r3
   1f290:	mov	r2, r4
   1f294:	mov	r3, r5
   1f298:	ldrb	r4, [r1, #2]
   1f29c:	lsl	r0, r4, #8
   1f2a0:	str	r0, [sp, #100]	; 0x64
   1f2a4:	mov	r0, #0
   1f2a8:	str	r0, [sp, #96]	; 0x60
   1f2ac:	ldrd	r4, [sp, #96]	; 0x60
   1f2b0:	orr	r4, r4, r2
   1f2b4:	orr	r5, r5, r3
   1f2b8:	mov	r2, r4
   1f2bc:	mov	r3, r5
   1f2c0:	ldrb	r4, [r1, #1]
   1f2c4:	lsl	r0, r4, #16
   1f2c8:	str	r0, [sp, #76]	; 0x4c
   1f2cc:	mov	r0, #0
   1f2d0:	str	r0, [sp, #72]	; 0x48
   1f2d4:	ldrd	r4, [sp, #72]	; 0x48
   1f2d8:	orr	r4, r4, r2
   1f2dc:	orr	r5, r5, r3
   1f2e0:	mov	r2, r4
   1f2e4:	mov	r3, r5
   1f2e8:	ldrb	r4, [r1]
   1f2ec:	mov	r8, #0
   1f2f0:	orr	r2, r2, r8
   1f2f4:	lsl	r9, r4, #24
   1f2f8:	add	r5, pc, #952	; 0x3b8
   1f2fc:	ldrd	r4, [r5]
   1f300:	orr	r3, r3, r9
   1f304:	cmp	r3, r5
   1f308:	cmpeq	r2, r4
   1f30c:	bne	1f564 <_start@@Base+0xcb68>
   1f310:	add	r6, r1, #8
   1f314:	sub	ip, fp, r6
   1f318:	cmp	ip, #8
   1f31c:	bls	1f5fc <_start@@Base+0xcc00>
   1f320:	ldrb	r4, [r1, #15]
   1f324:	mov	r5, #0
   1f328:	ldrb	r2, [r1, #14]
   1f32c:	lsl	r3, r2, #8
   1f330:	str	r3, [sp, #496]	; 0x1f0
   1f334:	add	r3, sp, #496	; 0x1f0
   1f338:	lsr	r0, r2, #24
   1f33c:	str	r0, [sp, #500]	; 0x1f4
   1f340:	ldrd	r2, [r3]
   1f344:	orr	r2, r2, r4
   1f348:	orr	r3, r3, r5
   1f34c:	mov	r4, r2
   1f350:	mov	r5, r3
   1f354:	ldrb	r2, [r1, #13]
   1f358:	lsl	r3, r2, #16
   1f35c:	str	r3, [sp, #416]	; 0x1a0
   1f360:	add	r3, sp, #416	; 0x1a0
   1f364:	lsr	r0, r2, #16
   1f368:	str	r0, [sp, #420]	; 0x1a4
   1f36c:	ldrd	r2, [r3]
   1f370:	orr	r2, r2, r4
   1f374:	orr	r3, r3, r5
   1f378:	mov	r4, r2
   1f37c:	mov	r5, r3
   1f380:	ldrb	r2, [r1, #12]
   1f384:	lsl	r3, r2, #24
   1f388:	str	r3, [sp, #344]	; 0x158
   1f38c:	add	r3, sp, #344	; 0x158
   1f390:	lsr	r0, r2, #8
   1f394:	str	r0, [sp, #348]	; 0x15c
   1f398:	ldrd	r2, [r3]
   1f39c:	orr	r2, r2, r4
   1f3a0:	orr	r3, r3, r5
   1f3a4:	ldrb	r0, [r1, #11]
   1f3a8:	str	r0, [sp, #372]	; 0x174
   1f3ac:	mov	r0, #0
   1f3b0:	str	r0, [sp, #368]	; 0x170
   1f3b4:	add	r0, sp, #368	; 0x170
   1f3b8:	ldrd	r4, [r0]
   1f3bc:	orr	r4, r4, r2
   1f3c0:	orr	r5, r5, r3
   1f3c4:	mov	r2, r4
   1f3c8:	mov	r3, r5
   1f3cc:	ldrb	r4, [r1, #10]
   1f3d0:	lsl	r0, r4, #8
   1f3d4:	str	r0, [sp, #300]	; 0x12c
   1f3d8:	mov	r0, #0
   1f3dc:	str	r0, [sp, #296]	; 0x128
   1f3e0:	add	r0, sp, #296	; 0x128
   1f3e4:	ldrd	r4, [r0]
   1f3e8:	orr	r4, r4, r2
   1f3ec:	orr	r5, r5, r3
   1f3f0:	mov	r2, r4
   1f3f4:	mov	r3, r5
   1f3f8:	ldrb	r4, [r1, #9]
   1f3fc:	lsl	r0, r4, #16
   1f400:	str	r0, [sp, #260]	; 0x104
   1f404:	mov	r0, #0
   1f408:	str	r0, [sp, #256]	; 0x100
   1f40c:	add	r0, sp, #256	; 0x100
   1f410:	ldrd	r4, [r0]
   1f414:	orr	r4, r4, r2
   1f418:	orr	r5, r5, r3
   1f41c:	mov	r2, r4
   1f420:	mov	r3, r5
   1f424:	ldrb	r4, [r1, #8]
   1f428:	add	r1, pc, #656	; 0x290
   1f42c:	ldrd	r0, [r1]
   1f430:	lsl	lr, r4, #24
   1f434:	str	lr, [sp, #164]	; 0xa4
   1f438:	mov	lr, #0
   1f43c:	str	lr, [sp, #160]	; 0xa0
   1f440:	ldrd	r4, [sp, #160]	; 0xa0
   1f444:	orr	r4, r4, r2
   1f448:	orr	r5, r5, r3
   1f44c:	mov	r2, r4
   1f450:	cmp	r5, r1
   1f454:	bic	r4, r4, #255	; 0xff
   1f458:	cmpeq	r4, r0
   1f45c:	beq	1f700 <_start@@Base+0xcd04>
   1f460:	add	r1, pc, #608	; 0x260
   1f464:	ldrd	r0, [r1]
   1f468:	cmp	r5, r1
   1f46c:	cmpeq	r2, r0
   1f470:	bne	1f47c <_start@@Base+0xca80>
   1f474:	cmp	ip, #8
   1f478:	bgt	1f8a8 <_start@@Base+0xceac>
   1f47c:	mov	r1, r6
   1f480:	mov	r2, fp
   1f484:	mov	r0, sl
   1f488:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1f48c:	mov	r4, r0
   1f490:	sub	r3, fp, r4
   1f494:	cmp	r3, #1
   1f498:	ble	1f4ac <_start@@Base+0xcab0>
   1f49c:	ldrb	r3, [r4]
   1f4a0:	cmp	r3, #32
   1f4a4:	bhi	1f4c0 <_start@@Base+0xcac4>
   1f4a8:	beq	1f6d0 <_start@@Base+0xccd4>
   1f4ac:	mov	r1, r4
   1f4b0:	mov	r2, fp
   1f4b4:	mov	r0, sl
   1f4b8:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1f4bc:	mov	r4, r0
   1f4c0:	cmp	fp, r4
   1f4c4:	beq	1f6e8 <_start@@Base+0xccec>
   1f4c8:	ldrb	r3, [r4]
   1f4cc:	cmp	r3, #44	; 0x2c
   1f4d0:	beq	1f7e4 <_start@@Base+0xcde8>
   1f4d4:	mov	r3, #0
   1f4d8:	str	r3, [sp, #656]	; 0x290
   1f4dc:	ldrb	r3, [r4]
   1f4e0:	cmp	r3, #125	; 0x7d
   1f4e4:	beq	1f680 <_start@@Base+0xcc84>
   1f4e8:	mov	r3, #10
   1f4ec:	mov	r1, r4
   1f4f0:	mov	r2, fp
   1f4f4:	mov	r0, sl
   1f4f8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1f4fc:	ldr	r3, [sp, #656]	; 0x290
   1f500:	cmp	r3, #0
   1f504:	bne	1f1b0 <_start@@Base+0xc7b4>
   1f508:	add	r3, sp, #576	; 0x240
   1f50c:	strd	r8, [r3]
   1f510:	mov	r8, r0
   1f514:	ldr	r3, [sl, #24]
   1f518:	cmp	r3, #0
   1f51c:	beq	21448 <_start@@Base+0xea4c>
   1f520:	mov	r1, r8
   1f524:	mov	r3, #33	; 0x21
   1f528:	mov	r2, fp
   1f52c:	mov	r0, sl
   1f530:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1f534:	ldr	r3, [sp, #652]	; 0x28c
   1f538:	cmp	r3, #0
   1f53c:	mov	r8, r0
   1f540:	beq	202c8 <_start@@Base+0xd8cc>
   1f544:	mov	r1, #1
   1f548:	ldr	r0, [sl]
   1f54c:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   1f550:	cmp	r0, #0
   1f554:	beq	202c8 <_start@@Base+0xd8cc>
   1f558:	ldr	r3, [sp, #652]	; 0x28c
   1f55c:	str	r3, [r0]
   1f560:	b	1edf0 <_start@@Base+0xc3f4>
   1f564:	mov	r2, fp
   1f568:	mov	r0, sl
   1f56c:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1f570:	mov	r4, r0
   1f574:	b	1f490 <_start@@Base+0xca94>
   1f578:	sub	r3, r3, #1
   1f57c:	cmp	r3, #7
   1f580:	addls	pc, pc, r3, lsl #2
   1f584:	b	1f564 <_start@@Base+0xcb68>
   1f588:	b	1f5f0 <_start@@Base+0xcbf4>
   1f58c:	b	1f5e4 <_start@@Base+0xcbe8>
   1f590:	b	1f5d8 <_start@@Base+0xcbdc>
   1f594:	b	1f5cc <_start@@Base+0xcbd0>
   1f598:	b	1f5c0 <_start@@Base+0xcbc4>
   1f59c:	b	1f5b4 <_start@@Base+0xcbb8>
   1f5a0:	b	1f5a8 <_start@@Base+0xcbac>
   1f5a4:	b	1f1f0 <_start@@Base+0xc7f4>
   1f5a8:	mov	r2, #0
   1f5ac:	mov	r3, #0
   1f5b0:	b	1f1f8 <_start@@Base+0xc7fc>
   1f5b4:	mov	r2, #0
   1f5b8:	mov	r3, #0
   1f5bc:	b	1f224 <_start@@Base+0xc828>
   1f5c0:	mov	r2, #0
   1f5c4:	mov	r3, #0
   1f5c8:	b	1f24c <_start@@Base+0xc850>
   1f5cc:	mov	r2, #0
   1f5d0:	mov	r3, #0
   1f5d4:	b	1f274 <_start@@Base+0xc878>
   1f5d8:	mov	r2, #0
   1f5dc:	mov	r3, #0
   1f5e0:	b	1f298 <_start@@Base+0xc89c>
   1f5e4:	mov	r2, #0
   1f5e8:	mov	r3, #0
   1f5ec:	b	1f2c0 <_start@@Base+0xc8c4>
   1f5f0:	mov	r2, #0
   1f5f4:	mov	r3, #0
   1f5f8:	b	1f2e8 <_start@@Base+0xc8ec>
   1f5fc:	sub	r3, ip, #1
   1f600:	cmp	r3, #7
   1f604:	addls	pc, pc, r3, lsl #2
   1f608:	b	1f47c <_start@@Base+0xca80>
   1f60c:	b	1f674 <_start@@Base+0xcc78>
   1f610:	b	1f668 <_start@@Base+0xcc6c>
   1f614:	b	1f65c <_start@@Base+0xcc60>
   1f618:	b	1f650 <_start@@Base+0xcc54>
   1f61c:	b	1f644 <_start@@Base+0xcc48>
   1f620:	b	1f638 <_start@@Base+0xcc3c>
   1f624:	b	1f62c <_start@@Base+0xcc30>
   1f628:	b	1f320 <_start@@Base+0xc924>
   1f62c:	mov	r4, #0
   1f630:	mov	r5, #0
   1f634:	b	1f328 <_start@@Base+0xc92c>
   1f638:	mov	r4, #0
   1f63c:	mov	r5, #0
   1f640:	b	1f354 <_start@@Base+0xc958>
   1f644:	mov	r4, #0
   1f648:	mov	r5, #0
   1f64c:	b	1f380 <_start@@Base+0xc984>
   1f650:	mov	r2, #0
   1f654:	mov	r3, #0
   1f658:	b	1f3a4 <_start@@Base+0xc9a8>
   1f65c:	mov	r2, #0
   1f660:	mov	r3, #0
   1f664:	b	1f3cc <_start@@Base+0xc9d0>
   1f668:	mov	r2, #0
   1f66c:	mov	r3, #0
   1f670:	b	1f3f8 <_start@@Base+0xc9fc>
   1f674:	mov	r2, #0
   1f678:	mov	r3, #0
   1f67c:	b	1f424 <_start@@Base+0xca28>
   1f680:	add	r0, r4, #1
   1f684:	sub	r3, fp, r0
   1f688:	cmp	r3, #1
   1f68c:	ble	1f6a0 <_start@@Base+0xcca4>
   1f690:	ldrb	r3, [r4, #1]
   1f694:	cmp	r3, #32
   1f698:	bhi	1f508 <_start@@Base+0xcb0c>
   1f69c:	beq	1fc4c <_start@@Base+0xd250>
   1f6a0:	mov	r1, r0
   1f6a4:	mov	r2, fp
   1f6a8:	mov	r0, sl
   1f6ac:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1f6b0:	ldr	r3, [sp, #656]	; 0x290
   1f6b4:	b	1f1a8 <_start@@Base+0xc7ac>
   1f6b8:	svcpl	0x00626262
   1f6bc:	cmnvs	r1, r1, ror #2
   1f6c0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1f6c4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1f6c8:	cmnvs	r2, pc, asr r4
   1f6cc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1f6d0:	ldrb	r3, [r4, #1]
   1f6d4:	cmp	r3, #32
   1f6d8:	addhi	r4, r4, #1
   1f6dc:	bls	1f4ac <_start@@Base+0xcab0>
   1f6e0:	cmp	fp, r4
   1f6e4:	bne	1f4c8 <_start@@Base+0xcacc>
   1f6e8:	add	r3, sp, #576	; 0x240
   1f6ec:	strd	r8, [r3]
   1f6f0:	mov	r3, #0
   1f6f4:	str	r3, [sp, #656]	; 0x290
   1f6f8:	mov	r8, fp
   1f6fc:	b	1f514 <_start@@Base+0xcb18>
   1f700:	cmp	ip, #7
   1f704:	ble	1f47c <_start@@Base+0xca80>
   1f708:	mov	r3, #7
   1f70c:	mov	r2, fp
   1f710:	mov	r1, r6
   1f714:	mov	r0, sl
   1f718:	bl	18084 <_start@@Base+0x5688>
   1f71c:	cmp	r6, r0
   1f720:	mov	r5, r0
   1f724:	beq	1f47c <_start@@Base+0xca80>
   1f728:	ldr	r1, [sp, #160]	; 0xa0
   1f72c:	mov	r2, #0
   1f730:	mov	r3, #0
   1f734:	str	r1, [sp, #660]	; 0x294
   1f738:	add	r1, sp, #664	; 0x298
   1f73c:	cmp	fp, r0
   1f740:	strd	r2, [r1]
   1f744:	add	r1, sp, #672	; 0x2a0
   1f748:	strd	r2, [r1]
   1f74c:	beq	208b8 <_start@@Base+0xdebc>
   1f750:	str	r1, [sp]
   1f754:	add	r3, sp, #660	; 0x294
   1f758:	mov	r1, r0
   1f75c:	mov	r2, fp
   1f760:	mov	r0, sl
   1f764:	bl	296fc <flatcc_json_parser_integer@@Base>
   1f768:	cmp	r5, r0
   1f76c:	mov	r4, r0
   1f770:	beq	208b8 <_start@@Base+0xdebc>
   1f774:	ldr	r1, [sp, #660]	; 0x294
   1f778:	add	r3, sp, #672	; 0x2a0
   1f77c:	cmp	r1, #0
   1f780:	ldrd	r2, [r3]
   1f784:	beq	1fc20 <_start@@Base+0xd224>
   1f788:	cmp	r3, #-2147483648	; 0x80000000
   1f78c:	cmpeq	r2, #0
   1f790:	bhi	20650 <_start@@Base+0xdc54>
   1f794:	rsbs	r2, r2, #0
   1f798:	rsc	r3, r3, #0
   1f79c:	add	r1, sp, #664	; 0x298
   1f7a0:	strd	r2, [r1]
   1f7a4:	orrs	r3, r2, r3
   1f7a8:	bne	1f7b8 <_start@@Base+0xcdbc>
   1f7ac:	ldr	r3, [sl, #8]
   1f7b0:	tst	r3, #2
   1f7b4:	beq	1f490 <_start@@Base+0xca94>
   1f7b8:	mov	r3, #8
   1f7bc:	mov	r2, r3
   1f7c0:	mov	r1, #0
   1f7c4:	ldr	r0, [sl]
   1f7c8:	bl	25728 <flatcc_builder_table_add@@Base>
   1f7cc:	cmp	r0, #0
   1f7d0:	beq	206c4 <_start@@Base+0xdcc8>
   1f7d4:	add	r3, sp, #664	; 0x298
   1f7d8:	ldrd	r2, [r3]
   1f7dc:	strd	r2, [r0]
   1f7e0:	b	1f490 <_start@@Base+0xca94>
   1f7e4:	add	r1, r4, #1
   1f7e8:	sub	r3, fp, r1
   1f7ec:	cmp	r3, #1
   1f7f0:	ble	1f804 <_start@@Base+0xce08>
   1f7f4:	ldrb	r3, [r4, #1]
   1f7f8:	cmp	r3, #32
   1f7fc:	bhi	1f814 <_start@@Base+0xce18>
   1f800:	beq	20328 <_start@@Base+0xd92c>
   1f804:	mov	r2, fp
   1f808:	mov	r0, sl
   1f80c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1f810:	mov	r1, r0
   1f814:	cmp	fp, r1
   1f818:	beq	21508 <_start@@Base+0xeb0c>
   1f81c:	ldrb	r3, [r1]
   1f820:	cmp	r3, #125	; 0x7d
   1f824:	beq	20610 <_start@@Base+0xdc14>
   1f828:	mov	r3, #1
   1f82c:	str	r3, [sp, #656]	; 0x290
   1f830:	b	1f1b4 <_start@@Base+0xc7b8>
   1f834:	mov	r1, r0
   1f838:	mov	r3, #5
   1f83c:	mov	r2, fp
   1f840:	mov	r0, sl
   1f844:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1f848:	b	1e994 <_start@@Base+0xbf98>
   1f84c:	mov	r3, #5
   1f850:	mov	r2, fp
   1f854:	mov	r0, sl
   1f858:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1f85c:	mov	r1, r0
   1f860:	b	1f1e4 <_start@@Base+0xc7e8>
   1f864:	ldrb	r3, [r9, #1]
   1f868:	cmp	r3, #32
   1f86c:	addhi	r9, r9, #1
   1f870:	bls	1df74 <_start@@Base+0xb578>
   1f874:	b	1df88 <_start@@Base+0xb58c>
   1f878:	sub	r3, ip, #1
   1f87c:	cmp	r3, #7
   1f880:	addls	pc, pc, r3, lsl #2
   1f884:	b	1e80c <_start@@Base+0xbe10>
   1f888:	b	2052c <_start@@Base+0xdb30>
   1f88c:	b	20524 <_start@@Base+0xdb28>
   1f890:	b	2053c <_start@@Base+0xdb40>
   1f894:	b	20534 <_start@@Base+0xdb38>
   1f898:	b	20544 <_start@@Base+0xdb48>
   1f89c:	b	2051c <_start@@Base+0xdb20>
   1f8a0:	b	1e6f4 <_start@@Base+0xbcf8>
   1f8a4:	b	1e6f4 <_start@@Base+0xbcf8>
   1f8a8:	mov	r3, #8
   1f8ac:	mov	r2, fp
   1f8b0:	mov	r1, r6
   1f8b4:	mov	r0, sl
   1f8b8:	bl	18084 <_start@@Base+0x5688>
   1f8bc:	cmp	r6, r0
   1f8c0:	mov	r5, r0
   1f8c4:	beq	1f47c <_start@@Base+0xca80>
   1f8c8:	cmp	fp, r0
   1f8cc:	ldrd	r0, [sp, #160]	; 0xa0
   1f8d0:	mov	r2, #0
   1f8d4:	mov	r3, #0
   1f8d8:	add	r1, sp, #672	; 0x2a0
   1f8dc:	str	r0, [sp, #660]	; 0x294
   1f8e0:	str	r0, [sp, #664]	; 0x298
   1f8e4:	strd	r2, [r1]
   1f8e8:	beq	20698 <_start@@Base+0xdc9c>
   1f8ec:	str	r1, [sp]
   1f8f0:	add	r3, sp, #664	; 0x298
   1f8f4:	mov	r2, fp
   1f8f8:	mov	r1, r5
   1f8fc:	mov	r0, sl
   1f900:	bl	296fc <flatcc_json_parser_integer@@Base>
   1f904:	cmp	r5, r0
   1f908:	mov	r4, r0
   1f90c:	beq	20698 <_start@@Base+0xdc9c>
   1f910:	ldr	r3, [sp, #664]	; 0x298
   1f914:	cmp	r3, #0
   1f918:	bne	20300 <_start@@Base+0xd904>
   1f91c:	add	r3, sp, #672	; 0x2a0
   1f920:	mov	r1, #0
   1f924:	ldrd	r2, [r3]
   1f928:	mvn	r0, #0
   1f92c:	cmp	r3, r1
   1f930:	cmpeq	r2, r0
   1f934:	strls	r2, [sp, #660]	; 0x294
   1f938:	bhi	20450 <_start@@Base+0xda54>
   1f93c:	cmp	r2, #0
   1f940:	bne	1f950 <_start@@Base+0xcf54>
   1f944:	ldr	r3, [sl, #8]
   1f948:	tst	r3, #2
   1f94c:	beq	1f490 <_start@@Base+0xca94>
   1f950:	mov	r3, #4
   1f954:	mov	r2, r3
   1f958:	mov	r1, #1
   1f95c:	ldr	r0, [sl]
   1f960:	bl	25728 <flatcc_builder_table_add@@Base>
   1f964:	cmp	r0, #0
   1f968:	beq	206c4 <_start@@Base+0xdcc8>
   1f96c:	ldr	r3, [sp, #660]	; 0x294
   1f970:	str	r3, [r0]
   1f974:	b	1f490 <_start@@Base+0xca94>
   1f978:	add	r4, r9, #1
   1f97c:	sub	r3, fp, r4
   1f980:	cmp	r3, #1
   1f984:	ble	1f998 <_start@@Base+0xcf9c>
   1f988:	ldrb	r3, [r9, #1]
   1f98c:	cmp	r3, #32
   1f990:	bhi	1f9ac <_start@@Base+0xcfb0>
   1f994:	beq	20904 <_start@@Base+0xdf08>
   1f998:	mov	r1, r4
   1f99c:	mov	r2, fp
   1f9a0:	mov	r0, sl
   1f9a4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   1f9a8:	mov	r4, r0
   1f9ac:	cmp	fp, r4
   1f9b0:	beq	21648 <_start@@Base+0xec4c>
   1f9b4:	ldrb	r3, [r4]
   1f9b8:	cmp	r3, #125	; 0x7d
   1f9bc:	beq	215c0 <_start@@Base+0xebc4>
   1f9c0:	mov	r3, #1
   1f9c4:	str	r3, [sp, #640]	; 0x280
   1f9c8:	b	1dd4c <_start@@Base+0xb350>
   1f9cc:	mov	r4, fp
   1f9d0:	mov	r3, #0
   1f9d4:	str	r3, [sp, #640]	; 0x280
   1f9d8:	ldr	r3, [sl, #24]
   1f9dc:	cmp	r3, #0
   1f9e0:	bne	1e3a4 <_start@@Base+0xb9a8>
   1f9e4:	mov	r1, r4
   1f9e8:	ldr	r3, [sp, #644]	; 0x284
   1f9ec:	mov	r2, fp
   1f9f0:	mov	r0, sl
   1f9f4:	bl	29e18 <flatcc_json_parser_finalize_unions@@Base>
   1f9f8:	mov	r4, r0
   1f9fc:	ldr	r0, [sl]
   1fa00:	bl	246dc <flatcc_builder_end_table@@Base>
   1fa04:	ldr	r3, [sp, #720]	; 0x2d0
   1fa08:	cmp	r0, #0
   1fa0c:	str	r0, [r3]
   1fa10:	beq	1e3a4 <_start@@Base+0xb9a8>
   1fa14:	mov	r0, r4
   1fa18:	b	1e02c <_start@@Base+0xb630>
   1fa1c:	mov	r3, #2
   1fa20:	mov	r2, fp
   1fa24:	mov	r1, r4
   1fa28:	mov	r0, sl
   1fa2c:	bl	18084 <_start@@Base+0x5688>
   1fa30:	cmp	r0, r4
   1fa34:	mov	r6, r0
   1fa38:	beq	1e308 <_start@@Base+0xb90c>
   1fa3c:	mov	r0, #0
   1fa40:	mov	r1, #0
   1fa44:	add	r2, sp, #672	; 0x2a0
   1fa48:	mov	r3, #0
   1fa4c:	cmp	fp, r6
   1fa50:	strd	r0, [r2]
   1fa54:	strb	r3, [sp, #656]	; 0x290
   1fa58:	str	r3, [sp, #664]	; 0x298
   1fa5c:	beq	20858 <_start@@Base+0xde5c>
   1fa60:	str	r2, [sp]
   1fa64:	add	r3, sp, #664	; 0x298
   1fa68:	mov	r2, fp
   1fa6c:	mov	r1, r6
   1fa70:	mov	r0, sl
   1fa74:	bl	296fc <flatcc_json_parser_integer@@Base>
   1fa78:	cmp	r6, r0
   1fa7c:	mov	r5, r0
   1fa80:	beq	20858 <_start@@Base+0xde5c>
   1fa84:	ldr	r3, [sp, #664]	; 0x298
   1fa88:	cmp	r3, #0
   1fa8c:	bne	20428 <_start@@Base+0xda2c>
   1fa90:	add	r3, sp, #672	; 0x2a0
   1fa94:	ldrd	r2, [r3]
   1fa98:	cmp	r3, #0
   1fa9c:	cmpeq	r2, #255	; 0xff
   1faa0:	uxtbls	r2, r2
   1faa4:	strbls	r2, [sp, #656]	; 0x290
   1faa8:	bhi	20500 <_start@@Base+0xdb04>
   1faac:	cmp	r2, #2
   1fab0:	bne	1fac0 <_start@@Base+0xd0c4>
   1fab4:	ldr	r3, [sl, #8]
   1fab8:	tst	r3, #2
   1fabc:	beq	1e31c <_start@@Base+0xb920>
   1fac0:	mov	r3, #1
   1fac4:	mov	r2, r3
   1fac8:	mov	r1, #2
   1facc:	ldr	r0, [sl]
   1fad0:	bl	25728 <flatcc_builder_table_add@@Base>
   1fad4:	cmp	r0, #0
   1fad8:	bne	1e6d8 <_start@@Base+0xbcdc>
   1fadc:	mov	r4, r5
   1fae0:	b	1e3a4 <_start@@Base+0xb9a8>
   1fae4:	mov	r1, r4
   1fae8:	mov	r3, #5
   1faec:	mov	r2, fp
   1faf0:	mov	r0, sl
   1faf4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1faf8:	mov	r4, r0
   1fafc:	b	1e138 <_start@@Base+0xb73c>
   1fb00:	ldr	r3, [r0, #8]
   1fb04:	mov	r2, fp
   1fb08:	tst	r3, #1
   1fb0c:	bne	202d0 <_start@@Base+0xd8d4>
   1fb10:	mov	r3, #15
   1fb14:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1fb18:	b	1e018 <_start@@Base+0xb61c>
   1fb1c:	cmp	r3, #0
   1fb20:	cmpeq	r2, #127	; 0x7f
   1fb24:	sxtbls	r2, r2
   1fb28:	strbls	r2, [sp, #656]	; 0x290
   1fb2c:	bls	1e570 <_start@@Base+0xbb74>
   1fb30:	mov	r1, r0
   1fb34:	mov	r3, #7
   1fb38:	mov	r2, fp
   1fb3c:	mov	r0, sl
   1fb40:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1fb44:	mov	r5, r0
   1fb48:	cmp	r8, r5
   1fb4c:	beq	20888 <_start@@Base+0xde8c>
   1fb50:	add	r3, sp, #656	; 0x290
   1fb54:	ldrsb	r2, [r3]
   1fb58:	b	1e570 <_start@@Base+0xbb74>
   1fb5c:	mov	r3, #5
   1fb60:	mov	r2, fp
   1fb64:	mov	r1, r4
   1fb68:	mov	r0, sl
   1fb6c:	bl	18084 <_start@@Base+0x5688>
   1fb70:	cmp	r0, r4
   1fb74:	mov	r9, r0
   1fb78:	beq	1e2c0 <_start@@Base+0xb8c4>
   1fb7c:	mov	r2, #0
   1fb80:	mov	r3, #0
   1fb84:	add	r1, sp, #672	; 0x2a0
   1fb88:	cmp	fp, r0
   1fb8c:	strb	r8, [sp, #656]	; 0x290
   1fb90:	str	r8, [sp, #664]	; 0x298
   1fb94:	strd	r2, [r1]
   1fb98:	beq	2147c <_start@@Base+0xea80>
   1fb9c:	str	r1, [sp]
   1fba0:	add	r3, sp, #664	; 0x298
   1fba4:	mov	r1, r0
   1fba8:	mov	r2, fp
   1fbac:	mov	r0, sl
   1fbb0:	bl	296fc <flatcc_json_parser_integer@@Base>
   1fbb4:	cmp	r9, r0
   1fbb8:	mov	r5, r0
   1fbbc:	beq	2147c <_start@@Base+0xea80>
   1fbc0:	ldr	r1, [sp, #664]	; 0x298
   1fbc4:	add	r3, sp, #672	; 0x2a0
   1fbc8:	cmp	r1, #0
   1fbcc:	ldrd	r2, [r3]
   1fbd0:	beq	1fc68 <_start@@Base+0xd26c>
   1fbd4:	cmp	r3, #0
   1fbd8:	cmpeq	r2, #128	; 0x80
   1fbdc:	rsbls	r2, r2, #0
   1fbe0:	sxtbls	r2, r2
   1fbe4:	strbls	r2, [sp, #656]	; 0x290
   1fbe8:	bhi	208e8 <_start@@Base+0xdeec>
   1fbec:	cmp	r2, #2
   1fbf0:	bne	1fc00 <_start@@Base+0xd204>
   1fbf4:	ldr	r3, [sl, #8]
   1fbf8:	tst	r3, #2
   1fbfc:	beq	1e31c <_start@@Base+0xb920>
   1fc00:	mov	r3, #1
   1fc04:	mov	r2, r3
   1fc08:	mov	r1, #0
   1fc0c:	ldr	r0, [sl]
   1fc10:	bl	25728 <flatcc_builder_table_add@@Base>
   1fc14:	cmp	r0, #0
   1fc18:	bne	1e5a0 <_start@@Base+0xbba4>
   1fc1c:	b	1fadc <_start@@Base+0xd0e0>
   1fc20:	cmp	r2, #0
   1fc24:	sbcs	r1, r3, #0
   1fc28:	blt	21624 <_start@@Base+0xec28>
   1fc2c:	add	r1, sp, #664	; 0x298
   1fc30:	strd	r2, [r1]
   1fc34:	b	1f7a4 <_start@@Base+0xcda8>
   1fc38:	ldrb	r3, [r8, #2]
   1fc3c:	cmp	r3, #32
   1fc40:	bls	1f010 <_start@@Base+0xc614>
   1fc44:	add	r9, r8, #2
   1fc48:	b	1ee6c <_start@@Base+0xc470>
   1fc4c:	ldrb	r3, [r4, #2]
   1fc50:	cmp	r3, #32
   1fc54:	bls	1f6a0 <_start@@Base+0xcca4>
   1fc58:	add	r3, sp, #576	; 0x240
   1fc5c:	strd	r8, [r3]
   1fc60:	add	r8, r4, #2
   1fc64:	b	1f514 <_start@@Base+0xcb18>
   1fc68:	cmp	r3, #0
   1fc6c:	cmpeq	r2, #127	; 0x7f
   1fc70:	sxtbls	r2, r2
   1fc74:	strbls	r2, [sp, #656]	; 0x290
   1fc78:	bls	1fbec <_start@@Base+0xd1f0>
   1fc7c:	mov	r1, r0
   1fc80:	mov	r3, #7
   1fc84:	mov	r2, fp
   1fc88:	mov	r0, sl
   1fc8c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1fc90:	mov	r5, r0
   1fc94:	cmp	r9, r5
   1fc98:	beq	2147c <_start@@Base+0xea80>
   1fc9c:	add	r3, sp, #656	; 0x290
   1fca0:	ldrsb	r2, [r3]
   1fca4:	b	1fbec <_start@@Base+0xd1f0>
   1fca8:	mov	r1, r4
   1fcac:	mov	r3, #5
   1fcb0:	mov	r2, fp
   1fcb4:	mov	r0, sl
   1fcb8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   1fcbc:	mov	r4, r0
   1fcc0:	b	1dd7c <_start@@Base+0xb380>
   1fcc4:	mov	r3, #5
   1fcc8:	mov	r2, fp
   1fccc:	mov	r1, r4
   1fcd0:	mov	r0, sl
   1fcd4:	bl	18084 <_start@@Base+0x5688>
   1fcd8:	cmp	r0, r4
   1fcdc:	mov	r9, r0
   1fce0:	beq	1df44 <_start@@Base+0xb548>
   1fce4:	mov	r1, #10
   1fce8:	ldr	r0, [sl]
   1fcec:	bl	23ce8 <flatcc_builder_start_table@@Base>
   1fcf0:	cmp	r0, #0
   1fcf4:	bne	1eeb4 <_start@@Base+0xc4b8>
   1fcf8:	add	r3, sp, #672	; 0x2a0
   1fcfc:	str	r3, [sp]
   1fd00:	mov	r2, fp
   1fd04:	mov	r3, #5
   1fd08:	mov	r1, r9
   1fd0c:	mov	r0, sl
   1fd10:	bl	29db0 <flatcc_json_parser_prepare_unions@@Base>
   1fd14:	cmp	fp, r0
   1fd18:	beq	1eeb4 <_start@@Base+0xc4b8>
   1fd1c:	add	r8, sp, #664	; 0x298
   1fd20:	mov	r1, r9
   1fd24:	mov	r3, r8
   1fd28:	mov	r2, fp
   1fd2c:	mov	r0, sl
   1fd30:	bl	133ac <_start@@Base+0x9b0>
   1fd34:	ldr	r3, [sp, #664]	; 0x298
   1fd38:	cmp	r3, #0
   1fd3c:	mov	r9, r0
   1fd40:	beq	2017c <_start@@Base+0xd780>
   1fd44:	mov	r4, r0
   1fd48:	b	1fdcc <_start@@Base+0xd3d0>
   1fd4c:	add	r3, pc, #932	; 0x3a4
   1fd50:	ldrd	r2, [r3]
   1fd54:	cmp	r1, r3
   1fd58:	cmpeq	r0, r2
   1fd5c:	beq	1ffb8 <_start@@Base+0xd5bc>
   1fd60:	add	r3, pc, #920	; 0x398
   1fd64:	ldrd	r2, [r3]
   1fd68:	cmp	r1, r3
   1fd6c:	cmpeq	r0, r2
   1fd70:	beq	2005c <_start@@Base+0xd660>
   1fd74:	add	r3, pc, #908	; 0x38c
   1fd78:	ldrd	r2, [r3]
   1fd7c:	and	r0, r0, #-16777216	; 0xff000000
   1fd80:	cmp	r1, r3
   1fd84:	cmpeq	r0, r2
   1fd88:	bne	1fd98 <_start@@Base+0xd39c>
   1fd8c:	sub	r3, fp, r4
   1fd90:	cmp	r3, #5
   1fd94:	bgt	20780 <_start@@Base+0xdd84>
   1fd98:	mov	r1, r4
   1fd9c:	mov	r2, fp
   1fda0:	mov	r0, sl
   1fda4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   1fda8:	mov	r1, r0
   1fdac:	mov	r3, r8
   1fdb0:	mov	r2, fp
   1fdb4:	mov	r0, sl
   1fdb8:	bl	14e8c <_start@@Base+0x2490>
   1fdbc:	ldr	r3, [sp, #664]	; 0x298
   1fdc0:	cmp	r3, #0
   1fdc4:	mov	r4, r0
   1fdc8:	beq	20178 <_start@@Base+0xd77c>
   1fdcc:	cmp	fp, r4
   1fdd0:	beq	1fdfc <_start@@Base+0xd400>
   1fdd4:	ldrb	r3, [r4]
   1fdd8:	cmp	r3, #34	; 0x22
   1fddc:	moveq	r3, #0
   1fde0:	addeq	r4, r4, #1
   1fde4:	streq	r3, [sl, #12]
   1fde8:	beq	1fdfc <_start@@Base+0xd400>
   1fdec:	cmp	r3, #46	; 0x2e
   1fdf0:	movne	r3, #1
   1fdf4:	strne	r3, [sl, #12]
   1fdf8:	beq	203a0 <_start@@Base+0xd9a4>
   1fdfc:	mov	r1, fp
   1fe00:	mov	r0, r4
   1fe04:	bl	12b28 <_start@@Base+0x12c>
   1fe08:	add	r3, pc, #768	; 0x300
   1fe0c:	ldrd	r2, [r3]
   1fe10:	cmp	r1, r3
   1fe14:	cmpeq	r0, r2
   1fe18:	bls	1fd4c <_start@@Base+0xd350>
   1fe1c:	add	r3, pc, #756	; 0x2f4
   1fe20:	ldrd	r2, [r3]
   1fe24:	cmp	r1, r3
   1fe28:	cmpeq	r0, r2
   1fe2c:	bhi	1fee8 <_start@@Base+0xd4ec>
   1fe30:	add	r3, pc, #744	; 0x2e8
   1fe34:	ldrd	r2, [r3]
   1fe38:	cmp	r1, r3
   1fe3c:	cmpeq	r0, r2
   1fe40:	bne	1fd98 <_start@@Base+0xd39c>
   1fe44:	add	r4, r4, #8
   1fe48:	mov	r0, r4
   1fe4c:	mov	r1, fp
   1fe50:	bl	12b28 <_start@@Base+0x12c>
   1fe54:	add	r3, pc, #716	; 0x2cc
   1fe58:	ldrd	r2, [r3]
   1fe5c:	bic	r6, r0, #255	; 0xff
   1fe60:	cmp	r1, r3
   1fe64:	cmpeq	r6, r2
   1fe68:	beq	207e4 <_start@@Base+0xdde8>
   1fe6c:	ldr	r3, [pc, #732]	; 20150 <_start@@Base+0xd754>
   1fe70:	mov	r2, #0
   1fe74:	and	r1, r1, r3
   1fe78:	ldr	r3, [pc, #724]	; 20154 <_start@@Base+0xd758>
   1fe7c:	and	r0, r0, r2
   1fe80:	cmp	r1, r3
   1fe84:	mov	r2, #0
   1fe88:	cmpeq	r0, r2
   1fe8c:	bne	1fd98 <_start@@Base+0xd39c>
   1fe90:	sub	r3, fp, r4
   1fe94:	cmp	r3, #2
   1fe98:	ble	1fd98 <_start@@Base+0xd39c>
   1fe9c:	mov	r1, r4
   1fea0:	mov	r3, #2
   1fea4:	mov	r2, fp
   1fea8:	mov	r0, sl
   1feac:	bl	18084 <_start@@Base+0x5688>
   1feb0:	cmp	r4, r0
   1feb4:	mov	r1, r0
   1feb8:	beq	1fd98 <_start@@Base+0xd39c>
   1febc:	ldr	ip, [sp, #672]	; 0x2a0
   1fec0:	ldr	r3, [pc, #656]	; 20158 <_start@@Base+0xd75c>
   1fec4:	mov	r2, #9
   1fec8:	add	r3, pc, r3
   1fecc:	str	r3, [sp, #8]
   1fed0:	stm	sp, {r2, ip}
   1fed4:	mov	r3, #4
   1fed8:	mov	r2, fp
   1fedc:	mov	r0, sl
   1fee0:	bl	2a1fc <flatcc_json_parser_union_vector@@Base>
   1fee4:	b	1fda8 <_start@@Base+0xd3ac>
   1fee8:	add	r3, pc, #576	; 0x240
   1feec:	ldrd	r2, [r3]
   1fef0:	cmp	r1, r3
   1fef4:	cmpeq	r0, r2
   1fef8:	beq	2033c <_start@@Base+0xd940>
   1fefc:	add	r3, pc, #564	; 0x234
   1ff00:	ldrd	r2, [r3]
   1ff04:	cmp	r1, r3
   1ff08:	cmpeq	r0, r2
   1ff0c:	bne	1fd98 <_start@@Base+0xd39c>
   1ff10:	add	r4, r4, #8
   1ff14:	mov	r0, r4
   1ff18:	mov	r1, fp
   1ff1c:	bl	12b28 <_start@@Base+0x12c>
   1ff20:	ldr	r2, [pc, #552]	; 20150 <_start@@Base+0xd754>
   1ff24:	mvn	r3, #0
   1ff28:	mov	r6, r0
   1ff2c:	mov	r7, r1
   1ff30:	add	r1, pc, #520	; 0x208
   1ff34:	ldrd	r0, [r1]
   1ff38:	and	r3, r3, r7
   1ff3c:	and	r2, r2, r6
   1ff40:	cmp	r3, r1
   1ff44:	cmpeq	r2, r0
   1ff48:	beq	213e8 <_start@@Base+0xe9ec>
   1ff4c:	and	r7, r7, #-16777216	; 0xff000000
   1ff50:	mov	r6, #0
   1ff54:	cmp	r7, #1795162112	; 0x6b000000
   1ff58:	cmpeq	r6, #0
   1ff5c:	bne	1fd98 <_start@@Base+0xd39c>
   1ff60:	sub	r3, fp, r4
   1ff64:	cmp	r3, #1
   1ff68:	ble	1fd98 <_start@@Base+0xd39c>
   1ff6c:	mov	r1, r4
   1ff70:	mov	r3, #1
   1ff74:	mov	r2, fp
   1ff78:	mov	r0, sl
   1ff7c:	bl	18084 <_start@@Base+0x5688>
   1ff80:	cmp	r4, r0
   1ff84:	mov	r1, r0
   1ff88:	beq	1fd98 <_start@@Base+0xd39c>
   1ff8c:	ldr	ip, [sp, #672]	; 0x2a0
   1ff90:	ldr	r3, [pc, #452]	; 2015c <_start@@Base+0xd760>
   1ff94:	mov	r2, #5
   1ff98:	add	r3, pc, r3
   1ff9c:	str	r3, [sp, #8]
   1ffa0:	stm	sp, {r2, ip}
   1ffa4:	mov	r3, #2
   1ffa8:	mov	r2, fp
   1ffac:	mov	r0, sl
   1ffb0:	bl	29e70 <flatcc_json_parser_union@@Base>
   1ffb4:	b	1fda8 <_start@@Base+0xd3ac>
   1ffb8:	add	r4, r4, #8
   1ffbc:	mov	r0, r4
   1ffc0:	mov	r1, fp
   1ffc4:	bl	12b28 <_start@@Base+0x12c>
   1ffc8:	add	r3, pc, #376	; 0x178
   1ffcc:	ldrd	r2, [r3]
   1ffd0:	bic	r6, r0, #255	; 0xff
   1ffd4:	cmp	r1, r3
   1ffd8:	cmpeq	r6, r2
   1ffdc:	beq	20718 <_start@@Base+0xdd1c>
   1ffe0:	ldr	r3, [pc, #360]	; 20150 <_start@@Base+0xd754>
   1ffe4:	mov	r2, #0
   1ffe8:	and	r1, r1, r3
   1ffec:	ldr	r3, [pc, #364]	; 20160 <_start@@Base+0xd764>
   1fff0:	and	r0, r0, r2
   1fff4:	cmp	r1, r3
   1fff8:	mov	r2, #0
   1fffc:	cmpeq	r0, r2
   20000:	bne	1fd98 <_start@@Base+0xd39c>
   20004:	sub	r3, fp, r4
   20008:	cmp	r3, #2
   2000c:	ble	1fd98 <_start@@Base+0xd39c>
   20010:	mov	r1, r4
   20014:	mov	r3, #2
   20018:	mov	r2, fp
   2001c:	mov	r0, sl
   20020:	bl	18084 <_start@@Base+0x5688>
   20024:	cmp	r4, r0
   20028:	mov	r1, r0
   2002c:	beq	1fd98 <_start@@Base+0xd39c>
   20030:	ldr	ip, [sp, #672]	; 0x2a0
   20034:	ldr	r3, [pc, #296]	; 20164 <_start@@Base+0xd768>
   20038:	mov	r2, #3
   2003c:	add	r3, pc, r3
   20040:	str	r3, [sp, #8]
   20044:	stm	sp, {r2, ip}
   20048:	mov	r3, #1
   2004c:	mov	r2, fp
   20050:	mov	r0, sl
   20054:	bl	29e70 <flatcc_json_parser_union@@Base>
   20058:	b	1fda8 <_start@@Base+0xd3ac>
   2005c:	add	r4, r4, #8
   20060:	mov	r0, r4
   20064:	mov	r1, fp
   20068:	bl	12b28 <_start@@Base+0x12c>
   2006c:	ldr	r3, [pc, #220]	; 20150 <_start@@Base+0xd754>
   20070:	ldr	r7, [pc, #240]	; 20168 <_start@@Base+0xd76c>
   20074:	mov	r2, #0
   20078:	mov	r6, #0
   2007c:	and	r1, r1, r3
   20080:	and	r0, r0, r2
   20084:	cmp	r1, r7
   20088:	cmpeq	r0, r6
   2008c:	bne	1fd98 <_start@@Base+0xd39c>
   20090:	sub	r3, fp, r4
   20094:	cmp	r3, #2
   20098:	ble	1fd98 <_start@@Base+0xd39c>
   2009c:	mov	r1, r4
   200a0:	mov	r3, #2
   200a4:	mov	r2, fp
   200a8:	mov	r0, sl
   200ac:	bl	18084 <_start@@Base+0x5688>
   200b0:	cmp	r4, r0
   200b4:	mov	r1, r0
   200b8:	beq	1fd98 <_start@@Base+0xd39c>
   200bc:	ldr	r3, [pc, #168]	; 2016c <_start@@Base+0xd770>
   200c0:	ldr	lr, [sp, #672]	; 0x2a0
   200c4:	ldr	r2, [pc, #164]	; 20170 <_start@@Base+0xd774>
   200c8:	mov	ip, #7
   200cc:	add	r3, pc, r3
   200d0:	add	r2, pc, r2
   200d4:	add	r3, r3, #652	; 0x28c
   200d8:	str	r3, [sp, #8]
   200dc:	str	r2, [sp, #12]
   200e0:	stm	sp, {ip, lr}
   200e4:	mov	r3, #3
   200e8:	mov	r2, fp
   200ec:	mov	r0, sl
   200f0:	bl	29fb4 <flatcc_json_parser_union_type@@Base>
   200f4:	b	1fda8 <_start@@Base+0xd3ac>
   200f8:	strbvs	r6, [pc, -r9, ror #28]!
   200fc:	cmnvs	lr, r1, ror #8
   20100:	svcvs	0x005f7479
   20104:	cmnvs	r1, #6464	; 0x1940
   20108:	svcvs	0x00000000
   2010c:	cmnvs	r1, #6464	; 0x1940
   20110:	cmnvs	r3, r4, ror #8
   20114:	cmnvs	r8, #-2147483620	; 0x8000001c
   20118:	svcpl	0x00636860
   2011c:			; <UNDEFINED> instruction: 0x6d61696e
   20120:	cmnvs	r3, r5, ror #8
   20124:	cmnvs	r8, #-2147483620	; 0x8000001c
   20128:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   2012c:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   20130:	svcpl	0x00636861
   20134:			; <UNDEFINED> instruction: 0x6d61696e
   20138:	svcpl	0x006b6963
   2013c:	cmnvc	r9, #1694498816	; 0x65000000
   20140:	rsbvc	r0, r5, r0
   20144:	blvs	17fd330 <__bss_end__@@Base+0x17bff5c>
   20148:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   2014c:	cmnvc	r4, #116, 30	; 0x1d0
   20150:			; <UNDEFINED> instruction: 0xffff0000
   20154:	rsbsvc	r0, r3, #0
   20158:			; <UNDEFINED> instruction: 0xffff8eac
   2015c:			; <UNDEFINED> instruction: 0xffff8ddc
   20160:	cmnvc	r4, #0
   20164:			; <UNDEFINED> instruction: 0xffff8d38
   20168:	rsbvc	r0, r5, r0
   2016c:			; <UNDEFINED> instruction: 0x0001cfbc
   20170:			; <UNDEFINED> instruction: 0xffff8ca4
   20174:			; <UNDEFINED> instruction: 0xffffdaa0
   20178:	mov	r9, r0
   2017c:	ldr	r3, [sl, #24]
   20180:	cmp	r3, #0
   20184:	bne	1eeb4 <_start@@Base+0xc4b8>
   20188:	mov	r1, r9
   2018c:	ldr	r3, [sp, #672]	; 0x2a0
   20190:	mov	r2, fp
   20194:	mov	r0, sl
   20198:	bl	29e18 <flatcc_json_parser_finalize_unions@@Base>
   2019c:	mov	r9, r0
   201a0:	ldr	r0, [sl]
   201a4:	bl	246dc <flatcc_builder_end_table@@Base>
   201a8:	subs	r4, r0, #0
   201ac:	beq	1eeb4 <_start@@Base+0xc4b8>
   201b0:	mov	r1, #1
   201b4:	ldr	r0, [sl]
   201b8:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   201bc:	cmp	r0, #0
   201c0:	beq	21640 <_start@@Base+0xec44>
   201c4:	str	r4, [r0]
   201c8:	b	1df58 <_start@@Base+0xb55c>
   201cc:	mov	r1, r4
   201d0:	mov	r3, #7
   201d4:	mov	r2, fp
   201d8:	mov	r0, sl
   201dc:	bl	18084 <_start@@Base+0x5688>
   201e0:	cmp	r0, r4
   201e4:	mov	r1, r0
   201e8:	beq	1df00 <_start@@Base+0xb504>
   201ec:	ldr	lr, [sp, #644]	; 0x284
   201f0:	ldr	r2, [pc, #-132]	; 20174 <_start@@Base+0xd778>
   201f4:	mov	ip, #3
   201f8:	add	r2, pc, r2
   201fc:	str	r2, [sp, #8]
   20200:	mov	r3, r8
   20204:	stm	sp, {ip, lr}
   20208:	mov	r2, fp
   2020c:	mov	r0, sl
   20210:	bl	2a1fc <flatcc_json_parser_union_vector@@Base>
   20214:	mov	r9, r0
   20218:	b	1df58 <_start@@Base+0xb55c>
   2021c:	mov	r3, #6
   20220:	mov	r2, fp
   20224:	mov	r1, r5
   20228:	mov	r0, sl
   2022c:	bl	18084 <_start@@Base+0x5688>
   20230:	cmp	r5, r0
   20234:	mov	r8, r0
   20238:	beq	1eddc <_start@@Base+0xc3e0>
   2023c:	mov	r3, #0
   20240:	mov	r1, #2
   20244:	ldr	r0, [sl]
   20248:	str	r3, [sp, #652]	; 0x28c
   2024c:	bl	23ce8 <flatcc_builder_start_table@@Base>
   20250:	cmp	r0, #0
   20254:	bne	20290 <_start@@Base+0xd894>
   20258:	cmp	fp, r8
   2025c:	beq	2026c <_start@@Base+0xd870>
   20260:	ldrb	r3, [r8]
   20264:	cmp	r3, #123	; 0x7b
   20268:	beq	2093c <_start@@Base+0xdf40>
   2026c:	mov	r1, r8
   20270:	mov	r3, #21
   20274:	mov	r2, fp
   20278:	mov	r0, sl
   2027c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20280:	mov	r8, r0
   20284:	ldr	r3, [sl, #24]
   20288:	cmp	r3, #0
   2028c:	beq	207cc <_start@@Base+0xddd0>
   20290:	mov	r1, r8
   20294:	mov	r3, #33	; 0x21
   20298:	mov	r2, fp
   2029c:	mov	r0, sl
   202a0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   202a4:	ldr	r3, [sp, #652]	; 0x28c
   202a8:	cmp	r3, #0
   202ac:	mov	r8, r0
   202b0:	beq	202c8 <_start@@Base+0xd8cc>
   202b4:	mov	r1, #2
   202b8:	ldr	r0, [sl]
   202bc:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   202c0:	cmp	r0, #0
   202c4:	bne	1f558 <_start@@Base+0xcb5c>
   202c8:	mov	r9, r8
   202cc:	b	1eeb4 <_start@@Base+0xc4b8>
   202d0:	bl	28ad8 <flatcc_json_parser_generic_json@@Base>
   202d4:	b	1e018 <_start@@Base+0xb61c>
   202d8:	ldrb	r3, [r5, #2]
   202dc:	cmp	r3, #32
   202e0:	bls	1e5d0 <_start@@Base+0xbbd4>
   202e4:	add	r4, r5, #2
   202e8:	b	1e398 <_start@@Base+0xb99c>
   202ec:	ldrb	r3, [r8, #2]
   202f0:	cmp	r3, #32
   202f4:	addhi	r0, r8, #2
   202f8:	bls	1f070 <_start@@Base+0xc674>
   202fc:	b	1f080 <_start@@Base+0xc684>
   20300:	mov	r1, r0
   20304:	mov	r3, #8
   20308:	mov	r2, fp
   2030c:	mov	r0, sl
   20310:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20314:	mov	r4, r0
   20318:	cmp	r5, r4
   2031c:	beq	20698 <_start@@Base+0xdc9c>
   20320:	ldr	r2, [sp, #660]	; 0x294
   20324:	b	1f93c <_start@@Base+0xcf40>
   20328:	ldrb	r3, [r4, #2]
   2032c:	cmp	r3, #32
   20330:	addhi	r1, r4, #2
   20334:	bls	1f804 <_start@@Base+0xce08>
   20338:	b	1f814 <_start@@Base+0xce18>
   2033c:	add	r5, r4, #8
   20340:	mov	r0, r5
   20344:	mov	r1, fp
   20348:	bl	12b28 <_start@@Base+0x12c>
   2034c:	add	r3, pc, #900	; 0x384
   20350:	ldrd	r2, [r3]
   20354:	cmp	r1, r3
   20358:	cmpeq	r0, r2
   2035c:	mov	r6, r0
   20360:	mov	r7, r1
   20364:	beq	2152c <_start@@Base+0xeb30>
   20368:	add	r3, pc, #880	; 0x370
   2036c:	ldrd	r2, [r3]
   20370:	ldr	r0, [pc, #880]	; 206e8 <_start@@Base+0xdcec>
   20374:	mvn	r1, #0
   20378:	and	r1, r1, r7
   2037c:	and	r0, r0, r6
   20380:	cmp	r1, r3
   20384:	cmpeq	r0, r2
   20388:	beq	2054c <_start@@Base+0xdb50>
   2038c:	mov	r1, r5
   20390:	mov	r2, fp
   20394:	mov	r0, sl
   20398:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   2039c:	b	1fda8 <_start@@Base+0xd3ac>
   203a0:	mov	r1, r4
   203a4:	mov	r3, #5
   203a8:	mov	r2, fp
   203ac:	mov	r0, sl
   203b0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   203b4:	mov	r4, r0
   203b8:	b	1fdfc <_start@@Base+0xd400>
   203bc:	mov	r1, r5
   203c0:	mov	r3, #4
   203c4:	mov	r2, fp
   203c8:	mov	r0, sl
   203cc:	bl	18084 <_start@@Base+0x5688>
   203d0:	cmp	r5, r0
   203d4:	mov	r1, r0
   203d8:	beq	1e80c <_start@@Base+0xbe10>
   203dc:	ldr	r3, [pc, #776]	; 206ec <_start@@Base+0xdcf0>
   203e0:	ldr	lr, [sp, #644]	; 0x284
   203e4:	add	r3, pc, r3
   203e8:	add	r3, r3, #572	; 0x23c
   203ec:	ldr	ip, [pc, #764]	; 206f0 <_start@@Base+0xdcf4>
   203f0:	ldr	r2, [pc, #764]	; 206f4 <_start@@Base+0xdcf8>
   203f4:	str	r3, [sp, #8]
   203f8:	mov	r3, #3
   203fc:	add	ip, pc, ip
   20400:	add	r2, pc, r2
   20404:	str	r2, [sp, #12]
   20408:	stm	sp, {r3, lr}
   2040c:	str	ip, [sp, #16]
   20410:	ldr	r3, [sp, #520]	; 0x208
   20414:	mov	r2, fp
   20418:	mov	r0, sl
   2041c:	bl	2a2c8 <flatcc_json_parser_union_type_vector@@Base>
   20420:	mov	r9, r0
   20424:	b	1df58 <_start@@Base+0xb55c>
   20428:	mov	r1, r0
   2042c:	mov	r3, #8
   20430:	mov	r2, fp
   20434:	mov	r0, sl
   20438:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2043c:	mov	r5, r0
   20440:	cmp	r6, r5
   20444:	beq	20858 <_start@@Base+0xde5c>
   20448:	ldrb	r2, [sp, #656]	; 0x290
   2044c:	b	1faac <_start@@Base+0xd0b0>
   20450:	mov	r1, r4
   20454:	mov	r3, #7
   20458:	mov	r2, fp
   2045c:	mov	r0, sl
   20460:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20464:	mov	r4, r0
   20468:	b	20318 <_start@@Base+0xd91c>
   2046c:	mov	r1, r5
   20470:	mov	r3, #5
   20474:	mov	r2, fp
   20478:	mov	r0, sl
   2047c:	bl	18084 <_start@@Base+0x5688>
   20480:	cmp	r5, r0
   20484:	mov	r1, r0
   20488:	beq	1edc0 <_start@@Base+0xc3c4>
   2048c:	add	r3, sp, #652	; 0x28c
   20490:	mov	r2, fp
   20494:	mov	r0, sl
   20498:	bl	18188 <_start@@Base+0x578c>
   2049c:	ldr	r3, [sp, #652]	; 0x28c
   204a0:	cmp	r3, #0
   204a4:	mov	r8, r0
   204a8:	beq	202c8 <_start@@Base+0xd8cc>
   204ac:	mov	r1, r9
   204b0:	ldr	r0, [sl]
   204b4:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   204b8:	cmp	r0, #0
   204bc:	bne	1f558 <_start@@Base+0xcb5c>
   204c0:	b	202c8 <_start@@Base+0xd8cc>
   204c4:	ldrb	r3, [r9, #2]
   204c8:	cmp	r3, #32
   204cc:	bls	1e878 <_start@@Base+0xbe7c>
   204d0:	add	r4, r9, #2
   204d4:	b	1f9d8 <_start@@Base+0xcfdc>
   204d8:	mov	r1, r0
   204dc:	mov	r3, #8
   204e0:	mov	r2, fp
   204e4:	mov	r0, sl
   204e8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   204ec:	mov	r5, r0
   204f0:	cmp	r6, r5
   204f4:	beq	2139c <_start@@Base+0xe9a0>
   204f8:	ldrb	r2, [sp, #656]	; 0x290
   204fc:	b	1e6a8 <_start@@Base+0xbcac>
   20500:	mov	r1, r0
   20504:	mov	r3, #7
   20508:	mov	r2, fp
   2050c:	mov	r0, sl
   20510:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20514:	mov	r5, r0
   20518:	b	20440 <_start@@Base+0xda44>
   2051c:	mov	r3, #0
   20520:	b	1e71c <_start@@Base+0xbd20>
   20524:	mov	r3, #0
   20528:	b	1e7a8 <_start@@Base+0xbdac>
   2052c:	mov	r3, #0
   20530:	b	1e7cc <_start@@Base+0xbdd0>
   20534:	mov	r3, #0
   20538:	b	1e764 <_start@@Base+0xbd68>
   2053c:	mov	r3, #0
   20540:	b	1e784 <_start@@Base+0xbd88>
   20544:	mov	r3, #0
   20548:	b	1e740 <_start@@Base+0xbd44>
   2054c:	sub	r3, fp, r5
   20550:	cmp	r3, #6
   20554:	ble	2038c <_start@@Base+0xd990>
   20558:	mov	r1, r5
   2055c:	mov	r3, #6
   20560:	mov	r2, fp
   20564:	mov	r0, sl
   20568:	bl	18084 <_start@@Base+0x5688>
   2056c:	cmp	r5, r0
   20570:	mov	r1, r0
   20574:	beq	2038c <_start@@Base+0xd990>
   20578:	ldr	ip, [sp, #672]	; 0x2a0
   2057c:	ldr	r3, [pc, #372]	; 206f8 <_start@@Base+0xdcfc>
   20580:	mov	r2, #1
   20584:	add	r3, pc, r3
   20588:	str	r3, [sp, #8]
   2058c:	stm	sp, {r2, ip}
   20590:	mov	r3, #0
   20594:	mov	r2, fp
   20598:	mov	r0, sl
   2059c:	bl	29e70 <flatcc_json_parser_union@@Base>
   205a0:	b	1fda8 <_start@@Base+0xd3ac>
   205a4:	add	r1, r0, #1
   205a8:	sub	r3, fp, r1
   205ac:	cmp	r3, #1
   205b0:	mov	r3, #0
   205b4:	str	r3, [sp, #648]	; 0x288
   205b8:	ble	205cc <_start@@Base+0xdbd0>
   205bc:	ldrb	r3, [r0, #1]
   205c0:	cmp	r3, #32
   205c4:	bhi	215e4 <_start@@Base+0xebe8>
   205c8:	beq	21670 <_start@@Base+0xec74>
   205cc:	mov	r2, fp
   205d0:	mov	r0, sl
   205d4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   205d8:	ldr	r3, [sp, #648]	; 0x288
   205dc:	b	1e95c <_start@@Base+0xbf60>
   205e0:	ldrb	r3, [r5, #2]
   205e4:	cmp	r3, #32
   205e8:	addhi	r4, r5, #2
   205ec:	bls	1e8b4 <_start@@Base+0xbeb8>
   205f0:	b	1e8c8 <_start@@Base+0xbecc>
   205f4:	mov	r1, r0
   205f8:	mov	r3, #8
   205fc:	mov	r2, fp
   20600:	mov	r0, sl
   20604:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20608:	mov	r5, r0
   2060c:	b	1fb48 <_start@@Base+0xd14c>
   20610:	mov	r0, r1
   20614:	add	r1, r1, #1
   20618:	sub	r3, fp, r1
   2061c:	cmp	r3, #1
   20620:	mov	r3, #0
   20624:	str	r3, [sp, #656]	; 0x290
   20628:	ble	2063c <_start@@Base+0xdc40>
   2062c:	ldrb	r3, [r0, #1]
   20630:	cmp	r3, #32
   20634:	bhi	215ec <_start@@Base+0xebf0>
   20638:	beq	21684 <_start@@Base+0xec88>
   2063c:	mov	r2, fp
   20640:	mov	r0, sl
   20644:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   20648:	ldr	r3, [sp, #656]	; 0x290
   2064c:	b	1f1a8 <_start@@Base+0xc7ac>
   20650:	mov	r1, r0
   20654:	mov	r3, #8
   20658:	mov	r2, fp
   2065c:	mov	r0, sl
   20660:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20664:	mov	r4, r0
   20668:	cmp	r5, r4
   2066c:	beq	208b8 <_start@@Base+0xdebc>
   20670:	add	r3, sp, #664	; 0x298
   20674:	ldrd	r2, [r3]
   20678:	b	1f7a4 <_start@@Base+0xcda8>
   2067c:	mov	r1, r0
   20680:	mov	r3, #7
   20684:	mov	r2, fp
   20688:	mov	r0, sl
   2068c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20690:	mov	r5, r0
   20694:	b	204f0 <_start@@Base+0xdaf4>
   20698:	add	r3, sp, #660	; 0x294
   2069c:	str	r3, [sp]
   206a0:	mov	r2, fp
   206a4:	mov	r3, r7
   206a8:	mov	r1, r5
   206ac:	mov	r0, sl
   206b0:	bl	13d7c <_start@@Base+0x1380>
   206b4:	cmp	fp, r0
   206b8:	cmpne	r0, r5
   206bc:	mov	r4, r0
   206c0:	bne	20320 <_start@@Base+0xd924>
   206c4:	add	r3, sp, #576	; 0x240
   206c8:	strd	r8, [r3]
   206cc:	mov	r8, r4
   206d0:	b	1f520 <_start@@Base+0xcb24>
   206d4:	nop			; (mov r0, r0)
   206d8:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   206dc:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   206e0:	ldrbvs	r0, [r2, #-0]!
   206e4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   206e8:			; <UNDEFINED> instruction: 0xffff0000
   206ec:	andeq	ip, r1, r4, lsr #25
   206f0:			; <UNDEFINED> instruction: 0xffff285c
   206f4:			; <UNDEFINED> instruction: 0xffffd898
   206f8:			; <UNDEFINED> instruction: 0xffff87f0
   206fc:	andeq	ip, r1, r4, lsr r9
   20700:			; <UNDEFINED> instruction: 0xffff861c
   20704:			; <UNDEFINED> instruction: 0xffff85c8
   20708:	andeq	ip, r1, r4, ror #16
   2070c:			; <UNDEFINED> instruction: 0xffff2440
   20710:			; <UNDEFINED> instruction: 0xffff8548
   20714:	andeq	ip, r1, r4, lsl #14
   20718:	sub	r3, fp, r4
   2071c:	cmp	r3, #7
   20720:	ble	1fd98 <_start@@Base+0xd39c>
   20724:	mov	r1, r4
   20728:	mov	r3, #7
   2072c:	mov	r2, fp
   20730:	mov	r0, sl
   20734:	bl	18084 <_start@@Base+0x5688>
   20738:	cmp	r4, r0
   2073c:	mov	r1, r0
   20740:	beq	1fd98 <_start@@Base+0xd39c>
   20744:	ldr	r3, [pc, #-80]	; 206fc <_start@@Base+0xdd00>
   20748:	ldr	lr, [sp, #672]	; 0x2a0
   2074c:	ldr	r2, [pc, #-84]	; 20700 <_start@@Base+0xdd04>
   20750:	mov	ip, #3
   20754:	add	r3, pc, r3
   20758:	add	r2, pc, r2
   2075c:	add	r3, r3, #636	; 0x27c
   20760:	str	r3, [sp, #8]
   20764:	str	r2, [sp, #12]
   20768:	stm	sp, {ip, lr}
   2076c:	mov	r3, #1
   20770:	mov	r2, fp
   20774:	mov	r0, sl
   20778:	bl	29fb4 <flatcc_json_parser_union_type@@Base>
   2077c:	b	1fda8 <_start@@Base+0xd3ac>
   20780:	mov	r1, r4
   20784:	mov	r3, #5
   20788:	mov	r2, fp
   2078c:	mov	r0, sl
   20790:	bl	18084 <_start@@Base+0x5688>
   20794:	cmp	r0, r4
   20798:	mov	r1, r0
   2079c:	beq	1fd98 <_start@@Base+0xd39c>
   207a0:	ldr	ip, [sp, #672]	; 0x2a0
   207a4:	ldr	r3, [pc, #-168]	; 20704 <_start@@Base+0xdd08>
   207a8:	mov	r2, #7
   207ac:	add	r3, pc, r3
   207b0:	str	r3, [sp, #8]
   207b4:	stm	sp, {r2, ip}
   207b8:	mov	r3, #3
   207bc:	mov	r2, fp
   207c0:	mov	r0, sl
   207c4:	bl	29e70 <flatcc_json_parser_union@@Base>
   207c8:	b	1fda8 <_start@@Base+0xd3ac>
   207cc:	ldr	r0, [sl]
   207d0:	bl	246dc <flatcc_builder_end_table@@Base>
   207d4:	cmp	r0, #0
   207d8:	str	r0, [sp, #652]	; 0x28c
   207dc:	beq	20290 <_start@@Base+0xd894>
   207e0:	b	202b4 <_start@@Base+0xd8b8>
   207e4:	sub	r3, fp, r4
   207e8:	cmp	r3, #7
   207ec:	ble	1fd98 <_start@@Base+0xd39c>
   207f0:	mov	r1, r4
   207f4:	mov	r3, #7
   207f8:	mov	r2, fp
   207fc:	mov	r0, sl
   20800:	bl	18084 <_start@@Base+0x5688>
   20804:	cmp	r4, r0
   20808:	mov	r1, r0
   2080c:	beq	1fd98 <_start@@Base+0xd39c>
   20810:	ldr	r3, [pc, #-272]	; 20708 <_start@@Base+0xdd0c>
   20814:	ldr	lr, [sp, #672]	; 0x2a0
   20818:	ldr	ip, [pc, #-276]	; 2070c <_start@@Base+0xdd10>
   2081c:	ldr	r2, [pc, #-276]	; 20710 <_start@@Base+0xdd14>
   20820:	mov	r0, #9
   20824:	add	r3, pc, r3
   20828:	add	ip, pc, ip
   2082c:	add	r2, pc, r2
   20830:	add	r3, r3, #668	; 0x29c
   20834:	str	r3, [sp, #8]
   20838:	str	r2, [sp, #12]
   2083c:	stm	sp, {r0, lr}
   20840:	str	ip, [sp, #16]
   20844:	mov	r3, #4
   20848:	mov	r2, fp
   2084c:	mov	r0, sl
   20850:	bl	2a2c8 <flatcc_json_parser_union_type_vector@@Base>
   20854:	b	1fda8 <_start@@Base+0xd3ac>
   20858:	add	r3, sp, #656	; 0x290
   2085c:	str	r3, [sp]
   20860:	mov	r2, fp
   20864:	ldr	r3, [sp, #24]
   20868:	mov	r1, r6
   2086c:	mov	r0, sl
   20870:	bl	1443c <_start@@Base+0x1a40>
   20874:	cmp	fp, r0
   20878:	cmpne	r0, r6
   2087c:	mov	r5, r0
   20880:	bne	20448 <_start@@Base+0xda4c>
   20884:	b	1fadc <_start@@Base+0xd0e0>
   20888:	add	r3, sp, #656	; 0x290
   2088c:	str	r3, [sp]
   20890:	mov	r2, fp
   20894:	ldr	r3, [sp, #32]
   20898:	mov	r1, r8
   2089c:	mov	r0, sl
   208a0:	bl	141f4 <_start@@Base+0x17f8>
   208a4:	cmp	fp, r0
   208a8:	cmpne	r0, r8
   208ac:	mov	r5, r0
   208b0:	bne	1fb50 <_start@@Base+0xd154>
   208b4:	b	1fadc <_start@@Base+0xd0e0>
   208b8:	add	r3, sp, #664	; 0x298
   208bc:	str	r3, [sp]
   208c0:	mov	r2, fp
   208c4:	ldr	r3, [sp, #168]	; 0xa8
   208c8:	mov	r1, r5
   208cc:	mov	r0, sl
   208d0:	bl	148c4 <_start@@Base+0x1ec8>
   208d4:	cmp	fp, r0
   208d8:	cmpne	r0, r5
   208dc:	mov	r4, r0
   208e0:	bne	20670 <_start@@Base+0xdc74>
   208e4:	b	206c4 <_start@@Base+0xdcc8>
   208e8:	mov	r1, r0
   208ec:	mov	r3, #8
   208f0:	mov	r2, fp
   208f4:	mov	r0, sl
   208f8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   208fc:	mov	r5, r0
   20900:	b	1fc94 <_start@@Base+0xd298>
   20904:	ldrb	r3, [r9, #2]
   20908:	cmp	r3, #32
   2090c:	addhi	r4, r9, #2
   20910:	bls	1f998 <_start@@Base+0xcf9c>
   20914:	b	1f9ac <_start@@Base+0xcfb0>
   20918:	mov	r3, #0
   2091c:	add	r1, r4, #1
   20920:	mov	r2, fp
   20924:	mov	r0, sl
   20928:	str	r3, [sp, #660]	; 0x294
   2092c:	bl	12fa4 <_start@@Base+0x5a8>
   20930:	ldr	r3, [sp, #660]	; 0x294
   20934:	mov	r4, r0
   20938:	b	1e100 <_start@@Base+0xb704>
   2093c:	add	r1, r8, #1
   20940:	sub	r3, fp, r1
   20944:	cmp	r3, #1
   20948:	ble	2095c <_start@@Base+0xdf60>
   2094c:	ldrb	r3, [r8, #1]
   20950:	cmp	r3, #32
   20954:	bhi	2096c <_start@@Base+0xdf70>
   20958:	beq	216a0 <_start@@Base+0xeca4>
   2095c:	mov	r2, fp
   20960:	mov	r0, sl
   20964:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   20968:	mov	r1, r0
   2096c:	cmp	fp, r1
   20970:	beq	20980 <_start@@Base+0xdf84>
   20974:	ldrb	r3, [r1]
   20978:	cmp	r3, #125	; 0x7d
   2097c:	beq	216b4 <_start@@Base+0xecb8>
   20980:	ldr	r8, [pc, #-628]	; 20714 <_start@@Base+0xdd18>
   20984:	add	r8, pc, r8
   20988:	add	r8, r8, #612	; 0x264
   2098c:	str	r8, [sp, #168]	; 0xa8
   20990:	ldrd	r8, [sp, #208]	; 0xd0
   20994:	cmp	fp, r1
   20998:	beq	20ccc <_start@@Base+0xe2d0>
   2099c:	ldrb	r3, [r1]
   209a0:	cmp	r3, #34	; 0x22
   209a4:	moveq	r3, #0
   209a8:	addeq	r1, r1, #1
   209ac:	streq	r3, [sl, #12]
   209b0:	beq	209c4 <_start@@Base+0xdfc8>
   209b4:	cmp	r3, #46	; 0x2e
   209b8:	movne	r3, #1
   209bc:	strne	r3, [sl, #12]
   209c0:	beq	211a0 <_start@@Base+0xe7a4>
   209c4:	sub	r3, fp, r1
   209c8:	cmp	r3, #8
   209cc:	bls	20ce0 <_start@@Base+0xe2e4>
   209d0:	ldrb	r2, [r1, #7]
   209d4:	mov	r3, #0
   209d8:	ldrb	r4, [r1, #6]
   209dc:	lsr	r0, r4, #24
   209e0:	str	r0, [sp, #220]	; 0xdc
   209e4:	lsl	r0, r4, #8
   209e8:	str	r0, [sp, #216]	; 0xd8
   209ec:	ldrd	r4, [sp, #216]	; 0xd8
   209f0:	orr	r4, r4, r2
   209f4:	orr	r5, r5, r3
   209f8:	mov	r2, r4
   209fc:	mov	r3, r5
   20a00:	ldrb	r4, [r1, #5]
   20a04:	lsr	r0, r4, #16
   20a08:	str	r0, [sp, #108]	; 0x6c
   20a0c:	lsl	r0, r4, #16
   20a10:	str	r0, [sp, #104]	; 0x68
   20a14:	ldrd	r4, [sp, #104]	; 0x68
   20a18:	orr	r4, r4, r2
   20a1c:	orr	r5, r5, r3
   20a20:	mov	r2, r4
   20a24:	mov	r3, r5
   20a28:	ldrb	r4, [r1, #4]
   20a2c:	lsr	r0, r4, #8
   20a30:	str	r0, [sp, #52]	; 0x34
   20a34:	lsl	r0, r4, #24
   20a38:	str	r0, [sp, #48]	; 0x30
   20a3c:	ldrd	r4, [sp, #48]	; 0x30
   20a40:	orr	r4, r4, r2
   20a44:	orr	r5, r5, r3
   20a48:	mov	r2, r4
   20a4c:	mov	r3, r5
   20a50:	ldrb	r0, [r1, #3]
   20a54:	str	r0, [sp, #68]	; 0x44
   20a58:	mov	r0, #0
   20a5c:	str	r0, [sp, #64]	; 0x40
   20a60:	ldrd	r4, [sp, #64]	; 0x40
   20a64:	orr	r4, r4, r2
   20a68:	orr	r5, r5, r3
   20a6c:	mov	r2, r4
   20a70:	mov	r3, r5
   20a74:	ldrb	r4, [r1, #2]
   20a78:	lsl	r0, r4, #8
   20a7c:	str	r0, [sp, #36]	; 0x24
   20a80:	mov	r0, #0
   20a84:	str	r0, [sp, #32]
   20a88:	ldrd	r4, [sp, #32]
   20a8c:	orr	r4, r4, r2
   20a90:	orr	r5, r5, r3
   20a94:	mov	r2, r4
   20a98:	mov	r3, r5
   20a9c:	ldrb	r4, [r1, #1]
   20aa0:	lsl	r0, r4, #16
   20aa4:	str	r0, [sp, #28]
   20aa8:	mov	r0, #0
   20aac:	str	r0, [sp, #24]
   20ab0:	ldrd	r4, [sp, #24]
   20ab4:	orr	r4, r4, r2
   20ab8:	orr	r5, r5, r3
   20abc:	mov	r2, r4
   20ac0:	mov	r3, r5
   20ac4:	ldrb	r4, [r1]
   20ac8:	mov	r8, #0
   20acc:	orr	r2, r2, r8
   20ad0:	lsl	r9, r4, #24
   20ad4:	add	r5, pc, #876	; 0x36c
   20ad8:	ldrd	r4, [r5]
   20adc:	orr	r3, r3, r9
   20ae0:	cmp	r3, r5
   20ae4:	cmpeq	r2, r4
   20ae8:	bne	20ccc <_start@@Base+0xe2d0>
   20aec:	add	r4, r1, #8
   20af0:	sub	r0, fp, r4
   20af4:	cmp	r0, #8
   20af8:	bls	20d64 <_start@@Base+0xe368>
   20afc:	ldrb	r6, [r1, #15]
   20b00:	mov	r7, #0
   20b04:	ldrb	r2, [r1, #14]
   20b08:	lsl	r3, r2, #8
   20b0c:	str	r3, [sp, #432]	; 0x1b0
   20b10:	add	r3, sp, #432	; 0x1b0
   20b14:	lsr	ip, r2, #24
   20b18:	str	ip, [sp, #436]	; 0x1b4
   20b1c:	ldrd	r2, [r3]
   20b20:	orr	r2, r2, r6
   20b24:	orr	r3, r3, r7
   20b28:	mov	r6, r2
   20b2c:	mov	r7, r3
   20b30:	ldrb	r2, [r1, #13]
   20b34:	lsl	r3, r2, #16
   20b38:	str	r3, [sp, #304]	; 0x130
   20b3c:	add	r3, sp, #304	; 0x130
   20b40:	lsr	ip, r2, #16
   20b44:	str	ip, [sp, #308]	; 0x134
   20b48:	ldrd	r2, [r3]
   20b4c:	orr	r2, r2, r6
   20b50:	orr	r3, r3, r7
   20b54:	ldrb	r6, [r1, #12]
   20b58:	lsr	ip, r6, #8
   20b5c:	str	ip, [sp, #228]	; 0xe4
   20b60:	lsl	ip, r6, #24
   20b64:	str	ip, [sp, #224]	; 0xe0
   20b68:	ldrd	r6, [sp, #224]	; 0xe0
   20b6c:	orr	r6, r6, r2
   20b70:	orr	r7, r7, r3
   20b74:	mov	r2, r6
   20b78:	mov	r3, r7
   20b7c:	ldrb	ip, [r1, #11]
   20b80:	str	ip, [sp, #252]	; 0xfc
   20b84:	mov	ip, #0
   20b88:	str	ip, [sp, #248]	; 0xf8
   20b8c:	ldrd	r6, [sp, #248]	; 0xf8
   20b90:	orr	r6, r6, r2
   20b94:	orr	r7, r7, r3
   20b98:	mov	r2, r6
   20b9c:	mov	r3, r7
   20ba0:	ldrb	r6, [r1, #10]
   20ba4:	lsl	ip, r6, #8
   20ba8:	str	ip, [sp, #180]	; 0xb4
   20bac:	mov	ip, #0
   20bb0:	str	ip, [sp, #176]	; 0xb0
   20bb4:	ldrd	r6, [sp, #176]	; 0xb0
   20bb8:	orr	r6, r6, r2
   20bbc:	orr	r7, r7, r3
   20bc0:	mov	r2, r6
   20bc4:	mov	r3, r7
   20bc8:	ldrb	r6, [r1, #9]
   20bcc:	lsl	ip, r6, #16
   20bd0:	str	ip, [sp, #156]	; 0x9c
   20bd4:	mov	ip, #0
   20bd8:	str	ip, [sp, #152]	; 0x98
   20bdc:	ldrd	r6, [sp, #152]	; 0x98
   20be0:	orr	r6, r6, r2
   20be4:	orr	r7, r7, r3
   20be8:	mov	r2, r6
   20bec:	mov	r3, r7
   20bf0:	ldrb	r6, [r1, #8]
   20bf4:	lsl	ip, r6, #24
   20bf8:	str	ip, [sp, #84]	; 0x54
   20bfc:	mov	ip, #0
   20c00:	str	ip, [sp, #80]	; 0x50
   20c04:	ldrd	r6, [sp, #80]	; 0x50
   20c08:	orr	r6, r6, r2
   20c0c:	orr	r7, r7, r3
   20c10:	mov	r2, r6
   20c14:	mov	r3, r7
   20c18:	add	r7, pc, #560	; 0x230
   20c1c:	ldrd	r6, [r7]
   20c20:	cmp	r3, r7
   20c24:	cmpeq	r2, r6
   20c28:	beq	20e70 <_start@@Base+0xe474>
   20c2c:	add	r7, pc, #548	; 0x224
   20c30:	ldrd	r6, [r7]
   20c34:	bic	r2, r2, #255	; 0xff
   20c38:	cmp	r3, r7
   20c3c:	cmpeq	r2, r6
   20c40:	bne	20c4c <_start@@Base+0xe250>
   20c44:	cmp	r0, #7
   20c48:	bgt	211b8 <_start@@Base+0xe7bc>
   20c4c:	mov	r1, r4
   20c50:	mov	r2, fp
   20c54:	mov	r0, sl
   20c58:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   20c5c:	mov	r4, r0
   20c60:	sub	r3, fp, r4
   20c64:	cmp	r3, #1
   20c68:	ble	20c7c <_start@@Base+0xe280>
   20c6c:	ldrb	r3, [r4]
   20c70:	cmp	r3, #32
   20c74:	bhi	20c90 <_start@@Base+0xe294>
   20c78:	beq	20e20 <_start@@Base+0xe424>
   20c7c:	mov	r1, r4
   20c80:	mov	r2, fp
   20c84:	mov	r0, sl
   20c88:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   20c8c:	mov	r4, r0
   20c90:	cmp	fp, r4
   20c94:	beq	20e38 <_start@@Base+0xe43c>
   20c98:	ldrb	r3, [r4]
   20c9c:	cmp	r3, #44	; 0x2c
   20ca0:	beq	210a0 <_start@@Base+0xe6a4>
   20ca4:	cmp	r3, #125	; 0x7d
   20ca8:	strd	r8, [sp, #208]	; 0xd0
   20cac:	beq	20de8 <_start@@Base+0xe3ec>
   20cb0:	mov	r1, r4
   20cb4:	mov	r3, #10
   20cb8:	mov	r2, fp
   20cbc:	mov	r0, sl
   20cc0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   20cc4:	mov	r8, r0
   20cc8:	b	20284 <_start@@Base+0xd888>
   20ccc:	mov	r2, fp
   20cd0:	mov	r0, sl
   20cd4:	bl	294c8 <flatcc_json_parser_unmatched_symbol@@Base>
   20cd8:	mov	r4, r0
   20cdc:	b	20c60 <_start@@Base+0xe264>
   20ce0:	sub	r3, r3, #1
   20ce4:	cmp	r3, #7
   20ce8:	addls	pc, pc, r3, lsl #2
   20cec:	b	20ccc <_start@@Base+0xe2d0>
   20cf0:	b	20d58 <_start@@Base+0xe35c>
   20cf4:	b	20d4c <_start@@Base+0xe350>
   20cf8:	b	20d40 <_start@@Base+0xe344>
   20cfc:	b	20d34 <_start@@Base+0xe338>
   20d00:	b	20d28 <_start@@Base+0xe32c>
   20d04:	b	20d1c <_start@@Base+0xe320>
   20d08:	b	20d10 <_start@@Base+0xe314>
   20d0c:	b	209d0 <_start@@Base+0xdfd4>
   20d10:	mov	r2, #0
   20d14:	mov	r3, #0
   20d18:	b	209d8 <_start@@Base+0xdfdc>
   20d1c:	mov	r2, #0
   20d20:	mov	r3, #0
   20d24:	b	20a00 <_start@@Base+0xe004>
   20d28:	mov	r2, #0
   20d2c:	mov	r3, #0
   20d30:	b	20a28 <_start@@Base+0xe02c>
   20d34:	mov	r2, #0
   20d38:	mov	r3, #0
   20d3c:	b	20a50 <_start@@Base+0xe054>
   20d40:	mov	r2, #0
   20d44:	mov	r3, #0
   20d48:	b	20a74 <_start@@Base+0xe078>
   20d4c:	mov	r2, #0
   20d50:	mov	r3, #0
   20d54:	b	20a9c <_start@@Base+0xe0a0>
   20d58:	mov	r2, #0
   20d5c:	mov	r3, #0
   20d60:	b	20ac4 <_start@@Base+0xe0c8>
   20d64:	sub	r3, r0, #1
   20d68:	cmp	r3, #7
   20d6c:	addls	pc, pc, r3, lsl #2
   20d70:	b	20c4c <_start@@Base+0xe250>
   20d74:	b	20ddc <_start@@Base+0xe3e0>
   20d78:	b	20dd0 <_start@@Base+0xe3d4>
   20d7c:	b	20dc4 <_start@@Base+0xe3c8>
   20d80:	b	20db8 <_start@@Base+0xe3bc>
   20d84:	b	20dac <_start@@Base+0xe3b0>
   20d88:	b	20da0 <_start@@Base+0xe3a4>
   20d8c:	b	20d94 <_start@@Base+0xe398>
   20d90:	b	20afc <_start@@Base+0xe100>
   20d94:	mov	r6, #0
   20d98:	mov	r7, #0
   20d9c:	b	20b04 <_start@@Base+0xe108>
   20da0:	mov	r6, #0
   20da4:	mov	r7, #0
   20da8:	b	20b30 <_start@@Base+0xe134>
   20dac:	mov	r2, #0
   20db0:	mov	r3, #0
   20db4:	b	20b54 <_start@@Base+0xe158>
   20db8:	mov	r2, #0
   20dbc:	mov	r3, #0
   20dc0:	b	20b7c <_start@@Base+0xe180>
   20dc4:	mov	r2, #0
   20dc8:	mov	r3, #0
   20dcc:	b	20ba0 <_start@@Base+0xe1a4>
   20dd0:	mov	r2, #0
   20dd4:	mov	r3, #0
   20dd8:	b	20bc8 <_start@@Base+0xe1cc>
   20ddc:	mov	r2, #0
   20de0:	mov	r3, #0
   20de4:	b	20bf0 <_start@@Base+0xe1f4>
   20de8:	add	r8, r4, #1
   20dec:	sub	r3, fp, r8
   20df0:	cmp	r3, #1
   20df4:	ble	20e08 <_start@@Base+0xe40c>
   20df8:	ldrb	r3, [r4, #1]
   20dfc:	cmp	r3, #32
   20e00:	bhi	20284 <_start@@Base+0xd888>
   20e04:	beq	212ac <_start@@Base+0xe8b0>
   20e08:	mov	r1, r8
   20e0c:	mov	r2, fp
   20e10:	mov	r0, sl
   20e14:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   20e18:	mov	r8, r0
   20e1c:	b	20284 <_start@@Base+0xd888>
   20e20:	ldrb	r3, [r4, #1]
   20e24:	cmp	r3, #32
   20e28:	addhi	r4, r4, #1
   20e2c:	bls	20c7c <_start@@Base+0xe280>
   20e30:	cmp	fp, r4
   20e34:	bne	20c98 <_start@@Base+0xe29c>
   20e38:	strd	r8, [sp, #208]	; 0xd0
   20e3c:	mov	r8, fp
   20e40:	b	20284 <_start@@Base+0xd888>
   20e44:	nop			; (mov r0, r0)
   20e48:	svcpl	0x00626262
   20e4c:	cmnvs	r1, r1, ror #2
   20e50:	cmnvs	r2, pc, asr r4
   20e54:	subsvs	r7, pc, #116, 6	; 0xd0000001
   20e58:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   20e5c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   20e60:	movwvc	r0, #0
   20e64:	cmnvc	r4, #112, 10	; 0x1c000000
   20e68:	andeq	fp, r1, r4, lsl #24
   20e6c:			; <UNDEFINED> instruction: 0xffff7950
   20e70:	add	r4, r1, #16
   20e74:	sub	r0, fp, r4
   20e78:	cmp	r0, #8
   20e7c:	bls	2111c <_start@@Base+0xe720>
   20e80:	ldrb	r6, [r1, #23]
   20e84:	mov	r7, #0
   20e88:	ldrb	r2, [r1, #22]
   20e8c:	lsl	r3, r2, #8
   20e90:	str	r3, [sp, #616]	; 0x268
   20e94:	add	r3, sp, #616	; 0x268
   20e98:	lsr	ip, r2, #24
   20e9c:	str	ip, [sp, #620]	; 0x26c
   20ea0:	ldrd	r2, [r3]
   20ea4:	orr	r2, r2, r6
   20ea8:	orr	r3, r3, r7
   20eac:	mov	r6, r2
   20eb0:	mov	r7, r3
   20eb4:	ldrb	r2, [r1, #21]
   20eb8:	lsl	r3, r2, #16
   20ebc:	str	r3, [sp, #568]	; 0x238
   20ec0:	add	r3, sp, #568	; 0x238
   20ec4:	lsr	ip, r2, #16
   20ec8:	str	ip, [sp, #572]	; 0x23c
   20ecc:	ldrd	r2, [r3]
   20ed0:	orr	r2, r2, r6
   20ed4:	orr	r3, r3, r7
   20ed8:	mov	r6, r2
   20edc:	mov	r7, r3
   20ee0:	ldrb	r2, [r1, #20]
   20ee4:	lsl	r3, r2, #24
   20ee8:	str	r3, [sp, #536]	; 0x218
   20eec:	add	r3, sp, #536	; 0x218
   20ef0:	lsr	ip, r2, #8
   20ef4:	str	ip, [sp, #540]	; 0x21c
   20ef8:	ldrd	r2, [r3]
   20efc:	orr	r2, r2, r6
   20f00:	orr	r3, r3, r7
   20f04:	ldrb	ip, [r1, #19]
   20f08:	str	ip, [sp, #548]	; 0x224
   20f0c:	mov	ip, #0
   20f10:	str	ip, [sp, #544]	; 0x220
   20f14:	add	ip, sp, #544	; 0x220
   20f18:	ldrd	r6, [ip]
   20f1c:	orr	r6, r6, r2
   20f20:	orr	r7, r7, r3
   20f24:	mov	r2, r6
   20f28:	mov	r3, r7
   20f2c:	ldrb	r6, [r1, #18]
   20f30:	lsl	ip, r6, #8
   20f34:	str	ip, [sp, #516]	; 0x204
   20f38:	mov	ip, #0
   20f3c:	str	ip, [sp, #512]	; 0x200
   20f40:	add	ip, sp, #512	; 0x200
   20f44:	ldrd	r6, [ip]
   20f48:	orr	r6, r6, r2
   20f4c:	orr	r7, r7, r3
   20f50:	mov	r2, r6
   20f54:	mov	r3, r7
   20f58:	ldrb	r6, [r1, #17]
   20f5c:	lsl	ip, r6, #16
   20f60:	str	ip, [sp, #476]	; 0x1dc
   20f64:	mov	ip, #0
   20f68:	str	ip, [sp, #472]	; 0x1d8
   20f6c:	add	ip, sp, #472	; 0x1d8
   20f70:	ldrd	r6, [ip]
   20f74:	orr	r6, r6, r2
   20f78:	orr	r7, r7, r3
   20f7c:	mov	r2, r6
   20f80:	mov	r3, r7
   20f84:	ldrb	r6, [r1, #16]
   20f88:	lsl	r1, r6, #24
   20f8c:	str	r1, [sp, #428]	; 0x1ac
   20f90:	mov	r1, #0
   20f94:	str	r1, [sp, #424]	; 0x1a8
   20f98:	add	r1, sp, #424	; 0x1a8
   20f9c:	ldrd	r6, [r1]
   20fa0:	orr	r6, r6, r2
   20fa4:	orr	r7, r7, r3
   20fa8:	mov	r3, r7
   20fac:	and	r2, r6, #-16777216	; 0xff000000
   20fb0:	sub	r7, pc, #344	; 0x158
   20fb4:	ldrd	r6, [r7]
   20fb8:	cmp	r3, r7
   20fbc:	cmpeq	r2, r6
   20fc0:	bne	20c4c <_start@@Base+0xe250>
   20fc4:	cmp	r0, #5
   20fc8:	ble	20c4c <_start@@Base+0xe250>
   20fcc:	mov	r3, #5
   20fd0:	mov	r2, fp
   20fd4:	mov	r1, r4
   20fd8:	mov	r0, sl
   20fdc:	bl	18084 <_start@@Base+0x5688>
   20fe0:	cmp	r4, r0
   20fe4:	mov	r5, r0
   20fe8:	beq	20c4c <_start@@Base+0xe250>
   20fec:	add	r1, sp, #424	; 0x1a8
   20ff0:	cmp	fp, r0
   20ff4:	ldrd	r0, [r1]
   20ff8:	mov	r2, #0
   20ffc:	mov	r3, #0
   21000:	add	r1, sp, #672	; 0x2a0
   21004:	str	r0, [sp, #660]	; 0x294
   21008:	str	r0, [sp, #664]	; 0x298
   2100c:	strd	r2, [r1]
   21010:	beq	214d8 <_start@@Base+0xeadc>
   21014:	str	r1, [sp]
   21018:	add	r3, sp, #664	; 0x298
   2101c:	mov	r2, fp
   21020:	mov	r1, r5
   21024:	mov	r0, sl
   21028:	bl	296fc <flatcc_json_parser_integer@@Base>
   2102c:	cmp	r5, r0
   21030:	mov	r4, r0
   21034:	beq	214d8 <_start@@Base+0xeadc>
   21038:	ldr	r3, [sp, #664]	; 0x298
   2103c:	cmp	r3, #0
   21040:	bne	21338 <_start@@Base+0xe93c>
   21044:	add	r3, sp, #672	; 0x2a0
   21048:	mov	r1, #0
   2104c:	ldrd	r2, [r3]
   21050:	mvn	r0, #0
   21054:	cmp	r3, r1
   21058:	cmpeq	r2, r0
   2105c:	strls	r2, [sp, #660]	; 0x294
   21060:	bhi	21360 <_start@@Base+0xe964>
   21064:	cmp	r2, #0
   21068:	bne	21078 <_start@@Base+0xe67c>
   2106c:	ldr	r3, [sl, #8]
   21070:	tst	r3, #2
   21074:	beq	20c60 <_start@@Base+0xe264>
   21078:	mov	r3, #4
   2107c:	mov	r2, r3
   21080:	mov	r1, #1
   21084:	ldr	r0, [sl]
   21088:	bl	25728 <flatcc_builder_table_add@@Base>
   2108c:	cmp	r0, #0
   21090:	beq	2132c <_start@@Base+0xe930>
   21094:	ldr	r3, [sp, #660]	; 0x294
   21098:	str	r3, [r0]
   2109c:	b	20c60 <_start@@Base+0xe264>
   210a0:	add	r1, r4, #1
   210a4:	sub	r3, fp, r1
   210a8:	cmp	r3, #1
   210ac:	ble	210c0 <_start@@Base+0xe6c4>
   210b0:	ldrb	r3, [r4, #1]
   210b4:	cmp	r3, #32
   210b8:	bhi	210d0 <_start@@Base+0xe6d4>
   210bc:	beq	212c0 <_start@@Base+0xe8c4>
   210c0:	mov	r2, fp
   210c4:	mov	r0, sl
   210c8:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   210cc:	mov	r1, r0
   210d0:	cmp	fp, r1
   210d4:	beq	2137c <_start@@Base+0xe980>
   210d8:	ldrb	r3, [r1]
   210dc:	cmp	r3, #125	; 0x7d
   210e0:	bne	20994 <_start@@Base+0xdf98>
   210e4:	strd	r8, [sp, #208]	; 0xd0
   210e8:	add	r8, r1, #1
   210ec:	sub	r3, fp, r8
   210f0:	cmp	r3, #1
   210f4:	ble	20e08 <_start@@Base+0xe40c>
   210f8:	ldrb	r3, [r1, #1]
   210fc:	cmp	r3, #32
   21100:	bhi	20284 <_start@@Base+0xd888>
   21104:	bne	20e08 <_start@@Base+0xe40c>
   21108:	ldrb	r3, [r1, #2]
   2110c:	cmp	r3, #32
   21110:	addhi	r8, r1, #2
   21114:	bls	20e08 <_start@@Base+0xe40c>
   21118:	b	20284 <_start@@Base+0xd888>
   2111c:	sub	r3, r0, #1
   21120:	cmp	r3, #7
   21124:	addls	pc, pc, r3, lsl #2
   21128:	b	20c4c <_start@@Base+0xe250>
   2112c:	b	21194 <_start@@Base+0xe798>
   21130:	b	21188 <_start@@Base+0xe78c>
   21134:	b	2117c <_start@@Base+0xe780>
   21138:	b	21170 <_start@@Base+0xe774>
   2113c:	b	21164 <_start@@Base+0xe768>
   21140:	b	21158 <_start@@Base+0xe75c>
   21144:	b	2114c <_start@@Base+0xe750>
   21148:	b	20e80 <_start@@Base+0xe484>
   2114c:	mov	r6, #0
   21150:	mov	r7, #0
   21154:	b	20e88 <_start@@Base+0xe48c>
   21158:	mov	r6, #0
   2115c:	mov	r7, #0
   21160:	b	20eb4 <_start@@Base+0xe4b8>
   21164:	mov	r6, #0
   21168:	mov	r7, #0
   2116c:	b	20ee0 <_start@@Base+0xe4e4>
   21170:	mov	r2, #0
   21174:	mov	r3, #0
   21178:	b	20f04 <_start@@Base+0xe508>
   2117c:	mov	r2, #0
   21180:	mov	r3, #0
   21184:	b	20f2c <_start@@Base+0xe530>
   21188:	mov	r2, #0
   2118c:	mov	r3, #0
   21190:	b	20f58 <_start@@Base+0xe55c>
   21194:	mov	r2, #0
   21198:	mov	r3, #0
   2119c:	b	20f84 <_start@@Base+0xe588>
   211a0:	mov	r3, #5
   211a4:	mov	r2, fp
   211a8:	mov	r0, sl
   211ac:	bl	27994 <flatcc_json_parser_set_error@@Base>
   211b0:	mov	r1, r0
   211b4:	b	209c4 <_start@@Base+0xdfc8>
   211b8:	mov	r3, #7
   211bc:	mov	r2, fp
   211c0:	mov	r1, r4
   211c4:	mov	r0, sl
   211c8:	bl	18084 <_start@@Base+0x5688>
   211cc:	cmp	r4, r0
   211d0:	mov	r5, r0
   211d4:	beq	20c4c <_start@@Base+0xe250>
   211d8:	ldr	r1, [sp, #80]	; 0x50
   211dc:	mov	r2, #0
   211e0:	mov	r3, #0
   211e4:	str	r1, [sp, #660]	; 0x294
   211e8:	add	r1, sp, #664	; 0x298
   211ec:	cmp	fp, r0
   211f0:	strd	r2, [r1]
   211f4:	add	r1, sp, #672	; 0x2a0
   211f8:	strd	r2, [r1]
   211fc:	beq	21300 <_start@@Base+0xe904>
   21200:	str	r1, [sp]
   21204:	add	r3, sp, #660	; 0x294
   21208:	mov	r1, r0
   2120c:	mov	r2, fp
   21210:	mov	r0, sl
   21214:	bl	296fc <flatcc_json_parser_integer@@Base>
   21218:	cmp	r5, r0
   2121c:	mov	r4, r0
   21220:	beq	21300 <_start@@Base+0xe904>
   21224:	ldr	r1, [sp, #660]	; 0x294
   21228:	add	r3, sp, #672	; 0x2a0
   2122c:	cmp	r1, #0
   21230:	ldrd	r2, [r3]
   21234:	beq	21294 <_start@@Base+0xe898>
   21238:	cmp	r3, #-2147483648	; 0x80000000
   2123c:	cmpeq	r2, #0
   21240:	bhi	212d4 <_start@@Base+0xe8d8>
   21244:	rsbs	r2, r2, #0
   21248:	rsc	r3, r3, #0
   2124c:	add	r1, sp, #664	; 0x298
   21250:	strd	r2, [r1]
   21254:	orrs	r3, r2, r3
   21258:	bne	21268 <_start@@Base+0xe86c>
   2125c:	ldr	r3, [sl, #8]
   21260:	tst	r3, #2
   21264:	beq	20c60 <_start@@Base+0xe264>
   21268:	mov	r3, #8
   2126c:	mov	r2, r3
   21270:	mov	r1, #0
   21274:	ldr	r0, [sl]
   21278:	bl	25728 <flatcc_builder_table_add@@Base>
   2127c:	cmp	r0, #0
   21280:	beq	2132c <_start@@Base+0xe930>
   21284:	add	r3, sp, #664	; 0x298
   21288:	ldrd	r2, [r3]
   2128c:	strd	r2, [r0]
   21290:	b	20c60 <_start@@Base+0xe264>
   21294:	cmp	r2, #0
   21298:	sbcs	r1, r3, #0
   2129c:	blt	21460 <_start@@Base+0xea64>
   212a0:	add	r1, sp, #664	; 0x298
   212a4:	strd	r2, [r1]
   212a8:	b	21254 <_start@@Base+0xe858>
   212ac:	ldrb	r3, [r4, #2]
   212b0:	cmp	r3, #32
   212b4:	addhi	r8, r4, #2
   212b8:	bls	20e08 <_start@@Base+0xe40c>
   212bc:	b	20284 <_start@@Base+0xd888>
   212c0:	ldrb	r3, [r4, #2]
   212c4:	cmp	r3, #32
   212c8:	addhi	r1, r4, #2
   212cc:	bls	210c0 <_start@@Base+0xe6c4>
   212d0:	b	210d0 <_start@@Base+0xe6d4>
   212d4:	mov	r1, r0
   212d8:	mov	r3, #8
   212dc:	mov	r2, fp
   212e0:	mov	r0, sl
   212e4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   212e8:	mov	r4, r0
   212ec:	cmp	r5, r4
   212f0:	beq	21300 <_start@@Base+0xe904>
   212f4:	add	r3, sp, #664	; 0x298
   212f8:	ldrd	r2, [r3]
   212fc:	b	21254 <_start@@Base+0xe858>
   21300:	add	r3, sp, #664	; 0x298
   21304:	str	r3, [sp]
   21308:	mov	r2, fp
   2130c:	ldr	r3, [sp, #112]	; 0x70
   21310:	mov	r1, r5
   21314:	mov	r0, sl
   21318:	bl	148c4 <_start@@Base+0x1ec8>
   2131c:	cmp	fp, r0
   21320:	cmpne	r0, r5
   21324:	mov	r4, r0
   21328:	bne	212f4 <_start@@Base+0xe8f8>
   2132c:	strd	r8, [sp, #208]	; 0xd0
   21330:	mov	r8, r4
   21334:	b	20290 <_start@@Base+0xd894>
   21338:	mov	r1, r0
   2133c:	mov	r3, #8
   21340:	mov	r2, fp
   21344:	mov	r0, sl
   21348:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2134c:	mov	r4, r0
   21350:	cmp	r5, r4
   21354:	beq	214d8 <_start@@Base+0xeadc>
   21358:	ldr	r2, [sp, #660]	; 0x294
   2135c:	b	21064 <_start@@Base+0xe668>
   21360:	mov	r1, r4
   21364:	mov	r3, #7
   21368:	mov	r2, fp
   2136c:	mov	r0, sl
   21370:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21374:	mov	r4, r0
   21378:	b	21350 <_start@@Base+0xe954>
   2137c:	mov	r3, #10
   21380:	mov	r2, fp
   21384:	mov	r1, fp
   21388:	mov	r0, sl
   2138c:	strd	r8, [sp, #208]	; 0xd0
   21390:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21394:	mov	r8, r0
   21398:	b	20284 <_start@@Base+0xd888>
   2139c:	add	r3, sp, #656	; 0x290
   213a0:	str	r3, [sp]
   213a4:	mov	r2, fp
   213a8:	ldr	r3, [sp, #40]	; 0x28
   213ac:	mov	r1, r6
   213b0:	mov	r0, sl
   213b4:	bl	1443c <_start@@Base+0x1a40>
   213b8:	cmp	fp, r0
   213bc:	cmpne	r0, r6
   213c0:	mov	r5, r0
   213c4:	bne	204f8 <_start@@Base+0xdafc>
   213c8:	b	1fadc <_start@@Base+0xd0e0>
   213cc:	ldr	r0, [sl]
   213d0:	str	r1, [sp, #112]	; 0x70
   213d4:	bl	246dc <flatcc_builder_end_table@@Base>
   213d8:	ldr	r1, [sp, #112]	; 0x70
   213dc:	subs	r4, r0, #0
   213e0:	beq	1eeb4 <_start@@Base+0xc4b8>
   213e4:	b	201b4 <_start@@Base+0xd7b8>
   213e8:	sub	r3, fp, r4
   213ec:	cmp	r3, #6
   213f0:	ble	1fd98 <_start@@Base+0xd39c>
   213f4:	mov	r1, r4
   213f8:	mov	r3, #6
   213fc:	mov	r2, fp
   21400:	mov	r0, sl
   21404:	bl	18084 <_start@@Base+0x5688>
   21408:	cmp	r4, r0
   2140c:	mov	r1, r0
   21410:	beq	1fd98 <_start@@Base+0xd39c>
   21414:	ldr	ip, [sp, #672]	; 0x2a0
   21418:	ldr	r3, [pc, #-1460]	; 20e6c <_start@@Base+0xe470>
   2141c:	ldr	r0, [sp, #232]	; 0xe8
   21420:	mov	r2, #5
   21424:	add	r3, pc, r3
   21428:	str	r0, [sp, #8]
   2142c:	str	r3, [sp, #12]
   21430:	stm	sp, {r2, ip}
   21434:	mov	r3, #2
   21438:	mov	r2, fp
   2143c:	mov	r0, sl
   21440:	bl	29fb4 <flatcc_json_parser_union_type@@Base>
   21444:	b	1fda8 <_start@@Base+0xd3ac>
   21448:	ldr	r0, [sl]
   2144c:	bl	246dc <flatcc_builder_end_table@@Base>
   21450:	cmp	r0, #0
   21454:	str	r0, [sp, #652]	; 0x28c
   21458:	beq	1f520 <_start@@Base+0xcb24>
   2145c:	b	1f544 <_start@@Base+0xcb48>
   21460:	mov	r1, r0
   21464:	mov	r3, #7
   21468:	mov	r2, fp
   2146c:	mov	r0, sl
   21470:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21474:	mov	r4, r0
   21478:	b	212ec <_start@@Base+0xe8f0>
   2147c:	ldr	r3, [pc, #-1564]	; 20e68 <_start@@Base+0xe46c>
   21480:	add	r2, sp, #656	; 0x290
   21484:	add	r3, pc, r3
   21488:	str	r2, [sp]
   2148c:	add	r3, r3, #532	; 0x214
   21490:	mov	r2, fp
   21494:	mov	r1, r9
   21498:	mov	r0, sl
   2149c:	bl	141f4 <_start@@Base+0x17f8>
   214a0:	cmp	fp, r0
   214a4:	cmpne	r0, r9
   214a8:	mov	r5, r0
   214ac:	bne	1fc9c <_start@@Base+0xd2a0>
   214b0:	b	1fadc <_start@@Base+0xd0e0>
   214b4:	mov	ip, #0
   214b8:	mov	r3, #10
   214bc:	mov	r2, fp
   214c0:	mov	r1, fp
   214c4:	mov	r0, sl
   214c8:	str	ip, [sp, #648]	; 0x288
   214cc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   214d0:	ldr	r3, [sp, #648]	; 0x288
   214d4:	b	1e95c <_start@@Base+0xbf60>
   214d8:	add	r3, sp, #660	; 0x294
   214dc:	str	r3, [sp]
   214e0:	mov	r2, fp
   214e4:	ldr	r3, [sp, #168]	; 0xa8
   214e8:	mov	r1, r5
   214ec:	mov	r0, sl
   214f0:	bl	13d7c <_start@@Base+0x1380>
   214f4:	cmp	fp, r0
   214f8:	cmpne	r0, r5
   214fc:	mov	r4, r0
   21500:	bne	21358 <_start@@Base+0xe95c>
   21504:	b	2132c <_start@@Base+0xe930>
   21508:	mov	ip, #0
   2150c:	mov	r3, #10
   21510:	mov	r2, fp
   21514:	mov	r1, fp
   21518:	mov	r0, sl
   2151c:	str	ip, [sp, #656]	; 0x290
   21520:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21524:	ldr	r3, [sp, #656]	; 0x290
   21528:	b	1f1a8 <_start@@Base+0xc7ac>
   2152c:	add	r4, r4, #16
   21530:	mov	r0, r4
   21534:	mov	r1, fp
   21538:	bl	12b28 <_start@@Base+0x12c>
   2153c:	add	r3, pc, #420	; 0x1a4
   21540:	ldrd	r2, [r3]
   21544:	mov	r0, #0
   21548:	bic	r1, r1, #255	; 0xff
   2154c:	cmp	r1, r3
   21550:	cmpeq	r0, r2
   21554:	bne	1fd98 <_start@@Base+0xd39c>
   21558:	sub	r3, fp, r4
   2155c:	cmp	r3, #3
   21560:	ble	1fd98 <_start@@Base+0xd39c>
   21564:	mov	r1, r4
   21568:	mov	r3, #3
   2156c:	mov	r2, fp
   21570:	mov	r0, sl
   21574:	bl	18084 <_start@@Base+0x5688>
   21578:	cmp	r4, r0
   2157c:	mov	r1, r0
   21580:	beq	1fd98 <_start@@Base+0xd39c>
   21584:	ldr	r3, [pc, #356]	; 216f0 <_start@@Base+0xecf4>
   21588:	ldr	ip, [sp, #672]	; 0x2a0
   2158c:	ldr	r2, [pc, #352]	; 216f4 <_start@@Base+0xecf8>
   21590:	mov	r0, #1
   21594:	add	r3, pc, r3
   21598:	add	r2, pc, r2
   2159c:	add	r3, r3, #684	; 0x2ac
   215a0:	str	r3, [sp, #8]
   215a4:	str	r2, [sp, #12]
   215a8:	stm	sp, {r0, ip}
   215ac:	mov	r3, #0
   215b0:	mov	r2, fp
   215b4:	mov	r0, sl
   215b8:	bl	29fb4 <flatcc_json_parser_union_type@@Base>
   215bc:	b	1fda8 <_start@@Base+0xd3ac>
   215c0:	mov	r3, #0
   215c4:	add	r1, r4, #1
   215c8:	mov	r2, fp
   215cc:	mov	r0, sl
   215d0:	str	r3, [sp, #640]	; 0x280
   215d4:	bl	12fa4 <_start@@Base+0x5a8>
   215d8:	ldr	r3, [sp, #640]	; 0x280
   215dc:	mov	r4, r0
   215e0:	b	1dd44 <_start@@Base+0xb348>
   215e4:	mov	r9, r1
   215e8:	b	1ee6c <_start@@Base+0xc470>
   215ec:	add	r3, sp, #576	; 0x240
   215f0:	strd	r8, [r3]
   215f4:	mov	r8, r1
   215f8:	b	1f514 <_start@@Base+0xcb18>
   215fc:	mov	ip, #0
   21600:	mov	r3, #10
   21604:	mov	r2, fp
   21608:	mov	r1, fp
   2160c:	mov	r0, sl
   21610:	str	ip, [sp, #660]	; 0x294
   21614:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21618:	ldr	r3, [sp, #660]	; 0x294
   2161c:	mov	r4, r0
   21620:	b	1e100 <_start@@Base+0xb704>
   21624:	mov	r1, r0
   21628:	mov	r3, #7
   2162c:	mov	r2, fp
   21630:	mov	r0, sl
   21634:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21638:	mov	r4, r0
   2163c:	b	20668 <_start@@Base+0xdc6c>
   21640:	mov	r4, r9
   21644:	b	1e3a4 <_start@@Base+0xb9a8>
   21648:	mov	ip, #0
   2164c:	mov	r3, #10
   21650:	mov	r2, fp
   21654:	mov	r1, fp
   21658:	mov	r0, sl
   2165c:	str	ip, [sp, #640]	; 0x280
   21660:	bl	27994 <flatcc_json_parser_set_error@@Base>
   21664:	ldr	r3, [sp, #640]	; 0x280
   21668:	mov	r4, r0
   2166c:	b	1dd44 <_start@@Base+0xb348>
   21670:	ldrb	r3, [r0, #2]
   21674:	cmp	r3, #32
   21678:	bls	205cc <_start@@Base+0xdbd0>
   2167c:	add	r9, r0, #2
   21680:	b	1ee6c <_start@@Base+0xc470>
   21684:	ldrb	r3, [r0, #2]
   21688:	cmp	r3, #32
   2168c:	bls	2063c <_start@@Base+0xdc40>
   21690:	add	r3, sp, #576	; 0x240
   21694:	strd	r8, [r3]
   21698:	add	r8, r0, #2
   2169c:	b	1f514 <_start@@Base+0xcb18>
   216a0:	ldrb	r3, [r8, #2]
   216a4:	cmp	r3, #32
   216a8:	addhi	r1, r8, #2
   216ac:	bls	2095c <_start@@Base+0xdf60>
   216b0:	b	2096c <_start@@Base+0xdf70>
   216b4:	add	r1, r1, #1
   216b8:	mov	r2, fp
   216bc:	mov	r0, sl
   216c0:	bl	12fa4 <_start@@Base+0x5a8>
   216c4:	mov	r8, r0
   216c8:	b	20284 <_start@@Base+0xd888>
   216cc:	mov	r6, #0
   216d0:	mov	r7, #0
   216d4:	b	1e2dc <_start@@Base+0xb8e0>
   216d8:	mov	r6, #0
   216dc:	mov	r7, #0
   216e0:	b	1df24 <_start@@Base+0xb528>
   216e4:	nop			; (mov r0, r0)
   216e8:	andeq	r0, r0, r0
   216ec:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   216f0:	strdeq	fp, [r1], -r4
   216f4:			; <UNDEFINED> instruction: 0xffff77dc

000216f8 <verify_parse@@Base>:
   216f8:	cmp	r0, #0
   216fc:	push	{r4, lr}
   21700:	beq	21714 <verify_parse@@Base+0x1c>
   21704:	ldr	r3, [pc, #528]	; 2191c <verify_parse@@Base+0x224>
   21708:	ldr	r2, [r0, #4]
   2170c:	cmp	r2, r3
   21710:	beq	21734 <verify_parse@@Base+0x3c>
   21714:	ldr	r3, [pc, #516]	; 21920 <verify_parse@@Base+0x228>
   21718:	ldr	r1, [pc, #516]	; 21924 <verify_parse@@Base+0x22c>
   2171c:	ldr	r0, [pc, #516]	; 21928 <verify_parse@@Base+0x230>
   21720:	add	r3, pc, r3
   21724:	mov	r2, #696	; 0x2b8
   21728:	add	r1, pc, r1
   2172c:	add	r0, pc, r0
   21730:	bl	126a0 <__assert_fail@plt>
   21734:	ldr	r2, [r0]
   21738:	adds	r3, r0, r2
   2173c:	beq	21714 <verify_parse@@Base+0x1c>
   21740:	ldr	r2, [r0, r2]
   21744:	sub	r2, r3, r2
   21748:	ldrh	r1, [r2]
   2174c:	cmp	r1, #5
   21750:	bhi	21778 <verify_parse@@Base+0x80>
   21754:	ldr	r3, [pc, #464]	; 2192c <verify_parse@@Base+0x234>
   21758:	ldr	r1, [pc, #464]	; 21930 <verify_parse@@Base+0x238>
   2175c:	ldr	r0, [pc, #464]	; 21934 <verify_parse@@Base+0x23c>
   21760:	add	r3, pc, r3
   21764:	mov	r2, #45	; 0x2d
   21768:	add	r3, r3, #28
   2176c:	add	r1, pc, r1
   21770:	add	r0, pc, r0
   21774:	bl	126a0 <__assert_fail@plt>
   21778:	ldrh	r2, [r2, #4]
   2177c:	cmp	r2, #0
   21780:	beq	21754 <verify_parse@@Base+0x5c>
   21784:	adds	r3, r3, r2
   21788:	beq	21754 <verify_parse@@Base+0x5c>
   2178c:	vldr	s15, [pc, #380]	; 21910 <verify_parse@@Base+0x218>
   21790:	vldr	s14, [r3]
   21794:	vcmp.f32	s14, s15
   21798:	vmrs	APSR_nzcv, fpscr
   2179c:	bne	21808 <verify_parse@@Base+0x110>
   217a0:	vldr	s15, [pc, #364]	; 21914 <verify_parse@@Base+0x21c>
   217a4:	vldr	s14, [r3, #4]
   217a8:	vcmp.f32	s14, s15
   217ac:	vmrs	APSR_nzcv, fpscr
   217b0:	bne	2182c <verify_parse@@Base+0x134>
   217b4:	vldr	s15, [pc, #348]	; 21918 <verify_parse@@Base+0x220>
   217b8:	vldr	s14, [r3, #8]
   217bc:	vcmp.f32	s14, s15
   217c0:	vmrs	APSR_nzcv, fpscr
   217c4:	bne	21850 <verify_parse@@Base+0x158>
   217c8:	vldr	d7, [pc, #312]	; 21908 <verify_parse@@Base+0x210>
   217cc:	vldr	d6, [r3, #16]
   217d0:	vcmp.f64	d6, d7
   217d4:	vmrs	APSR_nzcv, fpscr
   217d8:	bne	21874 <verify_parse@@Base+0x17c>
   217dc:	ldrsb	r2, [r3, #24]
   217e0:	cmp	r2, #2
   217e4:	bne	21898 <verify_parse@@Base+0x1a0>
   217e8:	ldrsh	r2, [r3, #26]
   217ec:	cmp	r2, #5
   217f0:	bne	218bc <verify_parse@@Base+0x1c4>
   217f4:	ldrsb	r3, [r3, #28]
   217f8:	cmp	r3, #6
   217fc:	bne	218e0 <verify_parse@@Base+0x1e8>
   21800:	mov	r0, #0
   21804:	pop	{r4, pc}
   21808:	ldr	r3, [pc, #296]	; 21938 <verify_parse@@Base+0x240>
   2180c:	ldr	r1, [pc, #296]	; 2193c <verify_parse@@Base+0x244>
   21810:	ldr	r0, [pc, #296]	; 21940 <verify_parse@@Base+0x248>
   21814:	add	r3, pc, r3
   21818:	mov	r2, #46	; 0x2e
   2181c:	add	r3, r3, #28
   21820:	add	r1, pc, r1
   21824:	add	r0, pc, r0
   21828:	bl	126a0 <__assert_fail@plt>
   2182c:	ldr	r3, [pc, #272]	; 21944 <verify_parse@@Base+0x24c>
   21830:	ldr	r1, [pc, #272]	; 21948 <verify_parse@@Base+0x250>
   21834:	ldr	r0, [pc, #272]	; 2194c <verify_parse@@Base+0x254>
   21838:	add	r3, pc, r3
   2183c:	mov	r2, #47	; 0x2f
   21840:	add	r3, r3, #28
   21844:	add	r1, pc, r1
   21848:	add	r0, pc, r0
   2184c:	bl	126a0 <__assert_fail@plt>
   21850:	ldr	r3, [pc, #248]	; 21950 <verify_parse@@Base+0x258>
   21854:	ldr	r1, [pc, #248]	; 21954 <verify_parse@@Base+0x25c>
   21858:	ldr	r0, [pc, #248]	; 21958 <verify_parse@@Base+0x260>
   2185c:	add	r3, pc, r3
   21860:	mov	r2, #48	; 0x30
   21864:	add	r3, r3, #28
   21868:	add	r1, pc, r1
   2186c:	add	r0, pc, r0
   21870:	bl	126a0 <__assert_fail@plt>
   21874:	ldr	r3, [pc, #224]	; 2195c <verify_parse@@Base+0x264>
   21878:	ldr	r1, [pc, #224]	; 21960 <verify_parse@@Base+0x268>
   2187c:	ldr	r0, [pc, #224]	; 21964 <verify_parse@@Base+0x26c>
   21880:	add	r3, pc, r3
   21884:	mov	r2, #49	; 0x31
   21888:	add	r3, r3, #28
   2188c:	add	r1, pc, r1
   21890:	add	r0, pc, r0
   21894:	bl	126a0 <__assert_fail@plt>
   21898:	ldr	r3, [pc, #200]	; 21968 <verify_parse@@Base+0x270>
   2189c:	ldr	r1, [pc, #200]	; 2196c <verify_parse@@Base+0x274>
   218a0:	ldr	r0, [pc, #200]	; 21970 <verify_parse@@Base+0x278>
   218a4:	add	r3, pc, r3
   218a8:	mov	r2, #50	; 0x32
   218ac:	add	r3, r3, #28
   218b0:	add	r1, pc, r1
   218b4:	add	r0, pc, r0
   218b8:	bl	126a0 <__assert_fail@plt>
   218bc:	ldr	r3, [pc, #176]	; 21974 <verify_parse@@Base+0x27c>
   218c0:	ldr	r1, [pc, #176]	; 21978 <verify_parse@@Base+0x280>
   218c4:	ldr	r0, [pc, #176]	; 2197c <verify_parse@@Base+0x284>
   218c8:	add	r3, pc, r3
   218cc:	mov	r2, #53	; 0x35
   218d0:	add	r3, r3, #28
   218d4:	add	r1, pc, r1
   218d8:	add	r0, pc, r0
   218dc:	bl	126a0 <__assert_fail@plt>
   218e0:	ldr	r3, [pc, #152]	; 21980 <verify_parse@@Base+0x288>
   218e4:	ldr	r1, [pc, #152]	; 21984 <verify_parse@@Base+0x28c>
   218e8:	ldr	r0, [pc, #152]	; 21988 <verify_parse@@Base+0x290>
   218ec:	add	r3, pc, r3
   218f0:	mov	r2, #54	; 0x36
   218f4:	add	r3, r3, #28
   218f8:	add	r1, pc, r1
   218fc:	add	r0, pc, r0
   21900:	bl	126a0 <__assert_fail@plt>
   21904:	nop			; (mov r0, r0)
   21908:	andeq	r0, r0, r0
   2190c:	andmi	r0, r8, r0
   21910:	svccc	0x00800000
   21914:	andmi	r0, r0, r0
   21918:	submi	r0, r0, r0
   2191c:	movtpl	r4, #61261	; 0xef4d
   21920:	andeq	r9, r0, r4, asr r8
   21924:	muleq	r0, r0, r8
   21928:	andeq	r9, r0, r4, lsl #18
   2192c:	andeq	r9, r0, r4, lsl r8
   21930:	andeq	r9, r0, ip, ror #17
   21934:	andeq	sl, r0, r0, lsr #5
   21938:	andeq	r9, r0, r0, ror #14
   2193c:	andeq	r9, r0, r8, lsr r8
   21940:	andeq	sl, r0, ip, ror #3
   21944:	andeq	r9, r0, ip, lsr r7
   21948:	andeq	r9, r0, r4, lsl r8
   2194c:	andeq	sl, r0, r8, asr #3
   21950:	andeq	r9, r0, r8, lsl r7
   21954:	strdeq	r9, [r0], -r0
   21958:	andeq	sl, r0, r4, lsr #3
   2195c:	strdeq	r9, [r0], -r4
   21960:	andeq	r9, r0, ip, asr #15
   21964:	andeq	sl, r0, r0, lsl #3
   21968:	ldrdeq	r9, [r0], -r0
   2196c:	andeq	r9, r0, r8, lsr #15
   21970:	andeq	sl, r0, ip, asr r1
   21974:	andeq	r9, r0, ip, lsr #13
   21978:	andeq	r9, r0, r4, lsl #15
   2197c:	andeq	sl, r0, r8, lsr r1
   21980:	andeq	r9, r0, r8, lsl #13
   21984:	andeq	r9, r0, r0, ror #14
   21988:	andeq	sl, r0, r4, lsl r1

0002198c <test_parse@@Base>:
   2198c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21990:	sub	sp, sp, #348	; 0x15c
   21994:	add	r3, sp, #112	; 0x70
   21998:	mov	r0, r3
   2199c:	ldr	r9, [pc, #1216]	; 21e64 <test_parse@@Base+0x4d8>
   219a0:	str	r3, [sp, #12]
   219a4:	bl	22570 <flatcc_builder_init@@Base>
   219a8:	ldr	r3, [pc, #1208]	; 21e68 <test_parse@@Base+0x4dc>
   219ac:	add	r9, pc, r9
   219b0:	ldr	r1, [pc, #1204]	; 21e6c <test_parse@@Base+0x4e0>
   219b4:	ldr	r3, [r9, r3]
   219b8:	add	r1, pc, r1
   219bc:	str	r3, [sp, #16]
   219c0:	ldr	r0, [r3]
   219c4:	bl	1258c <fopen@plt>
   219c8:	subs	r7, r0, #0
   219cc:	beq	21b4c <test_parse@@Base+0x1c0>
   219d0:	mov	r2, #2
   219d4:	mov	r1, #0
   219d8:	bl	12688 <fseek@plt>
   219dc:	mov	r0, r7
   219e0:	bl	125b0 <ftell@plt>
   219e4:	cmp	r0, #10240	; 0x2800
   219e8:	mov	r8, r0
   219ec:	bhi	21b44 <test_parse@@Base+0x1b8>
   219f0:	mov	r0, r7
   219f4:	bl	125c8 <rewind@plt>
   219f8:	cmp	r8, #0
   219fc:	movne	r0, r8
   21a00:	moveq	r0, #1
   21a04:	bl	125f8 <malloc@plt>
   21a08:	subs	r5, r0, #0
   21a0c:	beq	21b44 <test_parse@@Base+0x1b8>
   21a10:	mov	r6, #0
   21a14:	mov	sl, #1
   21a18:	b	21a20 <test_parse@@Base+0x94>
   21a1c:	add	r6, r6, r0
   21a20:	add	r4, r5, r6
   21a24:	mov	r0, r4
   21a28:	mov	r3, r7
   21a2c:	sub	r2, r8, r6
   21a30:	mov	r1, sl
   21a34:	bl	125ec <fread@plt>
   21a38:	cmp	r0, #0
   21a3c:	bne	21a1c <test_parse@@Base+0x90>
   21a40:	cmp	r8, r6
   21a44:	mov	fp, r0
   21a48:	mov	r0, r7
   21a4c:	bne	21b80 <test_parse@@Base+0x1f4>
   21a50:	add	r3, sp, #68	; 0x44
   21a54:	str	r3, [sp, #8]
   21a58:	bl	12670 <fclose@plt>
   21a5c:	mov	r2, #44	; 0x2c
   21a60:	mov	r1, fp
   21a64:	ldr	r0, [sp, #8]
   21a68:	bl	1264c <memset@plt>
   21a6c:	ldr	lr, [sp, #12]
   21a70:	ldr	r1, [pc, #1016]	; 21e70 <test_parse@@Base+0x4e4>
   21a74:	mov	ip, #1
   21a78:	mov	r3, fp
   21a7c:	mov	r2, fp
   21a80:	add	r1, pc, r1
   21a84:	mov	r0, lr
   21a88:	str	lr, [sp, #68]	; 0x44
   21a8c:	str	r5, [sp, #72]	; 0x48
   21a90:	str	r5, [sp, #96]	; 0x60
   21a94:	str	r4, [sp, #100]	; 0x64
   21a98:	str	r5, [sp, #104]	; 0x68
   21a9c:	str	ip, [sp, #84]	; 0x54
   21aa0:	bl	22eb0 <flatcc_builder_start_buffer@@Base>
   21aa4:	cmp	r0, #0
   21aa8:	bne	21e58 <test_parse@@Base+0x4cc>
   21aac:	add	sl, sp, #48	; 0x30
   21ab0:	mov	r3, sl
   21ab4:	mov	r2, r4
   21ab8:	mov	r1, r5
   21abc:	ldr	r0, [sp, #8]
   21ac0:	bl	19aa8 <_start@@Base+0x70ac>
   21ac4:	ldr	r3, [sp, #92]	; 0x5c
   21ac8:	cmp	r3, #0
   21acc:	str	r3, [sp, #8]
   21ad0:	beq	21b90 <test_parse@@Base+0x204>
   21ad4:	ldr	r3, [pc, #920]	; 21e74 <test_parse@@Base+0x4e8>
   21ad8:	ldr	r2, [sp, #72]	; 0x48
   21adc:	ldr	r4, [sp, #104]	; 0x68
   21ae0:	ldr	r3, [r9, r3]
   21ae4:	sub	r4, r4, r2
   21ae8:	ldr	r2, [sp, #16]
   21aec:	ldr	r0, [sp, #8]
   21af0:	ldr	r6, [r3]
   21af4:	ldr	r7, [r2]
   21af8:	ldr	r8, [sp, #84]	; 0x54
   21afc:	bl	276bc <flatcc_json_parser_error_string@@Base>
   21b00:	ldr	r1, [pc, #880]	; 21e78 <test_parse@@Base+0x4ec>
   21b04:	mvn	ip, #0
   21b08:	add	r4, r4, #1
   21b0c:	str	r4, [sp]
   21b10:	mov	r3, r8
   21b14:	mov	r2, r7
   21b18:	add	r1, pc, r1
   21b1c:	stmib	sp, {r0, ip}
   21b20:	mov	r0, r6
   21b24:	bl	12634 <fprintf@plt>
   21b28:	mov	r0, r5
   21b2c:	bl	12598 <free@plt>
   21b30:	ldr	r0, [sp, #12]
   21b34:	bl	226f8 <flatcc_builder_clear@@Base>
   21b38:	ldr	r0, [sp, #8]
   21b3c:	add	sp, sp, #348	; 0x15c
   21b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b44:	mov	r0, r7
   21b48:	bl	12670 <fclose@plt>
   21b4c:	ldr	r3, [pc, #800]	; 21e74 <test_parse@@Base+0x4e8>
   21b50:	ldr	r2, [sp, #16]
   21b54:	ldr	r1, [pc, #800]	; 21e7c <test_parse@@Base+0x4f0>
   21b58:	ldr	r3, [r9, r3]
   21b5c:	mvn	r0, #0
   21b60:	str	r0, [sp, #8]
   21b64:	ldr	r2, [r2]
   21b68:	add	r1, pc, r1
   21b6c:	ldr	r0, [r3]
   21b70:	bl	12634 <fprintf@plt>
   21b74:	ldr	r0, [sp, #8]
   21b78:	add	sp, sp, #348	; 0x15c
   21b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b80:	bl	12670 <fclose@plt>
   21b84:	mov	r0, r5
   21b88:	bl	12598 <free@plt>
   21b8c:	b	21b4c <test_parse@@Base+0x1c0>
   21b90:	ldr	r1, [sp, #48]	; 0x30
   21b94:	ldr	r0, [sp, #12]
   21b98:	bl	22f68 <flatcc_builder_end_buffer@@Base>
   21b9c:	cmp	r0, #0
   21ba0:	beq	21e58 <test_parse@@Base+0x4cc>
   21ba4:	ldr	r3, [pc, #712]	; 21e74 <test_parse@@Base+0x4e8>
   21ba8:	str	r5, [sp, #108]	; 0x6c
   21bac:	ldr	r2, [sp, #16]
   21bb0:	ldr	r3, [r9, r3]
   21bb4:	ldr	r1, [pc, #708]	; 21e80 <test_parse@@Base+0x4f4>
   21bb8:	mov	r0, r3
   21bbc:	ldr	r2, [r2]
   21bc0:	str	r3, [sp, #28]
   21bc4:	add	r1, pc, r1
   21bc8:	ldr	r3, [sp, #84]	; 0x54
   21bcc:	ldr	r0, [r0]
   21bd0:	bl	12634 <fprintf@plt>
   21bd4:	add	r1, sp, #44	; 0x2c
   21bd8:	ldr	r0, [sp, #12]
   21bdc:	bl	26004 <flatcc_builder_finalize_aligned_buffer@@Base>
   21be0:	ldr	r3, [pc, #668]	; 21e84 <test_parse@@Base+0x4f8>
   21be4:	ldr	r2, [pc, #668]	; 21e88 <test_parse@@Base+0x4fc>
   21be8:	ldr	r1, [pc, #668]	; 21e8c <test_parse@@Base+0x500>
   21bec:	ldr	fp, [sp, #44]	; 0x2c
   21bf0:	add	r2, pc, r2
   21bf4:	add	r1, pc, r1
   21bf8:	str	r0, [sp, #16]
   21bfc:	ldr	r3, [r9, r3]
   21c00:	str	r3, [sp, #24]
   21c04:	ldr	r7, [r3]
   21c08:	mov	r0, r7
   21c0c:	bl	12634 <fprintf@plt>
   21c10:	cmp	fp, #0
   21c14:	beq	21d30 <test_parse@@Base+0x3a4>
   21c18:	ldr	r3, [pc, #624]	; 21e90 <test_parse@@Base+0x504>
   21c1c:	ldr	r2, [pc, #624]	; 21e94 <test_parse@@Base+0x508>
   21c20:	add	r3, pc, r3
   21c24:	str	r3, [sp, #20]
   21c28:	ldr	r3, [pc, #616]	; 21e98 <test_parse@@Base+0x50c>
   21c2c:	ldr	r4, [sp, #8]
   21c30:	ldr	r1, [sp, #16]
   21c34:	add	r3, pc, r3
   21c38:	add	r2, pc, r2
   21c3c:	str	r6, [sp, #36]	; 0x24
   21c40:	sub	r8, r1, #1
   21c44:	mov	r6, r4
   21c48:	str	r5, [sp, #32]
   21c4c:	mov	r9, r2
   21c50:	mov	r4, r3
   21c54:	b	21cc0 <test_parse@@Base+0x334>
   21c58:	cmp	r6, #0
   21c5c:	beq	21c64 <test_parse@@Base+0x2d8>
   21c60:	bl	12634 <fprintf@plt>
   21c64:	mov	r2, r6
   21c68:	ldr	r1, [sp, #20]
   21c6c:	mov	r0, r7
   21c70:	bl	12634 <fprintf@plt>
   21c74:	ldrb	r2, [r8, #1]
   21c78:	mov	r1, r9
   21c7c:	mov	r0, r7
   21c80:	bl	12634 <fprintf@plt>
   21c84:	ldrb	r1, [r8, #1]!
   21c88:	add	r3, sp, #344	; 0x158
   21c8c:	add	r2, r3, r5
   21c90:	sub	r0, r1, #32
   21c94:	cmp	r0, #94	; 0x5e
   21c98:	addls	r3, sp, #344	; 0x158
   21c9c:	addls	r2, r3, r5
   21ca0:	movhi	r3, #46	; 0x2e
   21ca4:	add	r6, r6, #1
   21ca8:	strbhi	r3, [r2, #-296]	; 0xfffffed8
   21cac:	strbls	r1, [r2, #-296]	; 0xfffffed8
   21cb0:	mov	r3, #0
   21cb4:	cmp	fp, r6
   21cb8:	strb	r3, [r2, #-295]	; 0xfffffed9
   21cbc:	beq	21cec <test_parse@@Base+0x360>
   21cc0:	ands	r5, r6, #15
   21cc4:	mov	r2, sl
   21cc8:	mov	r1, r4
   21ccc:	mov	r0, r7
   21cd0:	beq	21c58 <test_parse@@Base+0x2cc>
   21cd4:	tst	r6, #7
   21cd8:	bne	21c74 <test_parse@@Base+0x2e8>
   21cdc:	mov	r1, r7
   21ce0:	mov	r0, #32
   21ce4:	bl	1267c <fputc@plt>
   21ce8:	b	21c74 <test_parse@@Base+0x2e8>
   21cec:	mov	r4, r6
   21cf0:	tst	r4, #15
   21cf4:	ldr	r5, [sp, #32]
   21cf8:	ldr	r6, [sp, #36]	; 0x24
   21cfc:	beq	21d30 <test_parse@@Base+0x3a4>
   21d00:	ldr	fp, [pc, #404]	; 21e9c <test_parse@@Base+0x510>
   21d04:	mov	r9, #3
   21d08:	add	fp, pc, fp
   21d0c:	mov	r8, #1
   21d10:	add	r4, r4, #1
   21d14:	mov	r3, r7
   21d18:	mov	r2, r9
   21d1c:	mov	r1, r8
   21d20:	mov	r0, fp
   21d24:	bl	125e0 <fwrite@plt>
   21d28:	tst	r4, #15
   21d2c:	bne	21d10 <test_parse@@Base+0x384>
   21d30:	ldr	r1, [pc, #360]	; 21ea0 <test_parse@@Base+0x514>
   21d34:	mov	r2, sl
   21d38:	mov	r0, r7
   21d3c:	add	r1, pc, r1
   21d40:	bl	12634 <fprintf@plt>
   21d44:	ldr	r3, [sp, #28]
   21d48:	ldr	r1, [pc, #340]	; 21ea4 <test_parse@@Base+0x518>
   21d4c:	mov	r2, r6
   21d50:	add	r1, pc, r1
   21d54:	ldr	r0, [r3]
   21d58:	ldr	r3, [sp, #44]	; 0x2c
   21d5c:	bl	12634 <fprintf@plt>
   21d60:	ldr	r0, [sp, #16]
   21d64:	bl	216f8 <verify_parse@@Base>
   21d68:	ldr	r3, [sp, #24]
   21d6c:	ldr	r2, [pc, #308]	; 21ea8 <test_parse@@Base+0x51c>
   21d70:	ldr	r1, [pc, #308]	; 21eac <test_parse@@Base+0x520>
   21d74:	ldr	r7, [r3]
   21d78:	ldr	r8, [sp, #44]	; 0x2c
   21d7c:	mov	r0, r7
   21d80:	add	r2, pc, r2
   21d84:	add	r1, pc, r1
   21d88:	bl	12634 <fprintf@plt>
   21d8c:	cmp	r8, #0
   21d90:	beq	21e20 <test_parse@@Base+0x494>
   21d94:	ldr	r3, [pc, #276]	; 21eb0 <test_parse@@Base+0x524>
   21d98:	ldr	fp, [pc, #276]	; 21eb4 <test_parse@@Base+0x528>
   21d9c:	add	r3, pc, r3
   21da0:	str	r3, [sp, #20]
   21da4:	ldr	r9, [pc, #268]	; 21eb8 <test_parse@@Base+0x52c>
   21da8:	ldr	r3, [sp, #16]
   21dac:	add	fp, pc, fp
   21db0:	add	r9, pc, r9
   21db4:	sub	r6, r3, #1
   21db8:	mov	r4, #0
   21dbc:	mov	sl, #1
   21dc0:	b	21de8 <test_parse@@Base+0x45c>
   21dc4:	tst	r4, #7
   21dc8:	beq	21e08 <test_parse@@Base+0x47c>
   21dcc:	add	r4, r4, #1
   21dd0:	ldrb	r2, [r6, #1]!
   21dd4:	mov	r1, r9
   21dd8:	mov	r0, r7
   21ddc:	bl	12634 <fprintf@plt>
   21de0:	cmp	r8, r4
   21de4:	beq	21e20 <test_parse@@Base+0x494>
   21de8:	tst	r4, #15
   21dec:	bne	21dc4 <test_parse@@Base+0x438>
   21df0:	mov	r3, r7
   21df4:	mov	r2, #4
   21df8:	mov	r1, sl
   21dfc:	mov	r0, fp
   21e00:	bl	125e0 <fwrite@plt>
   21e04:	b	21dcc <test_parse@@Base+0x440>
   21e08:	mov	r3, r7
   21e0c:	mov	r2, #3
   21e10:	mov	r1, sl
   21e14:	ldr	r0, [sp, #20]
   21e18:	bl	125e0 <fwrite@plt>
   21e1c:	b	21dcc <test_parse@@Base+0x440>
   21e20:	ldr	r0, [pc, #148]	; 21ebc <test_parse@@Base+0x530>
   21e24:	mov	r3, r7
   21e28:	mov	r2, #4
   21e2c:	mov	r1, #1
   21e30:	add	r0, pc, r0
   21e34:	bl	125e0 <fwrite@plt>
   21e38:	ldr	r0, [sp, #12]
   21e3c:	bl	226ec <flatcc_builder_reset@@Base>
   21e40:	ldr	r3, [sp, #16]
   21e44:	cmp	r3, #0
   21e48:	beq	21b28 <test_parse@@Base+0x19c>
   21e4c:	ldr	r0, [sp, #16]
   21e50:	bl	2610c <flatcc_builder_aligned_free@@Base>
   21e54:	b	21b28 <test_parse@@Base+0x19c>
   21e58:	ldr	r3, [sp, #92]	; 0x5c
   21e5c:	str	r3, [sp, #8]
   21e60:	b	21ad4 <test_parse@@Base+0x148>
   21e64:	andeq	fp, r1, ip, asr #12
   21e68:	andeq	r0, r0, r8, ror r0
   21e6c:	andeq	r9, r0, ip, lsl #14
   21e70:	andeq	r9, r0, r8, asr #12
   21e74:	andeq	r0, r0, r0, ror r0
   21e78:	andeq	r9, r0, r4, lsr #13
   21e7c:	andeq	r9, r0, r0, lsr r6
   21e80:	andeq	r9, r0, ip, lsl #10
   21e84:	andeq	r0, r0, r0, lsl #1
   21e88:	andeq	r9, r0, r4, lsl #10
   21e8c:	andeq	r9, r0, r0, lsr #10
   21e90:	andeq	r9, r0, r8, asr #10
   21e94:	andeq	r9, r0, r8, lsr r5
   21e98:	andeq	r9, r0, r8, ror #9
   21e9c:	andeq	r9, r0, r0, ror r4
   21ea0:	andeq	r9, r0, r0, ror #7
   21ea4:	ldrdeq	r9, [r0], -r4
   21ea8:	andeq	r9, r0, ip, lsl #7
   21eac:	andeq	r9, r0, r4, asr #7
   21eb0:	ldrdeq	r9, [r0], -ip
   21eb4:	ldrdeq	r9, [r0], -r8
   21eb8:	ldrdeq	r9, [r0], -ip
   21ebc:	andeq	r9, r0, ip, asr #6
   21ec0:	push	{r4, r5, r6, lr}
   21ec4:	mov	r4, r0
   21ec8:	ldr	ip, [r0, #28]
   21ecc:	sub	sp, sp, #8
   21ed0:	mov	r3, #1
   21ed4:	ldr	r0, [r0, #40]	; 0x28
   21ed8:	ldr	r6, [r4, #48]	; 0x30
   21edc:	mov	r5, r2
   21ee0:	str	r3, [sp]
   21ee4:	add	r2, r1, ip
   21ee8:	add	r1, r4, #60	; 0x3c
   21eec:	blx	r6
   21ef0:	cmp	r0, #0
   21ef4:	bne	21f2c <test_parse@@Base+0x5a0>
   21ef8:	ldr	r1, [r4, #28]
   21efc:	ldr	r3, [r4, #64]	; 0x40
   21f00:	ldr	r2, [r4, #60]	; 0x3c
   21f04:	sub	r3, r3, r1
   21f08:	ldr	ip, [r4, #32]
   21f0c:	cmp	r3, r5
   21f10:	movcs	r3, r5
   21f14:	add	r2, r2, r1
   21f18:	str	r3, [r4, #24]
   21f1c:	str	r2, [r4, #16]
   21f20:	str	r5, [ip, #4]
   21f24:	add	sp, sp, #8
   21f28:	pop	{r4, r5, r6, pc}
   21f2c:	mvn	r0, #0
   21f30:	b	21f24 <test_parse@@Base+0x598>

00021f34 <flatcc_builder_default_alloc@@Base>:
   21f34:	push	{r4, r5, r6, r7, r8, lr}
   21f38:	subs	r5, r2, #0
   21f3c:	mov	r6, r1
   21f40:	bne	21f64 <flatcc_builder_default_alloc@@Base+0x30>
   21f44:	ldr	r0, [r1]
   21f48:	cmp	r0, #0
   21f4c:	popeq	{r4, r5, r6, r7, r8, pc}
   21f50:	bl	12598 <free@plt>
   21f54:	str	r5, [r6]
   21f58:	str	r5, [r6, #4]
   21f5c:	mov	r0, r5
   21f60:	pop	{r4, r5, r6, r7, r8, pc}
   21f64:	mov	r7, r3
   21f68:	ldr	r3, [sp, #24]
   21f6c:	sub	r2, r3, #1
   21f70:	cmp	r2, #6
   21f74:	addls	pc, pc, r2, lsl #2
   21f78:	b	22014 <flatcc_builder_default_alloc@@Base+0xe0>
   21f7c:	b	21fe8 <flatcc_builder_default_alloc@@Base+0xb4>
   21f80:	b	22014 <flatcc_builder_default_alloc@@Base+0xe0>
   21f84:	b	22014 <flatcc_builder_default_alloc@@Base+0xe0>
   21f88:	b	2200c <flatcc_builder_default_alloc@@Base+0xd8>
   21f8c:	b	21f98 <flatcc_builder_default_alloc@@Base+0x64>
   21f90:	b	22014 <flatcc_builder_default_alloc@@Base+0xe0>
   21f94:	b	22004 <flatcc_builder_default_alloc@@Base+0xd0>
   21f98:	mov	r4, r5
   21f9c:	ldr	r3, [r6, #4]
   21fa0:	cmp	r5, r3
   21fa4:	bhi	21fb0 <flatcc_builder_default_alloc@@Base+0x7c>
   21fa8:	cmp	r4, r3, lsr #1
   21fac:	bls	2201c <flatcc_builder_default_alloc@@Base+0xe8>
   21fb0:	mov	r1, r4
   21fb4:	ldr	r0, [r6]
   21fb8:	bl	125d4 <realloc@plt>
   21fbc:	subs	r5, r0, #0
   21fc0:	beq	22038 <flatcc_builder_default_alloc@@Base+0x104>
   21fc4:	cmp	r7, #0
   21fc8:	beq	21fd8 <flatcc_builder_default_alloc@@Base+0xa4>
   21fcc:	ldr	r0, [r6, #4]
   21fd0:	cmp	r0, r4
   21fd4:	bcc	22024 <flatcc_builder_default_alloc@@Base+0xf0>
   21fd8:	str	r5, [r6]
   21fdc:	str	r4, [r6, #4]
   21fe0:	mov	r0, #0
   21fe4:	pop	{r4, r5, r6, r7, r8, pc}
   21fe8:	mov	r4, #256	; 0x100
   21fec:	cmp	r5, r4
   21ff0:	bls	21f9c <flatcc_builder_default_alloc@@Base+0x68>
   21ff4:	lsl	r4, r4, #1
   21ff8:	cmp	r5, r4
   21ffc:	bhi	21ff4 <flatcc_builder_default_alloc@@Base+0xc0>
   22000:	b	21f9c <flatcc_builder_default_alloc@@Base+0x68>
   22004:	mov	r4, #64	; 0x40
   22008:	b	21fec <flatcc_builder_default_alloc@@Base+0xb8>
   2200c:	mov	r4, #288	; 0x120
   22010:	b	21fec <flatcc_builder_default_alloc@@Base+0xb8>
   22014:	mov	r4, #32
   22018:	b	21fec <flatcc_builder_default_alloc@@Base+0xb8>
   2201c:	mov	r0, #0
   22020:	pop	{r4, r5, r6, r7, r8, pc}
   22024:	sub	r2, r4, r0
   22028:	mov	r1, #0
   2202c:	add	r0, r5, r0
   22030:	bl	1264c <memset@plt>
   22034:	b	21fd8 <flatcc_builder_default_alloc@@Base+0xa4>
   22038:	mvn	r0, #0
   2203c:	pop	{r4, r5, r6, r7, r8, pc}
   22040:	push	{r4, r5, lr}
   22044:	cmp	r2, #0
   22048:	ldr	lr, [pc, #248]	; 22148 <flatcc_builder_default_alloc@@Base+0x214>
   2204c:	sub	sp, sp, #84	; 0x54
   22050:	mov	ip, r0
   22054:	add	lr, pc, lr
   22058:	bne	22068 <flatcc_builder_default_alloc@@Base+0x134>
   2205c:	ldrh	r2, [r0, #132]	; 0x84
   22060:	cmp	r2, #0
   22064:	moveq	r2, #1
   22068:	ldrh	r0, [r1]
   2206c:	cmp	r0, #3
   22070:	movls	r4, #4
   22074:	movls	r0, r4
   22078:	strhls	r4, [r1]
   2207c:	cmp	r2, r0
   22080:	strhhi	r2, [r1]
   22084:	cmp	r3, #0
   22088:	bne	2209c <flatcc_builder_default_alloc@@Base+0x168>
   2208c:	ldr	r4, [ip, #140]	; 0x8c
   22090:	sub	r2, r2, #1
   22094:	ands	r3, r2, r4
   22098:	bne	220a8 <flatcc_builder_default_alloc@@Base+0x174>
   2209c:	mov	r0, #0
   220a0:	add	sp, sp, #84	; 0x54
   220a4:	pop	{r4, r5, pc}
   220a8:	ldr	r2, [pc, #156]	; 2214c <flatcc_builder_default_alloc@@Base+0x218>
   220ac:	add	r1, r4, r3
   220b0:	str	r3, [sp, #8]
   220b4:	ldr	r0, [lr, r2]
   220b8:	cmp	r4, r1
   220bc:	mov	r2, #1
   220c0:	str	r0, [sp, #16]
   220c4:	str	r3, [sp, #20]
   220c8:	str	r1, [ip, #140]	; 0x8c
   220cc:	str	r2, [sp, #12]
   220d0:	bgt	22120 <flatcc_builder_default_alloc@@Base+0x1ec>
   220d4:	ldr	r0, [ip, #36]	; 0x24
   220d8:	add	r1, sp, #16
   220dc:	str	r3, [sp]
   220e0:	mov	r3, r4
   220e4:	ldr	r5, [ip, #44]	; 0x2c
   220e8:	blx	r5
   220ec:	cmp	r0, #0
   220f0:	bne	22124 <flatcc_builder_default_alloc@@Base+0x1f0>
   220f4:	cmn	r4, #1
   220f8:	bne	2209c <flatcc_builder_default_alloc@@Base+0x168>
   220fc:	ldr	r3, [pc, #76]	; 22150 <flatcc_builder_default_alloc@@Base+0x21c>
   22100:	ldr	r1, [pc, #76]	; 22154 <flatcc_builder_default_alloc@@Base+0x220>
   22104:	ldr	r0, [pc, #76]	; 22158 <flatcc_builder_default_alloc@@Base+0x224>
   22108:	add	r3, pc, r3
   2210c:	ldr	r2, [pc, #72]	; 2215c <flatcc_builder_default_alloc@@Base+0x228>
   22110:	add	r3, r3, #60	; 0x3c
   22114:	add	r1, pc, r1
   22118:	add	r0, pc, r0
   2211c:	bl	126a0 <__assert_fail@plt>
   22120:	bl	12898 <__assert_fail@plt+0x1f8>
   22124:	ldr	r3, [pc, #52]	; 22160 <flatcc_builder_default_alloc@@Base+0x22c>
   22128:	ldr	r1, [pc, #52]	; 22164 <flatcc_builder_default_alloc@@Base+0x230>
   2212c:	ldr	r0, [pc, #52]	; 22168 <flatcc_builder_default_alloc@@Base+0x234>
   22130:	add	r3, pc, r3
   22134:	ldr	r2, [pc, #48]	; 2216c <flatcc_builder_default_alloc@@Base+0x238>
   22138:	add	r3, r3, #16
   2213c:	add	r1, pc, r1
   22140:	add	r0, pc, r0
   22144:	bl	126a0 <__assert_fail@plt>
   22148:	andeq	sl, r1, r4, lsr #31
   2214c:	andeq	r0, r0, ip, rrx
   22150:	andeq	r9, r0, r0, lsr r1
   22154:	andeq	r9, r0, r4, ror r8
   22158:	strdeq	r9, [r0], -r8
   2215c:			; <UNDEFINED> instruction: 0x000002be
   22160:	andeq	r9, r0, r8, lsl #2
   22164:	andeq	r9, r0, ip, asr #16
   22168:	ldrdeq	r9, [r0], -r0
   2216c:	andeq	r0, r0, r5, lsr #5
   22170:	push	{r4, r5, r6, r7, lr}
   22174:	mov	r5, r1
   22178:	ldr	r1, [r0, #156]	; 0x9c
   2217c:	ldr	r3, [r0, #160]	; 0xa0
   22180:	add	r2, r1, #1
   22184:	cmp	r2, r3
   22188:	sub	sp, sp, #12
   2218c:	mov	r4, r0
   22190:	str	r2, [r0, #156]	; 0x9c
   22194:	ble	22204 <flatcc_builder_default_alloc@@Base+0x2d0>
   22198:	ldr	r3, [r0, #176]	; 0xb0
   2219c:	cmp	r3, #0
   221a0:	cmpgt	r2, r3
   221a4:	movgt	r3, #1
   221a8:	movle	r3, #0
   221ac:	bgt	22278 <flatcc_builder_default_alloc@@Base+0x344>
   221b0:	add	r1, r1, r1, lsl #3
   221b4:	ldr	r0, [r0, #88]	; 0x58
   221b8:	lsl	r6, r1, #2
   221bc:	add	r2, r6, #36	; 0x24
   221c0:	cmp	r2, r0
   221c4:	bhi	22254 <flatcc_builder_default_alloc@@Base+0x320>
   221c8:	ldr	r3, [r4, #84]	; 0x54
   221cc:	add	r3, r3, r6
   221d0:	cmp	r3, #0
   221d4:	str	r3, [r4, #32]
   221d8:	beq	22278 <flatcc_builder_default_alloc@@Base+0x344>
   221dc:	ldr	r2, [r4, #88]	; 0x58
   221e0:	ldr	r0, [pc, #152]	; 22280 <flatcc_builder_default_alloc@@Base+0x34c>
   221e4:	ldr	r1, [r4, #176]	; 0xb0
   221e8:	umull	r0, r2, r0, r2
   221ec:	lsr	r2, r2, #3
   221f0:	cmp	r1, #0
   221f4:	cmpgt	r2, r1
   221f8:	str	r2, [r4, #160]	; 0xa0
   221fc:	strgt	r1, [r4, #160]	; 0xa0
   22200:	b	22210 <flatcc_builder_default_alloc@@Base+0x2dc>
   22204:	ldr	r3, [r0, #32]
   22208:	add	r3, r3, #36	; 0x24
   2220c:	str	r3, [r0, #32]
   22210:	ldr	r0, [r4, #20]
   22214:	ldr	ip, [r4, #28]
   22218:	ldrh	lr, [r4, #130]	; 0x82
   2221c:	add	r2, r0, ip
   22220:	mov	r1, #0
   22224:	str	r0, [r3, #8]
   22228:	strh	lr, [r3, #12]
   2222c:	add	r2, r2, #7
   22230:	mvn	lr, #3
   22234:	mov	r0, r1
   22238:	bic	r2, r2, #7
   2223c:	strh	r5, [r4, #130]	; 0x82
   22240:	stm	r3, {ip, lr}
   22244:	str	r2, [r4, #28]
   22248:	str	r1, [r4, #20]
   2224c:	add	sp, sp, #12
   22250:	pop	{r4, r5, r6, r7, pc}
   22254:	mov	r1, #4
   22258:	ldr	r0, [r4, #40]	; 0x28
   2225c:	str	r1, [sp]
   22260:	add	r1, r4, #84	; 0x54
   22264:	ldr	r7, [r4, #48]	; 0x30
   22268:	blx	r7
   2226c:	cmp	r0, #0
   22270:	beq	221c8 <flatcc_builder_default_alloc@@Base+0x294>
   22274:	bl	12868 <__assert_fail@plt+0x1c8>
   22278:	mvn	r0, #0
   2227c:	b	2224c <flatcc_builder_default_alloc@@Base+0x318>
   22280:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   22284:	push	{r4, r5, r6, r7, lr}
   22288:	mov	r5, r0
   2228c:	ldrh	r0, [r0, #128]	; 0x80
   22290:	sub	sp, sp, #92	; 0x5c
   22294:	add	ip, sp, #12
   22298:	cmp	r0, #3
   2229c:	movls	r0, #4
   222a0:	strhls	r0, [r5, #128]	; 0x80
   222a4:	ldr	r4, [pc, #448]	; 2246c <flatcc_builder_default_alloc@@Base+0x538>
   222a8:	ldr	r0, [r5, #136]	; 0x88
   222ac:	mov	r7, #4
   222b0:	mov	r6, #1
   222b4:	str	ip, [sp, #24]
   222b8:	lsls	ip, r2, #2
   222bc:	add	r4, pc, r4
   222c0:	str	r2, [sp, #12]
   222c4:	and	lr, r0, #3
   222c8:	str	r7, [sp, #16]
   222cc:	str	r7, [sp, #28]
   222d0:	str	r6, [sp, #20]
   222d4:	beq	222f0 <flatcc_builder_default_alloc@@Base+0x3bc>
   222d8:	add	r7, ip, r7
   222dc:	mov	r6, #2
   222e0:	str	r1, [sp, #32]
   222e4:	str	ip, [sp, #36]	; 0x24
   222e8:	str	r7, [sp, #16]
   222ec:	str	r6, [sp, #20]
   222f0:	cmp	lr, #0
   222f4:	beq	22324 <flatcc_builder_default_alloc@@Base+0x3f0>
   222f8:	ldr	ip, [sp, #20]
   222fc:	ldr	r6, [pc, #364]	; 22470 <flatcc_builder_default_alloc@@Base+0x53c>
   22300:	add	ip, ip, #1
   22304:	add	r7, r7, lr
   22308:	str	r7, [sp, #16]
   2230c:	ldr	r6, [r4, r6]
   22310:	add	r4, sp, #88	; 0x58
   22314:	add	r4, r4, ip, lsl #3
   22318:	str	ip, [sp, #20]
   2231c:	str	r6, [r4, #-72]	; 0xffffffb8
   22320:	str	lr, [r4, #-68]	; 0xffffffbc
   22324:	cmp	r2, #0
   22328:	sub	r4, r0, r7
   2232c:	beq	223c0 <flatcc_builder_default_alloc@@Base+0x48c>
   22330:	add	r6, r3, r2
   22334:	mvn	ip, #3
   22338:	mov	r2, r3
   2233c:	b	22374 <flatcc_builder_default_alloc@@Base+0x440>
   22340:	sub	r0, ip, r4
   22344:	add	r0, r0, lr
   22348:	cmp	r3, #0
   2234c:	str	r0, [r1]
   22350:	beq	22360 <flatcc_builder_default_alloc@@Base+0x42c>
   22354:	ldrb	r0, [r2]
   22358:	cmp	r0, #0
   2235c:	beq	22420 <flatcc_builder_default_alloc@@Base+0x4ec>
   22360:	add	r2, r2, #1
   22364:	cmp	r2, r6
   22368:	add	r1, r1, #4
   2236c:	sub	ip, ip, #4
   22370:	beq	223b8 <flatcc_builder_default_alloc@@Base+0x484>
   22374:	ldr	lr, [r1]
   22378:	cmp	lr, #0
   2237c:	bne	22340 <flatcc_builder_default_alloc@@Base+0x40c>
   22380:	cmp	r3, #0
   22384:	beq	223fc <flatcc_builder_default_alloc@@Base+0x4c8>
   22388:	ldrb	r0, [r2]
   2238c:	cmp	r0, #0
   22390:	beq	22360 <flatcc_builder_default_alloc@@Base+0x42c>
   22394:	ldr	r3, [pc, #216]	; 22474 <flatcc_builder_default_alloc@@Base+0x540>
   22398:	ldr	r1, [pc, #216]	; 22478 <flatcc_builder_default_alloc@@Base+0x544>
   2239c:	ldr	r0, [pc, #216]	; 2247c <flatcc_builder_default_alloc@@Base+0x548>
   223a0:	add	r3, pc, r3
   223a4:	ldr	r2, [pc, #212]	; 22480 <flatcc_builder_default_alloc@@Base+0x54c>
   223a8:	add	r3, r3, #76	; 0x4c
   223ac:	add	r1, pc, r1
   223b0:	add	r0, pc, r0
   223b4:	bl	126a0 <__assert_fail@plt>
   223b8:	ldr	r0, [r5, #136]	; 0x88
   223bc:	sub	r4, r0, r7
   223c0:	cmp	r4, r0
   223c4:	bge	22468 <flatcc_builder_default_alloc@@Base+0x534>
   223c8:	ldr	r0, [r5, #36]	; 0x24
   223cc:	ldr	r2, [sp, #20]
   223d0:	str	r7, [sp]
   223d4:	mov	r3, r4
   223d8:	ldr	r6, [r5, #44]	; 0x2c
   223dc:	add	r1, sp, #24
   223e0:	blx	r6
   223e4:	cmp	r0, #0
   223e8:	bne	22444 <flatcc_builder_default_alloc@@Base+0x510>
   223ec:	mov	r0, r4
   223f0:	str	r4, [r5, #136]	; 0x88
   223f4:	add	sp, sp, #92	; 0x5c
   223f8:	pop	{r4, r5, r6, r7, pc}
   223fc:	ldr	r3, [pc, #128]	; 22484 <flatcc_builder_default_alloc@@Base+0x550>
   22400:	ldr	r1, [pc, #128]	; 22488 <flatcc_builder_default_alloc@@Base+0x554>
   22404:	ldr	r0, [pc, #128]	; 2248c <flatcc_builder_default_alloc@@Base+0x558>
   22408:	add	r3, pc, r3
   2240c:	ldr	r2, [pc, #124]	; 22490 <flatcc_builder_default_alloc@@Base+0x55c>
   22410:	add	r3, r3, #76	; 0x4c
   22414:	add	r1, pc, r1
   22418:	add	r0, pc, r0
   2241c:	bl	126a0 <__assert_fail@plt>
   22420:	ldr	r3, [pc, #108]	; 22494 <flatcc_builder_default_alloc@@Base+0x560>
   22424:	ldr	r1, [pc, #108]	; 22498 <flatcc_builder_default_alloc@@Base+0x564>
   22428:	ldr	r0, [pc, #108]	; 2249c <flatcc_builder_default_alloc@@Base+0x568>
   2242c:	add	r3, pc, r3
   22430:	ldr	r2, [pc, #104]	; 224a0 <flatcc_builder_default_alloc@@Base+0x56c>
   22434:	add	r3, r3, #76	; 0x4c
   22438:	add	r1, pc, r1
   2243c:	add	r0, pc, r0
   22440:	bl	126a0 <__assert_fail@plt>
   22444:	ldr	r3, [pc, #88]	; 224a4 <flatcc_builder_default_alloc@@Base+0x570>
   22448:	ldr	r1, [pc, #88]	; 224a8 <flatcc_builder_default_alloc@@Base+0x574>
   2244c:	ldr	r0, [pc, #88]	; 224ac <flatcc_builder_default_alloc@@Base+0x578>
   22450:	add	r3, pc, r3
   22454:	ldr	r2, [pc, #84]	; 224b0 <flatcc_builder_default_alloc@@Base+0x57c>
   22458:	add	r3, r3, #28
   2245c:	add	r1, pc, r1
   22460:	add	r0, pc, r0
   22464:	bl	126a0 <__assert_fail@plt>
   22468:	bl	128d0 <__assert_fail@plt+0x230>
   2246c:	andeq	sl, r1, ip, lsr sp
   22470:	andeq	r0, r0, ip, rrx
   22474:	muleq	r0, r8, lr
   22478:	ldrdeq	r9, [r0], -ip
   2247c:	andeq	r9, r0, r4, ror #12
   22480:			; <UNDEFINED> instruction: 0x000005b5
   22484:	andeq	r8, r0, r0, lsr lr
   22488:	andeq	r9, r0, r4, ror r5
   2248c:	strdeq	r9, [r0], -r8
   22490:			; <UNDEFINED> instruction: 0x000005b7
   22494:	andeq	r8, r0, ip, lsl #28
   22498:	andeq	r9, r0, r0, asr r5
   2249c:	andeq	r9, r0, r8, asr #11
   224a0:			; <UNDEFINED> instruction: 0x000005b1
   224a4:	andeq	r8, r0, r8, ror #27
   224a8:	andeq	r9, r0, ip, lsr #10
   224ac:			; <UNDEFINED> instruction: 0x000095b0
   224b0:	andeq	r0, r0, fp, lsl #5

000224b4 <flatcc_builder_flush_vtable_cache@@Base>:
   224b4:	ldr	r3, [r0, #116]	; 0x74
   224b8:	cmp	r3, #0
   224bc:	bxeq	lr
   224c0:	ldr	r2, [r0, #96]	; 0x60
   224c4:	push	{r4, lr}
   224c8:	mov	r1, #0
   224cc:	mov	r4, r0
   224d0:	ldr	r0, [r0, #92]	; 0x5c
   224d4:	bl	1264c <memset@plt>
   224d8:	mov	r2, #16
   224dc:	mov	r3, #0
   224e0:	str	r2, [r4, #124]	; 0x7c
   224e4:	str	r3, [r4, #120]	; 0x78
   224e8:	pop	{r4, pc}

000224ec <flatcc_builder_custom_init@@Base>:
   224ec:	push	{r4, r5, r6, r7, r8, lr}
   224f0:	mov	r6, r1
   224f4:	mov	r7, r2
   224f8:	mov	r1, #0
   224fc:	mov	r2, #232	; 0xe8
   22500:	mov	r5, r3
   22504:	mov	r4, r0
   22508:	ldr	r8, [sp, #24]
   2250c:	bl	1264c <memset@plt>
   22510:	ldr	r3, [pc, #76]	; 22564 <flatcc_builder_custom_init@@Base+0x78>
   22514:	cmp	r6, #0
   22518:	add	r3, pc, r3
   2251c:	beq	2254c <flatcc_builder_custom_init@@Base+0x60>
   22520:	cmp	r5, #0
   22524:	beq	22540 <flatcc_builder_custom_init@@Base+0x54>
   22528:	str	r8, [r4, #40]	; 0x28
   2252c:	str	r5, [r4, #48]	; 0x30
   22530:	str	r7, [r4, #36]	; 0x24
   22534:	str	r6, [r4, #44]	; 0x2c
   22538:	mov	r0, #0
   2253c:	pop	{r4, r5, r6, r7, r8, pc}
   22540:	ldr	r2, [pc, #32]	; 22568 <flatcc_builder_custom_init@@Base+0x7c>
   22544:	ldr	r5, [r3, r2]
   22548:	b	22528 <flatcc_builder_custom_init@@Base+0x3c>
   2254c:	ldr	r2, [pc, #24]	; 2256c <flatcc_builder_custom_init@@Base+0x80>
   22550:	mov	r1, #1
   22554:	str	r1, [r4, #184]	; 0xb8
   22558:	add	r7, r4, #188	; 0xbc
   2255c:	ldr	r6, [r3, r2]
   22560:	b	22520 <flatcc_builder_custom_init@@Base+0x34>
   22564:	andeq	sl, r1, r0, ror #21
   22568:	andeq	r0, r0, ip, ror r0
   2256c:	andeq	r0, r0, r4, lsl #1

00022570 <flatcc_builder_init@@Base>:
   22570:	push	{lr}		; (str lr, [sp, #-4]!)
   22574:	sub	sp, sp, #12
   22578:	mov	r3, #0
   2257c:	str	r3, [sp]
   22580:	mov	r2, r3
   22584:	mov	r1, r3
   22588:	bl	224ec <flatcc_builder_custom_init@@Base>
   2258c:	add	sp, sp, #12
   22590:	pop	{pc}		; (ldr pc, [sp], #4)

00022594 <flatcc_builder_custom_reset@@Base>:
   22594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22598:	add	r7, r0, #52	; 0x34
   2259c:	mov	r4, #0
   225a0:	sub	sp, sp, #12
   225a4:	mov	r5, r0
   225a8:	mov	sl, r1
   225ac:	mov	r8, r2
   225b0:	mov	r6, r7
   225b4:	mov	r9, r4
   225b8:	mov	fp, #1
   225bc:	b	22610 <flatcc_builder_custom_reset@@Base+0x7c>
   225c0:	cmp	r4, #5
   225c4:	cmpne	r8, #0
   225c8:	beq	225f4 <flatcc_builder_custom_reset@@Base+0x60>
   225cc:	ldr	r0, [r5, #40]	; 0x28
   225d0:	mov	r3, fp
   225d4:	str	r4, [sp]
   225d8:	mov	r2, #1
   225dc:	mov	r1, r6
   225e0:	ldr	ip, [r5, #48]	; 0x30
   225e4:	blx	ip
   225e8:	cmp	r0, #0
   225ec:	bne	226d4 <flatcc_builder_custom_reset@@Base+0x140>
   225f0:	ldr	r0, [r7, r4, lsl #3]
   225f4:	ldr	r2, [r6, #4]
   225f8:	mov	r1, r9
   225fc:	bl	1264c <memset@plt>
   22600:	add	r4, r4, #1
   22604:	cmp	r4, #8
   22608:	add	r6, r6, #8
   2260c:	beq	2264c <flatcc_builder_custom_reset@@Base+0xb8>
   22610:	ldr	r0, [r7, r4, lsl #3]
   22614:	cmp	r0, #0
   22618:	bne	225c0 <flatcc_builder_custom_reset@@Base+0x2c>
   2261c:	ldr	r3, [r6, #4]
   22620:	cmp	r3, #0
   22624:	beq	22600 <flatcc_builder_custom_reset@@Base+0x6c>
   22628:	ldr	r3, [pc, #172]	; 226dc <flatcc_builder_custom_reset@@Base+0x148>
   2262c:	ldr	r1, [pc, #172]	; 226e0 <flatcc_builder_custom_reset@@Base+0x14c>
   22630:	ldr	r0, [pc, #172]	; 226e4 <flatcc_builder_custom_reset@@Base+0x150>
   22634:	add	r3, pc, r3
   22638:	ldr	r2, [pc, #168]	; 226e8 <flatcc_builder_custom_reset@@Base+0x154>
   2263c:	add	r3, r3, #108	; 0x6c
   22640:	add	r1, pc, r1
   22644:	add	r0, pc, r0
   22648:	bl	126a0 <__assert_fail@plt>
   2264c:	ldr	r2, [r5, #124]	; 0x7c
   22650:	mov	r3, #0
   22654:	ldr	r0, [r5, #60]	; 0x3c
   22658:	cmp	r2, r3
   2265c:	str	r3, [r5, #120]	; 0x78
   22660:	ldr	r1, [r5, #76]	; 0x4c
   22664:	movne	r3, #16
   22668:	ldr	r2, [r5, #52]	; 0x34
   2266c:	str	r0, [r5, #16]
   22670:	ldr	r0, [r5, #184]	; 0xb8
   22674:	strne	r3, [r5, #124]	; 0x7c
   22678:	mov	r3, #0
   2267c:	cmp	sl, #0
   22680:	strne	r3, [r5, #172]	; 0xac
   22684:	strne	r3, [r5, #176]	; 0xb0
   22688:	strne	r3, [r5, #180]	; 0xb4
   2268c:	cmp	r0, #0
   22690:	stm	r5, {r1, r2}
   22694:	strh	r3, [r5, #128]	; 0x80
   22698:	str	r3, [r5, #136]	; 0x88
   2269c:	str	r3, [r5, #140]	; 0x8c
   226a0:	str	r3, [r5, #156]	; 0x9c
   226a4:	str	r3, [r5, #160]	; 0xa0
   226a8:	str	r3, [r5, #20]
   226ac:	str	r3, [r5, #24]
   226b0:	str	r3, [r5, #148]	; 0x94
   226b4:	str	r3, [r5, #152]	; 0x98
   226b8:	str	r3, [r5, #32]
   226bc:	beq	226cc <flatcc_builder_custom_reset@@Base+0x138>
   226c0:	add	r0, r5, #188	; 0xbc
   226c4:	bl	26170 <flatcc_emitter_reset@@Base>
   226c8:	mov	r0, #0
   226cc:	add	sp, sp, #12
   226d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226d4:	mvn	r0, #0
   226d8:	b	226cc <flatcc_builder_custom_reset@@Base+0x138>
   226dc:	andeq	r8, r0, r4, lsl #24
   226e0:	andeq	r9, r0, r8, asr #6
   226e4:	andeq	r9, r0, r0, ror #7
   226e8:			; <UNDEFINED> instruction: 0x000001b2

000226ec <flatcc_builder_reset@@Base>:
   226ec:	mov	r2, #0
   226f0:	mov	r1, r2
   226f4:	b	22594 <flatcc_builder_custom_reset@@Base>

000226f8 <flatcc_builder_clear@@Base>:
   226f8:	push	{r4, r5, r6, r7, r8, lr}
   226fc:	mov	r4, #0
   22700:	sub	sp, sp, #8
   22704:	mov	r6, r0
   22708:	add	r5, r0, #52	; 0x34
   2270c:	mov	r8, r4
   22710:	ldr	r0, [r6, #40]	; 0x28
   22714:	mov	r1, r5
   22718:	str	r4, [sp]
   2271c:	mov	r3, r8
   22720:	add	r4, r4, #1
   22724:	ldr	r7, [r6, #48]	; 0x30
   22728:	mov	r2, #0
   2272c:	blx	r7
   22730:	cmp	r4, #8
   22734:	add	r5, r5, #8
   22738:	bne	22710 <flatcc_builder_clear@@Base+0x18>
   2273c:	ldr	r3, [r6, #184]	; 0xb8
   22740:	cmp	r3, #0
   22744:	beq	22750 <flatcc_builder_clear@@Base+0x58>
   22748:	add	r0, r6, #188	; 0xbc
   2274c:	bl	2622c <flatcc_emitter_clear@@Base>
   22750:	mov	r0, r6
   22754:	mov	r2, #232	; 0xe8
   22758:	mov	r1, #0
   2275c:	add	sp, sp, #8
   22760:	pop	{r4, r5, r6, r7, r8, lr}
   22764:	b	1264c <memset@plt>

00022768 <flatcc_builder_enter_user_frame_ptr@@Base>:
   22768:	push	{r4, r5, r6, r7, r8, lr}
   2276c:	add	r4, r1, #3
   22770:	bic	r4, r4, #3
   22774:	ldr	r7, [r0, #228]	; 0xe4
   22778:	add	r4, r4, #4
   2277c:	ldr	r3, [r0, #112]	; 0x70
   22780:	add	r2, r4, r7
   22784:	cmp	r2, r3
   22788:	sub	sp, sp, #8
   2278c:	mov	r6, r0
   22790:	bhi	227d8 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   22794:	ldr	r8, [r6, #108]	; 0x6c
   22798:	adds	r5, r8, r7
   2279c:	beq	22800 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   227a0:	mov	r2, r4
   227a4:	mov	r1, #0
   227a8:	mov	r0, r5
   227ac:	bl	1264c <memset@plt>
   227b0:	ldr	r3, [r6, #224]	; 0xe0
   227b4:	add	r0, r5, #4
   227b8:	str	r3, [r8, r7]
   227bc:	ldr	r3, [r6, #228]	; 0xe4
   227c0:	add	r4, r4, r3
   227c4:	add	r3, r3, #4
   227c8:	str	r4, [r6, #228]	; 0xe4
   227cc:	str	r3, [r6, #224]	; 0xe0
   227d0:	add	sp, sp, #8
   227d4:	pop	{r4, r5, r6, r7, r8, pc}
   227d8:	mov	r3, #7
   227dc:	ldr	r0, [r0, #40]	; 0x28
   227e0:	add	r1, r6, #108	; 0x6c
   227e4:	str	r3, [sp]
   227e8:	mov	r3, #0
   227ec:	ldr	r5, [r6, #48]	; 0x30
   227f0:	blx	r5
   227f4:	cmp	r0, #0
   227f8:	beq	22794 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   227fc:	bl	12868 <__assert_fail@plt+0x1c8>
   22800:	mov	r0, r5
   22804:	b	227d0 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00022808 <flatcc_builder_enter_user_frame@@Base>:
   22808:	push	{r4, r5, r6, r7, lr}
   2280c:	add	r4, r1, #3
   22810:	bic	r4, r4, #3
   22814:	ldr	r6, [r0, #228]	; 0xe4
   22818:	add	r4, r4, #4
   2281c:	ldr	r3, [r0, #112]	; 0x70
   22820:	add	r2, r4, r6
   22824:	cmp	r2, r3
   22828:	sub	sp, sp, #12
   2282c:	mov	r5, r0
   22830:	bhi	22870 <flatcc_builder_enter_user_frame@@Base+0x68>
   22834:	ldr	r7, [r5, #108]	; 0x6c
   22838:	adds	r0, r7, r6
   2283c:	beq	22868 <flatcc_builder_enter_user_frame@@Base+0x60>
   22840:	mov	r2, r4
   22844:	mov	r1, #0
   22848:	bl	1264c <memset@plt>
   2284c:	ldr	r3, [r5, #224]	; 0xe0
   22850:	str	r3, [r7, r6]
   22854:	ldr	r0, [r5, #228]	; 0xe4
   22858:	add	r4, r4, r0
   2285c:	add	r0, r0, #4
   22860:	str	r4, [r5, #228]	; 0xe4
   22864:	str	r0, [r5, #224]	; 0xe0
   22868:	add	sp, sp, #12
   2286c:	pop	{r4, r5, r6, r7, pc}
   22870:	mov	r3, #7
   22874:	ldr	r0, [r0, #40]	; 0x28
   22878:	add	r1, r5, #108	; 0x6c
   2287c:	str	r3, [sp]
   22880:	mov	r3, #0
   22884:	ldr	r7, [r5, #48]	; 0x30
   22888:	blx	r7
   2288c:	cmp	r0, #0
   22890:	beq	22834 <flatcc_builder_enter_user_frame@@Base+0x2c>
   22894:	bl	12868 <__assert_fail@plt+0x1c8>

00022898 <flatcc_builder_exit_user_frame@@Base>:
   22898:	ldr	r3, [r0, #224]	; 0xe0
   2289c:	cmp	r3, #0
   228a0:	beq	228c4 <flatcc_builder_exit_user_frame@@Base+0x2c>
   228a4:	ldr	r2, [r0, #108]	; 0x6c
   228a8:	sub	r1, r3, #4
   228ac:	add	r3, r2, r3
   228b0:	str	r1, [r0, #228]	; 0xe4
   228b4:	ldr	r3, [r3, #-4]
   228b8:	str	r3, [r0, #224]	; 0xe0
   228bc:	mov	r0, r3
   228c0:	bx	lr
   228c4:	ldr	r3, [pc, #32]	; 228ec <flatcc_builder_exit_user_frame@@Base+0x54>
   228c8:	ldr	r1, [pc, #32]	; 228f0 <flatcc_builder_exit_user_frame@@Base+0x58>
   228cc:	ldr	r0, [pc, #32]	; 228f4 <flatcc_builder_exit_user_frame@@Base+0x5c>
   228d0:	add	r3, pc, r3
   228d4:	push	{r4, lr}
   228d8:	add	r3, r3, #136	; 0x88
   228dc:	ldr	r2, [pc, #20]	; 228f8 <flatcc_builder_exit_user_frame@@Base+0x60>
   228e0:	add	r1, pc, r1
   228e4:	add	r0, pc, r0
   228e8:	bl	126a0 <__assert_fail@plt>
   228ec:	andeq	r8, r0, r8, ror #18
   228f0:	andeq	r9, r0, r8, lsr #1
   228f4:	andeq	r9, r0, r4, asr r1
   228f8:	andeq	r0, r0, lr, lsl r2

000228fc <flatcc_builder_exit_user_frame_at@@Base>:
   228fc:	ldr	r2, [r0, #224]	; 0xe0
   22900:	cmp	r2, r1
   22904:	bcc	22910 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   22908:	str	r1, [r0, #224]	; 0xe0
   2290c:	b	22898 <flatcc_builder_exit_user_frame@@Base>
   22910:	ldr	r3, [pc, #32]	; 22938 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   22914:	ldr	r1, [pc, #32]	; 2293c <flatcc_builder_exit_user_frame_at@@Base+0x40>
   22918:	ldr	r0, [pc, #32]	; 22940 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   2291c:	add	r3, pc, r3
   22920:	push	{r4, lr}
   22924:	add	r3, r3, #168	; 0xa8
   22928:	ldr	r2, [pc, #20]	; 22944 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   2292c:	add	r1, pc, r1
   22930:	add	r0, pc, r0
   22934:	bl	126a0 <__assert_fail@plt>
   22938:	andeq	r8, r0, ip, lsl r9
   2293c:	andeq	r9, r0, ip, asr r0
   22940:	andeq	r9, r0, r4, lsr #2
   22944:	andeq	r0, r0, r7, lsr #4

00022948 <flatcc_builder_get_current_user_frame@@Base>:
   22948:	ldr	r0, [r0, #224]	; 0xe0
   2294c:	bx	lr

00022950 <flatcc_builder_get_user_frame_ptr@@Base>:
   22950:	ldr	r0, [r0, #108]	; 0x6c
   22954:	add	r0, r0, r1
   22958:	bx	lr

0002295c <flatcc_builder_embed_buffer@@Base>:
   2295c:	ldr	ip, [r0, #152]	; 0x98
   22960:	push	{r4, r5, r6, lr}
   22964:	mov	r5, r3
   22968:	sub	sp, sp, #88	; 0x58
   2296c:	adds	r3, ip, #0
   22970:	movne	r3, #1
   22974:	mov	r6, r2
   22978:	mov	r2, r1
   2297c:	add	r1, sp, #104	; 0x68
   22980:	mov	r4, r0
   22984:	bl	22040 <flatcc_builder_default_alloc@@Base+0x10c>
   22988:	ldr	ip, [pc, #324]	; 22ad4 <flatcc_builder_embed_buffer@@Base+0x178>
   2298c:	add	ip, pc, ip
   22990:	cmp	r0, #0
   22994:	bne	22a9c <flatcc_builder_embed_buffer@@Base+0x140>
   22998:	ldr	r2, [sp, #108]	; 0x6c
   2299c:	ldr	r1, [r4, #136]	; 0x88
   229a0:	ldrh	r3, [sp, #104]	; 0x68
   229a4:	tst	r2, #2
   229a8:	moveq	lr, #0
   229ac:	movne	lr, #4
   229b0:	sub	r2, r1, r5
   229b4:	sub	r3, r3, #1
   229b8:	sub	r2, r2, lr
   229bc:	and	r2, r2, r3
   229c0:	ldr	r3, [r4, #152]	; 0x98
   229c4:	str	r0, [sp, #16]
   229c8:	str	r0, [sp, #20]
   229cc:	cmp	r3, #0
   229d0:	add	r0, r5, r2
   229d4:	str	r0, [sp, #12]
   229d8:	beq	229f8 <flatcc_builder_embed_buffer@@Base+0x9c>
   229dc:	mov	r3, #4
   229e0:	mov	lr, #1
   229e4:	add	r0, sp, #12
   229e8:	str	r3, [sp, #16]
   229ec:	str	r3, [sp, #28]
   229f0:	str	r0, [sp, #24]
   229f4:	str	lr, [sp, #20]
   229f8:	cmp	r5, #0
   229fc:	beq	22a24 <flatcc_builder_embed_buffer@@Base+0xc8>
   22a00:	ldr	r0, [sp, #20]
   22a04:	add	lr, sp, #88	; 0x58
   22a08:	add	r0, r0, #1
   22a0c:	add	r3, r3, r5
   22a10:	add	lr, lr, r0, lsl #3
   22a14:	str	r3, [sp, #16]
   22a18:	str	r0, [sp, #20]
   22a1c:	str	r6, [lr, #-72]	; 0xffffffb8
   22a20:	str	r5, [lr, #-68]	; 0xffffffbc
   22a24:	cmp	r2, #0
   22a28:	bne	22a6c <flatcc_builder_embed_buffer@@Base+0x110>
   22a2c:	sub	r5, r1, r3
   22a30:	cmp	r1, r5
   22a34:	ble	22ad0 <flatcc_builder_embed_buffer@@Base+0x174>
   22a38:	ldr	r0, [r4, #36]	; 0x24
   22a3c:	ldr	r2, [sp, #20]
   22a40:	str	r3, [sp]
   22a44:	add	r1, sp, #24
   22a48:	ldr	r6, [r4, #44]	; 0x2c
   22a4c:	mov	r3, r5
   22a50:	blx	r6
   22a54:	cmp	r0, #0
   22a58:	streq	r5, [r4, #136]	; 0x88
   22a5c:	bne	22aac <flatcc_builder_embed_buffer@@Base+0x150>
   22a60:	mov	r0, r5
   22a64:	add	sp, sp, #88	; 0x58
   22a68:	pop	{r4, r5, r6, pc}
   22a6c:	ldr	r0, [sp, #20]
   22a70:	ldr	lr, [pc, #96]	; 22ad8 <flatcc_builder_embed_buffer@@Base+0x17c>
   22a74:	add	r0, r0, #1
   22a78:	add	r3, r3, r2
   22a7c:	str	r3, [sp, #16]
   22a80:	ldr	lr, [ip, lr]
   22a84:	add	ip, sp, #88	; 0x58
   22a88:	add	ip, ip, r0, lsl #3
   22a8c:	str	r0, [sp, #20]
   22a90:	str	lr, [ip, #-72]	; 0xffffffb8
   22a94:	str	r2, [ip, #-68]	; 0xffffffbc
   22a98:	b	22a2c <flatcc_builder_embed_buffer@@Base+0xd0>
   22a9c:	mov	r5, #0
   22aa0:	mov	r0, r5
   22aa4:	add	sp, sp, #88	; 0x58
   22aa8:	pop	{r4, r5, r6, pc}
   22aac:	ldr	r3, [pc, #40]	; 22adc <flatcc_builder_embed_buffer@@Base+0x180>
   22ab0:	ldr	r1, [pc, #40]	; 22ae0 <flatcc_builder_embed_buffer@@Base+0x184>
   22ab4:	ldr	r0, [pc, #40]	; 22ae4 <flatcc_builder_embed_buffer@@Base+0x188>
   22ab8:	add	r3, pc, r3
   22abc:	ldr	r2, [pc, #36]	; 22ae8 <flatcc_builder_embed_buffer@@Base+0x18c>
   22ac0:	add	r3, r3, #28
   22ac4:	add	r1, pc, r1
   22ac8:	add	r0, pc, r0
   22acc:	bl	126a0 <__assert_fail@plt>
   22ad0:	bl	128d0 <__assert_fail@plt+0x230>
   22ad4:	andeq	sl, r1, ip, ror #12
   22ad8:	andeq	r0, r0, ip, rrx
   22adc:	andeq	r8, r0, r0, lsl #15
   22ae0:	andeq	r8, r0, r4, asr #29
   22ae4:	andeq	r8, r0, r8, asr #30
   22ae8:	andeq	r0, r0, fp, lsl #5

00022aec <flatcc_builder_create_buffer@@Base>:
   22aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22af0:	sub	sp, sp, #100	; 0x64
   22af4:	mov	r5, #0
   22af8:	ldr	r8, [sp, #140]	; 0x8c
   22afc:	mov	r9, r1
   22b00:	and	r6, r8, #1
   22b04:	mov	r7, r3
   22b08:	add	r1, sp, #136	; 0x88
   22b0c:	mov	r3, r6
   22b10:	str	r5, [sp, #20]
   22b14:	mov	r4, r0
   22b18:	bl	22040 <flatcc_builder_default_alloc@@Base+0x10c>
   22b1c:	ldr	lr, [pc, #516]	; 22d28 <flatcc_builder_create_buffer@@Base+0x23c>
   22b20:	add	lr, pc, lr
   22b24:	cmp	r0, r5
   22b28:	bne	22cbc <flatcc_builder_create_buffer@@Base+0x1d0>
   22b2c:	ldrh	r3, [r4, #128]	; 0x80
   22b30:	ldrh	r2, [sp, #136]	; 0x88
   22b34:	uxtb	r5, r6
   22b38:	cmp	r3, r2
   22b3c:	strhcc	r2, [r4, #128]	; 0x80
   22b40:	cmp	r9, #0
   22b44:	sub	r2, r2, #1
   22b48:	ldrne	r3, [r9]
   22b4c:	ldreq	r0, [sp, #20]
   22b50:	ldrne	r0, [r9]
   22b54:	strne	r3, [sp, #20]
   22b58:	cmp	r0, #0
   22b5c:	movne	r0, #4
   22b60:	moveq	r0, #0
   22b64:	ands	r3, r8, #2
   22b68:	ldr	r8, [r4, #136]	; 0x88
   22b6c:	bne	22c8c <flatcc_builder_create_buffer@@Base+0x1a0>
   22b70:	sub	r1, r8, #4
   22b74:	cmp	r5, #0
   22b78:	sub	r1, r1, r0
   22b7c:	and	r2, r2, r1
   22b80:	moveq	r9, #1
   22b84:	moveq	ip, #4
   22b88:	bne	22c98 <flatcc_builder_create_buffer@@Base+0x1ac>
   22b8c:	add	r1, r3, #1
   22b90:	add	sl, sp, #96	; 0x60
   22b94:	add	r1, sl, r1, lsl #3
   22b98:	mov	fp, #4
   22b9c:	add	sl, sp, #12
   22ba0:	cmp	r0, #0
   22ba4:	str	ip, [sp, #24]
   22ba8:	str	r9, [sp, #28]
   22bac:	str	sl, [r1, #-72]	; 0xffffffb8
   22bb0:	str	fp, [r1, #-68]	; 0xffffffbc
   22bb4:	beq	22be0 <flatcc_builder_create_buffer@@Base+0xf4>
   22bb8:	add	r9, r9, #1
   22bbc:	add	r1, sp, #96	; 0x60
   22bc0:	add	r9, r1, r9, lsl #3
   22bc4:	add	r3, r3, #2
   22bc8:	add	ip, ip, r0
   22bcc:	str	r3, [sp, #28]
   22bd0:	add	r3, sp, #20
   22bd4:	str	r0, [r9, #-68]	; 0xffffffbc
   22bd8:	str	ip, [sp, #24]
   22bdc:	str	r3, [r9, #-72]	; 0xffffffb8
   22be0:	cmp	r2, #0
   22be4:	beq	22c14 <flatcc_builder_create_buffer@@Base+0x128>
   22be8:	ldr	r3, [sp, #28]
   22bec:	ldr	r1, [pc, #312]	; 22d2c <flatcc_builder_create_buffer@@Base+0x240>
   22bf0:	add	r3, r3, #1
   22bf4:	add	ip, ip, r2
   22bf8:	str	ip, [sp, #24]
   22bfc:	ldr	r0, [lr, r1]
   22c00:	add	r1, sp, #96	; 0x60
   22c04:	add	r1, r1, r3, lsl #3
   22c08:	str	r3, [sp, #28]
   22c0c:	str	r0, [r1, #-72]	; 0xffffffb8
   22c10:	str	r2, [r1, #-68]	; 0xffffffbc
   22c14:	cmp	r5, #0
   22c18:	sub	r5, r8, ip
   22c1c:	mov	r3, r5
   22c20:	beq	22ccc <flatcc_builder_create_buffer@@Base+0x1e0>
   22c24:	cmp	r6, #0
   22c28:	add	r3, r5, #4
   22c2c:	beq	22ccc <flatcc_builder_create_buffer@@Base+0x1e0>
   22c30:	ldr	r2, [r4, #144]	; 0x90
   22c34:	sub	r2, r2, r3
   22c38:	str	r2, [sp, #16]
   22c3c:	sub	r7, r7, r3
   22c40:	cmp	r5, r8
   22c44:	str	r7, [sp, #12]
   22c48:	mov	r6, r5
   22c4c:	bge	22cdc <flatcc_builder_create_buffer@@Base+0x1f0>
   22c50:	ldr	r0, [r4, #36]	; 0x24
   22c54:	ldr	r2, [sp, #28]
   22c58:	str	ip, [sp]
   22c5c:	mov	r3, r5
   22c60:	ldr	r7, [r4, #44]	; 0x2c
   22c64:	add	r1, sp, #32
   22c68:	blx	r7
   22c6c:	cmp	r0, #0
   22c70:	bne	22ce0 <flatcc_builder_create_buffer@@Base+0x1f4>
   22c74:	cmp	r5, #0
   22c78:	str	r5, [r4, #136]	; 0x88
   22c7c:	beq	22d04 <flatcc_builder_create_buffer@@Base+0x218>
   22c80:	mov	r0, r6
   22c84:	add	sp, sp, #100	; 0x64
   22c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c8c:	sub	r3, r8, #8
   22c90:	sub	r3, r3, r0
   22c94:	and	r2, r2, r3
   22c98:	mov	ip, #4
   22c9c:	mov	r3, #1
   22ca0:	add	r1, sp, #16
   22ca4:	str	ip, [sp, #36]	; 0x24
   22ca8:	str	r1, [sp, #32]
   22cac:	mov	r5, r3
   22cb0:	mov	r9, #2
   22cb4:	mov	ip, #8
   22cb8:	b	22b8c <flatcc_builder_create_buffer@@Base+0xa0>
   22cbc:	mov	r6, r5
   22cc0:	mov	r0, r6
   22cc4:	add	sp, sp, #100	; 0x64
   22cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ccc:	ldr	r2, [r4, #140]	; 0x8c
   22cd0:	sub	r2, r2, r3
   22cd4:	str	r2, [sp, #16]
   22cd8:	b	22c3c <flatcc_builder_create_buffer@@Base+0x150>
   22cdc:	bl	128d0 <__assert_fail@plt+0x230>
   22ce0:	ldr	r3, [pc, #72]	; 22d30 <flatcc_builder_create_buffer@@Base+0x244>
   22ce4:	ldr	r1, [pc, #72]	; 22d34 <flatcc_builder_create_buffer@@Base+0x248>
   22ce8:	ldr	r0, [pc, #72]	; 22d38 <flatcc_builder_create_buffer@@Base+0x24c>
   22cec:	add	r3, pc, r3
   22cf0:	ldr	r2, [pc, #68]	; 22d3c <flatcc_builder_create_buffer@@Base+0x250>
   22cf4:	add	r3, r3, #28
   22cf8:	add	r1, pc, r1
   22cfc:	add	r0, pc, r0
   22d00:	bl	126a0 <__assert_fail@plt>
   22d04:	ldr	r3, [pc, #52]	; 22d40 <flatcc_builder_create_buffer@@Base+0x254>
   22d08:	ldr	r1, [pc, #52]	; 22d44 <flatcc_builder_create_buffer@@Base+0x258>
   22d0c:	ldr	r0, [pc, #52]	; 22d48 <flatcc_builder_create_buffer@@Base+0x25c>
   22d10:	add	r3, pc, r3
   22d14:	mov	r2, #772	; 0x304
   22d18:	add	r3, r3, #204	; 0xcc
   22d1c:	add	r1, pc, r1
   22d20:	add	r0, pc, r0
   22d24:	bl	126a0 <__assert_fail@plt>
   22d28:	ldrdeq	sl, [r1], -r8
   22d2c:	andeq	r0, r0, ip, rrx
   22d30:	andeq	r8, r0, ip, asr #10
   22d34:	muleq	r0, r0, ip
   22d38:	andeq	r8, r0, r4, lsl sp
   22d3c:	andeq	r0, r0, fp, lsl #5
   22d40:	andeq	r8, r0, r8, lsr #10
   22d44:	andeq	r8, r0, ip, ror #24
   22d48:	strdeq	r8, [r0], -r0

00022d4c <flatcc_builder_create_struct@@Base>:
   22d4c:	push	{r4, r5, r6, lr}
   22d50:	cmp	r3, #0
   22d54:	ldr	lr, [pc, #300]	; 22e88 <flatcc_builder_create_struct@@Base+0x13c>
   22d58:	sub	sp, sp, #80	; 0x50
   22d5c:	add	lr, pc, lr
   22d60:	beq	22e64 <flatcc_builder_create_struct@@Base+0x118>
   22d64:	mov	r5, r0
   22d68:	ldrh	r0, [r0, #128]	; 0x80
   22d6c:	ldr	ip, [r5, #136]	; 0x88
   22d70:	cmp	r0, r3
   22d74:	strhcc	r3, [r5, #128]	; 0x80
   22d78:	mov	r0, #0
   22d7c:	sub	r3, r3, #1
   22d80:	sub	r4, ip, r2
   22d84:	cmp	r2, #0
   22d88:	and	r3, r3, r4
   22d8c:	str	r0, [sp, #8]
   22d90:	str	r0, [sp, #12]
   22d94:	bne	22e14 <flatcc_builder_create_struct@@Base+0xc8>
   22d98:	cmp	r3, #0
   22d9c:	movne	r6, #1
   22da0:	movne	r1, r2
   22da4:	beq	22e3c <flatcc_builder_create_struct@@Base+0xf0>
   22da8:	ldr	r0, [pc, #220]	; 22e8c <flatcc_builder_create_struct@@Base+0x140>
   22dac:	add	r1, r1, #1
   22db0:	add	r2, r2, r3
   22db4:	add	r4, sp, #80	; 0x50
   22db8:	add	r1, r4, r1, lsl #3
   22dbc:	str	r2, [sp, #8]
   22dc0:	sub	r4, ip, r2
   22dc4:	ldr	r0, [lr, r0]
   22dc8:	str	r3, [r1, #-68]	; 0xffffffbc
   22dcc:	str	r0, [r1, #-72]	; 0xffffffb8
   22dd0:	str	r6, [sp, #12]
   22dd4:	cmp	ip, r4
   22dd8:	ble	22e3c <flatcc_builder_create_struct@@Base+0xf0>
   22ddc:	ldr	r3, [sp, #12]
   22de0:	ldr	r0, [r5, #36]	; 0x24
   22de4:	add	r1, sp, #16
   22de8:	str	r2, [sp]
   22dec:	mov	r2, r3
   22df0:	ldr	r6, [r5, #44]	; 0x2c
   22df4:	mov	r3, r4
   22df8:	blx	r6
   22dfc:	cmp	r0, #0
   22e00:	bne	22e40 <flatcc_builder_create_struct@@Base+0xf4>
   22e04:	mov	r0, r4
   22e08:	str	r4, [r5, #136]	; 0x88
   22e0c:	add	sp, sp, #80	; 0x50
   22e10:	pop	{r4, r5, r6, pc}
   22e14:	cmp	r3, r0
   22e18:	mov	r0, #1
   22e1c:	str	r1, [sp, #16]
   22e20:	str	r2, [sp, #8]
   22e24:	str	r2, [sp, #20]
   22e28:	str	r0, [sp, #12]
   22e2c:	movne	r1, r0
   22e30:	movne	r6, #2
   22e34:	beq	22dd4 <flatcc_builder_create_struct@@Base+0x88>
   22e38:	b	22da8 <flatcc_builder_create_struct@@Base+0x5c>
   22e3c:	bl	128d0 <__assert_fail@plt+0x230>
   22e40:	ldr	r3, [pc, #72]	; 22e90 <flatcc_builder_create_struct@@Base+0x144>
   22e44:	ldr	r1, [pc, #72]	; 22e94 <flatcc_builder_create_struct@@Base+0x148>
   22e48:	ldr	r0, [pc, #72]	; 22e98 <flatcc_builder_create_struct@@Base+0x14c>
   22e4c:	add	r3, pc, r3
   22e50:	ldr	r2, [pc, #68]	; 22e9c <flatcc_builder_create_struct@@Base+0x150>
   22e54:	add	r3, r3, #28
   22e58:	add	r1, pc, r1
   22e5c:	add	r0, pc, r0
   22e60:	bl	126a0 <__assert_fail@plt>
   22e64:	ldr	r3, [pc, #52]	; 22ea0 <flatcc_builder_create_struct@@Base+0x154>
   22e68:	ldr	r1, [pc, #52]	; 22ea4 <flatcc_builder_create_struct@@Base+0x158>
   22e6c:	ldr	r0, [pc, #52]	; 22ea8 <flatcc_builder_create_struct@@Base+0x15c>
   22e70:	add	r3, pc, r3
   22e74:	ldr	r2, [pc, #48]	; 22eac <flatcc_builder_create_struct@@Base+0x160>
   22e78:	add	r3, r3, #236	; 0xec
   22e7c:	add	r1, pc, r1
   22e80:	add	r0, pc, r0
   22e84:	bl	126a0 <__assert_fail@plt>
   22e88:	muleq	r1, ip, r2
   22e8c:	andeq	r0, r0, ip, rrx
   22e90:	andeq	r8, r0, ip, ror #7
   22e94:	andeq	r8, r0, r0, lsr fp
   22e98:			; <UNDEFINED> instruction: 0x00008bb4
   22e9c:	andeq	r0, r0, fp, lsl #5
   22ea0:	andeq	r8, r0, r8, asr #7
   22ea4:	andeq	r8, r0, ip, lsl #22
   22ea8:	strdeq	r8, [r0], -r4
   22eac:	andeq	r0, r0, pc, lsl #6

00022eb0 <flatcc_builder_start_buffer@@Base>:
   22eb0:	push	{r4, r5, r6, r7, r8, lr}
   22eb4:	mov	r5, r1
   22eb8:	ldrh	r1, [r0, #128]	; 0x80
   22ebc:	mov	r4, r0
   22ec0:	mov	r7, r2
   22ec4:	mov	r6, r3
   22ec8:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   22ecc:	ldr	r1, [pc, #140]	; 22f60 <flatcc_builder_start_buffer@@Base+0xb0>
   22ed0:	add	r1, pc, r1
   22ed4:	cmp	r0, #0
   22ed8:	bne	22f58 <flatcc_builder_start_buffer@@Base+0xa8>
   22edc:	ldrh	r3, [r4, #132]	; 0x84
   22ee0:	ldr	ip, [r4, #32]
   22ee4:	mov	r2, #1
   22ee8:	strh	r2, [r4, #128]	; 0x80
   22eec:	strh	r3, [ip, #34]	; 0x22
   22ef0:	ldrh	r3, [r4, #164]	; 0xa4
   22ef4:	strh	r7, [r4, #132]	; 0x84
   22ef8:	cmp	r5, #0
   22efc:	strh	r3, [ip, #32]
   22f00:	ldr	r3, [r4, #144]	; 0x90
   22f04:	strh	r6, [r4, #164]	; 0xa4
   22f08:	str	r3, [ip, #20]
   22f0c:	ldr	r3, [r4, #152]	; 0x98
   22f10:	str	r3, [ip, #28]
   22f14:	ldr	r3, [r4, #148]	; 0x94
   22f18:	ldr	lr, [r4, #136]	; 0x88
   22f1c:	ldr	r2, [r4, #168]	; 0xa8
   22f20:	add	r6, r3, #1
   22f24:	str	r3, [r4, #152]	; 0x98
   22f28:	str	r6, [r4, #148]	; 0x94
   22f2c:	str	lr, [r4, #144]	; 0x90
   22f30:	str	r2, [ip, #16]
   22f34:	beq	22f4c <flatcc_builder_start_buffer@@Base+0x9c>
   22f38:	ldr	r2, [r5]
   22f3c:	mov	r3, #1
   22f40:	str	r2, [r4, #168]	; 0xa8
   22f44:	strh	r3, [ip, #14]
   22f48:	pop	{r4, r5, r6, r7, r8, pc}
   22f4c:	ldr	r3, [pc, #16]	; 22f64 <flatcc_builder_start_buffer@@Base+0xb4>
   22f50:	ldr	r5, [r1, r3]
   22f54:	b	22f38 <flatcc_builder_start_buffer@@Base+0x88>
   22f58:	mvn	r0, #0
   22f5c:	pop	{r4, r5, r6, r7, r8, pc}
   22f60:	andeq	sl, r1, r8, lsr #2
   22f64:	andeq	r0, r0, ip, rrx

00022f68 <flatcc_builder_end_buffer@@Base>:
   22f68:	ldr	ip, [r0, #32]
   22f6c:	ldrh	r2, [r0, #164]	; 0xa4
   22f70:	push	{r4, r5, r6, lr}
   22f74:	mov	r4, r0
   22f78:	ldrh	ip, [ip, #14]
   22f7c:	ldr	r0, [r0, #152]	; 0x98
   22f80:	and	r2, r2, #2
   22f84:	cmp	r0, #0
   22f88:	moveq	r0, r2
   22f8c:	orrne	r0, r2, #1
   22f90:	cmp	ip, #1
   22f94:	sub	sp, sp, #8
   22f98:	bne	23078 <flatcc_builder_end_buffer@@Base+0x110>
   22f9c:	ldrh	r2, [r4, #132]	; 0x84
   22fa0:	ldrh	ip, [r4, #128]	; 0x80
   22fa4:	mov	r3, r1
   22fa8:	add	r1, r4, #168	; 0xa8
   22fac:	cmp	r2, ip
   22fb0:	movhi	ip, r2
   22fb4:	strhhi	r2, [r4, #128]	; 0x80
   22fb8:	str	r0, [sp, #4]
   22fbc:	str	ip, [sp]
   22fc0:	mov	r0, r4
   22fc4:	bl	22aec <flatcc_builder_create_buffer@@Base>
   22fc8:	subs	r5, r0, #0
   22fcc:	beq	2306c <flatcc_builder_end_buffer@@Base+0x104>
   22fd0:	ldr	r3, [r4, #32]
   22fd4:	ldr	r2, [r4, #20]
   22fd8:	mov	r1, #0
   22fdc:	ldr	ip, [r3, #20]
   22fe0:	ldr	r0, [r4, #16]
   22fe4:	str	ip, [r4, #144]	; 0x90
   22fe8:	ldr	ip, [r3, #28]
   22fec:	str	ip, [r4, #152]	; 0x98
   22ff0:	ldr	ip, [r3, #16]
   22ff4:	str	ip, [r4, #168]	; 0xa8
   22ff8:	ldrh	r3, [r3, #32]
   22ffc:	strh	r3, [r4, #164]	; 0xa4
   23000:	bl	1264c <memset@plt>
   23004:	ldr	r3, [r4, #32]
   23008:	ldr	r2, [r4, #64]	; 0x40
   2300c:	ldrh	lr, [r4, #130]	; 0x82
   23010:	ldr	ip, [r3]
   23014:	ldr	r1, [r3, #4]
   23018:	ldrh	r0, [r4, #128]	; 0x80
   2301c:	sub	r2, r2, ip
   23020:	cmp	r2, r1
   23024:	movcs	r2, r1
   23028:	cmp	r0, lr
   2302c:	ldr	r0, [r4, #60]	; 0x3c
   23030:	ldr	r6, [r3, #8]
   23034:	str	r2, [r4, #24]
   23038:	add	r2, r0, ip
   2303c:	str	r2, [r4, #16]
   23040:	str	r6, [r4, #20]
   23044:	ldr	r2, [r4, #156]	; 0x9c
   23048:	str	ip, [r4, #28]
   2304c:	str	r1, [r3, #4]
   23050:	strhcc	lr, [r4, #128]	; 0x80
   23054:	ldrh	r1, [r3, #12]
   23058:	sub	r2, r2, #1
   2305c:	sub	r3, r3, #36	; 0x24
   23060:	str	r2, [r4, #156]	; 0x9c
   23064:	strh	r1, [r4, #130]	; 0x82
   23068:	str	r3, [r4, #32]
   2306c:	mov	r0, r5
   23070:	add	sp, sp, #8
   23074:	pop	{r4, r5, r6, pc}
   23078:	ldr	r3, [pc, #28]	; 2309c <flatcc_builder_end_buffer@@Base+0x134>
   2307c:	ldr	r1, [pc, #28]	; 230a0 <flatcc_builder_end_buffer@@Base+0x138>
   23080:	ldr	r0, [pc, #28]	; 230a4 <flatcc_builder_end_buffer@@Base+0x13c>
   23084:	add	r3, pc, r3
   23088:	ldr	r2, [pc, #24]	; 230a8 <flatcc_builder_end_buffer@@Base+0x140>
   2308c:	add	r3, r3, #268	; 0x10c
   23090:	add	r1, pc, r1
   23094:	add	r0, pc, r0
   23098:	bl	126a0 <__assert_fail@plt>
   2309c:			; <UNDEFINED> instruction: 0x000081b4
   230a0:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   230a4:	andeq	r8, r0, ip, ror #19
   230a8:	andeq	r0, r0, r6, asr #6

000230ac <flatcc_builder_start_struct@@Base>:
   230ac:	push	{r4, r5, r6, lr}
   230b0:	mov	r5, r1
   230b4:	mov	r1, r2
   230b8:	mov	r4, r0
   230bc:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   230c0:	cmp	r0, #0
   230c4:	bne	23144 <flatcc_builder_start_struct@@Base+0x98>
   230c8:	ldr	r2, [r4, #28]
   230cc:	ldr	r3, [r4, #64]	; 0x40
   230d0:	ldr	r0, [r4, #60]	; 0x3c
   230d4:	ldr	ip, [r4, #32]
   230d8:	sub	r3, r3, r2
   230dc:	cmn	r3, #4
   230e0:	ldr	r6, [r4, #20]
   230e4:	add	r0, r0, r2
   230e8:	mov	r2, #2
   230ec:	strh	r2, [ip, #14]
   230f0:	mvnhi	r2, #3
   230f4:	movhi	r3, r2
   230f8:	add	r5, r5, r6
   230fc:	strhi	r2, [r4, #24]
   23100:	strls	r3, [r4, #24]
   23104:	mvn	r2, #3
   23108:	cmp	r5, r3
   2310c:	str	r0, [r4, #16]
   23110:	str	r2, [ip, #4]
   23114:	str	r5, [r4, #20]
   23118:	bcs	23124 <flatcc_builder_start_struct@@Base+0x78>
   2311c:	add	r0, r0, r6
   23120:	pop	{r4, r5, r6, pc}
   23124:	add	r1, r5, #1
   23128:	mov	r0, r4
   2312c:	bl	21ec0 <test_parse@@Base+0x534>
   23130:	cmp	r0, #0
   23134:	bne	23144 <flatcc_builder_start_struct@@Base+0x98>
   23138:	ldr	r0, [r4, #16]
   2313c:	add	r0, r0, r6
   23140:	pop	{r4, r5, r6, pc}
   23144:	mov	r0, #0
   23148:	pop	{r4, r5, r6, pc}

0002314c <flatcc_builder_struct_edit@@Base>:
   2314c:	ldr	r0, [r0, #16]
   23150:	bx	lr

00023154 <flatcc_builder_end_struct@@Base>:
   23154:	ldr	r3, [r0, #32]
   23158:	push	{r4, r5, r6, lr}
   2315c:	ldrh	r3, [r3, #14]
   23160:	cmp	r3, #2
   23164:	bne	23204 <flatcc_builder_end_struct@@Base+0xb0>
   23168:	ldrh	r3, [r0, #130]	; 0x82
   2316c:	ldr	r2, [r0, #20]
   23170:	ldr	r1, [r0, #16]
   23174:	mov	r4, r0
   23178:	bl	22d4c <flatcc_builder_create_struct@@Base>
   2317c:	subs	r5, r0, #0
   23180:	beq	231fc <flatcc_builder_end_struct@@Base+0xa8>
   23184:	ldr	r2, [r4, #20]
   23188:	mov	r1, #0
   2318c:	ldr	r0, [r4, #16]
   23190:	bl	1264c <memset@plt>
   23194:	ldr	r3, [r4, #32]
   23198:	ldr	r2, [r4, #64]	; 0x40
   2319c:	ldrh	lr, [r4, #130]	; 0x82
   231a0:	ldr	ip, [r3]
   231a4:	ldr	r1, [r3, #4]
   231a8:	ldrh	r0, [r4, #128]	; 0x80
   231ac:	sub	r2, r2, ip
   231b0:	cmp	r2, r1
   231b4:	movcs	r2, r1
   231b8:	cmp	r0, lr
   231bc:	ldr	r0, [r4, #60]	; 0x3c
   231c0:	ldr	r6, [r3, #8]
   231c4:	str	r2, [r4, #24]
   231c8:	add	r2, r0, ip
   231cc:	str	r2, [r4, #16]
   231d0:	str	r6, [r4, #20]
   231d4:	ldr	r2, [r4, #156]	; 0x9c
   231d8:	str	ip, [r4, #28]
   231dc:	str	r1, [r3, #4]
   231e0:	strhcc	lr, [r4, #128]	; 0x80
   231e4:	ldrh	r1, [r3, #12]
   231e8:	sub	r2, r2, #1
   231ec:	sub	r3, r3, #36	; 0x24
   231f0:	str	r2, [r4, #156]	; 0x9c
   231f4:	strh	r1, [r4, #130]	; 0x82
   231f8:	str	r3, [r4, #32]
   231fc:	mov	r0, r5
   23200:	pop	{r4, r5, r6, pc}
   23204:	ldr	r3, [pc, #28]	; 23228 <flatcc_builder_end_struct@@Base+0xd4>
   23208:	ldr	r1, [pc, #28]	; 2322c <flatcc_builder_end_struct@@Base+0xd8>
   2320c:	ldr	r0, [pc, #28]	; 23230 <flatcc_builder_end_struct@@Base+0xdc>
   23210:	add	r3, pc, r3
   23214:	mov	r2, #872	; 0x368
   23218:	add	r3, r3, #296	; 0x128
   2321c:	add	r1, pc, r1
   23220:	add	r0, pc, r0
   23224:	bl	126a0 <__assert_fail@plt>
   23228:	andeq	r8, r0, r8, lsr #32
   2322c:	andeq	r8, r0, ip, ror #14
   23230:	andeq	r8, r0, ip, lsl #17

00023234 <flatcc_builder_extend_vector@@Base>:
   23234:	ldr	r2, [r0, #32]
   23238:	push	{r4, r5, r6, lr}
   2323c:	ldr	r3, [r2, #20]
   23240:	ldr	r4, [r2, #24]
   23244:	add	ip, r1, r3
   23248:	cmp	r3, ip
   2324c:	movls	r3, #0
   23250:	movhi	r3, #1
   23254:	cmp	r4, ip
   23258:	movcs	r4, r3
   2325c:	orrcc	r4, r3, #1
   23260:	cmp	r4, #0
   23264:	bne	232b4 <flatcc_builder_extend_vector@@Base+0x80>
   23268:	ldr	lr, [r2, #16]
   2326c:	str	ip, [r2, #20]
   23270:	ldr	r6, [r0, #20]
   23274:	ldr	r3, [r0, #24]
   23278:	mla	r1, lr, r1, r6
   2327c:	mov	r5, r0
   23280:	cmp	r1, r3
   23284:	str	r1, [r0, #20]
   23288:	bcs	23298 <flatcc_builder_extend_vector@@Base+0x64>
   2328c:	ldr	r0, [r5, #16]
   23290:	add	r0, r0, r6
   23294:	pop	{r4, r5, r6, pc}
   23298:	add	r1, r1, #1
   2329c:	mvn	r2, #3
   232a0:	bl	21ec0 <test_parse@@Base+0x534>
   232a4:	cmp	r0, #0
   232a8:	beq	2328c <flatcc_builder_extend_vector@@Base+0x58>
   232ac:	mov	r0, r4
   232b0:	pop	{r4, r5, r6, pc}
   232b4:	bl	12908 <__assert_fail@plt+0x268>

000232b8 <flatcc_builder_vector_push@@Base>:
   232b8:	ldr	r3, [r0, #32]
   232bc:	push	{r4, r5, r6, r7, r8, lr}
   232c0:	ldrh	r2, [r3, #14]
   232c4:	cmp	r2, #4
   232c8:	bne	23370 <flatcc_builder_vector_push@@Base+0xb8>
   232cc:	mov	r6, r1
   232d0:	ldr	r2, [r3, #20]
   232d4:	ldr	r1, [r3, #24]
   232d8:	cmp	r2, r1
   232dc:	bhi	2334c <flatcc_builder_vector_push@@Base+0x94>
   232e0:	add	r2, r2, #1
   232e4:	str	r2, [r3, #20]
   232e8:	ldr	r7, [r3, #16]
   232ec:	ldr	r5, [r0, #20]
   232f0:	ldr	r3, [r0, #24]
   232f4:	add	r1, r7, r5
   232f8:	cmp	r1, r3
   232fc:	mov	r4, r0
   23300:	str	r1, [r0, #20]
   23304:	bcs	23330 <flatcc_builder_vector_push@@Base+0x78>
   23308:	ldr	r3, [r4, #16]
   2330c:	adds	r3, r3, r5
   23310:	beq	23328 <flatcc_builder_vector_push@@Base+0x70>
   23314:	mov	r0, r3
   23318:	mov	r2, r7
   2331c:	mov	r1, r6
   23320:	bl	125a4 <memcpy@plt>
   23324:	mov	r3, r0
   23328:	mov	r0, r3
   2332c:	pop	{r4, r5, r6, r7, r8, pc}
   23330:	add	r1, r1, #1
   23334:	mvn	r2, #3
   23338:	bl	21ec0 <test_parse@@Base+0x534>
   2333c:	cmp	r0, #0
   23340:	beq	23308 <flatcc_builder_vector_push@@Base+0x50>
   23344:	mov	r3, #0
   23348:	b	23328 <flatcc_builder_vector_push@@Base+0x70>
   2334c:	ldr	r3, [pc, #64]	; 23394 <flatcc_builder_vector_push@@Base+0xdc>
   23350:	ldr	r1, [pc, #64]	; 23398 <flatcc_builder_vector_push@@Base+0xe0>
   23354:	ldr	r0, [pc, #64]	; 2339c <flatcc_builder_vector_push@@Base+0xe4>
   23358:	add	r3, pc, r3
   2335c:	mov	r2, #908	; 0x38c
   23360:	add	r3, r3, #324	; 0x144
   23364:	add	r1, pc, r1
   23368:	add	r0, pc, r0
   2336c:	bl	126a0 <__assert_fail@plt>
   23370:	ldr	r3, [pc, #40]	; 233a0 <flatcc_builder_vector_push@@Base+0xe8>
   23374:	ldr	r1, [pc, #40]	; 233a4 <flatcc_builder_vector_push@@Base+0xec>
   23378:	ldr	r0, [pc, #40]	; 233a8 <flatcc_builder_vector_push@@Base+0xf0>
   2337c:	add	r3, pc, r3
   23380:	ldr	r2, [pc, #36]	; 233ac <flatcc_builder_vector_push@@Base+0xf4>
   23384:	add	r3, r3, #324	; 0x144
   23388:	add	r1, pc, r1
   2338c:	add	r0, pc, r0
   23390:	bl	126a0 <__assert_fail@plt>
   23394:	andeq	r7, r0, r0, ror #29
   23398:	andeq	r8, r0, r4, lsr #12
   2339c:	muleq	r0, ip, r7
   233a0:			; <UNDEFINED> instruction: 0x00007ebc
   233a4:	andeq	r8, r0, r0, lsl #12
   233a8:	andeq	r8, r0, ip, asr #14
   233ac:	andeq	r0, r0, fp, lsl #7

000233b0 <flatcc_builder_append_vector@@Base>:
   233b0:	push	{r4, r5, r6, r7, r8, lr}
   233b4:	mov	r7, r1
   233b8:	ldr	r1, [r0, #32]
   233bc:	ldrh	r3, [r1, #14]
   233c0:	cmp	r3, #4
   233c4:	bne	23464 <flatcc_builder_append_vector@@Base+0xb4>
   233c8:	ldr	r3, [r1, #20]
   233cc:	ldr	r4, [r1, #24]
   233d0:	add	ip, r2, r3
   233d4:	cmp	r3, ip
   233d8:	movls	r3, #0
   233dc:	movhi	r3, #1
   233e0:	cmp	r4, ip
   233e4:	movcs	r4, r3
   233e8:	orrcc	r4, r3, #1
   233ec:	cmp	r4, #0
   233f0:	bne	23460 <flatcc_builder_append_vector@@Base+0xb0>
   233f4:	ldr	r6, [r1, #16]
   233f8:	str	ip, [r1, #20]
   233fc:	ldr	r8, [r0, #20]
   23400:	mul	r6, r6, r2
   23404:	ldr	r3, [r0, #24]
   23408:	add	r1, r6, r8
   2340c:	cmp	r1, r3
   23410:	mov	r5, r0
   23414:	str	r1, [r0, #20]
   23418:	bcs	23444 <flatcc_builder_append_vector@@Base+0x94>
   2341c:	ldr	r3, [r5, #16]
   23420:	adds	r3, r3, r8
   23424:	beq	2343c <flatcc_builder_append_vector@@Base+0x8c>
   23428:	mov	r0, r3
   2342c:	mov	r2, r6
   23430:	mov	r1, r7
   23434:	bl	125a4 <memcpy@plt>
   23438:	mov	r3, r0
   2343c:	mov	r0, r3
   23440:	pop	{r4, r5, r6, r7, r8, pc}
   23444:	add	r1, r1, #1
   23448:	mvn	r2, #3
   2344c:	bl	21ec0 <test_parse@@Base+0x534>
   23450:	cmp	r0, #0
   23454:	beq	2341c <flatcc_builder_append_vector@@Base+0x6c>
   23458:	mov	r3, r4
   2345c:	b	2343c <flatcc_builder_append_vector@@Base+0x8c>
   23460:	bl	12908 <__assert_fail@plt+0x268>
   23464:	ldr	r3, [pc, #28]	; 23488 <flatcc_builder_append_vector@@Base+0xd8>
   23468:	ldr	r1, [pc, #28]	; 2348c <flatcc_builder_append_vector@@Base+0xdc>
   2346c:	ldr	r0, [pc, #28]	; 23490 <flatcc_builder_append_vector@@Base+0xe0>
   23470:	add	r3, pc, r3
   23474:	ldr	r2, [pc, #24]	; 23494 <flatcc_builder_append_vector@@Base+0xe4>
   23478:	add	r3, r3, #352	; 0x160
   2347c:	add	r1, pc, r1
   23480:	add	r0, pc, r0
   23484:	bl	126a0 <__assert_fail@plt>
   23488:	andeq	r7, r0, r8, asr #27
   2348c:	andeq	r8, r0, ip, lsl #10
   23490:	andeq	r8, r0, r8, asr r6
   23494:	muleq	r0, r3, r3

00023498 <flatcc_builder_extend_offset_vector@@Base>:
   23498:	ldr	ip, [r0, #32]
   2349c:	push	{r4, r5, r6, lr}
   234a0:	ldr	r3, [ip, #20]
   234a4:	adds	r2, r1, r3
   234a8:	movcs	r3, #1
   234ac:	movcc	r3, #0
   234b0:	cmn	r2, #-1073741823	; 0xc0000001
   234b4:	movls	r4, #0
   234b8:	movhi	r4, #1
   234bc:	orrs	r4, r3, r4
   234c0:	bne	2350c <flatcc_builder_extend_offset_vector@@Base+0x74>
   234c4:	str	r2, [ip, #20]
   234c8:	ldr	r6, [r0, #20]
   234cc:	ldr	r3, [r0, #24]
   234d0:	add	r1, r6, r1, lsl #2
   234d4:	cmp	r1, r3
   234d8:	mov	r5, r0
   234dc:	str	r1, [r0, #20]
   234e0:	bcs	234f0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   234e4:	ldr	r0, [r5, #16]
   234e8:	add	r0, r0, r6
   234ec:	pop	{r4, r5, r6, pc}
   234f0:	add	r1, r1, #1
   234f4:	mvn	r2, #3
   234f8:	bl	21ec0 <test_parse@@Base+0x534>
   234fc:	cmp	r0, #0
   23500:	beq	234e4 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   23504:	mov	r0, r4
   23508:	pop	{r4, r5, r6, pc}
   2350c:	bl	12908 <__assert_fail@plt+0x268>

00023510 <flatcc_builder_offset_vector_push@@Base>:
   23510:	ldr	r2, [r0, #32]
   23514:	push	{r4, r5, r6, lr}
   23518:	ldrh	r3, [r2, #14]
   2351c:	cmp	r3, #5
   23520:	bne	23588 <flatcc_builder_offset_vector_push@@Base+0x78>
   23524:	ldr	r3, [r2, #20]
   23528:	cmn	r3, #-1073741823	; 0xc0000001
   2352c:	beq	23580 <flatcc_builder_offset_vector_push@@Base+0x70>
   23530:	add	r3, r3, #1
   23534:	str	r3, [r2, #20]
   23538:	ldr	r5, [r0, #20]
   2353c:	ldr	r2, [r0, #24]
   23540:	add	r3, r5, #4
   23544:	cmp	r3, r2
   23548:	mov	r4, r0
   2354c:	mov	r6, r1
   23550:	str	r3, [r0, #20]
   23554:	bcs	2356c <flatcc_builder_offset_vector_push@@Base+0x5c>
   23558:	ldr	r3, [r4, #16]
   2355c:	adds	r0, r3, r5
   23560:	beq	235ac <flatcc_builder_offset_vector_push@@Base+0x9c>
   23564:	str	r6, [r3, r5]
   23568:	pop	{r4, r5, r6, pc}
   2356c:	mvn	r2, #3
   23570:	add	r1, r5, #5
   23574:	bl	21ec0 <test_parse@@Base+0x534>
   23578:	cmp	r0, #0
   2357c:	beq	23558 <flatcc_builder_offset_vector_push@@Base+0x48>
   23580:	mov	r0, #0
   23584:	pop	{r4, r5, r6, pc}
   23588:	ldr	r3, [pc, #32]	; 235b0 <flatcc_builder_offset_vector_push@@Base+0xa0>
   2358c:	ldr	r1, [pc, #32]	; 235b4 <flatcc_builder_offset_vector_push@@Base+0xa4>
   23590:	ldr	r0, [pc, #32]	; 235b8 <flatcc_builder_offset_vector_push@@Base+0xa8>
   23594:	add	r3, pc, r3
   23598:	ldr	r2, [pc, #28]	; 235bc <flatcc_builder_offset_vector_push@@Base+0xac>
   2359c:	add	r3, r3, #384	; 0x180
   235a0:	add	r1, pc, r1
   235a4:	add	r0, pc, r0
   235a8:	bl	126a0 <__assert_fail@plt>
   235ac:	pop	{r4, r5, r6, pc}
   235b0:	andeq	r7, r0, r4, lsr #25
   235b4:	andeq	r8, r0, r8, ror #7
   235b8:	andeq	r8, r0, r0, lsr #11
   235bc:	andeq	r0, r0, r6, lsr #7

000235c0 <flatcc_builder_append_offset_vector@@Base>:
   235c0:	ldr	ip, [r0, #32]
   235c4:	push	{r4, r5, r6, r7, r8, lr}
   235c8:	ldrh	r3, [ip, #14]
   235cc:	cmp	r3, #5
   235d0:	bne	23668 <flatcc_builder_append_offset_vector@@Base+0xa8>
   235d4:	mov	r6, r1
   235d8:	ldr	r1, [ip, #20]
   235dc:	adds	r1, r2, r1
   235e0:	movcs	lr, #1
   235e4:	movcc	lr, #0
   235e8:	cmn	r1, #-1073741823	; 0xc0000001
   235ec:	movls	r3, #0
   235f0:	movhi	r3, #1
   235f4:	orrs	r8, lr, r3
   235f8:	bne	23664 <flatcc_builder_append_offset_vector@@Base+0xa4>
   235fc:	str	r1, [ip, #20]
   23600:	ldr	r7, [r0, #20]
   23604:	lsl	r4, r2, #2
   23608:	ldr	r3, [r0, #24]
   2360c:	add	r1, r4, r7
   23610:	cmp	r1, r3
   23614:	mov	r5, r0
   23618:	str	r1, [r0, #20]
   2361c:	bcs	23648 <flatcc_builder_append_offset_vector@@Base+0x88>
   23620:	ldr	r3, [r5, #16]
   23624:	adds	r3, r3, r7
   23628:	beq	23640 <flatcc_builder_append_offset_vector@@Base+0x80>
   2362c:	mov	r0, r3
   23630:	mov	r2, r4
   23634:	mov	r1, r6
   23638:	bl	125a4 <memcpy@plt>
   2363c:	mov	r3, r0
   23640:	mov	r0, r3
   23644:	pop	{r4, r5, r6, r7, r8, pc}
   23648:	add	r1, r1, #1
   2364c:	mvn	r2, #3
   23650:	bl	21ec0 <test_parse@@Base+0x534>
   23654:	cmp	r0, #0
   23658:	beq	23620 <flatcc_builder_append_offset_vector@@Base+0x60>
   2365c:	mov	r3, r8
   23660:	b	23640 <flatcc_builder_append_offset_vector@@Base+0x80>
   23664:	bl	12908 <__assert_fail@plt+0x268>
   23668:	ldr	r3, [pc, #28]	; 2368c <flatcc_builder_append_offset_vector@@Base+0xcc>
   2366c:	ldr	r1, [pc, #28]	; 23690 <flatcc_builder_append_offset_vector@@Base+0xd0>
   23670:	ldr	r0, [pc, #28]	; 23694 <flatcc_builder_append_offset_vector@@Base+0xd4>
   23674:	add	r3, pc, r3
   23678:	mov	r2, #948	; 0x3b4
   2367c:	add	r3, r3, #420	; 0x1a4
   23680:	add	r1, pc, r1
   23684:	add	r0, pc, r0
   23688:	bl	126a0 <__assert_fail@plt>
   2368c:	andeq	r7, r0, r4, asr #23
   23690:	andeq	r8, r0, r8, lsl #6
   23694:	andeq	r8, r0, r0, asr #9

00023698 <flatcc_builder_extend_string@@Base>:
   23698:	ldr	r2, [r0, #32]
   2369c:	push	{r4, r5, r6, lr}
   236a0:	ldrh	r3, [r2, #14]
   236a4:	cmp	r3, #6
   236a8:	bne	23704 <flatcc_builder_extend_string@@Base+0x6c>
   236ac:	ldr	r3, [r2, #20]
   236b0:	adds	r3, r1, r3
   236b4:	bcs	23700 <flatcc_builder_extend_string@@Base+0x68>
   236b8:	str	r3, [r2, #20]
   236bc:	ldr	r5, [r0, #20]
   236c0:	ldr	r3, [r0, #24]
   236c4:	add	r1, r1, r5
   236c8:	cmp	r1, r3
   236cc:	mov	r4, r0
   236d0:	str	r1, [r0, #20]
   236d4:	bcs	236e4 <flatcc_builder_extend_string@@Base+0x4c>
   236d8:	ldr	r0, [r4, #16]
   236dc:	add	r0, r0, r5
   236e0:	pop	{r4, r5, r6, pc}
   236e4:	add	r1, r1, #1
   236e8:	mvn	r2, #3
   236ec:	bl	21ec0 <test_parse@@Base+0x534>
   236f0:	cmp	r0, #0
   236f4:	beq	236d8 <flatcc_builder_extend_string@@Base+0x40>
   236f8:	mov	r0, #0
   236fc:	pop	{r4, r5, r6, pc}
   23700:	bl	12908 <__assert_fail@plt+0x268>
   23704:	ldr	r3, [pc, #28]	; 23728 <flatcc_builder_extend_string@@Base+0x90>
   23708:	ldr	r1, [pc, #28]	; 2372c <flatcc_builder_extend_string@@Base+0x94>
   2370c:	ldr	r0, [pc, #28]	; 23730 <flatcc_builder_extend_string@@Base+0x98>
   23710:	add	r3, pc, r3
   23714:	ldr	r2, [pc, #24]	; 23734 <flatcc_builder_extend_string@@Base+0x9c>
   23718:	add	r3, r3, #456	; 0x1c8
   2371c:	add	r1, pc, r1
   23720:	add	r0, pc, r0
   23724:	bl	126a0 <__assert_fail@plt>
   23728:	andeq	r7, r0, r8, lsr #22
   2372c:	andeq	r8, r0, ip, ror #4
   23730:	andeq	r8, r0, r8, asr r4
   23734:			; <UNDEFINED> instruction: 0x000003bd

00023738 <flatcc_builder_append_string@@Base>:
   23738:	push	{r4, r5, r6, r7, r8, lr}
   2373c:	mov	r7, r1
   23740:	ldr	r1, [r0, #32]
   23744:	ldrh	r3, [r1, #14]
   23748:	cmp	r3, #6
   2374c:	bne	237c8 <flatcc_builder_append_string@@Base+0x90>
   23750:	ldr	r3, [r1, #20]
   23754:	mov	r5, r2
   23758:	adds	r3, r2, r3
   2375c:	bcs	237c4 <flatcc_builder_append_string@@Base+0x8c>
   23760:	str	r3, [r1, #20]
   23764:	ldr	r6, [r0, #20]
   23768:	ldr	r3, [r0, #24]
   2376c:	add	r1, r2, r6
   23770:	cmp	r1, r3
   23774:	mov	r4, r0
   23778:	str	r1, [r0, #20]
   2377c:	bcs	237a8 <flatcc_builder_append_string@@Base+0x70>
   23780:	ldr	r3, [r4, #16]
   23784:	adds	r3, r3, r6
   23788:	beq	237a0 <flatcc_builder_append_string@@Base+0x68>
   2378c:	mov	r0, r3
   23790:	mov	r2, r5
   23794:	mov	r1, r7
   23798:	bl	125a4 <memcpy@plt>
   2379c:	mov	r3, r0
   237a0:	mov	r0, r3
   237a4:	pop	{r4, r5, r6, r7, r8, pc}
   237a8:	add	r1, r1, #1
   237ac:	mvn	r2, #3
   237b0:	bl	21ec0 <test_parse@@Base+0x534>
   237b4:	cmp	r0, #0
   237b8:	beq	23780 <flatcc_builder_append_string@@Base+0x48>
   237bc:	mov	r3, #0
   237c0:	b	237a0 <flatcc_builder_append_string@@Base+0x68>
   237c4:	bl	12908 <__assert_fail@plt+0x268>
   237c8:	ldr	r3, [pc, #28]	; 237ec <flatcc_builder_append_string@@Base+0xb4>
   237cc:	ldr	r1, [pc, #28]	; 237f0 <flatcc_builder_append_string@@Base+0xb8>
   237d0:	ldr	r0, [pc, #28]	; 237f4 <flatcc_builder_append_string@@Base+0xbc>
   237d4:	add	r3, pc, r3
   237d8:	ldr	r2, [pc, #24]	; 237f8 <flatcc_builder_append_string@@Base+0xc0>
   237dc:	add	r3, r3, #488	; 0x1e8
   237e0:	add	r1, pc, r1
   237e4:	add	r0, pc, r0
   237e8:	bl	126a0 <__assert_fail@plt>
   237ec:	andeq	r7, r0, r4, ror #20
   237f0:	andeq	r8, r0, r8, lsr #3
   237f4:	muleq	r0, r4, r3
   237f8:	andeq	r0, r0, r6, asr #7

000237fc <flatcc_builder_append_string_str@@Base>:
   237fc:	push	{r4, r5, r6, lr}
   23800:	mov	r5, r0
   23804:	mov	r0, r1
   23808:	mov	r4, r1
   2380c:	bl	12628 <strlen@plt>
   23810:	mov	r1, r4
   23814:	mov	r2, r0
   23818:	mov	r0, r5
   2381c:	pop	{r4, r5, r6, lr}
   23820:	b	23738 <flatcc_builder_append_string@@Base>

00023824 <flatcc_builder_append_string_strn@@Base>:
   23824:	push	{r4, r5, r6, lr}
   23828:	mov	r4, r1
   2382c:	mov	r6, r0
   23830:	mov	r1, #0
   23834:	mov	r0, r4
   23838:	mov	r5, r2
   2383c:	bl	12664 <memchr@plt>
   23840:	mov	r1, r4
   23844:	cmp	r0, #0
   23848:	subne	r5, r0, r4
   2384c:	mov	r2, r5
   23850:	mov	r0, r6
   23854:	pop	{r4, r5, r6, lr}
   23858:	b	23738 <flatcc_builder_append_string@@Base>

0002385c <flatcc_builder_truncate_vector@@Base>:
   2385c:	ldr	r3, [r0, #32]
   23860:	push	{r4, lr}
   23864:	ldrh	r2, [r3, #14]
   23868:	cmp	r2, #4
   2386c:	bne	238b0 <flatcc_builder_truncate_vector@@Base+0x54>
   23870:	ldr	ip, [r3, #20]
   23874:	cmp	ip, r1
   23878:	bcc	238d4 <flatcc_builder_truncate_vector@@Base+0x78>
   2387c:	ldr	r2, [r3, #16]
   23880:	sub	ip, ip, r1
   23884:	str	ip, [r3, #20]
   23888:	mul	r2, r2, r1
   2388c:	ldr	r3, [r0, #20]
   23890:	ldr	r1, [r0, #16]
   23894:	sub	r3, r3, r2
   23898:	str	r3, [r0, #20]
   2389c:	add	r0, r1, r3
   238a0:	mov	r1, #0
   238a4:	bl	1264c <memset@plt>
   238a8:	mov	r0, #0
   238ac:	pop	{r4, pc}
   238b0:	ldr	r3, [pc, #64]	; 238f8 <flatcc_builder_truncate_vector@@Base+0x9c>
   238b4:	ldr	r1, [pc, #64]	; 238fc <flatcc_builder_truncate_vector@@Base+0xa0>
   238b8:	ldr	r0, [pc, #64]	; 23900 <flatcc_builder_truncate_vector@@Base+0xa4>
   238bc:	add	r3, pc, r3
   238c0:	ldr	r2, [pc, #60]	; 23904 <flatcc_builder_truncate_vector@@Base+0xa8>
   238c4:	add	r3, r3, #520	; 0x208
   238c8:	add	r1, pc, r1
   238cc:	add	r0, pc, r0
   238d0:	bl	126a0 <__assert_fail@plt>
   238d4:	ldr	r3, [pc, #44]	; 23908 <flatcc_builder_truncate_vector@@Base+0xac>
   238d8:	ldr	r1, [pc, #44]	; 2390c <flatcc_builder_truncate_vector@@Base+0xb0>
   238dc:	ldr	r0, [pc, #44]	; 23910 <flatcc_builder_truncate_vector@@Base+0xb4>
   238e0:	add	r3, pc, r3
   238e4:	ldr	r2, [pc, #40]	; 23914 <flatcc_builder_truncate_vector@@Base+0xb8>
   238e8:	add	r3, r3, #520	; 0x208
   238ec:	add	r1, pc, r1
   238f0:	add	r0, pc, r0
   238f4:	bl	126a0 <__assert_fail@plt>
   238f8:	andeq	r7, r0, ip, ror r9
   238fc:	andeq	r8, r0, r0, asr #1
   23900:	andeq	r8, r0, ip, lsl #4
   23904:	ldrdeq	r0, [r0], -r9
   23908:	andeq	r7, r0, r8, asr r9
   2390c:	muleq	r0, ip, r0
   23910:			; <UNDEFINED> instruction: 0x000082b4
   23914:	ldrdeq	r0, [r0], -sl

00023918 <flatcc_builder_truncate_offset_vector@@Base>:
   23918:	ldr	r3, [r0, #32]
   2391c:	push	{r4, lr}
   23920:	ldrh	r2, [r3, #14]
   23924:	cmp	r2, #5
   23928:	bne	2396c <flatcc_builder_truncate_offset_vector@@Base+0x54>
   2392c:	ldr	ip, [r3, #20]
   23930:	cmp	ip, r1
   23934:	bcc	23990 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   23938:	ldr	r2, [r3, #16]
   2393c:	sub	ip, ip, r1
   23940:	str	ip, [r3, #20]
   23944:	mul	r2, r2, r1
   23948:	ldr	r3, [r0, #20]
   2394c:	ldr	r1, [r0, #16]
   23950:	sub	r3, r3, r2
   23954:	str	r3, [r0, #20]
   23958:	add	r0, r1, r3
   2395c:	mov	r1, #0
   23960:	bl	1264c <memset@plt>
   23964:	mov	r0, #0
   23968:	pop	{r4, pc}
   2396c:	ldr	r3, [pc, #64]	; 239b4 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   23970:	ldr	r1, [pc, #64]	; 239b8 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   23974:	ldr	r0, [pc, #64]	; 239bc <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   23978:	add	r3, pc, r3
   2397c:	ldr	r2, [pc, #60]	; 239c0 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   23980:	add	r3, r3, #552	; 0x228
   23984:	add	r1, pc, r1
   23988:	add	r0, pc, r0
   2398c:	bl	126a0 <__assert_fail@plt>
   23990:	ldr	r3, [pc, #44]	; 239c4 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   23994:	ldr	r1, [pc, #44]	; 239c8 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   23998:	ldr	r0, [pc, #44]	; 239cc <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   2399c:	add	r3, pc, r3
   239a0:	ldr	r2, [pc, #40]	; 239d0 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   239a4:	add	r3, r3, #552	; 0x228
   239a8:	add	r1, pc, r1
   239ac:	add	r0, pc, r0
   239b0:	bl	126a0 <__assert_fail@plt>
   239b4:	andeq	r7, r0, r0, asr #17
   239b8:	andeq	r8, r0, r4
   239bc:			; <UNDEFINED> instruction: 0x000081bc
   239c0:	andeq	r0, r0, r2, ror #7
   239c4:	muleq	r0, ip, r8
   239c8:	andeq	r7, r0, r0, ror #31
   239cc:	andeq	r8, r0, ip, lsl r2
   239d0:	andeq	r0, r0, r3, ror #7

000239d4 <flatcc_builder_truncate_string@@Base>:
   239d4:	ldr	r2, [r0, #32]
   239d8:	push	{r4, lr}
   239dc:	ldrh	r3, [r2, #14]
   239e0:	cmp	r3, #6
   239e4:	bne	23a24 <flatcc_builder_truncate_string@@Base+0x50>
   239e8:	ldr	r3, [r2, #20]
   239ec:	cmp	r3, r1
   239f0:	bcc	23a48 <flatcc_builder_truncate_string@@Base+0x74>
   239f4:	sub	r3, r3, r1
   239f8:	str	r3, [r2, #20]
   239fc:	ldr	r3, [r0, #20]
   23a00:	ldr	r2, [r0, #16]
   23a04:	sub	r3, r3, r1
   23a08:	str	r3, [r0, #20]
   23a0c:	add	r0, r2, r3
   23a10:	mov	r2, r1
   23a14:	mov	r1, #0
   23a18:	bl	1264c <memset@plt>
   23a1c:	mov	r0, #0
   23a20:	pop	{r4, pc}
   23a24:	ldr	r3, [pc, #64]	; 23a6c <flatcc_builder_truncate_string@@Base+0x98>
   23a28:	ldr	r1, [pc, #64]	; 23a70 <flatcc_builder_truncate_string@@Base+0x9c>
   23a2c:	ldr	r0, [pc, #64]	; 23a74 <flatcc_builder_truncate_string@@Base+0xa0>
   23a30:	add	r3, pc, r3
   23a34:	ldr	r2, [pc, #60]	; 23a78 <flatcc_builder_truncate_string@@Base+0xa4>
   23a38:	add	r3, r3, #592	; 0x250
   23a3c:	add	r1, pc, r1
   23a40:	add	r0, pc, r0
   23a44:	bl	126a0 <__assert_fail@plt>
   23a48:	ldr	r3, [pc, #44]	; 23a7c <flatcc_builder_truncate_string@@Base+0xa8>
   23a4c:	ldr	r1, [pc, #44]	; 23a80 <flatcc_builder_truncate_string@@Base+0xac>
   23a50:	ldr	r0, [pc, #44]	; 23a84 <flatcc_builder_truncate_string@@Base+0xb0>
   23a54:	add	r3, pc, r3
   23a58:	mov	r2, #1004	; 0x3ec
   23a5c:	add	r3, r3, #592	; 0x250
   23a60:	add	r1, pc, r1
   23a64:	add	r0, pc, r0
   23a68:	bl	126a0 <__assert_fail@plt>
   23a6c:	andeq	r7, r0, r8, lsl #16
   23a70:	andeq	r7, r0, ip, asr #30
   23a74:	andeq	r8, r0, r8, lsr r1
   23a78:	andeq	r0, r0, fp, ror #7
   23a7c:	andeq	r7, r0, r4, ror #15
   23a80:	andeq	r7, r0, r8, lsr #30
   23a84:	andeq	r8, r0, r0, lsr #3

00023a88 <flatcc_builder_start_vector@@Base>:
   23a88:	cmp	r2, #4
   23a8c:	push	{r4, r5, r6, lr}
   23a90:	mov	r6, r1
   23a94:	movcs	r1, r2
   23a98:	movcc	r1, #4
   23a9c:	mov	r5, r3
   23aa0:	mov	r4, r0
   23aa4:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   23aa8:	cmp	r0, #0
   23aac:	bne	23af8 <flatcc_builder_start_vector@@Base+0x70>
   23ab0:	ldr	r2, [r4, #32]
   23ab4:	mov	lr, #4
   23ab8:	str	r6, [r2, #16]
   23abc:	str	r0, [r2, #20]
   23ac0:	str	r5, [r2, #24]
   23ac4:	ldr	ip, [r4, #28]
   23ac8:	ldr	r3, [r4, #64]	; 0x40
   23acc:	ldr	r1, [r4, #60]	; 0x3c
   23ad0:	sub	r3, r3, ip
   23ad4:	cmn	r3, #4
   23ad8:	mvnhi	r3, #3
   23adc:	strh	lr, [r2, #14]
   23ae0:	add	r1, r1, ip
   23ae4:	str	r3, [r4, #24]
   23ae8:	mvn	r3, #3
   23aec:	str	r1, [r4, #16]
   23af0:	str	r3, [r2, #4]
   23af4:	pop	{r4, r5, r6, pc}
   23af8:	mvn	r0, #0
   23afc:	pop	{r4, r5, r6, pc}

00023b00 <flatcc_builder_start_offset_vector@@Base>:
   23b00:	push	{r4, lr}
   23b04:	mov	r1, #4
   23b08:	mov	r4, r0
   23b0c:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   23b10:	cmp	r0, #0
   23b14:	bne	23b60 <flatcc_builder_start_offset_vector@@Base+0x60>
   23b18:	ldr	r3, [r4, #32]
   23b1c:	mov	r2, #4
   23b20:	mov	lr, #5
   23b24:	str	r0, [r3, #20]
   23b28:	str	r2, [r3, #16]
   23b2c:	ldr	ip, [r4, #28]
   23b30:	ldr	r2, [r4, #64]	; 0x40
   23b34:	ldr	r1, [r4, #60]	; 0x3c
   23b38:	sub	r2, r2, ip
   23b3c:	cmn	r2, #4
   23b40:	mvnhi	r2, #3
   23b44:	strh	lr, [r3, #14]
   23b48:	add	r1, r1, ip
   23b4c:	str	r2, [r4, #24]
   23b50:	mvn	r2, #3
   23b54:	str	r1, [r4, #16]
   23b58:	str	r2, [r3, #4]
   23b5c:	pop	{r4, pc}
   23b60:	mvn	r0, #0
   23b64:	pop	{r4, pc}

00023b68 <flatcc_builder_start_string@@Base>:
   23b68:	push	{r4, lr}
   23b6c:	mov	r1, #1
   23b70:	mov	r4, r0
   23b74:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   23b78:	cmp	r0, #0
   23b7c:	bne	23bc8 <flatcc_builder_start_string@@Base+0x60>
   23b80:	ldr	r3, [r4, #32]
   23b84:	mov	r2, #1
   23b88:	mov	lr, #6
   23b8c:	str	r0, [r3, #20]
   23b90:	str	r2, [r3, #16]
   23b94:	ldr	ip, [r4, #28]
   23b98:	ldr	r2, [r4, #64]	; 0x40
   23b9c:	ldr	r1, [r4, #60]	; 0x3c
   23ba0:	sub	r2, r2, ip
   23ba4:	cmn	r2, #4
   23ba8:	mvnhi	r2, #3
   23bac:	strh	lr, [r3, #14]
   23bb0:	add	r1, r1, ip
   23bb4:	str	r2, [r4, #24]
   23bb8:	mvn	r2, #3
   23bbc:	str	r1, [r4, #16]
   23bc0:	str	r2, [r3, #4]
   23bc4:	pop	{r4, pc}
   23bc8:	mvn	r0, #0
   23bcc:	pop	{r4, pc}

00023bd0 <flatcc_builder_reserve_table@@Base>:
   23bd0:	cmp	r1, #0
   23bd4:	push	{r4, r5, r6, r7, lr}
   23bd8:	sub	sp, sp, #12
   23bdc:	blt	23cb4 <flatcc_builder_reserve_table@@Base+0xe4>
   23be0:	ldr	r2, [r0, #32]
   23be4:	add	r1, r1, #2
   23be8:	mov	r5, r0
   23bec:	ldrh	r6, [r2, #28]
   23bf0:	ldr	r3, [r2, #16]
   23bf4:	ldr	r0, [r0, #56]	; 0x38
   23bf8:	lsl	r4, r1, #1
   23bfc:	add	r6, r3, r6, lsl #1
   23c00:	add	r2, r6, r4
   23c04:	cmp	r2, r0
   23c08:	bhi	23c64 <flatcc_builder_reserve_table@@Base+0x94>
   23c0c:	ldr	r3, [r5, #52]	; 0x34
   23c10:	adds	r3, r3, r6
   23c14:	streq	r3, [r5, #4]
   23c18:	mvneq	r0, #0
   23c1c:	beq	23c5c <flatcc_builder_reserve_table@@Base+0x8c>
   23c20:	ldr	r2, [r5, #32]
   23c24:	add	r3, r3, #4
   23c28:	str	r3, [r5, #4]
   23c2c:	ldr	r6, [r2, #20]
   23c30:	ldr	r3, [r5, #80]	; 0x50
   23c34:	add	r2, r4, r6
   23c38:	sub	r2, r2, #3
   23c3c:	cmp	r2, r3
   23c40:	bhi	23c8c <flatcc_builder_reserve_table@@Base+0xbc>
   23c44:	ldr	r3, [r5, #76]	; 0x4c
   23c48:	add	r3, r3, r6
   23c4c:	cmp	r3, #0
   23c50:	movne	r0, #0
   23c54:	mvneq	r0, #0
   23c58:	str	r3, [r5]
   23c5c:	add	sp, sp, #12
   23c60:	pop	{r4, r5, r6, r7, pc}
   23c64:	mov	r3, #0
   23c68:	ldr	r0, [r5, #40]	; 0x28
   23c6c:	add	r1, r5, #52	; 0x34
   23c70:	str	r3, [sp]
   23c74:	mov	r3, #1
   23c78:	ldr	r7, [r5, #48]	; 0x30
   23c7c:	blx	r7
   23c80:	cmp	r0, #0
   23c84:	beq	23c0c <flatcc_builder_reserve_table@@Base+0x3c>
   23c88:	bl	12868 <__assert_fail@plt+0x1c8>
   23c8c:	mov	r3, #3
   23c90:	ldr	r0, [r5, #40]	; 0x28
   23c94:	add	r1, r5, #76	; 0x4c
   23c98:	str	r3, [sp]
   23c9c:	mov	r3, #0
   23ca0:	ldr	r4, [r5, #48]	; 0x30
   23ca4:	blx	r4
   23ca8:	cmp	r0, #0
   23cac:	beq	23c44 <flatcc_builder_reserve_table@@Base+0x74>
   23cb0:	b	23c88 <flatcc_builder_reserve_table@@Base+0xb8>
   23cb4:	ldr	r3, [pc, #28]	; 23cd8 <flatcc_builder_reserve_table@@Base+0x108>
   23cb8:	ldr	r1, [pc, #28]	; 23cdc <flatcc_builder_reserve_table@@Base+0x10c>
   23cbc:	ldr	r0, [pc, #28]	; 23ce0 <flatcc_builder_reserve_table@@Base+0x110>
   23cc0:	add	r3, pc, r3
   23cc4:	ldr	r2, [pc, #24]	; 23ce4 <flatcc_builder_reserve_table@@Base+0x114>
   23cc8:	add	r3, r3, #624	; 0x270
   23ccc:	add	r1, pc, r1
   23cd0:	add	r0, pc, r0
   23cd4:	bl	126a0 <__assert_fail@plt>
   23cd8:	andeq	r7, r0, r8, ror r5
   23cdc:			; <UNDEFINED> instruction: 0x00007cbc
   23ce0:	andeq	r7, r0, r8, asr pc
   23ce4:	andeq	r0, r0, r9, lsr #8

00023ce8 <flatcc_builder_start_table@@Base>:
   23ce8:	push	{r4, r5, r6, r7, r8, lr}
   23cec:	mov	r5, r1
   23cf0:	sub	sp, sp, #8
   23cf4:	mov	r1, #4
   23cf8:	mov	r4, r0
   23cfc:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   23d00:	subs	r7, r0, #0
   23d04:	bne	23e3c <flatcc_builder_start_table@@Base+0x154>
   23d08:	ldr	r3, [r4, #52]	; 0x34
   23d0c:	ldr	r6, [r4, #4]
   23d10:	ldr	r0, [r4, #32]
   23d14:	sub	r6, r6, r3
   23d18:	add	r5, r5, #2
   23d1c:	str	r6, [r0, #16]
   23d20:	ldr	r1, [r4, #76]	; 0x4c
   23d24:	ldr	r2, [r4]
   23d28:	lsl	r5, r5, #1
   23d2c:	sub	r2, r2, r1
   23d30:	str	r2, [r0, #20]
   23d34:	ldr	r2, [r4, #12]
   23d38:	ldr	lr, [pc, #268]	; 23e4c <flatcc_builder_start_table@@Base+0x164>
   23d3c:	str	r2, [r0, #24]
   23d40:	ldrh	r2, [r4, #8]
   23d44:	mov	r1, #3
   23d48:	strh	r2, [r0, #28]
   23d4c:	add	r6, r6, r2, lsl #1
   23d50:	ldr	ip, [r4, #56]	; 0x38
   23d54:	add	r2, r6, r5
   23d58:	cmp	r2, ip
   23d5c:	strh	r7, [r4, #8]
   23d60:	str	lr, [r4, #12]
   23d64:	strh	r1, [r0, #14]
   23d68:	bhi	23dec <flatcc_builder_start_table@@Base+0x104>
   23d6c:	adds	r6, r3, r6
   23d70:	streq	r6, [r4, #4]
   23d74:	beq	23e3c <flatcc_builder_start_table@@Base+0x154>
   23d78:	ldr	r3, [r4, #32]
   23d7c:	add	r6, r6, #4
   23d80:	str	r6, [r4, #4]
   23d84:	ldr	r6, [r3, #20]
   23d88:	sub	r2, r5, #3
   23d8c:	ldr	r3, [r4, #80]	; 0x50
   23d90:	add	r2, r2, r6
   23d94:	cmp	r2, r3
   23d98:	bhi	23e14 <flatcc_builder_start_table@@Base+0x12c>
   23d9c:	ldr	r3, [r4, #76]	; 0x4c
   23da0:	add	r3, r3, r6
   23da4:	cmp	r3, #0
   23da8:	str	r3, [r4]
   23dac:	beq	23e3c <flatcc_builder_start_table@@Base+0x154>
   23db0:	ldr	r0, [r4, #28]
   23db4:	ldr	r3, [r4, #64]	; 0x40
   23db8:	ldr	r2, [pc, #144]	; 23e50 <flatcc_builder_start_table@@Base+0x168>
   23dbc:	sub	r3, r3, r0
   23dc0:	ldr	r1, [r4, #60]	; 0x3c
   23dc4:	ldr	ip, [r4, #32]
   23dc8:	cmp	r3, r2
   23dcc:	add	r1, r1, r0
   23dd0:	movcs	r3, r2
   23dd4:	str	r1, [r4, #16]
   23dd8:	str	r3, [r4, #24]
   23ddc:	mov	r0, r7
   23de0:	str	r2, [ip, #4]
   23de4:	add	sp, sp, #8
   23de8:	pop	{r4, r5, r6, r7, r8, pc}
   23dec:	ldr	r0, [r4, #40]	; 0x28
   23df0:	mov	r3, #1
   23df4:	str	r7, [sp]
   23df8:	add	r1, r4, #52	; 0x34
   23dfc:	ldr	r8, [r4, #48]	; 0x30
   23e00:	blx	r8
   23e04:	cmp	r0, #0
   23e08:	bne	23e38 <flatcc_builder_start_table@@Base+0x150>
   23e0c:	ldr	r3, [r4, #52]	; 0x34
   23e10:	b	23d6c <flatcc_builder_start_table@@Base+0x84>
   23e14:	mov	r3, #3
   23e18:	ldr	r0, [r4, #40]	; 0x28
   23e1c:	add	r1, r4, #76	; 0x4c
   23e20:	str	r3, [sp]
   23e24:	mov	r3, #0
   23e28:	ldr	r5, [r4, #48]	; 0x30
   23e2c:	blx	r5
   23e30:	cmp	r0, #0
   23e34:	beq	23d9c <flatcc_builder_start_table@@Base+0xb4>
   23e38:	bl	12868 <__assert_fail@plt+0x1c8>
   23e3c:	mvn	r7, #0
   23e40:	mov	r0, r7
   23e44:	add	sp, sp, #8
   23e48:	pop	{r4, r5, r6, r7, r8, pc}
   23e4c:	svccs	0x00693b52
   23e50:	strdeq	pc, [r0], -ip

00023e54 <flatcc_builder_create_vtable@@Base>:
   23e54:	push	{r4, r5, r6, lr}
   23e58:	sub	sp, sp, #80	; 0x50
   23e5c:	subs	r3, r2, #0
   23e60:	mov	r2, #0
   23e64:	mov	r4, r0
   23e68:	str	r2, [sp, #8]
   23e6c:	str	r2, [sp, #12]
   23e70:	beq	23ee8 <flatcc_builder_create_vtable@@Base+0x94>
   23e74:	ldr	r0, [r0, #152]	; 0x98
   23e78:	mov	r2, #1
   23e7c:	cmp	r0, #0
   23e80:	str	r1, [sp, #16]
   23e84:	str	r3, [sp, #8]
   23e88:	str	r3, [sp, #20]
   23e8c:	str	r2, [sp, #12]
   23e90:	mov	r1, r3
   23e94:	beq	23f04 <flatcc_builder_create_vtable@@Base+0xb0>
   23e98:	ldr	r2, [r4, #136]	; 0x88
   23e9c:	sub	r5, r2, r3
   23ea0:	cmp	r2, r5
   23ea4:	ble	23f00 <flatcc_builder_create_vtable@@Base+0xac>
   23ea8:	ldr	r0, [r4, #36]	; 0x24
   23eac:	ldr	r2, [sp, #12]
   23eb0:	str	r3, [sp]
   23eb4:	add	r1, sp, #16
   23eb8:	ldr	r6, [r4, #44]	; 0x2c
   23ebc:	mov	r3, r5
   23ec0:	blx	r6
   23ec4:	cmp	r0, #0
   23ec8:	bne	23f78 <flatcc_builder_create_vtable@@Base+0x124>
   23ecc:	cmp	r5, #0
   23ed0:	str	r5, [r4, #136]	; 0x88
   23ed4:	beq	23edc <flatcc_builder_create_vtable@@Base+0x88>
   23ed8:	add	r5, r5, #1
   23edc:	mov	r0, r5
   23ee0:	add	sp, sp, #80	; 0x50
   23ee4:	pop	{r4, r5, r6, pc}
   23ee8:	ldr	r3, [r0, #152]	; 0x98
   23eec:	cmp	r3, #0
   23ef0:	bne	23f00 <flatcc_builder_create_vtable@@Base+0xac>
   23ef4:	ldr	r3, [r0, #180]	; 0xb4
   23ef8:	cmp	r3, #0
   23efc:	beq	23f6c <flatcc_builder_create_vtable@@Base+0x118>
   23f00:	bl	128d0 <__assert_fail@plt+0x230>
   23f04:	ldr	r2, [r4, #180]	; 0xb4
   23f08:	cmp	r2, #0
   23f0c:	bne	23e98 <flatcc_builder_create_vtable@@Base+0x44>
   23f10:	ldr	r5, [r4, #140]	; 0x8c
   23f14:	add	r3, r5, r3
   23f18:	cmp	r5, r3
   23f1c:	str	r3, [r4, #140]	; 0x8c
   23f20:	bgt	23f9c <flatcc_builder_create_vtable@@Base+0x148>
   23f24:	ldr	r0, [r4, #36]	; 0x24
   23f28:	ldr	r2, [sp, #12]
   23f2c:	str	r1, [sp]
   23f30:	mov	r3, r5
   23f34:	ldr	r4, [r4, #44]	; 0x2c
   23f38:	add	r1, sp, #16
   23f3c:	blx	r4
   23f40:	cmp	r0, #0
   23f44:	beq	23ed8 <flatcc_builder_create_vtable@@Base+0x84>
   23f48:	ldr	r3, [pc, #80]	; 23fa0 <flatcc_builder_create_vtable@@Base+0x14c>
   23f4c:	ldr	r1, [pc, #80]	; 23fa4 <flatcc_builder_create_vtable@@Base+0x150>
   23f50:	ldr	r0, [pc, #80]	; 23fa8 <flatcc_builder_create_vtable@@Base+0x154>
   23f54:	add	r3, pc, r3
   23f58:	ldr	r2, [pc, #76]	; 23fac <flatcc_builder_create_vtable@@Base+0x158>
   23f5c:	add	r3, r3, #16
   23f60:	add	r1, pc, r1
   23f64:	add	r0, pc, r0
   23f68:	bl	126a0 <__assert_fail@plt>
   23f6c:	ldr	r5, [r4, #140]	; 0x8c
   23f70:	mov	r1, r3
   23f74:	b	23f24 <flatcc_builder_create_vtable@@Base+0xd0>
   23f78:	ldr	r3, [pc, #48]	; 23fb0 <flatcc_builder_create_vtable@@Base+0x15c>
   23f7c:	ldr	r1, [pc, #48]	; 23fb4 <flatcc_builder_create_vtable@@Base+0x160>
   23f80:	ldr	r0, [pc, #48]	; 23fb8 <flatcc_builder_create_vtable@@Base+0x164>
   23f84:	add	r3, pc, r3
   23f88:	ldr	r2, [pc, #44]	; 23fbc <flatcc_builder_create_vtable@@Base+0x168>
   23f8c:	add	r3, r3, #28
   23f90:	add	r1, pc, r1
   23f94:	add	r0, pc, r0
   23f98:	bl	126a0 <__assert_fail@plt>
   23f9c:	bl	12898 <__assert_fail@plt+0x1f8>
   23fa0:	andeq	r7, r0, r4, ror #5
   23fa4:	andeq	r7, r0, r8, lsr #20
   23fa8:	andeq	r7, r0, ip, lsr #21
   23fac:	andeq	r0, r0, r5, lsr #5
   23fb0:			; <UNDEFINED> instruction: 0x000072b4
   23fb4:	strdeq	r7, [r0], -r8
   23fb8:	andeq	r7, r0, ip, ror sl
   23fbc:	andeq	r0, r0, fp, lsl #5

00023fc0 <flatcc_builder_create_cached_vtable@@Base>:
   23fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fc4:	sub	sp, sp, #28
   23fc8:	ldr	r4, [r0, #116]	; 0x74
   23fcc:	mov	sl, r3
   23fd0:	cmp	r4, #0
   23fd4:	mov	r8, r0
   23fd8:	str	r1, [sp, #8]
   23fdc:	mov	r7, r2
   23fe0:	rsbne	r3, r4, #32
   23fe4:	beq	2413c <flatcc_builder_create_cached_vtable@@Base+0x17c>
   23fe8:	lsr	sl, sl, r3
   23fec:	ldr	r3, [r8, #92]	; 0x5c
   23ff0:	adds	r2, r3, sl, lsl #2
   23ff4:	str	r3, [sp, #16]
   23ff8:	str	r2, [sp, #20]
   23ffc:	beq	24130 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24000:	ldr	r5, [r3, sl, lsl #2]
   24004:	cmp	r5, #0
   24008:	beq	2422c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   2400c:	mov	r3, #0
   24010:	ldr	fp, [r8, #100]	; 0x64
   24014:	ldr	r6, [r8, #68]	; 0x44
   24018:	mov	r9, r2
   2401c:	str	r3, [sp, #12]
   24020:	b	24034 <flatcc_builder_create_cached_vtable@@Base+0x74>
   24024:	ldr	r5, [r4, #12]
   24028:	add	r9, r4, #12
   2402c:	cmp	r5, #0
   24030:	beq	24084 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   24034:	add	r4, fp, r5
   24038:	ldr	r2, [r4, #8]
   2403c:	add	r1, r6, r2
   24040:	ldrh	r2, [r6, r2]
   24044:	cmp	r2, r7
   24048:	bne	24024 <flatcc_builder_create_cached_vtable@@Base+0x64>
   2404c:	mov	r2, r7
   24050:	ldr	r0, [sp, #8]
   24054:	bl	125bc <memcmp@plt>
   24058:	cmp	r0, #0
   2405c:	bne	24024 <flatcc_builder_create_cached_vtable@@Base+0x64>
   24060:	ldr	r1, [r4, #4]
   24064:	ldr	r2, [r8, #152]	; 0x98
   24068:	cmp	r1, r2
   2406c:	beq	24100 <flatcc_builder_create_cached_vtable@@Base+0x140>
   24070:	ldr	r5, [r4, #12]
   24074:	add	r9, r4, #12
   24078:	cmp	r5, #0
   2407c:	str	r4, [sp, #12]
   24080:	bne	24034 <flatcc_builder_create_cached_vtable@@Base+0x74>
   24084:	ldr	r4, [r8, #124]	; 0x7c
   24088:	ldr	r3, [r8, #104]	; 0x68
   2408c:	add	r2, r4, #16
   24090:	cmp	r2, r3
   24094:	bhi	24204 <flatcc_builder_create_cached_vtable@@Base+0x244>
   24098:	ldr	r5, [r8, #100]	; 0x64
   2409c:	adds	r6, r5, r4
   240a0:	beq	24130 <flatcc_builder_create_cached_vtable@@Base+0x170>
   240a4:	ldr	r3, [r8, #124]	; 0x7c
   240a8:	ldr	r0, [sp, #16]
   240ac:	ldr	r2, [r8, #152]	; 0x98
   240b0:	add	r1, r3, #16
   240b4:	str	r1, [r8, #124]	; 0x7c
   240b8:	str	r2, [r6, #4]
   240bc:	ldr	r1, [r0, sl, lsl #2]
   240c0:	mov	r2, r7
   240c4:	str	r1, [r6, #12]
   240c8:	str	r3, [r0, sl, lsl #2]
   240cc:	ldr	r1, [sp, #8]
   240d0:	mov	r0, r8
   240d4:	bl	23e54 <flatcc_builder_create_vtable@@Base>
   240d8:	cmp	r0, #0
   240dc:	str	r0, [r5, r4]
   240e0:	beq	24130 <flatcc_builder_create_cached_vtable@@Base+0x170>
   240e4:	ldr	r3, [sp, #12]
   240e8:	cmp	r3, #0
   240ec:	beq	24234 <flatcc_builder_create_cached_vtable@@Base+0x274>
   240f0:	ldr	r3, [r3, #8]
   240f4:	str	r3, [r6, #8]
   240f8:	add	sp, sp, #28
   240fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24100:	ldr	r3, [sp, #20]
   24104:	cmp	r3, r9
   24108:	beq	24124 <flatcc_builder_create_cached_vtable@@Base+0x164>
   2410c:	ldr	r2, [sp, #16]
   24110:	ldr	r3, [r4, #12]
   24114:	str	r3, [r9]
   24118:	ldr	r3, [r2, sl, lsl #2]
   2411c:	str	r3, [r4, #12]
   24120:	str	r5, [r2, sl, lsl #2]
   24124:	ldr	r0, [r4]
   24128:	add	sp, sp, #28
   2412c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24130:	mov	r0, #0
   24134:	add	sp, sp, #28
   24138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2413c:	ldr	r3, [r0, #124]	; 0x7c
   24140:	add	r5, r0, #92	; 0x5c
   24144:	cmp	r3, #0
   24148:	bne	242cc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   2414c:	ldr	r3, [r0, #104]	; 0x68
   24150:	cmp	r3, #15
   24154:	bls	241d8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   24158:	ldr	r3, [r8, #100]	; 0x64
   2415c:	cmp	r3, #0
   24160:	beq	24130 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24164:	mov	r2, #16
   24168:	mov	r3, #5
   2416c:	str	r2, [r8, #124]	; 0x7c
   24170:	ldr	r0, [r8, #40]	; 0x28
   24174:	mov	r1, r5
   24178:	str	r3, [sp]
   2417c:	mov	r2, #256	; 0x100
   24180:	ldr	r5, [r8, #48]	; 0x30
   24184:	mov	r3, #1
   24188:	blx	r5
   2418c:	cmp	r0, #0
   24190:	bne	24130 <flatcc_builder_create_cached_vtable@@Base+0x170>
   24194:	ldr	r1, [r8, #96]	; 0x60
   24198:	mov	r3, #256	; 0x100
   2419c:	b	241a4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   241a0:	mov	r3, r2
   241a4:	lsl	r2, r3, #1
   241a8:	cmp	r2, r1
   241ac:	bls	241a0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   241b0:	lsr	r3, r3, #2
   241b4:	cmp	r3, #1
   241b8:	bls	2428c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   241bc:	mov	r2, #1
   241c0:	add	r4, r4, #1
   241c4:	cmp	r3, r2, lsl r4
   241c8:	bhi	241c0 <flatcc_builder_create_cached_vtable@@Base+0x200>
   241cc:	rsb	r3, r4, #32
   241d0:	str	r4, [r8, #116]	; 0x74
   241d4:	b	23fe8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   241d8:	mov	r3, #6
   241dc:	ldr	r0, [r0, #40]	; 0x28
   241e0:	mov	r2, #16
   241e4:	str	r3, [sp]
   241e8:	add	r1, r8, #100	; 0x64
   241ec:	ldr	r6, [r8, #48]	; 0x30
   241f0:	mov	r3, r4
   241f4:	blx	r6
   241f8:	cmp	r0, #0
   241fc:	beq	24158 <flatcc_builder_create_cached_vtable@@Base+0x198>
   24200:	b	242b8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   24204:	mov	r3, #6
   24208:	ldr	r0, [r8, #40]	; 0x28
   2420c:	add	r1, r8, #100	; 0x64
   24210:	str	r3, [sp]
   24214:	mov	r3, #0
   24218:	ldr	r5, [r8, #48]	; 0x30
   2421c:	blx	r5
   24220:	cmp	r0, #0
   24224:	beq	24098 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   24228:	b	242b8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   2422c:	str	r5, [sp, #12]
   24230:	b	24084 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   24234:	ldr	r3, [r8, #172]	; 0xac
   24238:	ldr	r9, [r8, #120]	; 0x78
   2423c:	cmp	r3, #0
   24240:	add	r2, r9, r7
   24244:	beq	24250 <flatcc_builder_create_cached_vtable@@Base+0x290>
   24248:	cmp	r3, r2
   2424c:	bcc	242bc <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   24250:	ldr	r3, [r8, #72]	; 0x48
   24254:	cmp	r3, r2
   24258:	bcc	24294 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   2425c:	ldr	r3, [r8, #68]	; 0x44
   24260:	adds	r0, r3, r9
   24264:	beq	242f0 <flatcc_builder_create_cached_vtable@@Base+0x330>
   24268:	ldr	r3, [r8, #120]	; 0x78
   2426c:	ldr	r1, [sp, #8]
   24270:	add	ip, r3, r7
   24274:	str	r3, [r6, #8]
   24278:	mov	r2, r7
   2427c:	str	ip, [r8, #120]	; 0x78
   24280:	bl	125a4 <memcpy@plt>
   24284:	ldr	r0, [r5, r4]
   24288:	b	240f8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   2428c:	mov	r3, #32
   24290:	b	241d0 <flatcc_builder_create_cached_vtable@@Base+0x210>
   24294:	mov	r3, #2
   24298:	ldr	r0, [r8, #40]	; 0x28
   2429c:	add	r1, r8, #68	; 0x44
   242a0:	str	r3, [sp]
   242a4:	mov	r3, #0
   242a8:	ldr	sl, [r8, #48]	; 0x30
   242ac:	blx	sl
   242b0:	cmp	r0, #0
   242b4:	beq	2425c <flatcc_builder_create_cached_vtable@@Base+0x29c>
   242b8:	bl	12868 <__assert_fail@plt+0x1c8>
   242bc:	mov	r0, r8
   242c0:	bl	224b4 <flatcc_builder_flush_vtable_cache@@Base>
   242c4:	ldr	r0, [r5, r4]
   242c8:	b	240f8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   242cc:	ldr	r3, [pc, #36]	; 242f8 <flatcc_builder_create_cached_vtable@@Base+0x338>
   242d0:	ldr	r1, [pc, #36]	; 242fc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   242d4:	ldr	r0, [pc, #36]	; 24300 <flatcc_builder_create_cached_vtable@@Base+0x340>
   242d8:	add	r3, pc, r3
   242dc:	ldr	r2, [pc, #32]	; 24304 <flatcc_builder_create_cached_vtable@@Base+0x344>
   242e0:	add	r3, r3, #656	; 0x290
   242e4:	add	r1, pc, r1
   242e8:	add	r0, pc, r0
   242ec:	bl	126a0 <__assert_fail@plt>
   242f0:	mvn	r0, #0
   242f4:	b	240f8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   242f8:	andeq	r6, r0, r0, ror #30
   242fc:	andeq	r7, r0, r4, lsr #13
   24300:	andeq	r7, r0, ip, asr #18
   24304:	andeq	r0, r0, r6, asr r1

00024308 <flatcc_builder_create_table@@Base>:
   24308:	push	{r4, r5, r6, r7, r8, lr}
   2430c:	sub	sp, sp, #88	; 0x58
   24310:	ldr	r8, [pc, #436]	; 244cc <flatcc_builder_create_table@@Base+0x1c4>
   24314:	ldr	r4, [sp, #116]	; 0x74
   24318:	add	r8, pc, r8
   2431c:	cmp	r4, #0
   24320:	ldr	lr, [sp, #120]	; 0x78
   24324:	blt	2445c <flatcc_builder_create_table@@Base+0x154>
   24328:	tst	lr, #1
   2432c:	beq	244a8 <flatcc_builder_create_table@@Base+0x1a0>
   24330:	mov	r5, r0
   24334:	ldrh	r0, [r0, #128]	; 0x80
   24338:	cmp	r3, #4
   2433c:	movcc	r3, #4
   24340:	ldr	ip, [r5, #136]	; 0x88
   24344:	cmp	r0, r3
   24348:	mvn	r0, #3
   2434c:	strhcc	r3, [r5, #128]	; 0x80
   24350:	sub	r7, ip, r2
   24354:	sub	r3, r3, #1
   24358:	sub	r0, r0, r2
   2435c:	and	r7, r7, r3
   24360:	add	r0, r0, ip
   24364:	sub	r3, lr, #1
   24368:	sub	r0, r0, r7
   2436c:	sub	r3, r0, r3
   24370:	cmp	r4, #0
   24374:	str	r3, [sp, #12]
   24378:	beq	243ac <flatcc_builder_create_table@@Base+0xa4>
   2437c:	ldr	ip, [sp, #112]	; 0x70
   24380:	mvn	r6, #3
   24384:	add	r4, ip, r4, lsl #1
   24388:	sub	r6, r6, r0
   2438c:	ldrh	r3, [ip], #2
   24390:	sub	lr, r6, r3
   24394:	ldr	r0, [r1, r3]
   24398:	cmp	r4, ip
   2439c:	add	r0, r0, lr
   243a0:	str	r0, [r1, r3]
   243a4:	bne	2438c <flatcc_builder_create_table@@Base+0x84>
   243a8:	ldr	ip, [r5, #136]	; 0x88
   243ac:	mov	r3, #4
   243b0:	mov	lr, #1
   243b4:	add	r0, sp, #12
   243b8:	cmp	r2, #0
   243bc:	str	r3, [sp, #16]
   243c0:	str	r3, [sp, #28]
   243c4:	str	r0, [sp, #24]
   243c8:	str	lr, [sp, #20]
   243cc:	beq	243e8 <flatcc_builder_create_table@@Base+0xe0>
   243d0:	add	r3, r2, r3
   243d4:	mov	r0, #2
   243d8:	str	r1, [sp, #32]
   243dc:	str	r2, [sp, #36]	; 0x24
   243e0:	str	r3, [sp, #16]
   243e4:	str	r0, [sp, #20]
   243e8:	cmp	r7, #0
   243ec:	beq	2441c <flatcc_builder_create_table@@Base+0x114>
   243f0:	ldr	r2, [sp, #20]
   243f4:	ldr	r1, [pc, #212]	; 244d0 <flatcc_builder_create_table@@Base+0x1c8>
   243f8:	add	r2, r2, #1
   243fc:	add	r3, r3, r7
   24400:	str	r3, [sp, #16]
   24404:	ldr	r0, [r8, r1]
   24408:	add	r1, sp, #88	; 0x58
   2440c:	add	r1, r1, r2, lsl #3
   24410:	str	r2, [sp, #20]
   24414:	str	r0, [r1, #-72]	; 0xffffffb8
   24418:	str	r7, [r1, #-68]	; 0xffffffbc
   2441c:	sub	r4, ip, r3
   24420:	cmp	r4, ip
   24424:	bge	244a4 <flatcc_builder_create_table@@Base+0x19c>
   24428:	ldr	r0, [r5, #36]	; 0x24
   2442c:	ldr	r2, [sp, #20]
   24430:	str	r3, [sp]
   24434:	add	r1, sp, #24
   24438:	ldr	r6, [r5, #44]	; 0x2c
   2443c:	mov	r3, r4
   24440:	blx	r6
   24444:	cmp	r0, #0
   24448:	bne	24480 <flatcc_builder_create_table@@Base+0x178>
   2444c:	mov	r0, r4
   24450:	str	r4, [r5, #136]	; 0x88
   24454:	add	sp, sp, #88	; 0x58
   24458:	pop	{r4, r5, r6, r7, r8, pc}
   2445c:	ldr	r3, [pc, #112]	; 244d4 <flatcc_builder_create_table@@Base+0x1cc>
   24460:	ldr	r1, [pc, #112]	; 244d8 <flatcc_builder_create_table@@Base+0x1d0>
   24464:	ldr	r0, [pc, #112]	; 244dc <flatcc_builder_create_table@@Base+0x1d4>
   24468:	add	r3, pc, r3
   2446c:	ldr	r2, [pc, #108]	; 244e0 <flatcc_builder_create_table@@Base+0x1d8>
   24470:	add	r3, r3, #668	; 0x29c
   24474:	add	r1, pc, r1
   24478:	add	r0, pc, r0
   2447c:	bl	126a0 <__assert_fail@plt>
   24480:	ldr	r3, [pc, #92]	; 244e4 <flatcc_builder_create_table@@Base+0x1dc>
   24484:	ldr	r1, [pc, #92]	; 244e8 <flatcc_builder_create_table@@Base+0x1e0>
   24488:	ldr	r0, [pc, #92]	; 244ec <flatcc_builder_create_table@@Base+0x1e4>
   2448c:	add	r3, pc, r3
   24490:	ldr	r2, [pc, #88]	; 244f0 <flatcc_builder_create_table@@Base+0x1e8>
   24494:	add	r3, r3, #28
   24498:	add	r1, pc, r1
   2449c:	add	r0, pc, r0
   244a0:	bl	126a0 <__assert_fail@plt>
   244a4:	bl	128d0 <__assert_fail@plt+0x230>
   244a8:	ldr	r3, [pc, #68]	; 244f4 <flatcc_builder_create_table@@Base+0x1ec>
   244ac:	ldr	r1, [pc, #68]	; 244f8 <flatcc_builder_create_table@@Base+0x1f0>
   244b0:	ldr	r0, [pc, #68]	; 244fc <flatcc_builder_create_table@@Base+0x1f4>
   244b4:	add	r3, pc, r3
   244b8:	ldr	r2, [pc, #64]	; 24500 <flatcc_builder_create_table@@Base+0x1f8>
   244bc:	add	r3, r3, #668	; 0x29c
   244c0:	add	r1, pc, r1
   244c4:	add	r0, pc, r0
   244c8:	bl	126a0 <__assert_fail@plt>
   244cc:	andeq	r8, r1, r0, ror #25
   244d0:	andeq	r0, r0, ip, rrx
   244d4:	ldrdeq	r6, [r0], -r0
   244d8:	andeq	r7, r0, r4, lsl r5
   244dc:	andeq	r7, r0, ip, asr #15
   244e0:	ldrdeq	r0, [r0], -r5
   244e4:	andeq	r6, r0, ip, lsr #27
   244e8:	strdeq	r7, [r0], -r0
   244ec:	andeq	r7, r0, r4, ror r5
   244f0:	andeq	r0, r0, fp, lsl #5
   244f4:	andeq	r6, r0, r4, lsl #27
   244f8:	andeq	r7, r0, r8, asr #9
   244fc:	muleq	r0, r4, r7
   24500:	ldrdeq	r0, [r0], -fp

00024504 <flatcc_builder_check_required_field@@Base>:
   24504:	ldr	r3, [r0, #32]
   24508:	ldrh	r3, [r3, #14]
   2450c:	cmp	r3, #3
   24510:	bne	2453c <flatcc_builder_check_required_field@@Base+0x38>
   24514:	ldrh	r3, [r0, #8]
   24518:	cmp	r3, r1
   2451c:	movls	r0, #0
   24520:	bls	24538 <flatcc_builder_check_required_field@@Base+0x34>
   24524:	ldr	r3, [r0, #4]
   24528:	lsl	r1, r1, #1
   2452c:	ldrh	r0, [r3, r1]
   24530:	adds	r0, r0, #0
   24534:	movne	r0, #1
   24538:	bx	lr
   2453c:	ldr	r3, [pc, #32]	; 24564 <flatcc_builder_check_required_field@@Base+0x60>
   24540:	ldr	r1, [pc, #32]	; 24568 <flatcc_builder_check_required_field@@Base+0x64>
   24544:	ldr	r0, [pc, #32]	; 2456c <flatcc_builder_check_required_field@@Base+0x68>
   24548:	add	r3, pc, r3
   2454c:	push	{r4, lr}
   24550:	add	r3, r3, #696	; 0x2b8
   24554:	ldr	r2, [pc, #20]	; 24570 <flatcc_builder_check_required_field@@Base+0x6c>
   24558:	add	r1, pc, r1
   2455c:	add	r0, pc, r0
   24560:	bl	126a0 <__assert_fail@plt>
   24564:	strdeq	r6, [r0], -r0
   24568:	andeq	r7, r0, r0, lsr r4
   2456c:	andeq	r7, r0, r8, lsl #14
   24570:	strdeq	r0, [r0], -r8

00024574 <flatcc_builder_check_union_field@@Base>:
   24574:	ldr	r3, [r0, #32]
   24578:	ldrh	r3, [r3, #14]
   2457c:	cmp	r3, #3
   24580:	bne	245fc <flatcc_builder_check_union_field@@Base+0x88>
   24584:	cmp	r1, #0
   24588:	beq	245d4 <flatcc_builder_check_union_field@@Base+0x60>
   2458c:	ldrh	r3, [r0, #8]
   24590:	cmp	r3, r1
   24594:	bls	245d4 <flatcc_builder_check_union_field@@Base+0x60>
   24598:	sub	r1, r1, #-2147483647	; 0x80000001
   2459c:	ldr	r3, [r0, #4]
   245a0:	lsl	r1, r1, #1
   245a4:	ldrh	r2, [r3, r1]
   245a8:	cmp	r2, #0
   245ac:	beq	245e8 <flatcc_builder_check_union_field@@Base+0x74>
   245b0:	ldr	r0, [r0, #16]
   245b4:	add	r1, r3, r1
   245b8:	ldrb	r2, [r0, r2]
   245bc:	ldrh	r1, [r1, #2]
   245c0:	cmp	r2, #0
   245c4:	bne	245dc <flatcc_builder_check_union_field@@Base+0x68>
   245c8:	clz	r0, r1
   245cc:	lsr	r0, r0, #5
   245d0:	bx	lr
   245d4:	mov	r0, #0
   245d8:	bx	lr
   245dc:	adds	r0, r1, #0
   245e0:	movne	r0, #1
   245e4:	b	245d8 <flatcc_builder_check_union_field@@Base+0x64>
   245e8:	add	r1, r3, r1
   245ec:	ldrh	r1, [r1, #2]
   245f0:	clz	r0, r1
   245f4:	lsr	r0, r0, #5
   245f8:	bx	lr
   245fc:	ldr	r3, [pc, #32]	; 24624 <flatcc_builder_check_union_field@@Base+0xb0>
   24600:	ldr	r1, [pc, #32]	; 24628 <flatcc_builder_check_union_field@@Base+0xb4>
   24604:	ldr	r0, [pc, #32]	; 2462c <flatcc_builder_check_union_field@@Base+0xb8>
   24608:	add	r3, pc, r3
   2460c:	push	{r4, lr}
   24610:	add	r3, r3, #732	; 0x2dc
   24614:	ldr	r2, [pc, #20]	; 24630 <flatcc_builder_check_union_field@@Base+0xbc>
   24618:	add	r1, pc, r1
   2461c:	add	r0, pc, r0
   24620:	bl	126a0 <__assert_fail@plt>
   24624:	andeq	r6, r0, r0, lsr ip
   24628:	andeq	r7, r0, r0, ror r3
   2462c:	andeq	r7, r0, r8, asr #12
   24630:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00024634 <flatcc_builder_check_required@@Base>:
   24634:	ldr	r3, [r0, #32]
   24638:	ldrh	r3, [r3, #14]
   2463c:	cmp	r3, #3
   24640:	bne	246a4 <flatcc_builder_check_required@@Base+0x70>
   24644:	ldrh	r3, [r0, #8]
   24648:	cmp	r3, r2
   2464c:	movlt	r0, #0
   24650:	blt	246a0 <flatcc_builder_check_required@@Base+0x6c>
   24654:	cmp	r2, #0
   24658:	ble	2469c <flatcc_builder_check_required@@Base+0x68>
   2465c:	ldrh	r3, [r1]
   24660:	ldr	ip, [r0, #4]
   24664:	lsl	r3, r3, #1
   24668:	ldrh	r0, [ip, r3]
   2466c:	cmp	r0, #0
   24670:	beq	246a0 <flatcc_builder_check_required@@Base+0x6c>
   24674:	add	r2, r1, r2, lsl #1
   24678:	add	r1, r1, #2
   2467c:	b	24694 <flatcc_builder_check_required@@Base+0x60>
   24680:	ldrh	r3, [r1], #2
   24684:	lsl	r3, r3, #1
   24688:	ldrh	r0, [ip, r3]
   2468c:	cmp	r0, #0
   24690:	beq	246a0 <flatcc_builder_check_required@@Base+0x6c>
   24694:	cmp	r1, r2
   24698:	bne	24680 <flatcc_builder_check_required@@Base+0x4c>
   2469c:	mov	r0, #1
   246a0:	bx	lr
   246a4:	ldr	r3, [pc, #32]	; 246cc <flatcc_builder_check_required@@Base+0x98>
   246a8:	ldr	r1, [pc, #32]	; 246d0 <flatcc_builder_check_required@@Base+0x9c>
   246ac:	ldr	r0, [pc, #32]	; 246d4 <flatcc_builder_check_required@@Base+0xa0>
   246b0:	add	r3, pc, r3
   246b4:	push	{r4, lr}
   246b8:	add	r3, r3, #768	; 0x300
   246bc:	ldr	r2, [pc, #20]	; 246d8 <flatcc_builder_check_required@@Base+0xa4>
   246c0:	add	r1, pc, r1
   246c4:	add	r0, pc, r0
   246c8:	bl	126a0 <__assert_fail@plt>
   246cc:	andeq	r6, r0, r8, lsl #23
   246d0:	andeq	r7, r0, r8, asr #5
   246d4:	andeq	r7, r0, r0, lsr #11
   246d8:	andeq	r0, r0, r1, lsl r5

000246dc <flatcc_builder_end_table@@Base>:
   246dc:	ldr	r3, [r0, #32]
   246e0:	push	{r4, r5, r6, r7, lr}
   246e4:	sub	sp, sp, #20
   246e8:	ldrh	r3, [r3, #14]
   246ec:	cmp	r3, #3
   246f0:	bne	24874 <flatcc_builder_end_table@@Base+0x198>
   246f4:	ldrh	r5, [r0, #8]
   246f8:	ldr	r3, [r0, #12]
   246fc:	ldr	r1, [pc, #404]	; 24898 <flatcc_builder_end_table@@Base+0x1bc>
   24700:	add	r5, r5, #2
   24704:	ldr	r2, [r0, #20]
   24708:	lsl	r5, r5, #1
   2470c:	add	r2, r2, #4
   24710:	uxth	r5, r5
   24714:	eor	r3, r3, r5
   24718:	uxth	r2, r2
   2471c:	mul	r3, r1, r3
   24720:	ldr	ip, [r0, #4]
   24724:	eor	r3, r3, r2
   24728:	sub	r6, ip, #4
   2472c:	mul	r1, r1, r3
   24730:	strh	r2, [ip, #-2]
   24734:	strh	r5, [ip, #-4]
   24738:	mov	r3, r1
   2473c:	str	r1, [r0, #12]
   24740:	mov	r2, r5
   24744:	mov	r1, r6
   24748:	mov	r4, r0
   2474c:	bl	23fc0 <flatcc_builder_create_cached_vtable@@Base>
   24750:	subs	r7, r0, #0
   24754:	bne	24768 <flatcc_builder_end_table@@Base+0x8c>
   24758:	mov	r5, #0
   2475c:	mov	r0, r5
   24760:	add	sp, sp, #20
   24764:	pop	{r4, r5, r6, r7, pc}
   24768:	mov	r2, r5
   2476c:	mov	r1, #0
   24770:	mov	r0, r6
   24774:	bl	1264c <memset@plt>
   24778:	ldr	r3, [r4, #32]
   2477c:	ldr	ip, [r4, #76]	; 0x4c
   24780:	ldr	r0, [r4]
   24784:	ldr	r2, [r3, #20]
   24788:	ldr	r1, [r4, #16]
   2478c:	add	ip, ip, r2
   24790:	sub	r0, r0, ip
   24794:	ldrh	r3, [r4, #130]	; 0x82
   24798:	asr	r0, r0, #1
   2479c:	ldr	r2, [r4, #20]
   247a0:	str	r0, [sp, #4]
   247a4:	str	r7, [sp, #8]
   247a8:	str	ip, [sp]
   247ac:	mov	r0, r4
   247b0:	bl	24308 <flatcc_builder_create_table@@Base>
   247b4:	subs	r5, r0, #0
   247b8:	beq	24758 <flatcc_builder_end_table@@Base+0x7c>
   247bc:	ldr	r3, [r4, #32]
   247c0:	ldr	r0, [r4, #52]	; 0x34
   247c4:	ldr	ip, [r4, #76]	; 0x4c
   247c8:	ldr	r1, [r3, #24]
   247cc:	ldr	r2, [r4, #20]
   247d0:	str	r1, [r4, #12]
   247d4:	ldrh	lr, [r3, #28]
   247d8:	mov	r1, #0
   247dc:	strh	lr, [r4, #8]
   247e0:	ldr	lr, [r3, #16]
   247e4:	add	r0, r0, lr
   247e8:	str	r0, [r4, #4]
   247ec:	ldr	r3, [r3, #20]
   247f0:	ldr	r0, [r4, #16]
   247f4:	add	r3, ip, r3
   247f8:	str	r3, [r4]
   247fc:	bl	1264c <memset@plt>
   24800:	ldr	r3, [r4, #32]
   24804:	ldr	r2, [r4, #64]	; 0x40
   24808:	ldrh	lr, [r4, #130]	; 0x82
   2480c:	ldr	ip, [r3]
   24810:	ldr	r1, [r3, #4]
   24814:	ldrh	r0, [r4, #128]	; 0x80
   24818:	sub	r2, r2, ip
   2481c:	cmp	r2, r1
   24820:	movcs	r2, r1
   24824:	cmp	r0, lr
   24828:	ldr	r0, [r4, #60]	; 0x3c
   2482c:	ldr	r6, [r3, #8]
   24830:	str	r2, [r4, #24]
   24834:	add	r2, r0, ip
   24838:	str	r2, [r4, #16]
   2483c:	str	r6, [r4, #20]
   24840:	ldr	r2, [r4, #156]	; 0x9c
   24844:	str	ip, [r4, #28]
   24848:	str	r1, [r3, #4]
   2484c:	strhcc	lr, [r4, #128]	; 0x80
   24850:	ldrh	r1, [r3, #12]
   24854:	sub	r2, r2, #1
   24858:	sub	r3, r3, #36	; 0x24
   2485c:	mov	r0, r5
   24860:	str	r2, [r4, #156]	; 0x9c
   24864:	strh	r1, [r4, #130]	; 0x82
   24868:	str	r3, [r4, #32]
   2486c:	add	sp, sp, #20
   24870:	pop	{r4, r5, r6, r7, pc}
   24874:	ldr	r3, [pc, #32]	; 2489c <flatcc_builder_end_table@@Base+0x1c0>
   24878:	ldr	r1, [pc, #32]	; 248a0 <flatcc_builder_end_table@@Base+0x1c4>
   2487c:	ldr	r0, [pc, #32]	; 248a4 <flatcc_builder_end_table@@Base+0x1c8>
   24880:	add	r3, pc, r3
   24884:	ldr	r2, [pc, #28]	; 248a8 <flatcc_builder_end_table@@Base+0x1cc>
   24888:	add	r3, r3, #800	; 0x320
   2488c:	add	r1, pc, r1
   24890:	add	r0, pc, r0
   24894:	bl	126a0 <__assert_fail@plt>
   24898:			; <UNDEFINED> instruction: 0x9e3779b1
   2489c:			; <UNDEFINED> instruction: 0x000069b8
   248a0:	strdeq	r7, [r0], -ip
   248a4:	ldrdeq	r7, [r0], -r4
   248a8:	andeq	r0, r0, r5, lsr #10

000248ac <flatcc_builder_create_vector@@Base>:
   248ac:	push	{r4, r5, r6, lr}
   248b0:	sub	sp, sp, #88	; 0x58
   248b4:	ldr	lr, [pc, #320]	; 249fc <flatcc_builder_create_vector@@Base+0x150>
   248b8:	ldr	ip, [sp, #108]	; 0x6c
   248bc:	mov	r4, r0
   248c0:	cmp	r2, ip
   248c4:	add	lr, pc, lr
   248c8:	ldrh	r0, [sp, #104]	; 0x68
   248cc:	bhi	249b0 <flatcc_builder_create_vector@@Base+0x104>
   248d0:	ldrh	ip, [r4, #128]	; 0x80
   248d4:	cmp	r0, #4
   248d8:	mul	r3, r3, r2
   248dc:	movcc	r0, #4
   248e0:	ldr	r6, [r4, #136]	; 0x88
   248e4:	cmp	ip, r0
   248e8:	strhcc	r0, [r4, #128]	; 0x80
   248ec:	sub	r5, r6, r3
   248f0:	sub	r0, r0, #1
   248f4:	mov	ip, #4
   248f8:	str	r2, [sp, #12]
   248fc:	and	r0, r0, r5
   24900:	add	r2, sp, #12
   24904:	mov	r5, #1
   24908:	cmp	r3, #0
   2490c:	str	ip, [sp, #16]
   24910:	str	ip, [sp, #28]
   24914:	str	r2, [sp, #24]
   24918:	str	r5, [sp, #20]
   2491c:	bne	24994 <flatcc_builder_create_vector@@Base+0xe8>
   24920:	cmp	r0, #0
   24924:	beq	24954 <flatcc_builder_create_vector@@Base+0xa8>
   24928:	ldr	r3, [sp, #20]
   2492c:	ldr	r2, [pc, #204]	; 24a00 <flatcc_builder_create_vector@@Base+0x154>
   24930:	add	r3, r3, #1
   24934:	add	ip, ip, r0
   24938:	str	ip, [sp, #16]
   2493c:	ldr	r1, [lr, r2]
   24940:	add	r2, sp, #88	; 0x58
   24944:	add	r2, r2, r3, lsl #3
   24948:	str	r3, [sp, #20]
   2494c:	str	r1, [r2, #-72]	; 0xffffffb8
   24950:	str	r0, [r2, #-68]	; 0xffffffbc
   24954:	sub	r5, r6, ip
   24958:	cmp	r6, r5
   2495c:	ble	249f8 <flatcc_builder_create_vector@@Base+0x14c>
   24960:	ldr	r0, [r4, #36]	; 0x24
   24964:	ldr	r2, [sp, #20]
   24968:	str	ip, [sp]
   2496c:	mov	r3, r5
   24970:	ldr	r6, [r4, #44]	; 0x2c
   24974:	add	r1, sp, #24
   24978:	blx	r6
   2497c:	cmp	r0, #0
   24980:	bne	249d4 <flatcc_builder_create_vector@@Base+0x128>
   24984:	mov	r0, r5
   24988:	str	r5, [r4, #136]	; 0x88
   2498c:	add	sp, sp, #88	; 0x58
   24990:	pop	{r4, r5, r6, pc}
   24994:	add	ip, r3, ip
   24998:	mov	r2, #2
   2499c:	str	r1, [sp, #32]
   249a0:	str	r3, [sp, #36]	; 0x24
   249a4:	str	ip, [sp, #16]
   249a8:	str	r2, [sp, #20]
   249ac:	b	24920 <flatcc_builder_create_vector@@Base+0x74>
   249b0:	ldr	r3, [pc, #76]	; 24a04 <flatcc_builder_create_vector@@Base+0x158>
   249b4:	ldr	r1, [pc, #76]	; 24a08 <flatcc_builder_create_vector@@Base+0x15c>
   249b8:	ldr	r0, [pc, #76]	; 24a0c <flatcc_builder_create_vector@@Base+0x160>
   249bc:	add	r3, pc, r3
   249c0:	ldr	r2, [pc, #72]	; 24a10 <flatcc_builder_create_vector@@Base+0x164>
   249c4:	add	r3, r3, #828	; 0x33c
   249c8:	add	r1, pc, r1
   249cc:	add	r0, pc, r0
   249d0:	bl	126a0 <__assert_fail@plt>
   249d4:	ldr	r3, [pc, #56]	; 24a14 <flatcc_builder_create_vector@@Base+0x168>
   249d8:	ldr	r1, [pc, #56]	; 24a18 <flatcc_builder_create_vector@@Base+0x16c>
   249dc:	ldr	r0, [pc, #56]	; 24a1c <flatcc_builder_create_vector@@Base+0x170>
   249e0:	add	r3, pc, r3
   249e4:	ldr	r2, [pc, #52]	; 24a20 <flatcc_builder_create_vector@@Base+0x174>
   249e8:	add	r3, r3, #28
   249ec:	add	r1, pc, r1
   249f0:	add	r0, pc, r0
   249f4:	bl	126a0 <__assert_fail@plt>
   249f8:	bl	128d0 <__assert_fail@plt+0x230>
   249fc:	andeq	r8, r1, r4, lsr r7
   24a00:	andeq	r0, r0, ip, rrx
   24a04:	andeq	r6, r0, ip, ror r8
   24a08:	andeq	r6, r0, r0, asr #31
   24a0c:	andeq	r7, r0, r4, asr #5
   24a10:	andeq	r0, r0, r5, asr r5
   24a14:	andeq	r6, r0, r8, asr r8
   24a18:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   24a1c:	andeq	r7, r0, r0, lsr #32
   24a20:	andeq	r0, r0, fp, lsl #5

00024a24 <flatcc_builder_end_vector@@Base>:
   24a24:	ldr	r1, [r0, #32]
   24a28:	push	{r4, r5, r6, lr}
   24a2c:	sub	sp, sp, #8
   24a30:	ldrh	r3, [r1, #14]
   24a34:	cmp	r3, #4
   24a38:	bne	24aec <flatcc_builder_end_vector@@Base+0xc8>
   24a3c:	ldrh	lr, [r0, #130]	; 0x82
   24a40:	ldr	ip, [r1, #24]
   24a44:	ldr	r3, [r1, #16]
   24a48:	ldr	r2, [r1, #20]
   24a4c:	ldr	r1, [r0, #16]
   24a50:	str	lr, [sp]
   24a54:	str	ip, [sp, #4]
   24a58:	mov	r4, r0
   24a5c:	bl	248ac <flatcc_builder_create_vector@@Base>
   24a60:	subs	r5, r0, #0
   24a64:	beq	24ae0 <flatcc_builder_end_vector@@Base+0xbc>
   24a68:	ldr	r2, [r4, #20]
   24a6c:	mov	r1, #0
   24a70:	ldr	r0, [r4, #16]
   24a74:	bl	1264c <memset@plt>
   24a78:	ldr	r3, [r4, #32]
   24a7c:	ldr	r2, [r4, #64]	; 0x40
   24a80:	ldrh	lr, [r4, #130]	; 0x82
   24a84:	ldr	ip, [r3]
   24a88:	ldr	r1, [r3, #4]
   24a8c:	ldrh	r0, [r4, #128]	; 0x80
   24a90:	sub	r2, r2, ip
   24a94:	cmp	r2, r1
   24a98:	movcs	r2, r1
   24a9c:	cmp	r0, lr
   24aa0:	ldr	r0, [r4, #60]	; 0x3c
   24aa4:	ldr	r6, [r3, #8]
   24aa8:	str	r2, [r4, #24]
   24aac:	add	r2, r0, ip
   24ab0:	str	r2, [r4, #16]
   24ab4:	str	r6, [r4, #20]
   24ab8:	ldr	r2, [r4, #156]	; 0x9c
   24abc:	str	ip, [r4, #28]
   24ac0:	str	r1, [r3, #4]
   24ac4:	strhcc	lr, [r4, #128]	; 0x80
   24ac8:	ldrh	r1, [r3, #12]
   24acc:	sub	r2, r2, #1
   24ad0:	sub	r3, r3, #36	; 0x24
   24ad4:	str	r2, [r4, #156]	; 0x9c
   24ad8:	strh	r1, [r4, #130]	; 0x82
   24adc:	str	r3, [r4, #32]
   24ae0:	mov	r0, r5
   24ae4:	add	sp, sp, #8
   24ae8:	pop	{r4, r5, r6, pc}
   24aec:	ldr	r3, [pc, #28]	; 24b10 <flatcc_builder_end_vector@@Base+0xec>
   24af0:	ldr	r1, [pc, #28]	; 24b14 <flatcc_builder_end_vector@@Base+0xf0>
   24af4:	ldr	r0, [pc, #28]	; 24b18 <flatcc_builder_end_vector@@Base+0xf4>
   24af8:	add	r3, pc, r3
   24afc:	ldr	r2, [pc, #24]	; 24b1c <flatcc_builder_end_vector@@Base+0xf8>
   24b00:	add	r3, r3, #860	; 0x35c
   24b04:	add	r1, pc, r1
   24b08:	add	r0, pc, r0
   24b0c:	bl	126a0 <__assert_fail@plt>
   24b10:	andeq	r6, r0, r0, asr #14
   24b14:	andeq	r6, r0, r4, lsl #29
   24b18:	ldrdeq	r6, [r0], -r0
   24b1c:	andeq	r0, r0, r8, ror r5

00024b20 <flatcc_builder_vector_count@@Base>:
   24b20:	ldr	r3, [r0, #32]
   24b24:	ldr	r0, [r3, #20]
   24b28:	bx	lr

00024b2c <flatcc_builder_vector_edit@@Base>:
   24b2c:	ldr	r0, [r0, #16]
   24b30:	bx	lr

00024b34 <flatcc_builder_create_offset_vector_direct@@Base>:
   24b34:	cmn	r2, #-1073741823	; 0xc0000001
   24b38:	bls	24b44 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   24b3c:	mov	r0, #0
   24b40:	bx	lr
   24b44:	mov	r3, #0
   24b48:	b	22284 <flatcc_builder_default_alloc@@Base+0x350>

00024b4c <flatcc_builder_end_offset_vector@@Base>:
   24b4c:	ldr	r3, [r0, #32]
   24b50:	push	{r4, r5, r6, lr}
   24b54:	ldrh	r2, [r3, #14]
   24b58:	cmp	r2, #5
   24b5c:	bne	24bf8 <flatcc_builder_end_offset_vector@@Base+0xac>
   24b60:	ldr	r2, [r3, #20]
   24b64:	ldr	r1, [r0, #16]
   24b68:	mov	r4, r0
   24b6c:	bl	24b34 <flatcc_builder_create_offset_vector_direct@@Base>
   24b70:	subs	r5, r0, #0
   24b74:	beq	24bf0 <flatcc_builder_end_offset_vector@@Base+0xa4>
   24b78:	ldr	r2, [r4, #20]
   24b7c:	mov	r1, #0
   24b80:	ldr	r0, [r4, #16]
   24b84:	bl	1264c <memset@plt>
   24b88:	ldr	r3, [r4, #32]
   24b8c:	ldr	r2, [r4, #64]	; 0x40
   24b90:	ldrh	lr, [r4, #130]	; 0x82
   24b94:	ldr	ip, [r3]
   24b98:	ldr	r1, [r3, #4]
   24b9c:	ldrh	r0, [r4, #128]	; 0x80
   24ba0:	sub	r2, r2, ip
   24ba4:	cmp	r2, r1
   24ba8:	movcs	r2, r1
   24bac:	cmp	r0, lr
   24bb0:	ldr	r0, [r4, #60]	; 0x3c
   24bb4:	ldr	r6, [r3, #8]
   24bb8:	str	r2, [r4, #24]
   24bbc:	add	r2, r0, ip
   24bc0:	str	r2, [r4, #16]
   24bc4:	str	r6, [r4, #20]
   24bc8:	ldr	r2, [r4, #156]	; 0x9c
   24bcc:	str	ip, [r4, #28]
   24bd0:	str	r1, [r3, #4]
   24bd4:	strhcc	lr, [r4, #128]	; 0x80
   24bd8:	ldrh	r1, [r3, #12]
   24bdc:	sub	r2, r2, #1
   24be0:	sub	r3, r3, #36	; 0x24
   24be4:	str	r2, [r4, #156]	; 0x9c
   24be8:	strh	r1, [r4, #130]	; 0x82
   24bec:	str	r3, [r4, #32]
   24bf0:	mov	r0, r5
   24bf4:	pop	{r4, r5, r6, pc}
   24bf8:	ldr	r3, [pc, #28]	; 24c1c <flatcc_builder_end_offset_vector@@Base+0xd0>
   24bfc:	ldr	r1, [pc, #28]	; 24c20 <flatcc_builder_end_offset_vector@@Base+0xd4>
   24c00:	ldr	r0, [pc, #28]	; 24c24 <flatcc_builder_end_offset_vector@@Base+0xd8>
   24c04:	add	r3, pc, r3
   24c08:	ldr	r2, [pc, #24]	; 24c28 <flatcc_builder_end_offset_vector@@Base+0xdc>
   24c0c:	add	r3, r3, #888	; 0x378
   24c10:	add	r1, pc, r1
   24c14:	add	r0, pc, r0
   24c18:	bl	126a0 <__assert_fail@plt>
   24c1c:	andeq	r6, r0, r4, lsr r6
   24c20:	andeq	r6, r0, r8, ror sp
   24c24:	andeq	r6, r0, r0, lsr pc
   24c28:	andeq	r0, r0, r8, asr #11

00024c2c <flatcc_builder_create_offset_vector@@Base>:
   24c2c:	push	{r4, r5, r6, lr}
   24c30:	mov	r6, r1
   24c34:	mov	r5, r2
   24c38:	mov	r4, r0
   24c3c:	bl	23b00 <flatcc_builder_start_offset_vector@@Base>
   24c40:	cmp	r0, #0
   24c44:	beq	24c50 <flatcc_builder_create_offset_vector@@Base+0x24>
   24c48:	mov	r0, #0
   24c4c:	pop	{r4, r5, r6, pc}
   24c50:	mov	r1, r5
   24c54:	mov	r0, r4
   24c58:	bl	23498 <flatcc_builder_extend_offset_vector@@Base>
   24c5c:	cmp	r0, #0
   24c60:	beq	24c48 <flatcc_builder_create_offset_vector@@Base+0x1c>
   24c64:	lsl	r2, r5, #2
   24c68:	mov	r1, r6
   24c6c:	bl	125a4 <memcpy@plt>
   24c70:	mov	r0, r4
   24c74:	pop	{r4, r5, r6, lr}
   24c78:	b	24b4c <flatcc_builder_end_offset_vector@@Base>

00024c7c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   24c7c:	ldr	r2, [r0, #32]
   24c80:	push	{r4, r5, r6, lr}
   24c84:	ldrh	ip, [r2, #14]
   24c88:	cmp	ip, #5
   24c8c:	bne	24d40 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   24c90:	ldr	r2, [r2, #20]
   24c94:	cmn	r2, #-1073741823	; 0xc0000001
   24c98:	bls	24ca8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   24c9c:	mov	r5, #0
   24ca0:	mov	r0, r5
   24ca4:	pop	{r4, r5, r6, pc}
   24ca8:	mov	r3, r1
   24cac:	ldr	r1, [r0, #16]
   24cb0:	mov	r4, r0
   24cb4:	bl	22284 <flatcc_builder_default_alloc@@Base+0x350>
   24cb8:	subs	r5, r0, #0
   24cbc:	beq	24c9c <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   24cc0:	ldr	r2, [r4, #20]
   24cc4:	mov	r1, #0
   24cc8:	ldr	r0, [r4, #16]
   24ccc:	bl	1264c <memset@plt>
   24cd0:	ldr	r3, [r4, #32]
   24cd4:	ldr	r2, [r4, #64]	; 0x40
   24cd8:	ldrh	lr, [r4, #130]	; 0x82
   24cdc:	ldr	ip, [r3]
   24ce0:	ldr	r1, [r3, #4]
   24ce4:	ldrh	r0, [r4, #128]	; 0x80
   24ce8:	sub	r2, r2, ip
   24cec:	cmp	r2, r1
   24cf0:	movcs	r2, r1
   24cf4:	cmp	r0, lr
   24cf8:	ldr	r0, [r4, #60]	; 0x3c
   24cfc:	ldr	r6, [r3, #8]
   24d00:	str	r2, [r4, #24]
   24d04:	add	r2, r0, ip
   24d08:	str	r2, [r4, #16]
   24d0c:	str	r6, [r4, #20]
   24d10:	ldr	r2, [r4, #156]	; 0x9c
   24d14:	str	ip, [r4, #28]
   24d18:	str	r1, [r3, #4]
   24d1c:	strhcc	lr, [r4, #128]	; 0x80
   24d20:	ldrh	r1, [r3, #12]
   24d24:	sub	r2, r2, #1
   24d28:	sub	r3, r3, #36	; 0x24
   24d2c:	str	r2, [r4, #156]	; 0x9c
   24d30:	strh	r1, [r4, #130]	; 0x82
   24d34:	str	r3, [r4, #32]
   24d38:	mov	r0, r5
   24d3c:	pop	{r4, r5, r6, pc}
   24d40:	ldr	r3, [pc, #28]	; 24d64 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   24d44:	ldr	r1, [pc, #28]	; 24d68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   24d48:	ldr	r0, [pc, #28]	; 24d6c <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   24d4c:	add	r3, pc, r3
   24d50:	ldr	r2, [pc, #24]	; 24d70 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   24d54:	add	r3, r3, #924	; 0x39c
   24d58:	add	r1, pc, r1
   24d5c:	add	r0, pc, r0
   24d60:	bl	126a0 <__assert_fail@plt>
   24d64:	andeq	r6, r0, ip, ror #9
   24d68:	andeq	r6, r0, r0, lsr ip
   24d6c:	andeq	r6, r0, r8, ror #27
   24d70:	ldrdeq	r0, [r0], -r5

00024d74 <flatcc_builder_offset_vector_edit@@Base>:
   24d74:	ldr	r0, [r0, #16]
   24d78:	bx	lr

00024d7c <flatcc_builder_offset_vector_count@@Base>:
   24d7c:	ldr	r3, [r0, #32]
   24d80:	ldr	r0, [r3, #20]
   24d84:	bx	lr

00024d88 <flatcc_builder_create_union_vector_direct@@Base>:
   24d88:	push	{r4, r5, r6, r7, r8, lr}
   24d8c:	sub	sp, sp, #8
   24d90:	mov	r4, r0
   24d94:	ldr	r5, [sp, #32]
   24d98:	cmn	r5, #-1073741823	; 0xc0000001
   24d9c:	bls	24db8 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   24da0:	mov	r3, #0
   24da4:	mov	r0, r4
   24da8:	str	r3, [r4]
   24dac:	str	r3, [r4, #4]
   24db0:	add	sp, sp, #8
   24db4:	pop	{r4, r5, r6, r7, r8, pc}
   24db8:	mov	r6, r1
   24dbc:	mov	r7, r2
   24dc0:	mov	r1, r3
   24dc4:	mov	r0, r6
   24dc8:	mov	r3, r2
   24dcc:	mov	r2, r5
   24dd0:	bl	22284 <flatcc_builder_default_alloc@@Base+0x350>
   24dd4:	subs	r8, r0, #0
   24dd8:	beq	24da0 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   24ddc:	mvn	ip, #0
   24de0:	mov	r3, #1
   24de4:	mov	r2, r5
   24de8:	mov	r1, r7
   24dec:	mov	r0, r6
   24df0:	stm	sp, {r3, ip}
   24df4:	bl	248ac <flatcc_builder_create_vector@@Base>
   24df8:	stm	r4, {r0, r8}
   24dfc:	mov	r0, r4
   24e00:	add	sp, sp, #8
   24e04:	pop	{r4, r5, r6, r7, r8, pc}

00024e08 <flatcc_builder_create_union_vector@@Base>:
   24e08:	push	{r4, r5, r6, r7, r8, lr}
   24e0c:	mov	r6, r0
   24e10:	sub	sp, sp, #16
   24e14:	mov	r0, r1
   24e18:	mov	r5, r1
   24e1c:	mov	r4, r2
   24e20:	mov	r7, r3
   24e24:	bl	23b00 <flatcc_builder_start_offset_vector@@Base>
   24e28:	cmp	r0, #0
   24e2c:	beq	24e48 <flatcc_builder_create_union_vector@@Base+0x40>
   24e30:	mov	r3, #0
   24e34:	mov	r0, r6
   24e38:	str	r3, [r6]
   24e3c:	str	r3, [r6, #4]
   24e40:	add	sp, sp, #16
   24e44:	pop	{r4, r5, r6, r7, r8, pc}
   24e48:	mov	r1, r7
   24e4c:	mov	r0, r5
   24e50:	bl	23498 <flatcc_builder_extend_offset_vector@@Base>
   24e54:	cmp	r0, #0
   24e58:	beq	24e30 <flatcc_builder_create_union_vector@@Base+0x28>
   24e5c:	ldr	r8, [r5, #20]
   24e60:	ldr	r3, [r5, #24]
   24e64:	add	r1, r7, r8
   24e68:	cmp	r1, r3
   24e6c:	str	r1, [r5, #20]
   24e70:	bcs	24f68 <flatcc_builder_create_union_vector@@Base+0x160>
   24e74:	ldr	r2, [r5, #16]
   24e78:	adds	r8, r2, r8
   24e7c:	beq	24e30 <flatcc_builder_create_union_vector@@Base+0x28>
   24e80:	mov	r0, r5
   24e84:	bl	24d74 <flatcc_builder_offset_vector_edit@@Base>
   24e88:	cmp	r7, #0
   24e8c:	movne	r1, r4
   24e90:	subne	lr, r8, #1
   24e94:	mov	r3, r0
   24e98:	addne	r2, r1, r7, lsl #3
   24e9c:	subne	ip, r0, #4
   24ea0:	beq	24ec0 <flatcc_builder_create_union_vector@@Base+0xb8>
   24ea4:	ldrb	r4, [r1]
   24ea8:	add	r1, r1, #8
   24eac:	strb	r4, [lr, #1]!
   24eb0:	ldr	r4, [r1, #-4]
   24eb4:	cmp	r2, r1
   24eb8:	str	r4, [ip, #4]!
   24ebc:	bne	24ea4 <flatcc_builder_create_union_vector@@Base+0x9c>
   24ec0:	str	r7, [sp]
   24ec4:	mov	r2, r8
   24ec8:	mov	r1, r5
   24ecc:	add	r0, sp, #8
   24ed0:	bl	24d88 <flatcc_builder_create_union_vector_direct@@Base>
   24ed4:	ldr	r2, [r5, #20]
   24ed8:	mov	r1, #0
   24edc:	ldr	r0, [r5, #16]
   24ee0:	ldr	r7, [sp, #8]
   24ee4:	ldr	r4, [sp, #12]
   24ee8:	bl	1264c <memset@plt>
   24eec:	ldr	r3, [r5, #32]
   24ef0:	ldr	r2, [r5, #64]	; 0x40
   24ef4:	ldrh	lr, [r5, #130]	; 0x82
   24ef8:	ldr	ip, [r3]
   24efc:	ldr	r1, [r3, #4]
   24f00:	ldrh	r0, [r5, #128]	; 0x80
   24f04:	sub	r2, r2, ip
   24f08:	cmp	r2, r1
   24f0c:	movcs	r2, r1
   24f10:	cmp	r0, lr
   24f14:	ldr	r0, [r5, #60]	; 0x3c
   24f18:	ldr	r8, [r3, #8]
   24f1c:	str	r2, [r5, #24]
   24f20:	add	r2, r0, ip
   24f24:	str	r2, [r5, #16]
   24f28:	str	r8, [r5, #20]
   24f2c:	ldr	r2, [r5, #156]	; 0x9c
   24f30:	str	ip, [r5, #28]
   24f34:	str	r1, [r3, #4]
   24f38:	strhcc	lr, [r5, #128]	; 0x80
   24f3c:	ldrh	r1, [r3, #12]
   24f40:	sub	r2, r2, #1
   24f44:	sub	r3, r3, #36	; 0x24
   24f48:	mov	r0, r6
   24f4c:	str	r7, [r6]
   24f50:	str	r4, [r6, #4]
   24f54:	str	r2, [r5, #156]	; 0x9c
   24f58:	strh	r1, [r5, #130]	; 0x82
   24f5c:	str	r3, [r5, #32]
   24f60:	add	sp, sp, #16
   24f64:	pop	{r4, r5, r6, r7, r8, pc}
   24f68:	add	r1, r1, #1
   24f6c:	mvn	r2, #3
   24f70:	mov	r0, r5
   24f74:	bl	21ec0 <test_parse@@Base+0x534>
   24f78:	cmp	r0, #0
   24f7c:	beq	24e74 <flatcc_builder_create_union_vector@@Base+0x6c>
   24f80:	b	24e30 <flatcc_builder_create_union_vector@@Base+0x28>

00024f84 <flatcc_builder_start_union_vector@@Base>:
   24f84:	push	{r4, lr}
   24f88:	mov	r1, #4
   24f8c:	mov	r4, r0
   24f90:	bl	22170 <flatcc_builder_default_alloc@@Base+0x23c>
   24f94:	cmp	r0, #0
   24f98:	bne	24fe4 <flatcc_builder_start_union_vector@@Base+0x60>
   24f9c:	ldr	r3, [r4, #32]
   24fa0:	mov	r2, #8
   24fa4:	mov	lr, #7
   24fa8:	str	r0, [r3, #20]
   24fac:	str	r2, [r3, #16]
   24fb0:	ldr	ip, [r4, #28]
   24fb4:	ldr	r2, [r4, #64]	; 0x40
   24fb8:	ldr	r1, [r4, #60]	; 0x3c
   24fbc:	sub	r2, r2, ip
   24fc0:	cmn	r2, #4
   24fc4:	mvnhi	r2, #3
   24fc8:	strh	lr, [r3, #14]
   24fcc:	add	r1, r1, ip
   24fd0:	str	r2, [r4, #24]
   24fd4:	mvn	r2, #3
   24fd8:	str	r1, [r4, #16]
   24fdc:	str	r2, [r3, #4]
   24fe0:	pop	{r4, pc}
   24fe4:	mvn	r0, #0
   24fe8:	pop	{r4, pc}

00024fec <flatcc_builder_union_vector_edit@@Base>:
   24fec:	ldr	r0, [r0, #16]
   24ff0:	bx	lr

00024ff4 <flatcc_builder_union_vector_count@@Base>:
   24ff4:	ldr	r3, [r0, #32]
   24ff8:	ldr	r0, [r3, #20]
   24ffc:	bx	lr

00025000 <flatcc_builder_end_union_vector@@Base>:
   25000:	ldr	r3, [r1, #32]
   25004:	push	{r4, r5, r6, r7, r8, lr}
   25008:	sub	sp, sp, #16
   2500c:	ldrh	r3, [r3, #14]
   25010:	cmp	r3, #7
   25014:	bne	2516c <flatcc_builder_end_union_vector@@Base+0x16c>
   25018:	mov	r5, r0
   2501c:	mov	r0, r1
   25020:	mov	r4, r1
   25024:	bl	24ff4 <flatcc_builder_union_vector_count@@Base>
   25028:	ldr	r8, [r4, #20]
   2502c:	ldr	r3, [r4, #24]
   25030:	lsl	r7, r0, #2
   25034:	add	r1, r7, r0
   25038:	add	r1, r1, r8
   2503c:	cmp	r1, r3
   25040:	mov	r6, r0
   25044:	str	r1, [r4, #20]
   25048:	bcs	2513c <flatcc_builder_end_union_vector@@Base+0x13c>
   2504c:	ldr	r3, [r4, #16]
   25050:	adds	r8, r3, r8
   25054:	beq	25154 <flatcc_builder_end_union_vector@@Base+0x154>
   25058:	mov	r0, r4
   2505c:	bl	24fec <flatcc_builder_union_vector_edit@@Base>
   25060:	cmp	r6, #0
   25064:	add	r2, r8, r7
   25068:	subne	ip, r2, #1
   2506c:	subne	r1, r8, #4
   25070:	addne	r7, r0, r6, lsl #3
   25074:	beq	25094 <flatcc_builder_end_union_vector@@Base+0x94>
   25078:	ldrb	lr, [r0]
   2507c:	add	r0, r0, #8
   25080:	strb	lr, [ip, #1]!
   25084:	ldr	lr, [r0, #-4]
   25088:	cmp	r0, r7
   2508c:	str	lr, [r1, #4]!
   25090:	bne	25078 <flatcc_builder_end_union_vector@@Base+0x78>
   25094:	mov	r3, r8
   25098:	str	r6, [sp]
   2509c:	mov	r1, r4
   250a0:	add	r0, sp, #8
   250a4:	bl	24d88 <flatcc_builder_create_union_vector_direct@@Base>
   250a8:	ldr	r2, [r4, #20]
   250ac:	mov	r1, #0
   250b0:	ldr	r0, [r4, #16]
   250b4:	ldr	r7, [sp, #8]
   250b8:	ldr	r6, [sp, #12]
   250bc:	bl	1264c <memset@plt>
   250c0:	ldr	r3, [r4, #32]
   250c4:	ldr	r2, [r4, #64]	; 0x40
   250c8:	ldrh	lr, [r4, #130]	; 0x82
   250cc:	ldr	ip, [r3]
   250d0:	ldr	r1, [r3, #4]
   250d4:	ldrh	r0, [r4, #128]	; 0x80
   250d8:	sub	r2, r2, ip
   250dc:	cmp	r2, r1
   250e0:	movcs	r2, r1
   250e4:	cmp	r0, lr
   250e8:	ldr	r0, [r4, #60]	; 0x3c
   250ec:	ldr	r8, [r3, #8]
   250f0:	str	r2, [r4, #24]
   250f4:	add	r2, r0, ip
   250f8:	str	r2, [r4, #16]
   250fc:	str	r8, [r4, #20]
   25100:	ldr	r2, [r4, #156]	; 0x9c
   25104:	str	ip, [r4, #28]
   25108:	str	r1, [r3, #4]
   2510c:	strhcc	lr, [r4, #128]	; 0x80
   25110:	ldrh	r1, [r3, #12]
   25114:	sub	r2, r2, #1
   25118:	sub	r3, r3, #36	; 0x24
   2511c:	mov	r0, r5
   25120:	str	r7, [r5]
   25124:	str	r6, [r5, #4]
   25128:	str	r2, [r4, #156]	; 0x9c
   2512c:	strh	r1, [r4, #130]	; 0x82
   25130:	str	r3, [r4, #32]
   25134:	add	sp, sp, #16
   25138:	pop	{r4, r5, r6, r7, r8, pc}
   2513c:	add	r1, r1, #1
   25140:	mvn	r2, #3
   25144:	mov	r0, r4
   25148:	bl	21ec0 <test_parse@@Base+0x534>
   2514c:	cmp	r0, #0
   25150:	beq	2504c <flatcc_builder_end_union_vector@@Base+0x4c>
   25154:	mov	r3, #0
   25158:	mov	r0, r5
   2515c:	str	r3, [r5]
   25160:	str	r3, [r5, #4]
   25164:	add	sp, sp, #16
   25168:	pop	{r4, r5, r6, r7, r8, pc}
   2516c:	ldr	r3, [pc, #28]	; 25190 <flatcc_builder_end_union_vector@@Base+0x190>
   25170:	ldr	r1, [pc, #28]	; 25194 <flatcc_builder_end_union_vector@@Base+0x194>
   25174:	ldr	r0, [pc, #28]	; 25198 <flatcc_builder_end_union_vector@@Base+0x198>
   25178:	add	r3, pc, r3
   2517c:	ldr	r2, [pc, #24]	; 2519c <flatcc_builder_end_union_vector@@Base+0x19c>
   25180:	add	r3, r3, #968	; 0x3c8
   25184:	add	r1, pc, r1
   25188:	add	r0, pc, r0
   2518c:	bl	126a0 <__assert_fail@plt>
   25190:	andeq	r6, r0, r0, asr #1
   25194:	andeq	r6, r0, r4, lsl #16
   25198:	andeq	r6, r0, ip, lsl fp
   2519c:	andeq	r0, r0, r1, asr r6

000251a0 <flatcc_builder_extend_union_vector@@Base>:
   251a0:	ldr	ip, [r0, #32]
   251a4:	push	{r4, r5, r6, lr}
   251a8:	ldr	r3, [ip, #20]
   251ac:	adds	r2, r1, r3
   251b0:	movcs	r3, #1
   251b4:	movcc	r3, #0
   251b8:	cmn	r2, #-536870911	; 0xe0000001
   251bc:	movls	r4, #0
   251c0:	movhi	r4, #1
   251c4:	orrs	r4, r3, r4
   251c8:	bne	25214 <flatcc_builder_extend_union_vector@@Base+0x74>
   251cc:	str	r2, [ip, #20]
   251d0:	ldr	r6, [r0, #20]
   251d4:	ldr	r3, [r0, #24]
   251d8:	add	r1, r6, r1, lsl #3
   251dc:	cmp	r1, r3
   251e0:	mov	r5, r0
   251e4:	str	r1, [r0, #20]
   251e8:	bcs	251f8 <flatcc_builder_extend_union_vector@@Base+0x58>
   251ec:	ldr	r0, [r5, #16]
   251f0:	add	r0, r0, r6
   251f4:	pop	{r4, r5, r6, pc}
   251f8:	add	r1, r1, #1
   251fc:	mvn	r2, #3
   25200:	bl	21ec0 <test_parse@@Base+0x534>
   25204:	cmp	r0, #0
   25208:	beq	251ec <flatcc_builder_extend_union_vector@@Base+0x4c>
   2520c:	mov	r0, r4
   25210:	pop	{r4, r5, r6, pc}
   25214:	bl	12908 <__assert_fail@plt+0x268>

00025218 <flatcc_builder_truncate_union_vector@@Base>:
   25218:	ldr	r3, [r0, #32]
   2521c:	push	{r4, lr}
   25220:	ldrh	r2, [r3, #14]
   25224:	cmp	r2, #7
   25228:	bne	2526c <flatcc_builder_truncate_union_vector@@Base+0x54>
   2522c:	ldr	ip, [r3, #20]
   25230:	cmp	ip, r1
   25234:	bcc	25290 <flatcc_builder_truncate_union_vector@@Base+0x78>
   25238:	ldr	r2, [r3, #16]
   2523c:	sub	ip, ip, r1
   25240:	str	ip, [r3, #20]
   25244:	mul	r2, r2, r1
   25248:	ldr	r3, [r0, #20]
   2524c:	ldr	r1, [r0, #16]
   25250:	sub	r3, r3, r2
   25254:	str	r3, [r0, #20]
   25258:	add	r0, r1, r3
   2525c:	mov	r1, #0
   25260:	bl	1264c <memset@plt>
   25264:	mov	r0, #0
   25268:	pop	{r4, pc}
   2526c:	ldr	r3, [pc, #64]	; 252b4 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   25270:	ldr	r1, [pc, #64]	; 252b8 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   25274:	ldr	r0, [pc, #64]	; 252bc <flatcc_builder_truncate_union_vector@@Base+0xa4>
   25278:	add	r3, pc, r3
   2527c:	ldr	r2, [pc, #60]	; 252c0 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   25280:	add	r3, r3, #1000	; 0x3e8
   25284:	add	r1, pc, r1
   25288:	add	r0, pc, r0
   2528c:	bl	126a0 <__assert_fail@plt>
   25290:	ldr	r3, [pc, #44]	; 252c4 <flatcc_builder_truncate_union_vector@@Base+0xac>
   25294:	ldr	r1, [pc, #44]	; 252c8 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   25298:	ldr	r0, [pc, #44]	; 252cc <flatcc_builder_truncate_union_vector@@Base+0xb4>
   2529c:	add	r3, pc, r3
   252a0:	ldr	r2, [pc, #40]	; 252d0 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   252a4:	add	r3, r3, #1000	; 0x3e8
   252a8:	add	r1, pc, r1
   252ac:	add	r0, pc, r0
   252b0:	bl	126a0 <__assert_fail@plt>
   252b4:	andeq	r5, r0, r0, asr #31
   252b8:	andeq	r6, r0, r4, lsl #14
   252bc:	andeq	r6, r0, ip, lsl sl
   252c0:	andeq	r0, r0, r1, lsl #13
   252c4:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   252c8:	andeq	r6, r0, r0, ror #13
   252cc:	andeq	r6, r0, ip, lsl r9
   252d0:	andeq	r0, r0, r2, lsl #13

000252d4 <flatcc_builder_union_vector_push@@Base>:
   252d4:	ldr	ip, [r0, #32]
   252d8:	push	{r4, r5, r6, lr}
   252dc:	sub	sp, sp, #8
   252e0:	ldrh	r3, [ip, #14]
   252e4:	stm	sp, {r1, r2}
   252e8:	cmp	r3, #7
   252ec:	bne	2536c <flatcc_builder_union_vector_push@@Base+0x98>
   252f0:	ldr	r3, [ip, #20]
   252f4:	cmn	r3, #-536870911	; 0xe0000001
   252f8:	beq	2535c <flatcc_builder_union_vector_push@@Base+0x88>
   252fc:	add	r3, r3, #1
   25300:	str	r3, [ip, #20]
   25304:	ldr	r6, [r0, #20]
   25308:	ldr	r2, [r0, #24]
   2530c:	add	r3, r6, #8
   25310:	cmp	r3, r2
   25314:	mov	r4, r0
   25318:	mov	r5, sp
   2531c:	str	r3, [r0, #20]
   25320:	bcs	25348 <flatcc_builder_union_vector_push@@Base+0x74>
   25324:	ldr	r3, [r4, #16]
   25328:	adds	r3, r3, r6
   2532c:	beq	25390 <flatcc_builder_union_vector_push@@Base+0xbc>
   25330:	ldm	r5, {r0, r1}
   25334:	mov	r2, r3
   25338:	stm	r3, {r0, r1}
   2533c:	mov	r0, r2
   25340:	add	sp, sp, #8
   25344:	pop	{r4, r5, r6, pc}
   25348:	mvn	r2, #3
   2534c:	add	r1, r6, #9
   25350:	bl	21ec0 <test_parse@@Base+0x534>
   25354:	cmp	r0, #0
   25358:	beq	25324 <flatcc_builder_union_vector_push@@Base+0x50>
   2535c:	mov	r2, #0
   25360:	mov	r0, r2
   25364:	add	sp, sp, #8
   25368:	pop	{r4, r5, r6, pc}
   2536c:	ldr	r3, [pc, #36]	; 25398 <flatcc_builder_union_vector_push@@Base+0xc4>
   25370:	ldr	r1, [pc, #36]	; 2539c <flatcc_builder_union_vector_push@@Base+0xc8>
   25374:	ldr	r0, [pc, #36]	; 253a0 <flatcc_builder_union_vector_push@@Base+0xcc>
   25378:	add	r3, pc, r3
   2537c:	ldr	r2, [pc, #32]	; 253a4 <flatcc_builder_union_vector_push@@Base+0xd0>
   25380:	add	r3, r3, #1040	; 0x410
   25384:	add	r1, pc, r1
   25388:	add	r0, pc, r0
   2538c:	bl	126a0 <__assert_fail@plt>
   25390:	mov	r2, r3
   25394:	b	2533c <flatcc_builder_union_vector_push@@Base+0x68>
   25398:	andeq	r5, r0, r0, asr #29
   2539c:	andeq	r6, r0, r4, lsl #12
   253a0:	andeq	r6, r0, ip, lsl r9
   253a4:	andeq	r0, r0, sp, lsl #13

000253a8 <flatcc_builder_append_union_vector@@Base>:
   253a8:	ldr	ip, [r0, #32]
   253ac:	push	{r4, r5, r6, r7, r8, lr}
   253b0:	ldrh	r3, [ip, #14]
   253b4:	cmp	r3, #7
   253b8:	bne	25450 <flatcc_builder_append_union_vector@@Base+0xa8>
   253bc:	mov	r6, r1
   253c0:	ldr	r1, [ip, #20]
   253c4:	adds	r1, r2, r1
   253c8:	movcs	lr, #1
   253cc:	movcc	lr, #0
   253d0:	cmn	r1, #-536870911	; 0xe0000001
   253d4:	movls	r3, #0
   253d8:	movhi	r3, #1
   253dc:	orrs	r8, lr, r3
   253e0:	bne	2544c <flatcc_builder_append_union_vector@@Base+0xa4>
   253e4:	str	r1, [ip, #20]
   253e8:	ldr	r7, [r0, #20]
   253ec:	lsl	r4, r2, #3
   253f0:	ldr	r3, [r0, #24]
   253f4:	add	r1, r4, r7
   253f8:	cmp	r1, r3
   253fc:	mov	r5, r0
   25400:	str	r1, [r0, #20]
   25404:	bcs	25430 <flatcc_builder_append_union_vector@@Base+0x88>
   25408:	ldr	r3, [r5, #16]
   2540c:	adds	r3, r3, r7
   25410:	beq	25428 <flatcc_builder_append_union_vector@@Base+0x80>
   25414:	mov	r0, r3
   25418:	mov	r2, r4
   2541c:	mov	r1, r6
   25420:	bl	125a4 <memcpy@plt>
   25424:	mov	r3, r0
   25428:	mov	r0, r3
   2542c:	pop	{r4, r5, r6, r7, r8, pc}
   25430:	add	r1, r1, #1
   25434:	mvn	r2, #3
   25438:	bl	21ec0 <test_parse@@Base+0x534>
   2543c:	cmp	r0, #0
   25440:	beq	25408 <flatcc_builder_append_union_vector@@Base+0x60>
   25444:	mov	r3, r8
   25448:	b	25428 <flatcc_builder_append_union_vector@@Base+0x80>
   2544c:	bl	12908 <__assert_fail@plt+0x268>
   25450:	ldr	r3, [pc, #32]	; 25478 <flatcc_builder_append_union_vector@@Base+0xd0>
   25454:	ldr	r1, [pc, #32]	; 2547c <flatcc_builder_append_union_vector@@Base+0xd4>
   25458:	add	r3, pc, r3
   2545c:	ldr	r0, [pc, #28]	; 25480 <flatcc_builder_append_union_vector@@Base+0xd8>
   25460:	add	r3, r3, #1072	; 0x430
   25464:	ldr	r2, [pc, #24]	; 25484 <flatcc_builder_append_union_vector@@Base+0xdc>
   25468:	add	r3, r3, #4
   2546c:	add	r1, pc, r1
   25470:	add	r0, pc, r0
   25474:	bl	126a0 <__assert_fail@plt>
   25478:	andeq	r5, r0, r0, ror #27
   2547c:	andeq	r6, r0, ip, lsl r5
   25480:	andeq	r6, r0, r4, lsr r8
   25484:	muleq	r0, ip, r6

00025488 <flatcc_builder_create_string@@Base>:
   25488:	push	{r4, r5, r6, lr}
   2548c:	sub	sp, sp, #88	; 0x58
   25490:	ldr	lr, [r0, #136]	; 0x88
   25494:	mov	r4, r0
   25498:	add	r0, sp, #88	; 0x58
   2549c:	cmp	r2, #0
   254a0:	sub	r3, lr, r2
   254a4:	str	r2, [r0, #-76]!	; 0xffffffb4
   254a8:	sub	r3, r3, #1
   254ac:	str	r0, [sp, #24]
   254b0:	ldr	r5, [pc, #188]	; 25574 <flatcc_builder_create_string@@Base+0xec>
   254b4:	moveq	r0, #1
   254b8:	strne	r1, [sp, #32]
   254bc:	mov	ip, #4
   254c0:	moveq	r1, r0
   254c4:	movne	r1, #2
   254c8:	and	r3, r3, #3
   254cc:	ldr	r0, [pc, #164]	; 25578 <flatcc_builder_create_string@@Base+0xf0>
   254d0:	str	ip, [sp, #28]
   254d4:	add	r5, pc, r5
   254d8:	addne	ip, r2, ip
   254dc:	add	r3, r3, #1
   254e0:	add	r1, r1, #1
   254e4:	add	ip, ip, r3
   254e8:	add	r6, sp, #88	; 0x58
   254ec:	strne	r2, [sp, #36]	; 0x24
   254f0:	add	r1, r6, r1, lsl #3
   254f4:	str	ip, [sp, #16]
   254f8:	ldr	r0, [r5, r0]
   254fc:	sub	r5, lr, ip
   25500:	movne	r2, #3
   25504:	moveq	r2, #2
   25508:	cmp	lr, r5
   2550c:	str	r0, [r1, #-72]	; 0xffffffb8
   25510:	str	r3, [r1, #-68]	; 0xffffffbc
   25514:	str	r2, [sp, #20]
   25518:	ble	2554c <flatcc_builder_create_string@@Base+0xc4>
   2551c:	ldr	r0, [r4, #36]	; 0x24
   25520:	mov	r3, r5
   25524:	str	ip, [sp]
   25528:	add	r1, sp, #24
   2552c:	ldr	r6, [r4, #44]	; 0x2c
   25530:	blx	r6
   25534:	cmp	r0, #0
   25538:	bne	25550 <flatcc_builder_create_string@@Base+0xc8>
   2553c:	mov	r0, r5
   25540:	str	r5, [r4, #136]	; 0x88
   25544:	add	sp, sp, #88	; 0x58
   25548:	pop	{r4, r5, r6, pc}
   2554c:	bl	128d0 <__assert_fail@plt+0x230>
   25550:	ldr	r3, [pc, #36]	; 2557c <flatcc_builder_create_string@@Base+0xf4>
   25554:	ldr	r1, [pc, #36]	; 25580 <flatcc_builder_create_string@@Base+0xf8>
   25558:	ldr	r0, [pc, #36]	; 25584 <flatcc_builder_create_string@@Base+0xfc>
   2555c:	add	r3, pc, r3
   25560:	ldr	r2, [pc, #32]	; 25588 <flatcc_builder_create_string@@Base+0x100>
   25564:	add	r3, r3, #28
   25568:	add	r1, pc, r1
   2556c:	add	r0, pc, r0
   25570:	bl	126a0 <__assert_fail@plt>
   25574:	andeq	r7, r1, r4, lsr #22
   25578:	andeq	r0, r0, ip, rrx
   2557c:	ldrdeq	r5, [r0], -ip
   25580:	andeq	r6, r0, r0, lsr #8
   25584:	andeq	r6, r0, r4, lsr #9
   25588:	andeq	r0, r0, fp, lsl #5

0002558c <flatcc_builder_create_string_str@@Base>:
   2558c:	push	{r4, r5, r6, lr}
   25590:	mov	r5, r0
   25594:	mov	r0, r1
   25598:	mov	r4, r1
   2559c:	bl	12628 <strlen@plt>
   255a0:	mov	r1, r4
   255a4:	mov	r2, r0
   255a8:	mov	r0, r5
   255ac:	pop	{r4, r5, r6, lr}
   255b0:	b	25488 <flatcc_builder_create_string@@Base>

000255b4 <flatcc_builder_create_string_strn@@Base>:
   255b4:	push	{r4, r5, r6, lr}
   255b8:	mov	r4, r1
   255bc:	mov	r6, r0
   255c0:	mov	r1, #0
   255c4:	mov	r0, r4
   255c8:	mov	r5, r2
   255cc:	bl	12664 <memchr@plt>
   255d0:	mov	r1, r4
   255d4:	cmp	r0, #0
   255d8:	subne	r5, r0, r4
   255dc:	mov	r2, r5
   255e0:	mov	r0, r6
   255e4:	pop	{r4, r5, r6, lr}
   255e8:	b	25488 <flatcc_builder_create_string@@Base>

000255ec <flatcc_builder_end_string@@Base>:
   255ec:	ldr	r3, [r0, #32]
   255f0:	push	{r4, r5, r6, lr}
   255f4:	ldrh	r2, [r3, #14]
   255f8:	cmp	r2, #6
   255fc:	bne	256cc <flatcc_builder_end_string@@Base+0xe0>
   25600:	ldr	r2, [r3, #20]
   25604:	ldr	r3, [r0, #20]
   25608:	mov	r4, r0
   2560c:	cmp	r2, r3
   25610:	bne	256a4 <flatcc_builder_end_string@@Base+0xb8>
   25614:	ldr	r1, [r0, #16]
   25618:	bl	25488 <flatcc_builder_create_string@@Base>
   2561c:	subs	r5, r0, #0
   25620:	beq	2569c <flatcc_builder_end_string@@Base+0xb0>
   25624:	ldr	r2, [r4, #20]
   25628:	mov	r1, #0
   2562c:	ldr	r0, [r4, #16]
   25630:	bl	1264c <memset@plt>
   25634:	ldr	r3, [r4, #32]
   25638:	ldr	r2, [r4, #64]	; 0x40
   2563c:	ldrh	lr, [r4, #130]	; 0x82
   25640:	ldr	ip, [r3]
   25644:	ldr	r1, [r3, #4]
   25648:	ldrh	r0, [r4, #128]	; 0x80
   2564c:	sub	r2, r2, ip
   25650:	cmp	r2, r1
   25654:	movcs	r2, r1
   25658:	cmp	r0, lr
   2565c:	ldr	r0, [r4, #60]	; 0x3c
   25660:	ldr	r6, [r3, #8]
   25664:	str	r2, [r4, #24]
   25668:	add	r2, r0, ip
   2566c:	str	r2, [r4, #16]
   25670:	str	r6, [r4, #20]
   25674:	ldr	r2, [r4, #156]	; 0x9c
   25678:	str	ip, [r4, #28]
   2567c:	str	r1, [r3, #4]
   25680:	strhcc	lr, [r4, #128]	; 0x80
   25684:	ldrh	r1, [r3, #12]
   25688:	sub	r2, r2, #1
   2568c:	sub	r3, r3, #36	; 0x24
   25690:	str	r2, [r4, #156]	; 0x9c
   25694:	strh	r1, [r4, #130]	; 0x82
   25698:	str	r3, [r4, #32]
   2569c:	mov	r0, r5
   256a0:	pop	{r4, r5, r6, pc}
   256a4:	ldr	r3, [pc, #72]	; 256f4 <flatcc_builder_end_string@@Base+0x108>
   256a8:	ldr	r1, [pc, #72]	; 256f8 <flatcc_builder_end_string@@Base+0x10c>
   256ac:	add	r3, pc, r3
   256b0:	ldr	r0, [pc, #68]	; 256fc <flatcc_builder_end_string@@Base+0x110>
   256b4:	add	r3, r3, #1104	; 0x450
   256b8:	ldr	r2, [pc, #64]	; 25700 <flatcc_builder_end_string@@Base+0x114>
   256bc:	add	r3, r3, #8
   256c0:	add	r1, pc, r1
   256c4:	add	r0, pc, r0
   256c8:	bl	126a0 <__assert_fail@plt>
   256cc:	ldr	r3, [pc, #48]	; 25704 <flatcc_builder_end_string@@Base+0x118>
   256d0:	ldr	r1, [pc, #48]	; 25708 <flatcc_builder_end_string@@Base+0x11c>
   256d4:	add	r3, pc, r3
   256d8:	ldr	r0, [pc, #44]	; 2570c <flatcc_builder_end_string@@Base+0x120>
   256dc:	add	r3, r3, #1104	; 0x450
   256e0:	ldr	r2, [pc, #40]	; 25710 <flatcc_builder_end_string@@Base+0x124>
   256e4:	add	r3, r3, #8
   256e8:	add	r1, pc, r1
   256ec:	add	r0, pc, r0
   256f0:	bl	126a0 <__assert_fail@plt>
   256f4:	andeq	r5, r0, ip, lsl #23
   256f8:	andeq	r6, r0, r8, asr #5
   256fc:	andeq	r6, r0, r4, lsl r6
   25700:	andeq	r0, r0, r5, asr #13
   25704:	andeq	r5, r0, r4, ror #22
   25708:	andeq	r6, r0, r0, lsr #5
   2570c:	andeq	r6, r0, ip, lsl #9
   25710:	andeq	r0, r0, r4, asr #13

00025714 <flatcc_builder_string_edit@@Base>:
   25714:	ldr	r0, [r0, #16]
   25718:	bx	lr

0002571c <flatcc_builder_string_len@@Base>:
   2571c:	ldr	r3, [r0, #32]
   25720:	ldr	r0, [r3, #20]
   25724:	bx	lr

00025728 <flatcc_builder_table_add@@Base>:
   25728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2572c:	mov	r4, r0
   25730:	ldr	r0, [r0, #32]
   25734:	ldrh	r0, [r0, #14]
   25738:	cmp	r0, #3
   2573c:	bne	25854 <flatcc_builder_table_add@@Base+0x12c>
   25740:	ldr	r0, [pc, #308]	; 2587c <flatcc_builder_table_add@@Base+0x154>
   25744:	cmp	r1, r0
   25748:	bhi	2582c <flatcc_builder_table_add@@Base+0x104>
   2574c:	ldrh	r0, [r4, #130]	; 0x82
   25750:	lsl	r8, r1, #1
   25754:	cmp	r0, r3
   25758:	ldr	r0, [r4, #4]
   2575c:	strhcc	r3, [r4, #130]	; 0x82
   25760:	add	lr, r0, r8
   25764:	ldrh	r7, [r0, r8]
   25768:	cmp	r7, #0
   2576c:	bne	25804 <flatcc_builder_table_add@@Base+0xdc>
   25770:	ldr	ip, [r4, #12]
   25774:	ldr	r9, [pc, #260]	; 25880 <flatcc_builder_table_add@@Base+0x158>
   25778:	eor	ip, ip, r1
   2577c:	ldr	r0, [r4, #20]
   25780:	mul	ip, r9, ip
   25784:	sub	r6, r3, #1
   25788:	eor	ip, ip, r2
   2578c:	rsb	r3, r3, #0
   25790:	add	r6, r6, r0
   25794:	and	r6, r6, r3
   25798:	mul	ip, r9, ip
   2579c:	ldr	r3, [r4, #24]
   257a0:	add	r2, r2, r6
   257a4:	cmp	r2, r3
   257a8:	uxth	r5, r1
   257ac:	str	ip, [r4, #12]
   257b0:	str	r2, [r4, #20]
   257b4:	bcs	257dc <flatcc_builder_table_add@@Base+0xb4>
   257b8:	add	r3, r6, #4
   257bc:	strh	r3, [lr]
   257c0:	ldrh	r3, [r4, #8]
   257c4:	ldr	r0, [r4, #16]
   257c8:	cmp	r3, r5
   257cc:	addls	r5, r5, #1
   257d0:	strhls	r5, [r4, #8]
   257d4:	add	r0, r0, r6
   257d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257dc:	add	r1, r2, #1
   257e0:	mov	r0, r4
   257e4:	ldr	r2, [pc, #152]	; 25884 <flatcc_builder_table_add@@Base+0x15c>
   257e8:	bl	21ec0 <test_parse@@Base+0x534>
   257ec:	cmp	r0, #0
   257f0:	ldreq	lr, [r4, #4]
   257f4:	addeq	lr, lr, r8
   257f8:	beq	257b8 <flatcc_builder_table_add@@Base+0x90>
   257fc:	mov	r0, r7
   25800:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25804:	ldr	r3, [pc, #124]	; 25888 <flatcc_builder_table_add@@Base+0x160>
   25808:	ldr	r1, [pc, #124]	; 2588c <flatcc_builder_table_add@@Base+0x164>
   2580c:	add	r3, pc, r3
   25810:	ldr	r0, [pc, #120]	; 25890 <flatcc_builder_table_add@@Base+0x168>
   25814:	add	r3, r3, #1136	; 0x470
   25818:	ldr	r2, [pc, #116]	; 25894 <flatcc_builder_table_add@@Base+0x16c>
   2581c:	add	r3, r3, #4
   25820:	add	r1, pc, r1
   25824:	add	r0, pc, r0
   25828:	bl	126a0 <__assert_fail@plt>
   2582c:	ldr	r3, [pc, #100]	; 25898 <flatcc_builder_table_add@@Base+0x170>
   25830:	ldr	r1, [pc, #100]	; 2589c <flatcc_builder_table_add@@Base+0x174>
   25834:	add	r3, pc, r3
   25838:	ldr	r0, [pc, #96]	; 258a0 <flatcc_builder_table_add@@Base+0x178>
   2583c:	add	r3, r3, #1136	; 0x470
   25840:	ldr	r2, [pc, #92]	; 258a4 <flatcc_builder_table_add@@Base+0x17c>
   25844:	add	r3, r3, #4
   25848:	add	r1, pc, r1
   2584c:	add	r0, pc, r0
   25850:	bl	126a0 <__assert_fail@plt>
   25854:	ldr	r3, [pc, #76]	; 258a8 <flatcc_builder_table_add@@Base+0x180>
   25858:	ldr	r1, [pc, #76]	; 258ac <flatcc_builder_table_add@@Base+0x184>
   2585c:	add	r3, pc, r3
   25860:	ldr	r0, [pc, #72]	; 258b0 <flatcc_builder_table_add@@Base+0x188>
   25864:	add	r3, r3, #1136	; 0x470
   25868:	ldr	r2, [pc, #68]	; 258b4 <flatcc_builder_table_add@@Base+0x18c>
   2586c:	add	r3, r3, #4
   25870:	add	r1, pc, r1
   25874:	add	r0, pc, r0
   25878:	bl	126a0 <__assert_fail@plt>
   2587c:	strdeq	r7, [r0], -ip
   25880:			; <UNDEFINED> instruction: 0x9e3779b1
   25884:	strdeq	pc, [r0], -ip
   25888:	andeq	r5, r0, ip, lsr #20
   2588c:	andeq	r6, r0, r8, ror #2
   25890:	andeq	r6, r0, ip, ror #3
   25894:	strdeq	r0, [r0], -r8
   25898:	andeq	r5, r0, r4, lsl #20
   2589c:	andeq	r6, r0, r0, asr #2
   258a0:			; <UNDEFINED> instruction: 0x000064b0
   258a4:	andeq	r0, r0, lr, ror #13
   258a8:	ldrdeq	r5, [r0], -ip
   258ac:	andeq	r6, r0, r8, lsl r1
   258b0:	strdeq	r6, [r0], -r0
   258b4:	andeq	r0, r0, sp, ror #13

000258b8 <flatcc_builder_table_edit@@Base>:
   258b8:	ldr	r3, [r0, #32]
   258bc:	ldrh	r3, [r3, #14]
   258c0:	cmp	r3, #3
   258c4:	bne	258dc <flatcc_builder_table_edit@@Base+0x24>
   258c8:	ldr	r3, [r0, #20]
   258cc:	ldr	r0, [r0, #16]
   258d0:	sub	r1, r3, r1
   258d4:	add	r0, r0, r1
   258d8:	bx	lr
   258dc:	ldr	r3, [pc, #32]	; 25904 <flatcc_builder_table_edit@@Base+0x4c>
   258e0:	ldr	r1, [pc, #32]	; 25908 <flatcc_builder_table_edit@@Base+0x50>
   258e4:	ldr	r0, [pc, #32]	; 2590c <flatcc_builder_table_edit@@Base+0x54>
   258e8:	add	r3, pc, r3
   258ec:	push	{r4, lr}
   258f0:	add	r3, r3, #1168	; 0x490
   258f4:	ldr	r2, [pc, #20]	; 25910 <flatcc_builder_table_edit@@Base+0x58>
   258f8:	add	r1, pc, r1
   258fc:	add	r0, pc, r0
   25900:	bl	126a0 <__assert_fail@plt>
   25904:	andeq	r5, r0, r0, asr r9
   25908:	muleq	r0, r0, r0
   2590c:	andeq	r6, r0, r8, ror #6
   25910:	andeq	r0, r0, r2, lsl #14

00025914 <flatcc_builder_table_add_copy@@Base>:
   25914:	push	{r4, r5, r6, lr}
   25918:	mov	r4, r3
   2591c:	mov	r6, r2
   25920:	ldrh	r3, [sp, #16]
   25924:	mov	r2, r4
   25928:	bl	25728 <flatcc_builder_table_add@@Base>
   2592c:	subs	r5, r0, #0
   25930:	beq	25940 <flatcc_builder_table_add_copy@@Base+0x2c>
   25934:	mov	r2, r4
   25938:	mov	r1, r6
   2593c:	bl	125a4 <memcpy@plt>
   25940:	mov	r0, r5
   25944:	pop	{r4, r5, r6, pc}

00025948 <flatcc_builder_table_add_offset@@Base>:
   25948:	ldr	r3, [r0, #32]
   2594c:	push	{r4, r5, r6, r7, r8, lr}
   25950:	ldrh	r3, [r3, #14]
   25954:	cmp	r3, #3
   25958:	bne	25a70 <flatcc_builder_table_add_offset@@Base+0x128>
   2595c:	ldr	r3, [pc, #308]	; 25a98 <flatcc_builder_table_add_offset@@Base+0x150>
   25960:	cmp	r1, r3
   25964:	bhi	25a48 <flatcc_builder_table_add_offset@@Base+0x100>
   25968:	ldr	r3, [r0, #4]
   2596c:	lsl	r7, r1, #1
   25970:	mov	r4, r0
   25974:	ldrh	r6, [r3, r7]
   25978:	add	ip, r3, r7
   2597c:	cmp	r6, #0
   25980:	bne	25a20 <flatcc_builder_table_add_offset@@Base+0xd8>
   25984:	ldr	r3, [r0, #12]
   25988:	ldr	r2, [pc, #268]	; 25a9c <flatcc_builder_table_add_offset@@Base+0x154>
   2598c:	eor	r3, r3, r1
   25990:	ldr	r5, [r0, #20]
   25994:	mul	r3, r2, r3
   25998:	add	r5, r5, #3
   2599c:	eor	r3, r3, #4
   259a0:	bic	r5, r5, #3
   259a4:	mul	r3, r2, r3
   259a8:	ldr	lr, [r0, #24]
   259ac:	add	r2, r5, #4
   259b0:	cmp	r2, lr
   259b4:	uxth	r8, r1
   259b8:	str	r3, [r0, #12]
   259bc:	str	r2, [r0, #20]
   259c0:	bhi	259fc <flatcc_builder_table_add_offset@@Base+0xb4>
   259c4:	uxth	r2, r5
   259c8:	add	r3, r2, #4
   259cc:	strh	r3, [ip]
   259d0:	ldrh	r3, [r4, #8]
   259d4:	ldr	r0, [r4, #16]
   259d8:	cmp	r3, r8
   259dc:	ldr	r3, [r4]
   259e0:	addls	r1, r8, #1
   259e4:	strhls	r1, [r4, #8]
   259e8:	add	r1, r3, #2
   259ec:	str	r1, [r4]
   259f0:	add	r0, r0, r5
   259f4:	strh	r2, [r3]
   259f8:	pop	{r4, r5, r6, r7, r8, pc}
   259fc:	mov	r1, r2
   25a00:	ldr	r2, [pc, #152]	; 25aa0 <flatcc_builder_table_add_offset@@Base+0x158>
   25a04:	bl	21ec0 <test_parse@@Base+0x534>
   25a08:	cmp	r0, #0
   25a0c:	ldreq	ip, [r4, #4]
   25a10:	addeq	ip, ip, r7
   25a14:	beq	259c4 <flatcc_builder_table_add_offset@@Base+0x7c>
   25a18:	mov	r0, r6
   25a1c:	pop	{r4, r5, r6, r7, r8, pc}
   25a20:	ldr	r3, [pc, #124]	; 25aa4 <flatcc_builder_table_add_offset@@Base+0x15c>
   25a24:	ldr	r1, [pc, #124]	; 25aa8 <flatcc_builder_table_add_offset@@Base+0x160>
   25a28:	add	r3, pc, r3
   25a2c:	ldr	r0, [pc, #120]	; 25aac <flatcc_builder_table_add_offset@@Base+0x164>
   25a30:	add	r3, r3, #1184	; 0x4a0
   25a34:	ldr	r2, [pc, #116]	; 25ab0 <flatcc_builder_table_add_offset@@Base+0x168>
   25a38:	add	r3, r3, #12
   25a3c:	add	r1, pc, r1
   25a40:	add	r0, pc, r0
   25a44:	bl	126a0 <__assert_fail@plt>
   25a48:	ldr	r3, [pc, #100]	; 25ab4 <flatcc_builder_table_add_offset@@Base+0x16c>
   25a4c:	ldr	r1, [pc, #100]	; 25ab8 <flatcc_builder_table_add_offset@@Base+0x170>
   25a50:	add	r3, pc, r3
   25a54:	ldr	r0, [pc, #96]	; 25abc <flatcc_builder_table_add_offset@@Base+0x174>
   25a58:	add	r3, r3, #1184	; 0x4a0
   25a5c:	ldr	r2, [pc, #92]	; 25ac0 <flatcc_builder_table_add_offset@@Base+0x178>
   25a60:	add	r3, r3, #12
   25a64:	add	r1, pc, r1
   25a68:	add	r0, pc, r0
   25a6c:	bl	126a0 <__assert_fail@plt>
   25a70:	ldr	r3, [pc, #76]	; 25ac4 <flatcc_builder_table_add_offset@@Base+0x17c>
   25a74:	ldr	r1, [pc, #76]	; 25ac8 <flatcc_builder_table_add_offset@@Base+0x180>
   25a78:	add	r3, pc, r3
   25a7c:	ldr	r0, [pc, #72]	; 25acc <flatcc_builder_table_add_offset@@Base+0x184>
   25a80:	add	r3, r3, #1184	; 0x4a0
   25a84:	ldr	r2, [pc, #68]	; 25ad0 <flatcc_builder_table_add_offset@@Base+0x188>
   25a88:	add	r3, r3, #12
   25a8c:	add	r1, pc, r1
   25a90:	add	r0, pc, r0
   25a94:	bl	126a0 <__assert_fail@plt>
   25a98:	strdeq	r7, [r0], -ip
   25a9c:			; <UNDEFINED> instruction: 0x9e3779b1
   25aa0:	strdeq	pc, [r0], -ip
   25aa4:	andeq	r5, r0, r0, lsl r8
   25aa8:	andeq	r5, r0, ip, asr #30
   25aac:	ldrdeq	r5, [r0], -r0
   25ab0:	andeq	r0, r0, fp, lsl r7
   25ab4:	andeq	r5, r0, r8, ror #15
   25ab8:	andeq	r5, r0, r4, lsr #30
   25abc:	muleq	r0, r4, r2
   25ac0:	andeq	r0, r0, r4, lsl r7
   25ac4:	andeq	r5, r0, r0, asr #15
   25ac8:	strdeq	r5, [r0], -ip
   25acc:	ldrdeq	r6, [r0], -r4
   25ad0:	andeq	r0, r0, r3, lsl r7

00025ad4 <flatcc_builder_table_add_union@@Base>:
   25ad4:	push	{r4, r5, r6, r7, lr}
   25ad8:	sub	sp, sp, #12
   25adc:	add	ip, sp, #8
   25ae0:	stmdb	ip, {r2, r3}
   25ae4:	ldr	r3, [r0, #32]
   25ae8:	ldrb	r5, [sp]
   25aec:	ldr	r6, [sp, #4]
   25af0:	ldrh	r3, [r3, #14]
   25af4:	cmp	r3, #3
   25af8:	bne	25b80 <flatcc_builder_table_add_union@@Base+0xac>
   25afc:	cmp	r5, #0
   25b00:	mov	r4, r0
   25b04:	mov	r7, r1
   25b08:	beq	25b50 <flatcc_builder_table_add_union@@Base+0x7c>
   25b0c:	cmp	r6, #0
   25b10:	beq	25b24 <flatcc_builder_table_add_union@@Base+0x50>
   25b14:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   25b18:	cmp	r0, #0
   25b1c:	strne	r6, [r0]
   25b20:	beq	25bd0 <flatcc_builder_table_add_union@@Base+0xfc>
   25b24:	mov	r3, #1
   25b28:	sub	r1, r7, #1
   25b2c:	mov	r0, r4
   25b30:	mov	r2, r3
   25b34:	bl	25728 <flatcc_builder_table_add@@Base>
   25b38:	cmp	r0, #0
   25b3c:	beq	25ba8 <flatcc_builder_table_add_union@@Base+0xd4>
   25b40:	strb	r5, [r0]
   25b44:	mov	r0, #0
   25b48:	add	sp, sp, #12
   25b4c:	pop	{r4, r5, r6, r7, pc}
   25b50:	cmp	r6, #0
   25b54:	beq	25b24 <flatcc_builder_table_add_union@@Base+0x50>
   25b58:	ldr	r3, [pc, #152]	; 25bf8 <flatcc_builder_table_add_union@@Base+0x124>
   25b5c:	ldr	r1, [pc, #152]	; 25bfc <flatcc_builder_table_add_union@@Base+0x128>
   25b60:	add	r3, pc, r3
   25b64:	ldr	r0, [pc, #148]	; 25c00 <flatcc_builder_table_add_union@@Base+0x12c>
   25b68:	add	r3, r3, #1216	; 0x4c0
   25b6c:	ldr	r2, [pc, #144]	; 25c04 <flatcc_builder_table_add_union@@Base+0x130>
   25b70:	add	r3, r3, #12
   25b74:	add	r1, pc, r1
   25b78:	add	r0, pc, r0
   25b7c:	bl	126a0 <__assert_fail@plt>
   25b80:	ldr	r3, [pc, #128]	; 25c08 <flatcc_builder_table_add_union@@Base+0x134>
   25b84:	ldr	r1, [pc, #128]	; 25c0c <flatcc_builder_table_add_union@@Base+0x138>
   25b88:	add	r3, pc, r3
   25b8c:	ldr	r0, [pc, #124]	; 25c10 <flatcc_builder_table_add_union@@Base+0x13c>
   25b90:	add	r3, r3, #1216	; 0x4c0
   25b94:	ldr	r2, [pc, #120]	; 25c14 <flatcc_builder_table_add_union@@Base+0x140>
   25b98:	add	r3, r3, #12
   25b9c:	add	r1, pc, r1
   25ba0:	add	r0, pc, r0
   25ba4:	bl	126a0 <__assert_fail@plt>
   25ba8:	ldr	r3, [pc, #104]	; 25c18 <flatcc_builder_table_add_union@@Base+0x144>
   25bac:	ldr	r1, [pc, #104]	; 25c1c <flatcc_builder_table_add_union@@Base+0x148>
   25bb0:	add	r3, pc, r3
   25bb4:	ldr	r0, [pc, #100]	; 25c20 <flatcc_builder_table_add_union@@Base+0x14c>
   25bb8:	add	r3, r3, #1216	; 0x4c0
   25bbc:	ldr	r2, [pc, #96]	; 25c24 <flatcc_builder_table_add_union@@Base+0x150>
   25bc0:	add	r3, r3, #12
   25bc4:	add	r1, pc, r1
   25bc8:	add	r0, pc, r0
   25bcc:	bl	126a0 <__assert_fail@plt>
   25bd0:	ldr	r3, [pc, #80]	; 25c28 <flatcc_builder_table_add_union@@Base+0x154>
   25bd4:	ldr	r1, [pc, #80]	; 25c2c <flatcc_builder_table_add_union@@Base+0x158>
   25bd8:	add	r3, pc, r3
   25bdc:	ldr	r0, [pc, #76]	; 25c30 <flatcc_builder_table_add_union@@Base+0x15c>
   25be0:	add	r3, r3, #1216	; 0x4c0
   25be4:	ldr	r2, [pc, #72]	; 25c34 <flatcc_builder_table_add_union@@Base+0x160>
   25be8:	add	r3, r3, #12
   25bec:	add	r1, pc, r1
   25bf0:	add	r0, pc, r0
   25bf4:	bl	126a0 <__assert_fail@plt>
   25bf8:	ldrdeq	r5, [r0], -r8
   25bfc:	andeq	r5, r0, r4, lsl lr
   25c00:	andeq	r6, r0, r8, asr #3
   25c04:	andeq	r0, r0, pc, ror #11
   25c08:			; <UNDEFINED> instruction: 0x000056b0
   25c0c:	andeq	r5, r0, ip, ror #27
   25c10:	andeq	r6, r0, r4, asr #1
   25c14:	andeq	r0, r0, lr, ror #11
   25c18:	andeq	r5, r0, r8, lsl #13
   25c1c:	andeq	r5, r0, r4, asr #27
   25c20:	andeq	r6, r0, r8, lsr #3
   25c24:	strdeq	r0, [r0], -r6
   25c28:	andeq	r5, r0, r0, ror #12
   25c2c:	muleq	r0, ip, sp
   25c30:	andeq	r6, r0, r4, ror r1
   25c34:	strdeq	r0, [r0], -r2

00025c38 <flatcc_builder_table_add_union_vector@@Base>:
   25c38:	push	{r4, r5, r6, r7, lr}
   25c3c:	sub	sp, sp, #12
   25c40:	add	ip, sp, #8
   25c44:	stmdb	ip, {r2, r3}
   25c48:	ldr	r3, [r0, #32]
   25c4c:	ldr	r4, [sp]
   25c50:	ldr	r6, [sp, #4]
   25c54:	ldrh	r3, [r3, #14]
   25c58:	cmp	r3, #3
   25c5c:	bne	25d00 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   25c60:	clz	r3, r6
   25c64:	clz	r2, r4
   25c68:	lsr	r3, r3, #5
   25c6c:	lsr	r2, r2, #5
   25c70:	cmp	r2, r3
   25c74:	beq	25c94 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   25c78:	adds	r4, r4, #0
   25c7c:	movne	r4, #1
   25c80:	cmp	r4, r3
   25c84:	mvnne	r0, #0
   25c88:	beq	25d28 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   25c8c:	add	sp, sp, #12
   25c90:	pop	{r4, r5, r6, r7, pc}
   25c94:	cmp	r4, #0
   25c98:	moveq	r0, r4
   25c9c:	beq	25c8c <flatcc_builder_table_add_union_vector@@Base+0x54>
   25ca0:	mov	r7, r1
   25ca4:	sub	r1, r1, #1
   25ca8:	mov	r5, r0
   25cac:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   25cb0:	cmp	r0, #0
   25cb4:	beq	25d50 <flatcc_builder_table_add_union_vector@@Base+0x118>
   25cb8:	str	r4, [r0]
   25cbc:	mov	r1, r7
   25cc0:	mov	r0, r5
   25cc4:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   25cc8:	cmp	r0, #0
   25ccc:	strne	r6, [r0]
   25cd0:	movne	r0, #0
   25cd4:	bne	25c8c <flatcc_builder_table_add_union_vector@@Base+0x54>
   25cd8:	ldr	r3, [pc, #152]	; 25d78 <flatcc_builder_table_add_union_vector@@Base+0x140>
   25cdc:	ldr	r1, [pc, #152]	; 25d7c <flatcc_builder_table_add_union_vector@@Base+0x144>
   25ce0:	add	r3, pc, r3
   25ce4:	ldr	r0, [pc, #148]	; 25d80 <flatcc_builder_table_add_union_vector@@Base+0x148>
   25ce8:	add	r3, r3, #1248	; 0x4e0
   25cec:	ldr	r2, [pc, #144]	; 25d84 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   25cf0:	add	r3, r3, #12
   25cf4:	add	r1, pc, r1
   25cf8:	add	r0, pc, r0
   25cfc:	bl	126a0 <__assert_fail@plt>
   25d00:	ldr	r3, [pc, #128]	; 25d88 <flatcc_builder_table_add_union_vector@@Base+0x150>
   25d04:	ldr	r1, [pc, #128]	; 25d8c <flatcc_builder_table_add_union_vector@@Base+0x154>
   25d08:	add	r3, pc, r3
   25d0c:	ldr	r0, [pc, #124]	; 25d90 <flatcc_builder_table_add_union_vector@@Base+0x158>
   25d10:	add	r3, r3, #1248	; 0x4e0
   25d14:	mov	r2, #1536	; 0x600
   25d18:	add	r3, r3, #12
   25d1c:	add	r1, pc, r1
   25d20:	add	r0, pc, r0
   25d24:	bl	126a0 <__assert_fail@plt>
   25d28:	ldr	r3, [pc, #100]	; 25d94 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   25d2c:	ldr	r1, [pc, #100]	; 25d98 <flatcc_builder_table_add_union_vector@@Base+0x160>
   25d30:	add	r3, pc, r3
   25d34:	ldr	r0, [pc, #96]	; 25d9c <flatcc_builder_table_add_union_vector@@Base+0x164>
   25d38:	add	r3, r3, #1248	; 0x4e0
   25d3c:	ldr	r2, [pc, #92]	; 25da0 <flatcc_builder_table_add_union_vector@@Base+0x168>
   25d40:	add	r3, r3, #12
   25d44:	add	r1, pc, r1
   25d48:	add	r0, pc, r0
   25d4c:	bl	126a0 <__assert_fail@plt>
   25d50:	ldr	r3, [pc, #76]	; 25da4 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   25d54:	ldr	r1, [pc, #76]	; 25da8 <flatcc_builder_table_add_union_vector@@Base+0x170>
   25d58:	add	r3, pc, r3
   25d5c:	ldr	r0, [pc, #72]	; 25dac <flatcc_builder_table_add_union_vector@@Base+0x174>
   25d60:	add	r3, r3, #1248	; 0x4e0
   25d64:	ldr	r2, [pc, #68]	; 25db0 <flatcc_builder_table_add_union_vector@@Base+0x178>
   25d68:	add	r3, r3, #12
   25d6c:	add	r1, pc, r1
   25d70:	add	r0, pc, r0
   25d74:	bl	126a0 <__assert_fail@plt>
   25d78:	andeq	r5, r0, r8, asr r5
   25d7c:	muleq	r0, r4, ip
   25d80:	andeq	r6, r0, ip, rrx
   25d84:	andeq	r0, r0, r8, lsl #12
   25d88:	andeq	r5, r0, r0, lsr r5
   25d8c:	andeq	r5, r0, ip, ror #24
   25d90:	andeq	r5, r0, r4, asr #30
   25d94:	andeq	r5, r0, r8, lsl #10
   25d98:	andeq	r5, r0, r4, asr #24
   25d9c:	andeq	r6, r0, r4, lsr r0
   25da0:	andeq	r0, r0, r1, lsl #12
   25da4:	andeq	r5, r0, r0, ror #9
   25da8:	andeq	r5, r0, ip, lsl ip
   25dac:	strdeq	r5, [r0], -r4
   25db0:	andeq	r0, r0, r4, lsl #12

00025db4 <flatcc_builder_push_buffer_alignment@@Base>:
   25db4:	mov	r3, r0
   25db8:	mov	r2, #4
   25dbc:	ldrh	r0, [r0, #128]	; 0x80
   25dc0:	strh	r2, [r3, #128]	; 0x80
   25dc4:	bx	lr

00025dc8 <flatcc_builder_pop_buffer_alignment@@Base>:
   25dc8:	ldrh	r3, [r0, #128]	; 0x80
   25dcc:	cmp	r3, r1
   25dd0:	strhcc	r1, [r0, #128]	; 0x80
   25dd4:	bx	lr

00025dd8 <flatcc_builder_get_buffer_alignment@@Base>:
   25dd8:	ldrh	r0, [r0, #128]	; 0x80
   25ddc:	bx	lr

00025de0 <flatcc_builder_set_vtable_clustering@@Base>:
   25de0:	clz	r1, r1
   25de4:	lsr	r1, r1, #5
   25de8:	str	r1, [r0, #180]	; 0xb4
   25dec:	bx	lr

00025df0 <flatcc_builder_set_block_align@@Base>:
   25df0:	strh	r1, [r0, #132]	; 0x84
   25df4:	bx	lr

00025df8 <flatcc_builder_get_level@@Base>:
   25df8:	ldr	r0, [r0, #156]	; 0x9c
   25dfc:	bx	lr

00025e00 <flatcc_builder_set_max_level@@Base>:
   25e00:	ldr	r3, [r0, #160]	; 0xa0
   25e04:	str	r1, [r0, #176]	; 0xb0
   25e08:	cmp	r1, r3
   25e0c:	strgt	r1, [r0, #160]	; 0xa0
   25e10:	bx	lr

00025e14 <flatcc_builder_get_buffer_size@@Base>:
   25e14:	ldr	r2, [r0, #140]	; 0x8c
   25e18:	ldr	r0, [r0, #136]	; 0x88
   25e1c:	sub	r0, r2, r0
   25e20:	bx	lr

00025e24 <flatcc_builder_get_buffer_start@@Base>:
   25e24:	ldr	r0, [r0, #136]	; 0x88
   25e28:	bx	lr

00025e2c <flatcc_builder_get_buffer_end@@Base>:
   25e2c:	ldr	r0, [r0, #140]	; 0x8c
   25e30:	bx	lr

00025e34 <flatcc_builder_set_vtable_cache_limit@@Base>:
   25e34:	str	r1, [r0, #172]	; 0xac
   25e38:	bx	lr

00025e3c <flatcc_builder_set_identifier@@Base>:
   25e3c:	ldr	r3, [pc, #32]	; 25e64 <flatcc_builder_set_identifier@@Base+0x28>
   25e40:	cmp	r1, #0
   25e44:	add	r3, pc, r3
   25e48:	beq	25e58 <flatcc_builder_set_identifier@@Base+0x1c>
   25e4c:	ldr	r3, [r1]
   25e50:	str	r3, [r0, #168]	; 0xa8
   25e54:	bx	lr
   25e58:	ldr	r2, [pc, #8]	; 25e68 <flatcc_builder_set_identifier@@Base+0x2c>
   25e5c:	ldr	r1, [r3, r2]
   25e60:	b	25e4c <flatcc_builder_set_identifier@@Base+0x10>
   25e64:			; <UNDEFINED> instruction: 0x000171b4
   25e68:	andeq	r0, r0, ip, rrx

00025e6c <flatcc_builder_get_type@@Base>:
   25e6c:	ldr	r0, [r0, #32]
   25e70:	cmp	r0, #0
   25e74:	ldrhne	r0, [r0, #14]
   25e78:	bx	lr

00025e7c <flatcc_builder_get_type_at@@Base>:
   25e7c:	cmp	r1, #0
   25e80:	ble	25ea8 <flatcc_builder_get_type_at@@Base+0x2c>
   25e84:	ldr	r3, [r0, #156]	; 0x9c
   25e88:	cmp	r1, r3
   25e8c:	bgt	25ea8 <flatcc_builder_get_type_at@@Base+0x2c>
   25e90:	sub	r1, r1, r3
   25e94:	ldr	r3, [r0, #32]
   25e98:	add	r1, r1, r1, lsl #3
   25e9c:	add	r1, r3, r1, lsl #2
   25ea0:	ldrh	r0, [r1, #14]
   25ea4:	bx	lr
   25ea8:	mov	r0, #0
   25eac:	bx	lr

00025eb0 <flatcc_builder_get_direct_buffer@@Base>:
   25eb0:	ldr	r3, [r0, #184]	; 0xb8
   25eb4:	cmp	r3, #0
   25eb8:	beq	25ecc <flatcc_builder_get_direct_buffer@@Base+0x1c>
   25ebc:	ldr	r2, [r0, #188]	; 0xbc
   25ec0:	ldr	r3, [r0, #192]	; 0xc0
   25ec4:	cmp	r2, r3
   25ec8:	beq	25ee0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   25ecc:	cmp	r1, #0
   25ed0:	movne	r0, #0
   25ed4:	strne	r0, [r1]
   25ed8:	moveq	r0, r1
   25edc:	bx	lr
   25ee0:	cmp	r1, #0
   25ee4:	ldrne	r3, [r0, #212]	; 0xd4
   25ee8:	ldr	r0, [r0, #196]	; 0xc4
   25eec:	strne	r3, [r1]
   25ef0:	bx	lr

00025ef4 <flatcc_builder_copy_buffer@@Base>:
   25ef4:	ldr	r3, [r0, #184]	; 0xb8
   25ef8:	cmp	r3, #0
   25efc:	beq	25f3c <flatcc_builder_copy_buffer@@Base+0x48>
   25f00:	push	{r4, lr}
   25f04:	add	r0, r0, #188	; 0xbc
   25f08:	bl	2660c <flatcc_emitter_copy_buffer@@Base>
   25f0c:	cmp	r0, #0
   25f10:	popne	{r4, pc}
   25f14:	ldr	r3, [pc, #40]	; 25f44 <flatcc_builder_copy_buffer@@Base+0x50>
   25f18:	ldr	r1, [pc, #40]	; 25f48 <flatcc_builder_copy_buffer@@Base+0x54>
   25f1c:	add	r3, pc, r3
   25f20:	ldr	r0, [pc, #36]	; 25f4c <flatcc_builder_copy_buffer@@Base+0x58>
   25f24:	add	r3, r3, #1296	; 0x510
   25f28:	ldr	r2, [pc, #32]	; 25f50 <flatcc_builder_copy_buffer@@Base+0x5c>
   25f2c:	add	r3, r3, #4
   25f30:	add	r1, pc, r1
   25f34:	add	r0, pc, r0
   25f38:	bl	126a0 <__assert_fail@plt>
   25f3c:	mov	r0, r3
   25f40:	bx	lr
   25f44:	andeq	r5, r0, ip, lsl r3
   25f48:	andeq	r5, r0, r8, asr sl
   25f4c:	andeq	r5, r0, r0, ror lr
   25f50:	andeq	r0, r0, r6, lsl #15

00025f54 <flatcc_builder_finalize_buffer@@Base>:
   25f54:	push	{r4, r5, r6, lr}
   25f58:	mov	r5, r1
   25f5c:	mov	r6, r0
   25f60:	bl	25e14 <flatcc_builder_get_buffer_size@@Base>
   25f64:	cmp	r5, #0
   25f68:	strne	r0, [r5]
   25f6c:	mov	r4, r0
   25f70:	bl	125f8 <malloc@plt>
   25f74:	subs	r5, r0, #0
   25f78:	beq	25f9c <flatcc_builder_finalize_buffer@@Base+0x48>
   25f7c:	mov	r2, r4
   25f80:	mov	r0, r6
   25f84:	mov	r1, r5
   25f88:	bl	25ef4 <flatcc_builder_copy_buffer@@Base>
   25f8c:	cmp	r0, #0
   25f90:	beq	25fc0 <flatcc_builder_finalize_buffer@@Base+0x6c>
   25f94:	mov	r0, r5
   25f98:	pop	{r4, r5, r6, pc}
   25f9c:	ldr	r3, [pc, #64]	; 25fe4 <flatcc_builder_finalize_buffer@@Base+0x90>
   25fa0:	ldr	r1, [pc, #64]	; 25fe8 <flatcc_builder_finalize_buffer@@Base+0x94>
   25fa4:	ldr	r0, [pc, #64]	; 25fec <flatcc_builder_finalize_buffer@@Base+0x98>
   25fa8:	add	r3, pc, r3
   25fac:	ldr	r2, [pc, #60]	; 25ff0 <flatcc_builder_finalize_buffer@@Base+0x9c>
   25fb0:	add	r3, r3, #1328	; 0x530
   25fb4:	add	r1, pc, r1
   25fb8:	add	r0, pc, r0
   25fbc:	bl	126a0 <__assert_fail@plt>
   25fc0:	ldr	r3, [pc, #44]	; 25ff4 <flatcc_builder_finalize_buffer@@Base+0xa0>
   25fc4:	ldr	r1, [pc, #44]	; 25ff8 <flatcc_builder_finalize_buffer@@Base+0xa4>
   25fc8:	ldr	r0, [pc, #44]	; 25ffc <flatcc_builder_finalize_buffer@@Base+0xa8>
   25fcc:	add	r3, pc, r3
   25fd0:	ldr	r2, [pc, #40]	; 26000 <flatcc_builder_finalize_buffer@@Base+0xac>
   25fd4:	add	r3, r3, #1328	; 0x530
   25fd8:	add	r1, pc, r1
   25fdc:	add	r0, pc, r0
   25fe0:	bl	126a0 <__assert_fail@plt>
   25fe4:	muleq	r0, r0, r2
   25fe8:	ldrdeq	r5, [r0], -r4
   25fec:	andeq	r5, r0, r8, asr sl
   25ff0:	muleq	r0, r8, r7
   25ff4:	andeq	r5, r0, ip, ror #4
   25ff8:			; <UNDEFINED> instruction: 0x000059b0
   25ffc:	andeq	r5, r0, r4, lsr sl
   26000:	muleq	r0, ip, r7

00026004 <flatcc_builder_finalize_aligned_buffer@@Base>:
   26004:	push	{r4, r5, r6, r7, lr}
   26008:	sub	sp, sp, #12
   2600c:	mov	r6, r1
   26010:	mov	r7, r0
   26014:	bl	25e14 <flatcc_builder_get_buffer_size@@Base>
   26018:	cmp	r6, #0
   2601c:	strne	r0, [r6]
   26020:	mov	r4, r0
   26024:	mov	r0, r7
   26028:	bl	25dd8 <flatcc_builder_get_buffer_alignment@@Base>
   2602c:	sub	r4, r4, #1
   26030:	mov	r1, r0
   26034:	rsb	r3, r0, #0
   26038:	add	r4, r4, r0
   2603c:	add	r0, sp, #8
   26040:	cmp	r1, #4
   26044:	and	r4, r4, r3
   26048:	mov	r3, #0
   2604c:	movcc	r1, #4
   26050:	mov	r2, r4
   26054:	str	r3, [r0, #-4]!
   26058:	bl	12640 <posix_memalign@plt>
   2605c:	cmp	r0, #0
   26060:	beq	26090 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   26064:	ldr	r0, [sp, #4]
   26068:	cmp	r0, #0
   2606c:	beq	26074 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   26070:	bl	12598 <free@plt>
   26074:	cmp	r6, #0
   26078:	moveq	r5, r6
   2607c:	movne	r5, #0
   26080:	strne	r5, [r6]
   26084:	mov	r0, r5
   26088:	add	sp, sp, #12
   2608c:	pop	{r4, r5, r6, r7, pc}
   26090:	ldr	r5, [sp, #4]
   26094:	cmp	r5, #0
   26098:	beq	26074 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   2609c:	mov	r2, r4
   260a0:	mov	r0, r7
   260a4:	mov	r1, r5
   260a8:	bl	25ef4 <flatcc_builder_copy_buffer@@Base>
   260ac:	cmp	r0, #0
   260b0:	bne	26084 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   260b4:	mov	r0, r5
   260b8:	b	26070 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

000260bc <flatcc_builder_aligned_alloc@@Base>:
   260bc:	push	{r4, lr}
   260c0:	sub	sp, sp, #8
   260c4:	add	r3, sp, #8
   260c8:	cmp	r0, #4
   260cc:	mov	r4, #0
   260d0:	mov	r2, r1
   260d4:	str	r4, [r3, #-4]!
   260d8:	movcs	r1, r0
   260dc:	movcc	r1, #4
   260e0:	mov	r0, r3
   260e4:	bl	12640 <posix_memalign@plt>
   260e8:	cmp	r0, r4
   260ec:	ldr	r0, [sp, #4]
   260f0:	beq	26104 <flatcc_builder_aligned_alloc@@Base+0x48>
   260f4:	cmp	r0, #0
   260f8:	beq	26104 <flatcc_builder_aligned_alloc@@Base+0x48>
   260fc:	bl	12598 <free@plt>
   26100:	mov	r0, r4
   26104:	add	sp, sp, #8
   26108:	pop	{r4, pc}

0002610c <flatcc_builder_aligned_free@@Base>:
   2610c:	b	12598 <free@plt>

00026110 <flatcc_builder_get_emit_context@@Base>:
   26110:	ldr	r0, [r0, #36]	; 0x24
   26114:	bx	lr

00026118 <flatcc_emitter_recycle_page@@Base>:
   26118:	ldr	r3, [r0]
   2611c:	cmp	r3, r1
   26120:	beq	26168 <flatcc_emitter_recycle_page@@Base+0x50>
   26124:	ldr	r2, [r0, #4]
   26128:	cmp	r1, r2
   2612c:	beq	26168 <flatcc_emitter_recycle_page@@Base+0x50>
   26130:	ldr	ip, [r1, #2944]	; 0xb80
   26134:	ldr	r2, [r1, #2948]	; 0xb84
   26138:	push	{lr}		; (str lr, [sp, #-4]!)
   2613c:	mov	r0, #0
   26140:	str	r2, [ip, #2948]	; 0xb84
   26144:	ldr	r2, [r3, #2948]	; 0xb84
   26148:	ldr	lr, [r1, #2948]	; 0xb84
   2614c:	str	ip, [lr, #2944]	; 0xb80
   26150:	str	r3, [r1, #2944]	; 0xb80
   26154:	str	r2, [r1, #2948]	; 0xb84
   26158:	str	r1, [r2, #2944]	; 0xb80
   2615c:	ldr	r3, [r1, #2944]	; 0xb80
   26160:	str	r1, [r3, #2948]	; 0xb84
   26164:	pop	{pc}		; (ldr pc, [sp], #4)
   26168:	mvn	r0, #0
   2616c:	bx	lr

00026170 <flatcc_emitter_reset@@Base>:
   26170:	ldr	r2, [r0]
   26174:	cmp	r2, #0
   26178:	bxeq	lr
   2617c:	ldr	r3, [r0, #32]
   26180:	mov	r1, #1472	; 0x5c0
   26184:	push	{r4, lr}
   26188:	cmp	r3, #0
   2618c:	str	r1, [r0, #12]
   26190:	str	r1, [r0, #20]
   26194:	ldr	r1, [r0, #24]
   26198:	add	ip, r2, #1472	; 0x5c0
   2619c:	moveq	r3, r1
   261a0:	stmib	r0, {r2, ip}
   261a4:	str	ip, [r0, #16]
   261a8:	add	ip, r3, r3, lsl #1
   261ac:	lsr	r3, r1, #2
   261b0:	add	r3, r3, ip, lsr #2
   261b4:	ldr	ip, [r0, #28]
   261b8:	ldr	lr, [pc, #104]	; 26228 <flatcc_emitter_reset@@Base+0xb8>
   261bc:	cmp	ip, r3, lsl #1
   261c0:	mov	r1, #0
   261c4:	str	lr, [r2, #2952]	; 0xb88
   261c8:	str	r3, [r0, #32]
   261cc:	str	r1, [r0, #24]
   261d0:	popls	{r4, pc}
   261d4:	ldr	r3, [r2, #2944]	; 0xb80
   261d8:	mov	r4, r0
   261dc:	cmp	r2, r3
   261e0:	popeq	{r4, pc}
   261e4:	ldr	r1, [r3, #2944]	; 0xb80
   261e8:	mov	r0, r3
   261ec:	str	r1, [r2, #2944]	; 0xb80
   261f0:	ldr	r3, [r3, #2944]	; 0xb80
   261f4:	str	r2, [r3, #2948]	; 0xb84
   261f8:	bl	12598 <free@plt>
   261fc:	ldr	r3, [r4, #28]
   26200:	ldr	r2, [r4, #32]
   26204:	sub	r3, r3, #2944	; 0xb80
   26208:	str	r3, [r4, #28]
   2620c:	cmp	r3, r2, lsl #1
   26210:	popls	{r4, pc}
   26214:	ldm	r4, {r1, r2}
   26218:	ldr	r3, [r2, #2944]	; 0xb80
   2621c:	cmp	r3, r1
   26220:	bne	261e4 <flatcc_emitter_reset@@Base+0x74>
   26224:	pop	{r4, pc}
   26228:			; <UNDEFINED> instruction: 0xfffffa40

0002622c <flatcc_emitter_clear@@Base>:
   2622c:	ldr	r3, [r0]
   26230:	cmp	r3, #0
   26234:	bxeq	lr
   26238:	ldr	r2, [r3, #2948]	; 0xb84
   2623c:	mov	r1, #0
   26240:	push	{r4, r5, r6, lr}
   26244:	mov	r5, r0
   26248:	str	r1, [r2, #2944]	; 0xb80
   2624c:	ldr	r4, [r3, #2944]	; 0xb80
   26250:	cmp	r4, r1
   26254:	bne	26260 <flatcc_emitter_clear@@Base+0x34>
   26258:	b	26290 <flatcc_emitter_clear@@Base+0x64>
   2625c:	mov	r4, r3
   26260:	ldr	r0, [r4, #2948]	; 0xb84
   26264:	bl	12598 <free@plt>
   26268:	ldr	r3, [r4, #2944]	; 0xb80
   2626c:	cmp	r3, #0
   26270:	bne	2625c <flatcc_emitter_clear@@Base+0x30>
   26274:	mov	r0, r4
   26278:	bl	12598 <free@plt>
   2627c:	mov	r0, r5
   26280:	mov	r2, #36	; 0x24
   26284:	mov	r1, #0
   26288:	pop	{r4, r5, r6, lr}
   2628c:	b	1264c <memset@plt>
   26290:	mov	r4, r3
   26294:	b	26274 <flatcc_emitter_clear@@Base+0x48>

00026298 <flatcc_emitter@@Base>:
   26298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2629c:	sub	sp, sp, #12
   262a0:	mov	r4, r0
   262a4:	ldr	ip, [sp, #48]	; 0x30
   262a8:	ldr	r0, [r0, #24]
   262ac:	cmp	r3, #0
   262b0:	add	r0, r0, ip
   262b4:	str	r0, [r4, #24]
   262b8:	blt	2647c <flatcc_emitter@@Base+0x1e4>
   262bc:	ldr	r0, [r4, #20]
   262c0:	cmp	ip, r0
   262c4:	bls	26350 <flatcc_emitter@@Base+0xb8>
   262c8:	cmp	r2, #0
   262cc:	addne	r7, r1, #8
   262d0:	movne	r8, r2
   262d4:	movne	r9, #2944	; 0xb80
   262d8:	beq	26344 <flatcc_emitter@@Base+0xac>
   262dc:	ldr	r6, [r7, #-4]
   262e0:	ldr	sl, [r7, #-8]
   262e4:	cmp	r6, #0
   262e8:	beq	26338 <flatcc_emitter@@Base+0xa0>
   262ec:	cmp	r0, r6
   262f0:	mov	r5, r0
   262f4:	bcs	26398 <flatcc_emitter@@Base+0x100>
   262f8:	cmp	r0, #0
   262fc:	beq	263a4 <flatcc_emitter@@Base+0x10c>
   26300:	sub	r6, r6, r0
   26304:	mov	r1, sl
   26308:	mov	r2, r5
   2630c:	ldr	r0, [r4, #16]
   26310:	bl	125a4 <memcpy@plt>
   26314:	ldr	r3, [r4, #16]
   26318:	ldr	r0, [r4, #20]
   2631c:	add	r3, r3, r5
   26320:	sub	r0, r0, r5
   26324:	cmp	r6, #0
   26328:	add	sl, sl, r5
   2632c:	str	r3, [r4, #16]
   26330:	str	r0, [r4, #20]
   26334:	bne	262ec <flatcc_emitter@@Base+0x54>
   26338:	subs	r8, r8, #1
   2633c:	add	r7, r7, #8
   26340:	bne	262dc <flatcc_emitter@@Base+0x44>
   26344:	mov	r0, #0
   26348:	add	sp, sp, #12
   2634c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26350:	ldr	r3, [r4, #16]
   26354:	sub	r0, r0, ip
   26358:	add	ip, r3, ip
   2635c:	str	r0, [r4, #20]
   26360:	str	ip, [r4, #16]
   26364:	cmp	r2, #0
   26368:	addne	r4, r1, #8
   2636c:	movne	r7, r2
   26370:	beq	26344 <flatcc_emitter@@Base+0xac>
   26374:	ldmdb	r4, {r1, r2}
   26378:	mov	r0, r3
   2637c:	bl	125a4 <memcpy@plt>
   26380:	ldr	r2, [r4, #-4]
   26384:	subs	r7, r7, #1
   26388:	add	r4, r4, #8
   2638c:	add	r3, r0, r2
   26390:	bne	26374 <flatcc_emitter@@Base+0xdc>
   26394:	b	26344 <flatcc_emitter@@Base+0xac>
   26398:	mov	r5, r6
   2639c:	mov	r6, #0
   263a0:	b	26304 <flatcc_emitter@@Base+0x6c>
   263a4:	ldr	fp, [r4, #4]
   263a8:	cmp	fp, #0
   263ac:	beq	2641c <flatcc_emitter@@Base+0x184>
   263b0:	ldr	r5, [fp, #2944]	; 0xb80
   263b4:	ldr	r3, [r4]
   263b8:	cmp	r5, r3
   263bc:	beq	263e4 <flatcc_emitter@@Base+0x14c>
   263c0:	str	r5, [r4, #4]
   263c4:	ldr	r3, [r5, #2948]	; 0xb84
   263c8:	mov	r0, r9
   263cc:	str	r5, [r4, #16]
   263d0:	ldr	r3, [r3, #2952]	; 0xb88
   263d4:	str	r9, [r4, #20]
   263d8:	add	r3, r3, #2944	; 0xb80
   263dc:	str	r3, [r5, #2952]	; 0xb88
   263e0:	b	262ec <flatcc_emitter@@Base+0x54>
   263e4:	ldr	r0, [pc, #540]	; 26608 <flatcc_emitter@@Base+0x370>
   263e8:	bl	125f8 <malloc@plt>
   263ec:	cmp	r0, #0
   263f0:	beq	2642c <flatcc_emitter@@Base+0x194>
   263f4:	ldr	r3, [r4, #28]
   263f8:	str	r5, [r0, #2944]	; 0xb80
   263fc:	add	r3, r3, #2944	; 0xb80
   26400:	str	fp, [r0, #2948]	; 0xb84
   26404:	str	r3, [r4, #28]
   26408:	str	r0, [r5, #2948]	; 0xb84
   2640c:	str	r0, [fp, #2944]	; 0xb80
   26410:	mov	r5, r0
   26414:	str	r0, [r4, #4]
   26418:	b	263c4 <flatcc_emitter@@Base+0x12c>
   2641c:	ldr	r0, [pc, #484]	; 26608 <flatcc_emitter@@Base+0x370>
   26420:	bl	125f8 <malloc@plt>
   26424:	cmp	r0, #0
   26428:	bne	26438 <flatcc_emitter@@Base+0x1a0>
   2642c:	mvn	r0, #0
   26430:	add	sp, sp, #12
   26434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26438:	mov	r2, #1472	; 0x5c0
   2643c:	ldr	r3, [r4, #28]
   26440:	str	r2, [r4, #12]
   26444:	str	r2, [r4, #20]
   26448:	sub	r2, r2, #2944	; 0xb80
   2644c:	str	r2, [r0, #2952]	; 0xb88
   26450:	str	r0, [r4]
   26454:	add	r3, r3, #2944	; 0xb80
   26458:	str	r0, [r4, #4]
   2645c:	str	r0, [r0, #2944]	; 0xb80
   26460:	str	r0, [r0, #2948]	; 0xb84
   26464:	add	r0, r0, #1472	; 0x5c0
   26468:	str	r0, [r4, #8]
   2646c:	str	r0, [r4, #16]
   26470:	str	r3, [r4, #28]
   26474:	mov	r0, #1472	; 0x5c0
   26478:	b	262ec <flatcc_emitter@@Base+0x54>
   2647c:	ldr	r0, [r4, #12]
   26480:	cmp	ip, r0
   26484:	bls	26504 <flatcc_emitter@@Base+0x26c>
   26488:	add	r6, r1, r2, lsl #3
   2648c:	mov	r7, r2
   26490:	mov	r9, #2944	; 0xb80
   26494:	mov	r8, #0
   26498:	cmp	r7, #0
   2649c:	beq	26344 <flatcc_emitter@@Base+0xac>
   264a0:	ldr	r5, [r6, #-4]
   264a4:	ldr	sl, [r6, #-8]
   264a8:	cmp	r5, #0
   264ac:	add	sl, sl, r5
   264b0:	beq	264f8 <flatcc_emitter@@Base+0x260>
   264b4:	ldr	r2, [r4, #12]
   264b8:	cmp	r2, r5
   264bc:	bcs	2651c <flatcc_emitter@@Base+0x284>
   264c0:	cmp	r2, #0
   264c4:	beq	2652c <flatcc_emitter@@Base+0x294>
   264c8:	sub	r5, r5, r2
   264cc:	mov	r1, r8
   264d0:	ldr	r0, [r4, #8]
   264d4:	rsb	r3, r2, #0
   264d8:	add	r0, r0, r3
   264dc:	add	sl, sl, r3
   264e0:	str	r1, [r4, #12]
   264e4:	str	r0, [r4, #8]
   264e8:	mov	r1, sl
   264ec:	bl	125a4 <memcpy@plt>
   264f0:	cmp	r5, #0
   264f4:	bne	264b4 <flatcc_emitter@@Base+0x21c>
   264f8:	sub	r6, r6, #8
   264fc:	sub	r7, r7, #1
   26500:	b	26498 <flatcc_emitter@@Base+0x200>
   26504:	ldr	r3, [r4, #8]
   26508:	sub	r0, r0, ip
   2650c:	sub	r3, r3, ip
   26510:	str	r0, [r4, #12]
   26514:	str	r3, [r4, #8]
   26518:	b	26364 <flatcc_emitter@@Base+0xcc>
   2651c:	sub	r1, r2, r5
   26520:	mov	r2, r5
   26524:	mov	r5, #0
   26528:	b	264d0 <flatcc_emitter@@Base+0x238>
   2652c:	ldr	r3, [r4]
   26530:	cmp	r3, #0
   26534:	beq	265b8 <flatcc_emitter@@Base+0x320>
   26538:	ldr	fp, [r3, #2948]	; 0xb84
   2653c:	ldr	r2, [r4, #4]
   26540:	cmp	fp, r2
   26544:	beq	26578 <flatcc_emitter@@Base+0x2e0>
   26548:	ldr	r3, [r3, #2952]	; 0xb88
   2654c:	sub	r3, r3, #2944	; 0xb80
   26550:	str	r3, [fp, #2952]	; 0xb88
   26554:	str	fp, [r4]
   26558:	ldr	r3, [fp, #2944]	; 0xb80
   2655c:	add	r2, fp, #2944	; 0xb80
   26560:	str	r9, [r4, #12]
   26564:	ldr	r3, [r3, #2952]	; 0xb88
   26568:	str	r2, [r4, #8]
   2656c:	sub	r3, r3, #2944	; 0xb80
   26570:	str	r3, [fp, #2952]	; 0xb88
   26574:	b	264b4 <flatcc_emitter@@Base+0x21c>
   26578:	ldr	r0, [pc, #136]	; 26608 <flatcc_emitter@@Base+0x370>
   2657c:	str	r3, [sp, #4]
   26580:	bl	125f8 <malloc@plt>
   26584:	ldr	r3, [sp, #4]
   26588:	cmp	r0, #0
   2658c:	beq	2642c <flatcc_emitter@@Base+0x194>
   26590:	ldr	r2, [r4, #28]
   26594:	str	fp, [r0, #2948]	; 0xb84
   26598:	add	r2, r2, #2944	; 0xb80
   2659c:	str	r3, [r0, #2944]	; 0xb80
   265a0:	str	r2, [r4, #28]
   265a4:	str	r0, [r3, #2948]	; 0xb84
   265a8:	str	r0, [fp, #2944]	; 0xb80
   265ac:	str	r0, [r4]
   265b0:	mov	fp, r0
   265b4:	b	26558 <flatcc_emitter@@Base+0x2c0>
   265b8:	ldr	r0, [pc, #72]	; 26608 <flatcc_emitter@@Base+0x370>
   265bc:	bl	125f8 <malloc@plt>
   265c0:	cmp	r0, #0
   265c4:	beq	2642c <flatcc_emitter@@Base+0x194>
   265c8:	mov	r2, #1472	; 0x5c0
   265cc:	ldr	r3, [r4, #28]
   265d0:	str	r2, [r4, #12]
   265d4:	str	r2, [r4, #20]
   265d8:	sub	r2, r2, #2944	; 0xb80
   265dc:	str	r2, [r0, #2952]	; 0xb88
   265e0:	str	r0, [r4]
   265e4:	add	r3, r3, #2944	; 0xb80
   265e8:	str	r0, [r4, #4]
   265ec:	str	r0, [r0, #2944]	; 0xb80
   265f0:	str	r0, [r0, #2948]	; 0xb84
   265f4:	add	r0, r0, #1472	; 0x5c0
   265f8:	str	r0, [r4, #8]
   265fc:	str	r0, [r4, #16]
   26600:	str	r3, [r4, #28]
   26604:	b	264b4 <flatcc_emitter@@Base+0x21c>
   26608:	andeq	r0, r0, ip, lsl #23

0002660c <flatcc_emitter_copy_buffer@@Base>:
   2660c:	ldr	ip, [r0, #24]
   26610:	cmp	ip, r2
   26614:	bhi	266b0 <flatcc_emitter_copy_buffer@@Base+0xa4>
   26618:	ldr	r2, [r0]
   2661c:	cmp	r2, #0
   26620:	beq	266b0 <flatcc_emitter_copy_buffer@@Base+0xa4>
   26624:	mov	r3, r1
   26628:	ldr	r1, [r0, #4]
   2662c:	push	{r4, r5, r6, lr}
   26630:	cmp	r2, r1
   26634:	mov	r5, r0
   26638:	beq	266bc <flatcc_emitter_copy_buffer@@Base+0xb0>
   2663c:	ldr	r4, [r0, #12]
   26640:	ldr	r1, [r5, #8]
   26644:	rsb	r4, r4, #2944	; 0xb80
   26648:	mov	r2, r4
   2664c:	mov	r0, r3
   26650:	bl	125a4 <memcpy@plt>
   26654:	ldr	r2, [r5]
   26658:	ldr	r1, [r5, #4]
   2665c:	add	r3, r0, r4
   26660:	ldr	r4, [r2, #2944]	; 0xb80
   26664:	cmp	r4, r1
   26668:	beq	26694 <flatcc_emitter_copy_buffer@@Base+0x88>
   2666c:	mov	r6, #2944	; 0xb80
   26670:	mov	r1, r4
   26674:	mov	r0, r3
   26678:	mov	r2, r6
   2667c:	bl	125a4 <memcpy@plt>
   26680:	ldr	r4, [r4, #2944]	; 0xb80
   26684:	ldr	r1, [r5, #4]
   26688:	cmp	r1, r4
   2668c:	add	r3, r0, #2944	; 0xb80
   26690:	bne	26670 <flatcc_emitter_copy_buffer@@Base+0x64>
   26694:	ldr	r2, [r5, #20]
   26698:	mov	r0, r3
   2669c:	rsb	r2, r2, #2944	; 0xb80
   266a0:	bl	125a4 <memcpy@plt>
   266a4:	mov	r3, r0
   266a8:	mov	r0, r3
   266ac:	pop	{r4, r5, r6, pc}
   266b0:	mov	r3, #0
   266b4:	mov	r0, r3
   266b8:	bx	lr
   266bc:	ldr	r1, [r0, #8]
   266c0:	mov	r2, ip
   266c4:	mov	r0, r3
   266c8:	bl	125a4 <memcpy@plt>
   266cc:	mov	r3, r0
   266d0:	b	266a8 <flatcc_emitter_copy_buffer@@Base+0x9c>
   266d4:	andeq	r0, r0, r0

000266d8 <grisu3_diy_fp_encode_double@@Base>:
   266d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266dc:	sub	sp, sp, #60	; 0x3c
   266e0:	mov	sl, r0
   266e4:	ldr	lr, [sp, #96]	; 0x60
   266e8:	mov	fp, r1
   266ec:	cmp	lr, #0
   266f0:	mov	r6, r3
   266f4:	movne	lr, #4
   266f8:	orrs	r3, sl, fp
   266fc:	sub	r2, r2, r6
   26700:	beq	26c6c <grisu3_diy_fp_encode_double@@Base+0x594>
   26704:	ldr	r1, [pc, #1380]	; 26c70 <grisu3_diy_fp_encode_double@@Base+0x598>
   26708:	mov	r0, #0
   2670c:	and	r0, r0, sl
   26710:	and	r1, r1, fp
   26714:	orrs	r3, r0, r1
   26718:	movne	ip, #0
   2671c:	bne	26758 <grisu3_diy_fp_encode_double@@Base+0x80>
   26720:	mvn	r4, #9
   26724:	lsl	r3, fp, #10
   26728:	lsl	r1, sl, #10
   2672c:	orr	r3, r3, sl, lsr #22
   26730:	mov	sl, r1
   26734:	ldr	r1, [pc, #1332]	; 26c70 <grisu3_diy_fp_encode_double@@Base+0x598>
   26738:	mov	r0, #0
   2673c:	and	r0, r0, sl
   26740:	and	r1, r1, r3
   26744:	mov	fp, r3
   26748:	orrs	r3, r0, r1
   2674c:	mov	ip, r4
   26750:	sub	r4, r4, #10
   26754:	beq	26724 <grisu3_diy_fp_encode_double@@Base+0x4c>
   26758:	cmp	sl, #0
   2675c:	sbcs	r3, fp, #0
   26760:	blt	2677c <grisu3_diy_fp_encode_double@@Base+0xa4>
   26764:	adds	sl, sl, sl
   26768:	adc	fp, fp, fp
   2676c:	cmp	sl, #0
   26770:	sbcs	r3, fp, #0
   26774:	sub	ip, ip, #1
   26778:	bge	26764 <grisu3_diy_fp_encode_double@@Base+0x8c>
   2677c:	rsb	r3, ip, #0
   26780:	cmn	r2, #348	; 0x15c
   26784:	lsl	r3, lr, r3
   26788:	str	r3, [sp, #20]
   2678c:	blt	26c48 <grisu3_diy_fp_encode_double@@Base+0x570>
   26790:	cmp	r2, #348	; 0x15c
   26794:	bge	26c24 <grisu3_diy_fp_encode_double@@Base+0x54c>
   26798:	add	r1, r2, #348	; 0x15c
   2679c:	ldr	r3, [pc, #1232]	; 26c74 <grisu3_diy_fp_encode_double@@Base+0x59c>
   267a0:	asr	r1, r1, #3
   267a4:	add	r3, pc, r3
   267a8:	add	r1, r3, r1, lsl #4
   267ac:	ldrsh	r7, [r1, #66]	; 0x42
   267b0:	ldrd	r4, [r1, #56]	; 0x38
   267b4:	ldrsh	r1, [r1, #64]	; 0x40
   267b8:	cmp	r2, r7
   267bc:	strd	r4, [sp]
   267c0:	str	r1, [sp, #40]	; 0x28
   267c4:	blt	26c08 <grisu3_diy_fp_encode_double@@Base+0x530>
   267c8:	add	r1, r7, #7
   267cc:	cmp	r2, r1
   267d0:	bgt	26bec <grisu3_diy_fp_encode_double@@Base+0x514>
   267d4:	cmp	r2, r7
   267d8:	beq	268c8 <grisu3_diy_fp_encode_double@@Base+0x1f0>
   267dc:	sub	r2, r2, r7
   267e0:	sub	r7, r2, #1
   267e4:	cmp	r7, #6
   267e8:	bhi	26bcc <grisu3_diy_fp_encode_double@@Base+0x4f4>
   267ec:	ldr	r0, [pc, #1156]	; 26c78 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   267f0:	lsl	r1, r7, #4
   267f4:	add	r0, pc, r0
   267f8:	mov	r3, #0
   267fc:	ldrd	r4, [r0, r1]
   26800:	add	r1, r0, r1
   26804:	str	r1, [sp, #44]	; 0x2c
   26808:	mov	r8, r4
   2680c:	mov	r0, r4
   26810:	strd	r4, [sp, #24]
   26814:	umull	r4, r5, sl, r5
   26818:	mov	r1, #0
   2681c:	strd	r4, [sp, #32]
   26820:	umull	r4, r5, fp, r8
   26824:	mul	lr, sl, r1
   26828:	mla	r2, fp, r1, r5
   2682c:	mla	lr, r8, r3, lr
   26830:	ldr	r1, [sp, #28]
   26834:	umull	r8, r9, sl, r0
   26838:	ldr	r0, [sp, #36]	; 0x24
   2683c:	strd	r4, [sp, #48]	; 0x30
   26840:	mla	r3, r1, r3, r0
   26844:	add	r0, lr, r9
   26848:	mov	lr, #0
   2684c:	str	r0, [sp, #8]
   26850:	str	lr, [sp, #12]
   26854:	mov	r4, r2
   26858:	mov	r0, r3
   2685c:	ldrd	r2, [sp, #8]
   26860:	ldr	r8, [sp, #48]	; 0x30
   26864:	add	r6, r6, #1
   26868:	adds	r2, r2, r8
   2686c:	adc	r3, r3, #0
   26870:	adds	r0, r0, r4
   26874:	ldr	r4, [sp, #28]
   26878:	adc	r1, lr, lr
   2687c:	adds	r2, r2, #-2147483648	; 0x80000000
   26880:	umlal	r0, r1, r4, fp
   26884:	mov	fp, r1
   26888:	ldr	r1, [sp, #44]	; 0x2c
   2688c:	adc	r3, r3, #0
   26890:	mov	sl, r0
   26894:	ldr	r4, [r1, #8]
   26898:	ldr	r1, [sp, #32]
   2689c:	add	r7, r6, r7
   268a0:	adds	r2, r2, r1
   268a4:	adc	r3, r3, #0
   268a8:	adds	sl, sl, r3
   268ac:	adc	fp, fp, lr
   268b0:	cmp	r7, #19
   268b4:	add	ip, ip, r4
   268b8:	ldrgt	r3, [sp, #20]
   268bc:	add	ip, ip, #64	; 0x40
   268c0:	addgt	r3, r3, #4
   268c4:	strgt	r3, [sp, #20]
   268c8:	ldrd	r0, [sp]
   268cc:	mov	r3, #0
   268d0:	mov	r5, #0
   268d4:	mov	r2, r0
   268d8:	umull	r6, r7, sl, r1
   268dc:	umull	r8, r9, fp, r2
   268e0:	mul	lr, sl, r3
   268e4:	mla	r9, fp, r3, r9
   268e8:	ldr	r3, [sp, #4]
   268ec:	umull	r0, r1, sl, r2
   268f0:	mla	r0, r2, r5, lr
   268f4:	mla	lr, r3, r5, r7
   268f8:	add	r2, r0, r1
   268fc:	adds	r2, r2, r8
   26900:	mov	r0, lr
   26904:	ldr	r4, [sp, #4]
   26908:	mov	lr, #0
   2690c:	adc	r3, lr, #0
   26910:	adds	r0, r0, r9
   26914:	adc	r1, lr, lr
   26918:	umlal	r0, r1, r4, fp
   2691c:	adds	r2, r2, #-2147483648	; 0x80000000
   26920:	adc	r3, r3, #0
   26924:	adds	r2, r2, r6
   26928:	adc	r3, r3, #0
   2692c:	adds	r6, r3, r0
   26930:	ldr	r3, [sp, #40]	; 0x28
   26934:	adc	r7, lr, r1
   26938:	add	ip, ip, r3
   2693c:	ldr	r3, [sp, #20]
   26940:	cmp	r3, lr
   26944:	moveq	r2, #8
   26948:	movne	r2, #9
   2694c:	orrs	r1, r6, r7
   26950:	add	r2, r3, r2
   26954:	add	lr, ip, #64	; 0x40
   26958:	beq	26c6c <grisu3_diy_fp_encode_double@@Base+0x594>
   2695c:	ldr	r1, [pc, #780]	; 26c70 <grisu3_diy_fp_encode_double@@Base+0x598>
   26960:	mov	r0, #0
   26964:	and	r0, r0, r6
   26968:	and	r1, r1, r7
   2696c:	orrs	r3, r0, r1
   26970:	bne	26ba4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26974:	add	ip, ip, #54	; 0x36
   26978:	lsl	r3, r7, #10
   2697c:	lsl	r1, r6, #10
   26980:	orr	r3, r3, r6, lsr #22
   26984:	mov	r6, r1
   26988:	ldr	r1, [pc, #736]	; 26c70 <grisu3_diy_fp_encode_double@@Base+0x598>
   2698c:	mov	r0, #0
   26990:	and	r1, r1, r3
   26994:	and	r0, r0, r6
   26998:	mov	r7, r3
   2699c:	orrs	r3, r0, r1
   269a0:	mov	r3, ip
   269a4:	sub	ip, ip, #10
   269a8:	beq	26978 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   269ac:	cmp	r6, #0
   269b0:	sbcs	r1, r7, #0
   269b4:	blt	269d0 <grisu3_diy_fp_encode_double@@Base+0x2f8>
   269b8:	adds	r6, r6, r6
   269bc:	adc	r7, r7, r7
   269c0:	cmp	r6, #0
   269c4:	sbcs	r1, r7, #0
   269c8:	sub	r3, r3, #1
   269cc:	bge	269b8 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   269d0:	ldr	r0, [pc, #676]	; 26c7c <grisu3_diy_fp_encode_double@@Base+0x5a4>
   269d4:	sub	lr, lr, r3
   269d8:	add	r1, r3, #64	; 0x40
   269dc:	cmp	r1, r0
   269e0:	lsl	r2, r2, lr
   269e4:	blt	26b28 <grisu3_diy_fp_encode_double@@Base+0x450>
   269e8:	mov	r1, #0
   269ec:	mov	lr, r1
   269f0:	mov	r0, #4
   269f4:	lsr	r4, r6, lr
   269f8:	rsb	r6, lr, #32
   269fc:	sub	ip, lr, #32
   26a00:	orr	r4, r4, r7, lsl r6
   26a04:	orr	r4, r4, r7, lsr ip
   26a08:	add	ip, r2, r0
   26a0c:	cmp	lr, ip
   26a10:	add	r3, lr, r3
   26a14:	lsr	r5, r7, lr
   26a18:	blt	26a40 <grisu3_diy_fp_encode_double@@Base+0x368>
   26a1c:	adds	r4, r4, #1
   26a20:	adc	r5, r5, #0
   26a24:	mov	r6, #0
   26a28:	and	r7, r5, #2097152	; 0x200000
   26a2c:	orrs	lr, r6, r7
   26a30:	beq	26a40 <grisu3_diy_fp_encode_double@@Base+0x368>
   26a34:	lsrs	r5, r5, #1
   26a38:	rrx	r4, r4
   26a3c:	add	r3, r3, #1
   26a40:	ldr	r7, [pc, #568]	; 26c80 <grisu3_diy_fp_encode_double@@Base+0x5a8>
   26a44:	mvn	r6, #0
   26a48:	cmp	r5, r7
   26a4c:	cmpeq	r4, r6
   26a50:	bls	26a6c <grisu3_diy_fp_encode_double@@Base+0x394>
   26a54:	lsrs	r5, r5, #1
   26a58:	rrx	r4, r4
   26a5c:	cmp	r5, r7
   26a60:	cmpeq	r4, r6
   26a64:	add	r3, r3, #1
   26a68:	bhi	26a54 <grisu3_diy_fp_encode_double@@Base+0x37c>
   26a6c:	ldr	r8, [pc, #528]	; 26c84 <grisu3_diy_fp_encode_double@@Base+0x5ac>
   26a70:	cmp	r3, r8
   26a74:	movlt	r8, #0
   26a78:	movlt	r9, #0
   26a7c:	blt	26afc <grisu3_diy_fp_encode_double@@Base+0x424>
   26a80:	beq	26ad0 <grisu3_diy_fp_encode_double@@Base+0x3f8>
   26a84:	mov	r6, #0
   26a88:	and	r7, r5, #1048576	; 0x100000
   26a8c:	orrs	lr, r6, r7
   26a90:	addne	r3, r3, #1072	; 0x430
   26a94:	addne	r3, r3, #3
   26a98:	movne	r8, #0
   26a9c:	lslne	r9, r3, #20
   26aa0:	beq	26abc <grisu3_diy_fp_encode_double@@Base+0x3e4>
   26aa4:	b	26ae4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   26aa8:	mov	r6, #0
   26aac:	and	r7, r5, #1048576	; 0x100000
   26ab0:	orrs	r6, r6, r7
   26ab4:	bne	26b88 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   26ab8:	mov	r3, lr
   26abc:	adds	r4, r4, r4
   26ac0:	sub	lr, r3, #1
   26ac4:	adc	r5, r5, r5
   26ac8:	cmp	lr, r8
   26acc:	bne	26aa8 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   26ad0:	mov	r8, #0
   26ad4:	and	r9, r5, #1048576	; 0x100000
   26ad8:	orrs	r3, r8, r9
   26adc:	movne	r8, #0
   26ae0:	movne	r9, #1048576	; 0x100000
   26ae4:	ldr	r7, [pc, #412]	; 26c88 <grisu3_diy_fp_encode_double@@Base+0x5b0>
   26ae8:	mvn	r6, #0
   26aec:	and	r4, r4, r6
   26af0:	and	r5, r5, r7
   26af4:	orr	r8, r8, r4
   26af8:	orr	r9, r9, r5
   26afc:	ldr	r3, [sp, #100]	; 0x64
   26b00:	cmp	ip, r1
   26b04:	sub	r0, r0, r2
   26b08:	movgt	ip, #0
   26b0c:	movle	ip, #1
   26b10:	cmp	r0, r1
   26b14:	movlt	r0, ip
   26b18:	orrge	r0, ip, #1
   26b1c:	strd	r8, [r3]
   26b20:	add	sp, sp, #60	; 0x3c
   26b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b28:	mvn	r0, #1072	; 0x430
   26b2c:	cmp	r1, r0
   26b30:	blt	26b9c <grisu3_diy_fp_encode_double@@Base+0x4c4>
   26b34:	add	r1, r3, #1136	; 0x470
   26b38:	add	r1, r1, #2
   26b3c:	rsb	lr, r1, #64	; 0x40
   26b40:	cmp	lr, #60	; 0x3c
   26b44:	rsbgt	r1, r1, #2
   26b48:	ble	26bac <grisu3_diy_fp_encode_double@@Base+0x4d4>
   26b4c:	rsb	r0, r1, #32
   26b50:	lsr	ip, r6, r1
   26b54:	orr	ip, ip, r7, lsl r0
   26b58:	sub	r0, r1, #32
   26b5c:	lsr	lr, r7, r1
   26b60:	orr	ip, ip, r7, lsr r0
   26b64:	asr	r2, r2, r1
   26b68:	add	r3, r3, r1
   26b6c:	mov	r1, #0
   26b70:	mov	r7, lr
   26b74:	mov	r6, ip
   26b78:	add	r2, r2, #9
   26b7c:	mov	r0, r1
   26b80:	mov	lr, #62	; 0x3e
   26b84:	b	269f4 <grisu3_diy_fp_encode_double@@Base+0x31c>
   26b88:	add	r3, r3, #1072	; 0x430
   26b8c:	add	r3, r3, #2
   26b90:	mov	r8, #0
   26b94:	lsl	r9, r3, #20
   26b98:	b	26ae4 <grisu3_diy_fp_encode_double@@Base+0x40c>
   26b9c:	mov	r1, #2
   26ba0:	b	26b4c <grisu3_diy_fp_encode_double@@Base+0x474>
   26ba4:	mov	r3, lr
   26ba8:	b	269ac <grisu3_diy_fp_encode_double@@Base+0x2d4>
   26bac:	rsb	r1, r1, #63	; 0x3f
   26bb0:	mov	ip, #1
   26bb4:	mov	r0, #8
   26bb8:	lsl	r4, ip, r1
   26bbc:	and	r4, r4, r6
   26bc0:	lsl	r0, r0, r1
   26bc4:	lsl	r1, r4, #3
   26bc8:	b	269f4 <grisu3_diy_fp_encode_double@@Base+0x31c>
   26bcc:	ldr	r1, [pc, #184]	; 26c8c <grisu3_diy_fp_encode_double@@Base+0x5b4>
   26bd0:	ldr	r0, [pc, #184]	; 26c90 <grisu3_diy_fp_encode_double@@Base+0x5b8>
   26bd4:	add	r3, r3, #1440	; 0x5a0
   26bd8:	add	r3, r3, #8
   26bdc:	mov	r2, #185	; 0xb9
   26be0:	add	r1, pc, r1
   26be4:	add	r0, pc, r0
   26be8:	bl	126a0 <__assert_fail@plt>
   26bec:	ldr	r1, [pc, #160]	; 26c94 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   26bf0:	ldr	r0, [pc, #160]	; 26c98 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   26bf4:	add	r3, r3, #24
   26bf8:	mov	r2, #89	; 0x59
   26bfc:	add	r1, pc, r1
   26c00:	add	r0, pc, r0
   26c04:	bl	126a0 <__assert_fail@plt>
   26c08:	ldr	r1, [pc, #140]	; 26c9c <grisu3_diy_fp_encode_double@@Base+0x5c4>
   26c0c:	ldr	r0, [pc, #140]	; 26ca0 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   26c10:	add	r3, r3, #24
   26c14:	mov	r2, #88	; 0x58
   26c18:	add	r1, pc, r1
   26c1c:	add	r0, pc, r0
   26c20:	bl	126a0 <__assert_fail@plt>
   26c24:	ldr	r3, [pc, #120]	; 26ca4 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   26c28:	ldr	r1, [pc, #120]	; 26ca8 <grisu3_diy_fp_encode_double@@Base+0x5d0>
   26c2c:	ldr	r0, [pc, #120]	; 26cac <grisu3_diy_fp_encode_double@@Base+0x5d4>
   26c30:	add	r3, pc, r3
   26c34:	mov	r2, #81	; 0x51
   26c38:	add	r3, r3, #24
   26c3c:	add	r1, pc, r1
   26c40:	add	r0, pc, r0
   26c44:	bl	126a0 <__assert_fail@plt>
   26c48:	ldr	r3, [pc, #96]	; 26cb0 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   26c4c:	ldr	r1, [pc, #96]	; 26cb4 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   26c50:	ldr	r0, [pc, #96]	; 26cb8 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   26c54:	add	r3, pc, r3
   26c58:	mov	r2, #80	; 0x50
   26c5c:	add	r3, r3, #24
   26c60:	add	r1, pc, r1
   26c64:	add	r0, pc, r0
   26c68:	bl	126a0 <__assert_fail@plt>
   26c6c:	bl	1293c <__assert_fail@plt+0x29c>
   26c70:			; <UNDEFINED> instruction: 0xffc00000
   26c74:	andeq	r5, r0, ip, lsl #12
   26c78:	andeq	r6, r1, r4, ror #22
   26c7c:			; <UNDEFINED> instruction: 0xfffffc0e
   26c80:			; <UNDEFINED> instruction: 0x001fffff
   26c84:			; <UNDEFINED> instruction: 0xfffffbce
   26c88:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   26c8c:	andeq	r5, r0, r8, asr sl
   26c90:	andeq	r5, r0, ip, lsr fp
   26c94:	andeq	r5, r0, ip, lsr sl
   26c98:	andeq	r5, r0, r4, lsl #22
   26c9c:	andeq	r5, r0, r0, lsr #20
   26ca0:	ldrdeq	r5, [r0], -r8
   26ca4:	andeq	r5, r0, r0, lsl #3
   26ca8:	strdeq	r5, [r0], -ip
   26cac:	andeq	r5, r0, r8, lsl #21
   26cb0:	andeq	r5, r0, ip, asr r1
   26cb4:	ldrdeq	r5, [r0], -r8
   26cb8:	andeq	r5, r0, r4, asr #20
   26cbc:	cmp	r1, #1000	; 0x3e8
   26cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cc4:	addle	r1, r1, #1
   26cc8:	addgt	lr, r0, #1000	; 0x3e8
   26ccc:	mov	r4, #0
   26cd0:	mov	r5, #0
   26cd4:	addle	lr, r0, r1
   26cd8:	addgt	lr, lr, #1
   26cdc:	cmp	lr, r0
   26ce0:	sub	sp, sp, #44	; 0x2c
   26ce4:	mov	fp, r2
   26ce8:	mov	sl, r0
   26cec:	strd	r4, [r2]
   26cf0:	beq	2722c <grisu3_diy_fp_encode_double@@Base+0xb54>
   26cf4:	ldrb	r0, [r0]
   26cf8:	cmp	r0, #45	; 0x2d
   26cfc:	movne	r2, #0
   26d00:	movne	r3, sl
   26d04:	strne	r2, [sp, #16]
   26d08:	beq	270bc <grisu3_diy_fp_encode_double@@Base+0x9e4>
   26d0c:	cmp	r0, #48	; 0x30
   26d10:	beq	270dc <grisu3_diy_fp_encode_double@@Base+0xa04>
   26d14:	sub	r2, r0, #49	; 0x31
   26d18:	cmp	r2, #8
   26d1c:	bhi	26e1c <grisu3_diy_fp_encode_double@@Base+0x744>
   26d20:	add	r9, r3, #1
   26d24:	sub	r0, r0, #48	; 0x30
   26d28:	cmp	lr, r9
   26d2c:	asr	r1, r0, #31
   26d30:	beq	2768c <grisu3_diy_fp_encode_double@@Base+0xfb4>
   26d34:	ldrb	ip, [r3, #1]
   26d38:	sub	r3, ip, #48	; 0x30
   26d3c:	cmp	r3, #9
   26d40:	movhi	r4, r9
   26d44:	movhi	r9, #0
   26d48:	bhi	26dac <grisu3_diy_fp_encode_double@@Base+0x6d4>
   26d4c:	add	r5, r9, #1
   26d50:	mov	r8, #10
   26d54:	add	r7, pc, #988	; 0x3dc
   26d58:	ldrd	r6, [r7]
   26d5c:	b	26d70 <grisu3_diy_fp_encode_double@@Base+0x698>
   26d60:	cmp	r1, r7
   26d64:	cmpeq	r0, r6
   26d68:	bhi	26e38 <grisu3_diy_fp_encode_double@@Base+0x760>
   26d6c:	mov	r5, r3
   26d70:	umull	r2, r3, r0, r8
   26d74:	mla	r3, r8, r1, r3
   26d78:	adds	r0, r2, ip
   26d7c:	adc	r1, r3, #0
   26d80:	subs	r0, r0, #48	; 0x30
   26d84:	sbc	r1, r1, #0
   26d88:	cmp	r5, lr
   26d8c:	mov	r4, r5
   26d90:	beq	274c0 <grisu3_diy_fp_encode_double@@Base+0xde8>
   26d94:	ldrb	ip, [r5]
   26d98:	add	r3, r5, #1
   26d9c:	sub	r2, ip, #48	; 0x30
   26da0:	cmp	r2, #9
   26da4:	bls	26d60 <grisu3_diy_fp_encode_double@@Base+0x688>
   26da8:	sub	r9, r5, r9
   26dac:	mov	r8, #0
   26db0:	mov	r2, r8
   26db4:	sub	r3, ip, #49	; 0x31
   26db8:	cmp	r3, #8
   26dbc:	bhi	26ff8 <grisu3_diy_fp_encode_double@@Base+0x920>
   26dc0:	add	r6, r4, #1
   26dc4:	cmp	lr, r6
   26dc8:	add	r5, r2, #1
   26dcc:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   26dd0:	ldrb	ip, [r4, #1]
   26dd4:	sub	r3, ip, #48	; 0x30
   26dd8:	cmp	r3, #9
   26ddc:	bhi	26fec <grisu3_diy_fp_encode_double@@Base+0x914>
   26de0:	sub	r2, r2, r4
   26de4:	add	r4, r4, #2
   26de8:	b	26dfc <grisu3_diy_fp_encode_double@@Base+0x724>
   26dec:	ldrb	ip, [r4], #1
   26df0:	sub	r3, ip, #48	; 0x30
   26df4:	cmp	r3, #9
   26df8:	bhi	26fec <grisu3_diy_fp_encode_double@@Base+0x914>
   26dfc:	cmp	r4, lr
   26e00:	add	r5, r2, r4
   26e04:	mov	r6, r4
   26e08:	bne	26dec <grisu3_diy_fp_encode_double@@Base+0x714>
   26e0c:	add	r5, r5, r9
   26e10:	mov	r4, lr
   26e14:	mov	r8, #1
   26e18:	b	26e8c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   26e1c:	ldr	r3, [sp, #16]
   26e20:	cmp	r3, #0
   26e24:	moveq	r4, sl
   26e28:	movne	r4, #0
   26e2c:	mov	r0, r4
   26e30:	add	sp, sp, #44	; 0x2c
   26e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e38:	cmp	ip, #52	; 0x34
   26e3c:	movls	r2, #0
   26e40:	movhi	r2, #1
   26e44:	adds	r0, r0, r2
   26e48:	adc	r1, r1, #0
   26e4c:	cmp	ip, #48	; 0x30
   26e50:	sub	r9, r4, r9
   26e54:	movne	r8, #1
   26e58:	movne	r2, #0
   26e5c:	beq	26e74 <grisu3_diy_fp_encode_double@@Base+0x79c>
   26e60:	b	26db4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   26e64:	ldrb	ip, [r3]
   26e68:	add	r3, r3, #1
   26e6c:	cmp	ip, #48	; 0x30
   26e70:	bne	27130 <grisu3_diy_fp_encode_double@@Base+0xa58>
   26e74:	cmp	lr, r3
   26e78:	mov	r4, r3
   26e7c:	sub	r2, r3, r5
   26e80:	bne	26e64 <grisu3_diy_fp_encode_double@@Base+0x78c>
   26e84:	add	r5, r2, r9
   26e88:	mov	r8, #1
   26e8c:	cmp	lr, r4
   26e90:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   26e94:	orrs	r3, r0, r1
   26e98:	moveq	r2, #1
   26e9c:	movne	r2, #0
   26ea0:	cmn	r5, #324	; 0x144
   26ea4:	movge	r3, #0
   26ea8:	movlt	r3, #1
   26eac:	orrs	r3, r2, r3
   26eb0:	bne	26fc8 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   26eb4:	ldr	r3, [pc, #652]	; 27148 <grisu3_diy_fp_encode_double@@Base+0xa70>
   26eb8:	cmp	r5, r3
   26ebc:	bgt	27158 <grisu3_diy_fp_encode_double@@Base+0xa80>
   26ec0:	ldr	r3, [pc, #644]	; 2714c <grisu3_diy_fp_encode_double@@Base+0xa74>
   26ec4:	mvn	r2, #0
   26ec8:	cmp	r1, r3
   26ecc:	cmpeq	r0, r2
   26ed0:	movls	r3, #1
   26ed4:	movhi	r3, #0
   26ed8:	cmp	r5, #22
   26edc:	movhi	r3, #0
   26ee0:	andls	r3, r3, #1
   26ee4:	cmp	r3, #0
   26ee8:	beq	27254 <grisu3_diy_fp_encode_double@@Base+0xb7c>
   26eec:	bl	2ac44 <flatcc_json_parser_table_as_root@@Base+0x350>
   26ef0:	sub	r9, r5, r9
   26ef4:	add	r3, r9, #22
   26ef8:	vmov	d7, r0, r1
   26efc:	cmp	r3, #44	; 0x2c
   26f00:	addls	pc, pc, r3, lsl #2
   26f04:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   26f08:	b	273b8 <grisu3_diy_fp_encode_double@@Base+0xce0>
   26f0c:	b	273c4 <grisu3_diy_fp_encode_double@@Base+0xcec>
   26f10:	b	273ac <grisu3_diy_fp_encode_double@@Base+0xcd4>
   26f14:	b	27484 <grisu3_diy_fp_encode_double@@Base+0xdac>
   26f18:	b	27478 <grisu3_diy_fp_encode_double@@Base+0xda0>
   26f1c:	b	2746c <grisu3_diy_fp_encode_double@@Base+0xd94>
   26f20:	b	27460 <grisu3_diy_fp_encode_double@@Base+0xd88>
   26f24:	b	27454 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   26f28:	b	27448 <grisu3_diy_fp_encode_double@@Base+0xd70>
   26f2c:	b	2743c <grisu3_diy_fp_encode_double@@Base+0xd64>
   26f30:	b	27430 <grisu3_diy_fp_encode_double@@Base+0xd58>
   26f34:	b	27424 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   26f38:	b	27418 <grisu3_diy_fp_encode_double@@Base+0xd40>
   26f3c:	b	2740c <grisu3_diy_fp_encode_double@@Base+0xd34>
   26f40:	b	27400 <grisu3_diy_fp_encode_double@@Base+0xd28>
   26f44:	b	273f4 <grisu3_diy_fp_encode_double@@Base+0xd1c>
   26f48:	b	273e8 <grisu3_diy_fp_encode_double@@Base+0xd10>
   26f4c:	b	273dc <grisu3_diy_fp_encode_double@@Base+0xd04>
   26f50:	b	273d0 <grisu3_diy_fp_encode_double@@Base+0xcf8>
   26f54:	b	27334 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   26f58:	b	27328 <grisu3_diy_fp_encode_double@@Base+0xc50>
   26f5c:	b	2731c <grisu3_diy_fp_encode_double@@Base+0xc44>
   26f60:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   26f64:	b	27304 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   26f68:	b	272f8 <grisu3_diy_fp_encode_double@@Base+0xc20>
   26f6c:	b	272ec <grisu3_diy_fp_encode_double@@Base+0xc14>
   26f70:	b	272e0 <grisu3_diy_fp_encode_double@@Base+0xc08>
   26f74:	b	272d4 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   26f78:	b	272c8 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   26f7c:	b	272bc <grisu3_diy_fp_encode_double@@Base+0xbe4>
   26f80:	b	272b0 <grisu3_diy_fp_encode_double@@Base+0xbd8>
   26f84:	b	272a4 <grisu3_diy_fp_encode_double@@Base+0xbcc>
   26f88:	b	27298 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   26f8c:	b	2728c <grisu3_diy_fp_encode_double@@Base+0xbb4>
   26f90:	b	26fbc <grisu3_diy_fp_encode_double@@Base+0x8e4>
   26f94:	b	27394 <grisu3_diy_fp_encode_double@@Base+0xcbc>
   26f98:	b	27388 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   26f9c:	b	2737c <grisu3_diy_fp_encode_double@@Base+0xca4>
   26fa0:	b	27370 <grisu3_diy_fp_encode_double@@Base+0xc98>
   26fa4:	b	27364 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   26fa8:	b	27358 <grisu3_diy_fp_encode_double@@Base+0xc80>
   26fac:	b	2734c <grisu3_diy_fp_encode_double@@Base+0xc74>
   26fb0:	b	27340 <grisu3_diy_fp_encode_double@@Base+0xc68>
   26fb4:	b	273a0 <grisu3_diy_fp_encode_double@@Base+0xcc8>
   26fb8:	b	27310 <grisu3_diy_fp_encode_double@@Base+0xc38>
   26fbc:	vldr	d6, [pc, #380]	; 27140 <grisu3_diy_fp_encode_double@@Base+0xa68>
   26fc0:	vmul.f64	d7, d7, d6
   26fc4:	vstr	d7, [fp]
   26fc8:	ldr	r3, [sp, #16]
   26fcc:	cmp	r3, #0
   26fd0:	beq	26e2c <grisu3_diy_fp_encode_double@@Base+0x754>
   26fd4:	vldr	d7, [fp]
   26fd8:	mov	r0, r4
   26fdc:	vneg.f64	d7, d7
   26fe0:	vstr	d7, [fp]
   26fe4:	add	sp, sp, #44	; 0x2c
   26fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26fec:	mov	r2, r5
   26ff0:	mov	r4, r6
   26ff4:	mov	r8, #1
   26ff8:	cmp	ip, #46	; 0x2e
   26ffc:	beq	27170 <grisu3_diy_fp_encode_double@@Base+0xa98>
   27000:	cmp	lr, r4
   27004:	add	r5, r2, r9
   27008:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2700c:	orr	ip, ip, #32
   27010:	cmp	ip, #101	; 0x65
   27014:	bne	26e94 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   27018:	sub	r3, lr, r4
   2701c:	cmp	r3, #1
   27020:	ble	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   27024:	ldrb	r2, [r4, #1]
   27028:	cmp	r2, #43	; 0x2b
   2702c:	beq	274a4 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   27030:	cmp	r2, #45	; 0x2d
   27034:	beq	27668 <grisu3_diy_fp_encode_double@@Base+0xf90>
   27038:	add	ip, r4, #1
   2703c:	mov	r3, #0
   27040:	str	r3, [sp, #8]
   27044:	sub	r2, r2, #48	; 0x30
   27048:	uxtb	r3, r2
   2704c:	cmp	r3, #9
   27050:	bhi	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   27054:	add	r4, ip, #1
   27058:	cmp	lr, r4
   2705c:	beq	270a8 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   27060:	ldrb	r3, [ip, #1]
   27064:	sub	r6, r3, #48	; 0x30
   27068:	cmp	r6, #9
   2706c:	bhi	27490 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   27070:	ldr	r7, [pc, #216]	; 27150 <grisu3_diy_fp_encode_double@@Base+0xa78>
   27074:	add	ip, ip, #2
   27078:	b	2708c <grisu3_diy_fp_encode_double@@Base+0x9b4>
   2707c:	ldrb	r3, [ip], #1
   27080:	sub	r6, r3, #48	; 0x30
   27084:	cmp	r6, #9
   27088:	bhi	27490 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2708c:	add	r4, r2, r2, lsl #2
   27090:	cmp	r2, r7
   27094:	add	r4, r3, r4, lsl #1
   27098:	suble	r2, r4, #48	; 0x30
   2709c:	cmp	lr, ip
   270a0:	mov	r4, ip
   270a4:	bne	2707c <grisu3_diy_fp_encode_double@@Base+0x9a4>
   270a8:	ldr	r3, [sp, #8]
   270ac:	cmp	r3, #0
   270b0:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   270b4:	sub	r5, r5, r2
   270b8:	b	26e8c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   270bc:	add	r3, sl, #1
   270c0:	cmp	lr, r3
   270c4:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   270c8:	ldrb	r0, [sl, #1]
   270cc:	mov	r2, #1
   270d0:	str	r2, [sp, #16]
   270d4:	cmp	r0, #48	; 0x30
   270d8:	bne	26d14 <grisu3_diy_fp_encode_double@@Base+0x63c>
   270dc:	add	r4, r3, #1
   270e0:	cmp	lr, r4
   270e4:	beq	2723c <grisu3_diy_fp_encode_double@@Base+0xb64>
   270e8:	ldrb	ip, [r3, #1]
   270ec:	orr	r2, ip, #32
   270f0:	cmp	r2, #120	; 0x78
   270f4:	moveq	r4, sl
   270f8:	beq	26e2c <grisu3_diy_fp_encode_double@@Base+0x754>
   270fc:	cmp	ip, #48	; 0x30
   27100:	bne	27120 <grisu3_diy_fp_encode_double@@Base+0xa48>
   27104:	add	r3, r3, #2
   27108:	cmp	r3, lr
   2710c:	mov	r4, r3
   27110:	beq	2723c <grisu3_diy_fp_encode_double@@Base+0xb64>
   27114:	ldrb	ip, [r3], #1
   27118:	cmp	ip, #48	; 0x30
   2711c:	beq	27108 <grisu3_diy_fp_encode_double@@Base+0xa30>
   27120:	mov	r9, r4
   27124:	mov	r0, #0
   27128:	mov	r1, #0
   2712c:	b	26d38 <grisu3_diy_fp_encode_double@@Base+0x660>
   27130:	mov	r8, #1
   27134:	b	26db4 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   27138:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2713c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   27140:	andge	r0, r0, #0
   27144:	rsbmi	r1, sp, #148, 20	; 0x94000
   27148:	andeq	r0, r0, r6, lsr r1
   2714c:			; <UNDEFINED> instruction: 0x001fffff
   27150:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   27154:	svcvc	0x00f00000	; IMB
   27158:	ldr	r3, [pc, #-12]	; 27154 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   2715c:	mov	r2, #0
   27160:	strd	r2, [fp]
   27164:	b	26fc8 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   27168:	mov	r4, #0
   2716c:	b	26e2c <grisu3_diy_fp_encode_double@@Base+0x754>
   27170:	ldrb	r3, [r4, #1]
   27174:	add	ip, r4, #1
   27178:	mov	r5, ip
   2717c:	str	ip, [sp, #20]
   27180:	sub	ip, r3, #48	; 0x30
   27184:	cmp	ip, #9
   27188:	bhi	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   2718c:	cmp	lr, r5
   27190:	beq	276a8 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   27194:	add	r7, pc, #980	; 0x3d4
   27198:	ldrd	r6, [r7]
   2719c:	cmp	r1, r7
   271a0:	cmpeq	r0, r6
   271a4:	bhi	27698 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   271a8:	add	r4, r4, #2
   271ac:	strd	r6, [sp, #8]
   271b0:	mov	ip, #10
   271b4:	str	r9, [sp, #24]
   271b8:	str	r8, [sp, #28]
   271bc:	b	271e4 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   271c0:	ldrb	r3, [r4]
   271c4:	add	r4, r4, #1
   271c8:	sub	r5, r3, #48	; 0x30
   271cc:	cmp	r5, #9
   271d0:	bhi	274c8 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   271d4:	ldrd	r8, [sp, #8]
   271d8:	cmp	r1, r9
   271dc:	cmpeq	r0, r8
   271e0:	bhi	27628 <grisu3_diy_fp_encode_double@@Base+0xf50>
   271e4:	umull	r6, r7, r0, ip
   271e8:	mla	r7, ip, r1, r7
   271ec:	adds	r0, r6, r3
   271f0:	adc	r1, r7, #0
   271f4:	subs	r0, r0, #48	; 0x30
   271f8:	sbc	r1, r1, #0
   271fc:	cmp	r4, lr
   27200:	sub	r2, r2, #1
   27204:	mov	r6, r4
   27208:	bne	271c0 <grisu3_diy_fp_encode_double@@Base+0xae8>
   2720c:	ldr	r3, [sp, #20]
   27210:	ldr	r9, [sp, #24]
   27214:	ldr	r8, [sp, #28]
   27218:	sub	r3, lr, r3
   2721c:	mov	r4, lr
   27220:	add	r9, r9, r3
   27224:	add	r5, r2, r9
   27228:	b	26e8c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2722c:	mov	r4, lr
   27230:	mov	r0, r4
   27234:	add	sp, sp, #44	; 0x2c
   27238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2723c:	mov	r9, #0
   27240:	mov	r0, #0
   27244:	mov	r1, #0
   27248:	mov	r5, r9
   2724c:	mov	r8, #0
   27250:	b	26e8c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   27254:	stm	sp, {r8, fp}
   27258:	mov	r3, r9
   2725c:	mov	r2, r5
   27260:	bl	266d8 <grisu3_diy_fp_encode_double@@Base>
   27264:	cmp	r0, #0
   27268:	bne	26fc8 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   2726c:	mov	r0, sl
   27270:	add	r1, sp, #36	; 0x24
   27274:	bl	12658 <strtod@plt>
   27278:	ldr	r3, [sp, #36]	; 0x24
   2727c:	cmp	r4, r3
   27280:	movcs	r4, r3
   27284:	vstr	d0, [fp]
   27288:	b	26e2c <grisu3_diy_fp_encode_double@@Base+0x754>
   2728c:	vldr	d6, [pc, #740]	; 27578 <grisu3_diy_fp_encode_double@@Base+0xea0>
   27290:	vmul.f64	d7, d7, d6
   27294:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27298:	vldr	d6, [pc, #736]	; 27580 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2729c:	vmul.f64	d7, d7, d6
   272a0:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272a4:	vldr	d6, [pc, #732]	; 27588 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   272a8:	vmul.f64	d7, d7, d6
   272ac:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272b0:	vldr	d6, [pc, #728]	; 27590 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   272b4:	vmul.f64	d7, d7, d6
   272b8:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272bc:	vldr	d6, [pc, #724]	; 27598 <grisu3_diy_fp_encode_double@@Base+0xec0>
   272c0:	vmul.f64	d7, d7, d6
   272c4:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272c8:	vldr	d6, [pc, #720]	; 275a0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   272cc:	vmul.f64	d7, d7, d6
   272d0:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272d4:	vldr	d6, [pc, #716]	; 275a8 <grisu3_diy_fp_encode_double@@Base+0xed0>
   272d8:	vmul.f64	d7, d7, d6
   272dc:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272e0:	vldr	d6, [pc, #712]	; 275b0 <grisu3_diy_fp_encode_double@@Base+0xed8>
   272e4:	vmul.f64	d7, d7, d6
   272e8:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272ec:	vldr	d6, [pc, #708]	; 275b8 <grisu3_diy_fp_encode_double@@Base+0xee0>
   272f0:	vmul.f64	d7, d7, d6
   272f4:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   272f8:	vldr	d6, [pc, #704]	; 275c0 <grisu3_diy_fp_encode_double@@Base+0xee8>
   272fc:	vmul.f64	d7, d7, d6
   27300:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27304:	vldr	d6, [pc, #700]	; 275c8 <grisu3_diy_fp_encode_double@@Base+0xef0>
   27308:	vmul.f64	d7, d7, d6
   2730c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27310:	vldr	d6, [pc, #696]	; 275d0 <grisu3_diy_fp_encode_double@@Base+0xef8>
   27314:	vmul.f64	d7, d7, d6
   27318:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2731c:	vldr	d6, [pc, #676]	; 275c8 <grisu3_diy_fp_encode_double@@Base+0xef0>
   27320:	vdiv.f64	d7, d7, d6
   27324:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27328:	vldr	d6, [pc, #656]	; 275c0 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2732c:	vdiv.f64	d7, d7, d6
   27330:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27334:	vldr	d6, [pc, #636]	; 275b8 <grisu3_diy_fp_encode_double@@Base+0xee0>
   27338:	vdiv.f64	d7, d7, d6
   2733c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27340:	vldr	d6, [pc, #656]	; 275d8 <grisu3_diy_fp_encode_double@@Base+0xf00>
   27344:	vmul.f64	d7, d7, d6
   27348:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2734c:	vldr	d6, [pc, #652]	; 275e0 <grisu3_diy_fp_encode_double@@Base+0xf08>
   27350:	vmul.f64	d7, d7, d6
   27354:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27358:	vldr	d6, [pc, #648]	; 275e8 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2735c:	vmul.f64	d7, d7, d6
   27360:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27364:	vldr	d6, [pc, #644]	; 275f0 <grisu3_diy_fp_encode_double@@Base+0xf18>
   27368:	vmul.f64	d7, d7, d6
   2736c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27370:	vldr	d6, [pc, #640]	; 275f8 <grisu3_diy_fp_encode_double@@Base+0xf20>
   27374:	vmul.f64	d7, d7, d6
   27378:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2737c:	vldr	d6, [pc, #636]	; 27600 <grisu3_diy_fp_encode_double@@Base+0xf28>
   27380:	vmul.f64	d7, d7, d6
   27384:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27388:	vldr	d6, [pc, #632]	; 27608 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2738c:	vmul.f64	d7, d7, d6
   27390:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27394:	vldr	d6, [pc, #628]	; 27610 <grisu3_diy_fp_encode_double@@Base+0xf38>
   27398:	vmul.f64	d7, d7, d6
   2739c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273a0:	vldr	d6, [pc, #624]	; 27618 <grisu3_diy_fp_encode_double@@Base+0xf40>
   273a4:	vmul.f64	d7, d7, d6
   273a8:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273ac:	vldr	d6, [pc, #548]	; 275d8 <grisu3_diy_fp_encode_double@@Base+0xf00>
   273b0:	vdiv.f64	d7, d7, d6
   273b4:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273b8:	vldr	d6, [pc, #528]	; 275d0 <grisu3_diy_fp_encode_double@@Base+0xef8>
   273bc:	vdiv.f64	d7, d7, d6
   273c0:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273c4:	vldr	d6, [pc, #588]	; 27618 <grisu3_diy_fp_encode_double@@Base+0xf40>
   273c8:	vdiv.f64	d7, d7, d6
   273cc:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273d0:	vldr	d6, [pc, #472]	; 275b0 <grisu3_diy_fp_encode_double@@Base+0xed8>
   273d4:	vdiv.f64	d7, d7, d6
   273d8:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273dc:	vldr	d6, [pc, #452]	; 275a8 <grisu3_diy_fp_encode_double@@Base+0xed0>
   273e0:	vdiv.f64	d7, d7, d6
   273e4:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273e8:	vldr	d6, [pc, #432]	; 275a0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   273ec:	vdiv.f64	d7, d7, d6
   273f0:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   273f4:	vldr	d6, [pc, #412]	; 27598 <grisu3_diy_fp_encode_double@@Base+0xec0>
   273f8:	vdiv.f64	d7, d7, d6
   273fc:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27400:	vldr	d6, [pc, #392]	; 27590 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   27404:	vdiv.f64	d7, d7, d6
   27408:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2740c:	vldr	d6, [pc, #372]	; 27588 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   27410:	vdiv.f64	d7, d7, d6
   27414:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27418:	vldr	d6, [pc, #352]	; 27580 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2741c:	vdiv.f64	d7, d7, d6
   27420:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27424:	vldr	d6, [pc, #332]	; 27578 <grisu3_diy_fp_encode_double@@Base+0xea0>
   27428:	vdiv.f64	d7, d7, d6
   2742c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27430:	vldr	d6, [pc, #488]	; 27620 <grisu3_diy_fp_encode_double@@Base+0xf48>
   27434:	vdiv.f64	d7, d7, d6
   27438:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2743c:	vldr	d6, [pc, #460]	; 27610 <grisu3_diy_fp_encode_double@@Base+0xf38>
   27440:	vdiv.f64	d7, d7, d6
   27444:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27448:	vldr	d6, [pc, #440]	; 27608 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2744c:	vdiv.f64	d7, d7, d6
   27450:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27454:	vldr	d6, [pc, #420]	; 27600 <grisu3_diy_fp_encode_double@@Base+0xf28>
   27458:	vdiv.f64	d7, d7, d6
   2745c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27460:	vldr	d6, [pc, #400]	; 275f8 <grisu3_diy_fp_encode_double@@Base+0xf20>
   27464:	vdiv.f64	d7, d7, d6
   27468:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2746c:	vldr	d6, [pc, #380]	; 275f0 <grisu3_diy_fp_encode_double@@Base+0xf18>
   27470:	vdiv.f64	d7, d7, d6
   27474:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27478:	vldr	d6, [pc, #360]	; 275e8 <grisu3_diy_fp_encode_double@@Base+0xf10>
   2747c:	vdiv.f64	d7, d7, d6
   27480:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27484:	vldr	d6, [pc, #340]	; 275e0 <grisu3_diy_fp_encode_double@@Base+0xf08>
   27488:	vdiv.f64	d7, d7, d6
   2748c:	b	26fc4 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27490:	ldr	r3, [sp, #8]
   27494:	cmp	r3, #0
   27498:	bne	270b4 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2749c:	add	r5, r5, r2
   274a0:	b	26e94 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   274a4:	add	ip, r4, #2
   274a8:	cmp	lr, ip
   274ac:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   274b0:	mov	r3, #0
   274b4:	ldrb	r2, [r4, #2]
   274b8:	str	r3, [sp, #8]
   274bc:	b	27044 <grisu3_diy_fp_encode_double@@Base+0x96c>
   274c0:	sub	r9, lr, r9
   274c4:	b	27248 <grisu3_diy_fp_encode_double@@Base+0xb70>
   274c8:	ldr	r3, [sp, #20]
   274cc:	ldr	r9, [sp, #24]
   274d0:	sub	r3, r6, r3
   274d4:	ldr	r8, [sp, #28]
   274d8:	add	r9, r9, r3
   274dc:	ldrb	ip, [r6]
   274e0:	cmp	ip, #48	; 0x30
   274e4:	bne	27684 <grisu3_diy_fp_encode_double@@Base+0xfac>
   274e8:	sub	r3, r2, r6
   274ec:	add	r6, r6, #1
   274f0:	cmp	r6, lr
   274f4:	mov	r4, r6
   274f8:	add	r2, r3, r6
   274fc:	beq	27224 <grisu3_diy_fp_encode_double@@Base+0xb4c>
   27500:	ldrb	ip, [r6], #1
   27504:	cmp	ip, #48	; 0x30
   27508:	beq	274f0 <grisu3_diy_fp_encode_double@@Base+0xe18>
   2750c:	sub	r3, ip, #49	; 0x31
   27510:	cmp	r3, #8
   27514:	bhi	27568 <grisu3_diy_fp_encode_double@@Base+0xe90>
   27518:	add	r3, r4, #1
   2751c:	cmp	lr, r3
   27520:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   27524:	ldrb	ip, [r4, #1]
   27528:	sub	r5, ip, #48	; 0x30
   2752c:	cmp	r5, #9
   27530:	bhi	27560 <grisu3_diy_fp_encode_double@@Base+0xe88>
   27534:	add	r3, r4, #2
   27538:	b	27550 <grisu3_diy_fp_encode_double@@Base+0xe78>
   2753c:	ldrb	ip, [r3]
   27540:	add	r3, r3, #1
   27544:	sub	r5, ip, #48	; 0x30
   27548:	cmp	r5, #9
   2754c:	bhi	27564 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   27550:	cmp	r3, lr
   27554:	mov	r4, r3
   27558:	bne	2753c <grisu3_diy_fp_encode_double@@Base+0xe64>
   2755c:	b	26e84 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   27560:	mov	r4, r3
   27564:	mov	r8, #1
   27568:	add	r5, r2, r9
   2756c:	b	2700c <grisu3_diy_fp_encode_double@@Base+0x934>
   27570:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   27574:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   27578:	stmda	r0, {}	; <UNPREDICTABLE>
   2757c:	eorsmi	r4, r7, #7733248	; 0x760000
   27580:	andcs	r0, r0, r0
   27584:	andmi	sl, r2, #95	; 0x5f
   27588:	andeq	r0, r0, r0
   2758c:	bicmi	ip, sp, r5, ror #26
   27590:	andeq	r0, r0, r0
   27594:	orrsmi	sp, r7, r4, lsl #15
   27598:	andeq	r0, r0, r0
   2759c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   275a0:	andeq	r0, r0, r0
   275a4:	smlawbmi	lr, r0, r4, r8
   275a8:	andeq	r0, r0, r0
   275ac:	rscsmi	r6, r8, r0, lsl #20
   275b0:	andeq	r0, r0, r0
   275b4:	sbcmi	r8, r3, r0, lsl #16
   275b8:	andeq	r0, r0, r0
   275bc:	addmi	r4, pc, r0
   275c0:	andeq	r0, r0, r0
   275c4:	subsmi	r0, r9, r0
   275c8:	andeq	r0, r0, r0
   275cc:	eormi	r0, r4, r0
   275d0:			; <UNDEFINED> instruction: 0x064dd592
   275d4:	strmi	pc, [r0], #207	; 0xcf
   275d8:	ldmvc	r5!, {r6, sl, fp, pc}
   275dc:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   275e0:	addsvs	r3, r1, r0, lsl #26
   275e4:	mvnmi	r5, #228, 16	; 0xe40000
   275e8:	strbvs	ip, [lr, -r0, lsl #16]
   275ec:			; <UNDEFINED> instruction: 0x43abc16d
   275f0:	ldrbhi	sl, [r8]
   275f4:	cmnmi	r6, #1459617792	; 0x57000000
   275f8:	strbcc	r8, [r0, r0]!
   275fc:	movtmi	ip, #4985	; 0x1379
   27600:	ldrtcs	r0, [r4], -r0
   27604:	movwmi	r6, #52213	; 0xcbf5
   27608:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2760c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   27610:	strb	r0, [r0, #-0]
   27614:	adcmi	r3, r2, #156	; 0x9c
   27618:	usatle	lr, #2, r0, asr #30
   2761c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   27620:	andge	r0, r0, #0
   27624:	rsbmi	r1, sp, #148, 20	; 0x94000
   27628:	ldr	r8, [sp, #28]
   2762c:	ldr	ip, [sp, #20]
   27630:	cmp	r8, #0
   27634:	ldr	r9, [sp, #24]
   27638:	sub	r8, r6, ip
   2763c:	bne	27654 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   27640:	cmp	r3, #52	; 0x34
   27644:	movls	r3, #0
   27648:	movhi	r3, #1
   2764c:	adds	r0, r0, r3
   27650:	adc	r1, r1, #0
   27654:	cmp	lr, r6
   27658:	add	r9, r9, r8
   2765c:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   27660:	mov	r8, #1
   27664:	b	274dc <grisu3_diy_fp_encode_double@@Base+0xe04>
   27668:	add	ip, r4, #2
   2766c:	cmp	lr, ip
   27670:	beq	27168 <grisu3_diy_fp_encode_double@@Base+0xa90>
   27674:	mov	r3, #1
   27678:	ldrb	r2, [r4, #2]
   2767c:	str	r3, [sp, #8]
   27680:	b	27044 <grisu3_diy_fp_encode_double@@Base+0x96c>
   27684:	mov	r4, r6
   27688:	b	2750c <grisu3_diy_fp_encode_double@@Base+0xe34>
   2768c:	mov	r4, lr
   27690:	mov	r9, #0
   27694:	b	27248 <grisu3_diy_fp_encode_double@@Base+0xb70>
   27698:	cmp	r8, #0
   2769c:	bne	276b4 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   276a0:	ldr	r6, [sp, #20]
   276a4:	b	27640 <grisu3_diy_fp_encode_double@@Base+0xf68>
   276a8:	mov	r4, lr
   276ac:	mov	r3, #0
   276b0:	b	27220 <grisu3_diy_fp_encode_double@@Base+0xb48>
   276b4:	ldr	r6, [sp, #20]
   276b8:	b	274dc <grisu3_diy_fp_encode_double@@Base+0xe04>

000276bc <flatcc_json_parser_error_string@@Base>:
   276bc:	cmp	r0, #34	; 0x22
   276c0:	addls	pc, pc, r0, lsl #2
   276c4:	b	278f8 <flatcc_json_parser_error_string@@Base+0x23c>
   276c8:	b	27754 <flatcc_json_parser_error_string@@Base+0x98>
   276cc:	b	278ec <flatcc_json_parser_error_string@@Base+0x230>
   276d0:	b	278e0 <flatcc_json_parser_error_string@@Base+0x224>
   276d4:	b	278d4 <flatcc_json_parser_error_string@@Base+0x218>
   276d8:	b	278c8 <flatcc_json_parser_error_string@@Base+0x20c>
   276dc:	b	278bc <flatcc_json_parser_error_string@@Base+0x200>
   276e0:	b	278b0 <flatcc_json_parser_error_string@@Base+0x1f4>
   276e4:	b	278a4 <flatcc_json_parser_error_string@@Base+0x1e8>
   276e8:	b	27898 <flatcc_json_parser_error_string@@Base+0x1dc>
   276ec:	b	2788c <flatcc_json_parser_error_string@@Base+0x1d0>
   276f0:	b	27880 <flatcc_json_parser_error_string@@Base+0x1c4>
   276f4:	b	27874 <flatcc_json_parser_error_string@@Base+0x1b8>
   276f8:	b	27868 <flatcc_json_parser_error_string@@Base+0x1ac>
   276fc:	b	2785c <flatcc_json_parser_error_string@@Base+0x1a0>
   27700:	b	27850 <flatcc_json_parser_error_string@@Base+0x194>
   27704:	b	27844 <flatcc_json_parser_error_string@@Base+0x188>
   27708:	b	27838 <flatcc_json_parser_error_string@@Base+0x17c>
   2770c:	b	2782c <flatcc_json_parser_error_string@@Base+0x170>
   27710:	b	27820 <flatcc_json_parser_error_string@@Base+0x164>
   27714:	b	27814 <flatcc_json_parser_error_string@@Base+0x158>
   27718:	b	27808 <flatcc_json_parser_error_string@@Base+0x14c>
   2771c:	b	277fc <flatcc_json_parser_error_string@@Base+0x140>
   27720:	b	277f0 <flatcc_json_parser_error_string@@Base+0x134>
   27724:	b	277e4 <flatcc_json_parser_error_string@@Base+0x128>
   27728:	b	277d8 <flatcc_json_parser_error_string@@Base+0x11c>
   2772c:	b	277cc <flatcc_json_parser_error_string@@Base+0x110>
   27730:	b	277c0 <flatcc_json_parser_error_string@@Base+0x104>
   27734:	b	277b4 <flatcc_json_parser_error_string@@Base+0xf8>
   27738:	b	277a8 <flatcc_json_parser_error_string@@Base+0xec>
   2773c:	b	2779c <flatcc_json_parser_error_string@@Base+0xe0>
   27740:	b	27790 <flatcc_json_parser_error_string@@Base+0xd4>
   27744:	b	27784 <flatcc_json_parser_error_string@@Base+0xc8>
   27748:	b	27778 <flatcc_json_parser_error_string@@Base+0xbc>
   2774c:	b	2776c <flatcc_json_parser_error_string@@Base+0xb0>
   27750:	b	27760 <flatcc_json_parser_error_string@@Base+0xa4>
   27754:	ldr	r0, [pc, #424]	; 27904 <flatcc_json_parser_error_string@@Base+0x248>
   27758:	add	r0, pc, r0
   2775c:	bx	lr
   27760:	ldr	r0, [pc, #416]	; 27908 <flatcc_json_parser_error_string@@Base+0x24c>
   27764:	add	r0, pc, r0
   27768:	bx	lr
   2776c:	ldr	r0, [pc, #408]	; 2790c <flatcc_json_parser_error_string@@Base+0x250>
   27770:	add	r0, pc, r0
   27774:	bx	lr
   27778:	ldr	r0, [pc, #400]	; 27910 <flatcc_json_parser_error_string@@Base+0x254>
   2777c:	add	r0, pc, r0
   27780:	bx	lr
   27784:	ldr	r0, [pc, #392]	; 27914 <flatcc_json_parser_error_string@@Base+0x258>
   27788:	add	r0, pc, r0
   2778c:	bx	lr
   27790:	ldr	r0, [pc, #384]	; 27918 <flatcc_json_parser_error_string@@Base+0x25c>
   27794:	add	r0, pc, r0
   27798:	bx	lr
   2779c:	ldr	r0, [pc, #376]	; 2791c <flatcc_json_parser_error_string@@Base+0x260>
   277a0:	add	r0, pc, r0
   277a4:	bx	lr
   277a8:	ldr	r0, [pc, #368]	; 27920 <flatcc_json_parser_error_string@@Base+0x264>
   277ac:	add	r0, pc, r0
   277b0:	bx	lr
   277b4:	ldr	r0, [pc, #360]	; 27924 <flatcc_json_parser_error_string@@Base+0x268>
   277b8:	add	r0, pc, r0
   277bc:	bx	lr
   277c0:	ldr	r0, [pc, #352]	; 27928 <flatcc_json_parser_error_string@@Base+0x26c>
   277c4:	add	r0, pc, r0
   277c8:	bx	lr
   277cc:	ldr	r0, [pc, #344]	; 2792c <flatcc_json_parser_error_string@@Base+0x270>
   277d0:	add	r0, pc, r0
   277d4:	bx	lr
   277d8:	ldr	r0, [pc, #336]	; 27930 <flatcc_json_parser_error_string@@Base+0x274>
   277dc:	add	r0, pc, r0
   277e0:	bx	lr
   277e4:	ldr	r0, [pc, #328]	; 27934 <flatcc_json_parser_error_string@@Base+0x278>
   277e8:	add	r0, pc, r0
   277ec:	bx	lr
   277f0:	ldr	r0, [pc, #320]	; 27938 <flatcc_json_parser_error_string@@Base+0x27c>
   277f4:	add	r0, pc, r0
   277f8:	bx	lr
   277fc:	ldr	r0, [pc, #312]	; 2793c <flatcc_json_parser_error_string@@Base+0x280>
   27800:	add	r0, pc, r0
   27804:	bx	lr
   27808:	ldr	r0, [pc, #304]	; 27940 <flatcc_json_parser_error_string@@Base+0x284>
   2780c:	add	r0, pc, r0
   27810:	bx	lr
   27814:	ldr	r0, [pc, #296]	; 27944 <flatcc_json_parser_error_string@@Base+0x288>
   27818:	add	r0, pc, r0
   2781c:	bx	lr
   27820:	ldr	r0, [pc, #288]	; 27948 <flatcc_json_parser_error_string@@Base+0x28c>
   27824:	add	r0, pc, r0
   27828:	bx	lr
   2782c:	ldr	r0, [pc, #280]	; 2794c <flatcc_json_parser_error_string@@Base+0x290>
   27830:	add	r0, pc, r0
   27834:	bx	lr
   27838:	ldr	r0, [pc, #272]	; 27950 <flatcc_json_parser_error_string@@Base+0x294>
   2783c:	add	r0, pc, r0
   27840:	bx	lr
   27844:	ldr	r0, [pc, #264]	; 27954 <flatcc_json_parser_error_string@@Base+0x298>
   27848:	add	r0, pc, r0
   2784c:	bx	lr
   27850:	ldr	r0, [pc, #256]	; 27958 <flatcc_json_parser_error_string@@Base+0x29c>
   27854:	add	r0, pc, r0
   27858:	bx	lr
   2785c:	ldr	r0, [pc, #248]	; 2795c <flatcc_json_parser_error_string@@Base+0x2a0>
   27860:	add	r0, pc, r0
   27864:	bx	lr
   27868:	ldr	r0, [pc, #240]	; 27960 <flatcc_json_parser_error_string@@Base+0x2a4>
   2786c:	add	r0, pc, r0
   27870:	bx	lr
   27874:	ldr	r0, [pc, #232]	; 27964 <flatcc_json_parser_error_string@@Base+0x2a8>
   27878:	add	r0, pc, r0
   2787c:	bx	lr
   27880:	ldr	r0, [pc, #224]	; 27968 <flatcc_json_parser_error_string@@Base+0x2ac>
   27884:	add	r0, pc, r0
   27888:	bx	lr
   2788c:	ldr	r0, [pc, #216]	; 2796c <flatcc_json_parser_error_string@@Base+0x2b0>
   27890:	add	r0, pc, r0
   27894:	bx	lr
   27898:	ldr	r0, [pc, #208]	; 27970 <flatcc_json_parser_error_string@@Base+0x2b4>
   2789c:	add	r0, pc, r0
   278a0:	bx	lr
   278a4:	ldr	r0, [pc, #200]	; 27974 <flatcc_json_parser_error_string@@Base+0x2b8>
   278a8:	add	r0, pc, r0
   278ac:	bx	lr
   278b0:	ldr	r0, [pc, #192]	; 27978 <flatcc_json_parser_error_string@@Base+0x2bc>
   278b4:	add	r0, pc, r0
   278b8:	bx	lr
   278bc:	ldr	r0, [pc, #184]	; 2797c <flatcc_json_parser_error_string@@Base+0x2c0>
   278c0:	add	r0, pc, r0
   278c4:	bx	lr
   278c8:	ldr	r0, [pc, #176]	; 27980 <flatcc_json_parser_error_string@@Base+0x2c4>
   278cc:	add	r0, pc, r0
   278d0:	bx	lr
   278d4:	ldr	r0, [pc, #168]	; 27984 <flatcc_json_parser_error_string@@Base+0x2c8>
   278d8:	add	r0, pc, r0
   278dc:	bx	lr
   278e0:	ldr	r0, [pc, #160]	; 27988 <flatcc_json_parser_error_string@@Base+0x2cc>
   278e4:	add	r0, pc, r0
   278e8:	bx	lr
   278ec:	ldr	r0, [pc, #152]	; 2798c <flatcc_json_parser_error_string@@Base+0x2d0>
   278f0:	add	r0, pc, r0
   278f4:	bx	lr
   278f8:	ldr	r0, [pc, #144]	; 27990 <flatcc_json_parser_error_string@@Base+0x2d4>
   278fc:	add	r0, pc, r0
   27900:	bx	lr
   27904:	andeq	r4, r0, r4, ror #31
   27908:	andeq	r5, r0, r0, lsl #5
   2790c:	andeq	r5, r0, r4, ror #4
   27910:	andeq	r5, r0, ip, lsr r2
   27914:	andeq	r5, r0, r8, lsl r2
   27918:	andeq	r5, r0, ip, ror #3
   2791c:	andeq	r5, r0, r8, asr #3
   27920:	andeq	r5, r0, r0, lsr #3
   27924:	andeq	r5, r0, r8, ror r1
   27928:	andeq	r5, r0, ip, asr #2
   2792c:	andeq	r5, r0, r0, lsr #2
   27930:	andeq	r5, r0, r0, lsl #2
   27934:	ldrdeq	r5, [r0], -r0
   27938:	strheq	r5, [r0], -r4
   2793c:	muleq	r0, r8, r0
   27940:	andeq	r5, r0, r8, ror r0
   27944:	andeq	r5, r0, ip, asr r0
   27948:	andeq	r5, r0, r0, asr #32
   2794c:	andeq	r5, r0, r0, lsr #32
   27950:	andeq	r5, r0, r4
   27954:	andeq	r4, r0, r4, ror #31
   27958:			; <UNDEFINED> instruction: 0x00004fbc
   2795c:	andeq	r4, r0, r0, lsr #31
   27960:	andeq	r4, r0, r0, lsl #31
   27964:	andeq	r4, r0, r4, ror #30
   27968:	andeq	r4, r0, r4, asr #30
   2796c:	andeq	r4, r0, r4, lsr #30
   27970:	andeq	r4, r0, ip, lsl #30
   27974:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   27978:	ldrdeq	r4, [r0], -r8
   2797c:			; <UNDEFINED> instruction: 0x00004eb4
   27980:	muleq	r0, r8, lr
   27984:	andeq	r4, r0, ip, ror lr
   27988:	andeq	r4, r0, r0, ror #28
   2798c:	andeq	r4, r0, r0, asr lr
   27990:	strdeq	r5, [r0], -r8

00027994 <flatcc_json_parser_set_error@@Base>:
   27994:	ldr	ip, [r0, #24]
   27998:	cmp	ip, #0
   2799c:	bne	279b8 <flatcc_json_parser_set_error@@Base+0x24>
   279a0:	ldr	ip, [r0, #4]
   279a4:	str	r3, [r0, #24]
   279a8:	sub	r3, r1, ip
   279ac:	add	r3, r3, #1
   279b0:	str	r1, [r0, #36]	; 0x24
   279b4:	str	r3, [r0, #20]
   279b8:	mov	r0, r2
   279bc:	bx	lr

000279c0 <flatcc_json_parser_string_part@@Base>:
   279c0:	cmp	r1, r2
   279c4:	beq	27a64 <flatcc_json_parser_string_part@@Base+0xa4>
   279c8:	ldrb	ip, [r1]
   279cc:	cmp	ip, #34	; 0x22
   279d0:	cmpne	ip, #31
   279d4:	movhi	r3, #1
   279d8:	movls	r3, #0
   279dc:	cmp	ip, #92	; 0x5c
   279e0:	moveq	r3, #0
   279e4:	andne	r3, r3, #1
   279e8:	cmp	r3, #0
   279ec:	beq	27a70 <flatcc_json_parser_string_part@@Base+0xb0>
   279f0:	add	r3, r1, #1
   279f4:	cmp	r3, r2
   279f8:	mov	r1, r3
   279fc:	beq	27a68 <flatcc_json_parser_string_part@@Base+0xa8>
   27a00:	push	{lr}		; (str lr, [sp, #-4]!)
   27a04:	b	27a14 <flatcc_json_parser_string_part@@Base+0x54>
   27a08:	cmp	r3, r2
   27a0c:	mov	r1, r3
   27a10:	beq	27a58 <flatcc_json_parser_string_part@@Base+0x98>
   27a14:	ldrb	ip, [r3], #1
   27a18:	cmp	ip, #34	; 0x22
   27a1c:	cmpne	ip, #31
   27a20:	movhi	lr, #1
   27a24:	movls	lr, #0
   27a28:	cmp	ip, #92	; 0x5c
   27a2c:	moveq	lr, #0
   27a30:	andne	lr, lr, #1
   27a34:	cmp	lr, #0
   27a38:	bne	27a08 <flatcc_json_parser_string_part@@Base+0x48>
   27a3c:	cmp	ip, #31
   27a40:	bls	27a4c <flatcc_json_parser_string_part@@Base+0x8c>
   27a44:	mov	r0, r1
   27a48:	pop	{pc}		; (ldr pc, [sp], #4)
   27a4c:	mov	r3, #17
   27a50:	pop	{lr}		; (ldr lr, [sp], #4)
   27a54:	b	27994 <flatcc_json_parser_set_error@@Base>
   27a58:	mov	r3, #20
   27a5c:	pop	{lr}		; (ldr lr, [sp], #4)
   27a60:	b	27994 <flatcc_json_parser_set_error@@Base>
   27a64:	mov	r1, r2
   27a68:	mov	r3, #20
   27a6c:	b	27994 <flatcc_json_parser_set_error@@Base>
   27a70:	cmp	ip, #31
   27a74:	bls	27a80 <flatcc_json_parser_string_part@@Base+0xc0>
   27a78:	mov	r0, r1
   27a7c:	bx	lr
   27a80:	mov	r3, #17
   27a84:	b	27994 <flatcc_json_parser_set_error@@Base>

00027a88 <flatcc_json_parser_space_ext@@Base>:
   27a88:	push	{lr}		; (str lr, [sp, #-4]!)
   27a8c:	mov	lr, #0
   27a90:	cmp	r1, r2
   27a94:	beq	27ac4 <flatcc_json_parser_space_ext@@Base+0x3c>
   27a98:	ldrb	ip, [r1]
   27a9c:	cmp	ip, #32
   27aa0:	bne	27acc <flatcc_json_parser_space_ext@@Base+0x44>
   27aa4:	add	r3, r1, #1
   27aa8:	b	27ab8 <flatcc_json_parser_space_ext@@Base+0x30>
   27aac:	ldrb	ip, [r3], #1
   27ab0:	cmp	ip, #32
   27ab4:	bne	27acc <flatcc_json_parser_space_ext@@Base+0x44>
   27ab8:	cmp	r3, r2
   27abc:	mov	r1, r3
   27ac0:	bne	27aac <flatcc_json_parser_space_ext@@Base+0x24>
   27ac4:	mov	r0, r1
   27ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   27acc:	cmp	ip, #32
   27ad0:	bhi	27ac4 <flatcc_json_parser_space_ext@@Base+0x3c>
   27ad4:	sub	ip, ip, #9
   27ad8:	cmp	ip, #23
   27adc:	addls	pc, pc, ip, lsl #2
   27ae0:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27ae4:	b	27b90 <flatcc_json_parser_space_ext@@Base+0x108>
   27ae8:	b	27b64 <flatcc_json_parser_space_ext@@Base+0xdc>
   27aec:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27af0:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27af4:	b	27b44 <flatcc_json_parser_space_ext@@Base+0xbc>
   27af8:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27afc:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b00:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b04:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b08:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b0c:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b10:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b14:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b18:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b1c:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b20:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b24:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b28:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b2c:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b30:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b34:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b38:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b3c:	b	27b98 <flatcc_json_parser_space_ext@@Base+0x110>
   27b40:	b	27a90 <flatcc_json_parser_space_ext@@Base+0x8>
   27b44:	sub	r3, r2, r1
   27b48:	cmp	r3, #1
   27b4c:	movle	r3, lr
   27b50:	ldrbgt	r3, [r1, #1]
   27b54:	subgt	r3, r3, #10
   27b58:	clzgt	r3, r3
   27b5c:	lsrgt	r3, r3, #5
   27b60:	add	r1, r1, r3
   27b64:	ldr	r3, [r0, #16]
   27b68:	add	r1, r1, #1
   27b6c:	add	r3, r3, #1
   27b70:	str	r1, [r0, #4]
   27b74:	str	r3, [r0, #16]
   27b78:	cmp	r2, r1
   27b7c:	beq	27ba4 <flatcc_json_parser_space_ext@@Base+0x11c>
   27b80:	ldrb	ip, [r1]
   27b84:	cmp	ip, #32
   27b88:	bls	27ad4 <flatcc_json_parser_space_ext@@Base+0x4c>
   27b8c:	b	27ac4 <flatcc_json_parser_space_ext@@Base+0x3c>
   27b90:	add	r1, r1, #1
   27b94:	b	27b78 <flatcc_json_parser_space_ext@@Base+0xf0>
   27b98:	mov	r3, #5
   27b9c:	pop	{lr}		; (ldr lr, [sp], #4)
   27ba0:	b	27994 <flatcc_json_parser_set_error@@Base>
   27ba4:	mov	r1, r2
   27ba8:	b	27ac4 <flatcc_json_parser_space_ext@@Base+0x3c>
   27bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bb0:	sub	sp, sp, #44	; 0x2c
   27bb4:	mov	ip, #0
   27bb8:	str	r3, [sp, #16]
   27bbc:	ldr	r3, [sp, #80]	; 0x50
   27bc0:	cmp	r1, r2
   27bc4:	mov	r6, r1
   27bc8:	mov	r5, r2
   27bcc:	strb	ip, [r3]
   27bd0:	mov	r8, r0
   27bd4:	beq	27d7c <flatcc_json_parser_space_ext@@Base+0x2f4>
   27bd8:	ldrb	r3, [r1]
   27bdc:	cmp	r3, #34	; 0x22
   27be0:	beq	27d30 <flatcc_json_parser_space_ext@@Base+0x2a8>
   27be4:	cmp	r3, #46	; 0x2e
   27be8:	movne	r3, #1
   27bec:	strne	r3, [r0, #12]
   27bf0:	beq	27d8c <flatcc_json_parser_space_ext@@Base+0x304>
   27bf4:	add	fp, sp, #24
   27bf8:	add	sl, sp, #28
   27bfc:	add	r9, sp, #32
   27c00:	mov	r3, #0
   27c04:	str	r3, [sp, #12]
   27c08:	str	r3, [sp, #20]
   27c0c:	ldr	r3, [sp, #16]
   27c10:	mov	r7, r3
   27c14:	ldr	r4, [r3]
   27c18:	b	27c30 <flatcc_json_parser_space_ext@@Base+0x1a8>
   27c1c:	cmp	r6, r0
   27c20:	bne	27c5c <flatcc_json_parser_space_ext@@Base+0x1d4>
   27c24:	ldr	r4, [r7, #4]!
   27c28:	cmp	r4, #0
   27c2c:	beq	27cd4 <flatcc_json_parser_space_ext@@Base+0x24c>
   27c30:	stm	sp, {r9, sl}
   27c34:	mov	r3, fp
   27c38:	mov	r2, r5
   27c3c:	mov	r1, r6
   27c40:	mov	r0, r8
   27c44:	blx	r4
   27c48:	cmp	r5, r0
   27c4c:	bne	27c1c <flatcc_json_parser_space_ext@@Base+0x194>
   27c50:	mov	r0, r5
   27c54:	add	sp, sp, #44	; 0x2c
   27c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c5c:	ldr	r3, [sp, #12]
   27c60:	mov	r4, r0
   27c64:	cmp	r3, #0
   27c68:	beq	27c78 <flatcc_json_parser_space_ext@@Base+0x1f0>
   27c6c:	ldr	r3, [r8, #12]
   27c70:	cmp	r3, #0
   27c74:	bne	27dc8 <flatcc_json_parser_space_ext@@Base+0x340>
   27c78:	ldr	r3, [sp, #24]
   27c7c:	cmp	r3, #0
   27c80:	bne	27cf8 <flatcc_json_parser_space_ext@@Base+0x270>
   27c84:	ldrd	r2, [sp, #32]
   27c88:	cmp	r3, #0
   27c8c:	cmpeq	r2, #255	; 0xff
   27c90:	uxtbls	r3, r2
   27c94:	strls	r3, [sp, #20]
   27c98:	bhi	27d18 <flatcc_json_parser_space_ext@@Base+0x290>
   27c9c:	ldr	r3, [sp, #80]	; 0x50
   27ca0:	ldr	r1, [sp, #12]
   27ca4:	ldr	r2, [sp, #28]
   27ca8:	ldrb	r3, [r3]
   27cac:	add	r1, r1, #1
   27cb0:	str	r1, [sp, #12]
   27cb4:	cmp	r2, #0
   27cb8:	ldr	r1, [sp, #20]
   27cbc:	ldr	r2, [sp, #80]	; 0x50
   27cc0:	add	r3, r1, r3
   27cc4:	strb	r3, [r2]
   27cc8:	beq	27dc0 <flatcc_json_parser_space_ext@@Base+0x338>
   27ccc:	mov	r6, r4
   27cd0:	b	27c0c <flatcc_json_parser_space_ext@@Base+0x184>
   27cd4:	mov	r2, r5
   27cd8:	mov	r1, r6
   27cdc:	mov	r0, r8
   27ce0:	mov	r3, #23
   27ce4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27ce8:	mov	r5, r0
   27cec:	mov	r0, r5
   27cf0:	add	sp, sp, #44	; 0x2c
   27cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cf8:	mov	r3, #8
   27cfc:	mov	r2, r5
   27d00:	mov	r1, r4
   27d04:	mov	r0, r8
   27d08:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27d0c:	cmp	r5, r0
   27d10:	bne	27c9c <flatcc_json_parser_space_ext@@Base+0x214>
   27d14:	b	27c50 <flatcc_json_parser_space_ext@@Base+0x1c8>
   27d18:	mov	r3, #7
   27d1c:	mov	r2, r5
   27d20:	mov	r1, r4
   27d24:	mov	r0, r8
   27d28:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27d2c:	b	27d0c <flatcc_json_parser_space_ext@@Base+0x284>
   27d30:	add	r6, r1, #1
   27d34:	sub	r3, r2, r6
   27d38:	str	ip, [r0, #12]
   27d3c:	cmp	r3, #1
   27d40:	ble	27d54 <flatcc_json_parser_space_ext@@Base+0x2cc>
   27d44:	ldrb	r3, [r6]
   27d48:	cmp	r3, #32
   27d4c:	bhi	27d68 <flatcc_json_parser_space_ext@@Base+0x2e0>
   27d50:	beq	27dac <flatcc_json_parser_space_ext@@Base+0x324>
   27d54:	mov	r1, r6
   27d58:	mov	r2, r5
   27d5c:	mov	r0, r8
   27d60:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   27d64:	mov	r6, r0
   27d68:	cmp	r5, r6
   27d6c:	bne	27bf4 <flatcc_json_parser_space_ext@@Base+0x16c>
   27d70:	mov	r0, r5
   27d74:	add	sp, sp, #44	; 0x2c
   27d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d7c:	ldr	r3, [r0, #12]
   27d80:	cmp	r3, #0
   27d84:	beq	27d54 <flatcc_json_parser_space_ext@@Base+0x2cc>
   27d88:	b	27c50 <flatcc_json_parser_space_ext@@Base+0x1c8>
   27d8c:	mov	r3, #5
   27d90:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27d94:	ldr	r3, [r8, #12]
   27d98:	cmp	r3, #0
   27d9c:	mov	r6, r0
   27da0:	subeq	r3, r5, r0
   27da4:	beq	27d3c <flatcc_json_parser_space_ext@@Base+0x2b4>
   27da8:	b	27d68 <flatcc_json_parser_space_ext@@Base+0x2e0>
   27dac:	ldrb	r3, [r6, #1]
   27db0:	cmp	r3, #32
   27db4:	addhi	r6, r6, #1
   27db8:	bls	27d54 <flatcc_json_parser_space_ext@@Base+0x2cc>
   27dbc:	b	27d68 <flatcc_json_parser_space_ext@@Base+0x2e0>
   27dc0:	mov	r5, r4
   27dc4:	b	27c50 <flatcc_json_parser_space_ext@@Base+0x1c8>
   27dc8:	mov	r2, r5
   27dcc:	mov	r1, r4
   27dd0:	mov	r0, r8
   27dd4:	mov	r3, #14
   27dd8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27ddc:	mov	r5, r0
   27de0:	b	27c50 <flatcc_json_parser_space_ext@@Base+0x1c8>
   27de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27de8:	sub	sp, sp, #28
   27dec:	mov	r9, r3
   27df0:	ldrh	r3, [sp, #68]	; 0x44
   27df4:	mov	ip, #0
   27df8:	mov	r7, r0
   27dfc:	ldr	r0, [r0]
   27e00:	mov	r4, r1
   27e04:	mov	r5, r2
   27e08:	str	ip, [sp, #20]
   27e0c:	str	r3, [sp, #12]
   27e10:	bl	23b00 <flatcc_builder_start_offset_vector@@Base>
   27e14:	cmp	r0, #0
   27e18:	bne	27e74 <flatcc_json_parser_space_ext@@Base+0x3ec>
   27e1c:	cmp	r4, r5
   27e20:	beq	27e30 <flatcc_json_parser_space_ext@@Base+0x3a8>
   27e24:	ldrb	r3, [r4]
   27e28:	cmp	r3, #91	; 0x5b
   27e2c:	beq	27e90 <flatcc_json_parser_space_ext@@Base+0x408>
   27e30:	mov	r1, r4
   27e34:	mov	r3, #22
   27e38:	mov	r2, r5
   27e3c:	mov	r0, r7
   27e40:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27e44:	mov	r6, #0
   27e48:	mov	r4, r0
   27e4c:	ldr	r3, [sp, #64]	; 0x40
   27e50:	cmp	r3, r6
   27e54:	beq	280ec <flatcc_json_parser_space_ext@@Base+0x664>
   27e58:	mov	r2, r5
   27e5c:	mov	r1, r4
   27e60:	mov	r0, r7
   27e64:	mov	r3, #30
   27e68:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27e6c:	b	27e88 <flatcc_json_parser_space_ext@@Base+0x400>
   27e70:	mov	r4, sl
   27e74:	mov	r2, r5
   27e78:	mov	r1, r4
   27e7c:	mov	r0, r7
   27e80:	mov	r3, #33	; 0x21
   27e84:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27e88:	add	sp, sp, #28
   27e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e90:	add	r8, r4, #1
   27e94:	sub	r3, r5, r8
   27e98:	cmp	r3, #1
   27e9c:	ble	27eb0 <flatcc_json_parser_space_ext@@Base+0x428>
   27ea0:	ldrb	r3, [r4, #1]
   27ea4:	cmp	r3, #32
   27ea8:	bhi	27ec4 <flatcc_json_parser_space_ext@@Base+0x43c>
   27eac:	beq	28134 <flatcc_json_parser_space_ext@@Base+0x6ac>
   27eb0:	mov	r1, r8
   27eb4:	mov	r2, r5
   27eb8:	mov	r0, r7
   27ebc:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   27ec0:	mov	r8, r0
   27ec4:	cmp	r5, r8
   27ec8:	beq	27ed8 <flatcc_json_parser_space_ext@@Base+0x450>
   27ecc:	ldrb	r3, [r8]
   27ed0:	cmp	r3, #93	; 0x5d
   27ed4:	beq	28180 <flatcc_json_parser_space_ext@@Base+0x6f8>
   27ed8:	ldr	r3, [sp, #64]	; 0x40
   27edc:	cmp	r3, #0
   27ee0:	beq	28070 <flatcc_json_parser_space_ext@@Base+0x5e8>
   27ee4:	add	sl, sp, #20
   27ee8:	mov	r6, #0
   27eec:	mov	fp, #1
   27ef0:	mov	r4, sl
   27ef4:	mov	r1, r9
   27ef8:	ldr	r0, [r7]
   27efc:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   27f00:	mov	r1, r8
   27f04:	mov	r2, r5
   27f08:	ldr	ip, [sp, #72]	; 0x48
   27f0c:	ldrb	r3, [r0, r6]
   27f10:	str	r4, [sp]
   27f14:	mov	r0, r7
   27f18:	blx	ip
   27f1c:	cmp	r5, r0
   27f20:	mov	sl, r0
   27f24:	beq	280a4 <flatcc_json_parser_space_ext@@Base+0x61c>
   27f28:	mov	r1, fp
   27f2c:	ldr	r0, [r7]
   27f30:	bl	23498 <flatcc_builder_extend_offset_vector@@Base>
   27f34:	cmp	r0, #0
   27f38:	beq	27e70 <flatcc_json_parser_space_ext@@Base+0x3e8>
   27f3c:	ldr	r3, [sp, #20]
   27f40:	sub	r1, r5, sl
   27f44:	cmp	r1, #1
   27f48:	str	r3, [r0]
   27f4c:	ble	27f60 <flatcc_json_parser_space_ext@@Base+0x4d8>
   27f50:	ldrb	r3, [sl]
   27f54:	cmp	r3, #32
   27f58:	bhi	27f80 <flatcc_json_parser_space_ext@@Base+0x4f8>
   27f5c:	beq	27ff4 <flatcc_json_parser_space_ext@@Base+0x56c>
   27f60:	mov	r1, sl
   27f64:	mov	r2, r5
   27f68:	mov	r0, r7
   27f6c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   27f70:	mov	sl, r0
   27f74:	cmp	r5, sl
   27f78:	beq	2800c <flatcc_json_parser_space_ext@@Base+0x584>
   27f7c:	ldrb	r3, [sl]
   27f80:	cmp	r3, #44	; 0x2c
   27f84:	beq	28018 <flatcc_json_parser_space_ext@@Base+0x590>
   27f88:	cmp	r3, #93	; 0x5d
   27f8c:	mov	r4, sl
   27f90:	beq	27fb4 <flatcc_json_parser_space_ext@@Base+0x52c>
   27f94:	mov	r1, sl
   27f98:	mov	r3, #9
   27f9c:	mov	r2, r5
   27fa0:	mov	r0, r7
   27fa4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   27fa8:	add	r6, r6, #1
   27fac:	mov	r4, r0
   27fb0:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   27fb4:	add	r1, sl, #1
   27fb8:	sub	r3, r5, r1
   27fbc:	cmp	r3, #1
   27fc0:	ble	27fdc <flatcc_json_parser_space_ext@@Base+0x554>
   27fc4:	ldrb	r3, [sl, #1]
   27fc8:	cmp	r3, #32
   27fcc:	addhi	r6, r6, #1
   27fd0:	movhi	r4, r1
   27fd4:	bhi	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   27fd8:	beq	2808c <flatcc_json_parser_space_ext@@Base+0x604>
   27fdc:	mov	r2, r5
   27fe0:	mov	r0, r7
   27fe4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   27fe8:	mov	r4, r0
   27fec:	add	r6, r6, #1
   27ff0:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   27ff4:	ldrb	r3, [sl, #1]
   27ff8:	cmp	r3, #32
   27ffc:	addhi	sl, sl, #1
   28000:	bls	27f60 <flatcc_json_parser_space_ext@@Base+0x4d8>
   28004:	cmp	r5, sl
   28008:	bne	27f7c <flatcc_json_parser_space_ext@@Base+0x4f4>
   2800c:	mov	r4, sl
   28010:	add	r6, r6, #1
   28014:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   28018:	add	r8, sl, #1
   2801c:	sub	r3, r5, r8
   28020:	cmp	r3, #1
   28024:	ble	28038 <flatcc_json_parser_space_ext@@Base+0x5b0>
   28028:	ldrb	r3, [sl, #1]
   2802c:	cmp	r3, #32
   28030:	bhi	2804c <flatcc_json_parser_space_ext@@Base+0x5c4>
   28034:	beq	280b0 <flatcc_json_parser_space_ext@@Base+0x628>
   28038:	mov	r1, r8
   2803c:	mov	r2, r5
   28040:	mov	r0, r7
   28044:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28048:	mov	r8, r0
   2804c:	cmp	r5, r8
   28050:	beq	28148 <flatcc_json_parser_space_ext@@Base+0x6c0>
   28054:	ldrb	r3, [r8]
   28058:	cmp	r3, #93	; 0x5d
   2805c:	beq	280c4 <flatcc_json_parser_space_ext@@Base+0x63c>
   28060:	ldr	r3, [sp, #64]	; 0x40
   28064:	add	r6, r6, #1
   28068:	cmp	r3, r6
   2806c:	bne	27ef4 <flatcc_json_parser_space_ext@@Base+0x46c>
   28070:	mov	r2, r5
   28074:	mov	r1, r8
   28078:	mov	r0, r7
   2807c:	mov	r3, #30
   28080:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28084:	add	sp, sp, #28
   28088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2808c:	ldrb	r3, [r4, #2]
   28090:	cmp	r3, #32
   28094:	addhi	r4, r4, #2
   28098:	addhi	r6, r6, #1
   2809c:	bls	27fdc <flatcc_json_parser_space_ext@@Base+0x554>
   280a0:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   280a4:	mov	r0, r5
   280a8:	add	sp, sp, #28
   280ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280b0:	ldrb	r3, [sl, #2]
   280b4:	cmp	r3, #32
   280b8:	addhi	r8, sl, #2
   280bc:	bls	28038 <flatcc_json_parser_space_ext@@Base+0x5b0>
   280c0:	b	2804c <flatcc_json_parser_space_ext@@Base+0x5c4>
   280c4:	add	r4, r8, #1
   280c8:	sub	r3, r5, r4
   280cc:	cmp	r3, #1
   280d0:	ble	280e4 <flatcc_json_parser_space_ext@@Base+0x65c>
   280d4:	ldrb	r3, [r8, #1]
   280d8:	cmp	r3, #32
   280dc:	bhi	27fec <flatcc_json_parser_space_ext@@Base+0x564>
   280e0:	beq	28168 <flatcc_json_parser_space_ext@@Base+0x6e0>
   280e4:	mov	r1, r4
   280e8:	b	27fdc <flatcc_json_parser_space_ext@@Base+0x554>
   280ec:	mov	r1, r9
   280f0:	ldr	r0, [r7]
   280f4:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   280f8:	mov	r1, r0
   280fc:	ldr	r0, [r7]
   28100:	bl	24c7c <flatcc_builder_end_offset_vector_for_unions@@Base>
   28104:	cmp	r0, #0
   28108:	str	r0, [sp, #20]
   2810c:	beq	27e74 <flatcc_json_parser_space_ext@@Base+0x3ec>
   28110:	ldr	r1, [sp, #12]
   28114:	ldr	r0, [r7]
   28118:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   2811c:	subs	r3, r0, #0
   28120:	beq	27e74 <flatcc_json_parser_space_ext@@Base+0x3ec>
   28124:	ldr	r2, [sp, #20]
   28128:	mov	r0, r4
   2812c:	str	r2, [r3]
   28130:	b	27e88 <flatcc_json_parser_space_ext@@Base+0x400>
   28134:	ldrb	r3, [r4, #2]
   28138:	cmp	r3, #32
   2813c:	addhi	r8, r4, #2
   28140:	bls	27eb0 <flatcc_json_parser_space_ext@@Base+0x428>
   28144:	b	27ec4 <flatcc_json_parser_space_ext@@Base+0x43c>
   28148:	mov	r3, #9
   2814c:	mov	r2, r5
   28150:	mov	r1, r5
   28154:	mov	r0, r7
   28158:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2815c:	add	r6, r6, #1
   28160:	mov	r4, r0
   28164:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   28168:	ldrb	r3, [r8, #2]
   2816c:	cmp	r3, #32
   28170:	addhi	r4, r8, #2
   28174:	addhi	r6, r6, #1
   28178:	bls	280e4 <flatcc_json_parser_space_ext@@Base+0x65c>
   2817c:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   28180:	add	r4, r8, #1
   28184:	sub	r3, r5, r4
   28188:	cmp	r3, #1
   2818c:	ble	281a4 <flatcc_json_parser_space_ext@@Base+0x71c>
   28190:	ldrb	r3, [r8, #1]
   28194:	cmp	r3, #32
   28198:	movhi	r6, #0
   2819c:	bhi	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   281a0:	beq	281c0 <flatcc_json_parser_space_ext@@Base+0x738>
   281a4:	mov	r1, r4
   281a8:	mov	r2, r5
   281ac:	mov	r0, r7
   281b0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   281b4:	mov	r6, #0
   281b8:	mov	r4, r0
   281bc:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>
   281c0:	ldrb	r3, [r8, #2]
   281c4:	cmp	r3, #32
   281c8:	addhi	r4, r8, #2
   281cc:	movhi	r6, #0
   281d0:	bls	281a4 <flatcc_json_parser_space_ext@@Base+0x71c>
   281d4:	b	27e4c <flatcc_json_parser_space_ext@@Base+0x3c4>

000281d8 <flatcc_json_parser_string_escape@@Base>:
   281d8:	sub	ip, r2, r1
   281dc:	cmp	ip, #1
   281e0:	ble	28378 <flatcc_json_parser_string_escape@@Base+0x1a0>
   281e4:	push	{r4, r5, lr}
   281e8:	ldrb	lr, [r1]
   281ec:	cmp	lr, #92	; 0x5c
   281f0:	beq	28208 <flatcc_json_parser_string_escape@@Base+0x30>
   281f4:	mov	ip, #0
   281f8:	strb	ip, [r3]
   281fc:	mov	r3, #18
   28200:	pop	{r4, r5, lr}
   28204:	b	27994 <flatcc_json_parser_set_error@@Base>
   28208:	ldrb	lr, [r1, #1]
   2820c:	sub	lr, lr, #34	; 0x22
   28210:	cmp	lr, #86	; 0x56
   28214:	addls	pc, pc, lr, lsl #2
   28218:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2821c:	b	28410 <flatcc_json_parser_string_escape@@Base+0x238>
   28220:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28224:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28228:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2822c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28230:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28234:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28238:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2823c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28240:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28244:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28248:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2824c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28250:	b	28428 <flatcc_json_parser_string_escape@@Base+0x250>
   28254:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28258:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2825c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28260:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28264:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28268:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2826c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28270:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28274:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28278:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2827c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28280:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28284:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28288:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2828c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28290:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28294:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28298:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2829c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282a0:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282a4:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282a8:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282ac:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282b0:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282b4:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282b8:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282bc:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282c0:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282c4:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282c8:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282cc:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282d0:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282d4:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282d8:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282dc:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282e0:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282e4:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282e8:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282ec:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282f0:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282f4:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282f8:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   282fc:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28300:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28304:	b	28440 <flatcc_json_parser_string_escape@@Base+0x268>
   28308:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2830c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28310:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28314:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28318:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2831c:	b	28458 <flatcc_json_parser_string_escape@@Base+0x280>
   28320:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28324:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28328:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2832c:	b	28470 <flatcc_json_parser_string_escape@@Base+0x298>
   28330:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28334:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28338:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2833c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28340:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28344:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28348:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2834c:	b	28488 <flatcc_json_parser_string_escape@@Base+0x2b0>
   28350:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28354:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28358:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2835c:	b	284a0 <flatcc_json_parser_string_escape@@Base+0x2c8>
   28360:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28364:	b	284b8 <flatcc_json_parser_string_escape@@Base+0x2e0>
   28368:	b	284d0 <flatcc_json_parser_string_escape@@Base+0x2f8>
   2836c:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28370:	b	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28374:	b	28388 <flatcc_json_parser_string_escape@@Base+0x1b0>
   28378:	mov	ip, #0
   2837c:	strb	ip, [r3]
   28380:	mov	r3, #18
   28384:	b	27994 <flatcc_json_parser_set_error@@Base>
   28388:	cmp	ip, #3
   2838c:	mov	ip, #1
   28390:	strb	ip, [r3]
   28394:	ble	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28398:	ldrb	ip, [r1, #2]
   2839c:	sub	lr, ip, #48	; 0x30
   283a0:	uxtb	r4, lr
   283a4:	cmp	r4, #9
   283a8:	lslls	ip, lr, #4
   283ac:	uxtbls	ip, ip
   283b0:	bls	283d0 <flatcc_json_parser_string_escape@@Base+0x1f8>
   283b4:	orr	ip, ip, #32
   283b8:	sub	lr, ip, #97	; 0x61
   283bc:	cmp	lr, #5
   283c0:	bhi	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   283c4:	sub	ip, ip, #87	; 0x57
   283c8:	lsl	ip, ip, #4
   283cc:	uxtb	ip, ip
   283d0:	ldrb	lr, [r1, #3]
   283d4:	sub	r4, lr, #48	; 0x30
   283d8:	uxtb	r4, r4
   283dc:	cmp	r4, #9
   283e0:	orrls	ip, r4, ip
   283e4:	bls	28404 <flatcc_json_parser_string_escape@@Base+0x22c>
   283e8:	orr	lr, lr, #32
   283ec:	sub	r4, lr, #97	; 0x61
   283f0:	cmp	r4, #5
   283f4:	bhi	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   283f8:	sub	lr, lr, #87	; 0x57
   283fc:	orr	ip, lr, ip
   28400:	uxtb	ip, ip
   28404:	strb	ip, [r3, #1]
   28408:	add	r0, r1, #4
   2840c:	pop	{r4, r5, pc}
   28410:	mov	ip, #1
   28414:	mov	r2, #34	; 0x22
   28418:	add	r0, r1, #2
   2841c:	strb	ip, [r3]
   28420:	strb	r2, [r3, #1]
   28424:	pop	{r4, r5, pc}
   28428:	mov	ip, #1
   2842c:	mov	r2, #47	; 0x2f
   28430:	add	r0, r1, #2
   28434:	strb	ip, [r3]
   28438:	strb	r2, [r3, #1]
   2843c:	pop	{r4, r5, pc}
   28440:	mov	ip, #1
   28444:	mov	r2, #92	; 0x5c
   28448:	add	r0, r1, #2
   2844c:	strb	ip, [r3]
   28450:	strb	r2, [r3, #1]
   28454:	pop	{r4, r5, pc}
   28458:	mov	ip, #1
   2845c:	mov	r2, #8
   28460:	add	r0, r1, #2
   28464:	strb	ip, [r3]
   28468:	strb	r2, [r3, #1]
   2846c:	pop	{r4, r5, pc}
   28470:	mov	ip, #1
   28474:	mov	r2, #12
   28478:	add	r0, r1, #2
   2847c:	strb	ip, [r3]
   28480:	strb	r2, [r3, #1]
   28484:	pop	{r4, r5, pc}
   28488:	mov	ip, #1
   2848c:	mov	r2, #10
   28490:	add	r0, r1, #2
   28494:	strb	ip, [r3]
   28498:	strb	r2, [r3, #1]
   2849c:	pop	{r4, r5, pc}
   284a0:	mov	ip, #1
   284a4:	mov	r2, #13
   284a8:	add	r0, r1, #2
   284ac:	strb	ip, [r3]
   284b0:	strb	r2, [r3, #1]
   284b4:	pop	{r4, r5, pc}
   284b8:	mov	ip, #1
   284bc:	mov	r2, #9
   284c0:	add	r0, r1, #2
   284c4:	strb	ip, [r3]
   284c8:	strb	r2, [r3, #1]
   284cc:	pop	{r4, r5, pc}
   284d0:	cmp	ip, #5
   284d4:	ble	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   284d8:	ldrb	ip, [r1, #2]
   284dc:	sub	lr, ip, #48	; 0x30
   284e0:	uxtb	r4, lr
   284e4:	cmp	r4, #9
   284e8:	lslls	ip, lr, #12
   284ec:	uxthls	ip, ip
   284f0:	bls	28510 <flatcc_json_parser_string_escape@@Base+0x338>
   284f4:	orr	ip, ip, #32
   284f8:	sub	lr, ip, #97	; 0x61
   284fc:	cmp	lr, #5
   28500:	bhi	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   28504:	sub	ip, ip, #87	; 0x57
   28508:	lsl	ip, ip, #12
   2850c:	and	ip, ip, #61440	; 0xf000
   28510:	ldrb	lr, [r1, #3]
   28514:	sub	r4, lr, #48	; 0x30
   28518:	uxtb	r5, r4
   2851c:	cmp	r5, #9
   28520:	bhi	285a4 <flatcc_json_parser_string_escape@@Base+0x3cc>
   28524:	uxth	r4, r4
   28528:	orr	ip, ip, r4, lsl #8
   2852c:	and	ip, ip, #65280	; 0xff00
   28530:	ldrb	lr, [r1, #4]
   28534:	sub	r4, lr, #48	; 0x30
   28538:	uxtb	r5, r4
   2853c:	cmp	r5, #9
   28540:	bhi	285c8 <flatcc_json_parser_string_escape@@Base+0x3f0>
   28544:	uxth	r4, r4
   28548:	orr	ip, ip, r4, lsl #4
   2854c:	uxth	ip, ip
   28550:	ldrb	lr, [r1, #5]
   28554:	sub	r4, lr, #48	; 0x30
   28558:	uxtb	r5, r4
   2855c:	cmp	r5, #9
   28560:	orrls	r2, ip, r4
   28564:	uxthls	r2, r2
   28568:	bls	28588 <flatcc_json_parser_string_escape@@Base+0x3b0>
   2856c:	orr	lr, lr, #32
   28570:	sub	r4, lr, #97	; 0x61
   28574:	cmp	r4, #5
   28578:	bhi	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   2857c:	sub	r2, lr, #87	; 0x57
   28580:	orr	r2, ip, r2
   28584:	uxth	r2, r2
   28588:	cmp	r2, #127	; 0x7f
   2858c:	bhi	285ec <flatcc_json_parser_string_escape@@Base+0x414>
   28590:	mov	r0, #1
   28594:	strb	r2, [r3, #1]
   28598:	strb	r0, [r3]
   2859c:	add	r0, r1, #6
   285a0:	pop	{r4, r5, pc}
   285a4:	orr	lr, lr, #32
   285a8:	sub	r4, lr, #97	; 0x61
   285ac:	cmp	r4, #5
   285b0:	bhi	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   285b4:	sub	lr, lr, #87	; 0x57
   285b8:	uxth	lr, lr
   285bc:	orr	ip, ip, lr, lsl #8
   285c0:	and	ip, ip, #65280	; 0xff00
   285c4:	b	28530 <flatcc_json_parser_string_escape@@Base+0x358>
   285c8:	orr	lr, lr, #32
   285cc:	sub	r4, lr, #97	; 0x61
   285d0:	cmp	r4, #5
   285d4:	bhi	281f4 <flatcc_json_parser_string_escape@@Base+0x1c>
   285d8:	sub	lr, lr, #87	; 0x57
   285dc:	uxth	lr, lr
   285e0:	orr	ip, ip, lr, lsl #4
   285e4:	uxth	ip, ip
   285e8:	b	28550 <flatcc_json_parser_string_escape@@Base+0x378>
   285ec:	cmp	r2, #2048	; 0x800
   285f0:	bcs	2861c <flatcc_json_parser_string_escape@@Base+0x444>
   285f4:	and	r0, r2, #63	; 0x3f
   285f8:	mvn	ip, #63	; 0x3f
   285fc:	mvn	r0, r0, lsl #25
   28600:	orr	r2, ip, r2, lsr #6
   28604:	mvn	r0, r0, lsr #25
   28608:	mov	ip, #2
   2860c:	strb	r0, [r3, #2]
   28610:	strb	r2, [r3, #1]
   28614:	strb	ip, [r3]
   28618:	b	2859c <flatcc_json_parser_string_escape@@Base+0x3c4>
   2861c:	lsl	lr, r2, #20
   28620:	mvn	r4, #127	; 0x7f
   28624:	and	ip, r2, #63	; 0x3f
   28628:	mvn	r0, #31
   2862c:	orr	r2, r0, r2, lsr #12
   28630:	orr	lr, r4, lr, lsr #26
   28634:	orr	ip, ip, r4
   28638:	mov	r0, #3
   2863c:	strb	lr, [r3, #2]
   28640:	strb	ip, [r3, #3]
   28644:	strb	r2, [r3, #1]
   28648:	strb	r0, [r3]
   2864c:	b	2859c <flatcc_json_parser_string_escape@@Base+0x3c4>

00028650 <flatcc_json_parser_skip_constant@@Base>:
   28650:	cmp	r1, r2
   28654:	push	{r4, r5, r6, lr}
   28658:	mov	r5, r2
   2865c:	beq	286ec <flatcc_json_parser_skip_constant@@Base+0x9c>
   28660:	mov	r4, r1
   28664:	mov	r6, r0
   28668:	b	28678 <flatcc_json_parser_skip_constant@@Base+0x28>
   2866c:	add	r4, r4, #1
   28670:	cmp	r5, r4
   28674:	beq	286ec <flatcc_json_parser_skip_constant@@Base+0x9c>
   28678:	ldrb	r3, [r4]
   2867c:	sub	r2, r3, #95	; 0x5f
   28680:	clz	r2, r2
   28684:	lsr	r2, r2, #5
   28688:	orrs	r2, r2, r3, lsr #7
   2868c:	bne	2866c <flatcc_json_parser_skip_constant@@Base+0x1c>
   28690:	sub	r2, r3, #48	; 0x30
   28694:	cmp	r3, #46	; 0x2e
   28698:	cmpne	r2, #9
   2869c:	bls	2866c <flatcc_json_parser_skip_constant@@Base+0x1c>
   286a0:	orr	r2, r3, #32
   286a4:	sub	r2, r2, #97	; 0x61
   286a8:	cmp	r2, #25
   286ac:	bls	2866c <flatcc_json_parser_skip_constant@@Base+0x1c>
   286b0:	sub	r2, r5, r4
   286b4:	cmp	r2, #1
   286b8:	ble	286c8 <flatcc_json_parser_skip_constant@@Base+0x78>
   286bc:	cmp	r3, #32
   286c0:	bhi	286f4 <flatcc_json_parser_skip_constant@@Base+0xa4>
   286c4:	beq	28700 <flatcc_json_parser_skip_constant@@Base+0xb0>
   286c8:	mov	r2, r5
   286cc:	mov	r1, r4
   286d0:	mov	r0, r6
   286d4:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   286d8:	cmp	r4, r0
   286dc:	beq	286f4 <flatcc_json_parser_skip_constant@@Base+0xa4>
   286e0:	mov	r4, r0
   286e4:	cmp	r5, r4
   286e8:	bne	28678 <flatcc_json_parser_skip_constant@@Base+0x28>
   286ec:	mov	r0, r5
   286f0:	pop	{r4, r5, r6, pc}
   286f4:	mov	r5, r4
   286f8:	mov	r0, r5
   286fc:	pop	{r4, r5, r6, pc}
   28700:	ldrb	r3, [r4, #1]
   28704:	cmp	r3, #32
   28708:	addhi	r0, r4, #1
   2870c:	bls	286c8 <flatcc_json_parser_skip_constant@@Base+0x78>
   28710:	b	286d8 <flatcc_json_parser_skip_constant@@Base+0x88>

00028714 <flatcc_json_parser_match_constant@@Base>:
   28714:	push	{r4, r5, r6, r7, r8, lr}
   28718:	sub	lr, r2, r1
   2871c:	cmp	r3, lr
   28720:	ldr	r5, [sp, #24]
   28724:	bge	28774 <flatcc_json_parser_match_constant@@Base+0x60>
   28728:	mov	r7, r1
   2872c:	ldr	r1, [r0, #12]
   28730:	mov	r6, r2
   28734:	cmp	r1, #0
   28738:	mov	lr, r0
   2873c:	add	r4, r7, r3
   28740:	bne	28784 <flatcc_json_parser_match_constant@@Base+0x70>
   28744:	ldrb	r3, [r7, r3]
   28748:	cmp	r3, #32
   2874c:	beq	28810 <flatcc_json_parser_match_constant@@Base+0xfc>
   28750:	cmp	r3, #34	; 0x22
   28754:	beq	28858 <flatcc_json_parser_match_constant@@Base+0x144>
   28758:	cmp	r3, #92	; 0x5c
   2875c:	str	r1, [r5]
   28760:	bne	28808 <flatcc_json_parser_match_constant@@Base+0xf4>
   28764:	mov	r1, r4
   28768:	mov	r3, #18
   2876c:	pop	{r4, r5, r6, r7, r8, lr}
   28770:	b	27994 <flatcc_json_parser_set_error@@Base>
   28774:	mov	r3, #0
   28778:	mov	r0, r1
   2877c:	str	r3, [r5]
   28780:	pop	{r4, r5, r6, r7, r8, pc}
   28784:	sub	r2, r2, r4
   28788:	cmp	r2, #1
   2878c:	ble	287a0 <flatcc_json_parser_match_constant@@Base+0x8c>
   28790:	ldrb	r3, [r7, r3]
   28794:	cmp	r3, #32
   28798:	bhi	288b0 <flatcc_json_parser_match_constant@@Base+0x19c>
   2879c:	beq	288e0 <flatcc_json_parser_match_constant@@Base+0x1cc>
   287a0:	mov	r0, lr
   287a4:	mov	r2, r6
   287a8:	mov	r1, r4
   287ac:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   287b0:	cmp	r6, r0
   287b4:	beq	288bc <flatcc_json_parser_match_constant@@Base+0x1a8>
   287b8:	cmp	r4, r0
   287bc:	beq	287e8 <flatcc_json_parser_match_constant@@Base+0xd4>
   287c0:	ldrb	r3, [r0]
   287c4:	sub	r2, r3, #95	; 0x5f
   287c8:	clz	r2, r2
   287cc:	lsr	r2, r2, #5
   287d0:	orrs	r2, r2, r3, lsr #7
   287d4:	bne	288a4 <flatcc_json_parser_match_constant@@Base+0x190>
   287d8:	orr	r3, r3, #32
   287dc:	sub	r3, r3, #97	; 0x61
   287e0:	cmp	r3, #25
   287e4:	bls	288a4 <flatcc_json_parser_match_constant@@Base+0x190>
   287e8:	mov	r3, #0
   287ec:	str	r3, [r5]
   287f0:	ldrb	r3, [r0]
   287f4:	and	r2, r3, #223	; 0xdf
   287f8:	cmp	r3, #44	; 0x2c
   287fc:	cmpne	r2, #93	; 0x5d
   28800:	movne	r0, r7
   28804:	pop	{r4, r5, r6, r7, r8, pc}
   28808:	mov	r0, r7
   2880c:	pop	{r4, r5, r6, r7, r8, pc}
   28810:	add	r3, r4, #1
   28814:	cmp	r2, r3
   28818:	beq	288f4 <flatcc_json_parser_match_constant@@Base+0x1e0>
   2881c:	ldrb	r1, [r4, #1]
   28820:	cmp	r1, #32
   28824:	bne	28888 <flatcc_json_parser_match_constant@@Base+0x174>
   28828:	add	r3, r4, #2
   2882c:	b	2883c <flatcc_json_parser_match_constant@@Base+0x128>
   28830:	ldrb	r1, [r3], #1
   28834:	cmp	r1, #32
   28838:	bne	2888c <flatcc_json_parser_match_constant@@Base+0x178>
   2883c:	cmp	r6, r3
   28840:	mov	r4, r3
   28844:	bne	28830 <flatcc_json_parser_match_constant@@Base+0x11c>
   28848:	mov	r0, r4
   2884c:	mov	r3, #0
   28850:	str	r3, [r5]
   28854:	pop	{r4, r5, r6, r7, r8, pc}
   28858:	add	r0, r4, #1
   2885c:	cmn	r0, #1
   28860:	bge	28874 <flatcc_json_parser_match_constant@@Base+0x160>
   28864:	ldrb	r3, [r4, #1]
   28868:	cmp	r3, #32
   2886c:	bhi	2884c <flatcc_json_parser_match_constant@@Base+0x138>
   28870:	beq	288cc <flatcc_json_parser_match_constant@@Base+0x1b8>
   28874:	mov	r1, r0
   28878:	mov	r2, #0
   2887c:	mov	r0, lr
   28880:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28884:	b	2884c <flatcc_json_parser_match_constant@@Base+0x138>
   28888:	mov	r4, r3
   2888c:	cmp	r1, #34	; 0x22
   28890:	beq	28858 <flatcc_json_parser_match_constant@@Base+0x144>
   28894:	mov	r3, #1
   28898:	mov	r0, r4
   2889c:	str	r3, [r5]
   288a0:	pop	{r4, r5, r6, r7, r8, pc}
   288a4:	mov	r3, #1
   288a8:	str	r3, [r5]
   288ac:	pop	{r4, r5, r6, r7, r8, pc}
   288b0:	cmp	r4, r6
   288b4:	movne	r0, r4
   288b8:	bne	287e8 <flatcc_json_parser_match_constant@@Base+0xd4>
   288bc:	mov	r3, #0
   288c0:	mov	r0, r6
   288c4:	str	r3, [r5]
   288c8:	pop	{r4, r5, r6, r7, r8, pc}
   288cc:	ldrb	r3, [r4, #2]
   288d0:	cmp	r3, #32
   288d4:	addhi	r0, r4, #2
   288d8:	bls	28874 <flatcc_json_parser_match_constant@@Base+0x160>
   288dc:	b	2884c <flatcc_json_parser_match_constant@@Base+0x138>
   288e0:	ldrb	r3, [r4, #1]
   288e4:	cmp	r3, #32
   288e8:	addhi	r0, r4, #1
   288ec:	bls	287a0 <flatcc_json_parser_match_constant@@Base+0x8c>
   288f0:	b	287b0 <flatcc_json_parser_match_constant@@Base+0x9c>
   288f4:	mov	r4, r2
   288f8:	b	28848 <flatcc_json_parser_match_constant@@Base+0x134>

000288fc <flatcc_json_parser_double@@Base>:
   288fc:	push	{r4, r5, r6, r7, r8, lr}
   28900:	mov	r4, #0
   28904:	mov	r5, #0
   28908:	cmp	r1, r2
   2890c:	strd	r4, [r3]
   28910:	beq	289a4 <flatcc_json_parser_double@@Base+0xa8>
   28914:	ldrb	ip, [r1]
   28918:	cmp	ip, #45	; 0x2d
   2891c:	addeq	ip, r1, #1
   28920:	movne	ip, r1
   28924:	sub	lr, r2, ip
   28928:	cmp	lr, #1
   2892c:	ble	28944 <flatcc_json_parser_double@@Base+0x48>
   28930:	ldrb	lr, [ip]
   28934:	cmp	lr, #46	; 0x2e
   28938:	beq	289b8 <flatcc_json_parser_double@@Base+0xbc>
   2893c:	cmp	lr, #48	; 0x30
   28940:	beq	289ac <flatcc_json_parser_double@@Base+0xb0>
   28944:	mov	r4, r1
   28948:	mov	r5, r2
   2894c:	sub	r1, r5, r1
   28950:	mov	r7, r0
   28954:	mov	r2, r3
   28958:	mov	r0, r4
   2895c:	mov	r6, r3
   28960:	bl	26cbc <grisu3_diy_fp_encode_double@@Base+0x5e4>
   28964:	cmp	r4, r0
   28968:	cmpne	r0, #0
   2896c:	mov	r1, r0
   28970:	bne	289a4 <flatcc_json_parser_double@@Base+0xa8>
   28974:	vldr	d7, [r6]
   28978:	vldr	d6, [pc, #72]	; 289c8 <flatcc_json_parser_double@@Base+0xcc>
   2897c:	mov	r2, r5
   28980:	mov	r1, r4
   28984:	vabs.f64	d7, d7
   28988:	mov	r0, r7
   2898c:	vcmp.f64	d7, d6
   28990:	vmrs	APSR_nzcv, fpscr
   28994:	ble	289b8 <flatcc_json_parser_double@@Base+0xbc>
   28998:	mov	r3, #7
   2899c:	pop	{r4, r5, r6, r7, r8, lr}
   289a0:	b	27994 <flatcc_json_parser_set_error@@Base>
   289a4:	mov	r0, r1
   289a8:	pop	{r4, r5, r6, r7, r8, pc}
   289ac:	ldrb	ip, [ip, #1]
   289b0:	cmp	ip, #48	; 0x30
   289b4:	bne	28944 <flatcc_json_parser_double@@Base+0x48>
   289b8:	mov	r3, #6
   289bc:	pop	{r4, r5, r6, r7, r8, lr}
   289c0:	b	27994 <flatcc_json_parser_set_error@@Base>
   289c4:	nop			; (mov r0, r0)
   289c8:			; <UNDEFINED> instruction: 0xffffffff
   289cc:	svcvc	0x00efffff

000289d0 <flatcc_json_parser_float@@Base>:
   289d0:	mov	ip, #0
   289d4:	cmp	r1, r2
   289d8:	str	ip, [r3]
   289dc:	beq	28ac4 <flatcc_json_parser_float@@Base+0xf4>
   289e0:	push	{r4, r5, r6, r7, lr}
   289e4:	mov	r7, r3
   289e8:	ldrb	ip, [r1]
   289ec:	sub	sp, sp, #12
   289f0:	mov	r6, r0
   289f4:	cmp	ip, #45	; 0x2d
   289f8:	addeq	ip, r1, #1
   289fc:	movne	ip, r1
   28a00:	sub	r3, r2, ip
   28a04:	cmp	r3, #1
   28a08:	mov	r5, r2
   28a0c:	mov	r4, r1
   28a10:	ble	28a28 <flatcc_json_parser_float@@Base+0x58>
   28a14:	ldrb	r3, [ip]
   28a18:	cmp	r3, #46	; 0x2e
   28a1c:	beq	28a98 <flatcc_json_parser_float@@Base+0xc8>
   28a20:	cmp	r3, #48	; 0x30
   28a24:	beq	28ab4 <flatcc_json_parser_float@@Base+0xe4>
   28a28:	mov	r2, sp
   28a2c:	sub	r1, r5, r4
   28a30:	mov	r0, r4
   28a34:	bl	26cbc <grisu3_diy_fp_encode_double@@Base+0x5e4>
   28a38:	vldr	d6, [sp]
   28a3c:	vldr	s14, [pc, #136]	; 28acc <flatcc_json_parser_float@@Base+0xfc>
   28a40:	vcvt.f32.f64	s15, d6
   28a44:	vabs.f32	s11, s15
   28a48:	vstr	s15, [r7]
   28a4c:	vcmp.f32	s11, s14
   28a50:	vmrs	APSR_nzcv, fpscr
   28a54:	ble	28a8c <flatcc_json_parser_float@@Base+0xbc>
   28a58:	vcmpe.f64	d6, #0.0
   28a5c:	vldr	s15, [pc, #108]	; 28ad0 <flatcc_json_parser_float@@Base+0x100>
   28a60:	vldr	s14, [pc, #108]	; 28ad4 <flatcc_json_parser_float@@Base+0x104>
   28a64:	mov	r2, r5
   28a68:	vmrs	APSR_nzcv, fpscr
   28a6c:	mov	r1, r4
   28a70:	mov	r0, r6
   28a74:	mov	r3, #7
   28a78:	vmovpl.f32	s15, s14
   28a7c:	vstr	s15, [r7]
   28a80:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28a84:	add	sp, sp, #12
   28a88:	pop	{r4, r5, r6, r7, pc}
   28a8c:	cmp	r4, r0
   28a90:	cmpne	r0, #0
   28a94:	bne	28a84 <flatcc_json_parser_float@@Base+0xb4>
   28a98:	mov	r2, r5
   28a9c:	mov	r1, r4
   28aa0:	mov	r0, r6
   28aa4:	mov	r3, #6
   28aa8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28aac:	add	sp, sp, #12
   28ab0:	pop	{r4, r5, r6, r7, pc}
   28ab4:	ldrb	r3, [ip, #1]
   28ab8:	cmp	r3, #48	; 0x30
   28abc:	bne	28a28 <flatcc_json_parser_float@@Base+0x58>
   28ac0:	b	28a98 <flatcc_json_parser_float@@Base+0xc8>
   28ac4:	mov	r0, r1
   28ac8:	bx	lr
   28acc:	svcvc	0x007fffff
   28ad0:			; <UNDEFINED> instruction: 0xff800000
   28ad4:	svcvc	0x00800000

00028ad8 <flatcc_json_parser_generic_json@@Base>:
   28ad8:	cmp	r1, r2
   28adc:	mov	r3, r1
   28ae0:	beq	29400 <flatcc_json_parser_generic_json@@Base+0x928>
   28ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ae8:	mov	r4, r2
   28aec:	sub	sp, sp, #532	; 0x214
   28af0:	ldrb	r2, [r1]
   28af4:	add	r8, sp, #16
   28af8:	mov	r6, r0
   28afc:	mov	r5, r8
   28b00:	mov	fp, #125	; 0x7d
   28b04:	mov	r9, #10
   28b08:	mov	sl, #9
   28b0c:	cmp	r5, r8
   28b10:	beq	28b9c <flatcc_json_parser_generic_json@@Base+0xc4>
   28b14:	ldrb	r1, [r5, #-1]
   28b18:	cmp	r1, #125	; 0x7d
   28b1c:	beq	28f98 <flatcc_json_parser_generic_json@@Base+0x4c0>
   28b20:	cmp	r2, #57	; 0x39
   28b24:	bls	28ba4 <flatcc_json_parser_generic_json@@Base+0xcc>
   28b28:	cmp	r2, #91	; 0x5b
   28b2c:	beq	28f34 <flatcc_json_parser_generic_json@@Base+0x45c>
   28b30:	cmp	r2, #123	; 0x7b
   28b34:	bne	28ccc <flatcc_json_parser_generic_json@@Base+0x1f4>
   28b38:	add	r2, sp, #528	; 0x210
   28b3c:	cmp	r5, r2
   28b40:	beq	2942c <flatcc_json_parser_generic_json@@Base+0x954>
   28b44:	add	r1, r3, #1
   28b48:	sub	r2, r4, r1
   28b4c:	cmp	r2, #1
   28b50:	strb	fp, [r5]
   28b54:	add	r5, r5, #1
   28b58:	ble	28b70 <flatcc_json_parser_generic_json@@Base+0x98>
   28b5c:	ldrb	r2, [r3, #1]
   28b60:	cmp	r2, #32
   28b64:	movhi	r3, r1
   28b68:	bhi	28b80 <flatcc_json_parser_generic_json@@Base+0xa8>
   28b6c:	beq	290ec <flatcc_json_parser_generic_json@@Base+0x614>
   28b70:	mov	r2, r4
   28b74:	mov	r0, r6
   28b78:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28b7c:	mov	r3, r0
   28b80:	cmp	r4, r3
   28b84:	beq	29290 <flatcc_json_parser_generic_json@@Base+0x7b8>
   28b88:	ldrb	r2, [r3]
   28b8c:	cmp	r2, #125	; 0x7d
   28b90:	bne	28b0c <flatcc_json_parser_generic_json@@Base+0x34>
   28b94:	mov	r0, r3
   28b98:	b	28d5c <flatcc_json_parser_generic_json@@Base+0x284>
   28b9c:	cmp	r2, #57	; 0x39
   28ba0:	bhi	290cc <flatcc_json_parser_generic_json@@Base+0x5f4>
   28ba4:	cmp	r2, #48	; 0x30
   28ba8:	bcs	28c4c <flatcc_json_parser_generic_json@@Base+0x174>
   28bac:	cmp	r2, #34	; 0x22
   28bb0:	bne	28c44 <flatcc_json_parser_generic_json@@Base+0x16c>
   28bb4:	add	ip, r3, #1
   28bb8:	cmp	r4, ip
   28bbc:	beq	28c2c <flatcc_json_parser_generic_json@@Base+0x154>
   28bc0:	ldrb	r3, [ip]
   28bc4:	cmp	r3, #34	; 0x22
   28bc8:	addne	r7, sp, #12
   28bcc:	bne	28be0 <flatcc_json_parser_generic_json@@Base+0x108>
   28bd0:	b	291a8 <flatcc_json_parser_generic_json@@Base+0x6d0>
   28bd4:	ldrb	r3, [r0]
   28bd8:	cmp	r3, #34	; 0x22
   28bdc:	beq	291a8 <flatcc_json_parser_generic_json@@Base+0x6d0>
   28be0:	mov	r1, ip
   28be4:	mov	r2, r4
   28be8:	mov	r0, r6
   28bec:	bl	279c0 <flatcc_json_parser_string_part@@Base>
   28bf0:	mov	r3, r7
   28bf4:	mov	r2, r4
   28bf8:	mov	ip, r0
   28bfc:	cmp	r4, ip
   28c00:	mov	r1, r0
   28c04:	mov	r0, r6
   28c08:	beq	28c18 <flatcc_json_parser_generic_json@@Base+0x140>
   28c0c:	ldrb	lr, [ip]
   28c10:	cmp	lr, #34	; 0x22
   28c14:	beq	291a8 <flatcc_json_parser_generic_json@@Base+0x6d0>
   28c18:	bl	281d8 <flatcc_json_parser_string_escape@@Base>
   28c1c:	cmp	r4, r0
   28c20:	mov	ip, r0
   28c24:	bne	28bd4 <flatcc_json_parser_generic_json@@Base+0xfc>
   28c28:	mov	ip, r4
   28c2c:	mov	r1, ip
   28c30:	mov	r3, #20
   28c34:	mov	r2, r4
   28c38:	mov	r0, r6
   28c3c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28c40:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   28c44:	cmp	r2, #45	; 0x2d
   28c48:	bne	28ccc <flatcc_json_parser_generic_json@@Base+0x1f4>
   28c4c:	cmp	r4, r3
   28c50:	beq	293a0 <flatcc_json_parser_generic_json@@Base+0x8c8>
   28c54:	cmp	r2, #45	; 0x2d
   28c58:	beq	2929c <flatcc_json_parser_generic_json@@Base+0x7c4>
   28c5c:	ldrb	r2, [r3]
   28c60:	cmp	r2, #48	; 0x30
   28c64:	beq	291b0 <flatcc_json_parser_generic_json@@Base+0x6d8>
   28c68:	sub	r2, r2, #49	; 0x31
   28c6c:	cmp	r2, #8
   28c70:	bhi	2936c <flatcc_json_parser_generic_json@@Base+0x894>
   28c74:	add	r0, r3, #1
   28c78:	cmp	r4, r0
   28c7c:	beq	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   28c80:	ldrb	r2, [r3, #1]
   28c84:	sub	r1, r2, #48	; 0x30
   28c88:	cmp	r1, #9
   28c8c:	bhi	291c0 <flatcc_json_parser_generic_json@@Base+0x6e8>
   28c90:	add	r3, r3, #2
   28c94:	b	28ca8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   28c98:	ldrb	r2, [r3], #1
   28c9c:	sub	r1, r2, #48	; 0x30
   28ca0:	cmp	r1, #9
   28ca4:	bhi	291c0 <flatcc_json_parser_generic_json@@Base+0x6e8>
   28ca8:	cmp	r3, r4
   28cac:	mov	r0, r3
   28cb0:	bne	28c98 <flatcc_json_parser_generic_json@@Base+0x1c0>
   28cb4:	mov	r1, r0
   28cb8:	mov	r3, #6
   28cbc:	mov	r2, r4
   28cc0:	mov	r0, r6
   28cc4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28cc8:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   28ccc:	mov	r1, r3
   28cd0:	mov	r2, r4
   28cd4:	mov	r0, r6
   28cd8:	str	r3, [sp, #4]
   28cdc:	bl	28650 <flatcc_json_parser_skip_constant@@Base>
   28ce0:	ldr	r3, [sp, #4]
   28ce4:	cmp	r0, r3
   28ce8:	beq	2945c <flatcc_json_parser_generic_json@@Base+0x984>
   28cec:	cmp	r4, r0
   28cf0:	bne	28d5c <flatcc_json_parser_generic_json@@Base+0x284>
   28cf4:	b	293a0 <flatcc_json_parser_generic_json@@Base+0x8c8>
   28cf8:	cmp	r3, #1
   28cfc:	ble	28d10 <flatcc_json_parser_generic_json@@Base+0x238>
   28d00:	ldrb	r3, [r0]
   28d04:	cmp	r3, #32
   28d08:	bhi	28d20 <flatcc_json_parser_generic_json@@Base+0x248>
   28d0c:	beq	28e08 <flatcc_json_parser_generic_json@@Base+0x330>
   28d10:	mov	r1, r0
   28d14:	mov	r2, r4
   28d18:	mov	r0, r6
   28d1c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28d20:	cmp	r4, r0
   28d24:	beq	28e20 <flatcc_json_parser_generic_json@@Base+0x348>
   28d28:	ldrb	r3, [r0]
   28d2c:	cmp	r3, #44	; 0x2c
   28d30:	beq	28e54 <flatcc_json_parser_generic_json@@Base+0x37c>
   28d34:	cmp	r3, #125	; 0x7d
   28d38:	beq	28dd4 <flatcc_json_parser_generic_json@@Base+0x2fc>
   28d3c:	mov	r1, r0
   28d40:	mov	r3, r9
   28d44:	mov	r2, r4
   28d48:	mov	r0, r6
   28d4c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28d50:	cmp	r4, r0
   28d54:	beq	28e20 <flatcc_json_parser_generic_json@@Base+0x348>
   28d58:	mov	r5, r7
   28d5c:	cmp	r5, r8
   28d60:	beq	28e4c <flatcc_json_parser_generic_json@@Base+0x374>
   28d64:	ldrb	r3, [r5, #-1]
   28d68:	sub	r7, r5, #1
   28d6c:	cmp	r3, #93	; 0x5d
   28d70:	sub	r3, r4, r0
   28d74:	bne	28cf8 <flatcc_json_parser_generic_json@@Base+0x220>
   28d78:	cmp	r3, #1
   28d7c:	ble	28d90 <flatcc_json_parser_generic_json@@Base+0x2b8>
   28d80:	ldrb	r3, [r0]
   28d84:	cmp	r3, #32
   28d88:	bhi	28da0 <flatcc_json_parser_generic_json@@Base+0x2c8>
   28d8c:	beq	28ea0 <flatcc_json_parser_generic_json@@Base+0x3c8>
   28d90:	mov	r1, r0
   28d94:	mov	r2, r4
   28d98:	mov	r0, r6
   28d9c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28da0:	cmp	r4, r0
   28da4:	beq	28e20 <flatcc_json_parser_generic_json@@Base+0x348>
   28da8:	ldrb	r3, [r0]
   28dac:	cmp	r3, #44	; 0x2c
   28db0:	beq	28eb4 <flatcc_json_parser_generic_json@@Base+0x3dc>
   28db4:	cmp	r3, #93	; 0x5d
   28db8:	beq	28dd4 <flatcc_json_parser_generic_json@@Base+0x2fc>
   28dbc:	mov	r1, r0
   28dc0:	mov	r3, sl
   28dc4:	mov	r2, r4
   28dc8:	mov	r0, r6
   28dcc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28dd0:	b	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   28dd4:	add	r1, r0, #1
   28dd8:	sub	r3, r4, r1
   28ddc:	cmp	r3, #1
   28de0:	ble	28df8 <flatcc_json_parser_generic_json@@Base+0x320>
   28de4:	ldrb	r3, [r0, #1]
   28de8:	cmp	r3, #32
   28dec:	movhi	r0, r1
   28df0:	bhi	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   28df4:	beq	28f20 <flatcc_json_parser_generic_json@@Base+0x448>
   28df8:	mov	r2, r4
   28dfc:	mov	r0, r6
   28e00:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28e04:	b	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   28e08:	ldrb	r3, [r0, #1]
   28e0c:	cmp	r3, #32
   28e10:	addhi	r0, r0, #1
   28e14:	bls	28d10 <flatcc_json_parser_generic_json@@Base+0x238>
   28e18:	cmp	r4, r0
   28e1c:	bne	28d28 <flatcc_json_parser_generic_json@@Base+0x250>
   28e20:	mov	r0, r4
   28e24:	cmp	r7, r8
   28e28:	beq	28e4c <flatcc_json_parser_generic_json@@Base+0x374>
   28e2c:	ldrb	r3, [r7, #-1]
   28e30:	mov	r0, r6
   28e34:	mov	r2, r4
   28e38:	cmp	r3, #93	; 0x5d
   28e3c:	movne	r3, #10
   28e40:	moveq	r3, #9
   28e44:	mov	r1, r4
   28e48:	bl	27994 <flatcc_json_parser_set_error@@Base>
   28e4c:	add	sp, sp, #532	; 0x214
   28e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e54:	add	r1, r0, #1
   28e58:	sub	r3, r4, r1
   28e5c:	cmp	r3, #1
   28e60:	ble	28e74 <flatcc_json_parser_generic_json@@Base+0x39c>
   28e64:	ldrb	r3, [r0, #1]
   28e68:	cmp	r3, #32
   28e6c:	bhi	28e84 <flatcc_json_parser_generic_json@@Base+0x3ac>
   28e70:	beq	29250 <flatcc_json_parser_generic_json@@Base+0x778>
   28e74:	mov	r2, r4
   28e78:	mov	r0, r6
   28e7c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28e80:	mov	r1, r0
   28e84:	cmp	r4, r1
   28e88:	beq	29354 <flatcc_json_parser_generic_json@@Base+0x87c>
   28e8c:	ldrb	r2, [r1]
   28e90:	cmp	r2, #125	; 0x7d
   28e94:	beq	28ef8 <flatcc_json_parser_generic_json@@Base+0x420>
   28e98:	mov	r3, r1
   28e9c:	b	28b0c <flatcc_json_parser_generic_json@@Base+0x34>
   28ea0:	ldrb	r3, [r0, #1]
   28ea4:	cmp	r3, #32
   28ea8:	addhi	r0, r0, #1
   28eac:	bls	28d90 <flatcc_json_parser_generic_json@@Base+0x2b8>
   28eb0:	b	28da0 <flatcc_json_parser_generic_json@@Base+0x2c8>
   28eb4:	add	r1, r0, #1
   28eb8:	sub	r3, r4, r1
   28ebc:	cmp	r3, #1
   28ec0:	ble	28ed4 <flatcc_json_parser_generic_json@@Base+0x3fc>
   28ec4:	ldrb	r3, [r0, #1]
   28ec8:	cmp	r3, #32
   28ecc:	bhi	28ee4 <flatcc_json_parser_generic_json@@Base+0x40c>
   28ed0:	beq	290d8 <flatcc_json_parser_generic_json@@Base+0x600>
   28ed4:	mov	r2, r4
   28ed8:	mov	r0, r6
   28edc:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28ee0:	mov	r1, r0
   28ee4:	cmp	r4, r1
   28ee8:	beq	293e8 <flatcc_json_parser_generic_json@@Base+0x910>
   28eec:	ldrb	r2, [r1]
   28ef0:	cmp	r2, #93	; 0x5d
   28ef4:	bne	28e98 <flatcc_json_parser_generic_json@@Base+0x3c0>
   28ef8:	add	r0, r1, #1
   28efc:	sub	r3, r4, r0
   28f00:	cmp	r3, #1
   28f04:	ble	28f18 <flatcc_json_parser_generic_json@@Base+0x440>
   28f08:	ldrb	r3, [r1, #1]
   28f0c:	cmp	r3, #32
   28f10:	bhi	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   28f14:	beq	293d4 <flatcc_json_parser_generic_json@@Base+0x8fc>
   28f18:	mov	r1, r0
   28f1c:	b	28df8 <flatcc_json_parser_generic_json@@Base+0x320>
   28f20:	ldrb	r3, [r0, #2]
   28f24:	cmp	r3, #32
   28f28:	addhi	r0, r0, #2
   28f2c:	bls	28df8 <flatcc_json_parser_generic_json@@Base+0x320>
   28f30:	b	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   28f34:	add	r2, sp, #528	; 0x210
   28f38:	cmp	r5, r2
   28f3c:	beq	2942c <flatcc_json_parser_generic_json@@Base+0x954>
   28f40:	add	r1, r3, #1
   28f44:	sub	r2, r4, r1
   28f48:	cmp	r2, #1
   28f4c:	mov	r2, #93	; 0x5d
   28f50:	strb	r2, [r5]
   28f54:	add	r5, r5, #1
   28f58:	ble	28f70 <flatcc_json_parser_generic_json@@Base+0x498>
   28f5c:	ldrb	r2, [r3, #1]
   28f60:	cmp	r2, #32
   28f64:	movhi	r3, r1
   28f68:	bhi	28f80 <flatcc_json_parser_generic_json@@Base+0x4a8>
   28f6c:	beq	29100 <flatcc_json_parser_generic_json@@Base+0x628>
   28f70:	mov	r2, r4
   28f74:	mov	r0, r6
   28f78:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   28f7c:	mov	r3, r0
   28f80:	cmp	r4, r3
   28f84:	beq	29290 <flatcc_json_parser_generic_json@@Base+0x7b8>
   28f88:	ldrb	r2, [r3]
   28f8c:	cmp	r2, #93	; 0x5d
   28f90:	bne	28b0c <flatcc_json_parser_generic_json@@Base+0x34>
   28f94:	b	28b94 <flatcc_json_parser_generic_json@@Base+0xbc>
   28f98:	cmp	r2, #34	; 0x22
   28f9c:	moveq	r2, #0
   28fa0:	addeq	r3, r3, #1
   28fa4:	streq	r2, [r6, #12]
   28fa8:	beq	29138 <flatcc_json_parser_generic_json@@Base+0x660>
   28fac:	cmp	r2, #46	; 0x2e
   28fb0:	movne	r2, #1
   28fb4:	strne	r2, [r6, #12]
   28fb8:	beq	29114 <flatcc_json_parser_generic_json@@Base+0x63c>
   28fbc:	cmp	r4, r3
   28fc0:	moveq	r0, r4
   28fc4:	beq	29034 <flatcc_json_parser_generic_json@@Base+0x55c>
   28fc8:	ldrb	r2, [r3]
   28fcc:	cmp	r2, #32
   28fd0:	addhi	r3, r3, #1
   28fd4:	bls	294a4 <flatcc_json_parser_generic_json@@Base+0x9cc>
   28fd8:	cmp	r2, #46	; 0x2e
   28fdc:	cmpne	r2, #95	; 0x5f
   28fe0:	sub	r0, r3, #1
   28fe4:	beq	29188 <flatcc_json_parser_generic_json@@Base+0x6b0>
   28fe8:	sub	r1, r2, #48	; 0x30
   28fec:	tst	r2, #128	; 0x80
   28ff0:	uxtb	r1, r1
   28ff4:	bne	29188 <flatcc_json_parser_generic_json@@Base+0x6b0>
   28ff8:	orr	ip, r2, #32
   28ffc:	sub	ip, ip, #97	; 0x61
   29000:	cmp	r1, #9
   29004:	uxtb	ip, ip
   29008:	bls	29188 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2900c:	cmp	ip, #25
   29010:	bls	29188 <flatcc_json_parser_generic_json@@Base+0x6b0>
   29014:	sub	r3, r4, r0
   29018:	cmp	r3, #1
   2901c:	ble	29034 <flatcc_json_parser_generic_json@@Base+0x55c>
   29020:	ldrb	r2, [r0]
   29024:	cmp	r2, #32
   29028:	bhi	29044 <flatcc_json_parser_generic_json@@Base+0x56c>
   2902c:	cmp	r2, #32
   29030:	beq	293ac <flatcc_json_parser_generic_json@@Base+0x8d4>
   29034:	mov	r1, r0
   29038:	mov	r2, r4
   2903c:	mov	r0, r6
   29040:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   29044:	cmp	r4, r0
   29048:	beq	29474 <flatcc_json_parser_generic_json@@Base+0x99c>
   2904c:	ldrb	r3, [r0]
   29050:	cmp	r3, #58	; 0x3a
   29054:	bne	2948c <flatcc_json_parser_generic_json@@Base+0x9b4>
   29058:	add	r3, r0, #1
   2905c:	sub	r2, r4, r3
   29060:	cmp	r2, #1
   29064:	ble	29078 <flatcc_json_parser_generic_json@@Base+0x5a0>
   29068:	ldrb	r2, [r0, #1]
   2906c:	cmp	r2, #32
   29070:	bhi	29090 <flatcc_json_parser_generic_json@@Base+0x5b8>
   29074:	beq	293c0 <flatcc_json_parser_generic_json@@Base+0x8e8>
   29078:	mov	r1, r3
   2907c:	mov	r2, r4
   29080:	mov	r0, r6
   29084:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   29088:	ldrb	r2, [r0]
   2908c:	mov	r3, r0
   29090:	cmp	r2, #57	; 0x39
   29094:	bhi	28b28 <flatcc_json_parser_generic_json@@Base+0x50>
   29098:	cmp	r2, #48	; 0x30
   2909c:	bcs	28c4c <flatcc_json_parser_generic_json@@Base+0x174>
   290a0:	cmp	r2, #34	; 0x22
   290a4:	bne	28c44 <flatcc_json_parser_generic_json@@Base+0x16c>
   290a8:	cmp	r3, r4
   290ac:	bne	28bb4 <flatcc_json_parser_generic_json@@Base+0xdc>
   290b0:	mov	r3, #16
   290b4:	mov	r2, r4
   290b8:	mov	r1, r4
   290bc:	mov	r0, r6
   290c0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   290c4:	mov	ip, r0
   290c8:	b	28bb8 <flatcc_json_parser_generic_json@@Base+0xe0>
   290cc:	cmp	r2, #91	; 0x5b
   290d0:	bne	28b30 <flatcc_json_parser_generic_json@@Base+0x58>
   290d4:	b	28f40 <flatcc_json_parser_generic_json@@Base+0x468>
   290d8:	ldrb	r3, [r0, #2]
   290dc:	cmp	r3, #32
   290e0:	addhi	r1, r0, #2
   290e4:	bls	28ed4 <flatcc_json_parser_generic_json@@Base+0x3fc>
   290e8:	b	28ee4 <flatcc_json_parser_generic_json@@Base+0x40c>
   290ec:	ldrb	r2, [r3, #2]
   290f0:	cmp	r2, #32
   290f4:	addhi	r3, r3, #2
   290f8:	bls	28b70 <flatcc_json_parser_generic_json@@Base+0x98>
   290fc:	b	28b80 <flatcc_json_parser_generic_json@@Base+0xa8>
   29100:	ldrb	r2, [r3, #2]
   29104:	cmp	r2, #32
   29108:	addhi	r3, r3, #2
   2910c:	bls	28f70 <flatcc_json_parser_generic_json@@Base+0x498>
   29110:	b	28f80 <flatcc_json_parser_generic_json@@Base+0x4a8>
   29114:	mov	r1, r3
   29118:	mov	r2, r4
   2911c:	mov	r3, #5
   29120:	mov	r0, r6
   29124:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29128:	ldr	r2, [r6, #12]
   2912c:	cmp	r2, #0
   29130:	mov	r3, r0
   29134:	bne	28fbc <flatcc_json_parser_generic_json@@Base+0x4e4>
   29138:	cmp	r4, r3
   2913c:	beq	29384 <flatcc_json_parser_generic_json@@Base+0x8ac>
   29140:	ldrb	r1, [r3]
   29144:	cmp	r1, #34	; 0x22
   29148:	bne	29168 <flatcc_json_parser_generic_json@@Base+0x690>
   2914c:	b	29398 <flatcc_json_parser_generic_json@@Base+0x8c0>
   29150:	add	r3, r2, #1
   29154:	cmp	r4, r3
   29158:	beq	29384 <flatcc_json_parser_generic_json@@Base+0x8ac>
   2915c:	ldrb	r1, [r2, #1]
   29160:	cmp	r1, #34	; 0x22
   29164:	beq	29398 <flatcc_json_parser_generic_json@@Base+0x8c0>
   29168:	cmp	r1, #92	; 0x5c
   2916c:	mov	r2, r3
   29170:	bne	29150 <flatcc_json_parser_generic_json@@Base+0x678>
   29174:	sub	r2, r4, r3
   29178:	cmp	r2, #1
   2917c:	ble	29330 <flatcc_json_parser_generic_json@@Base+0x858>
   29180:	add	r2, r3, #1
   29184:	b	29150 <flatcc_json_parser_generic_json@@Base+0x678>
   29188:	cmp	r4, r3
   2918c:	mov	r0, r3
   29190:	beq	29408 <flatcc_json_parser_generic_json@@Base+0x930>
   29194:	ldrb	r1, [r3], #1
   29198:	cmp	r1, #32
   2919c:	bls	2940c <flatcc_json_parser_generic_json@@Base+0x934>
   291a0:	mov	r2, r1
   291a4:	b	28fd8 <flatcc_json_parser_generic_json@@Base+0x500>
   291a8:	add	r0, ip, #1
   291ac:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   291b0:	add	r0, r3, #1
   291b4:	cmp	r4, r0
   291b8:	ldrbne	r2, [r3, #1]
   291bc:	beq	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   291c0:	cmp	r2, #46	; 0x2e
   291c4:	beq	292dc <flatcc_json_parser_generic_json@@Base+0x804>
   291c8:	and	r3, r2, #223	; 0xdf
   291cc:	cmp	r3, #69	; 0x45
   291d0:	bne	29264 <flatcc_json_parser_generic_json@@Base+0x78c>
   291d4:	add	r1, r0, #1
   291d8:	cmp	r4, r1
   291dc:	beq	292a8 <flatcc_json_parser_generic_json@@Base+0x7d0>
   291e0:	ldrb	r3, [r0, #1]
   291e4:	sub	r2, r3, #43	; 0x2b
   291e8:	tst	r2, #253	; 0xfd
   291ec:	bne	29200 <flatcc_json_parser_generic_json@@Base+0x728>
   291f0:	add	r1, r0, #2
   291f4:	cmp	r4, r1
   291f8:	beq	28cb8 <flatcc_json_parser_generic_json@@Base+0x1e0>
   291fc:	ldrb	r3, [r0, #2]
   29200:	sub	r3, r3, #48	; 0x30
   29204:	cmp	r3, #9
   29208:	bhi	28cb8 <flatcc_json_parser_generic_json@@Base+0x1e0>
   2920c:	add	r0, r1, #1
   29210:	cmp	r4, r0
   29214:	beq	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   29218:	ldrb	r2, [r1, #1]
   2921c:	sub	r3, r2, #48	; 0x30
   29220:	cmp	r3, #9
   29224:	bhi	29264 <flatcc_json_parser_generic_json@@Base+0x78c>
   29228:	add	r3, r1, #2
   2922c:	b	29240 <flatcc_json_parser_generic_json@@Base+0x768>
   29230:	ldrb	r2, [r3], #1
   29234:	sub	r1, r2, #48	; 0x30
   29238:	cmp	r1, #9
   2923c:	bhi	29264 <flatcc_json_parser_generic_json@@Base+0x78c>
   29240:	cmp	r4, r3
   29244:	mov	r0, r3
   29248:	bne	29230 <flatcc_json_parser_generic_json@@Base+0x758>
   2924c:	b	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   29250:	ldrb	r3, [r0, #2]
   29254:	cmp	r3, #32
   29258:	addhi	r1, r0, #2
   2925c:	bls	28e74 <flatcc_json_parser_generic_json@@Base+0x39c>
   29260:	b	28e84 <flatcc_json_parser_generic_json@@Base+0x3ac>
   29264:	cmp	r2, #32
   29268:	beq	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   2926c:	bls	292c0 <flatcc_json_parser_generic_json@@Base+0x7e8>
   29270:	cmp	r2, #58	; 0x3a
   29274:	beq	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   29278:	bls	2938c <flatcc_json_parser_generic_json@@Base+0x8b4>
   2927c:	cmp	r2, #93	; 0x5d
   29280:	beq	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   29284:	cmp	r2, #125	; 0x7d
   29288:	bne	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   2928c:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   29290:	mov	r0, r4
   29294:	add	sp, sp, #532	; 0x214
   29298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2929c:	add	r3, r3, #1
   292a0:	cmp	r4, r3
   292a4:	bne	28c5c <flatcc_json_parser_generic_json@@Base+0x184>
   292a8:	mov	r3, #6
   292ac:	mov	r2, r4
   292b0:	mov	r1, r4
   292b4:	mov	r0, r6
   292b8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   292bc:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   292c0:	cmp	r2, #9
   292c4:	bcc	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   292c8:	cmp	r2, #11
   292cc:	bls	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   292d0:	cmp	r2, #13
   292d4:	bne	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   292d8:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   292dc:	ldrb	r3, [r0, #1]
   292e0:	sub	r3, r3, #48	; 0x30
   292e4:	cmp	r3, #9
   292e8:	bhi	29444 <flatcc_json_parser_generic_json@@Base+0x96c>
   292ec:	add	r3, r0, #2
   292f0:	cmp	r4, r3
   292f4:	beq	294c0 <flatcc_json_parser_generic_json@@Base+0x9e8>
   292f8:	ldrb	r2, [r0, #2]
   292fc:	sub	r1, r2, #48	; 0x30
   29300:	cmp	r1, #9
   29304:	bhi	294b8 <flatcc_json_parser_generic_json@@Base+0x9e0>
   29308:	add	r3, r0, #3
   2930c:	b	29320 <flatcc_json_parser_generic_json@@Base+0x848>
   29310:	ldrb	r2, [r3], #1
   29314:	sub	r1, r2, #48	; 0x30
   29318:	cmp	r1, #9
   2931c:	bhi	291c8 <flatcc_json_parser_generic_json@@Base+0x6f0>
   29320:	cmp	r4, r3
   29324:	mov	r0, r3
   29328:	bne	29310 <flatcc_json_parser_generic_json@@Base+0x838>
   2932c:	b	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   29330:	ldrb	r2, [r3]
   29334:	cmp	r2, #34	; 0x22
   29338:	beq	29398 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2933c:	mov	r1, r3
   29340:	mov	r2, r4
   29344:	mov	r3, #20
   29348:	mov	r0, r6
   2934c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29350:	b	29014 <flatcc_json_parser_generic_json@@Base+0x53c>
   29354:	mov	r3, r9
   29358:	mov	r2, r4
   2935c:	mov	r1, r4
   29360:	mov	r0, r6
   29364:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29368:	b	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   2936c:	mov	r1, r3
   29370:	mov	r2, r4
   29374:	mov	r3, #6
   29378:	mov	r0, r6
   2937c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29380:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   29384:	mov	r3, r4
   29388:	b	2933c <flatcc_json_parser_generic_json@@Base+0x864>
   2938c:	cmp	r2, #44	; 0x2c
   29390:	bne	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>
   29394:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   29398:	add	r0, r3, #1
   2939c:	b	29014 <flatcc_json_parser_generic_json@@Base+0x53c>
   293a0:	mov	r7, r5
   293a4:	mov	r0, r4
   293a8:	b	28e24 <flatcc_json_parser_generic_json@@Base+0x34c>
   293ac:	ldrb	r3, [r0, #1]
   293b0:	cmp	r3, #32
   293b4:	addhi	r0, r0, #1
   293b8:	bls	29034 <flatcc_json_parser_generic_json@@Base+0x55c>
   293bc:	b	29044 <flatcc_json_parser_generic_json@@Base+0x56c>
   293c0:	ldrb	r2, [r0, #2]
   293c4:	cmp	r2, #32
   293c8:	addhi	r3, r0, #2
   293cc:	bls	29078 <flatcc_json_parser_generic_json@@Base+0x5a0>
   293d0:	b	29090 <flatcc_json_parser_generic_json@@Base+0x5b8>
   293d4:	ldrb	r3, [r1, #2]
   293d8:	cmp	r3, #32
   293dc:	addhi	r0, r1, #2
   293e0:	bls	28f18 <flatcc_json_parser_generic_json@@Base+0x440>
   293e4:	b	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   293e8:	mov	r3, sl
   293ec:	mov	r2, r4
   293f0:	mov	r1, r4
   293f4:	mov	r0, r6
   293f8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   293fc:	b	28d50 <flatcc_json_parser_generic_json@@Base+0x278>
   29400:	mov	r0, r1
   29404:	bx	lr
   29408:	mov	r0, r4
   2940c:	cmp	r2, #46	; 0x2e
   29410:	bne	29014 <flatcc_json_parser_generic_json@@Base+0x53c>
   29414:	mov	r1, r0
   29418:	mov	r3, #5
   2941c:	mov	r2, r4
   29420:	mov	r0, r6
   29424:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29428:	b	29014 <flatcc_json_parser_generic_json@@Base+0x53c>
   2942c:	mov	r1, r3
   29430:	mov	r2, r4
   29434:	mov	r0, r6
   29438:	mov	r3, #2
   2943c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29440:	b	28e4c <flatcc_json_parser_generic_json@@Base+0x374>
   29444:	add	r1, r0, #1
   29448:	mov	r3, #6
   2944c:	mov	r2, r4
   29450:	mov	r0, r6
   29454:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29458:	b	28cec <flatcc_json_parser_generic_json@@Base+0x214>
   2945c:	mov	r1, r3
   29460:	mov	r2, r4
   29464:	mov	r0, r6
   29468:	mov	r3, #5
   2946c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29470:	b	28e4c <flatcc_json_parser_generic_json@@Base+0x374>
   29474:	mov	r0, r6
   29478:	mov	r3, #10
   2947c:	mov	r2, r4
   29480:	mov	r1, r4
   29484:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29488:	b	28e4c <flatcc_json_parser_generic_json@@Base+0x374>
   2948c:	mov	r1, r0
   29490:	mov	r2, r4
   29494:	mov	r0, r6
   29498:	mov	r3, #4
   2949c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   294a0:	b	28e4c <flatcc_json_parser_generic_json@@Base+0x374>
   294a4:	sub	r1, r4, r3
   294a8:	cmp	r1, #1
   294ac:	mov	r0, r3
   294b0:	bgt	2902c <flatcc_json_parser_generic_json@@Base+0x554>
   294b4:	b	29034 <flatcc_json_parser_generic_json@@Base+0x55c>
   294b8:	mov	r0, r3
   294bc:	b	291c8 <flatcc_json_parser_generic_json@@Base+0x6f0>
   294c0:	mov	r0, r4
   294c4:	b	28cb4 <flatcc_json_parser_generic_json@@Base+0x1dc>

000294c8 <flatcc_json_parser_unmatched_symbol@@Base>:
   294c8:	ldr	ip, [r0, #8]
   294cc:	tst	ip, #1
   294d0:	beq	295a4 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   294d4:	push	{r4, r5, r6, lr}
   294d8:	mov	r4, r2
   294dc:	ldr	r2, [r0, #12]
   294e0:	mov	r5, r0
   294e4:	cmp	r2, #0
   294e8:	mov	r3, r1
   294ec:	beq	295ac <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   294f0:	cmp	r1, r4
   294f4:	beq	29544 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   294f8:	ldrb	r1, [r1]
   294fc:	cmp	r1, #32
   29500:	bls	29544 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   29504:	add	r2, r3, #1
   29508:	cmp	r1, #46	; 0x2e
   2950c:	cmpne	r1, #95	; 0x5f
   29510:	sub	r3, r2, #1
   29514:	beq	29610 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   29518:	sub	r0, r1, #48	; 0x30
   2951c:	tst	r1, #128	; 0x80
   29520:	uxtb	r0, r0
   29524:	bne	29610 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   29528:	orr	ip, r1, #32
   2952c:	sub	ip, ip, #97	; 0x61
   29530:	cmp	r0, #9
   29534:	uxtb	ip, ip
   29538:	bls	29610 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   2953c:	cmp	ip, #25
   29540:	bls	29610 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   29544:	mov	r6, r4
   29548:	sub	r2, r6, r3
   2954c:	cmp	r2, #1
   29550:	ble	29564 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   29554:	ldrb	r2, [r3]
   29558:	cmp	r2, #32
   2955c:	bhi	29578 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   29560:	beq	29630 <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   29564:	mov	r1, r3
   29568:	mov	r2, r4
   2956c:	mov	r0, r5
   29570:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   29574:	mov	r3, r0
   29578:	cmp	r4, r3
   2957c:	beq	2958c <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   29580:	ldrb	r2, [r3]
   29584:	cmp	r2, #58	; 0x3a
   29588:	beq	296a0 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   2958c:	mov	r2, r4
   29590:	mov	r1, r3
   29594:	mov	r0, r5
   29598:	mov	r3, #4
   2959c:	pop	{r4, r5, r6, lr}
   295a0:	b	27994 <flatcc_json_parser_set_error@@Base>
   295a4:	mov	r3, #13
   295a8:	b	27994 <flatcc_json_parser_set_error@@Base>
   295ac:	cmp	r1, r4
   295b0:	beq	296f4 <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   295b4:	ldrb	r1, [r1]
   295b8:	cmp	r1, #34	; 0x22
   295bc:	movne	r6, r4
   295c0:	bne	295e0 <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   295c4:	b	2966c <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   295c8:	add	r3, r2, #1
   295cc:	cmp	r4, r3
   295d0:	beq	29608 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   295d4:	ldrb	r1, [r2, #1]
   295d8:	cmp	r1, #34	; 0x22
   295dc:	beq	29670 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   295e0:	cmp	r1, #92	; 0x5c
   295e4:	mov	r2, r3
   295e8:	bne	295c8 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   295ec:	sub	r2, r4, r3
   295f0:	cmp	r2, #1
   295f4:	ble	29644 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   295f8:	add	r2, r3, #1
   295fc:	add	r3, r2, #1
   29600:	cmp	r4, r3
   29604:	bne	295d4 <flatcc_json_parser_unmatched_symbol@@Base+0x10c>
   29608:	mov	r3, r4
   2960c:	b	29650 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   29610:	cmp	r4, r2
   29614:	mov	r3, r2
   29618:	beq	29678 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   2961c:	ldrb	r0, [r2], #1
   29620:	cmp	r0, #32
   29624:	bls	2967c <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   29628:	mov	r1, r0
   2962c:	b	29508 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   29630:	ldrb	r2, [r3, #1]
   29634:	cmp	r2, #32
   29638:	addhi	r3, r3, #1
   2963c:	bls	29564 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   29640:	b	29578 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   29644:	ldrb	r2, [r3]
   29648:	cmp	r2, #34	; 0x22
   2964c:	beq	29670 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   29650:	mov	r1, r3
   29654:	mov	r2, r4
   29658:	mov	r3, #20
   2965c:	mov	r0, r5
   29660:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29664:	mov	r3, r0
   29668:	b	29548 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   2966c:	mov	r6, r4
   29670:	add	r3, r3, #1
   29674:	b	29548 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   29678:	mov	r3, r4
   2967c:	cmp	r1, #46	; 0x2e
   29680:	bne	29544 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   29684:	mov	r1, r3
   29688:	mov	r2, r4
   2968c:	mov	r3, #5
   29690:	mov	r0, r5
   29694:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29698:	mov	r3, r0
   2969c:	b	29544 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   296a0:	add	r1, r3, #1
   296a4:	sub	r6, r6, r1
   296a8:	cmp	r6, #1
   296ac:	ble	296c0 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   296b0:	ldrb	r2, [r3, #1]
   296b4:	cmp	r2, #32
   296b8:	bhi	296d0 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   296bc:	beq	296e0 <flatcc_json_parser_unmatched_symbol@@Base+0x218>
   296c0:	mov	r2, r4
   296c4:	mov	r0, r5
   296c8:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   296cc:	mov	r1, r0
   296d0:	mov	r2, r4
   296d4:	mov	r0, r5
   296d8:	pop	{r4, r5, r6, lr}
   296dc:	b	28ad8 <flatcc_json_parser_generic_json@@Base>
   296e0:	ldrb	r2, [r3, #2]
   296e4:	cmp	r2, #32
   296e8:	addhi	r1, r3, #2
   296ec:	bls	296c0 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   296f0:	b	296d0 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   296f4:	mov	r6, r1
   296f8:	b	29650 <flatcc_json_parser_unmatched_symbol@@Base+0x188>

000296fc <flatcc_json_parser_integer@@Base>:
   296fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29700:	cmp	r1, r2
   29704:	ldr	r9, [sp, #32]
   29708:	beq	297f8 <flatcc_json_parser_integer@@Base+0xfc>
   2970c:	ldrb	ip, [r1]
   29710:	mov	r8, r0
   29714:	sub	ip, ip, #45	; 0x2d
   29718:	clz	ip, ip
   2971c:	lsr	ip, ip, #5
   29720:	add	r0, r1, ip
   29724:	cmp	r2, r0
   29728:	str	ip, [r3]
   2972c:	beq	29804 <flatcc_json_parser_integer@@Base+0x108>
   29730:	ldrb	r6, [r1, ip]
   29734:	sub	r3, r6, #48	; 0x30
   29738:	cmp	r3, #9
   2973c:	bhi	297ac <flatcc_json_parser_integer@@Base+0xb0>
   29740:	uxtb	r6, r6
   29744:	mov	r7, #0
   29748:	subs	r6, r6, #48	; 0x30
   2974c:	add	r3, r0, #1
   29750:	sbc	r7, r7, #0
   29754:	mov	lr, #10
   29758:	b	29790 <flatcc_json_parser_integer@@Base+0x94>
   2975c:	ldrb	ip, [r3], #1
   29760:	sub	sl, ip, #48	; 0x30
   29764:	cmp	sl, #9
   29768:	bhi	297b4 <flatcc_json_parser_integer@@Base+0xb8>
   2976c:	subs	r4, r4, #48	; 0x30
   29770:	sbc	r5, r5, #0
   29774:	adds	r4, r4, ip
   29778:	adc	r5, r5, #0
   2977c:	cmp	r5, r7
   29780:	cmpeq	r4, r6
   29784:	mov	r7, r5
   29788:	mov	r6, r4
   2978c:	bcc	297e4 <flatcc_json_parser_integer@@Base+0xe8>
   29790:	umull	r4, r5, r6, lr
   29794:	cmp	r3, r2
   29798:	mla	r5, lr, r7, r5
   2979c:	mov	r0, r3
   297a0:	bne	2975c <flatcc_json_parser_integer@@Base+0x60>
   297a4:	strd	r6, [r9]
   297a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   297ac:	mov	r6, #0
   297b0:	mov	r7, #0
   297b4:	cmp	r1, r0
   297b8:	beq	29800 <flatcc_json_parser_integer@@Base+0x104>
   297bc:	ldrb	r3, [r0]
   297c0:	and	r1, r3, #223	; 0xdf
   297c4:	cmp	r3, #46	; 0x2e
   297c8:	cmpne	r1, #69	; 0x45
   297cc:	bne	297a4 <flatcc_json_parser_integer@@Base+0xa8>
   297d0:	mov	r1, r0
   297d4:	mov	r3, #12
   297d8:	mov	r0, r8
   297dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   297e0:	b	27994 <flatcc_json_parser_set_error@@Base>
   297e4:	mov	r1, r0
   297e8:	mov	r3, #8
   297ec:	mov	r0, r8
   297f0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   297f4:	b	27994 <flatcc_json_parser_set_error@@Base>
   297f8:	mov	r0, r1
   297fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29800:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29804:	mov	r6, #0
   29808:	mov	r7, #0
   2980c:	b	297a4 <flatcc_json_parser_integer@@Base+0xa8>

00029810 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   29810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29814:	sub	sp, sp, #36	; 0x24
   29818:	mov	r5, r2
   2981c:	ldr	r8, [sp, #72]	; 0x48
   29820:	mov	r7, r0
   29824:	adds	sl, r8, #0
   29828:	movne	sl, #1
   2982c:	cmp	r1, r2
   29830:	mov	r9, r3
   29834:	beq	29848 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38>
   29838:	ldrb	r3, [r1]
   2983c:	cmp	r3, #34	; 0x22
   29840:	addeq	r4, r1, #1
   29844:	beq	2985c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4c>
   29848:	mov	r3, #16
   2984c:	mov	r2, r5
   29850:	mov	r0, r7
   29854:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29858:	mov	r4, r0
   2985c:	mov	r2, r5
   29860:	mov	r1, r4
   29864:	mov	r0, r7
   29868:	bl	279c0 <flatcc_json_parser_string_part@@Base>
   2986c:	cmp	r5, r0
   29870:	mov	r6, r0
   29874:	beq	29884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   29878:	ldrb	r3, [r0]
   2987c:	cmp	r3, #34	; 0x22
   29880:	beq	298b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   29884:	mov	ip, #0
   29888:	cmp	r8, ip
   2988c:	moveq	r3, #31
   29890:	movne	r3, #32
   29894:	mov	r2, r5
   29898:	mov	r1, r6
   2989c:	mov	r0, r7
   298a0:	str	ip, [r9]
   298a4:	add	sp, sp, #36	; 0x24
   298a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   298ac:	b	27994 <flatcc_json_parser_set_error@@Base>
   298b0:	sub	fp, r0, r4
   298b4:	and	r2, fp, #3
   298b8:	lsr	r3, fp, #2
   298bc:	cmp	r2, #2
   298c0:	add	r3, r3, r3, lsl #1
   298c4:	str	r3, [sp]
   298c8:	beq	299ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   298cc:	cmp	r2, #3
   298d0:	addeq	r3, r3, #2
   298d4:	streq	r3, [sp]
   298d8:	mov	r2, #1
   298dc:	mov	r1, r2
   298e0:	mvn	r3, #0
   298e4:	ldr	r0, [r7]
   298e8:	bl	23a88 <flatcc_builder_start_vector@@Base>
   298ec:	cmp	r0, #0
   298f0:	bne	299bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   298f4:	ldr	r1, [sp]
   298f8:	ldr	r0, [r7]
   298fc:	bl	23234 <flatcc_builder_extend_vector@@Base>
   29900:	subs	r3, r0, #0
   29904:	str	r3, [sp, #4]
   29908:	beq	299bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   2990c:	cmp	sl, #1
   29910:	bne	29a08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   29914:	ldr	r3, [pc, #740]	; 29c00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
   29918:	add	r3, pc, r3
   2991c:	add	r3, r3, #1472	; 0x5c0
   29920:	add	r3, r3, #4
   29924:	ldr	r2, [sp]
   29928:	mov	ip, fp
   2992c:	cmp	r2, #0
   29930:	mvneq	r2, #0
   29934:	str	r2, [sp, #12]
   29938:	mov	sl, r4
   2993c:	ldr	r2, [sp, #4]
   29940:	str	r2, [sp, #8]
   29944:	cmp	ip, #0
   29948:	beq	29af4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   2994c:	mov	lr, ip
   29950:	mov	r1, #0
   29954:	ldrb	r2, [sl, r1]
   29958:	ldrb	r0, [r3, r2]
   2995c:	add	r2, sp, #32
   29960:	add	r2, r2, r1
   29964:	cmp	r0, #63	; 0x3f
   29968:	strb	r0, [r2, #-4]
   2996c:	bls	299ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1dc>
   29970:	cmp	r0, #65	; 0x41
   29974:	beq	299e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   29978:	cmp	r0, #66	; 0x42
   2997c:	movne	r2, r1
   29980:	beq	29a1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   29984:	sub	r2, lr, r2
   29988:	cmp	r1, #2
   2998c:	beq	29b54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x344>
   29990:	cmp	r1, #3
   29994:	beq	29a90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x280>
   29998:	cmp	r1, #0
   2999c:	beq	29ae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   299a0:	sub	r6, fp, ip
   299a4:	add	r6, r4, r6
   299a8:	b	29884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   299ac:	ldr	r3, [sp]
   299b0:	add	r3, r3, #1
   299b4:	str	r3, [sp]
   299b8:	b	298d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc8>
   299bc:	mov	r3, #0
   299c0:	str	r3, [r9]
   299c4:	mov	r2, r5
   299c8:	mov	r1, r6
   299cc:	mov	r0, r7
   299d0:	mov	r3, #33	; 0x21
   299d4:	add	sp, sp, #36	; 0x24
   299d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299dc:	b	27994 <flatcc_json_parser_set_error@@Base>
   299e0:	add	sl, sl, #1
   299e4:	sub	lr, lr, #1
   299e8:	sub	r1, r1, #1
   299ec:	add	r1, r1, #1
   299f0:	cmp	r1, #3
   299f4:	bhi	29b80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x370>
   299f8:	cmp	r1, lr
   299fc:	bne	29954 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x144>
   29a00:	mov	r2, #0
   29a04:	b	29988 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   29a08:	ldr	r3, [pc, #500]	; 29c04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f4>
   29a0c:	add	r3, pc, r3
   29a10:	add	r3, r3, #1728	; 0x6c0
   29a14:	add	r3, r3, #4
   29a18:	b	29924 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x114>
   29a1c:	add	r2, r1, #1
   29a20:	cmp	r2, #7
   29a24:	movls	r0, #1
   29a28:	movhi	r0, #0
   29a2c:	cmp	lr, r2
   29a30:	movls	r0, #0
   29a34:	cmp	r0, #0
   29a38:	beq	29984 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   29a3c:	ldrb	r0, [sl, r2]
   29a40:	add	sl, sl, r2
   29a44:	ldrb	r0, [r3, r0]
   29a48:	sub	r0, r0, #65	; 0x41
   29a4c:	cmp	r0, #1
   29a50:	bls	29a6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x25c>
   29a54:	b	29984 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   29a58:	ldrb	r0, [sl, #1]!
   29a5c:	ldrb	r0, [r3, r0]
   29a60:	sub	r0, r0, #65	; 0x41
   29a64:	cmp	r0, #1
   29a68:	bhi	29984 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   29a6c:	add	r2, r2, #1
   29a70:	cmp	lr, r2
   29a74:	movhi	r0, #1
   29a78:	movls	r0, #0
   29a7c:	cmp	r2, #7
   29a80:	movhi	r0, #0
   29a84:	cmp	r0, #0
   29a88:	bne	29a58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x248>
   29a8c:	b	29984 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   29a90:	ldrb	r1, [sp, #30]
   29a94:	ldr	r0, [sp, #12]
   29a98:	lsl	r3, r1, #6
   29a9c:	tst	r3, #192	; 0xc0
   29aa0:	movne	r3, #1
   29aa4:	moveq	r3, #0
   29aa8:	cmp	r0, #1
   29aac:	orreq	r3, r3, #1
   29ab0:	cmp	r3, #0
   29ab4:	bne	299a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   29ab8:	ldrb	r3, [sp, #29]
   29abc:	ldrb	r0, [sp, #28]
   29ac0:	lsr	r1, r1, #2
   29ac4:	orr	r1, r1, r3, lsl #4
   29ac8:	lsr	r3, r3, #4
   29acc:	orr	r0, r3, r0, lsl #2
   29ad0:	ldr	r3, [sp, #8]
   29ad4:	add	r3, r3, #2
   29ad8:	strb	r1, [r3, #-1]
   29adc:	strb	r0, [r3, #-2]
   29ae0:	str	r3, [sp, #8]
   29ae4:	sub	r2, fp, r2
   29ae8:	cmp	fp, r2
   29aec:	addne	r6, r4, r2
   29af0:	bne	29884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   29af4:	ldmib	sp, {r2, r3}
   29af8:	sub	r1, r3, r2
   29afc:	ldr	r3, [sp]
   29b00:	cmp	r3, r1
   29b04:	bls	29b20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
   29b08:	ldr	r3, [sp]
   29b0c:	ldr	r0, [r7]
   29b10:	sub	r1, r3, r1
   29b14:	bl	2385c <flatcc_builder_truncate_vector@@Base>
   29b18:	cmp	r0, #0
   29b1c:	bne	299bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   29b20:	ldr	r0, [r7]
   29b24:	bl	24a24 <flatcc_builder_end_vector@@Base>
   29b28:	cmp	r0, #0
   29b2c:	str	r0, [r9]
   29b30:	beq	299bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   29b34:	ldrb	r3, [r6]
   29b38:	cmp	r3, #34	; 0x22
   29b3c:	beq	29bf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e4>
   29b40:	mov	r2, r5
   29b44:	mov	r1, r6
   29b48:	mov	r0, r7
   29b4c:	mov	r3, #20
   29b50:	b	298a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   29b54:	ldrb	r3, [sp, #29]
   29b58:	lsl	r1, r3, #4
   29b5c:	tst	r1, #240	; 0xf0
   29b60:	bne	299a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   29b64:	ldrb	r1, [sp, #28]
   29b68:	lsr	r3, r3, #4
   29b6c:	orr	r3, r3, r1, lsl #2
   29b70:	ldr	r1, [sp, #8]
   29b74:	strb	r3, [r1], #1
   29b78:	str	r1, [sp, #8]
   29b7c:	b	29ae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   29b80:	ldr	r2, [sp, #12]
   29b84:	cmp	r2, #2
   29b88:	bls	299a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   29b8c:	ldrb	r1, [sp, #30]
   29b90:	ldrb	ip, [sp, #29]
   29b94:	subs	r2, r2, #3
   29b98:	str	r1, [sp, #16]
   29b9c:	ldrb	r1, [sp, #28]
   29ba0:	str	r2, [sp, #12]
   29ba4:	lsr	r0, ip, #4
   29ba8:	str	r1, [sp, #20]
   29bac:	ldr	r2, [sp, #20]
   29bb0:	ldrb	r1, [sp, #31]
   29bb4:	add	sl, sl, #4
   29bb8:	orr	r0, r0, r2, lsl #2
   29bbc:	ldr	r2, [sp, #16]
   29bc0:	orr	r1, r1, r2, lsl #6
   29bc4:	lsr	r2, r2, #2
   29bc8:	orr	r2, r2, ip, lsl #4
   29bcc:	sub	ip, lr, #4
   29bd0:	ldr	lr, [sp, #8]
   29bd4:	strb	r2, [lr, #1]
   29bd8:	add	r2, lr, #3
   29bdc:	strb	r0, [lr]
   29be0:	strb	r1, [lr, #2]
   29be4:	str	r2, [sp, #8]
   29be8:	bne	29944 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   29bec:	mov	r2, ip
   29bf0:	b	29ae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   29bf4:	add	r0, r6, #1
   29bf8:	add	sp, sp, #36	; 0x24
   29bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c00:	muleq	r0, r8, r4
   29c04:	andeq	r2, r0, r4, lsr #7

00029c08 <flatcc_json_parser_build_string@@Base>:
   29c08:	cmp	r1, r2
   29c0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29c10:	mov	r6, r2
   29c14:	sub	sp, sp, #8
   29c18:	mov	r5, r0
   29c1c:	mov	r8, r3
   29c20:	beq	29c34 <flatcc_json_parser_build_string@@Base+0x2c>
   29c24:	ldrb	r3, [r1]
   29c28:	cmp	r3, #34	; 0x22
   29c2c:	addeq	r7, r1, #1
   29c30:	beq	29c48 <flatcc_json_parser_build_string@@Base+0x40>
   29c34:	mov	r3, #16
   29c38:	mov	r2, r6
   29c3c:	mov	r0, r5
   29c40:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29c44:	mov	r7, r0
   29c48:	mov	r2, r6
   29c4c:	mov	r1, r7
   29c50:	mov	r0, r5
   29c54:	bl	279c0 <flatcc_json_parser_string_part@@Base>
   29c58:	cmp	r6, r0
   29c5c:	mov	r4, r0
   29c60:	beq	29c70 <flatcc_json_parser_build_string@@Base+0x68>
   29c64:	ldrb	r3, [r0]
   29c68:	cmp	r3, #34	; 0x22
   29c6c:	beq	29d68 <flatcc_json_parser_build_string@@Base+0x160>
   29c70:	ldr	r0, [r5]
   29c74:	bl	23b68 <flatcc_builder_start_string@@Base>
   29c78:	cmp	r0, #0
   29c7c:	beq	29c94 <flatcc_json_parser_build_string@@Base+0x8c>
   29c80:	mov	r3, #0
   29c84:	str	r3, [r8]
   29c88:	mov	r0, r4
   29c8c:	add	sp, sp, #8
   29c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29c94:	sub	r2, r4, r7
   29c98:	mov	r1, r7
   29c9c:	ldr	r0, [r5]
   29ca0:	bl	23738 <flatcc_builder_append_string@@Base>
   29ca4:	cmp	r0, #0
   29ca8:	beq	29c80 <flatcc_json_parser_build_string@@Base+0x78>
   29cac:	cmp	r6, r4
   29cb0:	beq	29da8 <flatcc_json_parser_build_string@@Base+0x1a0>
   29cb4:	ldrb	r3, [r4]
   29cb8:	cmp	r3, #34	; 0x22
   29cbc:	beq	29d90 <flatcc_json_parser_build_string@@Base+0x188>
   29cc0:	add	sl, sp, #4
   29cc4:	add	r9, sp, #5
   29cc8:	b	29ce4 <flatcc_json_parser_build_string@@Base+0xdc>
   29ccc:	bl	23738 <flatcc_builder_append_string@@Base>
   29cd0:	cmp	r0, #0
   29cd4:	beq	29c80 <flatcc_json_parser_build_string@@Base+0x78>
   29cd8:	ldrb	r3, [r4]
   29cdc:	cmp	r3, #34	; 0x22
   29ce0:	beq	29d90 <flatcc_json_parser_build_string@@Base+0x188>
   29ce4:	mov	r1, r4
   29ce8:	mov	r3, sl
   29cec:	mov	r2, r6
   29cf0:	mov	r0, r5
   29cf4:	bl	281d8 <flatcc_json_parser_string_escape@@Base>
   29cf8:	ldrb	r2, [sp, #4]
   29cfc:	mov	r1, r9
   29d00:	mov	r7, r0
   29d04:	ldr	r0, [r5]
   29d08:	bl	23738 <flatcc_builder_append_string@@Base>
   29d0c:	mov	r2, r6
   29d10:	mov	r1, r7
   29d14:	cmp	r0, #0
   29d18:	mov	r0, r5
   29d1c:	beq	29da0 <flatcc_json_parser_build_string@@Base+0x198>
   29d20:	bl	279c0 <flatcc_json_parser_string_part@@Base>
   29d24:	mov	r1, r7
   29d28:	mov	r4, r0
   29d2c:	cmp	r6, r4
   29d30:	sub	r2, r0, r7
   29d34:	ldr	r0, [r5]
   29d38:	bne	29ccc <flatcc_json_parser_build_string@@Base+0xc4>
   29d3c:	bl	255ec <flatcc_builder_end_string@@Base>
   29d40:	str	r0, [r8]
   29d44:	mov	r1, r4
   29d48:	mov	r2, r6
   29d4c:	mov	r0, r5
   29d50:	mov	r3, #20
   29d54:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29d58:	mov	r4, r0
   29d5c:	mov	r0, r4
   29d60:	add	sp, sp, #8
   29d64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29d68:	sub	r2, r0, r7
   29d6c:	mov	r1, r7
   29d70:	ldr	r0, [r5]
   29d74:	bl	25488 <flatcc_builder_create_string@@Base>
   29d78:	str	r0, [r8]
   29d7c:	ldrb	r3, [r4]
   29d80:	cmp	r3, #34	; 0x22
   29d84:	addeq	r4, r4, #1
   29d88:	bne	29d44 <flatcc_json_parser_build_string@@Base+0x13c>
   29d8c:	b	29c88 <flatcc_json_parser_build_string@@Base+0x80>
   29d90:	ldr	r0, [r5]
   29d94:	bl	255ec <flatcc_builder_end_string@@Base>
   29d98:	str	r0, [r8]
   29d9c:	b	29d7c <flatcc_json_parser_build_string@@Base+0x174>
   29da0:	mov	r4, r7
   29da4:	b	29c80 <flatcc_json_parser_build_string@@Base+0x78>
   29da8:	ldr	r0, [r5]
   29dac:	b	29d3c <flatcc_json_parser_build_string@@Base+0x134>

00029db0 <flatcc_json_parser_prepare_unions@@Base>:
   29db0:	push	{r4, r5, r6, r7, r8, lr}
   29db4:	mov	r5, r0
   29db8:	add	r0, r3, r3, lsl #1
   29dbc:	mov	r6, r1
   29dc0:	lsl	r1, r0, #3
   29dc4:	add	r1, r1, #8
   29dc8:	ldr	r0, [r5]
   29dcc:	ldr	r7, [sp, #24]
   29dd0:	mov	r4, r3
   29dd4:	mov	r8, r2
   29dd8:	bl	22808 <flatcc_builder_enter_user_frame@@Base>
   29ddc:	cmp	r0, #0
   29de0:	str	r0, [r7]
   29de4:	beq	29e00 <flatcc_json_parser_prepare_unions@@Base+0x50>
   29de8:	mov	r1, r0
   29dec:	ldr	r0, [r5]
   29df0:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   29df4:	str	r4, [r0]
   29df8:	mov	r0, r6
   29dfc:	pop	{r4, r5, r6, r7, r8, pc}
   29e00:	mov	r2, r8
   29e04:	mov	r1, r6
   29e08:	mov	r0, r5
   29e0c:	mov	r3, #33	; 0x21
   29e10:	pop	{r4, r5, r6, r7, r8, lr}
   29e14:	b	27994 <flatcc_json_parser_set_error@@Base>

00029e18 <flatcc_json_parser_finalize_unions@@Base>:
   29e18:	push	{r4, r5, r6, r7, r8, lr}
   29e1c:	mov	r4, r0
   29e20:	mov	r6, r1
   29e24:	ldr	r0, [r0]
   29e28:	mov	r1, r3
   29e2c:	mov	r5, r3
   29e30:	mov	r7, r2
   29e34:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   29e38:	ldr	r3, [r0, #4]
   29e3c:	cmp	r3, #0
   29e40:	beq	29e5c <flatcc_json_parser_finalize_unions@@Base+0x44>
   29e44:	mov	r1, r6
   29e48:	mov	r2, r7
   29e4c:	mov	r3, #27
   29e50:	mov	r0, r4
   29e54:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29e58:	mov	r6, r0
   29e5c:	mov	r1, r5
   29e60:	ldr	r0, [r4]
   29e64:	bl	228fc <flatcc_builder_exit_user_frame_at@@Base>
   29e68:	mov	r0, r6
   29e6c:	pop	{r4, r5, r6, r7, r8, pc}

00029e70 <flatcc_json_parser_union@@Base>:
   29e70:	push	{r4, r5, r6, r7, r8, lr}
   29e74:	sub	sp, sp, #16
   29e78:	mov	r5, r0
   29e7c:	mov	r8, r1
   29e80:	ldr	r0, [r0]
   29e84:	ldr	r1, [sp, #44]	; 0x2c
   29e88:	mov	r4, r3
   29e8c:	mov	r6, r2
   29e90:	ldrh	r7, [sp, #40]	; 0x28
   29e94:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   29e98:	add	r4, r4, r4, lsl #1
   29e9c:	add	r4, r0, r4, lsl #3
   29ea0:	ldr	r3, [r4, #8]
   29ea4:	cmp	r3, #0
   29ea8:	beq	29ed0 <flatcc_json_parser_union@@Base+0x60>
   29eac:	mov	r2, r6
   29eb0:	mov	r1, r8
   29eb4:	mov	r0, r5
   29eb8:	mov	r3, #28
   29ebc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29ec0:	mov	r4, r0
   29ec4:	mov	r0, r4
   29ec8:	add	sp, sp, #16
   29ecc:	pop	{r4, r5, r6, r7, r8, pc}
   29ed0:	ldrb	r3, [r4, #20]
   29ed4:	cmp	r3, #0
   29ed8:	beq	29f7c <flatcc_json_parser_union@@Base+0x10c>
   29edc:	ldrb	r3, [r4, #21]
   29ee0:	cmp	r3, #0
   29ee4:	strb	r3, [sp, #8]
   29ee8:	beq	29f58 <flatcc_json_parser_union@@Base+0xe8>
   29eec:	ldr	r2, [r0, #4]
   29ef0:	mov	r1, r8
   29ef4:	sub	r2, r2, #1
   29ef8:	str	r2, [r0, #4]
   29efc:	add	r0, sp, #12
   29f00:	str	r0, [sp]
   29f04:	mov	r2, r6
   29f08:	mov	r0, r5
   29f0c:	ldr	ip, [sp, #48]	; 0x30
   29f10:	blx	ip
   29f14:	add	r3, sp, #8
   29f18:	cmp	r6, r0
   29f1c:	mov	r4, r0
   29f20:	beq	29ec4 <flatcc_json_parser_union@@Base+0x54>
   29f24:	mov	r1, r7
   29f28:	ldm	r3, {r2, r3}
   29f2c:	ldr	r0, [r5]
   29f30:	bl	25ad4 <flatcc_builder_table_add_union@@Base>
   29f34:	cmp	r0, #0
   29f38:	beq	29ec4 <flatcc_json_parser_union@@Base+0x54>
   29f3c:	mov	r1, r4
   29f40:	mov	r2, r6
   29f44:	mov	r0, r5
   29f48:	mov	r3, #28
   29f4c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29f50:	mov	r4, r0
   29f54:	b	29ec4 <flatcc_json_parser_union@@Base+0x54>
   29f58:	mov	r2, r6
   29f5c:	mov	r1, r8
   29f60:	mov	r0, r5
   29f64:	mov	r3, #25
   29f68:	bl	27994 <flatcc_json_parser_set_error@@Base>
   29f6c:	mov	r4, r0
   29f70:	mov	r0, r4
   29f74:	add	sp, sp, #16
   29f78:	pop	{r4, r5, r6, r7, r8, pc}
   29f7c:	ldr	r3, [r0, #4]
   29f80:	ldr	lr, [r5, #16]
   29f84:	ldr	ip, [r5, #4]
   29f88:	add	r3, r3, #1
   29f8c:	str	r3, [r0, #4]
   29f90:	mov	r2, r6
   29f94:	str	lr, [r4, #16]
   29f98:	str	ip, [r4, #12]
   29f9c:	str	r8, [r4, #8]
   29fa0:	mov	r1, r8
   29fa4:	mov	r0, r5
   29fa8:	bl	28ad8 <flatcc_json_parser_generic_json@@Base>
   29fac:	mov	r4, r0
   29fb0:	b	29ec4 <flatcc_json_parser_union@@Base+0x54>

00029fb4 <flatcc_json_parser_union_type@@Base>:
   29fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fb8:	sub	sp, sp, #36	; 0x24
   29fbc:	mov	r4, r3
   29fc0:	ldrh	r3, [sp, #72]	; 0x48
   29fc4:	mov	r5, r0
   29fc8:	mov	sl, r1
   29fcc:	ldr	r0, [r0]
   29fd0:	ldr	r1, [sp, #76]	; 0x4c
   29fd4:	str	r3, [sp, #12]
   29fd8:	mov	r7, r2
   29fdc:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   29fe0:	add	r4, r4, r4, lsl #1
   29fe4:	lsl	r4, r4, #3
   29fe8:	add	fp, r0, #8
   29fec:	add	r6, fp, r4
   29ff0:	ldrb	r3, [r6, #12]
   29ff4:	cmp	r3, #0
   29ff8:	bne	2a104 <flatcc_json_parser_union_type@@Base+0x150>
   29ffc:	mov	r9, r0
   2a000:	mov	r1, #0
   2a004:	mov	r0, #0
   2a008:	mov	r2, #1
   2a00c:	cmp	sl, r7
   2a010:	strb	r2, [r6, #12]
   2a014:	str	r3, [sp, #20]
   2a018:	strd	r0, [sp, #24]
   2a01c:	strb	r3, [r6, #13]
   2a020:	beq	2a128 <flatcc_json_parser_union_type@@Base+0x174>
   2a024:	add	r3, sp, #24
   2a028:	str	r3, [sp]
   2a02c:	mov	r2, r7
   2a030:	add	r3, sp, #20
   2a034:	mov	r1, sl
   2a038:	mov	r0, r5
   2a03c:	bl	296fc <flatcc_json_parser_integer@@Base>
   2a040:	cmp	sl, r0
   2a044:	mov	r8, r0
   2a048:	beq	2a12c <flatcc_json_parser_union_type@@Base+0x178>
   2a04c:	ldr	r3, [sp, #20]
   2a050:	cmp	r3, #0
   2a054:	bne	2a16c <flatcc_json_parser_union_type@@Base+0x1b8>
   2a058:	ldrd	r2, [sp, #24]
   2a05c:	cmp	r3, #0
   2a060:	cmpeq	r2, #255	; 0xff
   2a064:	strbls	r2, [r6, #13]
   2a068:	bhi	2a1a8 <flatcc_json_parser_union_type@@Base+0x1f4>
   2a06c:	ldr	r1, [fp, r4]
   2a070:	cmp	r1, #0
   2a074:	beq	2a190 <flatcc_json_parser_union_type@@Base+0x1dc>
   2a078:	ldr	r3, [r9, #4]
   2a07c:	cmp	r3, #0
   2a080:	beq	2a1c4 <flatcc_json_parser_union_type@@Base+0x210>
   2a084:	ldr	r0, [r6, #8]
   2a088:	ldr	r2, [r6, #4]
   2a08c:	sub	r3, r3, #1
   2a090:	str	r3, [r9, #4]
   2a094:	ldr	sl, [r5, #16]
   2a098:	ldr	r9, [r5, #4]
   2a09c:	str	r0, [r5, #16]
   2a0a0:	str	r2, [r5, #4]
   2a0a4:	ldrb	ip, [r6, #13]
   2a0a8:	add	r4, sp, #32
   2a0ac:	add	r2, sp, #28
   2a0b0:	str	r2, [sp]
   2a0b4:	mov	r3, ip
   2a0b8:	strb	ip, [r4, #-8]!
   2a0bc:	mov	r2, r7
   2a0c0:	mov	r0, r5
   2a0c4:	ldr	ip, [sp, #84]	; 0x54
   2a0c8:	blx	ip
   2a0cc:	cmp	r7, r0
   2a0d0:	moveq	r8, r7
   2a0d4:	beq	2a0f8 <flatcc_json_parser_union_type@@Base+0x144>
   2a0d8:	ldr	r1, [sp, #12]
   2a0dc:	ldm	r4, {r2, r3}
   2a0e0:	ldr	r0, [r5]
   2a0e4:	bl	25ad4 <flatcc_builder_table_add_union@@Base>
   2a0e8:	cmp	r0, #0
   2a0ec:	streq	sl, [r5, #16]
   2a0f0:	streq	r9, [r5, #4]
   2a0f4:	bne	2a150 <flatcc_json_parser_union_type@@Base+0x19c>
   2a0f8:	mov	r0, r8
   2a0fc:	add	sp, sp, #36	; 0x24
   2a100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a104:	mov	r2, r7
   2a108:	mov	r1, sl
   2a10c:	mov	r0, r5
   2a110:	mov	r3, #28
   2a114:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a118:	mov	r8, r0
   2a11c:	mov	r0, r8
   2a120:	add	sp, sp, #36	; 0x24
   2a124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a128:	mov	r8, r7
   2a12c:	add	r3, r6, #13
   2a130:	mov	r1, r8
   2a134:	str	r3, [sp]
   2a138:	mov	r2, r7
   2a13c:	ldr	r3, [sp, #80]	; 0x50
   2a140:	mov	r0, r5
   2a144:	bl	27bac <flatcc_json_parser_space_ext@@Base+0x124>
   2a148:	mov	r8, r0
   2a14c:	b	2a06c <flatcc_json_parser_union_type@@Base+0xb8>
   2a150:	mov	r1, r8
   2a154:	mov	r2, r7
   2a158:	mov	r0, r5
   2a15c:	mov	r3, #28
   2a160:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a164:	mov	r8, r0
   2a168:	b	2a0f8 <flatcc_json_parser_union_type@@Base+0x144>
   2a16c:	mov	r1, r0
   2a170:	mov	r3, #8
   2a174:	mov	r2, r7
   2a178:	mov	r0, r5
   2a17c:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a180:	mov	r8, r0
   2a184:	cmp	sl, r8
   2a188:	bne	2a06c <flatcc_json_parser_union_type@@Base+0xb8>
   2a18c:	b	2a12c <flatcc_json_parser_union_type@@Base+0x178>
   2a190:	ldrb	r2, [r6, #13]
   2a194:	ldr	r3, [r9, #4]
   2a198:	cmp	r2, #0
   2a19c:	addne	r3, r3, #1
   2a1a0:	str	r3, [r9, #4]
   2a1a4:	b	2a0f8 <flatcc_json_parser_union_type@@Base+0x144>
   2a1a8:	mov	r1, r0
   2a1ac:	mov	r3, #7
   2a1b0:	mov	r2, r7
   2a1b4:	mov	r0, r5
   2a1b8:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a1bc:	mov	r8, r0
   2a1c0:	b	2a184 <flatcc_json_parser_union_type@@Base+0x1d0>
   2a1c4:	ldr	r3, [pc, #32]	; 2a1ec <flatcc_json_parser_union_type@@Base+0x238>
   2a1c8:	ldr	r1, [pc, #32]	; 2a1f0 <flatcc_json_parser_union_type@@Base+0x23c>
   2a1cc:	add	r3, pc, r3
   2a1d0:	ldr	r0, [pc, #28]	; 2a1f4 <flatcc_json_parser_union_type@@Base+0x240>
   2a1d4:	add	r3, r3, #1984	; 0x7c0
   2a1d8:	ldr	r2, [pc, #24]	; 2a1f8 <flatcc_json_parser_union_type@@Base+0x244>
   2a1dc:	add	r3, r3, #4
   2a1e0:	add	r1, pc, r1
   2a1e4:	add	r0, pc, r0
   2a1e8:	bl	126a0 <__assert_fail@plt>
   2a1ec:	andeq	r1, r0, r4, ror #23
   2a1f0:	andeq	r2, r0, ip, lsl r8
   2a1f4:	andeq	r2, r0, ip, ror r8
   2a1f8:	andeq	r0, r0, r5, asr #7

0002a1fc <flatcc_json_parser_union_vector@@Base>:
   2a1fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a200:	mov	r5, r0
   2a204:	mov	r6, r1
   2a208:	ldr	r0, [r0]
   2a20c:	ldr	r1, [sp, #36]	; 0x24
   2a210:	mov	r4, r3
   2a214:	mov	r9, r2
   2a218:	ldrh	r7, [sp, #32]
   2a21c:	ldr	r8, [sp, #40]	; 0x28
   2a220:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   2a224:	add	r3, r4, r4, lsl #1
   2a228:	lsl	r3, r3, #3
   2a22c:	add	ip, r0, #8
   2a230:	add	r1, ip, r3
   2a234:	ldr	r2, [ip, r3]
   2a238:	cmp	r2, #0
   2a23c:	beq	2a258 <flatcc_json_parser_union_vector@@Base+0x5c>
   2a240:	mov	r2, r9
   2a244:	mov	r1, r6
   2a248:	mov	r0, r5
   2a24c:	mov	r3, #28
   2a250:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a254:	b	27994 <flatcc_json_parser_set_error@@Base>
   2a258:	ldrb	r2, [r1, #12]
   2a25c:	cmp	r2, #0
   2a260:	beq	2a298 <flatcc_json_parser_union_vector@@Base+0x9c>
   2a264:	ldr	r3, [r0, #4]
   2a268:	mov	r2, r9
   2a26c:	sub	r3, r3, #1
   2a270:	str	r3, [r0, #4]
   2a274:	ldr	r3, [r1, #20]
   2a278:	str	r8, [sp, #40]	; 0x28
   2a27c:	str	r7, [sp, #36]	; 0x24
   2a280:	ldr	ip, [r1, #16]
   2a284:	mov	r0, r5
   2a288:	mov	r1, r6
   2a28c:	str	ip, [sp, #32]
   2a290:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a294:	b	27de4 <flatcc_json_parser_space_ext@@Base+0x35c>
   2a298:	ldr	lr, [r0, #4]
   2a29c:	ldr	r4, [r5, #16]
   2a2a0:	add	lr, lr, #1
   2a2a4:	str	lr, [r0, #4]
   2a2a8:	ldr	r0, [r5, #4]
   2a2ac:	mov	r2, r9
   2a2b0:	stmib	r1, {r0, r4}
   2a2b4:	mov	r1, r6
   2a2b8:	str	r6, [ip, r3]
   2a2bc:	mov	r0, r5
   2a2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a2c4:	b	28ad8 <flatcc_json_parser_generic_json@@Base>

0002a2c8 <flatcc_json_parser_union_type_vector@@Base>:
   2a2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2cc:	sub	sp, sp, #60	; 0x3c
   2a2d0:	mov	r7, r3
   2a2d4:	ldrh	r3, [sp, #96]	; 0x60
   2a2d8:	mov	r6, r0
   2a2dc:	mov	r5, r1
   2a2e0:	ldr	r0, [r0]
   2a2e4:	ldr	r1, [sp, #100]	; 0x64
   2a2e8:	str	r3, [sp, #28]
   2a2ec:	mov	r4, r2
   2a2f0:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   2a2f4:	add	r7, r7, r7, lsl #1
   2a2f8:	lsl	r3, r7, #3
   2a2fc:	str	r3, [sp, #32]
   2a300:	add	r0, r0, #8
   2a304:	add	r3, r0, r3
   2a308:	str	r3, [sp, #24]
   2a30c:	ldrb	r3, [r3, #12]
   2a310:	cmp	r3, #0
   2a314:	bne	2a3e0 <flatcc_json_parser_union_type_vector@@Base+0x118>
   2a318:	ldr	r3, [sp, #24]
   2a31c:	mov	r2, #1
   2a320:	mov	r1, r2
   2a324:	strb	r2, [r3, #12]
   2a328:	mvn	r3, #0
   2a32c:	ldr	r0, [r6]
   2a330:	bl	23a88 <flatcc_builder_start_vector@@Base>
   2a334:	cmp	r0, #0
   2a338:	bne	2a3c4 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2a33c:	cmp	r5, r4
   2a340:	beq	2a350 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2a344:	ldrb	r3, [r5]
   2a348:	cmp	r3, #91	; 0x5b
   2a34c:	beq	2a3fc <flatcc_json_parser_union_type_vector@@Base+0x134>
   2a350:	mov	r1, r5
   2a354:	mov	r3, #22
   2a358:	mov	r2, r4
   2a35c:	mov	r0, r6
   2a360:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a364:	mov	r5, r0
   2a368:	ldr	r0, [r6]
   2a36c:	bl	24b20 <flatcc_builder_vector_count@@Base>
   2a370:	ldr	r3, [sp, #24]
   2a374:	mov	r1, r0
   2a378:	str	r0, [r3, #16]
   2a37c:	mov	r7, r0
   2a380:	ldr	r0, [r6]
   2a384:	bl	22808 <flatcc_builder_enter_user_frame@@Base>
   2a388:	mov	r1, r0
   2a38c:	mov	r8, r0
   2a390:	ldr	r0, [r6]
   2a394:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   2a398:	mov	r9, r0
   2a39c:	ldr	r0, [r6]
   2a3a0:	bl	24b2c <flatcc_builder_vector_edit@@Base>
   2a3a4:	mov	r2, r7
   2a3a8:	mov	r1, r0
   2a3ac:	mov	r0, r9
   2a3b0:	bl	125a4 <memcpy@plt>
   2a3b4:	ldr	r0, [r6]
   2a3b8:	bl	24a24 <flatcc_builder_end_vector@@Base>
   2a3bc:	subs	r9, r0, #0
   2a3c0:	bne	2a6fc <flatcc_json_parser_union_type_vector@@Base+0x434>
   2a3c4:	mov	r2, r4
   2a3c8:	mov	r1, r5
   2a3cc:	mov	r0, r6
   2a3d0:	mov	r3, #33	; 0x21
   2a3d4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a3d8:	add	sp, sp, #60	; 0x3c
   2a3dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3e0:	mov	r2, r4
   2a3e4:	mov	r1, r5
   2a3e8:	mov	r0, r6
   2a3ec:	mov	r3, #28
   2a3f0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a3f4:	add	sp, sp, #60	; 0x3c
   2a3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3fc:	add	r1, r5, #1
   2a400:	sub	r3, r4, r1
   2a404:	cmp	r3, #1
   2a408:	ble	2a420 <flatcc_json_parser_union_type_vector@@Base+0x158>
   2a40c:	ldrb	r3, [r5, #1]
   2a410:	cmp	r3, #32
   2a414:	movhi	r5, r1
   2a418:	bhi	2a430 <flatcc_json_parser_union_type_vector@@Base+0x168>
   2a41c:	beq	2a7d4 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   2a420:	mov	r2, r4
   2a424:	mov	r0, r6
   2a428:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   2a42c:	mov	r5, r0
   2a430:	cmp	r4, r5
   2a434:	beq	2a444 <flatcc_json_parser_union_type_vector@@Base+0x17c>
   2a438:	ldrb	r3, [r5]
   2a43c:	cmp	r3, #93	; 0x5d
   2a440:	beq	2a668 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2a444:	add	fp, sp, #44	; 0x2c
   2a448:	str	fp, [sp, #20]
   2a44c:	ldr	fp, [sp, #112]	; 0x70
   2a450:	add	r3, sp, #43	; 0x2b
   2a454:	mov	r9, #1
   2a458:	mov	r7, #0
   2a45c:	str	r3, [sp, #36]	; 0x24
   2a460:	add	r3, sp, #48	; 0x30
   2a464:	str	r3, [sp, #16]
   2a468:	mov	r1, r9
   2a46c:	ldr	r0, [r6]
   2a470:	bl	23234 <flatcc_builder_extend_vector@@Base>
   2a474:	subs	r8, r0, #0
   2a478:	beq	2a3c4 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2a47c:	mov	r2, #0
   2a480:	mov	r3, #0
   2a484:	cmp	r4, r5
   2a488:	strd	r2, [sp, #48]	; 0x30
   2a48c:	str	r7, [sp, #44]	; 0x2c
   2a490:	strb	r7, [sp, #43]	; 0x2b
   2a494:	beq	2a5cc <flatcc_json_parser_union_type_vector@@Base+0x304>
   2a498:	ldr	r3, [sp, #16]
   2a49c:	mov	r2, r4
   2a4a0:	str	r3, [sp]
   2a4a4:	mov	r1, r5
   2a4a8:	ldr	r3, [sp, #20]
   2a4ac:	mov	r0, r6
   2a4b0:	bl	296fc <flatcc_json_parser_integer@@Base>
   2a4b4:	cmp	r0, r5
   2a4b8:	mov	sl, r0
   2a4bc:	beq	2a5cc <flatcc_json_parser_union_type_vector@@Base+0x304>
   2a4c0:	ldr	r3, [sp, #44]	; 0x2c
   2a4c4:	cmp	r3, #0
   2a4c8:	bne	2a5ac <flatcc_json_parser_union_type_vector@@Base+0x2e4>
   2a4cc:	ldrd	r0, [sp, #48]	; 0x30
   2a4d0:	cmp	r1, #0
   2a4d4:	cmpeq	r0, #255	; 0xff
   2a4d8:	uxtbls	r0, r0
   2a4dc:	strbls	r0, [sp, #43]	; 0x2b
   2a4e0:	bhi	2a6a0 <flatcc_json_parser_union_type_vector@@Base+0x3d8>
   2a4e4:	blx	fp
   2a4e8:	cmp	r0, #0
   2a4ec:	ldrbne	r2, [sp, #43]	; 0x2b
   2a4f0:	bne	2a508 <flatcc_json_parser_union_type_vector@@Base+0x240>
   2a4f4:	ldr	r3, [r6, #8]
   2a4f8:	tst	r3, #1
   2a4fc:	beq	2a6e4 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   2a500:	mov	r2, r7
   2a504:	strb	r0, [sp, #43]	; 0x2b
   2a508:	sub	r3, r4, sl
   2a50c:	cmp	r3, #1
   2a510:	strb	r2, [r8]
   2a514:	ble	2a528 <flatcc_json_parser_union_type_vector@@Base+0x260>
   2a518:	ldrb	r3, [sl]
   2a51c:	cmp	r3, #32
   2a520:	bhi	2a53c <flatcc_json_parser_union_type_vector@@Base+0x274>
   2a524:	beq	2a600 <flatcc_json_parser_union_type_vector@@Base+0x338>
   2a528:	mov	r1, sl
   2a52c:	mov	r2, r4
   2a530:	mov	r0, r6
   2a534:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   2a538:	mov	sl, r0
   2a53c:	cmp	r4, sl
   2a540:	beq	2a618 <flatcc_json_parser_union_type_vector@@Base+0x350>
   2a544:	ldrb	r3, [sl]
   2a548:	cmp	r3, #44	; 0x2c
   2a54c:	beq	2a620 <flatcc_json_parser_union_type_vector@@Base+0x358>
   2a550:	cmp	r3, #93	; 0x5d
   2a554:	beq	2a574 <flatcc_json_parser_union_type_vector@@Base+0x2ac>
   2a558:	mov	r1, sl
   2a55c:	mov	r3, #9
   2a560:	mov	r2, r4
   2a564:	mov	r0, r6
   2a568:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a56c:	mov	r5, r0
   2a570:	b	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a574:	add	r5, sl, #1
   2a578:	sub	r3, r4, r5
   2a57c:	cmp	r3, #1
   2a580:	ble	2a594 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2a584:	ldrb	r3, [sl, #1]
   2a588:	cmp	r3, #32
   2a58c:	bhi	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a590:	beq	2a6bc <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2a594:	mov	r1, r5
   2a598:	mov	r2, r4
   2a59c:	mov	r0, r6
   2a5a0:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   2a5a4:	mov	r5, r0
   2a5a8:	b	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a5ac:	mov	r1, r0
   2a5b0:	mov	r3, #8
   2a5b4:	mov	r2, r4
   2a5b8:	mov	r0, r6
   2a5bc:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a5c0:	mov	sl, r0
   2a5c4:	cmp	sl, r5
   2a5c8:	bne	2a5f8 <flatcc_json_parser_union_type_vector@@Base+0x330>
   2a5cc:	ldr	r3, [sp, #36]	; 0x24
   2a5d0:	mov	r2, r4
   2a5d4:	str	r3, [sp]
   2a5d8:	mov	r1, r5
   2a5dc:	ldr	r3, [sp, #104]	; 0x68
   2a5e0:	mov	r0, r6
   2a5e4:	bl	27bac <flatcc_json_parser_space_ext@@Base+0x124>
   2a5e8:	cmp	r4, r0
   2a5ec:	cmpne	r0, r5
   2a5f0:	mov	sl, r0
   2a5f4:	beq	2a7cc <flatcc_json_parser_union_type_vector@@Base+0x504>
   2a5f8:	ldrb	r0, [sp, #43]	; 0x2b
   2a5fc:	b	2a4e4 <flatcc_json_parser_union_type_vector@@Base+0x21c>
   2a600:	ldrb	r3, [sl, #1]
   2a604:	cmp	r3, #32
   2a608:	addhi	sl, sl, #1
   2a60c:	bls	2a528 <flatcc_json_parser_union_type_vector@@Base+0x260>
   2a610:	cmp	r4, sl
   2a614:	bne	2a544 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2a618:	mov	r5, r4
   2a61c:	b	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a620:	add	r5, sl, #1
   2a624:	sub	r3, r4, r5
   2a628:	cmp	r3, #1
   2a62c:	ble	2a640 <flatcc_json_parser_union_type_vector@@Base+0x378>
   2a630:	ldrb	r3, [sl, #1]
   2a634:	cmp	r3, #32
   2a638:	bhi	2a654 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   2a63c:	beq	2a6d0 <flatcc_json_parser_union_type_vector@@Base+0x408>
   2a640:	mov	r1, r5
   2a644:	mov	r2, r4
   2a648:	mov	r0, r6
   2a64c:	bl	27a88 <flatcc_json_parser_space_ext@@Base>
   2a650:	mov	r5, r0
   2a654:	cmp	r4, r5
   2a658:	beq	2a7b0 <flatcc_json_parser_union_type_vector@@Base+0x4e8>
   2a65c:	ldrb	r3, [r5]
   2a660:	cmp	r3, #93	; 0x5d
   2a664:	bne	2a468 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   2a668:	add	r1, r5, #1
   2a66c:	sub	r3, r4, r1
   2a670:	cmp	r3, #1
   2a674:	ble	2a598 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2a678:	ldrb	r3, [r5, #1]
   2a67c:	cmp	r3, #32
   2a680:	movhi	r5, r1
   2a684:	bhi	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a688:	bne	2a598 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2a68c:	ldrb	r3, [r5, #2]
   2a690:	cmp	r3, #32
   2a694:	addhi	r5, r5, #2
   2a698:	bls	2a598 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   2a69c:	b	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a6a0:	mov	r1, sl
   2a6a4:	mov	r3, #7
   2a6a8:	mov	r2, r4
   2a6ac:	mov	r0, r6
   2a6b0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a6b4:	mov	sl, r0
   2a6b8:	b	2a5c4 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   2a6bc:	ldrb	r3, [sl, #2]
   2a6c0:	cmp	r3, #32
   2a6c4:	addhi	r5, sl, #2
   2a6c8:	bls	2a594 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2a6cc:	b	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a6d0:	ldrb	r3, [sl, #2]
   2a6d4:	cmp	r3, #32
   2a6d8:	addhi	r5, sl, #2
   2a6dc:	bls	2a640 <flatcc_json_parser_union_type_vector@@Base+0x378>
   2a6e0:	b	2a654 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   2a6e4:	mov	r2, r4
   2a6e8:	mov	r1, sl
   2a6ec:	mov	r0, r6
   2a6f0:	mov	r3, #15
   2a6f4:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a6f8:	b	2a3d8 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2a6fc:	ldr	r3, [sp, #28]
   2a700:	ldr	r0, [r6]
   2a704:	sub	r1, r3, #1
   2a708:	bl	25948 <flatcc_builder_table_add_offset@@Base>
   2a70c:	cmp	r0, #0
   2a710:	beq	2a3c4 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2a714:	str	r9, [r0]
   2a718:	ldr	r1, [sp, #100]	; 0x64
   2a71c:	ldr	r0, [r6]
   2a720:	bl	22950 <flatcc_builder_get_user_frame_ptr@@Base>
   2a724:	ldr	r1, [sp, #32]
   2a728:	add	r3, r0, #8
   2a72c:	mov	r2, r0
   2a730:	add	r0, r3, r1
   2a734:	ldr	r1, [r3, r1]
   2a738:	ldr	r3, [r2, #4]
   2a73c:	cmp	r1, #0
   2a740:	addeq	r3, r3, #1
   2a744:	str	r8, [r0, #20]
   2a748:	moveq	r0, r5
   2a74c:	streq	r3, [r2, #4]
   2a750:	beq	2a3d8 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2a754:	cmp	r3, #0
   2a758:	beq	2a7e8 <flatcc_json_parser_union_type_vector@@Base+0x520>
   2a75c:	sub	r3, r3, #1
   2a760:	ldmib	r0, {r0, ip}
   2a764:	str	r3, [r2, #4]
   2a768:	ldr	r2, [sp, #108]	; 0x6c
   2a76c:	str	r7, [sp]
   2a770:	str	r2, [sp, #8]
   2a774:	ldr	r2, [sp, #28]
   2a778:	mov	r3, r8
   2a77c:	str	r2, [sp, #4]
   2a780:	mov	r2, r4
   2a784:	ldr	r8, [r6, #16]
   2a788:	ldr	r7, [r6, #4]
   2a78c:	str	ip, [r6, #16]
   2a790:	str	r0, [r6, #4]
   2a794:	mov	r0, r6
   2a798:	bl	27de4 <flatcc_json_parser_space_ext@@Base+0x35c>
   2a79c:	cmp	r4, r0
   2a7a0:	strne	r8, [r6, #16]
   2a7a4:	strne	r7, [r6, #4]
   2a7a8:	movne	r0, r5
   2a7ac:	b	2a3d8 <flatcc_json_parser_union_type_vector@@Base+0x110>
   2a7b0:	mov	r3, #9
   2a7b4:	mov	r2, r4
   2a7b8:	mov	r1, r4
   2a7bc:	mov	r0, r6
   2a7c0:	bl	27994 <flatcc_json_parser_set_error@@Base>
   2a7c4:	mov	r5, r0
   2a7c8:	b	2a368 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a7cc:	mov	r5, r0
   2a7d0:	b	2a3c4 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   2a7d4:	ldrb	r3, [r5, #2]
   2a7d8:	cmp	r3, #32
   2a7dc:	addhi	r5, r5, #2
   2a7e0:	bls	2a420 <flatcc_json_parser_union_type_vector@@Base+0x158>
   2a7e4:	b	2a430 <flatcc_json_parser_union_type_vector@@Base+0x168>
   2a7e8:	ldr	r3, [pc, #32]	; 2a810 <flatcc_json_parser_union_type_vector@@Base+0x548>
   2a7ec:	ldr	r1, [pc, #32]	; 2a814 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   2a7f0:	add	r3, pc, r3
   2a7f4:	ldr	r0, [pc, #28]	; 2a818 <flatcc_json_parser_union_type_vector@@Base+0x550>
   2a7f8:	add	r3, r3, #2016	; 0x7e0
   2a7fc:	ldr	r2, [pc, #24]	; 2a81c <flatcc_json_parser_union_type_vector@@Base+0x554>
   2a800:	add	r3, r3, #4
   2a804:	add	r1, pc, r1
   2a808:	add	r0, pc, r0
   2a80c:	bl	126a0 <__assert_fail@plt>
   2a810:	andeq	r1, r0, r0, asr #11
   2a814:	strdeq	r2, [r0], -r8
   2a818:	andeq	r2, r0, r8, asr r2
   2a81c:	andeq	r0, r0, r2, ror #8

0002a820 <flatcc_json_parser_struct_as_root@@Base>:
   2a820:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a824:	sub	sp, sp, #52	; 0x34
   2a828:	mov	r5, r2
   2a82c:	ldr	r8, [sp, #80]	; 0x50
   2a830:	mov	r9, r0
   2a834:	ands	r7, r8, #4
   2a838:	movne	r7, #2
   2a83c:	subs	r4, r1, #0
   2a840:	addeq	r4, sp, #4
   2a844:	mov	r2, #44	; 0x2c
   2a848:	mov	r1, #0
   2a84c:	mov	r0, r4
   2a850:	add	r6, r5, r3
   2a854:	bl	1264c <memset@plt>
   2a858:	mov	r2, #1
   2a85c:	str	r2, [r4, #16]
   2a860:	str	r6, [r4, #32]
   2a864:	str	r9, [r4]
   2a868:	stmib	r4, {r5, r8}
   2a86c:	str	r5, [r4, #28]
   2a870:	str	r5, [r4, #36]	; 0x24
   2a874:	mov	r3, r7
   2a878:	mov	r2, #0
   2a87c:	ldr	r1, [sp, #84]	; 0x54
   2a880:	mov	r0, r9
   2a884:	bl	22eb0 <flatcc_builder_start_buffer@@Base>
   2a888:	cmp	r0, #0
   2a88c:	bne	2a8e4 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2a890:	mov	r2, r6
   2a894:	mov	r3, sp
   2a898:	mov	r1, r5
   2a89c:	mov	r0, r4
   2a8a0:	ldr	ip, [sp, #88]	; 0x58
   2a8a4:	blx	ip
   2a8a8:	ldr	r6, [r4, #24]
   2a8ac:	cmp	r6, #0
   2a8b0:	beq	2a8c0 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   2a8b4:	mov	r0, r6
   2a8b8:	add	sp, sp, #52	; 0x34
   2a8bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a8c0:	mov	r0, r9
   2a8c4:	ldr	r1, [sp]
   2a8c8:	bl	22f68 <flatcc_builder_end_buffer@@Base>
   2a8cc:	cmp	r0, #0
   2a8d0:	beq	2a8e4 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2a8d4:	mov	r0, r6
   2a8d8:	str	r5, [r4, #40]	; 0x28
   2a8dc:	add	sp, sp, #52	; 0x34
   2a8e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a8e4:	mvn	r6, #0
   2a8e8:	mov	r0, r6
   2a8ec:	add	sp, sp, #52	; 0x34
   2a8f0:	pop	{r4, r5, r6, r7, r8, r9, pc}

0002a8f4 <flatcc_json_parser_table_as_root@@Base>:
   2a8f4:	push	{lr}		; (str lr, [sp, #-4]!)
   2a8f8:	pop	{lr}		; (ldr lr, [sp], #4)
   2a8fc:	b	2a820 <flatcc_json_parser_struct_as_root@@Base>
   2a900:	eor	r1, r1, #-2147483648	; 0x80000000
   2a904:	b	2a90c <flatcc_json_parser_table_as_root@@Base+0x18>
   2a908:	eor	r3, r3, #-2147483648	; 0x80000000
   2a90c:	push	{r4, r5, lr}
   2a910:	lsl	r4, r1, #1
   2a914:	lsl	r5, r3, #1
   2a918:	teq	r4, r5
   2a91c:	teqeq	r0, r2
   2a920:	orrsne	ip, r4, r0
   2a924:	orrsne	ip, r5, r2
   2a928:	mvnsne	ip, r4, asr #21
   2a92c:	mvnsne	ip, r5, asr #21
   2a930:	beq	2ab1c <flatcc_json_parser_table_as_root@@Base+0x228>
   2a934:	lsr	r4, r4, #21
   2a938:	rsbs	r5, r4, r5, lsr #21
   2a93c:	rsblt	r5, r5, #0
   2a940:	ble	2a960 <flatcc_json_parser_table_as_root@@Base+0x6c>
   2a944:	add	r4, r4, r5
   2a948:	eor	r2, r0, r2
   2a94c:	eor	r3, r1, r3
   2a950:	eor	r0, r2, r0
   2a954:	eor	r1, r3, r1
   2a958:	eor	r2, r0, r2
   2a95c:	eor	r3, r1, r3
   2a960:	cmp	r5, #54	; 0x36
   2a964:	pophi	{r4, r5, pc}
   2a968:	tst	r1, #-2147483648	; 0x80000000
   2a96c:	lsl	r1, r1, #12
   2a970:	mov	ip, #1048576	; 0x100000
   2a974:	orr	r1, ip, r1, lsr #12
   2a978:	beq	2a984 <flatcc_json_parser_table_as_root@@Base+0x90>
   2a97c:	rsbs	r0, r0, #0
   2a980:	rsc	r1, r1, #0
   2a984:	tst	r3, #-2147483648	; 0x80000000
   2a988:	lsl	r3, r3, #12
   2a98c:	orr	r3, ip, r3, lsr #12
   2a990:	beq	2a99c <flatcc_json_parser_table_as_root@@Base+0xa8>
   2a994:	rsbs	r2, r2, #0
   2a998:	rsc	r3, r3, #0
   2a99c:	teq	r4, r5
   2a9a0:	beq	2ab04 <flatcc_json_parser_table_as_root@@Base+0x210>
   2a9a4:	sub	r4, r4, #1
   2a9a8:	rsbs	lr, r5, #32
   2a9ac:	blt	2a9c8 <flatcc_json_parser_table_as_root@@Base+0xd4>
   2a9b0:	lsl	ip, r2, lr
   2a9b4:	adds	r0, r0, r2, lsr r5
   2a9b8:	adc	r1, r1, #0
   2a9bc:	adds	r0, r0, r3, lsl lr
   2a9c0:	adcs	r1, r1, r3, asr r5
   2a9c4:	b	2a9e4 <flatcc_json_parser_table_as_root@@Base+0xf0>
   2a9c8:	sub	r5, r5, #32
   2a9cc:	add	lr, lr, #32
   2a9d0:	cmp	r2, #1
   2a9d4:	lsl	ip, r3, lr
   2a9d8:	orrcs	ip, ip, #2
   2a9dc:	adds	r0, r0, r3, asr r5
   2a9e0:	adcs	r1, r1, r3, asr #31
   2a9e4:	and	r5, r1, #-2147483648	; 0x80000000
   2a9e8:	bpl	2a9f8 <flatcc_json_parser_table_as_root@@Base+0x104>
   2a9ec:	rsbs	ip, ip, #0
   2a9f0:	rscs	r0, r0, #0
   2a9f4:	rsc	r1, r1, #0
   2a9f8:	cmp	r1, #1048576	; 0x100000
   2a9fc:	bcc	2aa3c <flatcc_json_parser_table_as_root@@Base+0x148>
   2aa00:	cmp	r1, #2097152	; 0x200000
   2aa04:	bcc	2aa24 <flatcc_json_parser_table_as_root@@Base+0x130>
   2aa08:	lsrs	r1, r1, #1
   2aa0c:	rrxs	r0, r0
   2aa10:	rrx	ip, ip
   2aa14:	add	r4, r4, #1
   2aa18:	lsl	r2, r4, #21
   2aa1c:	cmn	r2, #4194304	; 0x400000
   2aa20:	bcs	2ab7c <flatcc_json_parser_table_as_root@@Base+0x288>
   2aa24:	cmp	ip, #-2147483648	; 0x80000000
   2aa28:	lsrseq	ip, r0, #1
   2aa2c:	adcs	r0, r0, #0
   2aa30:	adc	r1, r1, r4, lsl #20
   2aa34:	orr	r1, r1, r5
   2aa38:	pop	{r4, r5, pc}
   2aa3c:	lsls	ip, ip, #1
   2aa40:	adcs	r0, r0, r0
   2aa44:	adc	r1, r1, r1
   2aa48:	tst	r1, #1048576	; 0x100000
   2aa4c:	sub	r4, r4, #1
   2aa50:	bne	2aa24 <flatcc_json_parser_table_as_root@@Base+0x130>
   2aa54:	teq	r1, #0
   2aa58:	moveq	r1, r0
   2aa5c:	moveq	r0, #0
   2aa60:	clz	r3, r1
   2aa64:	addeq	r3, r3, #32
   2aa68:	sub	r3, r3, #11
   2aa6c:	subs	r2, r3, #32
   2aa70:	bge	2aa94 <flatcc_json_parser_table_as_root@@Base+0x1a0>
   2aa74:	adds	r2, r2, #12
   2aa78:	ble	2aa90 <flatcc_json_parser_table_as_root@@Base+0x19c>
   2aa7c:	add	ip, r2, #20
   2aa80:	rsb	r2, r2, #12
   2aa84:	lsl	r0, r1, ip
   2aa88:	lsr	r1, r1, r2
   2aa8c:	b	2aaa4 <flatcc_json_parser_table_as_root@@Base+0x1b0>
   2aa90:	add	r2, r2, #20
   2aa94:	rsble	ip, r2, #32
   2aa98:	lsl	r1, r1, r2
   2aa9c:	orrle	r1, r1, r0, lsr ip
   2aaa0:	lslle	r0, r0, r2
   2aaa4:	subs	r4, r4, r3
   2aaa8:	addge	r1, r1, r4, lsl #20
   2aaac:	orrge	r1, r1, r5
   2aab0:	popge	{r4, r5, pc}
   2aab4:	mvn	r4, r4
   2aab8:	subs	r4, r4, #31
   2aabc:	bge	2aaf8 <flatcc_json_parser_table_as_root@@Base+0x204>
   2aac0:	adds	r4, r4, #12
   2aac4:	bgt	2aae0 <flatcc_json_parser_table_as_root@@Base+0x1ec>
   2aac8:	add	r4, r4, #20
   2aacc:	rsb	r2, r4, #32
   2aad0:	lsr	r0, r0, r4
   2aad4:	orr	r0, r0, r1, lsl r2
   2aad8:	orr	r1, r5, r1, lsr r4
   2aadc:	pop	{r4, r5, pc}
   2aae0:	rsb	r4, r4, #12
   2aae4:	rsb	r2, r4, #32
   2aae8:	lsr	r0, r0, r2
   2aaec:	orr	r0, r0, r1, lsl r4
   2aaf0:	mov	r1, r5
   2aaf4:	pop	{r4, r5, pc}
   2aaf8:	lsr	r0, r1, r4
   2aafc:	mov	r1, r5
   2ab00:	pop	{r4, r5, pc}
   2ab04:	teq	r4, #0
   2ab08:	eor	r3, r3, #1048576	; 0x100000
   2ab0c:	eoreq	r1, r1, #1048576	; 0x100000
   2ab10:	addeq	r4, r4, #1
   2ab14:	subne	r5, r5, #1
   2ab18:	b	2a9a4 <flatcc_json_parser_table_as_root@@Base+0xb0>
   2ab1c:	mvns	ip, r4, asr #21
   2ab20:	mvnsne	ip, r5, asr #21
   2ab24:	beq	2ab8c <flatcc_json_parser_table_as_root@@Base+0x298>
   2ab28:	teq	r4, r5
   2ab2c:	teqeq	r0, r2
   2ab30:	beq	2ab44 <flatcc_json_parser_table_as_root@@Base+0x250>
   2ab34:	orrs	ip, r4, r0
   2ab38:	moveq	r1, r3
   2ab3c:	moveq	r0, r2
   2ab40:	pop	{r4, r5, pc}
   2ab44:	teq	r1, r3
   2ab48:	movne	r1, #0
   2ab4c:	movne	r0, #0
   2ab50:	popne	{r4, r5, pc}
   2ab54:	lsrs	ip, r4, #21
   2ab58:	bne	2ab6c <flatcc_json_parser_table_as_root@@Base+0x278>
   2ab5c:	lsls	r0, r0, #1
   2ab60:	adcs	r1, r1, r1
   2ab64:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2ab68:	pop	{r4, r5, pc}
   2ab6c:	adds	r4, r4, #4194304	; 0x400000
   2ab70:	addcc	r1, r1, #1048576	; 0x100000
   2ab74:	popcc	{r4, r5, pc}
   2ab78:	and	r5, r1, #-2147483648	; 0x80000000
   2ab7c:	orr	r1, r5, #2130706432	; 0x7f000000
   2ab80:	orr	r1, r1, #15728640	; 0xf00000
   2ab84:	mov	r0, #0
   2ab88:	pop	{r4, r5, pc}
   2ab8c:	mvns	ip, r4, asr #21
   2ab90:	movne	r1, r3
   2ab94:	movne	r0, r2
   2ab98:	mvnseq	ip, r5, asr #21
   2ab9c:	movne	r3, r1
   2aba0:	movne	r2, r0
   2aba4:	orrs	r4, r0, r1, lsl #12
   2aba8:	orrseq	r5, r2, r3, lsl #12
   2abac:	teqeq	r1, r3
   2abb0:	orrne	r1, r1, #524288	; 0x80000
   2abb4:	pop	{r4, r5, pc}
   2abb8:	teq	r0, #0
   2abbc:	moveq	r1, #0
   2abc0:	bxeq	lr
   2abc4:	push	{r4, r5, lr}
   2abc8:	mov	r4, #1024	; 0x400
   2abcc:	add	r4, r4, #50	; 0x32
   2abd0:	mov	r5, #0
   2abd4:	mov	r1, #0
   2abd8:	b	2aa54 <flatcc_json_parser_table_as_root@@Base+0x160>
   2abdc:	teq	r0, #0
   2abe0:	moveq	r1, #0
   2abe4:	bxeq	lr
   2abe8:	push	{r4, r5, lr}
   2abec:	mov	r4, #1024	; 0x400
   2abf0:	add	r4, r4, #50	; 0x32
   2abf4:	ands	r5, r0, #-2147483648	; 0x80000000
   2abf8:	rsbmi	r0, r0, #0
   2abfc:	mov	r1, #0
   2ac00:	b	2aa54 <flatcc_json_parser_table_as_root@@Base+0x160>
   2ac04:	lsls	r2, r0, #1
   2ac08:	asr	r1, r2, #3
   2ac0c:	rrx	r1, r1
   2ac10:	lsl	r0, r2, #28
   2ac14:	andsne	r3, r2, #-16777216	; 0xff000000
   2ac18:	teqne	r3, #-16777216	; 0xff000000
   2ac1c:	eorne	r1, r1, #939524096	; 0x38000000
   2ac20:	bxne	lr
   2ac24:	teq	r2, #0
   2ac28:	teqne	r3, #-16777216	; 0xff000000
   2ac2c:	bxeq	lr
   2ac30:	push	{r4, r5, lr}
   2ac34:	mov	r4, #896	; 0x380
   2ac38:	and	r5, r1, #-2147483648	; 0x80000000
   2ac3c:	bic	r1, r1, #-2147483648	; 0x80000000
   2ac40:	b	2aa54 <flatcc_json_parser_table_as_root@@Base+0x160>
   2ac44:	orrs	r2, r0, r1
   2ac48:	bxeq	lr
   2ac4c:	push	{r4, r5, lr}
   2ac50:	mov	r5, #0
   2ac54:	b	2ac74 <flatcc_json_parser_table_as_root@@Base+0x380>
   2ac58:	orrs	r2, r0, r1
   2ac5c:	bxeq	lr
   2ac60:	push	{r4, r5, lr}
   2ac64:	ands	r5, r1, #-2147483648	; 0x80000000
   2ac68:	bpl	2ac74 <flatcc_json_parser_table_as_root@@Base+0x380>
   2ac6c:	rsbs	r0, r0, #0
   2ac70:	rsc	r1, r1, #0
   2ac74:	mov	r4, #1024	; 0x400
   2ac78:	add	r4, r4, #50	; 0x32
   2ac7c:	lsrs	ip, r1, #22
   2ac80:	beq	2a9f8 <flatcc_json_parser_table_as_root@@Base+0x104>
   2ac84:	mov	r2, #3
   2ac88:	lsrs	ip, ip, #3
   2ac8c:	addne	r2, r2, #3
   2ac90:	lsrs	ip, ip, #3
   2ac94:	addne	r2, r2, #3
   2ac98:	add	r2, r2, ip, lsr #3
   2ac9c:	rsb	r3, r2, #32
   2aca0:	lsl	ip, r0, r3
   2aca4:	lsr	r0, r0, r2
   2aca8:	orr	r0, r0, r1, lsl r3
   2acac:	lsr	r1, r1, r2
   2acb0:	add	r4, r4, r2
   2acb4:	b	2a9f8 <flatcc_json_parser_table_as_root@@Base+0x104>
   2acb8:	eor	r0, r0, #-2147483648	; 0x80000000
   2acbc:	b	2acc4 <flatcc_json_parser_table_as_root@@Base+0x3d0>
   2acc0:	eor	r1, r1, #-2147483648	; 0x80000000
   2acc4:	lsls	r2, r0, #1
   2acc8:	lslsne	r3, r1, #1
   2accc:	teqne	r2, r3
   2acd0:	mvnsne	ip, r2, asr #24
   2acd4:	mvnsne	ip, r3, asr #24
   2acd8:	beq	2add0 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   2acdc:	lsr	r2, r2, #24
   2ace0:	rsbs	r3, r2, r3, lsr #24
   2ace4:	addgt	r2, r2, r3
   2ace8:	eorgt	r1, r0, r1
   2acec:	eorgt	r0, r1, r0
   2acf0:	eorgt	r1, r0, r1
   2acf4:	rsblt	r3, r3, #0
   2acf8:	cmp	r3, #25
   2acfc:	bxhi	lr
   2ad00:	tst	r0, #-2147483648	; 0x80000000
   2ad04:	orr	r0, r0, #8388608	; 0x800000
   2ad08:	bic	r0, r0, #-16777216	; 0xff000000
   2ad0c:	rsbne	r0, r0, #0
   2ad10:	tst	r1, #-2147483648	; 0x80000000
   2ad14:	orr	r1, r1, #8388608	; 0x800000
   2ad18:	bic	r1, r1, #-16777216	; 0xff000000
   2ad1c:	rsbne	r1, r1, #0
   2ad20:	teq	r2, r3
   2ad24:	beq	2adb8 <flatcc_json_parser_table_as_root@@Base+0x4c4>
   2ad28:	sub	r2, r2, #1
   2ad2c:	adds	r0, r0, r1, asr r3
   2ad30:	rsb	r3, r3, #32
   2ad34:	lsl	r1, r1, r3
   2ad38:	and	r3, r0, #-2147483648	; 0x80000000
   2ad3c:	bpl	2ad48 <flatcc_json_parser_table_as_root@@Base+0x454>
   2ad40:	rsbs	r1, r1, #0
   2ad44:	rsc	r0, r0, #0
   2ad48:	cmp	r0, #8388608	; 0x800000
   2ad4c:	bcc	2ad80 <flatcc_json_parser_table_as_root@@Base+0x48c>
   2ad50:	cmp	r0, #16777216	; 0x1000000
   2ad54:	bcc	2ad6c <flatcc_json_parser_table_as_root@@Base+0x478>
   2ad58:	lsrs	r0, r0, #1
   2ad5c:	rrx	r1, r1
   2ad60:	add	r2, r2, #1
   2ad64:	cmp	r2, #254	; 0xfe
   2ad68:	bcs	2ae24 <flatcc_json_parser_table_as_root@@Base+0x530>
   2ad6c:	cmp	r1, #-2147483648	; 0x80000000
   2ad70:	adc	r0, r0, r2, lsl #23
   2ad74:	biceq	r0, r0, #1
   2ad78:	orr	r0, r0, r3
   2ad7c:	bx	lr
   2ad80:	lsls	r1, r1, #1
   2ad84:	adc	r0, r0, r0
   2ad88:	tst	r0, #8388608	; 0x800000
   2ad8c:	sub	r2, r2, #1
   2ad90:	bne	2ad6c <flatcc_json_parser_table_as_root@@Base+0x478>
   2ad94:	clz	ip, r0
   2ad98:	sub	ip, ip, #8
   2ad9c:	subs	r2, r2, ip
   2ada0:	lsl	r0, r0, ip
   2ada4:	addge	r0, r0, r2, lsl #23
   2ada8:	rsblt	r2, r2, #0
   2adac:	orrge	r0, r0, r3
   2adb0:	orrlt	r0, r3, r0, lsr r2
   2adb4:	bx	lr
   2adb8:	teq	r2, #0
   2adbc:	eor	r1, r1, #8388608	; 0x800000
   2adc0:	eoreq	r0, r0, #8388608	; 0x800000
   2adc4:	addeq	r2, r2, #1
   2adc8:	subne	r3, r3, #1
   2adcc:	b	2ad28 <flatcc_json_parser_table_as_root@@Base+0x434>
   2add0:	lsl	r3, r1, #1
   2add4:	mvns	ip, r2, asr #24
   2add8:	mvnsne	ip, r3, asr #24
   2addc:	beq	2ae30 <flatcc_json_parser_table_as_root@@Base+0x53c>
   2ade0:	teq	r2, r3
   2ade4:	beq	2adf4 <flatcc_json_parser_table_as_root@@Base+0x500>
   2ade8:	teq	r2, #0
   2adec:	moveq	r0, r1
   2adf0:	bx	lr
   2adf4:	teq	r0, r1
   2adf8:	movne	r0, #0
   2adfc:	bxne	lr
   2ae00:	tst	r2, #-16777216	; 0xff000000
   2ae04:	bne	2ae14 <flatcc_json_parser_table_as_root@@Base+0x520>
   2ae08:	lsls	r0, r0, #1
   2ae0c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2ae10:	bx	lr
   2ae14:	adds	r2, r2, #33554432	; 0x2000000
   2ae18:	addcc	r0, r0, #8388608	; 0x800000
   2ae1c:	bxcc	lr
   2ae20:	and	r3, r0, #-2147483648	; 0x80000000
   2ae24:	orr	r0, r3, #2130706432	; 0x7f000000
   2ae28:	orr	r0, r0, #8388608	; 0x800000
   2ae2c:	bx	lr
   2ae30:	mvns	r2, r2, asr #24
   2ae34:	movne	r0, r1
   2ae38:	mvnseq	r3, r3, asr #24
   2ae3c:	movne	r1, r0
   2ae40:	lsls	r2, r0, #9
   2ae44:	lslseq	r3, r1, #9
   2ae48:	teqeq	r0, r1
   2ae4c:	orrne	r0, r0, #4194304	; 0x400000
   2ae50:	bx	lr
   2ae54:	mov	r3, #0
   2ae58:	b	2ae64 <flatcc_json_parser_table_as_root@@Base+0x570>
   2ae5c:	ands	r3, r0, #-2147483648	; 0x80000000
   2ae60:	rsbmi	r0, r0, #0
   2ae64:	movs	ip, r0
   2ae68:	bxeq	lr
   2ae6c:	orr	r3, r3, #1258291200	; 0x4b000000
   2ae70:	mov	r1, r0
   2ae74:	mov	r0, #0
   2ae78:	b	2aebc <flatcc_json_parser_table_as_root@@Base+0x5c8>
   2ae7c:	orrs	r2, r0, r1
   2ae80:	bxeq	lr
   2ae84:	mov	r3, #0
   2ae88:	b	2aea4 <flatcc_json_parser_table_as_root@@Base+0x5b0>
   2ae8c:	orrs	r2, r0, r1
   2ae90:	bxeq	lr
   2ae94:	ands	r3, r1, #-2147483648	; 0x80000000
   2ae98:	bpl	2aea4 <flatcc_json_parser_table_as_root@@Base+0x5b0>
   2ae9c:	rsbs	r0, r0, #0
   2aea0:	rsc	r1, r1, #0
   2aea4:	movs	ip, r1
   2aea8:	moveq	ip, r0
   2aeac:	moveq	r1, r0
   2aeb0:	moveq	r0, #0
   2aeb4:	orr	r3, r3, #1526726656	; 0x5b000000
   2aeb8:	subeq	r3, r3, #268435456	; 0x10000000
   2aebc:	sub	r3, r3, #8388608	; 0x800000
   2aec0:	clz	r2, ip
   2aec4:	subs	r2, r2, #8
   2aec8:	sub	r3, r3, r2, lsl #23
   2aecc:	blt	2aeec <flatcc_json_parser_table_as_root@@Base+0x5f8>
   2aed0:	add	r3, r3, r1, lsl r2
   2aed4:	lsl	ip, r0, r2
   2aed8:	rsb	r2, r2, #32
   2aedc:	cmp	ip, #-2147483648	; 0x80000000
   2aee0:	adc	r0, r3, r0, lsr r2
   2aee4:	biceq	r0, r0, #1
   2aee8:	bx	lr
   2aeec:	add	r2, r2, #32
   2aef0:	lsl	ip, r1, r2
   2aef4:	rsb	r2, r2, #32
   2aef8:	orrs	r0, r0, ip, lsl #1
   2aefc:	adc	r0, r3, r1, lsr r2
   2af00:	biceq	r0, r0, ip, lsr #31
   2af04:	bx	lr

0002af08 <__libc_csu_init@@Base>:
   2af08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2af0c:	mov	r7, r0
   2af10:	ldr	r6, [pc, #72]	; 2af60 <__libc_csu_init@@Base+0x58>
   2af14:	ldr	r5, [pc, #72]	; 2af64 <__libc_csu_init@@Base+0x5c>
   2af18:	add	r6, pc, r6
   2af1c:	add	r5, pc, r5
   2af20:	sub	r6, r6, r5
   2af24:	mov	r8, r1
   2af28:	mov	r9, r2
   2af2c:	bl	1256c <fopen@plt-0x20>
   2af30:	asrs	r6, r6, #2
   2af34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af38:	mov	r4, #0
   2af3c:	add	r4, r4, #1
   2af40:	ldr	r3, [r5], #4
   2af44:	mov	r2, r9
   2af48:	mov	r1, r8
   2af4c:	mov	r0, r7
   2af50:	blx	r3
   2af54:	cmp	r6, r4
   2af58:	bne	2af3c <__libc_csu_init@@Base+0x34>
   2af5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af60:	strdeq	r1, [r1], -r0
   2af64:	andeq	r1, r1, r8, ror #31

0002af68 <__libc_csu_fini@@Base>:
   2af68:	bx	lr

Disassembly of section .fini:

0002af6c <.fini>:
   2af6c:	push	{r3, lr}
   2af70:	pop	{r3, pc}
