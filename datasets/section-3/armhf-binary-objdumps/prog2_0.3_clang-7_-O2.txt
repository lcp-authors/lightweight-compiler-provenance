
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

0001067c <.init>:
   1067c:	push	{r3, lr}
   10680:	bl	10720 <_start@@Base+0x3c>
   10684:	pop	{r3, pc}

Disassembly of section .plt:

00010688 <printf@plt-0x14>:
   10688:	push	{lr}		; (str lr, [sp, #-4]!)
   1068c:	ldr	lr, [pc, #4]	; 10698 <printf@plt-0x4>
   10690:	add	lr, pc, lr
   10694:	ldr	pc, [lr, #8]!
   10698:	andeq	r0, r1, r8, ror #18

0001069c <printf@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2408]!	; 0x968

000106a8 <__libc_start_main@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2400]!	; 0x960

000106b4 <__gmon_start__@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2392]!	; 0x958

000106c0 <putchar@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2384]!	; 0x950

000106cc <__isoc99_scanf@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2376]!	; 0x948

000106d8 <abort@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2368]!	; 0x940

Disassembly of section .text:

000106e4 <_start@@Base>:
   106e4:	mov	fp, #0
   106e8:	mov	lr, #0
   106ec:	pop	{r1}		; (ldr r1, [sp], #4)
   106f0:	mov	r2, sp
   106f4:	push	{r2}		; (str r2, [sp, #-4]!)
   106f8:	push	{r0}		; (str r0, [sp, #-4]!)
   106fc:	ldr	ip, [pc, #16]	; 10714 <_start@@Base+0x30>
   10700:	push	{ip}		; (str ip, [sp, #-4]!)
   10704:	ldr	r0, [pc, #12]	; 10718 <_start@@Base+0x34>
   10708:	ldr	r3, [pc, #12]	; 1071c <_start@@Base+0x38>
   1070c:	bl	106a8 <__libc_start_main@plt>
   10710:	bl	106d8 <abort@plt>
   10714:	andeq	r0, r1, r8, lsr #27
   10718:	andeq	r0, r1, r8, ror #18
   1071c:	andeq	r0, r1, r8, asr #26
   10720:	ldr	r3, [pc, #20]	; 1073c <_start@@Base+0x58>
   10724:	ldr	r2, [pc, #20]	; 10740 <_start@@Base+0x5c>
   10728:	add	r3, pc, r3
   1072c:	ldr	r2, [r3, r2]
   10730:	cmp	r2, #0
   10734:	bxeq	lr
   10738:	b	106b4 <__gmon_start__@plt>
   1073c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10740:	andeq	r0, r0, r4, lsr #32
   10744:	ldr	r0, [pc, #24]	; 10764 <_start@@Base+0x80>
   10748:	ldr	r3, [pc, #24]	; 10768 <_start@@Base+0x84>
   1074c:	cmp	r3, r0
   10750:	bxeq	lr
   10754:	ldr	r3, [pc, #16]	; 1076c <_start@@Base+0x88>
   10758:	cmp	r3, #0
   1075c:	bxeq	lr
   10760:	bx	r3
   10764:	andeq	r1, r2, r0, lsr r0
   10768:	andeq	r1, r2, r0, lsr r0
   1076c:	andeq	r0, r0, r0
   10770:	ldr	r0, [pc, #36]	; 1079c <_start@@Base+0xb8>
   10774:	ldr	r1, [pc, #36]	; 107a0 <_start@@Base+0xbc>
   10778:	sub	r1, r1, r0
   1077c:	asr	r1, r1, #2
   10780:	add	r1, r1, r1, lsr #31
   10784:	asrs	r1, r1, #1
   10788:	bxeq	lr
   1078c:	ldr	r3, [pc, #16]	; 107a4 <_start@@Base+0xc0>
   10790:	cmp	r3, #0
   10794:	bxeq	lr
   10798:	bx	r3
   1079c:	andeq	r1, r2, r0, lsr r0
   107a0:	andeq	r1, r2, r0, lsr r0
   107a4:	andeq	r0, r0, r0
   107a8:	push	{r4, lr}
   107ac:	ldr	r4, [pc, #24]	; 107cc <_start@@Base+0xe8>
   107b0:	ldrb	r3, [r4]
   107b4:	cmp	r3, #0
   107b8:	popne	{r4, pc}
   107bc:	bl	10744 <_start@@Base+0x60>
   107c0:	mov	r3, #1
   107c4:	strb	r3, [r4]
   107c8:	pop	{r4, pc}
   107cc:	andeq	r1, r2, r0, lsr r0
   107d0:	b	10770 <_start@@Base+0x8c>

000107d4 <avg@@Base>:
   107d4:	vldr	s0, [pc, #88]	; 10834 <avg@@Base+0x60>
   107d8:	vldr	s2, [r0]
   107dc:	vldr	s4, [r0, #4]
   107e0:	vldr	s6, [r0, #8]
   107e4:	vldr	s8, [r0, #12]
   107e8:	vldr	s10, [r0, #16]
   107ec:	vldr	s12, [r0, #20]
   107f0:	vldr	s14, [r0, #24]
   107f4:	vldr	s1, [r0, #28]
   107f8:	vadd.f32	s0, s2, s0
   107fc:	vldr	s2, [r0, #32]
   10800:	vadd.f32	s0, s0, s4
   10804:	vldr	s4, [r0, #36]	; 0x24
   10808:	vadd.f32	s0, s0, s6
   1080c:	vadd.f32	s0, s0, s8
   10810:	vadd.f32	s0, s0, s10
   10814:	vadd.f32	s0, s0, s12
   10818:	vadd.f32	s0, s0, s14
   1081c:	vadd.f32	s0, s0, s1
   10820:	vadd.f32	s0, s0, s2
   10824:	vmov.f32	s2, #36	; 0x41200000  10.0
   10828:	vadd.f32	s0, s0, s4
   1082c:	vdiv.f32	s0, s0, s2
   10830:	bx	lr
   10834:	andeq	r0, r0, r0

00010838 <max@@Base>:
   10838:	vldr	s0, [r0]
   1083c:	vldr	s2, [r0, #4]
   10840:	vldr	s4, [r0, #8]
   10844:	vldr	s6, [r0, #12]
   10848:	vldr	s8, [r0, #16]
   1084c:	vldr	s10, [r0, #20]
   10850:	vldr	s12, [r0, #24]
   10854:	vldr	s14, [r0, #28]
   10858:	vcmpe.f32	s2, s0
   1085c:	vmrs	APSR_nzcv, fpscr
   10860:	vselgt.f32	s0, s2, s0
   10864:	vldr	s2, [r0, #32]
   10868:	vcmpe.f32	s4, s0
   1086c:	vmrs	APSR_nzcv, fpscr
   10870:	vselgt.f32	s0, s4, s0
   10874:	vldr	s4, [r0, #36]	; 0x24
   10878:	vcmpe.f32	s6, s0
   1087c:	vmrs	APSR_nzcv, fpscr
   10880:	vselgt.f32	s0, s6, s0
   10884:	vcmpe.f32	s8, s0
   10888:	vmrs	APSR_nzcv, fpscr
   1088c:	vselgt.f32	s0, s8, s0
   10890:	vcmpe.f32	s10, s0
   10894:	vmrs	APSR_nzcv, fpscr
   10898:	vselgt.f32	s0, s10, s0
   1089c:	vcmpe.f32	s12, s0
   108a0:	vmrs	APSR_nzcv, fpscr
   108a4:	vselgt.f32	s0, s12, s0
   108a8:	vcmpe.f32	s14, s0
   108ac:	vmrs	APSR_nzcv, fpscr
   108b0:	vselgt.f32	s0, s14, s0
   108b4:	vcmpe.f32	s2, s0
   108b8:	vmrs	APSR_nzcv, fpscr
   108bc:	vselgt.f32	s0, s2, s0
   108c0:	vcmpe.f32	s4, s0
   108c4:	vmrs	APSR_nzcv, fpscr
   108c8:	vselgt.f32	s0, s4, s0
   108cc:	bx	lr

000108d0 <min@@Base>:
   108d0:	vldr	s0, [r0]
   108d4:	vldr	s2, [r0, #4]
   108d8:	vldr	s4, [r0, #8]
   108dc:	vldr	s6, [r0, #12]
   108e0:	vldr	s8, [r0, #16]
   108e4:	vldr	s10, [r0, #20]
   108e8:	vldr	s12, [r0, #24]
   108ec:	vldr	s14, [r0, #28]
   108f0:	vcmpe.f32	s0, s2
   108f4:	vmrs	APSR_nzcv, fpscr
   108f8:	vselgt.f32	s0, s2, s0
   108fc:	vldr	s2, [r0, #32]
   10900:	vcmpe.f32	s0, s4
   10904:	vmrs	APSR_nzcv, fpscr
   10908:	vselgt.f32	s0, s4, s0
   1090c:	vldr	s4, [r0, #36]	; 0x24
   10910:	vcmpe.f32	s0, s6
   10914:	vmrs	APSR_nzcv, fpscr
   10918:	vselgt.f32	s0, s6, s0
   1091c:	vcmpe.f32	s0, s8
   10920:	vmrs	APSR_nzcv, fpscr
   10924:	vselgt.f32	s0, s8, s0
   10928:	vcmpe.f32	s0, s10
   1092c:	vmrs	APSR_nzcv, fpscr
   10930:	vselgt.f32	s0, s10, s0
   10934:	vcmpe.f32	s0, s12
   10938:	vmrs	APSR_nzcv, fpscr
   1093c:	vselgt.f32	s0, s12, s0
   10940:	vcmpe.f32	s0, s14
   10944:	vmrs	APSR_nzcv, fpscr
   10948:	vselgt.f32	s0, s14, s0
   1094c:	vcmpe.f32	s0, s2
   10950:	vmrs	APSR_nzcv, fpscr
   10954:	vselgt.f32	s0, s2, s0
   10958:	vcmpe.f32	s0, s4
   1095c:	vmrs	APSR_nzcv, fpscr
   10960:	vselgt.f32	s0, s4, s0
   10964:	bx	lr

00010968 <main@@Base>:
   10968:	push	{r4, r5, r6, sl, fp, lr}
   1096c:	add	fp, sp, #16
   10970:	sub	sp, sp, #40	; 0x28
   10974:	ldr	r4, [pc, #944]	; 10d2c <main@@Base+0x3c4>
   10978:	mov	r1, #1
   1097c:	add	r4, pc, r4
   10980:	mov	r0, r4
   10984:	bl	1069c <printf@plt>
   10988:	ldr	r5, [pc, #928]	; 10d30 <main@@Base+0x3c8>
   1098c:	mov	r6, sp
   10990:	mov	r1, r6
   10994:	add	r5, pc, r5
   10998:	mov	r0, r5
   1099c:	bl	106cc <__isoc99_scanf@plt>
   109a0:	mov	r0, r4
   109a4:	mov	r1, #2
   109a8:	bl	1069c <printf@plt>
   109ac:	add	r1, r6, #4
   109b0:	mov	r0, r5
   109b4:	bl	106cc <__isoc99_scanf@plt>
   109b8:	mov	r0, r4
   109bc:	mov	r1, #3
   109c0:	bl	1069c <printf@plt>
   109c4:	add	r1, r6, #8
   109c8:	mov	r0, r5
   109cc:	bl	106cc <__isoc99_scanf@plt>
   109d0:	mov	r0, r4
   109d4:	mov	r1, #4
   109d8:	bl	1069c <printf@plt>
   109dc:	add	r1, r6, #12
   109e0:	mov	r0, r5
   109e4:	bl	106cc <__isoc99_scanf@plt>
   109e8:	mov	r0, r4
   109ec:	mov	r1, #5
   109f0:	bl	1069c <printf@plt>
   109f4:	add	r1, r6, #16
   109f8:	mov	r0, r5
   109fc:	bl	106cc <__isoc99_scanf@plt>
   10a00:	mov	r0, r4
   10a04:	mov	r1, #6
   10a08:	bl	1069c <printf@plt>
   10a0c:	add	r1, r6, #20
   10a10:	mov	r0, r5
   10a14:	bl	106cc <__isoc99_scanf@plt>
   10a18:	mov	r0, r4
   10a1c:	mov	r1, #7
   10a20:	bl	1069c <printf@plt>
   10a24:	add	r1, r6, #24
   10a28:	mov	r0, r5
   10a2c:	bl	106cc <__isoc99_scanf@plt>
   10a30:	mov	r0, r4
   10a34:	mov	r1, #8
   10a38:	bl	1069c <printf@plt>
   10a3c:	add	r1, r6, #28
   10a40:	mov	r0, r5
   10a44:	bl	106cc <__isoc99_scanf@plt>
   10a48:	mov	r0, r4
   10a4c:	mov	r1, #9
   10a50:	bl	1069c <printf@plt>
   10a54:	add	r1, r6, #32
   10a58:	mov	r0, r5
   10a5c:	bl	106cc <__isoc99_scanf@plt>
   10a60:	mov	r0, r4
   10a64:	mov	r1, #10
   10a68:	bl	1069c <printf@plt>
   10a6c:	add	r1, r6, #36	; 0x24
   10a70:	mov	r0, r5
   10a74:	bl	106cc <__isoc99_scanf@plt>
   10a78:	vldr	s0, [pc, #680]	; 10d28 <main@@Base+0x3c0>
   10a7c:	vldr	s2, [sp]
   10a80:	vldr	s4, [sp, #4]
   10a84:	vldr	s6, [sp, #8]
   10a88:	vldr	s8, [sp, #12]
   10a8c:	vadd.f32	s0, s2, s0
   10a90:	vldr	s2, [sp, #16]
   10a94:	vadd.f32	s0, s0, s4
   10a98:	vldr	s4, [sp, #20]
   10a9c:	vadd.f32	s0, s0, s6
   10aa0:	vldr	s6, [sp, #24]
   10aa4:	vadd.f32	s0, s0, s8
   10aa8:	vadd.f32	s0, s0, s2
   10aac:	vldr	s2, [sp, #28]
   10ab0:	vadd.f32	s0, s0, s4
   10ab4:	vldr	s4, [sp, #32]
   10ab8:	vadd.f32	s0, s0, s6
   10abc:	vldr	s6, [sp, #36]	; 0x24
   10ac0:	ldr	r0, [pc, #620]	; 10d34 <main@@Base+0x3cc>
   10ac4:	vadd.f32	s0, s0, s2
   10ac8:	vmov.f32	s2, #36	; 0x41200000  10.0
   10acc:	vadd.f32	s0, s0, s4
   10ad0:	vadd.f32	s0, s0, s6
   10ad4:	add	r0, pc, r0
   10ad8:	vdiv.f32	s0, s0, s2
   10adc:	vcvt.f64.f32	d16, s0
   10ae0:	vmov	r2, r3, d16
   10ae4:	bl	1069c <printf@plt>
   10ae8:	vldr	s0, [sp]
   10aec:	vldr	s2, [sp, #4]
   10af0:	vldr	s4, [sp, #8]
   10af4:	vldr	s6, [sp, #12]
   10af8:	vldr	s8, [sp, #32]
   10afc:	vcmpe.f32	s2, s0
   10b00:	vmrs	APSR_nzcv, fpscr
   10b04:	vselgt.f32	s0, s2, s0
   10b08:	vldr	s2, [sp, #16]
   10b0c:	vcmpe.f32	s4, s0
   10b10:	vmrs	APSR_nzcv, fpscr
   10b14:	vselgt.f32	s0, s4, s0
   10b18:	vldr	s4, [sp, #20]
   10b1c:	vcmpe.f32	s6, s0
   10b20:	vmrs	APSR_nzcv, fpscr
   10b24:	vselgt.f32	s0, s6, s0
   10b28:	vldr	s6, [sp, #24]
   10b2c:	vcmpe.f32	s2, s0
   10b30:	vmrs	APSR_nzcv, fpscr
   10b34:	vselgt.f32	s0, s2, s0
   10b38:	vldr	s2, [sp, #28]
   10b3c:	vcmpe.f32	s4, s0
   10b40:	vmrs	APSR_nzcv, fpscr
   10b44:	vselgt.f32	s0, s4, s0
   10b48:	vldr	s4, [sp, #36]	; 0x24
   10b4c:	ldr	r0, [pc, #484]	; 10d38 <main@@Base+0x3d0>
   10b50:	vcmpe.f32	s6, s0
   10b54:	vmrs	APSR_nzcv, fpscr
   10b58:	vselgt.f32	s0, s6, s0
   10b5c:	vcmpe.f32	s2, s0
   10b60:	add	r0, pc, r0
   10b64:	vmrs	APSR_nzcv, fpscr
   10b68:	vselgt.f32	s0, s2, s0
   10b6c:	vcmpe.f32	s8, s0
   10b70:	vmrs	APSR_nzcv, fpscr
   10b74:	vselgt.f32	s0, s8, s0
   10b78:	vcmpe.f32	s4, s0
   10b7c:	vmrs	APSR_nzcv, fpscr
   10b80:	vselgt.f32	s0, s4, s0
   10b84:	vcvt.f64.f32	d16, s0
   10b88:	vmov	r2, r3, d16
   10b8c:	bl	1069c <printf@plt>
   10b90:	vldr	s0, [sp]
   10b94:	vldr	s2, [sp, #4]
   10b98:	vldr	s4, [sp, #8]
   10b9c:	vldr	s6, [sp, #12]
   10ba0:	vldr	s8, [sp, #32]
   10ba4:	vcmpe.f32	s0, s2
   10ba8:	vmrs	APSR_nzcv, fpscr
   10bac:	vselgt.f32	s0, s2, s0
   10bb0:	vldr	s2, [sp, #16]
   10bb4:	vcmpe.f32	s0, s4
   10bb8:	vmrs	APSR_nzcv, fpscr
   10bbc:	vselgt.f32	s0, s4, s0
   10bc0:	vldr	s4, [sp, #20]
   10bc4:	vcmpe.f32	s0, s6
   10bc8:	vmrs	APSR_nzcv, fpscr
   10bcc:	vselgt.f32	s0, s6, s0
   10bd0:	vldr	s6, [sp, #24]
   10bd4:	vcmpe.f32	s0, s2
   10bd8:	vmrs	APSR_nzcv, fpscr
   10bdc:	vselgt.f32	s0, s2, s0
   10be0:	vldr	s2, [sp, #28]
   10be4:	vcmpe.f32	s0, s4
   10be8:	vmrs	APSR_nzcv, fpscr
   10bec:	vselgt.f32	s0, s4, s0
   10bf0:	vldr	s4, [sp, #36]	; 0x24
   10bf4:	ldr	r0, [pc, #320]	; 10d3c <main@@Base+0x3d4>
   10bf8:	vcmpe.f32	s0, s6
   10bfc:	vmrs	APSR_nzcv, fpscr
   10c00:	vselgt.f32	s0, s6, s0
   10c04:	vcmpe.f32	s0, s2
   10c08:	add	r0, pc, r0
   10c0c:	vmrs	APSR_nzcv, fpscr
   10c10:	vselgt.f32	s0, s2, s0
   10c14:	vcmpe.f32	s0, s8
   10c18:	vmrs	APSR_nzcv, fpscr
   10c1c:	vselgt.f32	s0, s8, s0
   10c20:	vcmpe.f32	s0, s4
   10c24:	vmrs	APSR_nzcv, fpscr
   10c28:	vselgt.f32	s0, s4, s0
   10c2c:	vcvt.f64.f32	d16, s0
   10c30:	vmov	r2, r3, d16
   10c34:	bl	1069c <printf@plt>
   10c38:	ldr	r0, [pc, #256]	; 10d40 <main@@Base+0x3d8>
   10c3c:	add	r0, pc, r0
   10c40:	bl	1069c <printf@plt>
   10c44:	vldr	s0, [sp]
   10c48:	ldr	r4, [pc, #244]	; 10d44 <main@@Base+0x3dc>
   10c4c:	vcvt.f64.f32	d16, s0
   10c50:	add	r4, pc, r4
   10c54:	vmov	r2, r3, d16
   10c58:	mov	r0, r4
   10c5c:	bl	1069c <printf@plt>
   10c60:	vldr	s0, [sp, #4]
   10c64:	mov	r0, r4
   10c68:	vcvt.f64.f32	d16, s0
   10c6c:	vmov	r2, r3, d16
   10c70:	bl	1069c <printf@plt>
   10c74:	vldr	s0, [sp, #8]
   10c78:	mov	r0, r4
   10c7c:	vcvt.f64.f32	d16, s0
   10c80:	vmov	r2, r3, d16
   10c84:	bl	1069c <printf@plt>
   10c88:	vldr	s0, [sp, #12]
   10c8c:	mov	r0, r4
   10c90:	vcvt.f64.f32	d16, s0
   10c94:	vmov	r2, r3, d16
   10c98:	bl	1069c <printf@plt>
   10c9c:	vldr	s0, [sp, #16]
   10ca0:	mov	r0, r4
   10ca4:	vcvt.f64.f32	d16, s0
   10ca8:	vmov	r2, r3, d16
   10cac:	bl	1069c <printf@plt>
   10cb0:	vldr	s0, [sp, #20]
   10cb4:	mov	r0, r4
   10cb8:	vcvt.f64.f32	d16, s0
   10cbc:	vmov	r2, r3, d16
   10cc0:	bl	1069c <printf@plt>
   10cc4:	vldr	s0, [sp, #24]
   10cc8:	mov	r0, r4
   10ccc:	vcvt.f64.f32	d16, s0
   10cd0:	vmov	r2, r3, d16
   10cd4:	bl	1069c <printf@plt>
   10cd8:	vldr	s0, [sp, #28]
   10cdc:	mov	r0, r4
   10ce0:	vcvt.f64.f32	d16, s0
   10ce4:	vmov	r2, r3, d16
   10ce8:	bl	1069c <printf@plt>
   10cec:	vldr	s0, [sp, #32]
   10cf0:	mov	r0, r4
   10cf4:	vcvt.f64.f32	d16, s0
   10cf8:	vmov	r2, r3, d16
   10cfc:	bl	1069c <printf@plt>
   10d00:	vldr	s0, [sp, #36]	; 0x24
   10d04:	mov	r0, r4
   10d08:	vcvt.f64.f32	d16, s0
   10d0c:	vmov	r2, r3, d16
   10d10:	bl	1069c <printf@plt>
   10d14:	mov	r0, #10
   10d18:	bl	106c0 <putchar@plt>
   10d1c:	mov	r0, #0
   10d20:	sub	sp, fp, #16
   10d24:	pop	{r4, r5, r6, sl, fp, pc}
   10d28:	andeq	r0, r0, r0
   10d2c:	andeq	r0, r0, r4, lsr r4
   10d30:	andeq	r0, r0, r4, lsr r4
   10d34:	strdeq	r0, [r0], -r7
   10d38:	andeq	r0, r0, r8, ror r2
   10d3c:	ldrdeq	r0, [r0], -lr
   10d40:			; <UNDEFINED> instruction: 0x000001b8
   10d44:	andeq	r0, r0, fp, lsr #3

00010d48 <__libc_csu_init@@Base>:
   10d48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d4c:	mov	r7, r0
   10d50:	ldr	r6, [pc, #72]	; 10da0 <__libc_csu_init@@Base+0x58>
   10d54:	ldr	r5, [pc, #72]	; 10da4 <__libc_csu_init@@Base+0x5c>
   10d58:	add	r6, pc, r6
   10d5c:	add	r5, pc, r5
   10d60:	sub	r6, r6, r5
   10d64:	mov	r8, r1
   10d68:	mov	r9, r2
   10d6c:	bl	1067c <printf@plt-0x20>
   10d70:	asrs	r6, r6, #2
   10d74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d78:	mov	r4, #0
   10d7c:	add	r4, r4, #1
   10d80:	ldr	r3, [r5], #4
   10d84:	mov	r2, r9
   10d88:	mov	r1, r8
   10d8c:	mov	r0, r7
   10d90:	blx	r3
   10d94:	cmp	r6, r4
   10d98:	bne	10d7c <__libc_csu_init@@Base+0x34>
   10d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10da0:	andeq	r0, r1, ip, lsr #3
   10da4:	andeq	r0, r1, r4, lsr #3

00010da8 <__libc_csu_fini@@Base>:
   10da8:	bx	lr

Disassembly of section .fini:

00010dac <.fini>:
   10dac:	push	{r3, lr}
   10db0:	pop	{r3, pc}
