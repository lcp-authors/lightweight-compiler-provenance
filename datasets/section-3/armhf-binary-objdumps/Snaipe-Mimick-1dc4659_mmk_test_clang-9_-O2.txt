
../repos/Snaipe-Mimick-1dc4659/test/mmk_test:     file format elf32-littlearm


Disassembly of section .init:

0001140c <.init>:
   1140c:	push	{r3, lr}
   11410:	bl	11570 <_start@@Base+0x3c>
   11414:	pop	{r3, pc}

Disassembly of section .plt:

00011418 <strstr@plt-0x14>:
   11418:	push	{lr}		; (str lr, [sp, #-4]!)
   1141c:	ldr	lr, [pc, #4]	; 11428 <strstr@plt-0x4>
   11420:	add	lr, pc, lr
   11424:	ldr	pc, [lr, #8]!
   11428:	ldrdeq	r4, [r1], -r8

0001142c <strstr@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #20, 20	; 0x14000
   11434:	ldr	pc, [ip, #3032]!	; 0xbd8

00011438 <strcmp@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #20, 20	; 0x14000
   11440:	ldr	pc, [ip, #3024]!	; 0xbd0

00011444 <mprotect@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #20, 20	; 0x14000
   1144c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011450 <free@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #20, 20	; 0x14000
   11458:	ldr	pc, [ip, #3008]!	; 0xbc0

0001145c <memcpy@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #20, 20	; 0x14000
   11464:	ldr	pc, [ip, #3000]!	; 0xbb8

00011468 <fn_vv@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #20, 20	; 0x14000
   11470:	ldr	pc, [ip, #2992]!	; 0xbb0

00011474 <realloc@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #20, 20	; 0x14000
   1147c:	ldr	pc, [ip, #2984]!	; 0xba8

00011480 <fn_ii@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #20, 20	; 0x14000
   11488:	ldr	pc, [ip, #2976]!	; 0xba0

0001148c <fn_ii_va@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #20, 20	; 0x14000
   11494:	ldr	pc, [ip, #2968]!	; 0xb98

00011498 <malloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #20, 20	; 0x14000
   114a0:	ldr	pc, [ip, #2960]!	; 0xb90

000114a4 <__libc_start_main@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #20, 20	; 0x14000
   114ac:	ldr	pc, [ip, #2952]!	; 0xb88

000114b0 <__gmon_start__@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #20, 20	; 0x14000
   114b8:	ldr	pc, [ip, #2944]!	; 0xb80

000114bc <strlen@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #20, 20	; 0x14000
   114c4:	ldr	pc, [ip, #2936]!	; 0xb78

000114c8 <mmap@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #20, 20	; 0x14000
   114d0:	ldr	pc, [ip, #2928]!	; 0xb70

000114d4 <strchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #20, 20	; 0x14000
   114dc:	ldr	pc, [ip, #2920]!	; 0xb68

000114e0 <fprintf@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #20, 20	; 0x14000
   114e8:	ldr	pc, [ip, #2912]!	; 0xb60

000114ec <__errno_location@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #20, 20	; 0x14000
   114f4:	ldr	pc, [ip, #2904]!	; 0xb58

000114f8 <snprintf@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #20, 20	; 0x14000
   11500:	ldr	pc, [ip, #2896]!	; 0xb50

00011504 <munmap@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #20, 20	; 0x14000
   1150c:	ldr	pc, [ip, #2888]!	; 0xb48

00011510 <__tls_get_addr@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #20, 20	; 0x14000
   11518:	ldr	pc, [ip, #2880]!	; 0xb40

0001151c <strncmp@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #20, 20	; 0x14000
   11524:	ldr	pc, [ip, #2872]!	; 0xb38

00011528 <abort@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #20, 20	; 0x14000
   11530:	ldr	pc, [ip, #2864]!	; 0xb30

Disassembly of section .text:

00011534 <_start@@Base>:
   11534:	mov	fp, #0
   11538:	mov	lr, #0
   1153c:	pop	{r1}		; (ldr r1, [sp], #4)
   11540:	mov	r2, sp
   11544:	push	{r2}		; (str r2, [sp, #-4]!)
   11548:	push	{r0}		; (str r0, [sp, #-4]!)
   1154c:	ldr	ip, [pc, #16]	; 11564 <_start@@Base+0x30>
   11550:	push	{ip}		; (str ip, [sp, #-4]!)
   11554:	ldr	r0, [pc, #12]	; 11568 <_start@@Base+0x34>
   11558:	ldr	r3, [pc, #12]	; 1156c <_start@@Base+0x38>
   1155c:	bl	114a4 <__libc_start_main@plt>
   11560:	bl	11528 <abort@plt>
   11564:	strdeq	r4, [r1], -r8
   11568:	andeq	r1, r1, ip, lsr r6
   1156c:	muleq	r1, r8, sp
   11570:	ldr	r3, [pc, #20]	; 1158c <_start@@Base+0x58>
   11574:	ldr	r2, [pc, #20]	; 11590 <_start@@Base+0x5c>
   11578:	add	r3, pc, r3
   1157c:	ldr	r2, [r3, r2]
   11580:	cmp	r2, #0
   11584:	bxeq	lr
   11588:	b	114b0 <__gmon_start__@plt>
   1158c:	andeq	r4, r1, r0, lsl #21
   11590:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11594:	ldr	r0, [pc, #24]	; 115b4 <_start@@Base+0x80>
   11598:	ldr	r3, [pc, #24]	; 115b8 <_start@@Base+0x84>
   1159c:	cmp	r3, r0
   115a0:	bxeq	lr
   115a4:	ldr	r3, [pc, #16]	; 115bc <_start@@Base+0x88>
   115a8:	cmp	r3, #0
   115ac:	bxeq	lr
   115b0:	bx	r3
   115b4:	ldrdeq	r6, [r2], -r4
   115b8:	ldrdeq	r6, [r2], -r4
   115bc:	andeq	r0, r0, r0
   115c0:	ldr	r0, [pc, #36]	; 115ec <_start@@Base+0xb8>
   115c4:	ldr	r1, [pc, #36]	; 115f0 <_start@@Base+0xbc>
   115c8:	sub	r1, r1, r0
   115cc:	asr	r1, r1, #2
   115d0:	add	r1, r1, r1, lsr #31
   115d4:	asrs	r1, r1, #1
   115d8:	bxeq	lr
   115dc:	ldr	r3, [pc, #16]	; 115f4 <_start@@Base+0xc0>
   115e0:	cmp	r3, #0
   115e4:	bxeq	lr
   115e8:	bx	r3
   115ec:	ldrdeq	r6, [r2], -r4
   115f0:	ldrdeq	r6, [r2], -r4
   115f4:	andeq	r0, r0, r0
   115f8:	push	{r4, lr}
   115fc:	ldr	r4, [pc, #24]	; 1161c <_start@@Base+0xe8>
   11600:	ldrb	r3, [r4]
   11604:	cmp	r3, #0
   11608:	popne	{r4, pc}
   1160c:	bl	11594 <_start@@Base+0x60>
   11610:	mov	r3, #1
   11614:	strb	r3, [r4]
   11618:	pop	{r4, pc}
   1161c:	ldrdeq	r6, [r2], -r4
   11620:	b	115c0 <_start@@Base+0x8c>

00011624 <set_valid@@Base>:
   11624:	ldr	r0, [pc, #12]	; 11638 <set_valid@@Base+0x14>
   11628:	add	r0, pc, r0
   1162c:	movw	r1, #1
   11630:	str	r1, [r0]
   11634:	bx	lr
   11638:	andeq	r4, r1, r8, lsr #21

0001163c <main@@Base>:
   1163c:	push	{r4, r5, fp, lr}
   11640:	add	fp, sp, #8
   11644:	sub	sp, sp, #672	; 0x2a0
   11648:	ldr	r0, [pc, #3016]	; 12218 <main@@Base+0xbdc>
   1164c:	add	r0, pc, r0
   11650:	movw	r1, #0
   11654:	str	r1, [fp, #-12]
   11658:	bl	12378 <main@@Base+0xd3c>
   1165c:	movw	r1, #0
   11660:	str	r0, [sp, #204]	; 0xcc
   11664:	mov	r0, r1
   11668:	bl	137ec <mmk_matcher_init@@Base>
   1166c:	ldr	r0, [pc, #2976]	; 12214 <main@@Base+0xbd8>
   11670:	ldr	r0, [pc, r0]
   11674:	sub	r1, fp, #32
   11678:	mov	r2, r1
   1167c:	vmov.i32	q8, #0	; 0x00000000
   11680:	vst1.32	{d16-d17}, [r2]!
   11684:	mov	r3, #0
   11688:	str	r3, [r2]
   1168c:	str	r0, [fp, #-20]	; 0xffffffec
   11690:	mov	r0, r1
   11694:	bl	14ccc <mmk_when_init@@Base>
   11698:	bl	11468 <fn_vv@plt>
   1169c:	bl	1382c <mmk_matcher_term@@Base>
   116a0:	movw	r0, #1
   116a4:	bl	137ec <mmk_matcher_init@@Base>
   116a8:	bl	11468 <fn_vv@plt>
   116ac:	bl	1382c <mmk_matcher_term@@Base>
   116b0:	movw	r0, #1
   116b4:	str	r0, [fp, #-56]	; 0xffffffc8
   116b8:	str	r0, [fp, #-52]	; 0xffffffcc
   116bc:	movw	r0, #0
   116c0:	str	r0, [fp, #-48]	; 0xffffffd0
   116c4:	str	r0, [fp, #-44]	; 0xffffffd4
   116c8:	str	r0, [fp, #-40]	; 0xffffffd8
   116cc:	str	r0, [fp, #-36]	; 0xffffffdc
   116d0:	sub	r0, fp, #56	; 0x38
   116d4:	bl	145bc <mmk_verify_times@@Base>
   116d8:	cmp	r0, #0
   116dc:	bne	11724 <main@@Base+0xe8>
   116e0:	ldr	r0, [pc, #2868]	; 1221c <main@@Base+0xbe0>
   116e4:	add	r1, pc, r0
   116e8:	ldr	r0, [pc, #2864]	; 12220 <main@@Base+0xbe4>
   116ec:	add	r2, pc, r0
   116f0:	ldr	r0, [pc, #2860]	; 12224 <main@@Base+0xbe8>
   116f4:	add	r0, pc, r0
   116f8:	ldr	r3, [pc, #2856]	; 12228 <main@@Base+0xbec>
   116fc:	ldr	r3, [pc, r3]
   11700:	ldr	r3, [r3]
   11704:	str	r0, [sp, #200]	; 0xc8
   11708:	mov	r0, r3
   1170c:	movw	r3, #42	; 0x2a
   11710:	ldr	ip, [sp, #200]	; 0xc8
   11714:	str	ip, [sp]
   11718:	bl	114e0 <fprintf@plt>
   1171c:	str	r0, [sp, #196]	; 0xc4
   11720:	bl	11528 <abort@plt>
   11724:	b	11728 <main@@Base+0xec>
   11728:	b	1172c <main@@Base+0xf0>
   1172c:	movw	r0, #1
   11730:	bl	137ec <mmk_matcher_init@@Base>
   11734:	bl	11468 <fn_vv@plt>
   11738:	bl	1382c <mmk_matcher_term@@Base>
   1173c:	movw	r0, #1
   11740:	str	r0, [fp, #-80]	; 0xffffffb0
   11744:	movw	r1, #0
   11748:	str	r1, [fp, #-76]	; 0xffffffb4
   1174c:	str	r1, [fp, #-72]	; 0xffffffb8
   11750:	str	r0, [fp, #-68]	; 0xffffffbc
   11754:	str	r1, [fp, #-64]	; 0xffffffc0
   11758:	str	r1, [fp, #-60]	; 0xffffffc4
   1175c:	sub	r0, fp, #80	; 0x50
   11760:	bl	145bc <mmk_verify_times@@Base>
   11764:	cmp	r0, #0
   11768:	bne	117b0 <main@@Base+0x174>
   1176c:	ldr	r0, [pc, #2744]	; 1222c <main@@Base+0xbf0>
   11770:	add	r1, pc, r0
   11774:	ldr	r0, [pc, #2740]	; 12230 <main@@Base+0xbf4>
   11778:	add	r2, pc, r0
   1177c:	ldr	r0, [pc, #2736]	; 12234 <main@@Base+0xbf8>
   11780:	add	r0, pc, r0
   11784:	ldr	r3, [pc, #2732]	; 12238 <main@@Base+0xbfc>
   11788:	ldr	r3, [pc, r3]
   1178c:	ldr	r3, [r3]
   11790:	str	r0, [sp, #192]	; 0xc0
   11794:	mov	r0, r3
   11798:	movw	r3, #43	; 0x2b
   1179c:	ldr	ip, [sp, #192]	; 0xc0
   117a0:	str	ip, [sp]
   117a4:	bl	114e0 <fprintf@plt>
   117a8:	str	r0, [sp, #188]	; 0xbc
   117ac:	bl	11528 <abort@plt>
   117b0:	b	117b4 <main@@Base+0x178>
   117b4:	b	117b8 <main@@Base+0x17c>
   117b8:	movw	r0, #1
   117bc:	bl	137ec <mmk_matcher_init@@Base>
   117c0:	bl	11468 <fn_vv@plt>
   117c4:	bl	1382c <mmk_matcher_term@@Base>
   117c8:	movw	r0, #1
   117cc:	str	r0, [fp, #-104]	; 0xffffff98
   117d0:	movw	r1, #0
   117d4:	str	r1, [fp, #-100]	; 0xffffff9c
   117d8:	str	r1, [fp, #-96]	; 0xffffffa0
   117dc:	str	r1, [fp, #-92]	; 0xffffffa4
   117e0:	str	r0, [fp, #-88]	; 0xffffffa8
   117e4:	str	r1, [fp, #-84]	; 0xffffffac
   117e8:	sub	r0, fp, #104	; 0x68
   117ec:	bl	145bc <mmk_verify_times@@Base>
   117f0:	cmp	r0, #0
   117f4:	beq	1183c <main@@Base+0x200>
   117f8:	ldr	r0, [pc, #2920]	; 12368 <main@@Base+0xd2c>
   117fc:	add	r1, pc, r0
   11800:	ldr	r0, [pc, #2916]	; 1236c <main@@Base+0xd30>
   11804:	add	r2, pc, r0
   11808:	ldr	r0, [pc, #2912]	; 12370 <main@@Base+0xd34>
   1180c:	add	r0, pc, r0
   11810:	ldr	r3, [pc, #2908]	; 12374 <main@@Base+0xd38>
   11814:	ldr	r3, [pc, r3]
   11818:	ldr	r3, [r3]
   1181c:	str	r0, [sp, #184]	; 0xb8
   11820:	mov	r0, r3
   11824:	movw	r3, #45	; 0x2d
   11828:	ldr	ip, [sp, #184]	; 0xb8
   1182c:	str	ip, [sp]
   11830:	bl	114e0 <fprintf@plt>
   11834:	str	r0, [sp, #180]	; 0xb4
   11838:	bl	11528 <abort@plt>
   1183c:	b	11840 <main@@Base+0x204>
   11840:	b	11844 <main@@Base+0x208>
   11844:	movw	r0, #1
   11848:	bl	137ec <mmk_matcher_init@@Base>
   1184c:	bl	11468 <fn_vv@plt>
   11850:	bl	1382c <mmk_matcher_term@@Base>
   11854:	movw	r0, #1
   11858:	str	r0, [fp, #-128]	; 0xffffff80
   1185c:	movw	r1, #0
   11860:	str	r1, [fp, #-124]	; 0xffffff84
   11864:	str	r0, [fp, #-120]	; 0xffffff88
   11868:	str	r1, [fp, #-116]	; 0xffffff8c
   1186c:	str	r1, [fp, #-112]	; 0xffffff90
   11870:	str	r1, [fp, #-108]	; 0xffffff94
   11874:	sub	r0, fp, #128	; 0x80
   11878:	bl	145bc <mmk_verify_times@@Base>
   1187c:	cmp	r0, #0
   11880:	beq	118c8 <main@@Base+0x28c>
   11884:	ldr	r0, [pc, #2764]	; 12358 <main@@Base+0xd1c>
   11888:	add	r1, pc, r0
   1188c:	ldr	r0, [pc, #2760]	; 1235c <main@@Base+0xd20>
   11890:	add	r2, pc, r0
   11894:	ldr	r0, [pc, #2756]	; 12360 <main@@Base+0xd24>
   11898:	add	r0, pc, r0
   1189c:	ldr	r3, [pc, #2752]	; 12364 <main@@Base+0xd28>
   118a0:	ldr	r3, [pc, r3]
   118a4:	ldr	r3, [r3]
   118a8:	str	r0, [sp, #176]	; 0xb0
   118ac:	mov	r0, r3
   118b0:	movw	r3, #46	; 0x2e
   118b4:	ldr	ip, [sp, #176]	; 0xb0
   118b8:	str	ip, [sp]
   118bc:	bl	114e0 <fprintf@plt>
   118c0:	str	r0, [sp, #172]	; 0xac
   118c4:	bl	11528 <abort@plt>
   118c8:	b	118cc <main@@Base+0x290>
   118cc:	b	118d0 <main@@Base+0x294>
   118d0:	movw	r0, #1
   118d4:	bl	137ec <mmk_matcher_init@@Base>
   118d8:	bl	11468 <fn_vv@plt>
   118dc:	bl	1382c <mmk_matcher_term@@Base>
   118e0:	movw	r0, #1
   118e4:	str	r0, [fp, #-152]	; 0xffffff68
   118e8:	movw	r1, #0
   118ec:	str	r1, [fp, #-148]	; 0xffffff6c
   118f0:	str	r0, [fp, #-144]	; 0xffffff70
   118f4:	str	r0, [fp, #-140]	; 0xffffff74
   118f8:	str	r1, [fp, #-136]	; 0xffffff78
   118fc:	str	r1, [fp, #-132]	; 0xffffff7c
   11900:	sub	r0, fp, #152	; 0x98
   11904:	bl	145bc <mmk_verify_times@@Base>
   11908:	cmp	r0, #0
   1190c:	beq	11954 <main@@Base+0x318>
   11910:	ldr	r0, [pc, #2608]	; 12348 <main@@Base+0xd0c>
   11914:	add	r1, pc, r0
   11918:	ldr	r0, [pc, #2604]	; 1234c <main@@Base+0xd10>
   1191c:	add	r2, pc, r0
   11920:	ldr	r0, [pc, #2600]	; 12350 <main@@Base+0xd14>
   11924:	add	r0, pc, r0
   11928:	ldr	r3, [pc, #2596]	; 12354 <main@@Base+0xd18>
   1192c:	ldr	r3, [pc, r3]
   11930:	ldr	r3, [r3]
   11934:	str	r0, [sp, #168]	; 0xa8
   11938:	mov	r0, r3
   1193c:	movw	r3, #47	; 0x2f
   11940:	ldr	ip, [sp, #168]	; 0xa8
   11944:	str	ip, [sp]
   11948:	bl	114e0 <fprintf@plt>
   1194c:	str	r0, [sp, #164]	; 0xa4
   11950:	bl	11528 <abort@plt>
   11954:	b	11958 <main@@Base+0x31c>
   11958:	bl	11468 <fn_vv@plt>
   1195c:	ldr	r0, [pc, #2264]	; 1223c <main@@Base+0xc00>
   11960:	add	r0, pc, r0
   11964:	ldr	r0, [r0]
   11968:	cmp	r0, #0
   1196c:	bne	119b4 <main@@Base+0x378>
   11970:	ldr	r0, [pc, #2248]	; 12240 <main@@Base+0xc04>
   11974:	add	r1, pc, r0
   11978:	ldr	r0, [pc, #2244]	; 12244 <main@@Base+0xc08>
   1197c:	add	r2, pc, r0
   11980:	ldr	r0, [pc, #2240]	; 12248 <main@@Base+0xc0c>
   11984:	add	r0, pc, r0
   11988:	ldr	r3, [pc, #2236]	; 1224c <main@@Base+0xc10>
   1198c:	ldr	r3, [pc, r3]
   11990:	ldr	r3, [r3]
   11994:	str	r0, [sp, #160]	; 0xa0
   11998:	mov	r0, r3
   1199c:	movw	r3, #50	; 0x32
   119a0:	ldr	ip, [sp, #160]	; 0xa0
   119a4:	str	ip, [sp]
   119a8:	bl	114e0 <fprintf@plt>
   119ac:	str	r0, [sp, #156]	; 0x9c
   119b0:	bl	11528 <abort@plt>
   119b4:	b	119b8 <main@@Base+0x37c>
   119b8:	b	119bc <main@@Base+0x380>
   119bc:	movw	r0, #1
   119c0:	bl	137ec <mmk_matcher_init@@Base>
   119c4:	bl	11468 <fn_vv@plt>
   119c8:	bl	1382c <mmk_matcher_term@@Base>
   119cc:	movw	r0, #1
   119d0:	str	r0, [fp, #-176]	; 0xffffff50
   119d4:	movw	r1, #0
   119d8:	str	r1, [fp, #-172]	; 0xffffff54
   119dc:	str	r1, [fp, #-168]	; 0xffffff58
   119e0:	str	r1, [fp, #-164]	; 0xffffff5c
   119e4:	str	r0, [fp, #-160]	; 0xffffff60
   119e8:	str	r1, [fp, #-156]	; 0xffffff64
   119ec:	sub	r0, fp, #176	; 0xb0
   119f0:	bl	145bc <mmk_verify_times@@Base>
   119f4:	cmp	r0, #0
   119f8:	bne	11a40 <main@@Base+0x404>
   119fc:	ldr	r0, [pc, #2124]	; 12250 <main@@Base+0xc14>
   11a00:	add	r1, pc, r0
   11a04:	ldr	r0, [pc, #2120]	; 12254 <main@@Base+0xc18>
   11a08:	add	r2, pc, r0
   11a0c:	ldr	r0, [pc, #2116]	; 12258 <main@@Base+0xc1c>
   11a10:	add	r0, pc, r0
   11a14:	ldr	r3, [pc, #2112]	; 1225c <main@@Base+0xc20>
   11a18:	ldr	r3, [pc, r3]
   11a1c:	ldr	r3, [r3]
   11a20:	str	r0, [sp, #152]	; 0x98
   11a24:	mov	r0, r3
   11a28:	movw	r3, #51	; 0x33
   11a2c:	ldr	ip, [sp, #152]	; 0x98
   11a30:	str	ip, [sp]
   11a34:	bl	114e0 <fprintf@plt>
   11a38:	str	r0, [sp, #148]	; 0x94
   11a3c:	bl	11528 <abort@plt>
   11a40:	b	11a44 <main@@Base+0x408>
   11a44:	b	11a48 <main@@Base+0x40c>
   11a48:	movw	r0, #1
   11a4c:	bl	137ec <mmk_matcher_init@@Base>
   11a50:	bl	11468 <fn_vv@plt>
   11a54:	bl	1382c <mmk_matcher_term@@Base>
   11a58:	movw	r0, #1
   11a5c:	str	r0, [fp, #-200]	; 0xffffff38
   11a60:	movw	r1, #0
   11a64:	str	r1, [fp, #-196]	; 0xffffff3c
   11a68:	str	r0, [fp, #-192]	; 0xffffff40
   11a6c:	str	r1, [fp, #-188]	; 0xffffff44
   11a70:	str	r1, [fp, #-184]	; 0xffffff48
   11a74:	str	r1, [fp, #-180]	; 0xffffff4c
   11a78:	sub	r0, fp, #200	; 0xc8
   11a7c:	bl	145bc <mmk_verify_times@@Base>
   11a80:	cmp	r0, #0
   11a84:	bne	11acc <main@@Base+0x490>
   11a88:	ldr	r0, [pc, #2000]	; 12260 <main@@Base+0xc24>
   11a8c:	add	r1, pc, r0
   11a90:	ldr	r0, [pc, #1996]	; 12264 <main@@Base+0xc28>
   11a94:	add	r2, pc, r0
   11a98:	ldr	r0, [pc, #1992]	; 12268 <main@@Base+0xc2c>
   11a9c:	add	r0, pc, r0
   11aa0:	ldr	r3, [pc, #1988]	; 1226c <main@@Base+0xc30>
   11aa4:	ldr	r3, [pc, r3]
   11aa8:	ldr	r3, [r3]
   11aac:	str	r0, [sp, #144]	; 0x90
   11ab0:	mov	r0, r3
   11ab4:	movw	r3, #52	; 0x34
   11ab8:	ldr	ip, [sp, #144]	; 0x90
   11abc:	str	ip, [sp]
   11ac0:	bl	114e0 <fprintf@plt>
   11ac4:	str	r0, [sp, #140]	; 0x8c
   11ac8:	bl	11528 <abort@plt>
   11acc:	b	11ad0 <main@@Base+0x494>
   11ad0:	b	11ad4 <main@@Base+0x498>
   11ad4:	movw	r0, #1
   11ad8:	bl	137ec <mmk_matcher_init@@Base>
   11adc:	bl	11468 <fn_vv@plt>
   11ae0:	bl	1382c <mmk_matcher_term@@Base>
   11ae4:	movw	r0, #1
   11ae8:	str	r0, [fp, #-224]	; 0xffffff20
   11aec:	movw	r1, #0
   11af0:	str	r1, [fp, #-220]	; 0xffffff24
   11af4:	str	r1, [fp, #-216]	; 0xffffff28
   11af8:	str	r0, [fp, #-212]	; 0xffffff2c
   11afc:	str	r1, [fp, #-208]	; 0xffffff30
   11b00:	str	r1, [fp, #-204]	; 0xffffff34
   11b04:	sub	r0, fp, #224	; 0xe0
   11b08:	bl	145bc <mmk_verify_times@@Base>
   11b0c:	cmp	r0, #0
   11b10:	bne	11b58 <main@@Base+0x51c>
   11b14:	ldr	r0, [pc, #1876]	; 12270 <main@@Base+0xc34>
   11b18:	add	r1, pc, r0
   11b1c:	ldr	r0, [pc, #1872]	; 12274 <main@@Base+0xc38>
   11b20:	add	r2, pc, r0
   11b24:	ldr	r0, [pc, #1868]	; 12278 <main@@Base+0xc3c>
   11b28:	add	r0, pc, r0
   11b2c:	ldr	r3, [pc, #1864]	; 1227c <main@@Base+0xc40>
   11b30:	ldr	r3, [pc, r3]
   11b34:	ldr	r3, [r3]
   11b38:	str	r0, [sp, #136]	; 0x88
   11b3c:	mov	r0, r3
   11b40:	movw	r3, #53	; 0x35
   11b44:	ldr	ip, [sp, #136]	; 0x88
   11b48:	str	ip, [sp]
   11b4c:	bl	114e0 <fprintf@plt>
   11b50:	str	r0, [sp, #132]	; 0x84
   11b54:	bl	11528 <abort@plt>
   11b58:	b	11b5c <main@@Base+0x520>
   11b5c:	b	11b60 <main@@Base+0x524>
   11b60:	movw	r0, #1
   11b64:	bl	137ec <mmk_matcher_init@@Base>
   11b68:	bl	11468 <fn_vv@plt>
   11b6c:	bl	1382c <mmk_matcher_term@@Base>
   11b70:	movw	r0, #1
   11b74:	str	r0, [fp, #-248]	; 0xffffff08
   11b78:	movw	r1, #0
   11b7c:	str	r1, [fp, #-244]	; 0xffffff0c
   11b80:	str	r0, [fp, #-240]	; 0xffffff10
   11b84:	str	r0, [fp, #-236]	; 0xffffff14
   11b88:	str	r1, [fp, #-232]	; 0xffffff18
   11b8c:	str	r1, [fp, #-228]	; 0xffffff1c
   11b90:	sub	r0, fp, #248	; 0xf8
   11b94:	bl	145bc <mmk_verify_times@@Base>
   11b98:	cmp	r0, #0
   11b9c:	bne	11be4 <main@@Base+0x5a8>
   11ba0:	ldr	r0, [pc, #1752]	; 12280 <main@@Base+0xc44>
   11ba4:	add	r1, pc, r0
   11ba8:	ldr	r0, [pc, #1748]	; 12284 <main@@Base+0xc48>
   11bac:	add	r2, pc, r0
   11bb0:	ldr	r0, [pc, #1744]	; 12288 <main@@Base+0xc4c>
   11bb4:	add	r0, pc, r0
   11bb8:	ldr	r3, [pc, #1740]	; 1228c <main@@Base+0xc50>
   11bbc:	ldr	r3, [pc, r3]
   11bc0:	ldr	r3, [r3]
   11bc4:	str	r0, [sp, #128]	; 0x80
   11bc8:	mov	r0, r3
   11bcc:	movw	r3, #54	; 0x36
   11bd0:	ldr	ip, [sp, #128]	; 0x80
   11bd4:	str	ip, [sp]
   11bd8:	bl	114e0 <fprintf@plt>
   11bdc:	str	r0, [sp, #124]	; 0x7c
   11be0:	bl	11528 <abort@plt>
   11be4:	b	11be8 <main@@Base+0x5ac>
   11be8:	b	11bec <main@@Base+0x5b0>
   11bec:	movw	r0, #1
   11bf0:	bl	137ec <mmk_matcher_init@@Base>
   11bf4:	bl	11468 <fn_vv@plt>
   11bf8:	bl	1382c <mmk_matcher_term@@Base>
   11bfc:	movw	r0, #1
   11c00:	str	r0, [fp, #-272]	; 0xfffffef0
   11c04:	str	r0, [fp, #-268]	; 0xfffffef4
   11c08:	movw	r0, #0
   11c0c:	str	r0, [fp, #-264]	; 0xfffffef8
   11c10:	str	r0, [fp, #-260]	; 0xfffffefc
   11c14:	str	r0, [fp, #-256]	; 0xffffff00
   11c18:	str	r0, [fp, #-252]	; 0xffffff04
   11c1c:	sub	r0, fp, #272	; 0x110
   11c20:	bl	145bc <mmk_verify_times@@Base>
   11c24:	cmp	r0, #0
   11c28:	beq	11c70 <main@@Base+0x634>
   11c2c:	ldr	r0, [pc, #1796]	; 12338 <main@@Base+0xcfc>
   11c30:	add	r1, pc, r0
   11c34:	ldr	r0, [pc, #1792]	; 1233c <main@@Base+0xd00>
   11c38:	add	r2, pc, r0
   11c3c:	ldr	r0, [pc, #1788]	; 12340 <main@@Base+0xd04>
   11c40:	add	r0, pc, r0
   11c44:	ldr	r3, [pc, #1784]	; 12344 <main@@Base+0xd08>
   11c48:	ldr	r3, [pc, r3]
   11c4c:	ldr	r3, [r3]
   11c50:	str	r0, [sp, #120]	; 0x78
   11c54:	mov	r0, r3
   11c58:	movw	r3, #55	; 0x37
   11c5c:	ldr	ip, [sp, #120]	; 0x78
   11c60:	str	ip, [sp]
   11c64:	bl	114e0 <fprintf@plt>
   11c68:	str	r0, [sp, #116]	; 0x74
   11c6c:	bl	11528 <abort@plt>
   11c70:	b	11c74 <main@@Base+0x638>
   11c74:	b	11c78 <main@@Base+0x63c>
   11c78:	movw	r0, #1
   11c7c:	bl	137ec <mmk_matcher_init@@Base>
   11c80:	bl	11468 <fn_vv@plt>
   11c84:	bl	1382c <mmk_matcher_term@@Base>
   11c88:	movw	r0, #1
   11c8c:	str	r0, [fp, #-296]	; 0xfffffed8
   11c90:	movw	r0, #0
   11c94:	str	r0, [fp, #-292]	; 0xfffffedc
   11c98:	str	r0, [fp, #-288]	; 0xfffffee0
   11c9c:	str	r0, [fp, #-284]	; 0xfffffee4
   11ca0:	movw	r1, #2
   11ca4:	str	r1, [fp, #-280]	; 0xfffffee8
   11ca8:	str	r0, [fp, #-276]	; 0xfffffeec
   11cac:	sub	r0, fp, #296	; 0x128
   11cb0:	bl	145bc <mmk_verify_times@@Base>
   11cb4:	cmp	r0, #0
   11cb8:	beq	11d00 <main@@Base+0x6c4>
   11cbc:	ldr	r0, [pc, #1636]	; 12328 <main@@Base+0xcec>
   11cc0:	add	r1, pc, r0
   11cc4:	ldr	r0, [pc, #1632]	; 1232c <main@@Base+0xcf0>
   11cc8:	add	r2, pc, r0
   11ccc:	ldr	r0, [pc, #1628]	; 12330 <main@@Base+0xcf4>
   11cd0:	add	r0, pc, r0
   11cd4:	ldr	r3, [pc, #1624]	; 12334 <main@@Base+0xcf8>
   11cd8:	ldr	r3, [pc, r3]
   11cdc:	ldr	r3, [r3]
   11ce0:	str	r0, [sp, #112]	; 0x70
   11ce4:	mov	r0, r3
   11ce8:	movw	r3, #56	; 0x38
   11cec:	ldr	ip, [sp, #112]	; 0x70
   11cf0:	str	ip, [sp]
   11cf4:	bl	114e0 <fprintf@plt>
   11cf8:	str	r0, [sp, #108]	; 0x6c
   11cfc:	bl	11528 <abort@plt>
   11d00:	b	11d04 <main@@Base+0x6c8>
   11d04:	b	11d08 <main@@Base+0x6cc>
   11d08:	movw	r0, #1
   11d0c:	bl	137ec <mmk_matcher_init@@Base>
   11d10:	bl	11468 <fn_vv@plt>
   11d14:	bl	1382c <mmk_matcher_term@@Base>
   11d18:	movw	r0, #1
   11d1c:	str	r0, [fp, #-320]	; 0xfffffec0
   11d20:	movw	r0, #0
   11d24:	str	r0, [fp, #-316]	; 0xfffffec4
   11d28:	movw	r1, #2
   11d2c:	str	r1, [fp, #-312]	; 0xfffffec8
   11d30:	str	r0, [fp, #-308]	; 0xfffffecc
   11d34:	str	r0, [fp, #-304]	; 0xfffffed0
   11d38:	str	r0, [fp, #-300]	; 0xfffffed4
   11d3c:	sub	r0, fp, #320	; 0x140
   11d40:	bl	145bc <mmk_verify_times@@Base>
   11d44:	cmp	r0, #0
   11d48:	beq	11d90 <main@@Base+0x754>
   11d4c:	ldr	r0, [pc, #1476]	; 12318 <main@@Base+0xcdc>
   11d50:	add	r1, pc, r0
   11d54:	ldr	r0, [pc, #1472]	; 1231c <main@@Base+0xce0>
   11d58:	add	r2, pc, r0
   11d5c:	ldr	r0, [pc, #1468]	; 12320 <main@@Base+0xce4>
   11d60:	add	r0, pc, r0
   11d64:	ldr	r3, [pc, #1464]	; 12324 <main@@Base+0xce8>
   11d68:	ldr	r3, [pc, r3]
   11d6c:	ldr	r3, [r3]
   11d70:	str	r0, [sp, #104]	; 0x68
   11d74:	mov	r0, r3
   11d78:	movw	r3, #57	; 0x39
   11d7c:	ldr	ip, [sp, #104]	; 0x68
   11d80:	str	ip, [sp]
   11d84:	bl	114e0 <fprintf@plt>
   11d88:	str	r0, [sp, #100]	; 0x64
   11d8c:	bl	11528 <abort@plt>
   11d90:	b	11d94 <main@@Base+0x758>
   11d94:	ldr	r0, [pc, #1276]	; 12298 <main@@Base+0xc5c>
   11d98:	ldr	r0, [pc, r0]
   11d9c:	bl	137cc <mmk_reset@@Base>
   11da0:	ldr	r0, [pc, #1256]	; 12290 <main@@Base+0xc54>
   11da4:	add	r0, pc, r0
   11da8:	ldr	r1, [pc, #1252]	; 12294 <main@@Base+0xc58>
   11dac:	str	r1, [fp, #-324]	; 0xfffffebc
   11db0:	bl	123a4 <main@@Base+0xd68>
   11db4:	movw	r1, #0
   11db8:	str	r0, [sp, #96]	; 0x60
   11dbc:	mov	r0, r1
   11dc0:	bl	137ec <mmk_matcher_init@@Base>
   11dc4:	movw	r0, #0
   11dc8:	str	r0, [sp, #336]	; 0x150
   11dcc:	ldr	r1, [fp, #-324]	; 0xfffffebc
   11dd0:	str	r1, [sp, #340]	; 0x154
   11dd4:	movw	r1, #1
   11dd8:	str	r1, [sp, #332]	; 0x14c
   11ddc:	add	r1, sp, #332	; 0x14c
   11de0:	str	r1, [sp, #344]	; 0x158
   11de4:	str	r0, [sp, #348]	; 0x15c
   11de8:	str	r0, [sp, #352]	; 0x160
   11dec:	add	r0, sp, #336	; 0x150
   11df0:	bl	14ccc <mmk_when_init@@Base>
   11df4:	movw	r0, #1
   11df8:	bl	11480 <fn_ii@plt>
   11dfc:	str	r0, [sp, #92]	; 0x5c
   11e00:	bl	1382c <mmk_matcher_term@@Base>
   11e04:	movw	r0, #1
   11e08:	bl	11480 <fn_ii@plt>
   11e0c:	cmp	r0, #1
   11e10:	bne	11e28 <main@@Base+0x7ec>
   11e14:	bl	114ec <__errno_location@plt>
   11e18:	ldr	r0, [r0]
   11e1c:	ldr	r1, [fp, #-324]	; 0xfffffebc
   11e20:	cmp	r0, r1
   11e24:	beq	11e6c <main@@Base+0x830>
   11e28:	ldr	r0, [pc, #1132]	; 1229c <main@@Base+0xc60>
   11e2c:	add	r1, pc, r0
   11e30:	ldr	r0, [pc, #1128]	; 122a0 <main@@Base+0xc64>
   11e34:	add	r2, pc, r0
   11e38:	ldr	r0, [pc, #1124]	; 122a4 <main@@Base+0xc68>
   11e3c:	add	r0, pc, r0
   11e40:	ldr	r3, [pc, #1120]	; 122a8 <main@@Base+0xc6c>
   11e44:	ldr	r3, [pc, r3]
   11e48:	ldr	r3, [r3]
   11e4c:	str	r0, [sp, #88]	; 0x58
   11e50:	mov	r0, r3
   11e54:	movw	r3, #64	; 0x40
   11e58:	ldr	ip, [sp, #88]	; 0x58
   11e5c:	str	ip, [sp]
   11e60:	bl	114e0 <fprintf@plt>
   11e64:	str	r0, [sp, #84]	; 0x54
   11e68:	bl	11528 <abort@plt>
   11e6c:	b	11e70 <main@@Base+0x834>
   11e70:	b	11e74 <main@@Base+0x838>
   11e74:	movw	r0, #42	; 0x2a
   11e78:	bl	11480 <fn_ii@plt>
   11e7c:	cmp	r0, #0
   11e80:	beq	11ec8 <main@@Base+0x88c>
   11e84:	ldr	r0, [pc, #1056]	; 122ac <main@@Base+0xc70>
   11e88:	add	r1, pc, r0
   11e8c:	ldr	r0, [pc, #1052]	; 122b0 <main@@Base+0xc74>
   11e90:	add	r2, pc, r0
   11e94:	ldr	r0, [pc, #1048]	; 122b4 <main@@Base+0xc78>
   11e98:	add	r0, pc, r0
   11e9c:	ldr	r3, [pc, #1044]	; 122b8 <main@@Base+0xc7c>
   11ea0:	ldr	r3, [pc, r3]
   11ea4:	ldr	r3, [r3]
   11ea8:	str	r0, [sp, #80]	; 0x50
   11eac:	mov	r0, r3
   11eb0:	movw	r3, #65	; 0x41
   11eb4:	ldr	ip, [sp, #80]	; 0x50
   11eb8:	str	ip, [sp]
   11ebc:	bl	114e0 <fprintf@plt>
   11ec0:	str	r0, [sp, #76]	; 0x4c
   11ec4:	bl	11528 <abort@plt>
   11ec8:	b	11ecc <main@@Base+0x890>
   11ecc:	b	11ed0 <main@@Base+0x894>
   11ed0:	movw	r0, #1
   11ed4:	bl	137ec <mmk_matcher_init@@Base>
   11ed8:	movw	r0, #0
   11edc:	str	r0, [sp, #72]	; 0x48
   11ee0:	ldr	r1, [sp, #72]	; 0x48
   11ee4:	bl	13870 <mmk_matcher_add@@Base>
   11ee8:	movw	r0, #0
   11eec:	str	r0, [sp, #328]	; 0x148
   11ef0:	ldr	r0, [sp, #328]	; 0x148
   11ef4:	bl	11480 <fn_ii@plt>
   11ef8:	str	r0, [sp, #68]	; 0x44
   11efc:	bl	1382c <mmk_matcher_term@@Base>
   11f00:	movw	r0, #1
   11f04:	str	r0, [sp, #304]	; 0x130
   11f08:	movw	r0, #0
   11f0c:	str	r0, [sp, #308]	; 0x134
   11f10:	str	r0, [sp, #312]	; 0x138
   11f14:	str	r0, [sp, #316]	; 0x13c
   11f18:	movw	r1, #2
   11f1c:	str	r1, [sp, #320]	; 0x140
   11f20:	str	r0, [sp, #324]	; 0x144
   11f24:	add	r0, sp, #304	; 0x130
   11f28:	bl	145bc <mmk_verify_times@@Base>
   11f2c:	cmp	r0, #0
   11f30:	bne	11f78 <main@@Base+0x93c>
   11f34:	ldr	r0, [pc, #896]	; 122bc <main@@Base+0xc80>
   11f38:	add	r1, pc, r0
   11f3c:	ldr	r0, [pc, #892]	; 122c0 <main@@Base+0xc84>
   11f40:	add	r2, pc, r0
   11f44:	ldr	r0, [pc, #888]	; 122c4 <main@@Base+0xc88>
   11f48:	add	r0, pc, r0
   11f4c:	ldr	r3, [pc, #884]	; 122c8 <main@@Base+0xc8c>
   11f50:	ldr	r3, [pc, r3]
   11f54:	ldr	r3, [r3]
   11f58:	str	r0, [sp, #64]	; 0x40
   11f5c:	mov	r0, r3
   11f60:	movw	r3, #67	; 0x43
   11f64:	ldr	ip, [sp, #64]	; 0x40
   11f68:	str	ip, [sp]
   11f6c:	bl	114e0 <fprintf@plt>
   11f70:	str	r0, [sp, #60]	; 0x3c
   11f74:	bl	11528 <abort@plt>
   11f78:	b	11f7c <main@@Base+0x940>
   11f7c:	b	11f80 <main@@Base+0x944>
   11f80:	movw	r0, #1
   11f84:	bl	137ec <mmk_matcher_init@@Base>
   11f88:	movw	r0, #1
   11f8c:	bl	11480 <fn_ii@plt>
   11f90:	str	r0, [sp, #56]	; 0x38
   11f94:	bl	1382c <mmk_matcher_term@@Base>
   11f98:	movw	r0, #1
   11f9c:	str	r0, [sp, #280]	; 0x118
   11fa0:	movw	r1, #0
   11fa4:	str	r1, [sp, #284]	; 0x11c
   11fa8:	str	r1, [sp, #288]	; 0x120
   11fac:	str	r1, [sp, #292]	; 0x124
   11fb0:	str	r0, [sp, #296]	; 0x128
   11fb4:	str	r1, [sp, #300]	; 0x12c
   11fb8:	add	r0, sp, #280	; 0x118
   11fbc:	bl	145bc <mmk_verify_times@@Base>
   11fc0:	cmp	r0, #0
   11fc4:	bne	1200c <main@@Base+0x9d0>
   11fc8:	ldr	r0, [pc, #764]	; 122cc <main@@Base+0xc90>
   11fcc:	add	r1, pc, r0
   11fd0:	ldr	r0, [pc, #760]	; 122d0 <main@@Base+0xc94>
   11fd4:	add	r2, pc, r0
   11fd8:	ldr	r0, [pc, #756]	; 122d4 <main@@Base+0xc98>
   11fdc:	add	r0, pc, r0
   11fe0:	ldr	r3, [pc, #752]	; 122d8 <main@@Base+0xc9c>
   11fe4:	ldr	r3, [pc, r3]
   11fe8:	ldr	r3, [r3]
   11fec:	str	r0, [sp, #52]	; 0x34
   11ff0:	mov	r0, r3
   11ff4:	movw	r3, #68	; 0x44
   11ff8:	ldr	ip, [sp, #52]	; 0x34
   11ffc:	str	ip, [sp]
   12000:	bl	114e0 <fprintf@plt>
   12004:	str	r0, [sp, #48]	; 0x30
   12008:	bl	11528 <abort@plt>
   1200c:	b	12010 <main@@Base+0x9d4>
   12010:	b	12014 <main@@Base+0x9d8>
   12014:	movw	r0, #1
   12018:	bl	137ec <mmk_matcher_init@@Base>
   1201c:	movw	r0, #42	; 0x2a
   12020:	bl	11480 <fn_ii@plt>
   12024:	str	r0, [sp, #44]	; 0x2c
   12028:	bl	1382c <mmk_matcher_term@@Base>
   1202c:	movw	r0, #1
   12030:	str	r0, [sp, #256]	; 0x100
   12034:	movw	r1, #0
   12038:	str	r1, [sp, #260]	; 0x104
   1203c:	str	r1, [sp, #264]	; 0x108
   12040:	str	r1, [sp, #268]	; 0x10c
   12044:	str	r0, [sp, #272]	; 0x110
   12048:	str	r1, [sp, #276]	; 0x114
   1204c:	add	r0, sp, #256	; 0x100
   12050:	bl	145bc <mmk_verify_times@@Base>
   12054:	cmp	r0, #0
   12058:	bne	120a0 <main@@Base+0xa64>
   1205c:	ldr	r0, [pc, #632]	; 122dc <main@@Base+0xca0>
   12060:	add	r1, pc, r0
   12064:	ldr	r0, [pc, #628]	; 122e0 <main@@Base+0xca4>
   12068:	add	r2, pc, r0
   1206c:	ldr	r0, [pc, #624]	; 122e4 <main@@Base+0xca8>
   12070:	add	r0, pc, r0
   12074:	ldr	r3, [pc, #620]	; 122e8 <main@@Base+0xcac>
   12078:	ldr	r3, [pc, r3]
   1207c:	ldr	r3, [r3]
   12080:	str	r0, [sp, #40]	; 0x28
   12084:	mov	r0, r3
   12088:	movw	r3, #69	; 0x45
   1208c:	ldr	ip, [sp, #40]	; 0x28
   12090:	str	ip, [sp]
   12094:	bl	114e0 <fprintf@plt>
   12098:	str	r0, [sp, #36]	; 0x24
   1209c:	bl	11528 <abort@plt>
   120a0:	b	120a4 <main@@Base+0xa68>
   120a4:	b	120a8 <main@@Base+0xa6c>
   120a8:	movw	r0, #1
   120ac:	bl	137ec <mmk_matcher_init@@Base>
   120b0:	movw	r0, #12
   120b4:	bl	11480 <fn_ii@plt>
   120b8:	str	r0, [sp, #32]
   120bc:	bl	1382c <mmk_matcher_term@@Base>
   120c0:	movw	r0, #1
   120c4:	str	r0, [sp, #232]	; 0xe8
   120c8:	str	r0, [sp, #236]	; 0xec
   120cc:	movw	r0, #0
   120d0:	str	r0, [sp, #240]	; 0xf0
   120d4:	str	r0, [sp, #244]	; 0xf4
   120d8:	str	r0, [sp, #248]	; 0xf8
   120dc:	str	r0, [sp, #252]	; 0xfc
   120e0:	add	r0, sp, #232	; 0xe8
   120e4:	bl	145bc <mmk_verify_times@@Base>
   120e8:	cmp	r0, #0
   120ec:	bne	12134 <main@@Base+0xaf8>
   120f0:	ldr	r0, [pc, #500]	; 122ec <main@@Base+0xcb0>
   120f4:	add	r1, pc, r0
   120f8:	ldr	r0, [pc, #496]	; 122f0 <main@@Base+0xcb4>
   120fc:	add	r2, pc, r0
   12100:	ldr	r0, [pc, #492]	; 122f4 <main@@Base+0xcb8>
   12104:	add	r0, pc, r0
   12108:	ldr	r3, [pc, #488]	; 122f8 <main@@Base+0xcbc>
   1210c:	ldr	r3, [pc, r3]
   12110:	ldr	r3, [r3]
   12114:	str	r0, [sp, #28]
   12118:	mov	r0, r3
   1211c:	movw	r3, #70	; 0x46
   12120:	ldr	ip, [sp, #28]
   12124:	str	ip, [sp]
   12128:	bl	114e0 <fprintf@plt>
   1212c:	str	r0, [sp, #24]
   12130:	bl	11528 <abort@plt>
   12134:	b	12138 <main@@Base+0xafc>
   12138:	ldr	r0, [pc, #448]	; 12300 <main@@Base+0xcc4>
   1213c:	ldr	r0, [pc, r0]
   12140:	bl	137cc <mmk_reset@@Base>
   12144:	ldr	r0, [pc, #432]	; 122fc <main@@Base+0xcc0>
   12148:	add	r0, pc, r0
   1214c:	bl	123d0 <main@@Base+0xd94>
   12150:	movw	r1, #0
   12154:	str	r0, [sp, #20]
   12158:	mov	r0, r1
   1215c:	bl	137ec <mmk_matcher_init@@Base>
   12160:	add	r0, sp, #212	; 0xd4
   12164:	mov	r1, r0
   12168:	vmov.i32	q8, #0	; 0x00000000
   1216c:	vst1.32	{d16-d17}, [r1]!
   12170:	mov	r2, #0
   12174:	str	r2, [r1]
   12178:	movw	r1, #1
   1217c:	str	r1, [sp, #208]	; 0xd0
   12180:	add	r1, sp, #208	; 0xd0
   12184:	str	r1, [sp, #220]	; 0xdc
   12188:	bl	14ccc <mmk_when_init@@Base>
   1218c:	movw	r0, #1
   12190:	movw	r1, #42	; 0x2a
   12194:	bl	1148c <fn_ii_va@plt>
   12198:	str	r0, [sp, #16]
   1219c:	bl	1382c <mmk_matcher_term@@Base>
   121a0:	movw	r0, #1
   121a4:	movw	r1, #42	; 0x2a
   121a8:	bl	1148c <fn_ii_va@plt>
   121ac:	cmp	r0, #1
   121b0:	beq	121f8 <main@@Base+0xbbc>
   121b4:	ldr	r0, [pc, #328]	; 12304 <main@@Base+0xcc8>
   121b8:	add	r1, pc, r0
   121bc:	ldr	r0, [pc, #324]	; 12308 <main@@Base+0xccc>
   121c0:	add	r2, pc, r0
   121c4:	ldr	r0, [pc, #320]	; 1230c <main@@Base+0xcd0>
   121c8:	add	r0, pc, r0
   121cc:	ldr	r3, [pc, #316]	; 12310 <main@@Base+0xcd4>
   121d0:	ldr	r3, [pc, r3]
   121d4:	ldr	r3, [r3]
   121d8:	str	r0, [sp, #12]
   121dc:	mov	r0, r3
   121e0:	movw	r3, #77	; 0x4d
   121e4:	ldr	ip, [sp, #12]
   121e8:	str	ip, [sp]
   121ec:	bl	114e0 <fprintf@plt>
   121f0:	str	r0, [sp, #8]
   121f4:	bl	11528 <abort@plt>
   121f8:	b	121fc <main@@Base+0xbc0>
   121fc:	ldr	r0, [pc, #272]	; 12314 <main@@Base+0xcd8>
   12200:	ldr	r0, [pc, r0]
   12204:	bl	137cc <mmk_reset@@Base>
   12208:	movw	r0, #0
   1220c:	sub	sp, fp, #8
   12210:	pop	{r4, r5, fp, pc}
   12214:	andeq	r4, r1, ip, lsl sl
   12218:			; <UNDEFINED> instruction: 0x000037b4
   1221c:	andeq	r3, r0, r2, lsr #14
   12220:	andeq	r3, r0, r7, lsr r7
   12224:	andeq	r3, r0, pc, lsl r8
   12228:	muleq	r1, r8, r9
   1222c:	muleq	r0, r6, r6
   12230:	andeq	r3, r0, fp, lsr #13
   12234:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   12238:	andeq	r4, r1, ip, lsl #18
   1223c:	andeq	r4, r1, r0, ror r7
   12240:	muleq	r0, r2, r4
   12244:	andeq	r3, r0, r7, lsr #9
   12248:	andeq	r3, r0, r8, lsl #11
   1224c:	andeq	r4, r1, r8, lsl #14
   12250:	andeq	r3, r0, r6, lsl #8
   12254:	andeq	r3, r0, fp, lsl r4
   12258:	andeq	r3, r0, r6, lsl #9
   1225c:	andeq	r4, r1, ip, ror r6
   12260:	andeq	r3, r0, sl, ror r3
   12264:	andeq	r3, r0, pc, lsl #7
   12268:	andeq	r3, r0, fp, lsl r4
   1226c:	strdeq	r4, [r1], -r0
   12270:	andeq	r3, r0, lr, ror #5
   12274:	andeq	r3, r0, r3, lsl #6
   12278:	andeq	r3, r0, fp, asr #6
   1227c:	andeq	r4, r1, r4, ror #10
   12280:	andeq	r3, r0, r2, ror #4
   12284:	andeq	r3, r0, r7, ror r2
   12288:	andeq	r3, r0, r7, lsr #6
   1228c:	ldrdeq	r4, [r1], -r8
   12290:	ldrdeq	r3, [r0], -r4
   12294:	mrc2	14, 7, pc, cr14, cr14, {7}
   12298:	andeq	r4, r1, ip, ror #5
   1229c:	ldrdeq	r2, [r0], -sl
   122a0:	andeq	r2, r0, pc, ror #31
   122a4:	andeq	r3, r0, r2, asr #2
   122a8:	andeq	r4, r1, r0, asr r2
   122ac:	andeq	r2, r0, lr, ror pc
   122b0:	muleq	r0, r3, pc	; <UNPREDICTABLE>
   122b4:	andeq	r3, r0, r4, lsl #2
   122b8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   122bc:	andeq	r2, r0, lr, asr #29
   122c0:	andeq	r2, r0, r3, ror #29
   122c4:	andeq	r3, r0, r3, rrx
   122c8:	andeq	r4, r1, r4, asr #2
   122cc:	andeq	r2, r0, sl, lsr lr
   122d0:	andeq	r2, r0, pc, asr #28
   122d4:	strdeq	r2, [r0], -fp
   122d8:	strheq	r4, [r1], -r0
   122dc:	andeq	r2, r0, r6, lsr #27
   122e0:			; <UNDEFINED> instruction: 0x00002dbb
   122e4:	andeq	r2, r0, r8, lsl #31
   122e8:	andeq	r4, r1, ip, lsl r0
   122ec:	andeq	r2, r0, r2, lsl sp
   122f0:	andeq	r2, r0, r7, lsr #26
   122f4:	andeq	r2, r0, r6, lsl pc
   122f8:	andeq	r3, r1, r8, lsl #31
   122fc:	strdeq	r2, [r0], -r4
   12300:	andeq	r3, r1, r4, asr pc
   12304:	andeq	r2, r0, lr, asr #24
   12308:	andeq	r2, r0, r3, ror #24
   1230c:	andeq	r2, r0, sp, ror lr
   12310:	andeq	r3, r1, r4, asr #29
   12314:	muleq	r1, r8, lr
   12318:	strheq	r3, [r0], -r6
   1231c:	andeq	r3, r0, fp, asr #1
   12320:	strdeq	r3, [r0], -r4
   12324:	andeq	r4, r1, ip, lsr #6
   12328:	andeq	r3, r0, r6, asr #2
   1232c:	andeq	r3, r0, fp, asr r1
   12330:	andeq	r3, r0, r3, ror #4
   12334:			; <UNDEFINED> instruction: 0x000143bc
   12338:	ldrdeq	r3, [r0], -r6
   1233c:	andeq	r3, r0, fp, ror #3
   12340:	ldrdeq	r3, [r0], -r2
   12344:	andeq	r4, r1, ip, asr #8
   12348:	strdeq	r3, [r0], -r2
   1234c:	andeq	r3, r0, r7, lsl #10
   12350:			; <UNDEFINED> instruction: 0x000035b6
   12354:	andeq	r4, r1, r8, ror #14
   12358:	andeq	r3, r0, lr, ror r5
   1235c:	muleq	r0, r3, r5
   12360:	andeq	r3, r0, lr, lsl r6
   12364:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12368:	andeq	r3, r0, sl, lsl #12
   1236c:	andeq	r3, r0, pc, lsl r6
   12370:	andeq	r3, r0, r9, lsl #13
   12374:	andeq	r4, r1, r0, lsl #17
   12378:	push	{fp, lr}
   1237c:	mov	fp, sp
   12380:	sub	sp, sp, #8
   12384:	ldr	r1, [pc, #20]	; 123a0 <main@@Base+0xd64>
   12388:	add	r1, pc, r1
   1238c:	str	r0, [sp, #4]
   12390:	ldr	r0, [sp, #4]
   12394:	bl	138e0 <mmk_mock_create_internal@@Base>
   12398:	mov	sp, fp
   1239c:	pop	{fp, pc}
   123a0:	andeq	r0, r0, ip, rrx
   123a4:	push	{fp, lr}
   123a8:	mov	fp, sp
   123ac:	sub	sp, sp, #8
   123b0:	ldr	r1, [pc, #20]	; 123cc <main@@Base+0xd90>
   123b4:	add	r1, pc, r1
   123b8:	str	r0, [sp, #4]
   123bc:	ldr	r0, [sp, #4]
   123c0:	bl	138e0 <mmk_mock_create_internal@@Base>
   123c4:	mov	sp, fp
   123c8:	pop	{fp, pc}
   123cc:	andeq	r0, r0, r8, ror #5
   123d0:	push	{fp, lr}
   123d4:	mov	fp, sp
   123d8:	sub	sp, sp, #8
   123dc:	ldr	r1, [pc, #20]	; 123f8 <main@@Base+0xdbc>
   123e0:	add	r1, pc, r1
   123e4:	str	r0, [sp, #4]
   123e8:	ldr	r0, [sp, #4]
   123ec:	bl	138e0 <mmk_mock_create_internal@@Base>
   123f0:	mov	sp, fp
   123f4:	pop	{fp, pc}
   123f8:	andeq	r0, r0, r8, lsr #17
   123fc:	push	{fp, lr}
   12400:	mov	fp, sp
   12404:	sub	sp, sp, #72	; 0x48
   12408:	b	1240c <main@@Base+0xdd0>
   1240c:	b	12410 <main@@Base+0xdd4>
   12410:	b	12414 <main@@Base+0xdd8>
   12414:	bl	13850 <mmk_matcher_ctx@@Base>
   12418:	str	r0, [fp, #-4]
   1241c:	ldr	r0, [fp, #-4]
   12420:	movw	r1, #0
   12424:	cmp	r0, r1
   12428:	beq	1254c <main@@Base+0xf10>
   1242c:	bl	14340 <mmk_ctx@@Base>
   12430:	bl	14190 <mmk_stub_context@@Base>
   12434:	str	r0, [fp, #-8]
   12438:	ldr	r0, [fp, #-4]
   1243c:	ldr	r0, [r0]
   12440:	cmp	r0, #0
   12444:	bne	12490 <main@@Base+0xe54>
   12448:	movw	r0, #40	; 0x28
   1244c:	bl	14b18 <mmk_malloc@@Base>
   12450:	str	r0, [fp, #-12]
   12454:	ldr	r0, [fp, #-12]
   12458:	add	r0, r0, #8
   1245c:	str	r0, [sp, #8]
   12460:	bl	14cf0 <mmk_when_get_result@@Base>
   12464:	ldr	r1, [sp, #8]
   12468:	str	r0, [sp, #4]
   1246c:	mov	r0, r1
   12470:	ldr	r1, [sp, #4]
   12474:	movw	r2, #20
   12478:	bl	1145c <memcpy@plt>
   1247c:	b	12480 <main@@Base+0xe44>
   12480:	ldr	r0, [fp, #-8]
   12484:	ldr	r1, [fp, #-12]
   12488:	bl	14d10 <mmk_when_impl@@Base>
   1248c:	b	12540 <main@@Base+0xf04>
   12490:	ldr	r0, [fp, #-4]
   12494:	ldr	r0, [r0]
   12498:	cmp	r0, #1
   1249c:	bne	1253c <main@@Base+0xf00>
   124a0:	movw	r0, #0
   124a4:	str	r0, [fp, #-16]
   124a8:	ldr	r0, [fp, #-8]
   124ac:	bl	13ae4 <mmk_mock_params_begin@@Base>
   124b0:	str	r0, [fp, #-20]	; 0xffffffec
   124b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   124b8:	movw	r1, #0
   124bc:	cmp	r0, r1
   124c0:	beq	124fc <main@@Base+0xec0>
   124c4:	ldr	r0, [fp, #-4]
   124c8:	str	r0, [fp, #-24]	; 0xffffffe8
   124cc:	b	124d0 <main@@Base+0xe94>
   124d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   124d4:	ldr	r0, [r0]
   124d8:	ldr	r1, [fp, #-16]
   124dc:	add	r0, r1, r0
   124e0:	str	r0, [fp, #-16]
   124e4:	b	124e8 <main@@Base+0xeac>
   124e8:	ldr	r0, [fp, #-8]
   124ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   124f0:	bl	13b04 <mmk_mock_params_next@@Base>
   124f4:	str	r0, [fp, #-20]	; 0xffffffec
   124f8:	b	124b4 <main@@Base+0xe78>
   124fc:	ldr	r0, [fp, #-4]
   12500:	str	r0, [fp, #-28]	; 0xffffffe4
   12504:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12508:	movw	r1, #0
   1250c:	cmp	r0, r1
   12510:	beq	12534 <main@@Base+0xef8>
   12514:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12518:	ldr	r0, [r0, #8]
   1251c:	str	r0, [fp, #-32]	; 0xffffffe0
   12520:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12524:	bl	14b40 <mmk_free@@Base>
   12528:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1252c:	str	r0, [fp, #-28]	; 0xffffffe4
   12530:	b	12504 <main@@Base+0xec8>
   12534:	ldr	r0, [fp, #-16]
   12538:	bl	14598 <mmk_verify_set_times@@Base>
   1253c:	b	12540 <main@@Base+0xf04>
   12540:	b	12544 <main@@Base+0xf08>
   12544:	b	12548 <main@@Base+0xf0c>
   12548:	b	1269c <main@@Base+0x1060>
   1254c:	movw	r0, #0
   12550:	str	r0, [sp, #24]
   12554:	str	r0, [sp, #28]
   12558:	str	r0, [sp, #32]
   1255c:	add	r0, sp, #24
   12560:	str	r0, [sp, #36]	; 0x24
   12564:	b	12568 <main@@Base+0xf2c>
   12568:	ldr	r0, [sp, #36]	; 0x24
   1256c:	movw	r1, #12
   12570:	bl	1464c <mmk_verify_register_call@@Base>
   12574:	bl	13b2c <mmk_mock_get_params@@Base>
   12578:	str	r0, [sp, #20]
   1257c:	ldr	r0, [sp, #20]
   12580:	movw	r1, #0
   12584:	cmp	r0, r1
   12588:	beq	12690 <main@@Base+0x1054>
   1258c:	ldr	r0, [sp, #20]
   12590:	str	r0, [sp, #16]
   12594:	ldr	r0, [sp, #20]
   12598:	ldr	r0, [r0]
   1259c:	str	r0, [sp, #12]
   125a0:	ldr	r0, [sp, #16]
   125a4:	ldr	r0, [r0, #12]
   125a8:	cmp	r0, #0
   125ac:	beq	125c8 <main@@Base+0xf8c>
   125b0:	ldr	r0, [sp, #16]
   125b4:	ldr	r0, [r0, #12]
   125b8:	str	r0, [sp]
   125bc:	bl	114ec <__errno_location@plt>
   125c0:	ldr	r1, [sp]
   125c4:	str	r1, [r0]
   125c8:	ldr	r0, [sp, #16]
   125cc:	ldr	r0, [r0, #20]
   125d0:	movw	r1, #0
   125d4:	cmp	r0, r1
   125d8:	beq	12618 <main@@Base+0xfdc>
   125dc:	ldr	r0, [sp, #16]
   125e0:	ldr	r0, [r0, #16]
   125e4:	movw	r1, #0
   125e8:	cmp	r0, r1
   125ec:	bne	12618 <main@@Base+0xfdc>
   125f0:	b	125f4 <main@@Base+0xfb8>
   125f4:	b	125f8 <main@@Base+0xfbc>
   125f8:	b	125fc <main@@Base+0xfc0>
   125fc:	ldr	r0, [sp, #16]
   12600:	ldr	r0, [r0, #20]
   12604:	blx	r0
   12608:	b	1260c <main@@Base+0xfd0>
   1260c:	b	12610 <main@@Base+0xfd4>
   12610:	b	12614 <main@@Base+0xfd8>
   12614:	b	1269c <main@@Base+0x1060>
   12618:	ldr	r0, [sp, #16]
   1261c:	ldr	r0, [r0, #20]
   12620:	movw	r1, #0
   12624:	cmp	r0, r1
   12628:	beq	12664 <main@@Base+0x1028>
   1262c:	ldr	r0, [sp, #16]
   12630:	ldr	r0, [r0, #16]
   12634:	movw	r1, #0
   12638:	cmp	r0, r1
   1263c:	beq	12664 <main@@Base+0x1028>
   12640:	b	12644 <main@@Base+0x1008>
   12644:	b	12648 <main@@Base+0x100c>
   12648:	ldr	r0, [sp, #16]
   1264c:	ldr	r0, [r0, #20]
   12650:	blx	r0
   12654:	b	12658 <main@@Base+0x101c>
   12658:	b	1265c <main@@Base+0x1020>
   1265c:	b	12660 <main@@Base+0x1024>
   12660:	b	1269c <main@@Base+0x1060>
   12664:	ldr	r0, [sp, #16]
   12668:	ldr	r0, [r0, #16]
   1266c:	movw	r1, #0
   12670:	cmp	r0, r1
   12674:	beq	12684 <main@@Base+0x1048>
   12678:	b	1267c <main@@Base+0x1040>
   1267c:	b	12680 <main@@Base+0x1044>
   12680:	b	1269c <main@@Base+0x1060>
   12684:	b	12688 <main@@Base+0x104c>
   12688:	b	1268c <main@@Base+0x1050>
   1268c:	b	1269c <main@@Base+0x1060>
   12690:	b	12694 <main@@Base+0x1058>
   12694:	b	12698 <main@@Base+0x105c>
   12698:	b	1269c <main@@Base+0x1060>
   1269c:	mov	sp, fp
   126a0:	pop	{fp, pc}
   126a4:	push	{fp, lr}
   126a8:	mov	fp, sp
   126ac:	sub	sp, sp, #128	; 0x80
   126b0:	str	r0, [fp, #-8]
   126b4:	b	126b8 <main@@Base+0x107c>
   126b8:	bl	13850 <mmk_matcher_ctx@@Base>
   126bc:	str	r0, [fp, #-12]
   126c0:	ldr	r0, [fp, #-12]
   126c4:	movw	r1, #0
   126c8:	cmp	r0, r1
   126cc:	beq	12958 <main@@Base+0x131c>
   126d0:	bl	14340 <mmk_ctx@@Base>
   126d4:	bl	14190 <mmk_stub_context@@Base>
   126d8:	str	r0, [fp, #-16]
   126dc:	ldr	r0, [fp, #-12]
   126e0:	ldr	r0, [r0]
   126e4:	cmp	r0, #0
   126e8:	bne	12740 <main@@Base+0x1104>
   126ec:	movw	r0, #44	; 0x2c
   126f0:	bl	14b18 <mmk_malloc@@Base>
   126f4:	str	r0, [fp, #-20]	; 0xffffffec
   126f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   126fc:	add	r0, r0, #8
   12700:	str	r0, [sp, #32]
   12704:	bl	14cf0 <mmk_when_get_result@@Base>
   12708:	ldr	r1, [sp, #32]
   1270c:	str	r0, [sp, #28]
   12710:	mov	r0, r1
   12714:	ldr	r1, [sp, #28]
   12718:	movw	r2, #20
   1271c:	bl	1145c <memcpy@plt>
   12720:	ldr	r0, [fp, #-8]
   12724:	ldr	r1, [fp, #-20]	; 0xffffffec
   12728:	str	r0, [r1, #40]	; 0x28
   1272c:	b	12730 <main@@Base+0x10f4>
   12730:	ldr	r0, [fp, #-16]
   12734:	ldr	r1, [fp, #-20]	; 0xffffffec
   12738:	bl	14d10 <mmk_when_impl@@Base>
   1273c:	b	1293c <main@@Base+0x1300>
   12740:	ldr	r0, [fp, #-12]
   12744:	ldr	r0, [r0]
   12748:	cmp	r0, #1
   1274c:	bne	12938 <main@@Base+0x12fc>
   12750:	movw	r0, #0
   12754:	str	r0, [fp, #-24]	; 0xffffffe8
   12758:	ldr	r0, [fp, #-16]
   1275c:	bl	13ae4 <mmk_mock_params_begin@@Base>
   12760:	str	r0, [fp, #-28]	; 0xffffffe4
   12764:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12768:	movw	r1, #0
   1276c:	cmp	r0, r1
   12770:	beq	128f8 <main@@Base+0x12bc>
   12774:	ldr	r0, [fp, #-12]
   12778:	str	r0, [fp, #-32]	; 0xffffffe0
   1277c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12780:	ldr	r0, [r0, #8]
   12784:	movw	r1, #0
   12788:	cmp	r0, r1
   1278c:	beq	128a0 <main@@Base+0x1264>
   12790:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12794:	ldr	r0, [r0, #8]
   12798:	str	r0, [fp, #-32]	; 0xffffffe0
   1279c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127a0:	ldr	r0, [r0]
   127a4:	cmp	r0, #0
   127a8:	bne	127b0 <main@@Base+0x1174>
   127ac:	b	1289c <main@@Base+0x1260>
   127b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127b4:	ldr	r0, [r0]
   127b8:	and	r0, r0, #-2147483648	; 0x80000000
   127bc:	cmp	r0, #0
   127c0:	beq	1284c <main@@Base+0x1210>
   127c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   127c8:	add	r0, r0, #12
   127cc:	sub	r1, fp, #8
   127d0:	movw	r2, #4
   127d4:	bl	14814 <mmk_memcmp@@Base>
   127d8:	str	r0, [fp, #-36]	; 0xffffffdc
   127dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   127e0:	cmp	r0, #0
   127e4:	bne	12800 <main@@Base+0x11c4>
   127e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127ec:	ldr	r0, [r0]
   127f0:	and	r0, r0, #2
   127f4:	cmp	r0, #0
   127f8:	bne	12800 <main@@Base+0x11c4>
   127fc:	b	128e0 <main@@Base+0x12a4>
   12800:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12804:	cmp	r0, #0
   12808:	bge	12824 <main@@Base+0x11e8>
   1280c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12810:	ldr	r0, [r0]
   12814:	and	r0, r0, #4
   12818:	cmp	r0, #0
   1281c:	bne	12824 <main@@Base+0x11e8>
   12820:	b	128e0 <main@@Base+0x12a4>
   12824:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12828:	cmp	r0, #0
   1282c:	ble	12848 <main@@Base+0x120c>
   12830:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12834:	ldr	r0, [r0]
   12838:	and	r0, r0, #8
   1283c:	cmp	r0, #0
   12840:	bne	12848 <main@@Base+0x120c>
   12844:	b	128e0 <main@@Base+0x12a4>
   12848:	b	12898 <main@@Base+0x125c>
   1284c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12850:	ldr	r0, [r0]
   12854:	cmp	r0, #1
   12858:	bne	12894 <main@@Base+0x1258>
   1285c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12860:	bl	138d8 <mmk_matcher_get_predicate@@Base>
   12864:	str	r0, [fp, #-40]	; 0xffffffd8
   12868:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1286c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12870:	ldr	r1, [r1, #12]
   12874:	str	r0, [sp, #24]
   12878:	mov	r0, r1
   1287c:	ldr	r1, [sp, #24]
   12880:	blx	r1
   12884:	cmp	r0, #0
   12888:	bne	12890 <main@@Base+0x1254>
   1288c:	b	128e0 <main@@Base+0x12a4>
   12890:	b	12894 <main@@Base+0x1258>
   12894:	b	12898 <main@@Base+0x125c>
   12898:	b	1289c <main@@Base+0x1260>
   1289c:	b	128c4 <main@@Base+0x1288>
   128a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128a4:	add	r0, r0, #12
   128a8:	sub	r1, fp, #8
   128ac:	movw	r2, #4
   128b0:	bl	14814 <mmk_memcmp@@Base>
   128b4:	cmp	r0, #0
   128b8:	beq	128c0 <main@@Base+0x1284>
   128bc:	b	128e0 <main@@Base+0x12a4>
   128c0:	b	128c4 <main@@Base+0x1288>
   128c4:	b	128c8 <main@@Base+0x128c>
   128c8:	b	128cc <main@@Base+0x1290>
   128cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   128d0:	ldr	r0, [r0]
   128d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   128d8:	add	r0, r1, r0
   128dc:	str	r0, [fp, #-24]	; 0xffffffe8
   128e0:	b	128e4 <main@@Base+0x12a8>
   128e4:	ldr	r0, [fp, #-16]
   128e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   128ec:	bl	13b04 <mmk_mock_params_next@@Base>
   128f0:	str	r0, [fp, #-28]	; 0xffffffe4
   128f4:	b	12764 <main@@Base+0x1128>
   128f8:	ldr	r0, [fp, #-12]
   128fc:	str	r0, [fp, #-44]	; 0xffffffd4
   12900:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12904:	movw	r1, #0
   12908:	cmp	r0, r1
   1290c:	beq	12930 <main@@Base+0x12f4>
   12910:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12914:	ldr	r0, [r0, #8]
   12918:	str	r0, [fp, #-48]	; 0xffffffd0
   1291c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12920:	bl	14b40 <mmk_free@@Base>
   12924:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12928:	str	r0, [fp, #-44]	; 0xffffffd4
   1292c:	b	12900 <main@@Base+0x12c4>
   12930:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12934:	bl	14598 <mmk_verify_set_times@@Base>
   12938:	b	1293c <main@@Base+0x1300>
   1293c:	b	12940 <main@@Base+0x1304>
   12940:	b	12944 <main@@Base+0x1308>
   12944:	ldr	r0, [pc, #832]	; 12c8c <main@@Base+0x1650>
   12948:	add	r0, pc, r0
   1294c:	ldr	r0, [r0]
   12950:	str	r0, [fp, #-4]
   12954:	b	12c78 <main@@Base+0x163c>
   12958:	movw	r0, #0
   1295c:	str	r0, [sp, #60]	; 0x3c
   12960:	str	r0, [sp, #64]	; 0x40
   12964:	str	r0, [sp, #68]	; 0x44
   12968:	ldr	r0, [fp, #-8]
   1296c:	str	r0, [sp, #72]	; 0x48
   12970:	add	r0, sp, #60	; 0x3c
   12974:	str	r0, [fp, #-52]	; 0xffffffcc
   12978:	b	1297c <main@@Base+0x1340>
   1297c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12980:	movw	r1, #16
   12984:	bl	1464c <mmk_verify_register_call@@Base>
   12988:	bl	13b2c <mmk_mock_get_params@@Base>
   1298c:	str	r0, [sp, #56]	; 0x38
   12990:	ldr	r0, [sp, #56]	; 0x38
   12994:	movw	r1, #0
   12998:	cmp	r0, r1
   1299c:	beq	12c60 <main@@Base+0x1624>
   129a0:	ldr	r0, [sp, #56]	; 0x38
   129a4:	str	r0, [sp, #52]	; 0x34
   129a8:	ldr	r0, [sp, #56]	; 0x38
   129ac:	ldr	r0, [r0]
   129b0:	str	r0, [sp, #48]	; 0x30
   129b4:	ldr	r0, [sp, #48]	; 0x30
   129b8:	ldr	r0, [r0, #8]
   129bc:	movw	r1, #0
   129c0:	cmp	r0, r1
   129c4:	beq	12adc <main@@Base+0x14a0>
   129c8:	ldr	r0, [sp, #48]	; 0x30
   129cc:	ldr	r0, [r0, #8]
   129d0:	str	r0, [sp, #48]	; 0x30
   129d4:	ldr	r0, [sp, #48]	; 0x30
   129d8:	ldr	r0, [r0]
   129dc:	cmp	r0, #0
   129e0:	bne	129e8 <main@@Base+0x13ac>
   129e4:	b	12ad8 <main@@Base+0x149c>
   129e8:	ldr	r0, [sp, #48]	; 0x30
   129ec:	ldr	r0, [r0]
   129f0:	and	r0, r0, #-2147483648	; 0x80000000
   129f4:	cmp	r0, #0
   129f8:	beq	12a8c <main@@Base+0x1450>
   129fc:	sub	r0, fp, #8
   12a00:	mov	r1, r0
   12a04:	str	r0, [sp, #20]
   12a08:	mov	r0, r1
   12a0c:	ldr	r1, [sp, #20]
   12a10:	movw	r2, #4
   12a14:	bl	14814 <mmk_memcmp@@Base>
   12a18:	str	r0, [sp, #44]	; 0x2c
   12a1c:	ldr	r0, [sp, #44]	; 0x2c
   12a20:	cmp	r0, #0
   12a24:	bne	12a40 <main@@Base+0x1404>
   12a28:	ldr	r0, [sp, #48]	; 0x30
   12a2c:	ldr	r0, [r0]
   12a30:	and	r0, r0, #2
   12a34:	cmp	r0, #0
   12a38:	bne	12a40 <main@@Base+0x1404>
   12a3c:	b	12c50 <main@@Base+0x1614>
   12a40:	ldr	r0, [sp, #44]	; 0x2c
   12a44:	cmp	r0, #0
   12a48:	bge	12a64 <main@@Base+0x1428>
   12a4c:	ldr	r0, [sp, #48]	; 0x30
   12a50:	ldr	r0, [r0]
   12a54:	and	r0, r0, #4
   12a58:	cmp	r0, #0
   12a5c:	bne	12a64 <main@@Base+0x1428>
   12a60:	b	12c50 <main@@Base+0x1614>
   12a64:	ldr	r0, [sp, #44]	; 0x2c
   12a68:	cmp	r0, #0
   12a6c:	ble	12a88 <main@@Base+0x144c>
   12a70:	ldr	r0, [sp, #48]	; 0x30
   12a74:	ldr	r0, [r0]
   12a78:	and	r0, r0, #8
   12a7c:	cmp	r0, #0
   12a80:	bne	12a88 <main@@Base+0x144c>
   12a84:	b	12c50 <main@@Base+0x1614>
   12a88:	b	12ad4 <main@@Base+0x1498>
   12a8c:	ldr	r0, [sp, #48]	; 0x30
   12a90:	ldr	r0, [r0]
   12a94:	cmp	r0, #1
   12a98:	bne	12ad0 <main@@Base+0x1494>
   12a9c:	ldr	r0, [sp, #48]	; 0x30
   12aa0:	bl	138d8 <mmk_matcher_get_predicate@@Base>
   12aa4:	str	r0, [sp, #40]	; 0x28
   12aa8:	ldr	r0, [sp, #40]	; 0x28
   12aac:	ldr	r1, [fp, #-8]
   12ab0:	str	r0, [sp, #16]
   12ab4:	mov	r0, r1
   12ab8:	ldr	r1, [sp, #16]
   12abc:	blx	r1
   12ac0:	cmp	r0, #0
   12ac4:	bne	12acc <main@@Base+0x1490>
   12ac8:	b	12c50 <main@@Base+0x1614>
   12acc:	b	12ad0 <main@@Base+0x1494>
   12ad0:	b	12ad4 <main@@Base+0x1498>
   12ad4:	b	12ad8 <main@@Base+0x149c>
   12ad8:	b	12b04 <main@@Base+0x14c8>
   12adc:	sub	r0, fp, #8
   12ae0:	ldr	r1, [sp, #52]	; 0x34
   12ae4:	add	r1, r1, #28
   12ae8:	add	r1, r1, #12
   12aec:	movw	r2, #4
   12af0:	bl	14814 <mmk_memcmp@@Base>
   12af4:	cmp	r0, #0
   12af8:	beq	12b00 <main@@Base+0x14c4>
   12afc:	b	12c50 <main@@Base+0x1614>
   12b00:	b	12b04 <main@@Base+0x14c8>
   12b04:	ldr	r0, [sp, #52]	; 0x34
   12b08:	ldr	r0, [r0, #12]
   12b0c:	cmp	r0, #0
   12b10:	beq	12b2c <main@@Base+0x14f0>
   12b14:	ldr	r0, [sp, #52]	; 0x34
   12b18:	ldr	r0, [r0, #12]
   12b1c:	str	r0, [sp, #12]
   12b20:	bl	114ec <__errno_location@plt>
   12b24:	ldr	r1, [sp, #12]
   12b28:	str	r1, [r0]
   12b2c:	ldr	r0, [sp, #52]	; 0x34
   12b30:	ldr	r0, [r0, #20]
   12b34:	movw	r1, #0
   12b38:	cmp	r0, r1
   12b3c:	beq	12b98 <main@@Base+0x155c>
   12b40:	ldr	r0, [sp, #52]	; 0x34
   12b44:	ldr	r0, [r0, #16]
   12b48:	movw	r1, #0
   12b4c:	cmp	r0, r1
   12b50:	bne	12b98 <main@@Base+0x155c>
   12b54:	b	12b58 <main@@Base+0x151c>
   12b58:	b	12b5c <main@@Base+0x1520>
   12b5c:	b	12b60 <main@@Base+0x1524>
   12b60:	ldr	r0, [sp, #52]	; 0x34
   12b64:	ldr	r0, [r0, #20]
   12b68:	ldr	r1, [fp, #-8]
   12b6c:	str	r0, [sp, #8]
   12b70:	mov	r0, r1
   12b74:	ldr	r1, [sp, #8]
   12b78:	blx	r1
   12b7c:	str	r0, [sp, #36]	; 0x24
   12b80:	b	12b84 <main@@Base+0x1548>
   12b84:	b	12b88 <main@@Base+0x154c>
   12b88:	b	12b8c <main@@Base+0x1550>
   12b8c:	ldr	r0, [sp, #36]	; 0x24
   12b90:	str	r0, [fp, #-4]
   12b94:	b	12c78 <main@@Base+0x163c>
   12b98:	ldr	r0, [sp, #52]	; 0x34
   12b9c:	ldr	r0, [r0, #20]
   12ba0:	movw	r1, #0
   12ba4:	cmp	r0, r1
   12ba8:	beq	12c04 <main@@Base+0x15c8>
   12bac:	ldr	r0, [sp, #52]	; 0x34
   12bb0:	ldr	r0, [r0, #16]
   12bb4:	movw	r1, #0
   12bb8:	cmp	r0, r1
   12bbc:	beq	12c04 <main@@Base+0x15c8>
   12bc0:	b	12bc4 <main@@Base+0x1588>
   12bc4:	b	12bc8 <main@@Base+0x158c>
   12bc8:	ldr	r0, [sp, #52]	; 0x34
   12bcc:	ldr	r0, [r0, #20]
   12bd0:	ldr	r1, [fp, #-8]
   12bd4:	str	r0, [sp, #4]
   12bd8:	mov	r0, r1
   12bdc:	ldr	r1, [sp, #4]
   12be0:	blx	r1
   12be4:	b	12be8 <main@@Base+0x15ac>
   12be8:	b	12bec <main@@Base+0x15b0>
   12bec:	b	12bf0 <main@@Base+0x15b4>
   12bf0:	ldr	r0, [sp, #52]	; 0x34
   12bf4:	ldr	r0, [r0, #16]
   12bf8:	ldr	r0, [r0]
   12bfc:	str	r0, [fp, #-4]
   12c00:	b	12c78 <main@@Base+0x163c>
   12c04:	ldr	r0, [sp, #52]	; 0x34
   12c08:	ldr	r0, [r0, #16]
   12c0c:	movw	r1, #0
   12c10:	cmp	r0, r1
   12c14:	beq	12c34 <main@@Base+0x15f8>
   12c18:	b	12c1c <main@@Base+0x15e0>
   12c1c:	b	12c20 <main@@Base+0x15e4>
   12c20:	ldr	r0, [sp, #52]	; 0x34
   12c24:	ldr	r0, [r0, #16]
   12c28:	ldr	r0, [r0]
   12c2c:	str	r0, [fp, #-4]
   12c30:	b	12c78 <main@@Base+0x163c>
   12c34:	b	12c38 <main@@Base+0x15fc>
   12c38:	b	12c3c <main@@Base+0x1600>
   12c3c:	ldr	r0, [pc, #68]	; 12c88 <main@@Base+0x164c>
   12c40:	add	r0, pc, r0
   12c44:	ldr	r0, [r0]
   12c48:	str	r0, [fp, #-4]
   12c4c:	b	12c78 <main@@Base+0x163c>
   12c50:	ldr	r0, [sp, #56]	; 0x38
   12c54:	ldr	r0, [r0, #4]
   12c58:	str	r0, [sp, #56]	; 0x38
   12c5c:	b	12990 <main@@Base+0x1354>
   12c60:	b	12c64 <main@@Base+0x1628>
   12c64:	b	12c68 <main@@Base+0x162c>
   12c68:	ldr	r0, [pc, #20]	; 12c84 <main@@Base+0x1648>
   12c6c:	add	r0, pc, r0
   12c70:	ldr	r0, [r0]
   12c74:	str	r0, [fp, #-4]
   12c78:	ldr	r0, [fp, #-4]
   12c7c:	mov	sp, fp
   12c80:	pop	{fp, pc}
   12c84:	andeq	r3, r1, r8, ror #8
   12c88:	muleq	r1, r4, r4
   12c8c:	andeq	r3, r1, ip, lsl #15
   12c90:	sub	sp, sp, #12
   12c94:	push	{fp, lr}
   12c98:	mov	fp, sp
   12c9c:	sub	sp, sp, #212	; 0xd4
   12ca0:	str	r3, [fp, #16]
   12ca4:	str	r2, [fp, #12]
   12ca8:	str	r1, [fp, #8]
   12cac:	ldr	r1, [pc, #2300]	; 135b0 <main@@Base+0x1f74>
   12cb0:	add	r1, pc, r1
   12cb4:	str	r0, [fp, #-8]
   12cb8:	str	r1, [fp, #-12]
   12cbc:	sub	r0, fp, #16
   12cc0:	add	r1, fp, #8
   12cc4:	str	r1, [r0]
   12cc8:	bl	13850 <mmk_matcher_ctx@@Base>
   12ccc:	str	r0, [fp, #-24]	; 0xffffffe8
   12cd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12cd4:	movw	r1, #0
   12cd8:	cmp	r0, r1
   12cdc:	beq	13210 <main@@Base+0x1bd4>
   12ce0:	bl	14340 <mmk_ctx@@Base>
   12ce4:	bl	14190 <mmk_stub_context@@Base>
   12ce8:	str	r0, [fp, #-28]	; 0xffffffe4
   12cec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12cf0:	ldr	r0, [r0]
   12cf4:	cmp	r0, #0
   12cf8:	bne	12dc0 <main@@Base+0x1784>
   12cfc:	movw	r0, #44	; 0x2c
   12d00:	bl	14b18 <mmk_malloc@@Base>
   12d04:	str	r0, [fp, #-32]	; 0xffffffe0
   12d08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d0c:	add	r0, r0, #8
   12d10:	str	r0, [sp, #48]	; 0x30
   12d14:	bl	14cf0 <mmk_when_get_result@@Base>
   12d18:	ldr	r1, [sp, #48]	; 0x30
   12d1c:	str	r0, [sp, #44]	; 0x2c
   12d20:	mov	r0, r1
   12d24:	ldr	r1, [sp, #44]	; 0x2c
   12d28:	movw	r2, #20
   12d2c:	bl	1145c <memcpy@plt>
   12d30:	ldr	r0, [fp, #-8]
   12d34:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12d38:	str	r0, [r1, #40]	; 0x28
   12d3c:	mov	r0, #0
   12d40:	str	r0, [fp, #-36]	; 0xffffffdc
   12d44:	str	r0, [fp, #-40]	; 0xffffffd8
   12d48:	ldr	r0, [fp, #-16]
   12d4c:	str	r0, [fp, #-20]	; 0xffffffec
   12d50:	ldr	r0, [fp, #-12]
   12d54:	ldr	r1, [fp, #-8]
   12d58:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d5c:	sub	r3, fp, #36	; 0x24
   12d60:	sub	ip, fp, #40	; 0x28
   12d64:	str	r0, [sp, #40]	; 0x28
   12d68:	mov	r0, r1
   12d6c:	mov	r1, r2
   12d70:	mov	r2, r3
   12d74:	mov	r3, ip
   12d78:	ldr	ip, [sp, #40]	; 0x28
   12d7c:	blx	ip
   12d80:	str	r0, [fp, #-44]	; 0xffffffd4
   12d84:	sub	r0, fp, #20
   12d88:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12d8c:	cmp	r1, #0
   12d90:	beq	12dac <main@@Base+0x1770>
   12d94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d98:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12d9c:	str	r0, [r1, #32]
   12da0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12da4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12da8:	str	r0, [r1, #36]	; 0x24
   12dac:	b	12db0 <main@@Base+0x1774>
   12db0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12db4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12db8:	bl	14d10 <mmk_when_impl@@Base>
   12dbc:	b	131f8 <main@@Base+0x1bbc>
   12dc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12dc4:	ldr	r0, [r0]
   12dc8:	cmp	r0, #1
   12dcc:	bne	131f4 <main@@Base+0x1bb8>
   12dd0:	movw	r0, #0
   12dd4:	str	r0, [fp, #-48]	; 0xffffffd0
   12dd8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12ddc:	bl	13ae4 <mmk_mock_params_begin@@Base>
   12de0:	str	r0, [fp, #-52]	; 0xffffffcc
   12de4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12de8:	movw	r1, #0
   12dec:	cmp	r0, r1
   12df0:	beq	131b4 <main@@Base+0x1b78>
   12df4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12df8:	str	r0, [fp, #-56]	; 0xffffffc8
   12dfc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e00:	ldr	r0, [r0, #8]
   12e04:	movw	r1, #0
   12e08:	cmp	r0, r1
   12e0c:	beq	12f20 <main@@Base+0x18e4>
   12e10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e14:	ldr	r0, [r0, #8]
   12e18:	str	r0, [fp, #-56]	; 0xffffffc8
   12e1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e20:	ldr	r0, [r0]
   12e24:	cmp	r0, #0
   12e28:	bne	12e30 <main@@Base+0x17f4>
   12e2c:	b	12f1c <main@@Base+0x18e0>
   12e30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e34:	ldr	r0, [r0]
   12e38:	and	r0, r0, #-2147483648	; 0x80000000
   12e3c:	cmp	r0, #0
   12e40:	beq	12ecc <main@@Base+0x1890>
   12e44:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12e48:	add	r0, r0, #12
   12e4c:	sub	r1, fp, #8
   12e50:	movw	r2, #4
   12e54:	bl	14814 <mmk_memcmp@@Base>
   12e58:	str	r0, [fp, #-60]	; 0xffffffc4
   12e5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e60:	cmp	r0, #0
   12e64:	bne	12e80 <main@@Base+0x1844>
   12e68:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e6c:	ldr	r0, [r0]
   12e70:	and	r0, r0, #2
   12e74:	cmp	r0, #0
   12e78:	bne	12e80 <main@@Base+0x1844>
   12e7c:	b	1319c <main@@Base+0x1b60>
   12e80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e84:	cmp	r0, #0
   12e88:	bge	12ea4 <main@@Base+0x1868>
   12e8c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e90:	ldr	r0, [r0]
   12e94:	and	r0, r0, #4
   12e98:	cmp	r0, #0
   12e9c:	bne	12ea4 <main@@Base+0x1868>
   12ea0:	b	1319c <main@@Base+0x1b60>
   12ea4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ea8:	cmp	r0, #0
   12eac:	ble	12ec8 <main@@Base+0x188c>
   12eb0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12eb4:	ldr	r0, [r0]
   12eb8:	and	r0, r0, #8
   12ebc:	cmp	r0, #0
   12ec0:	bne	12ec8 <main@@Base+0x188c>
   12ec4:	b	1319c <main@@Base+0x1b60>
   12ec8:	b	12f18 <main@@Base+0x18dc>
   12ecc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ed0:	ldr	r0, [r0]
   12ed4:	cmp	r0, #1
   12ed8:	bne	12f14 <main@@Base+0x18d8>
   12edc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ee0:	bl	138d8 <mmk_matcher_get_predicate@@Base>
   12ee4:	str	r0, [fp, #-64]	; 0xffffffc0
   12ee8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12eec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ef0:	ldr	r1, [r1, #12]
   12ef4:	str	r0, [sp, #36]	; 0x24
   12ef8:	mov	r0, r1
   12efc:	ldr	r1, [sp, #36]	; 0x24
   12f00:	blx	r1
   12f04:	cmp	r0, #0
   12f08:	bne	12f10 <main@@Base+0x18d4>
   12f0c:	b	1319c <main@@Base+0x1b60>
   12f10:	b	12f14 <main@@Base+0x18d8>
   12f14:	b	12f18 <main@@Base+0x18dc>
   12f18:	b	12f1c <main@@Base+0x18e0>
   12f1c:	b	12f44 <main@@Base+0x1908>
   12f20:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f24:	add	r0, r0, #12
   12f28:	sub	r1, fp, #8
   12f2c:	movw	r2, #4
   12f30:	bl	14814 <mmk_memcmp@@Base>
   12f34:	cmp	r0, #0
   12f38:	beq	12f40 <main@@Base+0x1904>
   12f3c:	b	1319c <main@@Base+0x1b60>
   12f40:	b	12f44 <main@@Base+0x1908>
   12f44:	b	12f48 <main@@Base+0x190c>
   12f48:	mov	r0, #0
   12f4c:	str	r0, [fp, #-68]	; 0xffffffbc
   12f50:	str	r0, [fp, #-72]	; 0xffffffb8
   12f54:	ldr	r0, [fp, #-16]
   12f58:	str	r0, [fp, #-20]	; 0xffffffec
   12f5c:	ldr	r0, [fp, #-12]
   12f60:	ldr	r1, [fp, #-8]
   12f64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f68:	sub	r3, fp, #68	; 0x44
   12f6c:	sub	ip, fp, #72	; 0x48
   12f70:	str	r0, [sp, #32]
   12f74:	mov	r0, r1
   12f78:	mov	r1, r2
   12f7c:	mov	r2, r3
   12f80:	mov	r3, ip
   12f84:	ldr	ip, [sp, #32]
   12f88:	blx	ip
   12f8c:	str	r0, [fp, #-76]	; 0xffffffb4
   12f90:	sub	r0, fp, #20
   12f94:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12f98:	cmp	r1, #0
   12f9c:	beq	12fb4 <main@@Base+0x1978>
   12fa0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12fa4:	ldr	r0, [r0, #4]
   12fa8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12fac:	cmp	r0, r1
   12fb0:	beq	12fb8 <main@@Base+0x197c>
   12fb4:	b	1319c <main@@Base+0x1b60>
   12fb8:	movw	r0, #0
   12fbc:	str	r0, [fp, #-80]	; 0xffffffb0
   12fc0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12fc4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12fc8:	cmp	r0, r1
   12fcc:	bcs	13180 <main@@Base+0x1b44>
   12fd0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12fd4:	ldr	r0, [r0, #8]
   12fd8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12fdc:	ldr	r0, [r0, r1, lsl #2]
   12fe0:	str	r0, [fp, #-84]	; 0xffffffac
   12fe4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fe8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12fec:	add	r0, r0, r1, lsl #2
   12ff0:	ldr	r0, [r0]
   12ff4:	str	r0, [fp, #-88]	; 0xffffffa8
   12ff8:	ldr	r0, [fp, #-84]	; 0xffffffac
   12ffc:	ldr	r0, [r0]
   13000:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13004:	ldr	r1, [r1]
   13008:	cmp	r0, r1
   1300c:	beq	13014 <main@@Base+0x19d8>
   13010:	b	1319c <main@@Base+0x1b60>
   13014:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13018:	ldr	r0, [r0, #8]
   1301c:	movw	r1, #0
   13020:	cmp	r0, r1
   13024:	beq	1313c <main@@Base+0x1b00>
   13028:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1302c:	ldr	r0, [r0, #8]
   13030:	str	r0, [fp, #-56]	; 0xffffffc8
   13034:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13038:	ldr	r0, [r0]
   1303c:	cmp	r0, #0
   13040:	bne	13048 <main@@Base+0x1a0c>
   13044:	b	13138 <main@@Base+0x1afc>
   13048:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1304c:	ldr	r0, [r0]
   13050:	and	r0, r0, #-2147483648	; 0x80000000
   13054:	cmp	r0, #0
   13058:	beq	130ec <main@@Base+0x1ab0>
   1305c:	ldr	r0, [fp, #-84]	; 0xffffffac
   13060:	add	r0, r0, #4
   13064:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13068:	add	r1, r1, #4
   1306c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13070:	ldr	r2, [r2]
   13074:	bl	14814 <mmk_memcmp@@Base>
   13078:	str	r0, [fp, #-92]	; 0xffffffa4
   1307c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13080:	cmp	r0, #0
   13084:	bne	130a0 <main@@Base+0x1a64>
   13088:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1308c:	ldr	r0, [r0]
   13090:	and	r0, r0, #2
   13094:	cmp	r0, #0
   13098:	bne	130a0 <main@@Base+0x1a64>
   1309c:	b	1319c <main@@Base+0x1b60>
   130a0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   130a4:	cmp	r0, #0
   130a8:	bge	130c4 <main@@Base+0x1a88>
   130ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   130b0:	ldr	r0, [r0]
   130b4:	and	r0, r0, #4
   130b8:	cmp	r0, #0
   130bc:	bne	130c4 <main@@Base+0x1a88>
   130c0:	b	1319c <main@@Base+0x1b60>
   130c4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   130c8:	cmp	r0, #0
   130cc:	ble	130e8 <main@@Base+0x1aac>
   130d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   130d4:	ldr	r0, [r0]
   130d8:	and	r0, r0, #8
   130dc:	cmp	r0, #0
   130e0:	bne	130e8 <main@@Base+0x1aac>
   130e4:	b	1319c <main@@Base+0x1b60>
   130e8:	b	13134 <main@@Base+0x1af8>
   130ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   130f0:	ldr	r0, [r0]
   130f4:	cmp	r0, #1
   130f8:	bne	13130 <main@@Base+0x1af4>
   130fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13100:	bl	138d8 <mmk_matcher_get_predicate@@Base>
   13104:	str	r0, [fp, #-96]	; 0xffffffa0
   13108:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1310c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13110:	str	r0, [sp, #28]
   13114:	mov	r0, r1
   13118:	ldr	r1, [sp, #28]
   1311c:	blx	r1
   13120:	cmp	r0, #0
   13124:	bne	1312c <main@@Base+0x1af0>
   13128:	b	1319c <main@@Base+0x1b60>
   1312c:	b	13130 <main@@Base+0x1af4>
   13130:	b	13134 <main@@Base+0x1af8>
   13134:	b	13138 <main@@Base+0x1afc>
   13138:	b	13168 <main@@Base+0x1b2c>
   1313c:	ldr	r0, [fp, #-84]	; 0xffffffac
   13140:	add	r0, r0, #4
   13144:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13148:	add	r1, r1, #4
   1314c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13150:	ldr	r2, [r2]
   13154:	bl	14814 <mmk_memcmp@@Base>
   13158:	cmp	r0, #0
   1315c:	beq	13164 <main@@Base+0x1b28>
   13160:	b	1319c <main@@Base+0x1b60>
   13164:	b	13168 <main@@Base+0x1b2c>
   13168:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1316c:	bl	14b40 <mmk_free@@Base>
   13170:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13174:	add	r0, r0, #1
   13178:	str	r0, [fp, #-80]	; 0xffffffb0
   1317c:	b	12fc0 <main@@Base+0x1984>
   13180:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13184:	bl	14b40 <mmk_free@@Base>
   13188:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1318c:	ldr	r0, [r0]
   13190:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13194:	add	r0, r1, r0
   13198:	str	r0, [fp, #-48]	; 0xffffffd0
   1319c:	b	131a0 <main@@Base+0x1b64>
   131a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   131a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   131a8:	bl	13b04 <mmk_mock_params_next@@Base>
   131ac:	str	r0, [fp, #-52]	; 0xffffffcc
   131b0:	b	12de4 <main@@Base+0x17a8>
   131b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131b8:	str	r0, [fp, #-100]	; 0xffffff9c
   131bc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   131c0:	movw	r1, #0
   131c4:	cmp	r0, r1
   131c8:	beq	131ec <main@@Base+0x1bb0>
   131cc:	ldr	r0, [fp, #-100]	; 0xffffff9c
   131d0:	ldr	r0, [r0, #8]
   131d4:	str	r0, [fp, #-104]	; 0xffffff98
   131d8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   131dc:	bl	14b40 <mmk_free@@Base>
   131e0:	ldr	r0, [fp, #-104]	; 0xffffff98
   131e4:	str	r0, [fp, #-100]	; 0xffffff9c
   131e8:	b	131bc <main@@Base+0x1b80>
   131ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131f0:	bl	14598 <mmk_verify_set_times@@Base>
   131f4:	b	131f8 <main@@Base+0x1bbc>
   131f8:	ldr	r0, [pc, #956]	; 135bc <main@@Base+0x1f80>
   131fc:	add	r0, pc, r0
   13200:	sub	r1, fp, #16
   13204:	ldr	r0, [r0]
   13208:	str	r0, [fp, #-4]
   1320c:	b	1359c <main@@Base+0x1f60>
   13210:	movw	r0, #0
   13214:	str	r0, [sp, #88]	; 0x58
   13218:	str	r0, [sp, #92]	; 0x5c
   1321c:	str	r0, [sp, #96]	; 0x60
   13220:	ldr	r0, [fp, #-8]
   13224:	str	r0, [sp, #100]	; 0x64
   13228:	add	r0, sp, #88	; 0x58
   1322c:	str	r0, [sp, #104]	; 0x68
   13230:	mov	r0, #0
   13234:	str	r0, [sp, #84]	; 0x54
   13238:	str	r0, [sp, #80]	; 0x50
   1323c:	ldr	r0, [fp, #-16]
   13240:	str	r0, [fp, #-20]	; 0xffffffec
   13244:	ldr	r0, [fp, #-12]
   13248:	ldr	r1, [fp, #-8]
   1324c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13250:	add	r3, sp, #84	; 0x54
   13254:	add	ip, sp, #80	; 0x50
   13258:	str	r0, [sp, #24]
   1325c:	mov	r0, r1
   13260:	mov	r1, r2
   13264:	mov	r2, r3
   13268:	mov	r3, ip
   1326c:	ldr	ip, [sp, #24]
   13270:	blx	ip
   13274:	str	r0, [sp, #76]	; 0x4c
   13278:	sub	r0, fp, #20
   1327c:	ldr	r1, [sp, #76]	; 0x4c
   13280:	cmp	r1, #0
   13284:	beq	132a0 <main@@Base+0x1c64>
   13288:	ldr	r0, [sp, #84]	; 0x54
   1328c:	ldr	r1, [sp, #104]	; 0x68
   13290:	str	r0, [r1, #4]
   13294:	ldr	r0, [sp, #80]	; 0x50
   13298:	ldr	r1, [sp, #104]	; 0x68
   1329c:	str	r0, [r1, #8]
   132a0:	b	132a4 <main@@Base+0x1c68>
   132a4:	ldr	r0, [sp, #104]	; 0x68
   132a8:	movw	r1, #16
   132ac:	bl	1464c <mmk_verify_register_call@@Base>
   132b0:	bl	13b2c <mmk_mock_get_params@@Base>
   132b4:	str	r0, [sp, #72]	; 0x48
   132b8:	ldr	r0, [sp, #72]	; 0x48
   132bc:	movw	r1, #0
   132c0:	cmp	r0, r1
   132c4:	beq	13588 <main@@Base+0x1f4c>
   132c8:	ldr	r0, [sp, #72]	; 0x48
   132cc:	str	r0, [sp, #68]	; 0x44
   132d0:	ldr	r0, [sp, #72]	; 0x48
   132d4:	ldr	r0, [r0]
   132d8:	str	r0, [sp, #64]	; 0x40
   132dc:	ldr	r0, [sp, #64]	; 0x40
   132e0:	ldr	r0, [r0, #8]
   132e4:	movw	r1, #0
   132e8:	cmp	r0, r1
   132ec:	beq	13404 <main@@Base+0x1dc8>
   132f0:	ldr	r0, [sp, #64]	; 0x40
   132f4:	ldr	r0, [r0, #8]
   132f8:	str	r0, [sp, #64]	; 0x40
   132fc:	ldr	r0, [sp, #64]	; 0x40
   13300:	ldr	r0, [r0]
   13304:	cmp	r0, #0
   13308:	bne	13310 <main@@Base+0x1cd4>
   1330c:	b	13400 <main@@Base+0x1dc4>
   13310:	ldr	r0, [sp, #64]	; 0x40
   13314:	ldr	r0, [r0]
   13318:	and	r0, r0, #-2147483648	; 0x80000000
   1331c:	cmp	r0, #0
   13320:	beq	133b4 <main@@Base+0x1d78>
   13324:	sub	r0, fp, #8
   13328:	mov	r1, r0
   1332c:	str	r0, [sp, #20]
   13330:	mov	r0, r1
   13334:	ldr	r1, [sp, #20]
   13338:	movw	r2, #4
   1333c:	bl	14814 <mmk_memcmp@@Base>
   13340:	str	r0, [sp, #60]	; 0x3c
   13344:	ldr	r0, [sp, #60]	; 0x3c
   13348:	cmp	r0, #0
   1334c:	bne	13368 <main@@Base+0x1d2c>
   13350:	ldr	r0, [sp, #64]	; 0x40
   13354:	ldr	r0, [r0]
   13358:	and	r0, r0, #2
   1335c:	cmp	r0, #0
   13360:	bne	13368 <main@@Base+0x1d2c>
   13364:	b	13578 <main@@Base+0x1f3c>
   13368:	ldr	r0, [sp, #60]	; 0x3c
   1336c:	cmp	r0, #0
   13370:	bge	1338c <main@@Base+0x1d50>
   13374:	ldr	r0, [sp, #64]	; 0x40
   13378:	ldr	r0, [r0]
   1337c:	and	r0, r0, #4
   13380:	cmp	r0, #0
   13384:	bne	1338c <main@@Base+0x1d50>
   13388:	b	13578 <main@@Base+0x1f3c>
   1338c:	ldr	r0, [sp, #60]	; 0x3c
   13390:	cmp	r0, #0
   13394:	ble	133b0 <main@@Base+0x1d74>
   13398:	ldr	r0, [sp, #64]	; 0x40
   1339c:	ldr	r0, [r0]
   133a0:	and	r0, r0, #8
   133a4:	cmp	r0, #0
   133a8:	bne	133b0 <main@@Base+0x1d74>
   133ac:	b	13578 <main@@Base+0x1f3c>
   133b0:	b	133fc <main@@Base+0x1dc0>
   133b4:	ldr	r0, [sp, #64]	; 0x40
   133b8:	ldr	r0, [r0]
   133bc:	cmp	r0, #1
   133c0:	bne	133f8 <main@@Base+0x1dbc>
   133c4:	ldr	r0, [sp, #64]	; 0x40
   133c8:	bl	138d8 <mmk_matcher_get_predicate@@Base>
   133cc:	str	r0, [sp, #56]	; 0x38
   133d0:	ldr	r0, [sp, #56]	; 0x38
   133d4:	ldr	r1, [fp, #-8]
   133d8:	str	r0, [sp, #16]
   133dc:	mov	r0, r1
   133e0:	ldr	r1, [sp, #16]
   133e4:	blx	r1
   133e8:	cmp	r0, #0
   133ec:	bne	133f4 <main@@Base+0x1db8>
   133f0:	b	13578 <main@@Base+0x1f3c>
   133f4:	b	133f8 <main@@Base+0x1dbc>
   133f8:	b	133fc <main@@Base+0x1dc0>
   133fc:	b	13400 <main@@Base+0x1dc4>
   13400:	b	1342c <main@@Base+0x1df0>
   13404:	sub	r0, fp, #8
   13408:	ldr	r1, [sp, #68]	; 0x44
   1340c:	add	r1, r1, #28
   13410:	add	r1, r1, #12
   13414:	movw	r2, #4
   13418:	bl	14814 <mmk_memcmp@@Base>
   1341c:	cmp	r0, #0
   13420:	beq	13428 <main@@Base+0x1dec>
   13424:	b	13578 <main@@Base+0x1f3c>
   13428:	b	1342c <main@@Base+0x1df0>
   1342c:	ldr	r0, [sp, #68]	; 0x44
   13430:	ldr	r0, [r0, #12]
   13434:	cmp	r0, #0
   13438:	beq	13454 <main@@Base+0x1e18>
   1343c:	ldr	r0, [sp, #68]	; 0x44
   13440:	ldr	r0, [r0, #12]
   13444:	str	r0, [sp, #12]
   13448:	bl	114ec <__errno_location@plt>
   1344c:	ldr	r1, [sp, #12]
   13450:	str	r1, [r0]
   13454:	ldr	r0, [sp, #68]	; 0x44
   13458:	ldr	r0, [r0, #20]
   1345c:	movw	r1, #0
   13460:	cmp	r0, r1
   13464:	beq	134c4 <main@@Base+0x1e88>
   13468:	ldr	r0, [sp, #68]	; 0x44
   1346c:	ldr	r0, [r0, #16]
   13470:	movw	r1, #0
   13474:	cmp	r0, r1
   13478:	bne	134c4 <main@@Base+0x1e88>
   1347c:	b	13480 <main@@Base+0x1e44>
   13480:	ldr	r0, [fp, #-16]
   13484:	str	r0, [fp, #-20]	; 0xffffffec
   13488:	ldr	r0, [sp, #68]	; 0x44
   1348c:	ldr	r0, [r0, #20]
   13490:	ldr	r1, [fp, #-8]
   13494:	ldr	r2, [fp, #-20]	; 0xffffffec
   13498:	str	r0, [sp, #8]
   1349c:	mov	r0, r1
   134a0:	mov	r1, r2
   134a4:	ldr	r2, [sp, #8]
   134a8:	blx	r2
   134ac:	str	r0, [sp, #52]	; 0x34
   134b0:	sub	r0, fp, #20
   134b4:	sub	r1, fp, #16
   134b8:	ldr	r2, [sp, #52]	; 0x34
   134bc:	str	r2, [fp, #-4]
   134c0:	b	1359c <main@@Base+0x1f60>
   134c4:	ldr	r0, [sp, #68]	; 0x44
   134c8:	ldr	r0, [r0, #20]
   134cc:	movw	r1, #0
   134d0:	cmp	r0, r1
   134d4:	beq	13534 <main@@Base+0x1ef8>
   134d8:	ldr	r0, [sp, #68]	; 0x44
   134dc:	ldr	r0, [r0, #16]
   134e0:	movw	r1, #0
   134e4:	cmp	r0, r1
   134e8:	beq	13534 <main@@Base+0x1ef8>
   134ec:	ldr	r0, [fp, #-16]
   134f0:	str	r0, [fp, #-20]	; 0xffffffec
   134f4:	ldr	r0, [sp, #68]	; 0x44
   134f8:	ldr	r0, [r0, #20]
   134fc:	ldr	r1, [fp, #-8]
   13500:	ldr	r2, [fp, #-20]	; 0xffffffec
   13504:	str	r0, [sp, #4]
   13508:	mov	r0, r1
   1350c:	mov	r1, r2
   13510:	ldr	r2, [sp, #4]
   13514:	blx	r2
   13518:	sub	r1, fp, #20
   1351c:	sub	r2, fp, #16
   13520:	ldr	r3, [sp, #68]	; 0x44
   13524:	ldr	r3, [r3, #16]
   13528:	ldr	r3, [r3]
   1352c:	str	r3, [fp, #-4]
   13530:	b	1359c <main@@Base+0x1f60>
   13534:	ldr	r0, [sp, #68]	; 0x44
   13538:	ldr	r0, [r0, #16]
   1353c:	movw	r1, #0
   13540:	cmp	r0, r1
   13544:	beq	13560 <main@@Base+0x1f24>
   13548:	sub	r0, fp, #16
   1354c:	ldr	r1, [sp, #68]	; 0x44
   13550:	ldr	r1, [r1, #16]
   13554:	ldr	r1, [r1]
   13558:	str	r1, [fp, #-4]
   1355c:	b	1359c <main@@Base+0x1f60>
   13560:	ldr	r0, [pc, #80]	; 135b8 <main@@Base+0x1f7c>
   13564:	add	r0, pc, r0
   13568:	sub	r1, fp, #16
   1356c:	ldr	r0, [r0]
   13570:	str	r0, [fp, #-4]
   13574:	b	1359c <main@@Base+0x1f60>
   13578:	ldr	r0, [sp, #72]	; 0x48
   1357c:	ldr	r0, [r0, #4]
   13580:	str	r0, [sp, #72]	; 0x48
   13584:	b	132b8 <main@@Base+0x1c7c>
   13588:	ldr	r0, [pc, #36]	; 135b4 <main@@Base+0x1f78>
   1358c:	add	r0, pc, r0
   13590:	sub	r1, fp, #16
   13594:	ldr	r0, [r0]
   13598:	str	r0, [fp, #-4]
   1359c:	ldr	r0, [fp, #-4]
   135a0:	mov	sp, fp
   135a4:	pop	{fp, lr}
   135a8:	add	sp, sp, #12
   135ac:	bx	lr
   135b0:	andeq	r0, r0, r8, lsl #18
   135b4:	andeq	r2, r1, ip, asr #22
   135b8:	andeq	r2, r1, r4, ror fp
   135bc:	ldrdeq	r2, [r1], -ip
   135c0:	push	{fp, lr}
   135c4:	mov	fp, sp
   135c8:	sub	sp, sp, #32
   135cc:	str	r1, [fp, #-8]
   135d0:	str	r0, [fp, #-12]
   135d4:	str	r2, [sp, #16]
   135d8:	str	r3, [sp, #12]
   135dc:	ldr	r0, [fp, #-12]
   135e0:	cmp	r0, #0
   135e4:	bgt	135f4 <main@@Base+0x1fb8>
   135e8:	movw	r0, #0
   135ec:	str	r0, [fp, #-4]
   135f0:	b	136b0 <main@@Base+0x2074>
   135f4:	ldr	r0, [fp, #-12]
   135f8:	lsl	r0, r0, #2
   135fc:	bl	14b18 <mmk_malloc@@Base>
   13600:	str	r0, [sp, #8]
   13604:	movw	r0, #0
   13608:	str	r0, [sp, #4]
   1360c:	ldr	r0, [sp, #4]
   13610:	ldr	r1, [fp, #-12]
   13614:	cmp	r0, r1
   13618:	bge	13690 <main@@Base+0x2054>
   1361c:	b	13620 <main@@Base+0x1fe4>
   13620:	mov	r0, #8
   13624:	bl	14b18 <mmk_malloc@@Base>
   13628:	ldr	r1, [sp, #8]
   1362c:	ldr	r2, [sp, #4]
   13630:	str	r0, [r1, r2, lsl #2]
   13634:	ldr	r0, [sp, #8]
   13638:	ldr	r1, [sp, #4]
   1363c:	ldr	r0, [r0, r1, lsl #2]
   13640:	mov	r1, #4
   13644:	str	r1, [r0]
   13648:	ldr	r0, [fp, #-8]
   1364c:	add	r1, r0, #4
   13650:	str	r1, [fp, #-8]
   13654:	ldr	r0, [r0]
   13658:	str	r0, [sp]
   1365c:	ldr	r0, [sp, #8]
   13660:	ldr	r1, [sp, #4]
   13664:	add	r0, r0, r1, lsl #2
   13668:	ldr	r0, [r0]
   1366c:	add	r0, r0, #4
   13670:	mov	r1, sp
   13674:	movw	r2, #4
   13678:	bl	1485c <mmk_memcpy@@Base>
   1367c:	b	13680 <main@@Base+0x2044>
   13680:	ldr	r0, [sp, #4]
   13684:	add	r0, r0, #1
   13688:	str	r0, [sp, #4]
   1368c:	b	1360c <main@@Base+0x1fd0>
   13690:	ldr	r0, [fp, #-12]
   13694:	ldr	r1, [sp, #16]
   13698:	str	r0, [r1]
   1369c:	ldr	r0, [sp, #8]
   136a0:	ldr	r1, [sp, #12]
   136a4:	str	r0, [r1]
   136a8:	movw	r0, #1
   136ac:	str	r0, [fp, #-4]
   136b0:	ldr	r0, [fp, #-4]
   136b4:	mov	sp, fp
   136b8:	pop	{fp, pc}

000136bc <mmk_init@@Base>:
   136bc:	push	{r4, sl, fp, lr}
   136c0:	add	fp, sp, #8
   136c4:	sub	sp, sp, #8
   136c8:	ldr	r4, [pc, #108]	; 1373c <mmk_init@@Base+0x80>
   136cc:	add	r4, pc, r4
   136d0:	ldrb	r0, [r4]
   136d4:	cmp	r0, #0
   136d8:	bne	13700 <mmk_init@@Base+0x44>
   136dc:	bl	13b44 <plt_init_ctx@@Base>
   136e0:	ldr	r1, [pc, #88]	; 13740 <mmk_init@@Base+0x84>
   136e4:	cmn	r0, #1
   136e8:	add	r1, pc, r1
   136ec:	str	r0, [r1]
   136f0:	beq	13708 <mmk_init@@Base+0x4c>
   136f4:	bl	14b54 <mmk_init_vital_functions@@Base>
   136f8:	mov	r0, #1
   136fc:	strb	r0, [r4]
   13700:	sub	sp, fp, #8
   13704:	pop	{r4, sl, fp, pc}
   13708:	ldr	r0, [pc, #52]	; 13744 <mmk_init@@Base+0x88>
   1370c:	mov	r3, #45	; 0x2d
   13710:	ldr	r0, [pc, r0]
   13714:	ldr	r0, [r0]
   13718:	ldr	r1, [pc, #40]	; 13748 <mmk_init@@Base+0x8c>
   1371c:	add	r1, pc, r1
   13720:	str	r1, [sp]
   13724:	ldr	r1, [pc, #32]	; 1374c <mmk_init@@Base+0x90>
   13728:	ldr	r2, [pc, #32]	; 13750 <mmk_init@@Base+0x94>
   1372c:	add	r1, pc, r1
   13730:	add	r2, pc, r2
   13734:	bl	114e0 <fprintf@plt>
   13738:	bl	11528 <abort@plt>
   1373c:	andeq	r2, r1, r0, lsl sl
   13740:	strdeq	r2, [r1], -r8
   13744:	andeq	r2, r1, r4, lsl #19
   13748:	andeq	r1, r0, sp, lsl #19
   1374c:	ldrdeq	r1, [r0], -sl
   13750:	andeq	r1, r0, sl, lsr #18

00013754 <mmk_plt_ctx@@Base>:
   13754:	push	{fp, lr}
   13758:	mov	fp, sp
   1375c:	sub	sp, sp, #8
   13760:	ldr	r0, [pc, #76]	; 137b4 <mmk_plt_ctx@@Base+0x60>
   13764:	add	r0, pc, r0
   13768:	ldrb	r0, [r0]
   1376c:	cmp	r0, #0
   13770:	ldrne	r0, [pc, #64]	; 137b8 <mmk_plt_ctx@@Base+0x64>
   13774:	ldrne	r0, [pc, r0]
   13778:	movne	sp, fp
   1377c:	popne	{fp, pc}
   13780:	ldr	r0, [pc, #52]	; 137bc <mmk_plt_ctx@@Base+0x68>
   13784:	mov	r3, #54	; 0x36
   13788:	ldr	r0, [pc, r0]
   1378c:	ldr	r0, [r0]
   13790:	ldr	r1, [pc, #40]	; 137c0 <mmk_plt_ctx@@Base+0x6c>
   13794:	add	r1, pc, r1
   13798:	str	r1, [sp]
   1379c:	ldr	r1, [pc, #32]	; 137c4 <mmk_plt_ctx@@Base+0x70>
   137a0:	ldr	r2, [pc, #32]	; 137c8 <mmk_plt_ctx@@Base+0x74>
   137a4:	add	r1, pc, r1
   137a8:	add	r2, pc, r2
   137ac:	bl	114e0 <fprintf@plt>
   137b0:	bl	11528 <abort@plt>
   137b4:	andeq	r2, r1, r8, ror r9
   137b8:	andeq	r2, r1, ip, ror #18
   137bc:	andeq	r2, r1, ip, lsl #18
   137c0:	andeq	r1, r0, ip, lsr #18
   137c4:	andeq	r1, r0, r2, ror #12
   137c8:			; <UNDEFINED> instruction: 0x000018b2

000137cc <mmk_reset@@Base>:
   137cc:	cmp	r0, #0
   137d0:	bxeq	lr
   137d4:	push	{fp, lr}
   137d8:	mov	fp, sp
   137dc:	bl	14434 <mmk_ask_ctx@@Base>
   137e0:	bl	14190 <mmk_stub_context@@Base>
   137e4:	pop	{fp, lr}
   137e8:	b	13a5c <mmk_mock_destroy_internal@@Base>

000137ec <mmk_matcher_init@@Base>:
   137ec:	push	{r4, r5, fp, lr}
   137f0:	add	fp, sp, #8
   137f4:	mov	r4, r0
   137f8:	mov	r0, #12
   137fc:	bl	14b18 <mmk_malloc@@Base>
   13800:	mov	r5, r0
   13804:	mov	r0, #0
   13808:	str	r4, [r5]
   1380c:	str	r0, [r5, #4]
   13810:	str	r0, [r5, #8]
   13814:	ldr	r0, [pc, #12]	; 13828 <mmk_matcher_init@@Base+0x3c>
   13818:	add	r0, pc, r0
   1381c:	bl	11510 <__tls_get_addr@plt>
   13820:	str	r5, [r0]
   13824:	pop	{r4, r5, fp, pc}
   13828:	andeq	r2, r1, r4, asr #16

0001382c <mmk_matcher_term@@Base>:
   1382c:	push	{fp, lr}
   13830:	mov	fp, sp
   13834:	ldr	r0, [pc, #16]	; 1384c <mmk_matcher_term@@Base+0x20>
   13838:	add	r0, pc, r0
   1383c:	bl	11510 <__tls_get_addr@plt>
   13840:	mov	r1, #0
   13844:	str	r1, [r0]
   13848:	pop	{fp, pc}
   1384c:	andeq	r2, r1, r4, lsr #16

00013850 <mmk_matcher_ctx@@Base>:
   13850:	push	{fp, lr}
   13854:	mov	fp, sp
   13858:	ldr	r0, [pc, #12]	; 1386c <mmk_matcher_ctx@@Base+0x1c>
   1385c:	add	r0, pc, r0
   13860:	bl	11510 <__tls_get_addr@plt>
   13864:	ldr	r0, [r0]
   13868:	pop	{fp, pc}
   1386c:	andeq	r2, r1, r0, lsl #16

00013870 <mmk_matcher_add@@Base>:
   13870:	push	{r4, r5, r6, sl, fp, lr}
   13874:	add	fp, sp, #16
   13878:	mov	r6, r0
   1387c:	mov	r0, #12
   13880:	mov	r4, r1
   13884:	bl	14b18 <mmk_malloc@@Base>
   13888:	mov	r5, r0
   1388c:	ldr	r0, [pc, #64]	; 138d4 <mmk_matcher_add@@Base+0x64>
   13890:	add	r0, pc, r0
   13894:	bl	11510 <__tls_get_addr@plt>
   13898:	ldr	r0, [r0]
   1389c:	mov	r1, #0
   138a0:	str	r6, [r5]
   138a4:	str	r4, [r5, #4]
   138a8:	str	r1, [r5, #8]
   138ac:	mov	r1, r0
   138b0:	ldr	r0, [r0, #8]
   138b4:	cmp	r0, #0
   138b8:	beq	138c8 <mmk_matcher_add@@Base+0x58>
   138bc:	ldr	r2, [r0, #4]
   138c0:	cmp	r2, r4
   138c4:	bcc	138ac <mmk_matcher_add@@Base+0x3c>
   138c8:	str	r0, [r5, #8]
   138cc:	str	r5, [r1, #8]
   138d0:	pop	{r4, r5, r6, sl, fp, pc}
   138d4:	andeq	r2, r1, ip, asr #15

000138d8 <mmk_matcher_get_predicate@@Base>:
   138d8:	add	r0, r0, #12
   138dc:	bx	lr

000138e0 <mmk_mock_create_internal@@Base>:
   138e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   138e4:	add	fp, sp, #24
   138e8:	sub	sp, sp, #8
   138ec:	mov	r8, r1
   138f0:	mov	r9, r0
   138f4:	bl	136bc <mmk_init@@Base>
   138f8:	mov	r0, #20
   138fc:	bl	14b18 <mmk_malloc@@Base>
   13900:	cmp	r0, #0
   13904:	beq	139ec <mmk_mock_create_internal@@Base+0x10c>
   13908:	vmov.i32	q8, #0	; 0x00000000
   1390c:	mov	r4, r0
   13910:	mov	r1, #0
   13914:	vst1.32	{d16-d17}, [r0]!
   13918:	str	r1, [r0]
   1391c:	mov	r0, r9
   13920:	mov	r1, #64	; 0x40
   13924:	bl	14a08 <mmk_strchr@@Base>
   13928:	mov	r5, r0
   1392c:	cmp	r0, #0
   13930:	beq	1393c <mmk_mock_create_internal@@Base+0x5c>
   13934:	sub	r6, r5, r9
   13938:	b	13948 <mmk_mock_create_internal@@Base+0x68>
   1393c:	mov	r0, r9
   13940:	bl	14aac <mmk_strlen@@Base>
   13944:	mov	r6, r0
   13948:	add	r0, r6, #1
   1394c:	bl	14b18 <mmk_malloc@@Base>
   13950:	mov	r1, r9
   13954:	mov	r2, r6
   13958:	mov	r7, r0
   1395c:	bl	14a64 <mmk_strncpy@@Base>
   13960:	mov	r0, #0
   13964:	cmp	r5, #0
   13968:	strb	r0, [r7, r6]
   1396c:	beq	13994 <mmk_mock_create_internal@@Base+0xb4>
   13970:	ldr	r1, [pc, #200]	; 13a40 <mmk_mock_create_internal@@Base+0x160>
   13974:	add	r0, r5, #1
   13978:	mov	r2, #4
   1397c:	add	r1, pc, r1
   13980:	bl	14998 <mmk_strneq@@Base>
   13984:	cmp	r0, #0
   13988:	mov	r5, r0
   1398c:	movwne	r5, #1
   13990:	b	13998 <mmk_mock_create_internal@@Base+0xb8>
   13994:	mov	r5, #1
   13998:	mov	r0, r9
   1399c:	mov	r1, r8
   139a0:	mov	r2, r4
   139a4:	bl	14360 <mmk_stub_create@@Base>
   139a8:	cmp	r0, #0
   139ac:	str	r0, [r4, #4]
   139b0:	beq	13a20 <mmk_mock_create_internal@@Base+0x140>
   139b4:	cmp	r5, #0
   139b8:	bne	139d4 <mmk_mock_create_internal@@Base+0xf4>
   139bc:	mov	r0, r7
   139c0:	mov	r1, r8
   139c4:	mov	r2, r4
   139c8:	bl	14360 <mmk_stub_create@@Base>
   139cc:	ldr	r1, [r4, #4]
   139d0:	str	r0, [r1, #36]	; 0x24
   139d4:	mov	r0, r7
   139d8:	bl	14b40 <mmk_free@@Base>
   139dc:	ldr	r0, [r4, #4]
   139e0:	ldr	r0, [r0, #32]
   139e4:	sub	sp, fp, #24
   139e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   139ec:	ldr	r0, [pc, #80]	; 13a44 <mmk_mock_create_internal@@Base+0x164>
   139f0:	mov	r3, #36	; 0x24
   139f4:	ldr	r0, [pc, r0]
   139f8:	ldr	r0, [r0]
   139fc:	ldr	r1, [pc, #68]	; 13a48 <mmk_mock_create_internal@@Base+0x168>
   13a00:	add	r1, pc, r1
   13a04:	str	r1, [sp]
   13a08:	ldr	r1, [pc, #60]	; 13a4c <mmk_mock_create_internal@@Base+0x16c>
   13a0c:	ldr	r2, [pc, #60]	; 13a50 <mmk_mock_create_internal@@Base+0x170>
   13a10:	add	r1, pc, r1
   13a14:	add	r2, pc, r2
   13a18:	bl	114e0 <fprintf@plt>
   13a1c:	bl	11528 <abort@plt>
   13a20:	ldr	r0, [pc, #44]	; 13a54 <mmk_mock_create_internal@@Base+0x174>
   13a24:	mov	r2, r9
   13a28:	ldr	r0, [pc, r0]
   13a2c:	ldr	r0, [r0]
   13a30:	ldr	r1, [pc, #32]	; 13a58 <mmk_mock_create_internal@@Base+0x178>
   13a34:	add	r1, pc, r1
   13a38:	bl	114e0 <fprintf@plt>
   13a3c:	bl	11528 <abort@plt>
   13a40:	andeq	r1, r0, r8, lsr #15
   13a44:	andeq	r2, r1, r0, lsr #13
   13a48:	andeq	r1, r0, r0, lsr #14
   13a4c:	strdeq	r1, [r0], -r6
   13a50:			; <UNDEFINED> instruction: 0x000016bd
   13a54:	andeq	r2, r1, ip, ror #12
   13a58:	strdeq	r1, [r0], -r5

00013a5c <mmk_mock_destroy_internal@@Base>:
   13a5c:	push	{r4, r5, r6, r7, fp, lr}
   13a60:	add	fp, sp, #16
   13a64:	mov	r4, r0
   13a68:	ldr	r0, [r0, #4]
   13a6c:	cmp	r0, #0
   13a70:	beq	13a88 <mmk_mock_destroy_internal@@Base+0x2c>
   13a74:	ldr	r5, [r0, #36]	; 0x24
   13a78:	bl	143f8 <mmk_stub_destroy@@Base>
   13a7c:	cmp	r5, #0
   13a80:	mov	r0, r5
   13a84:	bne	13a74 <mmk_mock_destroy_internal@@Base+0x18>
   13a88:	ldr	r0, [r4, #8]
   13a8c:	bl	14b40 <mmk_free@@Base>
   13a90:	ldr	r5, [r4]
   13a94:	cmp	r5, #0
   13a98:	bne	13ab4 <mmk_mock_destroy_internal@@Base+0x58>
   13a9c:	b	13ad8 <mmk_mock_destroy_internal@@Base+0x7c>
   13aa0:	mov	r0, r5
   13aa4:	bl	14b40 <mmk_free@@Base>
   13aa8:	cmp	r6, #0
   13aac:	mov	r5, r6
   13ab0:	beq	13ad8 <mmk_mock_destroy_internal@@Base+0x7c>
   13ab4:	ldm	r5, {r0, r6}
   13ab8:	cmp	r0, #0
   13abc:	beq	13aa0 <mmk_mock_destroy_internal@@Base+0x44>
   13ac0:	ldr	r7, [r0, #8]
   13ac4:	bl	14b40 <mmk_free@@Base>
   13ac8:	cmp	r7, #0
   13acc:	mov	r0, r7
   13ad0:	bne	13ac0 <mmk_mock_destroy_internal@@Base+0x64>
   13ad4:	b	13aa0 <mmk_mock_destroy_internal@@Base+0x44>
   13ad8:	mov	r0, r4
   13adc:	pop	{r4, r5, r6, r7, fp, lr}
   13ae0:	b	14b40 <mmk_free@@Base>

00013ae4 <mmk_mock_params_begin@@Base>:
   13ae4:	ldr	r1, [r0, #8]
   13ae8:	cmp	r1, #0
   13aec:	moveq	r0, #0
   13af0:	bxeq	lr
   13af4:	ldr	r0, [r0, #12]
   13af8:	cmp	r0, #0
   13afc:	addne	r0, r1, #4
   13b00:	bx	lr

00013b04 <mmk_mock_params_next@@Base>:
   13b04:	ldr	r2, [r1, #-4]
   13b08:	add	r1, r2, r1
   13b0c:	ldr	r2, [r0, #8]
   13b10:	ldr	r0, [r0, #12]
   13b14:	add	r1, r1, #4
   13b18:	add	r0, r2, r0
   13b1c:	cmp	r1, r0
   13b20:	movcs	r1, #0
   13b24:	mov	r0, r1
   13b28:	bx	lr

00013b2c <mmk_mock_get_params@@Base>:
   13b2c:	push	{fp, lr}
   13b30:	mov	fp, sp
   13b34:	bl	14340 <mmk_ctx@@Base>
   13b38:	bl	14190 <mmk_stub_context@@Base>
   13b3c:	ldr	r0, [r0]
   13b40:	pop	{fp, pc}

00013b44 <plt_init_ctx@@Base>:
   13b44:	ldr	r0, [pc, #32]	; 13b6c <plt_init_ctx@@Base+0x28>
   13b48:	ldr	r0, [pc, r0]
   13b4c:	cmn	r0, #1
   13b50:	bxne	lr
   13b54:	ldr	r0, [pc, #20]	; 13b70 <plt_init_ctx@@Base+0x2c>
   13b58:	ldr	r0, [pc, r0]
   13b5c:	ldr	r1, [pc, #16]	; 13b74 <plt_init_ctx@@Base+0x30>
   13b60:	add	r1, pc, r1
   13b64:	str	r0, [r1]
   13b68:	bx	lr
   13b6c:	andeq	r2, r1, r0, lsl #11
   13b70:	andeq	r2, r1, r0, ror #10
   13b74:	andeq	r2, r1, r8, ror #10

00013b78 <plt_get_lib@@Base>:
   13b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b7c:	add	fp, sp, #28
   13b80:	sub	sp, sp, #20
   13b84:	ldr	sl, [pc, #612]	; 13df0 <plt_get_lib@@Base+0x278>
   13b88:	cmp	r1, #0
   13b8c:	mov	r7, r0
   13b90:	mov	r2, #4
   13b94:	add	sl, pc, sl
   13b98:	movne	sl, r1
   13b9c:	ldr	r1, [pc, #592]	; 13df4 <plt_get_lib@@Base+0x27c>
   13ba0:	mov	r0, sl
   13ba4:	add	r1, pc, r1
   13ba8:	bl	1151c <strncmp@plt>
   13bac:	cmp	r0, #0
   13bb0:	beq	13c18 <plt_get_lib@@Base+0xa0>
   13bb4:	ldr	r1, [pc, #580]	; 13e00 <plt_get_lib@@Base+0x288>
   13bb8:	mov	r0, sl
   13bbc:	mov	r2, #5
   13bc0:	add	r1, pc, r1
   13bc4:	bl	1151c <strncmp@plt>
   13bc8:	cmp	r0, #0
   13bcc:	beq	13c20 <plt_get_lib@@Base+0xa8>
   13bd0:	ldr	r1, [pc, #556]	; 13e04 <plt_get_lib@@Base+0x28c>
   13bd4:	mov	r0, sl
   13bd8:	mov	r2, #4
   13bdc:	add	r1, pc, r1
   13be0:	bl	1151c <strncmp@plt>
   13be4:	cmp	r0, #0
   13be8:	beq	13c28 <plt_get_lib@@Base+0xb0>
   13bec:	ldr	r1, [pc, #532]	; 13e08 <plt_get_lib@@Base+0x290>
   13bf0:	mov	r0, sl
   13bf4:	add	r1, pc, r1
   13bf8:	bl	11438 <strcmp@plt>
   13bfc:	cmp	r0, #0
   13c00:	bne	13d90 <plt_get_lib@@Base+0x218>
   13c04:	ldr	sl, [pc, #512]	; 13e0c <plt_get_lib@@Base+0x294>
   13c08:	mov	r9, #0
   13c0c:	add	sl, pc, sl
   13c10:	mov	r8, sl
   13c14:	b	13c3c <plt_get_lib@@Base+0xc4>
   13c18:	mov	r9, #1
   13c1c:	b	13c2c <plt_get_lib@@Base+0xb4>
   13c20:	mov	r9, #2
   13c24:	b	13c2c <plt_get_lib@@Base+0xb4>
   13c28:	mov	r9, #3
   13c2c:	mov	r0, sl
   13c30:	mov	r1, #58	; 0x3a
   13c34:	bl	114d4 <strchr@plt>
   13c38:	add	r8, r0, #1
   13c3c:	mov	r0, r8
   13c40:	bl	114bc <strlen@plt>
   13c44:	ldr	r1, [pc, #428]	; 13df8 <plt_get_lib@@Base+0x280>
   13c48:	mov	r4, r0
   13c4c:	mov	r0, r8
   13c50:	add	r1, pc, r1
   13c54:	bl	11438 <strcmp@plt>
   13c58:	ldr	r7, [r7, #4]
   13c5c:	mov	r5, r0
   13c60:	mov	r0, #0
   13c64:	cmp	r7, #0
   13c68:	beq	13d88 <plt_get_lib@@Base+0x210>
   13c6c:	add	r0, r4, #8
   13c70:	and	r1, r9, #1
   13c74:	str	r0, [fp, #-40]	; 0xffffffd8
   13c78:	add	r0, r0, #7
   13c7c:	str	r1, [fp, #-36]	; 0xffffffdc
   13c80:	bic	r0, r0, #7
   13c84:	str	r0, [fp, #-44]	; 0xffffffd4
   13c88:	cmp	r9, #1
   13c8c:	bne	13d08 <plt_get_lib@@Base+0x190>
   13c90:	b	13cbc <plt_get_lib@@Base+0x144>
   13c94:	ldr	r1, [r7, #4]
   13c98:	mov	r0, sl
   13c9c:	bl	11438 <strcmp@plt>
   13ca0:	cmp	r0, #0
   13ca4:	beq	13d78 <plt_get_lib@@Base+0x200>
   13ca8:	ldr	r7, [r7, #12]
   13cac:	cmp	r7, #0
   13cb0:	beq	13d84 <plt_get_lib@@Base+0x20c>
   13cb4:	cmp	r9, #1
   13cb8:	bne	13d08 <plt_get_lib@@Base+0x190>
   13cbc:	cmp	r5, #0
   13cc0:	beq	13d34 <plt_get_lib@@Base+0x1bc>
   13cc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13cc8:	mov	r6, sp
   13ccc:	sub	r4, sp, r0
   13cd0:	mov	sp, r4
   13cd4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13cd8:	ldr	r2, [pc, #324]	; 13e24 <plt_get_lib@@Base+0x2ac>
   13cdc:	mov	r0, r4
   13ce0:	mov	r3, r8
   13ce4:	add	r2, pc, r2
   13ce8:	bl	114f8 <snprintf@plt>
   13cec:	ldr	r0, [r7, #4]
   13cf0:	mov	r1, r4
   13cf4:	bl	1142c <strstr@plt>
   13cf8:	mov	sp, r6
   13cfc:	cmp	r0, #0
   13d00:	beq	13ca8 <plt_get_lib@@Base+0x130>
   13d04:	b	13d78 <plt_get_lib@@Base+0x200>
   13d08:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d0c:	cmp	r0, #0
   13d10:	beq	13c94 <plt_get_lib@@Base+0x11c>
   13d14:	cmp	r9, #3
   13d18:	bne	13ca8 <plt_get_lib@@Base+0x130>
   13d1c:	mov	r0, r7
   13d20:	mov	r1, r8
   13d24:	bl	13e28 <plt_get_lib@@Base+0x2b0>
   13d28:	cmp	r0, #0
   13d2c:	beq	13ca8 <plt_get_lib@@Base+0x130>
   13d30:	b	13d78 <plt_get_lib@@Base+0x200>
   13d34:	mov	r4, r5
   13d38:	mov	r5, sl
   13d3c:	ldr	sl, [r7, #4]
   13d40:	ldr	r1, [pc, #180]	; 13dfc <plt_get_lib@@Base+0x284>
   13d44:	mov	r0, sl
   13d48:	add	r1, pc, r1
   13d4c:	bl	1142c <strstr@plt>
   13d50:	cmp	r0, #0
   13d54:	bne	13d78 <plt_get_lib@@Base+0x200>
   13d58:	ldr	r1, [pc, #192]	; 13e20 <plt_get_lib@@Base+0x2a8>
   13d5c:	mov	r0, sl
   13d60:	add	r1, pc, r1
   13d64:	bl	1142c <strstr@plt>
   13d68:	mov	sl, r5
   13d6c:	cmp	r0, #0
   13d70:	mov	r5, r4
   13d74:	beq	13ca8 <plt_get_lib@@Base+0x130>
   13d78:	mov	r0, r7
   13d7c:	sub	sp, fp, #28
   13d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d84:	mov	r0, #0
   13d88:	sub	sp, fp, #28
   13d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d90:	mov	r0, sl
   13d94:	mov	r1, #58	; 0x3a
   13d98:	mov	r4, sl
   13d9c:	bl	114d4 <strchr@plt>
   13da0:	cmp	r0, #0
   13da4:	bne	13dc8 <plt_get_lib@@Base+0x250>
   13da8:	ldr	r0, [pc, #104]	; 13e18 <plt_get_lib@@Base+0x2a0>
   13dac:	mov	r2, r4
   13db0:	ldr	r0, [pc, r0]
   13db4:	ldr	r0, [r0]
   13db8:	ldr	r1, [pc, #92]	; 13e1c <plt_get_lib@@Base+0x2a4>
   13dbc:	add	r1, pc, r1
   13dc0:	bl	114e0 <fprintf@plt>
   13dc4:	bl	11528 <abort@plt>
   13dc8:	sub	r0, r0, r4
   13dcc:	mov	r3, r4
   13dd0:	add	r2, r0, #1
   13dd4:	ldr	r0, [pc, #52]	; 13e10 <plt_get_lib@@Base+0x298>
   13dd8:	ldr	r0, [pc, r0]
   13ddc:	ldr	r0, [r0]
   13de0:	ldr	r1, [pc, #44]	; 13e14 <plt_get_lib@@Base+0x29c>
   13de4:	add	r1, pc, r1
   13de8:	bl	114e0 <fprintf@plt>
   13dec:	bl	11528 <abort@plt>
   13df0:	muleq	r0, r0, r5
   13df4:			; <UNDEFINED> instruction: 0x000015b8
   13df8:	ldrdeq	r1, [r0], -r0
   13dfc:	andeq	r1, r0, r9, ror #8
   13e00:	andeq	r1, r0, r1, lsr #11
   13e04:	andeq	r1, r0, fp, lsl #11
   13e08:	andeq	r1, r0, r0, lsr r5
   13e0c:	andeq	r1, r0, r4, lsr #11
   13e10:			; <UNDEFINED> instruction: 0x000122bc
   13e14:	andeq	r1, r0, r8, lsl #7
   13e18:	andeq	r2, r1, r4, ror #5
   13e1c:	ldrdeq	r1, [r0], -r2
   13e20:	andeq	r1, r0, sl, asr r4
   13e24:	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   13e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e2c:	add	fp, sp, #28
   13e30:	sub	sp, sp, #12
   13e34:	str	r1, [sp, #8]
   13e38:	ldr	r1, [r0, #8]
   13e3c:	ldr	ip, [r0]
   13e40:	mov	r0, #0
   13e44:	ldr	r4, [r1]
   13e48:	cmp	r4, #0
   13e4c:	beq	13e7c <plt_get_lib@@Base+0x304>
   13e50:	add	r2, r1, #4
   13e54:	mov	r3, r4
   13e58:	cmp	r3, #6
   13e5c:	beq	13e98 <plt_get_lib@@Base+0x320>
   13e60:	ldr	r3, [r2, #4]
   13e64:	add	r7, r2, #8
   13e68:	mov	r2, r7
   13e6c:	cmp	r3, #0
   13e70:	bne	13e58 <plt_get_lib@@Base+0x2e0>
   13e74:	mov	lr, #0
   13e78:	b	13ea4 <plt_get_lib@@Base+0x32c>
   13e7c:	mov	r6, #0
   13e80:	mov	r2, #0
   13e84:	mov	lr, #0
   13e88:	mov	r8, #0
   13e8c:	mov	r3, #0
   13e90:	mov	r5, #0
   13e94:	b	13fa4 <plt_get_lib@@Base+0x42c>
   13e98:	ldr	lr, [r2]
   13e9c:	cmp	lr, ip
   13ea0:	addcc	lr, ip, lr
   13ea4:	add	r2, r1, #4
   13ea8:	mov	r3, r4
   13eac:	cmp	r3, #5
   13eb0:	beq	13ed0 <plt_get_lib@@Base+0x358>
   13eb4:	ldr	r3, [r2, #4]
   13eb8:	add	r7, r2, #8
   13ebc:	mov	r2, r7
   13ec0:	cmp	r3, #0
   13ec4:	bne	13eac <plt_get_lib@@Base+0x334>
   13ec8:	mov	r8, #0
   13ecc:	b	13edc <plt_get_lib@@Base+0x364>
   13ed0:	ldr	r8, [r2]
   13ed4:	cmp	r8, ip
   13ed8:	addcc	r8, ip, r8
   13edc:	add	r2, r1, #4
   13ee0:	mov	r3, r4
   13ee4:	cmp	r3, #20
   13ee8:	beq	13f08 <plt_get_lib@@Base+0x390>
   13eec:	ldr	r3, [r2, #4]
   13ef0:	add	r7, r2, #8
   13ef4:	mov	r2, r7
   13ef8:	cmp	r3, #0
   13efc:	bne	13ee4 <plt_get_lib@@Base+0x36c>
   13f00:	mov	r2, #0
   13f04:	b	13f0c <plt_get_lib@@Base+0x394>
   13f08:	ldr	r2, [r2]
   13f0c:	add	r3, r1, #4
   13f10:	mov	r7, r4
   13f14:	cmp	r7, #23
   13f18:	beq	13f38 <plt_get_lib@@Base+0x3c0>
   13f1c:	ldr	r7, [r3, #4]
   13f20:	add	r6, r3, #8
   13f24:	mov	r3, r6
   13f28:	cmp	r7, #0
   13f2c:	bne	13f14 <plt_get_lib@@Base+0x39c>
   13f30:	mov	r3, #0
   13f34:	b	13f44 <plt_get_lib@@Base+0x3cc>
   13f38:	ldr	r3, [r3]
   13f3c:	cmp	r3, ip
   13f40:	addcc	r3, ip, r3
   13f44:	add	r6, r1, #4
   13f48:	mov	r7, r4
   13f4c:	cmp	r7, #2
   13f50:	beq	13f70 <plt_get_lib@@Base+0x3f8>
   13f54:	ldr	r7, [r6, #4]
   13f58:	add	r5, r6, #8
   13f5c:	mov	r6, r5
   13f60:	cmp	r7, #0
   13f64:	bne	13f4c <plt_get_lib@@Base+0x3d4>
   13f68:	mov	r6, #0
   13f6c:	b	13f74 <plt_get_lib@@Base+0x3fc>
   13f70:	ldr	r6, [r6]
   13f74:	add	r1, r1, #4
   13f78:	add	r5, r2, #2
   13f7c:	cmp	r4, r5
   13f80:	beq	13fa0 <plt_get_lib@@Base+0x428>
   13f84:	ldr	r4, [r1, #4]
   13f88:	add	r7, r1, #8
   13f8c:	mov	r1, r7
   13f90:	cmp	r4, #0
   13f94:	bne	13f7c <plt_get_lib@@Base+0x404>
   13f98:	mov	r5, #0
   13f9c:	b	13fa4 <plt_get_lib@@Base+0x42c>
   13fa0:	ldr	r5, [r1]
   13fa4:	cmp	r5, #0
   13fa8:	cmpne	r6, #0
   13fac:	beq	13fc8 <plt_get_lib@@Base+0x450>
   13fb0:	cmp	r3, #0
   13fb4:	cmpne	r2, #0
   13fb8:	beq	13fc8 <plt_get_lib@@Base+0x450>
   13fbc:	cmp	lr, #0
   13fc0:	cmpne	r8, #0
   13fc4:	bne	13fd0 <plt_get_lib@@Base+0x458>
   13fc8:	sub	sp, fp, #28
   13fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd0:	cmp	r5, r6
   13fd4:	str	ip, [sp, #4]
   13fd8:	bhi	14048 <plt_get_lib@@Base+0x4d0>
   13fdc:	udiv	r6, r6, r5
   13fe0:	mov	r4, r8
   13fe4:	add	r8, r3, #4
   13fe8:	mov	r9, #0
   13fec:	mvn	sl, #15
   13ff0:	ldr	r0, [r8]
   13ff4:	ldr	r1, [sp, #8]
   13ff8:	mov	r7, lr
   13ffc:	and	r0, sl, r0, lsr #4
   14000:	ldr	r0, [lr, r0]
   14004:	add	r0, r4, r0
   14008:	bl	11438 <strcmp@plt>
   1400c:	cmp	r0, #0
   14010:	beq	1402c <plt_get_lib@@Base+0x4b4>
   14014:	add	r9, r9, #1
   14018:	add	r8, r8, r5
   1401c:	mov	lr, r7
   14020:	cmp	r9, r6
   14024:	bcc	13ff0 <plt_get_lib@@Base+0x478>
   14028:	b	14048 <plt_get_lib@@Base+0x4d0>
   1402c:	ldr	r0, [r8, #-4]
   14030:	cmp	r0, #0
   14034:	beq	14048 <plt_get_lib@@Base+0x4d0>
   14038:	ldr	r1, [sp, #4]
   1403c:	add	r0, r0, r1
   14040:	sub	sp, fp, #28
   14044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14048:	mov	r0, #0
   1404c:	sub	sp, fp, #28
   14050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014054 <plt_get_offsets@@Base>:
   14054:	push	{r4, r5, fp, lr}
   14058:	add	fp, sp, #8
   1405c:	mov	r4, r2
   14060:	bl	13e28 <plt_get_lib@@Base+0x2b0>
   14064:	cmp	r0, #0
   14068:	beq	14090 <plt_get_offsets@@Base+0x3c>
   1406c:	mov	r5, r0
   14070:	mov	r0, #8
   14074:	bl	14b18 <mmk_malloc@@Base>
   14078:	mov	r1, #1
   1407c:	str	r1, [r4]
   14080:	mov	r1, #0
   14084:	str	r5, [r0]
   14088:	str	r1, [r0, #4]
   1408c:	pop	{r4, r5, fp, pc}
   14090:	mov	r0, #0
   14094:	pop	{r4, r5, fp, pc}

00014098 <plt_set_offsets@@Base>:
   14098:	cmp	r1, #0
   1409c:	bxeq	lr
   140a0:	add	r0, r0, #4
   140a4:	b	140c4 <plt_set_offsets@@Base+0x2c>
   140a8:	ldr	ip, [r0, #-4]
   140ac:	ldr	r3, [ip]
   140b0:	str	r3, [r0]
   140b4:	add	r0, r0, #8
   140b8:	subs	r1, r1, #1
   140bc:	str	r2, [ip]
   140c0:	beq	140d8 <plt_set_offsets@@Base+0x40>
   140c4:	ldr	r3, [r0]
   140c8:	cmp	r3, #0
   140cc:	beq	140a8 <plt_set_offsets@@Base+0x10>
   140d0:	ldr	ip, [r0, #-4]
   140d4:	b	140b4 <plt_set_offsets@@Base+0x1c>
   140d8:	bx	lr

000140dc <plt_reset_offsets@@Base>:
   140dc:	push	{r4, sl, fp, lr}
   140e0:	add	fp, sp, #8
   140e4:	cmp	r1, #0
   140e8:	beq	1413c <plt_reset_offsets@@Base+0x60>
   140ec:	and	ip, r1, #1
   140f0:	mov	r2, #0
   140f4:	cmp	r1, #1
   140f8:	beq	14128 <plt_reset_offsets@@Base+0x4c>
   140fc:	sub	lr, r1, ip
   14100:	add	r3, r0, #8
   14104:	mov	r2, #0
   14108:	ldmdb	r3, {r1, r4}
   1410c:	add	r2, r2, #2
   14110:	cmp	lr, r2
   14114:	str	r4, [r1]
   14118:	ldm	r3, {r1, r4}
   1411c:	add	r3, r3, #16
   14120:	str	r4, [r1]
   14124:	bne	14108 <plt_reset_offsets@@Base+0x2c>
   14128:	cmp	ip, #0
   1412c:	popeq	{r4, sl, fp, pc}
   14130:	ldr	r1, [r0, r2, lsl #3]!
   14134:	ldr	r0, [r0, #4]
   14138:	str	r0, [r1]
   1413c:	pop	{r4, sl, fp, pc}

00014140 <plt_get_real_fn@@Base>:
   14140:	push	{r4, r5, r6, sl, fp, lr}
   14144:	add	fp, sp, #16
   14148:	ldr	r6, [r0, #4]
   1414c:	mov	r4, #0
   14150:	cmp	r6, #0
   14154:	beq	1417c <plt_get_real_fn@@Base+0x3c>
   14158:	mov	r5, r1
   1415c:	mov	r0, r6
   14160:	mov	r1, r5
   14164:	bl	13e28 <plt_get_lib@@Base+0x2b0>
   14168:	cmp	r0, #0
   1416c:	bne	14184 <plt_get_real_fn@@Base+0x44>
   14170:	ldr	r6, [r6, #12]
   14174:	cmp	r6, #0
   14178:	bne	1415c <plt_get_real_fn@@Base+0x1c>
   1417c:	mov	r0, r4
   14180:	pop	{r4, r5, r6, sl, fp, pc}
   14184:	ldr	r4, [r0]
   14188:	mov	r0, r4
   1418c:	pop	{r4, r5, r6, sl, fp, pc}

00014190 <mmk_stub_context@@Base>:
   14190:	cmp	r0, #0
   14194:	ldrne	r0, [r0, #12]
   14198:	moveq	r0, #0
   1419c:	bx	lr

000141a0 <mmk_stub_create_static@@Base>:
   141a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a4:	add	fp, sp, #28
   141a8:	sub	sp, sp, #4
   141ac:	mov	r4, r0
   141b0:	ldr	r0, [pc, #292]	; 142dc <mmk_stub_create_static@@Base+0x13c>
   141b4:	mov	r9, r3
   141b8:	mov	r8, r2
   141bc:	mov	r6, r1
   141c0:	add	r0, pc, r0
   141c4:	bl	11510 <__tls_get_addr@plt>
   141c8:	mov	r7, #0
   141cc:	str	r7, [r0]
   141d0:	ldr	r0, [pc, #264]	; 142e0 <mmk_stub_create_static@@Base+0x140>
   141d4:	add	r0, pc, r0
   141d8:	bl	11510 <__tls_get_addr@plt>
   141dc:	strb	r7, [r0]
   141e0:	mov	r0, r6
   141e4:	bl	14aac <mmk_strlen@@Base>
   141e8:	add	r0, r0, #1
   141ec:	bl	14b18 <mmk_malloc@@Base>
   141f0:	cmp	r0, #0
   141f4:	beq	142c4 <mmk_stub_create_static@@Base+0x124>
   141f8:	mov	r1, r6
   141fc:	mov	r5, r0
   14200:	bl	14a38 <mmk_strcpy@@Base>
   14204:	mov	r0, r5
   14208:	mov	r1, #64	; 0x40
   1420c:	bl	14a08 <mmk_strchr@@Base>
   14210:	cmp	r0, #0
   14214:	movne	r1, #0
   14218:	strbne	r1, [r0], #1
   1421c:	movne	r7, r0
   14220:	bl	13754 <mmk_plt_ctx@@Base>
   14224:	mov	r1, r7
   14228:	bl	13b78 <plt_get_lib@@Base>
   1422c:	cmp	r0, #0
   14230:	beq	142cc <mmk_stub_create_static@@Base+0x12c>
   14234:	mov	r1, #0
   14238:	mov	r2, sp
   1423c:	str	r1, [sp]
   14240:	mov	r1, r5
   14244:	bl	14054 <plt_get_offsets@@Base>
   14248:	cmp	r0, #0
   1424c:	mvn	r6, #1
   14250:	movne	sl, r0
   14254:	ldrne	r0, [sp]
   14258:	cmpne	r0, #0
   1425c:	beq	142d0 <mmk_stub_create_static@@Base+0x130>
   14260:	mov	r6, #0
   14264:	str	r6, [r4, #32]
   14268:	str	r6, [r4, #36]	; 0x24
   1426c:	ldr	r1, [pc, #112]	; 142e4 <mmk_stub_create_static@@Base+0x144>
   14270:	ldr	r1, [pc, r1]
   14274:	ldr	r2, [pc, #108]	; 142e8 <mmk_stub_create_static@@Base+0x148>
   14278:	ldr	r2, [pc, r2]
   1427c:	ldr	r3, [pc, #104]	; 142ec <mmk_stub_create_static@@Base+0x14c>
   14280:	ldr	r3, [pc, r3]
   14284:	str	r3, [r4]
   14288:	str	r2, [r4, #4]
   1428c:	str	r1, [r4, #8]
   14290:	add	r1, r4, #16
   14294:	str	r9, [r4, #12]
   14298:	stm	r1, {r5, r7, sl}
   1429c:	str	r0, [r4, #28]
   142a0:	mov	r0, r4
   142a4:	mov	r1, r8
   142a8:	bl	14464 <create_trampoline@@Base>
   142ac:	str	r0, [r4, #32]
   142b0:	mov	r2, r0
   142b4:	mov	r0, sl
   142b8:	ldr	r1, [sp]
   142bc:	bl	14098 <plt_set_offsets@@Base>
   142c0:	b	142d0 <mmk_stub_create_static@@Base+0x130>
   142c4:	mvn	r6, #11
   142c8:	b	142d0 <mmk_stub_create_static@@Base+0x130>
   142cc:	mvn	r6, #1
   142d0:	mov	r0, r6
   142d4:	sub	sp, fp, #28
   142d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142dc:	andeq	r1, r1, ip, lsr #29
   142e0:	muleq	r1, r0, lr
   142e4:	andeq	r1, r1, ip, lsr lr
   142e8:	andeq	r1, r1, r8, lsr #28
   142ec:	andeq	r1, r1, ip, lsr lr

000142f0 <mmk_ctx_asked@@Base>:
   142f0:	push	{fp, lr}
   142f4:	mov	fp, sp
   142f8:	ldr	r0, [pc, #24]	; 14318 <mmk_ctx_asked@@Base+0x28>
   142fc:	add	r0, pc, r0
   14300:	bl	11510 <__tls_get_addr@plt>
   14304:	ldrb	r1, [r0]
   14308:	mov	r2, #0
   1430c:	strb	r2, [r0]
   14310:	mov	r0, r1
   14314:	pop	{fp, pc}
   14318:	andeq	r1, r1, r8, ror #26

0001431c <mmk_set_ctx@@Base>:
   1431c:	push	{r4, sl, fp, lr}
   14320:	add	fp, sp, #8
   14324:	mov	r4, r0
   14328:	ldr	r0, [pc, #12]	; 1433c <mmk_set_ctx@@Base+0x20>
   1432c:	add	r0, pc, r0
   14330:	bl	11510 <__tls_get_addr@plt>
   14334:	str	r4, [r0]
   14338:	pop	{r4, sl, fp, pc}
   1433c:	andeq	r1, r1, r0, asr #26

00014340 <mmk_ctx@@Base>:
   14340:	push	{fp, lr}
   14344:	mov	fp, sp
   14348:	ldr	r0, [pc, #12]	; 1435c <mmk_ctx@@Base+0x1c>
   1434c:	add	r0, pc, r0
   14350:	bl	11510 <__tls_get_addr@plt>
   14354:	ldr	r0, [r0]
   14358:	pop	{fp, pc}
   1435c:	andeq	r1, r1, r0, lsr #26

00014360 <mmk_stub_create@@Base>:
   14360:	push	{r4, r5, r6, r7, fp, lr}
   14364:	add	fp, sp, #16
   14368:	mov	r5, r2
   1436c:	mov	r6, r1
   14370:	mov	r7, r0
   14374:	bl	136bc <mmk_init@@Base>
   14378:	mov	r0, #40	; 0x28
   1437c:	bl	14b18 <mmk_malloc@@Base>
   14380:	mov	r1, r7
   14384:	mov	r2, r6
   14388:	mov	r3, r5
   1438c:	mov	r4, r0
   14390:	bl	141a0 <mmk_stub_create_static@@Base>
   14394:	cmn	r0, #1
   14398:	ble	143a4 <mmk_stub_create@@Base+0x44>
   1439c:	mov	r0, r4
   143a0:	pop	{r4, r5, r6, r7, fp, pc}
   143a4:	mov	r5, r0
   143a8:	mov	r0, r4
   143ac:	bl	14b40 <mmk_free@@Base>
   143b0:	bl	114ec <__errno_location@plt>
   143b4:	mov	r4, #0
   143b8:	str	r5, [r0]
   143bc:	mov	r0, r4
   143c0:	pop	{r4, r5, r6, r7, fp, pc}

000143c4 <mmk_stub_destroy_static@@Base>:
   143c4:	push	{r4, sl, fp, lr}
   143c8:	add	fp, sp, #8
   143cc:	mov	r4, r0
   143d0:	ldr	r0, [r0, #24]
   143d4:	ldr	r1, [r4, #28]
   143d8:	bl	140dc <plt_reset_offsets@@Base>
   143dc:	ldr	r0, [r4, #24]
   143e0:	bl	14b40 <mmk_free@@Base>
   143e4:	ldr	r0, [r4, #32]
   143e8:	bl	1458c <destroy_trampoline@@Base>
   143ec:	ldr	r0, [r4, #16]
   143f0:	pop	{r4, sl, fp, lr}
   143f4:	b	14b40 <mmk_free@@Base>

000143f8 <mmk_stub_destroy@@Base>:
   143f8:	push	{r4, sl, fp, lr}
   143fc:	add	fp, sp, #8
   14400:	mov	r4, r0
   14404:	ldr	r0, [r0, #24]
   14408:	ldr	r1, [r4, #28]
   1440c:	bl	140dc <plt_reset_offsets@@Base>
   14410:	ldr	r0, [r4, #24]
   14414:	bl	14b40 <mmk_free@@Base>
   14418:	ldr	r0, [r4, #32]
   1441c:	bl	1458c <destroy_trampoline@@Base>
   14420:	ldr	r0, [r4, #16]
   14424:	bl	14b40 <mmk_free@@Base>
   14428:	mov	r0, r4
   1442c:	pop	{r4, sl, fp, lr}
   14430:	b	14b40 <mmk_free@@Base>

00014434 <mmk_ask_ctx@@Base>:
   14434:	push	{r4, sl, fp, lr}
   14438:	add	fp, sp, #8
   1443c:	mov	r4, r0
   14440:	ldr	r0, [pc, #24]	; 14460 <mmk_ask_ctx@@Base+0x2c>
   14444:	add	r0, pc, r0
   14448:	bl	11510 <__tls_get_addr@plt>
   1444c:	mov	r1, #1
   14450:	strb	r1, [r0]
   14454:	mov	r0, r4
   14458:	pop	{r4, sl, fp, lr}
   1445c:	bx	r0
   14460:	andeq	r1, r1, r0, lsr #24

00014464 <create_trampoline@@Base>:
   14464:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14468:	add	fp, sp, #24
   1446c:	sub	sp, sp, #8
   14470:	ldr	r8, [pc, #236]	; 14564 <create_trampoline@@Base+0x100>
   14474:	mov	r7, r0
   14478:	ldr	r8, [pc, r8]
   1447c:	ldr	r0, [pc, #228]	; 14568 <create_trampoline@@Base+0x104>
   14480:	ldr	r0, [pc, r0]
   14484:	sub	r5, r0, r8
   14488:	cmp	r5, #4096	; 0x1000
   1448c:	bcs	144fc <create_trampoline@@Base+0x98>
   14490:	mov	r6, r1
   14494:	mov	r0, #0
   14498:	mvn	r1, #0
   1449c:	mov	r2, #7
   144a0:	mov	r3, #34	; 0x22
   144a4:	str	r1, [sp]
   144a8:	str	r0, [sp, #4]
   144ac:	mov	r0, #0
   144b0:	mov	r1, #4096	; 0x1000
   144b4:	bl	114c8 <mmap@plt>
   144b8:	cmn	r0, #1
   144bc:	beq	14530 <create_trampoline@@Base+0xcc>
   144c0:	str	r7, [r0]
   144c4:	str	r6, [r0, #4]
   144c8:	add	r6, r0, #8
   144cc:	mov	r4, r0
   144d0:	mov	r1, r8
   144d4:	mov	r2, r5
   144d8:	mov	r0, r6
   144dc:	bl	1145c <memcpy@plt>
   144e0:	mov	r0, r4
   144e4:	mov	r1, #4096	; 0x1000
   144e8:	mov	r2, #5
   144ec:	bl	11444 <mprotect@plt>
   144f0:	mov	r0, r6
   144f4:	sub	sp, fp, #24
   144f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144fc:	ldr	r0, [pc, #104]	; 1456c <create_trampoline@@Base+0x108>
   14500:	mov	r3, #45	; 0x2d
   14504:	ldr	r0, [pc, r0]
   14508:	ldr	r0, [r0]
   1450c:	ldr	r1, [pc, #92]	; 14570 <create_trampoline@@Base+0x10c>
   14510:	add	r1, pc, r1
   14514:	str	r1, [sp]
   14518:	ldr	r1, [pc, #84]	; 14574 <create_trampoline@@Base+0x110>
   1451c:	ldr	r2, [pc, #84]	; 14578 <create_trampoline@@Base+0x114>
   14520:	add	r1, pc, r1
   14524:	add	r2, pc, r2
   14528:	bl	114e0 <fprintf@plt>
   1452c:	bl	11528 <abort@plt>
   14530:	ldr	r0, [pc, #68]	; 1457c <create_trampoline@@Base+0x118>
   14534:	mov	r3, #69	; 0x45
   14538:	ldr	r0, [pc, r0]
   1453c:	ldr	r0, [r0]
   14540:	ldr	r1, [pc, #56]	; 14580 <create_trampoline@@Base+0x11c>
   14544:	add	r1, pc, r1
   14548:	str	r1, [sp]
   1454c:	ldr	r1, [pc, #48]	; 14584 <create_trampoline@@Base+0x120>
   14550:	ldr	r2, [pc, #48]	; 14588 <create_trampoline@@Base+0x124>
   14554:	add	r1, pc, r1
   14558:	add	r2, pc, r2
   1455c:	bl	114e0 <fprintf@plt>
   14560:	bl	11528 <abort@plt>
   14564:	andeq	r1, r1, r4, lsr #24
   14568:	andeq	r1, r1, r8, lsl #24
   1456c:	muleq	r1, r0, fp
   14570:	andeq	r0, r0, r2, lsl sp
   14574:	andeq	r0, r0, r6, ror #17
   14578:	andeq	r0, r0, r9, lsr #25
   1457c:	andeq	r1, r1, ip, asr fp
   14580:	strdeq	r0, [r0], -r8
   14584:			; <UNDEFINED> instruction: 0x000008b2
   14588:	andeq	r0, r0, r5, ror ip

0001458c <destroy_trampoline@@Base>:
   1458c:	sub	r0, r0, #8
   14590:	mov	r1, #4096	; 0x1000
   14594:	b	11504 <munmap@plt>

00014598 <mmk_verify_set_times@@Base>:
   14598:	push	{r4, sl, fp, lr}
   1459c:	add	fp, sp, #8
   145a0:	mov	r4, r0
   145a4:	ldr	r0, [pc, #12]	; 145b8 <mmk_verify_set_times@@Base+0x20>
   145a8:	add	r0, pc, r0
   145ac:	bl	11510 <__tls_get_addr@plt>
   145b0:	str	r4, [r0]
   145b4:	pop	{r4, sl, fp, pc}
   145b8:	andeq	r1, r1, ip, asr #21

000145bc <mmk_verify_times@@Base>:
   145bc:	push	{r4, sl, fp, lr}
   145c0:	add	fp, sp, #8
   145c4:	mov	r4, r0
   145c8:	ldr	r0, [pc, #120]	; 14648 <mmk_verify_times@@Base+0x8c>
   145cc:	add	r0, pc, r0
   145d0:	bl	11510 <__tls_get_addr@plt>
   145d4:	ldr	r1, [r4, #4]
   145d8:	ldr	r0, [r0]
   145dc:	cmp	r1, #0
   145e0:	beq	145f0 <mmk_verify_times@@Base+0x34>
   145e4:	clz	r0, r0
   145e8:	lsr	r0, r0, #5
   145ec:	pop	{r4, sl, fp, pc}
   145f0:	ldr	r2, [r4, #8]
   145f4:	ldr	r1, [r4, #12]
   145f8:	orrs	r3, r2, r1
   145fc:	beq	14628 <mmk_verify_times@@Base+0x6c>
   14600:	cmp	r0, r2
   14604:	mov	r2, #0
   14608:	mov	r3, #0
   1460c:	movwcs	r2, #1
   14610:	cmp	r1, #0
   14614:	moveq	r1, r0
   14618:	cmp	r0, r1
   1461c:	movwls	r3, #1
   14620:	and	r0, r2, r3
   14624:	pop	{r4, sl, fp, pc}
   14628:	ldr	r1, [r4, #20]
   1462c:	cmp	r1, #0
   14630:	beq	1463c <mmk_verify_times@@Base+0x80>
   14634:	pop	{r4, sl, fp, lr}
   14638:	bx	r1
   1463c:	ldr	r1, [r4, #16]
   14640:	sub	r0, r1, r0
   14644:	b	145e4 <mmk_verify_times@@Base+0x28>
   14648:	andeq	r1, r1, r8, lsr #21

0001464c <mmk_verify_register_call@@Base>:
   1464c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14650:	add	fp, sp, #24
   14654:	sub	sp, sp, #8
   14658:	mov	r9, r1
   1465c:	mov	r8, r0
   14660:	str	r1, [sp, #4]
   14664:	bl	14340 <mmk_ctx@@Base>
   14668:	bl	14190 <mmk_stub_context@@Base>
   1466c:	mov	r5, r0
   14670:	ldr	r0, [r0, #8]
   14674:	cmp	r0, #0
   14678:	bne	14698 <mmk_verify_register_call@@Base+0x4c>
   1467c:	mov	r0, #4096	; 0x1000
   14680:	mov	r4, #4096	; 0x1000
   14684:	bl	14b18 <mmk_malloc@@Base>
   14688:	cmp	r0, #0
   1468c:	str	r0, [r5, #8]
   14690:	beq	1478c <mmk_verify_register_call@@Base+0x140>
   14694:	str	r4, [r5, #16]
   14698:	mov	r0, r5
   1469c:	bl	13ae4 <mmk_mock_params_begin@@Base>
   146a0:	cmp	r0, #0
   146a4:	beq	146e4 <mmk_verify_register_call@@Base+0x98>
   146a8:	mov	r6, r0
   146ac:	sub	r4, r9, #4
   146b0:	add	r7, r8, #4
   146b4:	add	r0, r6, #4
   146b8:	mov	r1, r7
   146bc:	mov	r2, r4
   146c0:	bl	14814 <mmk_memcmp@@Base>
   146c4:	cmp	r0, #0
   146c8:	beq	14774 <mmk_verify_register_call@@Base+0x128>
   146cc:	mov	r0, r5
   146d0:	mov	r1, r6
   146d4:	bl	13b04 <mmk_mock_params_next@@Base>
   146d8:	mov	r6, r0
   146dc:	cmp	r0, #0
   146e0:	bne	146b4 <mmk_verify_register_call@@Base+0x68>
   146e4:	mov	r6, r5
   146e8:	ldr	r2, [r6, #12]!
   146ec:	ldr	r1, [r6, #4]
   146f0:	add	r0, r2, r9
   146f4:	add	r0, r0, #4
   146f8:	cmp	r0, r1
   146fc:	bcs	14708 <mmk_verify_register_call@@Base+0xbc>
   14700:	ldr	r0, [r5, #8]
   14704:	b	14730 <mmk_verify_register_call@@Base+0xe4>
   14708:	add	r1, r1, #4096	; 0x1000
   1470c:	cmp	r0, r1
   14710:	bcs	14708 <mmk_verify_register_call@@Base+0xbc>
   14714:	str	r1, [r5, #16]
   14718:	ldr	r0, [r5, #8]
   1471c:	bl	14b2c <mmk_realloc@@Base>
   14720:	cmp	r0, #0
   14724:	str	r0, [r5, #8]
   14728:	beq	147c0 <mmk_verify_register_call@@Base+0x174>
   1472c:	ldr	r2, [r6]
   14730:	add	r0, r0, r2
   14734:	add	r1, sp, #4
   14738:	mov	r2, #4
   1473c:	bl	1485c <mmk_memcpy@@Base>
   14740:	ldr	r0, [r5, #8]
   14744:	ldr	r1, [r5, #12]
   14748:	ldr	r2, [sp, #4]
   1474c:	add	r0, r0, r1
   14750:	mov	r1, r8
   14754:	add	r0, r0, #4
   14758:	bl	1485c <mmk_memcpy@@Base>
   1475c:	mov	r1, #1
   14760:	str	r1, [r0]
   14764:	ldr	r1, [sp, #4]
   14768:	ldr	r0, [r5, #12]
   1476c:	add	r1, r1, #4
   14770:	b	1477c <mmk_verify_register_call@@Base+0x130>
   14774:	ldr	r1, [r6]
   14778:	mov	r0, #1
   1477c:	add	r0, r1, r0
   14780:	str	r0, [r6]
   14784:	sub	sp, fp, #24
   14788:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1478c:	ldr	r0, [pc, #96]	; 147f4 <mmk_verify_register_call@@Base+0x1a8>
   14790:	mov	r3, #79	; 0x4f
   14794:	ldr	r0, [pc, r0]
   14798:	ldr	r0, [r0]
   1479c:	ldr	r1, [pc, #84]	; 147f8 <mmk_verify_register_call@@Base+0x1ac>
   147a0:	add	r1, pc, r1
   147a4:	str	r1, [sp]
   147a8:	ldr	r1, [pc, #76]	; 147fc <mmk_verify_register_call@@Base+0x1b0>
   147ac:	ldr	r2, [pc, #76]	; 14800 <mmk_verify_register_call@@Base+0x1b4>
   147b0:	add	r1, pc, r1
   147b4:	add	r2, pc, r2
   147b8:	bl	114e0 <fprintf@plt>
   147bc:	bl	11528 <abort@plt>
   147c0:	ldr	r0, [pc, #60]	; 14804 <mmk_verify_register_call@@Base+0x1b8>
   147c4:	mov	r3, #91	; 0x5b
   147c8:	ldr	r0, [pc, r0]
   147cc:	ldr	r0, [r0]
   147d0:	ldr	r1, [pc, #48]	; 14808 <mmk_verify_register_call@@Base+0x1bc>
   147d4:	add	r1, pc, r1
   147d8:	str	r1, [sp]
   147dc:	ldr	r1, [pc, #40]	; 1480c <mmk_verify_register_call@@Base+0x1c0>
   147e0:	ldr	r2, [pc, #40]	; 14810 <mmk_verify_register_call@@Base+0x1c4>
   147e4:	add	r1, pc, r1
   147e8:	add	r2, pc, r2
   147ec:	bl	114e0 <fprintf@plt>
   147f0:	bl	11528 <abort@plt>
   147f4:	andeq	r1, r1, r0, lsl #18
   147f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   147fc:	andeq	r0, r0, r6, asr r6
   14800:	muleq	r0, sl, sl
   14804:	andeq	r1, r1, ip, asr #17
   14808:	andeq	r0, r0, fp, asr #21
   1480c:	andeq	r0, r0, r2, lsr #12
   14810:	andeq	r0, r0, r6, ror #20

00014814 <mmk_memcmp@@Base>:
   14814:	push	{fp, lr}
   14818:	mov	fp, sp
   1481c:	mov	lr, r0
   14820:	mov	r0, #0
   14824:	cmp	r2, #0
   14828:	popeq	{fp, pc}
   1482c:	ldrb	ip, [r1]
   14830:	ldrb	r3, [lr]
   14834:	cmp	r3, ip
   14838:	bne	14850 <mmk_memcmp@@Base+0x3c>
   1483c:	subs	r2, r2, #1
   14840:	add	r1, r1, #1
   14844:	add	lr, lr, #1
   14848:	bne	1482c <mmk_memcmp@@Base+0x18>
   1484c:	pop	{fp, pc}
   14850:	mov	r0, #1
   14854:	mvncc	r0, #0
   14858:	pop	{fp, pc}

0001485c <mmk_memcpy@@Base>:
   1485c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14860:	add	fp, sp, #28
   14864:	cmp	r2, #0
   14868:	beq	14994 <mmk_memcpy@@Base+0x138>
   1486c:	cmp	r2, #15
   14870:	bls	14938 <mmk_memcpy@@Base+0xdc>
   14874:	add	r3, r1, r2
   14878:	cmp	r3, r0
   1487c:	addhi	r3, r0, r2
   14880:	cmphi	r3, r1
   14884:	bhi	14938 <mmk_memcpy@@Base+0xdc>
   14888:	bic	ip, r2, #15
   1488c:	mov	r3, #1
   14890:	sub	r5, ip, #16
   14894:	add	r4, r3, r5, lsr #4
   14898:	mov	r3, #0
   1489c:	cmp	r5, #48	; 0x30
   148a0:	and	lr, r4, #3
   148a4:	bcc	14900 <mmk_memcpy@@Base+0xa4>
   148a8:	sub	sl, r4, lr
   148ac:	mov	r3, #0
   148b0:	mov	r8, #48	; 0x30
   148b4:	add	r6, r1, r3
   148b8:	add	r5, r0, r3
   148bc:	subs	sl, sl, #4
   148c0:	add	r3, r3, #64	; 0x40
   148c4:	mov	r9, r6
   148c8:	mov	r7, r5
   148cc:	add	r4, r6, #16
   148d0:	vld1.8	{d16-d17}, [r9], r8
   148d4:	vst1.8	{d16-d17}, [r7], r8
   148d8:	vld1.8	{d16-d17}, [r4]
   148dc:	add	r4, r5, #16
   148e0:	vst1.8	{d16-d17}, [r4]
   148e4:	add	r4, r6, #32
   148e8:	vld1.8	{d16-d17}, [r4]
   148ec:	add	r4, r5, #32
   148f0:	vst1.8	{d16-d17}, [r4]
   148f4:	vld1.8	{d16-d17}, [r9]
   148f8:	vst1.8	{d16-d17}, [r7]
   148fc:	bne	148b4 <mmk_memcpy@@Base+0x58>
   14900:	cmp	lr, #0
   14904:	beq	14924 <mmk_memcpy@@Base+0xc8>
   14908:	add	r4, r0, r3
   1490c:	add	r3, r1, r3
   14910:	rsb	r5, lr, #0
   14914:	vld1.8	{d16-d17}, [r3]!
   14918:	adds	r5, r5, #1
   1491c:	vst1.8	{d16-d17}, [r4]!
   14920:	bcc	14914 <mmk_memcpy@@Base+0xb8>
   14924:	subs	r2, r2, ip
   14928:	beq	14994 <mmk_memcpy@@Base+0x138>
   1492c:	add	r1, r1, ip
   14930:	add	r3, r0, ip
   14934:	b	1493c <mmk_memcpy@@Base+0xe0>
   14938:	mov	r3, r0
   1493c:	ands	r5, r2, #3
   14940:	sub	ip, r2, #1
   14944:	beq	1495c <mmk_memcpy@@Base+0x100>
   14948:	ldrb	r4, [r1], #1
   1494c:	subs	r5, r5, #1
   14950:	sub	r2, r2, #1
   14954:	strb	r4, [r3], #1
   14958:	bne	14948 <mmk_memcpy@@Base+0xec>
   1495c:	cmp	ip, #3
   14960:	bcc	14994 <mmk_memcpy@@Base+0x138>
   14964:	ldrb	r7, [r1]
   14968:	subs	r2, r2, #4
   1496c:	strb	r7, [r3]
   14970:	ldrb	r7, [r1, #1]
   14974:	strb	r7, [r3, #1]
   14978:	ldrb	r7, [r1, #2]
   1497c:	strb	r7, [r3, #2]
   14980:	ldrb	r7, [r1, #3]
   14984:	add	r1, r1, #4
   14988:	strb	r7, [r3, #3]
   1498c:	add	r3, r3, #4
   14990:	bne	14964 <mmk_memcpy@@Base+0x108>
   14994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014998 <mmk_strneq@@Base>:
   14998:	push	{fp, lr}
   1499c:	mov	fp, sp
   149a0:	ldrb	ip, [r0]
   149a4:	cmp	ip, #0
   149a8:	beq	149e0 <mmk_strneq@@Base+0x48>
   149ac:	add	lr, r0, #1
   149b0:	cmp	r2, #0
   149b4:	ldrbne	r3, [r1]
   149b8:	cmpne	r3, #0
   149bc:	beq	149e0 <mmk_strneq@@Base+0x48>
   149c0:	uxtb	r0, ip
   149c4:	cmp	r0, r3
   149c8:	bne	14a00 <mmk_strneq@@Base+0x68>
   149cc:	ldrb	ip, [lr], #1
   149d0:	sub	r2, r2, #1
   149d4:	add	r1, r1, #1
   149d8:	cmp	ip, #0
   149dc:	bne	149b0 <mmk_strneq@@Base+0x18>
   149e0:	cmp	r2, #0
   149e4:	beq	149f8 <mmk_strneq@@Base+0x60>
   149e8:	ldrb	r0, [r1]
   149ec:	clz	r0, r0
   149f0:	lsr	r0, r0, #5
   149f4:	pop	{fp, pc}
   149f8:	mov	r0, #1
   149fc:	pop	{fp, pc}
   14a00:	mov	r0, #0
   14a04:	pop	{fp, pc}

00014a08 <mmk_strchr@@Base>:
   14a08:	ldrb	r3, [r0]
   14a0c:	mov	r2, r0
   14a10:	mov	r0, #0
   14a14:	cmp	r3, #0
   14a18:	bxeq	lr
   14a1c:	uxtb	r3, r3
   14a20:	cmp	r3, r1
   14a24:	beq	14a30 <mmk_strchr@@Base+0x28>
   14a28:	ldrb	r3, [r2, #1]!
   14a2c:	b	14a14 <mmk_strchr@@Base+0xc>
   14a30:	mov	r0, r2
   14a34:	bx	lr

00014a38 <mmk_strcpy@@Base>:
   14a38:	ldrb	r2, [r1]
   14a3c:	cmp	r2, #0
   14a40:	beq	14a58 <mmk_strcpy@@Base+0x20>
   14a44:	add	r1, r1, #1
   14a48:	strb	r2, [r0], #1
   14a4c:	ldrb	r2, [r1], #1
   14a50:	cmp	r2, #0
   14a54:	bne	14a48 <mmk_strcpy@@Base+0x10>
   14a58:	mov	r1, #0
   14a5c:	strb	r1, [r0]
   14a60:	bx	lr

00014a64 <mmk_strncpy@@Base>:
   14a64:	cmp	r2, #0
   14a68:	ldrbne	ip, [r1]
   14a6c:	cmpne	ip, #0
   14a70:	bne	14a80 <mmk_strncpy@@Base+0x1c>
   14a74:	mov	r1, #0
   14a78:	strb	r1, [r0]
   14a7c:	bx	lr
   14a80:	add	r1, r1, #1
   14a84:	sub	r3, r2, #1
   14a88:	sub	r2, r3, #1
   14a8c:	strb	ip, [r0], #1
   14a90:	cmp	r2, r3
   14a94:	bcs	14a74 <mmk_strncpy@@Base+0x10>
   14a98:	ldrb	ip, [r1], #1
   14a9c:	mov	r3, r2
   14aa0:	cmp	ip, #0
   14aa4:	bne	14a88 <mmk_strncpy@@Base+0x24>
   14aa8:	b	14a74 <mmk_strncpy@@Base+0x10>

00014aac <mmk_strlen@@Base>:
   14aac:	ldrb	r1, [r0]
   14ab0:	cmp	r1, #0
   14ab4:	moveq	r0, #0
   14ab8:	bxeq	lr
   14abc:	add	r1, r0, #1
   14ac0:	mov	r0, #0
   14ac4:	ldrb	r2, [r1, r0]
   14ac8:	add	r0, r0, #1
   14acc:	cmp	r2, #0
   14ad0:	bne	14ac4 <mmk_strlen@@Base+0x18>
   14ad4:	bx	lr

00014ad8 <mmk_isspace@@Base>:
   14ad8:	sub	r2, r0, #9
   14adc:	cmp	r2, #23
   14ae0:	bhi	14b04 <mmk_isspace@@Base+0x2c>
   14ae4:	movw	r3, #17
   14ae8:	mov	ip, #1
   14aec:	mov	r1, #1
   14af0:	movt	r3, #128	; 0x80
   14af4:	tst	r3, ip, lsl r2
   14af8:	beq	14b04 <mmk_isspace@@Base+0x2c>
   14afc:	mov	r0, r1
   14b00:	bx	lr
   14b04:	sub	r0, r0, #10
   14b08:	clz	r0, r0
   14b0c:	lsr	r1, r0, #5
   14b10:	mov	r0, r1
   14b14:	bx	lr

00014b18 <mmk_malloc@@Base>:
   14b18:	ldr	r1, [pc, #8]	; 14b28 <mmk_malloc@@Base+0x10>
   14b1c:	ldr	r1, [pc, r1]
   14b20:	ldr	r1, [r1]
   14b24:	bx	r1
   14b28:	muleq	r1, r8, r5

00014b2c <mmk_realloc@@Base>:
   14b2c:	ldr	r2, [pc, #8]	; 14b3c <mmk_realloc@@Base+0x10>
   14b30:	ldr	r2, [pc, r2]
   14b34:	ldr	r2, [r2]
   14b38:	bx	r2
   14b3c:	andeq	r1, r1, r4, ror r5

00014b40 <mmk_free@@Base>:
   14b40:	ldr	r1, [pc, #8]	; 14b50 <mmk_free@@Base+0x10>
   14b44:	ldr	r1, [pc, r1]
   14b48:	ldr	r1, [r1]
   14b4c:	bx	r1
   14b50:	andeq	r1, r1, ip, ror #10

00014b54 <mmk_init_vital_functions@@Base>:
   14b54:	push	{r4, sl, fp, lr}
   14b58:	add	fp, sp, #8
   14b5c:	sub	sp, sp, #8
   14b60:	mov	r4, r0
   14b64:	mov	r0, #0
   14b68:	bl	11498 <malloc@plt>
   14b6c:	mov	r1, #0
   14b70:	bl	11474 <realloc@plt>
   14b74:	bl	11450 <free@plt>
   14b78:	ldr	r1, [pc, #260]	; 14c84 <mmk_init_vital_functions@@Base+0x130>
   14b7c:	mov	r0, r4
   14b80:	add	r1, pc, r1
   14b84:	bl	14140 <plt_get_real_fn@@Base>
   14b88:	ldr	r1, [pc, #248]	; 14c88 <mmk_init_vital_functions@@Base+0x134>
   14b8c:	cmp	r0, #0
   14b90:	ldr	r1, [pc, r1]
   14b94:	str	r0, [r1]
   14b98:	beq	14c1c <mmk_init_vital_functions@@Base+0xc8>
   14b9c:	ldr	r1, [pc, #232]	; 14c8c <mmk_init_vital_functions@@Base+0x138>
   14ba0:	mov	r0, r4
   14ba4:	add	r1, pc, r1
   14ba8:	bl	14140 <plt_get_real_fn@@Base>
   14bac:	ldr	r1, [pc, #220]	; 14c90 <mmk_init_vital_functions@@Base+0x13c>
   14bb0:	cmp	r0, #0
   14bb4:	ldr	r1, [pc, r1]
   14bb8:	str	r0, [r1]
   14bbc:	beq	14c50 <mmk_init_vital_functions@@Base+0xfc>
   14bc0:	ldr	r1, [pc, #204]	; 14c94 <mmk_init_vital_functions@@Base+0x140>
   14bc4:	mov	r0, r4
   14bc8:	add	r1, pc, r1
   14bcc:	bl	14140 <plt_get_real_fn@@Base>
   14bd0:	ldr	r1, [pc, #192]	; 14c98 <mmk_init_vital_functions@@Base+0x144>
   14bd4:	cmp	r0, #0
   14bd8:	ldr	r1, [pc, r1]
   14bdc:	str	r0, [r1]
   14be0:	subne	sp, fp, #8
   14be4:	popne	{r4, sl, fp, pc}
   14be8:	ldr	r0, [pc, #204]	; 14cbc <mmk_init_vital_functions@@Base+0x168>
   14bec:	mov	r3, #90	; 0x5a
   14bf0:	ldr	r0, [pc, r0]
   14bf4:	ldr	r0, [r0]
   14bf8:	ldr	r1, [pc, #192]	; 14cc0 <mmk_init_vital_functions@@Base+0x16c>
   14bfc:	add	r1, pc, r1
   14c00:	str	r1, [sp]
   14c04:	ldr	r1, [pc, #184]	; 14cc4 <mmk_init_vital_functions@@Base+0x170>
   14c08:	ldr	r2, [pc, #184]	; 14cc8 <mmk_init_vital_functions@@Base+0x174>
   14c0c:	add	r1, pc, r1
   14c10:	add	r2, pc, r2
   14c14:	bl	114e0 <fprintf@plt>
   14c18:	bl	11528 <abort@plt>
   14c1c:	ldr	r0, [pc, #120]	; 14c9c <mmk_init_vital_functions@@Base+0x148>
   14c20:	mov	r3, #88	; 0x58
   14c24:	ldr	r0, [pc, r0]
   14c28:	ldr	r0, [r0]
   14c2c:	ldr	r1, [pc, #108]	; 14ca0 <mmk_init_vital_functions@@Base+0x14c>
   14c30:	add	r1, pc, r1
   14c34:	str	r1, [sp]
   14c38:	ldr	r1, [pc, #100]	; 14ca4 <mmk_init_vital_functions@@Base+0x150>
   14c3c:	ldr	r2, [pc, #100]	; 14ca8 <mmk_init_vital_functions@@Base+0x154>
   14c40:	add	r1, pc, r1
   14c44:	add	r2, pc, r2
   14c48:	bl	114e0 <fprintf@plt>
   14c4c:	bl	11528 <abort@plt>
   14c50:	ldr	r0, [pc, #84]	; 14cac <mmk_init_vital_functions@@Base+0x158>
   14c54:	mov	r3, #89	; 0x59
   14c58:	ldr	r0, [pc, r0]
   14c5c:	ldr	r0, [r0]
   14c60:	ldr	r1, [pc, #72]	; 14cb0 <mmk_init_vital_functions@@Base+0x15c>
   14c64:	add	r1, pc, r1
   14c68:	str	r1, [sp]
   14c6c:	ldr	r1, [pc, #64]	; 14cb4 <mmk_init_vital_functions@@Base+0x160>
   14c70:	ldr	r2, [pc, #64]	; 14cb8 <mmk_init_vital_functions@@Base+0x164>
   14c74:	add	r1, pc, r1
   14c78:	add	r2, pc, r2
   14c7c:	bl	114e0 <fprintf@plt>
   14c80:	bl	11528 <abort@plt>
   14c84:	andeq	r0, r0, pc, lsr #14
   14c88:	andeq	r1, r1, r4, lsr #10
   14c8c:	muleq	r0, r9, r7
   14c90:	strdeq	r1, [r1], -r0
   14c94:			; <UNDEFINED> instruction: 0x000007b5
   14c98:	ldrdeq	r1, [r1], -r8
   14c9c:	andeq	r1, r1, r0, ror r4
   14ca0:	ldrdeq	r0, [r0], -r7
   14ca4:	andeq	r0, r0, r6, asr #3
   14ca8:	andeq	r0, r0, r2, ror r6
   14cac:	andeq	r1, r1, ip, lsr r4
   14cb0:	andeq	r0, r0, r1, ror #13
   14cb4:	muleq	r0, r2, r1
   14cb8:	andeq	r0, r0, lr, lsr r6
   14cbc:	andeq	r1, r1, r4, lsr #9
   14cc0:	andeq	r0, r0, r6, lsl #15
   14cc4:	strdeq	r0, [r0], -sl
   14cc8:	andeq	r0, r0, r6, lsr #13

00014ccc <mmk_when_init@@Base>:
   14ccc:	push	{r4, sl, fp, lr}
   14cd0:	add	fp, sp, #8
   14cd4:	mov	r4, r0
   14cd8:	ldr	r0, [pc, #12]	; 14cec <mmk_when_init@@Base+0x20>
   14cdc:	add	r0, pc, r0
   14ce0:	bl	11510 <__tls_get_addr@plt>
   14ce4:	str	r4, [r0]
   14ce8:	pop	{r4, sl, fp, pc}
   14cec:	andeq	r1, r1, r0, lsr #7

00014cf0 <mmk_when_get_result@@Base>:
   14cf0:	push	{fp, lr}
   14cf4:	mov	fp, sp
   14cf8:	ldr	r0, [pc, #12]	; 14d0c <mmk_when_get_result@@Base+0x1c>
   14cfc:	add	r0, pc, r0
   14d00:	bl	11510 <__tls_get_addr@plt>
   14d04:	ldr	r0, [r0]
   14d08:	pop	{fp, pc}
   14d0c:	andeq	r1, r1, r0, lsl #7

00014d10 <mmk_when_impl@@Base>:
   14d10:	push	{r4, r5, fp, lr}
   14d14:	add	fp, sp, #8
   14d18:	mov	r4, r1
   14d1c:	mov	r5, r0
   14d20:	bl	13850 <mmk_matcher_ctx@@Base>
   14d24:	str	r0, [r4]
   14d28:	ldr	r0, [r5]
   14d2c:	str	r0, [r4, #4]
   14d30:	str	r4, [r5]
   14d34:	pop	{r4, r5, fp, pc}

00014d38 <mmk_trampoline@@Base>:
   14d38:	sub	ip, pc, #8
   14d3c:	push	{r0, r1, r2, r3}
   14d40:	push	{ip, lr}
   14d44:	ldr	r0, [ip, #-8]
   14d48:	ldr	ip, [r0, #4]
   14d4c:	blx	ip
   14d50:	pop	{ip, lr}
   14d54:	push	{ip, lr}
   14d58:	ldr	ip, [ip, #-8]
   14d5c:	ldr	ip, [ip]
   14d60:	blx	ip
   14d64:	cmp	r0, #0
   14d68:	bne	14d78 <mmk_trampoline@@Base+0x40>
   14d6c:	pop	{ip, lr}
   14d70:	pop	{r0, r1, r2, r3}
   14d74:	ldr	pc, [ip, #-4]
   14d78:	pop	{ip, lr}
   14d7c:	pop	{r0, r1, r2, r3}
   14d80:	push	{ip, lr}
   14d84:	ldr	ip, [ip, #-8]
   14d88:	ldr	ip, [ip, #8]
   14d8c:	blx	ip
   14d90:	pop	{ip, pc}

00014d94 <mmk_trampoline_end@@Base>:
   14d94:	nop	{0}

00014d98 <__libc_csu_init@@Base>:
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d9c:	mov	r7, r0
   14da0:	ldr	r6, [pc, #72]	; 14df0 <__libc_csu_init@@Base+0x58>
   14da4:	ldr	r5, [pc, #72]	; 14df4 <__libc_csu_init@@Base+0x5c>
   14da8:	add	r6, pc, r6
   14dac:	add	r5, pc, r5
   14db0:	sub	r6, r6, r5
   14db4:	mov	r8, r1
   14db8:	mov	r9, r2
   14dbc:	bl	1140c <strstr@plt-0x20>
   14dc0:	asrs	r6, r6, #2
   14dc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14dc8:	mov	r4, #0
   14dcc:	add	r4, r4, #1
   14dd0:	ldr	r3, [r5], #4
   14dd4:	mov	r2, r9
   14dd8:	mov	r1, r8
   14ddc:	mov	r0, r7
   14de0:	blx	r3
   14de4:	cmp	r6, r4
   14de8:	bne	14dcc <__libc_csu_init@@Base+0x34>
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14df0:	andeq	r1, r1, r4, asr #2
   14df4:	andeq	r1, r1, ip, lsr r1

00014df8 <__libc_csu_fini@@Base>:
   14df8:	bx	lr

Disassembly of section .fini:

00014dfc <.fini>:
   14dfc:	push	{r3, lr}
   14e00:	pop	{r3, pc}
