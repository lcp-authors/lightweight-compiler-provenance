
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f94 <.init>:
   11f94:	push	{r3, lr}
   11f98:	bl	121b4 <_start@@Base+0x3c>
   11f9c:	pop	{r3, pc}

Disassembly of section .plt:

00011fa0 <printf@plt-0x14>:
   11fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   11fa4:	ldr	lr, [pc, #4]	; 11fb0 <printf@plt-0x4>
   11fa8:	add	lr, pc, lr
   11fac:	ldr	pc, [lr, #8]!
   11fb0:	andeq	r7, r1, r0, asr r0

00011fb4 <printf@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #94208	; 0x17000
   11fbc:	ldr	pc, [ip, #80]!	; 0x50

00011fc0 <free@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #94208	; 0x17000
   11fc8:	ldr	pc, [ip, #72]!	; 0x48

00011fcc <memcpy@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #94208	; 0x17000
   11fd4:	ldr	pc, [ip, #64]!	; 0x40

00011fd8 <memcmp@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #94208	; 0x17000
   11fe0:	ldr	pc, [ip, #56]!	; 0x38

00011fe4 <realloc@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #94208	; 0x17000
   11fec:	ldr	pc, [ip, #48]!	; 0x30

00011ff0 <fwrite@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #94208	; 0x17000
   11ff8:	ldr	pc, [ip, #40]!	; 0x28

00011ffc <puts@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #94208	; 0x17000
   12004:	ldr	pc, [ip, #32]!

00012008 <malloc@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #94208	; 0x17000
   12010:	ldr	pc, [ip, #24]!

00012014 <__libc_start_main@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #94208	; 0x17000
   1201c:	ldr	pc, [ip, #16]!

00012020 <__gmon_start__@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #94208	; 0x17000
   12028:	ldr	pc, [ip, #8]!

0001202c <strlen@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #94208	; 0x17000
   12034:	ldr	pc, [ip, #0]!

00012038 <fprintf@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #90112	; 0x16000
   12040:	ldr	pc, [ip, #4088]!	; 0xff8

00012044 <posix_memalign@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #90112	; 0x16000
   1204c:	ldr	pc, [ip, #4080]!	; 0xff0

00012050 <memset@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #90112	; 0x16000
   12058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001205c <memchr@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #90112	; 0x16000
   12064:	ldr	pc, [ip, #4064]!	; 0xfe0

00012068 <fputc@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #90112	; 0x16000
   12070:	ldr	pc, [ip, #4056]!	; 0xfd8

00012074 <abort@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #90112	; 0x16000
   1207c:	ldr	pc, [ip, #4048]!	; 0xfd0

00012080 <__assert_fail@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #90112	; 0x16000
   12088:	ldr	pc, [ip, #4040]!	; 0xfc8

Disassembly of section .text:

0001208c <main@@Base-0xd4>:
   1208c:	ldr	r3, [pc, #28]	; 120b0 <__assert_fail@plt+0x30>
   12090:	ldr	r1, [pc, #28]	; 120b4 <__assert_fail@plt+0x34>
   12094:	ldr	r0, [pc, #28]	; 120b8 <__assert_fail@plt+0x38>
   12098:	push	{r4, lr}
   1209c:	add	r3, pc, r3
   120a0:	mov	r2, #308	; 0x134
   120a4:	add	r1, pc, r1
   120a8:	add	r0, pc, r0
   120ac:	bl	12080 <__assert_fail@plt>
   120b0:	andeq	r5, r0, r0, asr r6
   120b4:	muleq	r0, r8, sp
   120b8:	andeq	r5, r0, ip, lsl lr
   120bc:	ldr	r3, [pc, #32]	; 120e4 <__assert_fail@plt+0x64>
   120c0:	ldr	r1, [pc, #32]	; 120e8 <__assert_fail@plt+0x68>
   120c4:	ldr	r0, [pc, #32]	; 120ec <__assert_fail@plt+0x6c>
   120c8:	add	r3, pc, r3
   120cc:	push	{r4, lr}
   120d0:	add	r3, r3, #16
   120d4:	ldr	r2, [pc, #20]	; 120f0 <__assert_fail@plt+0x70>
   120d8:	add	r1, pc, r1
   120dc:	add	r0, pc, r0
   120e0:	bl	12080 <__assert_fail@plt>
   120e4:	andeq	r5, r0, r4, lsr #12
   120e8:	andeq	r5, r0, r4, ror #26
   120ec:	andeq	r5, r0, r8, ror #27
   120f0:	andeq	r0, r0, r1, lsr #5
   120f4:	ldr	r3, [pc, #32]	; 1211c <__assert_fail@plt+0x9c>
   120f8:	ldr	r1, [pc, #32]	; 12120 <__assert_fail@plt+0xa0>
   120fc:	ldr	r0, [pc, #32]	; 12124 <__assert_fail@plt+0xa4>
   12100:	add	r3, pc, r3
   12104:	push	{r4, lr}
   12108:	add	r3, r3, #28
   1210c:	ldr	r2, [pc, #20]	; 12128 <__assert_fail@plt+0xa8>
   12110:	add	r1, pc, r1
   12114:	add	r0, pc, r0
   12118:	bl	12080 <__assert_fail@plt>
   1211c:	andeq	r5, r0, ip, ror #11
   12120:	andeq	r5, r0, ip, lsr #26
   12124:			; <UNDEFINED> instruction: 0x00005db0
   12128:	andeq	r0, r0, r7, lsl #5
   1212c:	ldr	r3, [pc, #32]	; 12154 <__assert_fail@plt+0xd4>
   12130:	ldr	r1, [pc, #32]	; 12158 <__assert_fail@plt+0xd8>
   12134:	ldr	r0, [pc, #32]	; 1215c <__assert_fail@plt+0xdc>
   12138:	add	r3, pc, r3
   1213c:	push	{r4, lr}
   12140:	mov	r2, #892	; 0x37c
   12144:	add	r3, r3, #40	; 0x28
   12148:	add	r1, pc, r1
   1214c:	add	r0, pc, r0
   12150:	bl	12080 <__assert_fail@plt>
   12154:			; <UNDEFINED> instruction: 0x000055b4
   12158:	strdeq	r5, [r0], -r4
   1215c:	andeq	r5, r0, r0, asr sp

00012160 <main@@Base>:
   12160:	push	{r4, lr}
   12164:	bl	1236c <debug_test@@Base>
   12168:	mov	r4, r0
   1216c:	bl	12508 <emit_test@@Base>
   12170:	orr	r0, r4, r0
   12174:	pop	{r4, pc}

00012178 <_start@@Base>:
   12178:	mov	fp, #0
   1217c:	mov	lr, #0
   12180:	pop	{r1}		; (ldr r1, [sp], #4)
   12184:	mov	r2, sp
   12188:	push	{r2}		; (str r2, [sp, #-4]!)
   1218c:	push	{r0}		; (str r0, [sp, #-4]!)
   12190:	ldr	ip, [pc, #16]	; 121a8 <_start@@Base+0x30>
   12194:	push	{ip}		; (str ip, [sp, #-4]!)
   12198:	ldr	r0, [pc, #12]	; 121ac <_start@@Base+0x34>
   1219c:	ldr	r3, [pc, #12]	; 121b0 <_start@@Base+0x38>
   121a0:	bl	12014 <__libc_start_main@plt>
   121a4:	bl	12074 <abort@plt>
   121a8:	andeq	r7, r1, r0, ror r3
   121ac:	andeq	r2, r1, r0, ror #2
   121b0:	andeq	r7, r1, r0, lsl r3
   121b4:	ldr	r3, [pc, #20]	; 121d0 <_start@@Base+0x58>
   121b8:	ldr	r2, [pc, #20]	; 121d4 <_start@@Base+0x5c>
   121bc:	add	r3, pc, r3
   121c0:	ldr	r2, [r3, r2]
   121c4:	cmp	r2, #0
   121c8:	bxeq	lr
   121cc:	b	12020 <__gmon_start__@plt>
   121d0:	andeq	r6, r1, ip, lsr lr
   121d4:	andeq	r0, r0, r0, rrx
   121d8:	ldr	r3, [pc, #28]	; 121fc <_start@@Base+0x84>
   121dc:	ldr	r0, [pc, #28]	; 12200 <_start@@Base+0x88>
   121e0:	sub	r3, r3, r0
   121e4:	cmp	r3, #6
   121e8:	bxls	lr
   121ec:	ldr	r3, [pc, #16]	; 12204 <_start@@Base+0x8c>
   121f0:	cmp	r3, #0
   121f4:	bxeq	lr
   121f8:	bx	r3
   121fc:	andeq	r9, r2, r7, ror r0
   12200:	andeq	r9, r2, r4, ror r0
   12204:	andeq	r0, r0, r0
   12208:	ldr	r1, [pc, #36]	; 12234 <_start@@Base+0xbc>
   1220c:	ldr	r0, [pc, #36]	; 12238 <_start@@Base+0xc0>
   12210:	sub	r1, r1, r0
   12214:	asr	r1, r1, #2
   12218:	add	r1, r1, r1, lsr #31
   1221c:	asrs	r1, r1, #1
   12220:	bxeq	lr
   12224:	ldr	r3, [pc, #16]	; 1223c <_start@@Base+0xc4>
   12228:	cmp	r3, #0
   1222c:	bxeq	lr
   12230:	bx	r3
   12234:	andeq	r9, r2, r4, ror r0
   12238:	andeq	r9, r2, r4, ror r0
   1223c:	andeq	r0, r0, r0
   12240:	push	{r4, lr}
   12244:	ldr	r4, [pc, #24]	; 12264 <_start@@Base+0xec>
   12248:	ldrb	r3, [r4]
   1224c:	cmp	r3, #0
   12250:	popne	{r4, pc}
   12254:	bl	121d8 <_start@@Base+0x60>
   12258:	mov	r3, #1
   1225c:	strb	r3, [r4]
   12260:	pop	{r4, pc}
   12264:	andeq	r9, r2, r4, ror r0
   12268:	ldr	r0, [pc, #40]	; 12298 <_start@@Base+0x120>
   1226c:	ldr	r3, [r0]
   12270:	cmp	r3, #0
   12274:	bne	1227c <_start@@Base+0x104>
   12278:	b	12208 <_start@@Base+0x90>
   1227c:	ldr	r3, [pc, #24]	; 1229c <_start@@Base+0x124>
   12280:	cmp	r3, #0
   12284:	beq	12278 <_start@@Base+0x100>
   12288:	push	{r4, lr}
   1228c:	blx	r3
   12290:	pop	{r4, lr}
   12294:	b	12208 <_start@@Base+0x90>
   12298:	andeq	r8, r2, r4, lsl pc
   1229c:	andeq	r0, r0, r0

000122a0 <dbg_emitter@@Base>:
   122a0:	ldr	r0, [pc, #176]	; 12358 <dbg_emitter@@Base+0xb8>
   122a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a8:	mov	r7, r2
   122ac:	mov	r6, r3
   122b0:	mov	r2, r3
   122b4:	mov	r8, r1
   122b8:	ldr	r3, [sp, #40]	; 0x28
   122bc:	mov	r1, r7
   122c0:	add	r0, pc, r0
   122c4:	bl	11fb4 <printf@plt>
   122c8:	ldr	r2, [pc, #140]	; 1235c <dbg_emitter@@Base+0xbc>
   122cc:	cmp	r7, #0
   122d0:	add	r2, pc, r2
   122d4:	ble	12324 <dbg_emitter@@Base+0x84>
   122d8:	ldr	r3, [pc, #128]	; 12360 <dbg_emitter@@Base+0xc0>
   122dc:	ldr	sl, [pc, #128]	; 12364 <dbg_emitter@@Base+0xc4>
   122e0:	ldr	r9, [pc, #128]	; 12368 <dbg_emitter@@Base+0xc8>
   122e4:	ldr	fp, [r2, r3]
   122e8:	add	sl, pc, sl
   122ec:	add	r9, pc, r9
   122f0:	mov	r5, r8
   122f4:	mov	r4, #0
   122f8:	ldr	r3, [r8, r4, lsl #3]
   122fc:	cmp	r3, fp
   12300:	beq	12340 <dbg_emitter@@Base+0xa0>
   12304:	cmp	r3, #0
   12308:	add	r4, r4, #1
   1230c:	beq	1232c <dbg_emitter@@Base+0x8c>
   12310:	ldr	r3, [r5, #4]
   12314:	cmp	r7, r4
   12318:	add	r6, r6, r3
   1231c:	add	r5, r5, #8
   12320:	bne	122f8 <dbg_emitter@@Base+0x58>
   12324:	mov	r0, #0
   12328:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1232c:	ldr	r2, [r5, #4]
   12330:	mov	r1, r6
   12334:	mov	r0, r9
   12338:	bl	11fb4 <printf@plt>
   1233c:	b	12310 <dbg_emitter@@Base+0x70>
   12340:	ldr	r2, [r5, #4]
   12344:	mov	r1, r6
   12348:	mov	r0, sl
   1234c:	bl	11fb4 <printf@plt>
   12350:	ldr	r3, [r8, r4, lsl #3]
   12354:	b	12304 <dbg_emitter@@Base+0x64>
   12358:	andeq	r5, r0, ip, lsr #2
   1235c:	andeq	r6, r1, r8, lsr #26
   12360:	andeq	r0, r0, r4, asr r0
   12364:	andeq	r5, r0, r8, lsr r1
   12368:	andeq	r5, r0, r8, asr r1

0001236c <debug_test@@Base>:
   1236c:	push	{r4, r5, r6, r7, lr}
   12370:	sub	sp, sp, #284	; 0x11c
   12374:	add	r7, sp, #8
   12378:	mov	r2, #40	; 0x28
   1237c:	mov	r1, #0
   12380:	mov	r0, r7
   12384:	bl	12050 <memset@plt>
   12388:	ldr	r0, [pc, #352]	; 124f0 <debug_test@@Base+0x184>
   1238c:	ldr	r5, [pc, #352]	; 124f4 <debug_test@@Base+0x188>
   12390:	add	r0, pc, r0
   12394:	bl	11ffc <puts@plt>
   12398:	ldr	r3, [pc, #344]	; 124f8 <debug_test@@Base+0x18c>
   1239c:	add	r5, pc, r5
   123a0:	mov	r6, #0
   123a4:	add	r4, sp, #48	; 0x30
   123a8:	ldr	r1, [r5, r3]
   123ac:	mov	r2, r6
   123b0:	mov	r3, r6
   123b4:	mov	r0, r4
   123b8:	str	r6, [sp]
   123bc:	bl	13128 <flatcc_builder_custom_init@@Base>
   123c0:	mov	r3, #4
   123c4:	mvn	r2, #-1073741824	; 0xc0000000
   123c8:	mov	r1, r7
   123cc:	str	r2, [sp, #4]
   123d0:	str	r3, [sp]
   123d4:	mov	r2, #10
   123d8:	mov	r0, r4
   123dc:	bl	154e8 <flatcc_builder_create_vector@@Base>
   123e0:	mov	r3, r6
   123e4:	mov	r2, r6
   123e8:	mov	r1, r6
   123ec:	mov	r7, r0
   123f0:	mov	r0, r4
   123f4:	bl	13aec <flatcc_builder_start_buffer@@Base>
   123f8:	cmp	r0, r6
   123fc:	beq	12414 <debug_test@@Base+0xa8>
   12400:	mov	r0, r4
   12404:	bl	13334 <flatcc_builder_clear@@Base>
   12408:	mov	r0, #0
   1240c:	add	sp, sp, #284	; 0x11c
   12410:	pop	{r4, r5, r6, r7, pc}
   12414:	mov	r1, #3
   12418:	mov	r0, r4
   1241c:	bl	14924 <flatcc_builder_start_table@@Base>
   12420:	subs	r5, r0, #0
   12424:	bne	12458 <debug_test@@Base+0xec>
   12428:	mov	r3, #8
   1242c:	mov	r2, r3
   12430:	mov	r1, r5
   12434:	mov	r0, r4
   12438:	bl	16364 <flatcc_builder_table_add@@Base>
   1243c:	cmp	r0, #0
   12440:	beq	12458 <debug_test@@Base+0xec>
   12444:	mov	r2, #42	; 0x2a
   12448:	mov	r3, #0
   1244c:	cmp	r7, #0
   12450:	strd	r2, [r0]
   12454:	bne	12468 <debug_test@@Base+0xfc>
   12458:	mov	r1, #0
   1245c:	mov	r0, r4
   12460:	bl	13ba4 <flatcc_builder_end_buffer@@Base>
   12464:	b	12400 <debug_test@@Base+0x94>
   12468:	mov	r1, #2
   1246c:	mov	r0, r4
   12470:	bl	16584 <flatcc_builder_table_add_offset@@Base>
   12474:	cmp	r0, #0
   12478:	beq	12458 <debug_test@@Base+0xec>
   1247c:	mov	r3, #1
   12480:	str	r7, [r0]
   12484:	mov	r2, r3
   12488:	mov	r1, r3
   1248c:	mov	r0, r4
   12490:	bl	16364 <flatcc_builder_table_add@@Base>
   12494:	cmp	r0, #0
   12498:	beq	12458 <debug_test@@Base+0xec>
   1249c:	ldr	r6, [pc, #88]	; 124fc <debug_test@@Base+0x190>
   124a0:	mov	r3, #1
   124a4:	add	r6, pc, r6
   124a8:	strb	r3, [r0]
   124ac:	mov	r2, r5
   124b0:	mov	r1, r6
   124b4:	mov	r0, r4
   124b8:	bl	15270 <flatcc_builder_check_required@@Base>
   124bc:	cmp	r0, #0
   124c0:	beq	124d4 <debug_test@@Base+0x168>
   124c4:	mov	r0, r4
   124c8:	bl	15318 <flatcc_builder_end_table@@Base>
   124cc:	mov	r1, r0
   124d0:	b	1245c <debug_test@@Base+0xf0>
   124d4:	ldr	r1, [pc, #36]	; 12500 <debug_test@@Base+0x194>
   124d8:	ldr	r0, [pc, #36]	; 12504 <debug_test@@Base+0x198>
   124dc:	add	r3, r6, #4
   124e0:	mov	r2, #21
   124e4:	add	r1, pc, r1
   124e8:	add	r0, pc, r0
   124ec:	bl	12080 <__assert_fail@plt>
   124f0:	andeq	r5, r0, r4, ror #1
   124f4:	andeq	r6, r1, ip, asr ip
   124f8:	andeq	r0, r0, r8, asr r0
   124fc:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   12500:	andeq	r4, r0, r4, ror #31
   12504:	andeq	r5, r0, r4, asr r0

00012508 <emit_test@@Base>:
   12508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1250c:	sub	sp, sp, #364	; 0x16c
   12510:	ldr	r6, [pc, #1356]	; 12a64 <emit_test@@Base+0x55c>
   12514:	add	r3, sp, #68	; 0x44
   12518:	add	r6, pc, r6
   1251c:	add	lr, r6, #16
   12520:	str	r3, [sp, #24]
   12524:	mov	ip, r3
   12528:	ldm	lr!, {r0, r1, r2, r3}
   1252c:	add	r4, r6, #76	; 0x4c
   12530:	add	fp, sp, #128	; 0x80
   12534:	ldr	r5, [pc, #1324]	; 12a68 <emit_test@@Base+0x560>
   12538:	stmia	ip!, {r0, r1, r2, r3}
   1253c:	add	r5, pc, r5
   12540:	ldm	lr!, {r0, r1, r2, r3}
   12544:	stmia	ip!, {r0, r1, r2, r3}
   12548:	ldm	lr!, {r0, r1, r2, r3}
   1254c:	stmia	ip!, {r0, r1, r2, r3}
   12550:	ldm	lr, {r0, r1, r2}
   12554:	lsr	r3, r2, #16
   12558:	stmia	ip!, {r0, r1}
   1255c:	strh	r2, [ip], #2
   12560:	strb	r3, [ip]
   12564:	ldm	r4, {r0, r1, r2, r3}
   12568:	add	r4, sp, #32
   1256c:	stm	r4, {r0, r1, r2, r3}
   12570:	mov	r0, fp
   12574:	bl	131ac <flatcc_builder_init@@Base>
   12578:	mov	r0, fp
   1257c:	bl	16d4c <flatcc_builder_get_emit_context@@Base>
   12580:	mov	r3, #4
   12584:	mvn	r2, #-1073741824	; 0xc0000000
   12588:	mov	r1, r4
   1258c:	str	r2, [sp, #4]
   12590:	str	r3, [sp]
   12594:	mov	r2, r3
   12598:	mov	r7, r0
   1259c:	mov	r0, fp
   125a0:	bl	154e8 <flatcc_builder_create_vector@@Base>
   125a4:	mov	r3, #0
   125a8:	mov	r2, r3
   125ac:	mov	r1, r3
   125b0:	mov	r4, r0
   125b4:	mov	r0, fp
   125b8:	bl	13aec <flatcc_builder_start_buffer@@Base>
   125bc:	cmp	r0, #0
   125c0:	beq	125e4 <emit_test@@Base+0xdc>
   125c4:	ldr	r2, [r7, #4]
   125c8:	ldr	r3, [r7]
   125cc:	cmp	r2, r3
   125d0:	beq	12644 <emit_test@@Base+0x13c>
   125d4:	mvn	r4, #0
   125d8:	mov	r0, r4
   125dc:	add	sp, sp, #364	; 0x16c
   125e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e4:	mov	r1, #3
   125e8:	mov	r0, fp
   125ec:	bl	14924 <flatcc_builder_start_table@@Base>
   125f0:	subs	r8, r0, #0
   125f4:	bne	12628 <emit_test@@Base+0x120>
   125f8:	mov	r3, #8
   125fc:	mov	r2, r3
   12600:	mov	r1, r8
   12604:	mov	r0, fp
   12608:	bl	16364 <flatcc_builder_table_add@@Base>
   1260c:	cmp	r0, #0
   12610:	beq	12628 <emit_test@@Base+0x120>
   12614:	mov	r2, #42	; 0x2a
   12618:	mov	r3, #0
   1261c:	cmp	r4, #0
   12620:	strd	r2, [r0]
   12624:	bne	12950 <emit_test@@Base+0x448>
   12628:	mov	r1, #0
   1262c:	mov	r0, fp
   12630:	bl	13ba4 <flatcc_builder_end_buffer@@Base>
   12634:	ldr	r2, [r7, #4]
   12638:	ldr	r3, [r7]
   1263c:	cmp	r2, r3
   12640:	bne	125d4 <emit_test@@Base+0xcc>
   12644:	ldr	r3, [r7, #8]
   12648:	ldr	r4, [r7, #24]
   1264c:	cmp	r3, #0
   12650:	str	r3, [sp, #20]
   12654:	beq	125d4 <emit_test@@Base+0xcc>
   12658:	mov	r0, fp
   1265c:	bl	16a50 <flatcc_builder_get_buffer_size@@Base>
   12660:	cmp	r0, r4
   12664:	mov	r8, r0
   12668:	bne	129b4 <emit_test@@Base+0x4ac>
   1266c:	ldr	r3, [pc, #1016]	; 12a6c <emit_test@@Base+0x564>
   12670:	ldr	r1, [pc, #1016]	; 12a70 <emit_test@@Base+0x568>
   12674:	mov	r2, r0
   12678:	ldr	r4, [r5, r3]
   1267c:	add	r1, pc, r1
   12680:	ldr	r0, [r4]
   12684:	bl	12038 <fprintf@plt>
   12688:	ldr	r6, [r4]
   1268c:	ldr	r2, [pc, #992]	; 12a74 <emit_test@@Base+0x56c>
   12690:	ldr	r1, [pc, #992]	; 12a78 <emit_test@@Base+0x570>
   12694:	add	r2, pc, r2
   12698:	mov	r0, r6
   1269c:	add	r1, pc, r1
   126a0:	bl	12038 <fprintf@plt>
   126a4:	cmp	r8, #0
   126a8:	beq	12918 <emit_test@@Base+0x410>
   126ac:	ldr	r2, [pc, #968]	; 12a7c <emit_test@@Base+0x574>
   126b0:	ldr	r3, [pc, #968]	; 12a80 <emit_test@@Base+0x578>
   126b4:	add	r2, pc, r2
   126b8:	str	r2, [sp, #16]
   126bc:	ldr	r2, [sp, #20]
   126c0:	ldr	sl, [pc, #956]	; 12a84 <emit_test@@Base+0x57c>
   126c4:	mov	r4, #0
   126c8:	add	r3, pc, r3
   126cc:	sub	r7, r2, #1
   126d0:	add	r2, sp, #48	; 0x30
   126d4:	mov	r9, r4
   126d8:	str	fp, [sp, #28]
   126dc:	add	sl, pc, sl
   126e0:	mov	fp, r4
   126e4:	str	r2, [sp, #12]
   126e8:	mov	r4, r3
   126ec:	b	12758 <emit_test@@Base+0x250>
   126f0:	cmp	fp, #0
   126f4:	beq	12708 <emit_test@@Base+0x200>
   126f8:	ldr	r2, [sp, #12]
   126fc:	ldr	r1, [sp, #16]
   12700:	mov	r0, r6
   12704:	bl	12038 <fprintf@plt>
   12708:	mov	r2, fp
   1270c:	mov	r1, r4
   12710:	mov	r0, r6
   12714:	bl	12038 <fprintf@plt>
   12718:	ldrb	r2, [r7, #1]
   1271c:	mov	r1, sl
   12720:	mov	r0, r6
   12724:	bl	12038 <fprintf@plt>
   12728:	ldrb	r2, [r7, #1]!
   1272c:	add	r3, sp, #360	; 0x168
   12730:	add	r5, r3, r5
   12734:	sub	r1, r2, #32
   12738:	cmp	r1, #94	; 0x5e
   1273c:	movhi	r3, #46	; 0x2e
   12740:	add	fp, fp, #1
   12744:	strbhi	r3, [r5, #-312]	; 0xfffffec8
   12748:	strbls	r2, [r5, #-312]	; 0xfffffec8
   1274c:	cmp	r8, fp
   12750:	strb	r9, [r5, #-311]	; 0xfffffec9
   12754:	beq	12778 <emit_test@@Base+0x270>
   12758:	ands	r5, fp, #15
   1275c:	beq	126f0 <emit_test@@Base+0x1e8>
   12760:	tst	fp, #7
   12764:	bne	12718 <emit_test@@Base+0x210>
   12768:	mov	r1, r6
   1276c:	mov	r0, #32
   12770:	bl	12068 <fputc@plt>
   12774:	b	12718 <emit_test@@Base+0x210>
   12778:	tst	r8, #15
   1277c:	mov	r4, fp
   12780:	ldr	fp, [sp, #28]
   12784:	beq	127b8 <emit_test@@Base+0x2b0>
   12788:	ldr	r9, [pc, #760]	; 12a88 <emit_test@@Base+0x580>
   1278c:	mov	r7, #3
   12790:	add	r9, pc, r9
   12794:	mov	r5, #1
   12798:	add	r4, r4, #1
   1279c:	mov	r3, r6
   127a0:	mov	r2, r7
   127a4:	mov	r1, r5
   127a8:	mov	r0, r9
   127ac:	bl	11ff0 <fwrite@plt>
   127b0:	tst	r4, #15
   127b4:	bne	12798 <emit_test@@Base+0x290>
   127b8:	ldr	r1, [pc, #716]	; 12a8c <emit_test@@Base+0x584>
   127bc:	ldr	r2, [sp, #12]
   127c0:	mov	r0, r6
   127c4:	add	r1, pc, r1
   127c8:	bl	12038 <fprintf@plt>
   127cc:	cmp	r8, #58	; 0x3a
   127d0:	bne	1292c <emit_test@@Base+0x424>
   127d4:	mov	r2, r8
   127d8:	ldr	r1, [sp, #24]
   127dc:	ldr	r0, [sp, #20]
   127e0:	bl	11fd8 <memcmp@plt>
   127e4:	subs	r4, r0, #0
   127e8:	bne	129fc <emit_test@@Base+0x4f4>
   127ec:	ldr	r3, [sp, #20]
   127f0:	ldr	r2, [r3]
   127f4:	adds	r3, r3, r2
   127f8:	beq	129d8 <emit_test@@Base+0x4d0>
   127fc:	ldr	r1, [sp, #20]
   12800:	ldr	r2, [r1, r2]
   12804:	sub	r2, r3, r2
   12808:	ldrh	r1, [r2]
   1280c:	cmp	r1, #5
   12810:	bhi	12838 <emit_test@@Base+0x330>
   12814:	ldr	r3, [pc, #628]	; 12a90 <emit_test@@Base+0x588>
   12818:	ldr	r1, [pc, #628]	; 12a94 <emit_test@@Base+0x58c>
   1281c:	ldr	r0, [pc, #628]	; 12a98 <emit_test@@Base+0x590>
   12820:	add	r3, pc, r3
   12824:	mov	r2, #112	; 0x70
   12828:	add	r3, r3, #92	; 0x5c
   1282c:	add	r1, pc, r1
   12830:	add	r0, pc, r0
   12834:	bl	12080 <__assert_fail@plt>
   12838:	ldrh	r0, [r2, #4]
   1283c:	cmp	r0, #0
   12840:	beq	12814 <emit_test@@Base+0x30c>
   12844:	ldrd	r6, [r3, r0]
   12848:	cmp	r7, #0
   1284c:	cmpeq	r6, #42	; 0x2a
   12850:	bne	12814 <emit_test@@Base+0x30c>
   12854:	cmp	r1, #7
   12858:	bhi	12880 <emit_test@@Base+0x378>
   1285c:	ldr	r3, [pc, #568]	; 12a9c <emit_test@@Base+0x594>
   12860:	ldr	r1, [pc, #568]	; 12aa0 <emit_test@@Base+0x598>
   12864:	ldr	r0, [pc, #568]	; 12aa4 <emit_test@@Base+0x59c>
   12868:	add	r3, pc, r3
   1286c:	mov	r2, #113	; 0x71
   12870:	add	r3, r3, #92	; 0x5c
   12874:	add	r1, pc, r1
   12878:	add	r0, pc, r0
   1287c:	bl	12080 <__assert_fail@plt>
   12880:	ldrh	r0, [r2, #6]
   12884:	cmp	r0, #0
   12888:	beq	1285c <emit_test@@Base+0x354>
   1288c:	ldrb	r0, [r3, r0]
   12890:	cmp	r0, #1
   12894:	bne	1285c <emit_test@@Base+0x354>
   12898:	cmp	r1, #9
   1289c:	bhi	128c4 <emit_test@@Base+0x3bc>
   128a0:	ldr	r3, [pc, #512]	; 12aa8 <emit_test@@Base+0x5a0>
   128a4:	ldr	r1, [pc, #512]	; 12aac <emit_test@@Base+0x5a4>
   128a8:	ldr	r0, [pc, #512]	; 12ab0 <emit_test@@Base+0x5a8>
   128ac:	add	r3, pc, r3
   128b0:	mov	r2, #114	; 0x72
   128b4:	add	r3, r3, #92	; 0x5c
   128b8:	add	r1, pc, r1
   128bc:	add	r0, pc, r0
   128c0:	bl	12080 <__assert_fail@plt>
   128c4:	ldrh	r1, [r2, #8]
   128c8:	cmp	r1, #0
   128cc:	beq	128a0 <emit_test@@Base+0x398>
   128d0:	ldr	r2, [r3, r1]
   128d4:	add	r3, r3, r1
   128d8:	add	r2, r2, #4
   128dc:	adds	r3, r3, r2
   128e0:	beq	128a0 <emit_test@@Base+0x398>
   128e4:	ldr	r2, [r3, #-4]
   128e8:	cmp	r2, #4
   128ec:	bne	128a0 <emit_test@@Base+0x398>
   128f0:	vldr	s15, [pc, #360]	; 12a60 <emit_test@@Base+0x558>
   128f4:	vldr	s14, [r3, #8]
   128f8:	vcmp.f32	s14, s15
   128fc:	vmrs	APSR_nzcv, fpscr
   12900:	bne	12a20 <emit_test@@Base+0x518>
   12904:	mov	r0, fp
   12908:	bl	13334 <flatcc_builder_clear@@Base>
   1290c:	mov	r0, r4
   12910:	add	sp, sp, #364	; 0x16c
   12914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12918:	ldr	r1, [pc, #404]	; 12ab4 <emit_test@@Base+0x5ac>
   1291c:	mov	r0, r6
   12920:	add	r2, sp, #48	; 0x30
   12924:	add	r1, pc, r1
   12928:	bl	12038 <fprintf@plt>
   1292c:	ldr	r3, [pc, #388]	; 12ab8 <emit_test@@Base+0x5b0>
   12930:	ldr	r1, [pc, #388]	; 12abc <emit_test@@Base+0x5b4>
   12934:	ldr	r0, [pc, #388]	; 12ac0 <emit_test@@Base+0x5b8>
   12938:	add	r3, pc, r3
   1293c:	mov	r2, #106	; 0x6a
   12940:	add	r3, r3, #92	; 0x5c
   12944:	add	r1, pc, r1
   12948:	add	r0, pc, r0
   1294c:	bl	12080 <__assert_fail@plt>
   12950:	mov	r1, #2
   12954:	mov	r0, fp
   12958:	bl	16584 <flatcc_builder_table_add_offset@@Base>
   1295c:	cmp	r0, #0
   12960:	beq	12628 <emit_test@@Base+0x120>
   12964:	mov	r3, #1
   12968:	str	r4, [r0]
   1296c:	mov	r2, r3
   12970:	mov	r1, r3
   12974:	mov	r0, fp
   12978:	bl	16364 <flatcc_builder_table_add@@Base>
   1297c:	cmp	r0, #0
   12980:	beq	12628 <emit_test@@Base+0x120>
   12984:	mov	r3, #1
   12988:	strb	r3, [r0]
   1298c:	mov	r2, r8
   12990:	mov	r1, r6
   12994:	mov	r0, fp
   12998:	bl	15270 <flatcc_builder_check_required@@Base>
   1299c:	cmp	r0, #0
   129a0:	beq	12a44 <emit_test@@Base+0x53c>
   129a4:	mov	r0, fp
   129a8:	bl	15318 <flatcc_builder_end_table@@Base>
   129ac:	mov	r1, r0
   129b0:	b	1262c <emit_test@@Base+0x124>
   129b4:	ldr	r3, [pc, #264]	; 12ac4 <emit_test@@Base+0x5bc>
   129b8:	ldr	r1, [pc, #264]	; 12ac8 <emit_test@@Base+0x5c0>
   129bc:	ldr	r0, [pc, #264]	; 12acc <emit_test@@Base+0x5c4>
   129c0:	add	r3, pc, r3
   129c4:	mov	r2, #101	; 0x65
   129c8:	add	r3, r3, #92	; 0x5c
   129cc:	add	r1, pc, r1
   129d0:	add	r0, pc, r0
   129d4:	bl	12080 <__assert_fail@plt>
   129d8:	ldr	r3, [pc, #240]	; 12ad0 <emit_test@@Base+0x5c8>
   129dc:	ldr	r1, [pc, #240]	; 12ad4 <emit_test@@Base+0x5cc>
   129e0:	ldr	r0, [pc, #240]	; 12ad8 <emit_test@@Base+0x5d0>
   129e4:	add	r3, pc, r3
   129e8:	mov	r2, #41	; 0x29
   129ec:	add	r3, r3, #104	; 0x68
   129f0:	add	r1, pc, r1
   129f4:	add	r0, pc, r0
   129f8:	bl	12080 <__assert_fail@plt>
   129fc:	ldr	r3, [pc, #216]	; 12adc <emit_test@@Base+0x5d4>
   12a00:	ldr	r1, [pc, #216]	; 12ae0 <emit_test@@Base+0x5d8>
   12a04:	ldr	r0, [pc, #216]	; 12ae4 <emit_test@@Base+0x5dc>
   12a08:	add	r3, pc, r3
   12a0c:	mov	r2, #108	; 0x6c
   12a10:	add	r3, r3, #92	; 0x5c
   12a14:	add	r1, pc, r1
   12a18:	add	r0, pc, r0
   12a1c:	bl	12080 <__assert_fail@plt>
   12a20:	ldr	r3, [pc, #192]	; 12ae8 <emit_test@@Base+0x5e0>
   12a24:	ldr	r1, [pc, #192]	; 12aec <emit_test@@Base+0x5e4>
   12a28:	ldr	r0, [pc, #192]	; 12af0 <emit_test@@Base+0x5e8>
   12a2c:	add	r3, pc, r3
   12a30:	mov	r2, #115	; 0x73
   12a34:	add	r3, r3, #92	; 0x5c
   12a38:	add	r1, pc, r1
   12a3c:	add	r0, pc, r0
   12a40:	bl	12080 <__assert_fail@plt>
   12a44:	ldr	r1, [pc, #168]	; 12af4 <emit_test@@Base+0x5ec>
   12a48:	ldr	r0, [pc, #168]	; 12af8 <emit_test@@Base+0x5f0>
   12a4c:	add	r3, r6, #4
   12a50:	mov	r2, #21
   12a54:	add	r1, pc, r1
   12a58:	add	r0, pc, r0
   12a5c:	bl	12080 <__assert_fail@plt>
   12a60:	svccc	0x0099999a
   12a64:	andeq	r4, r0, r0, ror #28
   12a68:			; <UNDEFINED> instruction: 0x00016abc
   12a6c:	andeq	r0, r0, ip, asr r0
   12a70:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   12a74:	andeq	r4, r0, ip, lsl #31
   12a78:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   12a7c:	andeq	r4, r0, r0, lsl #31
   12a80:	andeq	r4, r0, r4, ror pc
   12a84:	andeq	r4, r0, r8, ror #30
   12a88:			; <UNDEFINED> instruction: 0x00004ebc
   12a8c:	andeq	r4, r0, r0, ror lr
   12a90:	andeq	r4, r0, r8, asr fp
   12a94:	andeq	r4, r0, ip, ror sp
   12a98:	muleq	r0, r4, r6
   12a9c:	andeq	r4, r0, r0, lsl fp
   12aa0:	andeq	r4, r0, r4, lsr sp
   12aa4:	andeq	r5, r0, ip, asr #12
   12aa8:	andeq	r4, r0, ip, asr #21
   12aac:	strdeq	r4, [r0], -r0
   12ab0:	andeq	r5, r0, r8, lsl #12
   12ab4:	andeq	r4, r0, r0, lsl sp
   12ab8:	andeq	r4, r0, r0, asr #20
   12abc:	andeq	r4, r0, r4, ror #24
   12ac0:	andeq	r5, r0, ip, ror r5
   12ac4:			; <UNDEFINED> instruction: 0x000049b8
   12ac8:	ldrdeq	r4, [r0], -ip
   12acc:	strdeq	r5, [r0], -r4
   12ad0:	muleq	r0, r4, r9
   12ad4:	andeq	r4, r0, r0, ror #24
   12ad8:	ldrdeq	r4, [r0], -r0
   12adc:	andeq	r4, r0, r0, ror r9
   12ae0:	muleq	r0, r4, fp
   12ae4:	andeq	r5, r0, ip, lsr #9
   12ae8:	andeq	r4, r0, ip, asr #18
   12aec:	andeq	r4, r0, r0, ror fp
   12af0:	andeq	r5, r0, r8, lsl #9
   12af4:	andeq	r4, r0, r4, ror sl
   12af8:	andeq	r4, r0, r4, ror #21
   12afc:	push	{r4, r5, r6, lr}
   12b00:	mov	r4, r0
   12b04:	ldr	ip, [r0, #28]
   12b08:	sub	sp, sp, #8
   12b0c:	mov	r3, #1
   12b10:	ldr	r0, [r0, #40]	; 0x28
   12b14:	ldr	r6, [r4, #48]	; 0x30
   12b18:	mov	r5, r2
   12b1c:	str	r3, [sp]
   12b20:	add	r2, r1, ip
   12b24:	add	r1, r4, #60	; 0x3c
   12b28:	blx	r6
   12b2c:	cmp	r0, #0
   12b30:	bne	12b68 <emit_test@@Base+0x660>
   12b34:	ldr	r1, [r4, #28]
   12b38:	ldr	r3, [r4, #64]	; 0x40
   12b3c:	ldr	r2, [r4, #60]	; 0x3c
   12b40:	sub	r3, r3, r1
   12b44:	ldr	ip, [r4, #32]
   12b48:	cmp	r3, r5
   12b4c:	movcs	r3, r5
   12b50:	add	r2, r2, r1
   12b54:	str	r3, [r4, #24]
   12b58:	str	r2, [r4, #16]
   12b5c:	str	r5, [ip, #4]
   12b60:	add	sp, sp, #8
   12b64:	pop	{r4, r5, r6, pc}
   12b68:	mvn	r0, #0
   12b6c:	b	12b60 <emit_test@@Base+0x658>

00012b70 <flatcc_builder_default_alloc@@Base>:
   12b70:	push	{r4, r5, r6, r7, r8, lr}
   12b74:	subs	r5, r2, #0
   12b78:	mov	r6, r1
   12b7c:	bne	12ba0 <flatcc_builder_default_alloc@@Base+0x30>
   12b80:	ldr	r0, [r1]
   12b84:	cmp	r0, #0
   12b88:	popeq	{r4, r5, r6, r7, r8, pc}
   12b8c:	bl	11fc0 <free@plt>
   12b90:	str	r5, [r6]
   12b94:	str	r5, [r6, #4]
   12b98:	mov	r0, r5
   12b9c:	pop	{r4, r5, r6, r7, r8, pc}
   12ba0:	mov	r7, r3
   12ba4:	ldr	r3, [sp, #24]
   12ba8:	sub	r2, r3, #1
   12bac:	cmp	r2, #6
   12bb0:	addls	pc, pc, r2, lsl #2
   12bb4:	b	12c50 <flatcc_builder_default_alloc@@Base+0xe0>
   12bb8:	b	12c24 <flatcc_builder_default_alloc@@Base+0xb4>
   12bbc:	b	12c50 <flatcc_builder_default_alloc@@Base+0xe0>
   12bc0:	b	12c50 <flatcc_builder_default_alloc@@Base+0xe0>
   12bc4:	b	12c48 <flatcc_builder_default_alloc@@Base+0xd8>
   12bc8:	b	12bd4 <flatcc_builder_default_alloc@@Base+0x64>
   12bcc:	b	12c50 <flatcc_builder_default_alloc@@Base+0xe0>
   12bd0:	b	12c40 <flatcc_builder_default_alloc@@Base+0xd0>
   12bd4:	mov	r4, r5
   12bd8:	ldr	r3, [r6, #4]
   12bdc:	cmp	r5, r3
   12be0:	bhi	12bec <flatcc_builder_default_alloc@@Base+0x7c>
   12be4:	cmp	r4, r3, lsr #1
   12be8:	bls	12c58 <flatcc_builder_default_alloc@@Base+0xe8>
   12bec:	mov	r1, r4
   12bf0:	ldr	r0, [r6]
   12bf4:	bl	11fe4 <realloc@plt>
   12bf8:	subs	r5, r0, #0
   12bfc:	beq	12c74 <flatcc_builder_default_alloc@@Base+0x104>
   12c00:	cmp	r7, #0
   12c04:	beq	12c14 <flatcc_builder_default_alloc@@Base+0xa4>
   12c08:	ldr	r0, [r6, #4]
   12c0c:	cmp	r0, r4
   12c10:	bcc	12c60 <flatcc_builder_default_alloc@@Base+0xf0>
   12c14:	str	r5, [r6]
   12c18:	str	r4, [r6, #4]
   12c1c:	mov	r0, #0
   12c20:	pop	{r4, r5, r6, r7, r8, pc}
   12c24:	mov	r4, #256	; 0x100
   12c28:	cmp	r5, r4
   12c2c:	bls	12bd8 <flatcc_builder_default_alloc@@Base+0x68>
   12c30:	lsl	r4, r4, #1
   12c34:	cmp	r5, r4
   12c38:	bhi	12c30 <flatcc_builder_default_alloc@@Base+0xc0>
   12c3c:	b	12bd8 <flatcc_builder_default_alloc@@Base+0x68>
   12c40:	mov	r4, #64	; 0x40
   12c44:	b	12c28 <flatcc_builder_default_alloc@@Base+0xb8>
   12c48:	mov	r4, #288	; 0x120
   12c4c:	b	12c28 <flatcc_builder_default_alloc@@Base+0xb8>
   12c50:	mov	r4, #32
   12c54:	b	12c28 <flatcc_builder_default_alloc@@Base+0xb8>
   12c58:	mov	r0, #0
   12c5c:	pop	{r4, r5, r6, r7, r8, pc}
   12c60:	sub	r2, r4, r0
   12c64:	mov	r1, #0
   12c68:	add	r0, r5, r0
   12c6c:	bl	12050 <memset@plt>
   12c70:	b	12c14 <flatcc_builder_default_alloc@@Base+0xa4>
   12c74:	mvn	r0, #0
   12c78:	pop	{r4, r5, r6, r7, r8, pc}
   12c7c:	push	{r4, r5, lr}
   12c80:	cmp	r2, #0
   12c84:	ldr	lr, [pc, #248]	; 12d84 <flatcc_builder_default_alloc@@Base+0x214>
   12c88:	sub	sp, sp, #84	; 0x54
   12c8c:	mov	ip, r0
   12c90:	add	lr, pc, lr
   12c94:	bne	12ca4 <flatcc_builder_default_alloc@@Base+0x134>
   12c98:	ldrh	r2, [r0, #132]	; 0x84
   12c9c:	cmp	r2, #0
   12ca0:	moveq	r2, #1
   12ca4:	ldrh	r0, [r1]
   12ca8:	cmp	r0, #3
   12cac:	movls	r4, #4
   12cb0:	movls	r0, r4
   12cb4:	strhls	r4, [r1]
   12cb8:	cmp	r2, r0
   12cbc:	strhhi	r2, [r1]
   12cc0:	cmp	r3, #0
   12cc4:	bne	12cd8 <flatcc_builder_default_alloc@@Base+0x168>
   12cc8:	ldr	r4, [ip, #140]	; 0x8c
   12ccc:	sub	r2, r2, #1
   12cd0:	ands	r3, r2, r4
   12cd4:	bne	12ce4 <flatcc_builder_default_alloc@@Base+0x174>
   12cd8:	mov	r0, #0
   12cdc:	add	sp, sp, #84	; 0x54
   12ce0:	pop	{r4, r5, pc}
   12ce4:	ldr	r2, [pc, #156]	; 12d88 <flatcc_builder_default_alloc@@Base+0x218>
   12ce8:	add	r1, r4, r3
   12cec:	str	r3, [sp, #8]
   12cf0:	ldr	r0, [lr, r2]
   12cf4:	cmp	r4, r1
   12cf8:	mov	r2, #1
   12cfc:	str	r0, [sp, #16]
   12d00:	str	r3, [sp, #20]
   12d04:	str	r1, [ip, #140]	; 0x8c
   12d08:	str	r2, [sp, #12]
   12d0c:	bgt	12d5c <flatcc_builder_default_alloc@@Base+0x1ec>
   12d10:	ldr	r0, [ip, #36]	; 0x24
   12d14:	add	r1, sp, #16
   12d18:	str	r3, [sp]
   12d1c:	mov	r3, r4
   12d20:	ldr	r5, [ip, #44]	; 0x2c
   12d24:	blx	r5
   12d28:	cmp	r0, #0
   12d2c:	bne	12d60 <flatcc_builder_default_alloc@@Base+0x1f0>
   12d30:	cmn	r4, #1
   12d34:	bne	12cd8 <flatcc_builder_default_alloc@@Base+0x168>
   12d38:	ldr	r3, [pc, #76]	; 12d8c <flatcc_builder_default_alloc@@Base+0x21c>
   12d3c:	ldr	r1, [pc, #76]	; 12d90 <flatcc_builder_default_alloc@@Base+0x220>
   12d40:	ldr	r0, [pc, #76]	; 12d94 <flatcc_builder_default_alloc@@Base+0x224>
   12d44:	add	r3, pc, r3
   12d48:	ldr	r2, [pc, #72]	; 12d98 <flatcc_builder_default_alloc@@Base+0x228>
   12d4c:	add	r3, r3, #60	; 0x3c
   12d50:	add	r1, pc, r1
   12d54:	add	r0, pc, r0
   12d58:	bl	12080 <__assert_fail@plt>
   12d5c:	bl	120bc <__assert_fail@plt+0x3c>
   12d60:	ldr	r3, [pc, #52]	; 12d9c <flatcc_builder_default_alloc@@Base+0x22c>
   12d64:	ldr	r1, [pc, #52]	; 12da0 <flatcc_builder_default_alloc@@Base+0x230>
   12d68:	ldr	r0, [pc, #52]	; 12da4 <flatcc_builder_default_alloc@@Base+0x234>
   12d6c:	add	r3, pc, r3
   12d70:	ldr	r2, [pc, #48]	; 12da8 <flatcc_builder_default_alloc@@Base+0x238>
   12d74:	add	r3, r3, #16
   12d78:	add	r1, pc, r1
   12d7c:	add	r0, pc, r0
   12d80:	bl	12080 <__assert_fail@plt>
   12d84:	andeq	r6, r1, r8, ror #6
   12d88:	andeq	r0, r0, r4, asr r0
   12d8c:	andeq	r4, r0, r8, lsr #19
   12d90:	andeq	r5, r0, ip, ror #1
   12d94:	andeq	r5, r0, r0, ror r1
   12d98:			; <UNDEFINED> instruction: 0x000002be
   12d9c:	andeq	r4, r0, r0, lsl #19
   12da0:	andeq	r5, r0, r4, asr #1
   12da4:	andeq	r5, r0, r8, asr #2
   12da8:	andeq	r0, r0, r5, lsr #5
   12dac:	push	{r4, r5, r6, r7, lr}
   12db0:	mov	r5, r1
   12db4:	ldr	r1, [r0, #156]	; 0x9c
   12db8:	ldr	r3, [r0, #160]	; 0xa0
   12dbc:	add	r2, r1, #1
   12dc0:	cmp	r2, r3
   12dc4:	sub	sp, sp, #12
   12dc8:	mov	r4, r0
   12dcc:	str	r2, [r0, #156]	; 0x9c
   12dd0:	ble	12e40 <flatcc_builder_default_alloc@@Base+0x2d0>
   12dd4:	ldr	r3, [r0, #176]	; 0xb0
   12dd8:	cmp	r3, #0
   12ddc:	cmpgt	r2, r3
   12de0:	movgt	r3, #1
   12de4:	movle	r3, #0
   12de8:	bgt	12eb4 <flatcc_builder_default_alloc@@Base+0x344>
   12dec:	add	r1, r1, r1, lsl #3
   12df0:	ldr	r0, [r0, #88]	; 0x58
   12df4:	lsl	r6, r1, #2
   12df8:	add	r2, r6, #36	; 0x24
   12dfc:	cmp	r2, r0
   12e00:	bhi	12e90 <flatcc_builder_default_alloc@@Base+0x320>
   12e04:	ldr	r3, [r4, #84]	; 0x54
   12e08:	add	r3, r3, r6
   12e0c:	cmp	r3, #0
   12e10:	str	r3, [r4, #32]
   12e14:	beq	12eb4 <flatcc_builder_default_alloc@@Base+0x344>
   12e18:	ldr	r2, [r4, #88]	; 0x58
   12e1c:	ldr	r0, [pc, #152]	; 12ebc <flatcc_builder_default_alloc@@Base+0x34c>
   12e20:	ldr	r1, [r4, #176]	; 0xb0
   12e24:	umull	r0, r2, r0, r2
   12e28:	lsr	r2, r2, #3
   12e2c:	cmp	r1, #0
   12e30:	cmpgt	r2, r1
   12e34:	str	r2, [r4, #160]	; 0xa0
   12e38:	strgt	r1, [r4, #160]	; 0xa0
   12e3c:	b	12e4c <flatcc_builder_default_alloc@@Base+0x2dc>
   12e40:	ldr	r3, [r0, #32]
   12e44:	add	r3, r3, #36	; 0x24
   12e48:	str	r3, [r0, #32]
   12e4c:	ldr	r0, [r4, #20]
   12e50:	ldr	ip, [r4, #28]
   12e54:	ldrh	lr, [r4, #130]	; 0x82
   12e58:	add	r2, r0, ip
   12e5c:	mov	r1, #0
   12e60:	str	r0, [r3, #8]
   12e64:	strh	lr, [r3, #12]
   12e68:	add	r2, r2, #7
   12e6c:	mvn	lr, #3
   12e70:	mov	r0, r1
   12e74:	bic	r2, r2, #7
   12e78:	strh	r5, [r4, #130]	; 0x82
   12e7c:	stm	r3, {ip, lr}
   12e80:	str	r2, [r4, #28]
   12e84:	str	r1, [r4, #20]
   12e88:	add	sp, sp, #12
   12e8c:	pop	{r4, r5, r6, r7, pc}
   12e90:	mov	r1, #4
   12e94:	ldr	r0, [r4, #40]	; 0x28
   12e98:	str	r1, [sp]
   12e9c:	add	r1, r4, #84	; 0x54
   12ea0:	ldr	r7, [r4, #48]	; 0x30
   12ea4:	blx	r7
   12ea8:	cmp	r0, #0
   12eac:	beq	12e04 <flatcc_builder_default_alloc@@Base+0x294>
   12eb0:	bl	1208c <__assert_fail@plt+0xc>
   12eb4:	mvn	r0, #0
   12eb8:	b	12e88 <flatcc_builder_default_alloc@@Base+0x318>
   12ebc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   12ec0:	push	{r4, r5, r6, r7, lr}
   12ec4:	mov	r5, r0
   12ec8:	ldrh	r0, [r0, #128]	; 0x80
   12ecc:	sub	sp, sp, #92	; 0x5c
   12ed0:	add	ip, sp, #12
   12ed4:	cmp	r0, #3
   12ed8:	movls	r0, #4
   12edc:	strhls	r0, [r5, #128]	; 0x80
   12ee0:	ldr	r4, [pc, #448]	; 130a8 <flatcc_builder_default_alloc@@Base+0x538>
   12ee4:	ldr	r0, [r5, #136]	; 0x88
   12ee8:	mov	r7, #4
   12eec:	mov	r6, #1
   12ef0:	str	ip, [sp, #24]
   12ef4:	lsls	ip, r2, #2
   12ef8:	add	r4, pc, r4
   12efc:	str	r2, [sp, #12]
   12f00:	and	lr, r0, #3
   12f04:	str	r7, [sp, #16]
   12f08:	str	r7, [sp, #28]
   12f0c:	str	r6, [sp, #20]
   12f10:	beq	12f2c <flatcc_builder_default_alloc@@Base+0x3bc>
   12f14:	add	r7, ip, r7
   12f18:	mov	r6, #2
   12f1c:	str	r1, [sp, #32]
   12f20:	str	ip, [sp, #36]	; 0x24
   12f24:	str	r7, [sp, #16]
   12f28:	str	r6, [sp, #20]
   12f2c:	cmp	lr, #0
   12f30:	beq	12f60 <flatcc_builder_default_alloc@@Base+0x3f0>
   12f34:	ldr	ip, [sp, #20]
   12f38:	ldr	r6, [pc, #364]	; 130ac <flatcc_builder_default_alloc@@Base+0x53c>
   12f3c:	add	ip, ip, #1
   12f40:	add	r7, r7, lr
   12f44:	str	r7, [sp, #16]
   12f48:	ldr	r6, [r4, r6]
   12f4c:	add	r4, sp, #88	; 0x58
   12f50:	add	r4, r4, ip, lsl #3
   12f54:	str	ip, [sp, #20]
   12f58:	str	r6, [r4, #-72]	; 0xffffffb8
   12f5c:	str	lr, [r4, #-68]	; 0xffffffbc
   12f60:	cmp	r2, #0
   12f64:	sub	r4, r0, r7
   12f68:	beq	12ffc <flatcc_builder_default_alloc@@Base+0x48c>
   12f6c:	add	r6, r3, r2
   12f70:	mvn	ip, #3
   12f74:	mov	r2, r3
   12f78:	b	12fb0 <flatcc_builder_default_alloc@@Base+0x440>
   12f7c:	sub	r0, ip, r4
   12f80:	add	r0, r0, lr
   12f84:	cmp	r3, #0
   12f88:	str	r0, [r1]
   12f8c:	beq	12f9c <flatcc_builder_default_alloc@@Base+0x42c>
   12f90:	ldrb	r0, [r2]
   12f94:	cmp	r0, #0
   12f98:	beq	1305c <flatcc_builder_default_alloc@@Base+0x4ec>
   12f9c:	add	r2, r2, #1
   12fa0:	cmp	r2, r6
   12fa4:	add	r1, r1, #4
   12fa8:	sub	ip, ip, #4
   12fac:	beq	12ff4 <flatcc_builder_default_alloc@@Base+0x484>
   12fb0:	ldr	lr, [r1]
   12fb4:	cmp	lr, #0
   12fb8:	bne	12f7c <flatcc_builder_default_alloc@@Base+0x40c>
   12fbc:	cmp	r3, #0
   12fc0:	beq	13038 <flatcc_builder_default_alloc@@Base+0x4c8>
   12fc4:	ldrb	r0, [r2]
   12fc8:	cmp	r0, #0
   12fcc:	beq	12f9c <flatcc_builder_default_alloc@@Base+0x42c>
   12fd0:	ldr	r3, [pc, #216]	; 130b0 <flatcc_builder_default_alloc@@Base+0x540>
   12fd4:	ldr	r1, [pc, #216]	; 130b4 <flatcc_builder_default_alloc@@Base+0x544>
   12fd8:	ldr	r0, [pc, #216]	; 130b8 <flatcc_builder_default_alloc@@Base+0x548>
   12fdc:	add	r3, pc, r3
   12fe0:	ldr	r2, [pc, #212]	; 130bc <flatcc_builder_default_alloc@@Base+0x54c>
   12fe4:	add	r3, r3, #76	; 0x4c
   12fe8:	add	r1, pc, r1
   12fec:	add	r0, pc, r0
   12ff0:	bl	12080 <__assert_fail@plt>
   12ff4:	ldr	r0, [r5, #136]	; 0x88
   12ff8:	sub	r4, r0, r7
   12ffc:	cmp	r4, r0
   13000:	bge	130a4 <flatcc_builder_default_alloc@@Base+0x534>
   13004:	ldr	r0, [r5, #36]	; 0x24
   13008:	ldr	r2, [sp, #20]
   1300c:	str	r7, [sp]
   13010:	mov	r3, r4
   13014:	ldr	r6, [r5, #44]	; 0x2c
   13018:	add	r1, sp, #24
   1301c:	blx	r6
   13020:	cmp	r0, #0
   13024:	bne	13080 <flatcc_builder_default_alloc@@Base+0x510>
   13028:	mov	r0, r4
   1302c:	str	r4, [r5, #136]	; 0x88
   13030:	add	sp, sp, #92	; 0x5c
   13034:	pop	{r4, r5, r6, r7, pc}
   13038:	ldr	r3, [pc, #128]	; 130c0 <flatcc_builder_default_alloc@@Base+0x550>
   1303c:	ldr	r1, [pc, #128]	; 130c4 <flatcc_builder_default_alloc@@Base+0x554>
   13040:	ldr	r0, [pc, #128]	; 130c8 <flatcc_builder_default_alloc@@Base+0x558>
   13044:	add	r3, pc, r3
   13048:	ldr	r2, [pc, #124]	; 130cc <flatcc_builder_default_alloc@@Base+0x55c>
   1304c:	add	r3, r3, #76	; 0x4c
   13050:	add	r1, pc, r1
   13054:	add	r0, pc, r0
   13058:	bl	12080 <__assert_fail@plt>
   1305c:	ldr	r3, [pc, #108]	; 130d0 <flatcc_builder_default_alloc@@Base+0x560>
   13060:	ldr	r1, [pc, #108]	; 130d4 <flatcc_builder_default_alloc@@Base+0x564>
   13064:	ldr	r0, [pc, #108]	; 130d8 <flatcc_builder_default_alloc@@Base+0x568>
   13068:	add	r3, pc, r3
   1306c:	ldr	r2, [pc, #104]	; 130dc <flatcc_builder_default_alloc@@Base+0x56c>
   13070:	add	r3, r3, #76	; 0x4c
   13074:	add	r1, pc, r1
   13078:	add	r0, pc, r0
   1307c:	bl	12080 <__assert_fail@plt>
   13080:	ldr	r3, [pc, #88]	; 130e0 <flatcc_builder_default_alloc@@Base+0x570>
   13084:	ldr	r1, [pc, #88]	; 130e4 <flatcc_builder_default_alloc@@Base+0x574>
   13088:	ldr	r0, [pc, #88]	; 130e8 <flatcc_builder_default_alloc@@Base+0x578>
   1308c:	add	r3, pc, r3
   13090:	ldr	r2, [pc, #84]	; 130ec <flatcc_builder_default_alloc@@Base+0x57c>
   13094:	add	r3, r3, #28
   13098:	add	r1, pc, r1
   1309c:	add	r0, pc, r0
   130a0:	bl	12080 <__assert_fail@plt>
   130a4:	bl	120f4 <__assert_fail@plt+0x74>
   130a8:	andeq	r6, r1, r0, lsl #2
   130ac:	andeq	r0, r0, r4, asr r0
   130b0:	andeq	r4, r0, r0, lsl r7
   130b4:	andeq	r4, r0, r4, asr lr
   130b8:	ldrdeq	r4, [r0], -ip
   130bc:			; <UNDEFINED> instruction: 0x000005b5
   130c0:	andeq	r4, r0, r8, lsr #13
   130c4:	andeq	r4, r0, ip, ror #27
   130c8:	andeq	r4, r0, r0, ror lr
   130cc:			; <UNDEFINED> instruction: 0x000005b7
   130d0:	andeq	r4, r0, r4, lsl #13
   130d4:	andeq	r4, r0, r8, asr #27
   130d8:	andeq	r4, r0, r0, asr #28
   130dc:			; <UNDEFINED> instruction: 0x000005b1
   130e0:	andeq	r4, r0, r0, ror #12
   130e4:	andeq	r4, r0, r4, lsr #27
   130e8:	andeq	r4, r0, r8, lsr #28
   130ec:	andeq	r0, r0, fp, lsl #5

000130f0 <flatcc_builder_flush_vtable_cache@@Base>:
   130f0:	ldr	r3, [r0, #116]	; 0x74
   130f4:	cmp	r3, #0
   130f8:	bxeq	lr
   130fc:	ldr	r2, [r0, #96]	; 0x60
   13100:	push	{r4, lr}
   13104:	mov	r1, #0
   13108:	mov	r4, r0
   1310c:	ldr	r0, [r0, #92]	; 0x5c
   13110:	bl	12050 <memset@plt>
   13114:	mov	r2, #16
   13118:	mov	r3, #0
   1311c:	str	r2, [r4, #124]	; 0x7c
   13120:	str	r3, [r4, #120]	; 0x78
   13124:	pop	{r4, pc}

00013128 <flatcc_builder_custom_init@@Base>:
   13128:	push	{r4, r5, r6, r7, r8, lr}
   1312c:	mov	r6, r1
   13130:	mov	r7, r2
   13134:	mov	r1, #0
   13138:	mov	r2, #232	; 0xe8
   1313c:	mov	r5, r3
   13140:	mov	r4, r0
   13144:	ldr	r8, [sp, #24]
   13148:	bl	12050 <memset@plt>
   1314c:	ldr	r3, [pc, #76]	; 131a0 <flatcc_builder_custom_init@@Base+0x78>
   13150:	cmp	r6, #0
   13154:	add	r3, pc, r3
   13158:	beq	13188 <flatcc_builder_custom_init@@Base+0x60>
   1315c:	cmp	r5, #0
   13160:	beq	1317c <flatcc_builder_custom_init@@Base+0x54>
   13164:	str	r8, [r4, #40]	; 0x28
   13168:	str	r5, [r4, #48]	; 0x30
   1316c:	str	r7, [r4, #36]	; 0x24
   13170:	str	r6, [r4, #44]	; 0x2c
   13174:	mov	r0, #0
   13178:	pop	{r4, r5, r6, r7, r8, pc}
   1317c:	ldr	r2, [pc, #32]	; 131a4 <flatcc_builder_custom_init@@Base+0x7c>
   13180:	ldr	r5, [r3, r2]
   13184:	b	13164 <flatcc_builder_custom_init@@Base+0x3c>
   13188:	ldr	r2, [pc, #24]	; 131a8 <flatcc_builder_custom_init@@Base+0x80>
   1318c:	mov	r1, #1
   13190:	str	r1, [r4, #184]	; 0xb8
   13194:	add	r7, r4, #188	; 0xbc
   13198:	ldr	r6, [r3, r2]
   1319c:	b	1315c <flatcc_builder_custom_init@@Base+0x34>
   131a0:	andeq	r5, r1, r4, lsr #29
   131a4:	andeq	r0, r0, r4, rrx
   131a8:	andeq	r0, r0, r8, rrx

000131ac <flatcc_builder_init@@Base>:
   131ac:	push	{lr}		; (str lr, [sp, #-4]!)
   131b0:	sub	sp, sp, #12
   131b4:	mov	r3, #0
   131b8:	str	r3, [sp]
   131bc:	mov	r2, r3
   131c0:	mov	r1, r3
   131c4:	bl	13128 <flatcc_builder_custom_init@@Base>
   131c8:	add	sp, sp, #12
   131cc:	pop	{pc}		; (ldr pc, [sp], #4)

000131d0 <flatcc_builder_custom_reset@@Base>:
   131d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d4:	add	r7, r0, #52	; 0x34
   131d8:	mov	r4, #0
   131dc:	sub	sp, sp, #12
   131e0:	mov	r5, r0
   131e4:	mov	sl, r1
   131e8:	mov	r8, r2
   131ec:	mov	r6, r7
   131f0:	mov	r9, r4
   131f4:	mov	fp, #1
   131f8:	b	1324c <flatcc_builder_custom_reset@@Base+0x7c>
   131fc:	cmp	r4, #5
   13200:	cmpne	r8, #0
   13204:	beq	13230 <flatcc_builder_custom_reset@@Base+0x60>
   13208:	ldr	r0, [r5, #40]	; 0x28
   1320c:	mov	r3, fp
   13210:	str	r4, [sp]
   13214:	mov	r2, #1
   13218:	mov	r1, r6
   1321c:	ldr	ip, [r5, #48]	; 0x30
   13220:	blx	ip
   13224:	cmp	r0, #0
   13228:	bne	13310 <flatcc_builder_custom_reset@@Base+0x140>
   1322c:	ldr	r0, [r7, r4, lsl #3]
   13230:	ldr	r2, [r6, #4]
   13234:	mov	r1, r9
   13238:	bl	12050 <memset@plt>
   1323c:	add	r4, r4, #1
   13240:	cmp	r4, #8
   13244:	add	r6, r6, #8
   13248:	beq	13288 <flatcc_builder_custom_reset@@Base+0xb8>
   1324c:	ldr	r0, [r7, r4, lsl #3]
   13250:	cmp	r0, #0
   13254:	bne	131fc <flatcc_builder_custom_reset@@Base+0x2c>
   13258:	ldr	r3, [r6, #4]
   1325c:	cmp	r3, #0
   13260:	beq	1323c <flatcc_builder_custom_reset@@Base+0x6c>
   13264:	ldr	r3, [pc, #172]	; 13318 <flatcc_builder_custom_reset@@Base+0x148>
   13268:	ldr	r1, [pc, #172]	; 1331c <flatcc_builder_custom_reset@@Base+0x14c>
   1326c:	ldr	r0, [pc, #172]	; 13320 <flatcc_builder_custom_reset@@Base+0x150>
   13270:	add	r3, pc, r3
   13274:	ldr	r2, [pc, #168]	; 13324 <flatcc_builder_custom_reset@@Base+0x154>
   13278:	add	r3, r3, #108	; 0x6c
   1327c:	add	r1, pc, r1
   13280:	add	r0, pc, r0
   13284:	bl	12080 <__assert_fail@plt>
   13288:	ldr	r2, [r5, #124]	; 0x7c
   1328c:	mov	r3, #0
   13290:	ldr	r0, [r5, #60]	; 0x3c
   13294:	cmp	r2, r3
   13298:	str	r3, [r5, #120]	; 0x78
   1329c:	ldr	r1, [r5, #76]	; 0x4c
   132a0:	movne	r3, #16
   132a4:	ldr	r2, [r5, #52]	; 0x34
   132a8:	str	r0, [r5, #16]
   132ac:	ldr	r0, [r5, #184]	; 0xb8
   132b0:	strne	r3, [r5, #124]	; 0x7c
   132b4:	mov	r3, #0
   132b8:	cmp	sl, #0
   132bc:	strne	r3, [r5, #172]	; 0xac
   132c0:	strne	r3, [r5, #176]	; 0xb0
   132c4:	strne	r3, [r5, #180]	; 0xb4
   132c8:	cmp	r0, #0
   132cc:	stm	r5, {r1, r2}
   132d0:	strh	r3, [r5, #128]	; 0x80
   132d4:	str	r3, [r5, #136]	; 0x88
   132d8:	str	r3, [r5, #140]	; 0x8c
   132dc:	str	r3, [r5, #156]	; 0x9c
   132e0:	str	r3, [r5, #160]	; 0xa0
   132e4:	str	r3, [r5, #20]
   132e8:	str	r3, [r5, #24]
   132ec:	str	r3, [r5, #148]	; 0x94
   132f0:	str	r3, [r5, #152]	; 0x98
   132f4:	str	r3, [r5, #32]
   132f8:	beq	13308 <flatcc_builder_custom_reset@@Base+0x138>
   132fc:	add	r0, r5, #188	; 0xbc
   13300:	bl	16dac <flatcc_emitter_reset@@Base>
   13304:	mov	r0, #0
   13308:	add	sp, sp, #12
   1330c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13310:	mvn	r0, #0
   13314:	b	13308 <flatcc_builder_custom_reset@@Base+0x138>
   13318:	andeq	r4, r0, ip, ror r4
   1331c:	andeq	r4, r0, r0, asr #23
   13320:	andeq	r4, r0, r8, asr ip
   13324:			; <UNDEFINED> instruction: 0x000001b2

00013328 <flatcc_builder_reset@@Base>:
   13328:	mov	r2, #0
   1332c:	mov	r1, r2
   13330:	b	131d0 <flatcc_builder_custom_reset@@Base>

00013334 <flatcc_builder_clear@@Base>:
   13334:	push	{r4, r5, r6, r7, r8, lr}
   13338:	mov	r4, #0
   1333c:	sub	sp, sp, #8
   13340:	mov	r6, r0
   13344:	add	r5, r0, #52	; 0x34
   13348:	mov	r8, r4
   1334c:	ldr	r0, [r6, #40]	; 0x28
   13350:	mov	r1, r5
   13354:	str	r4, [sp]
   13358:	mov	r3, r8
   1335c:	add	r4, r4, #1
   13360:	ldr	r7, [r6, #48]	; 0x30
   13364:	mov	r2, #0
   13368:	blx	r7
   1336c:	cmp	r4, #8
   13370:	add	r5, r5, #8
   13374:	bne	1334c <flatcc_builder_clear@@Base+0x18>
   13378:	ldr	r3, [r6, #184]	; 0xb8
   1337c:	cmp	r3, #0
   13380:	beq	1338c <flatcc_builder_clear@@Base+0x58>
   13384:	add	r0, r6, #188	; 0xbc
   13388:	bl	16e68 <flatcc_emitter_clear@@Base>
   1338c:	mov	r0, r6
   13390:	mov	r2, #232	; 0xe8
   13394:	mov	r1, #0
   13398:	add	sp, sp, #8
   1339c:	pop	{r4, r5, r6, r7, r8, lr}
   133a0:	b	12050 <memset@plt>

000133a4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   133a4:	push	{r4, r5, r6, r7, r8, lr}
   133a8:	add	r4, r1, #3
   133ac:	bic	r4, r4, #3
   133b0:	ldr	r7, [r0, #228]	; 0xe4
   133b4:	add	r4, r4, #4
   133b8:	ldr	r3, [r0, #112]	; 0x70
   133bc:	add	r2, r4, r7
   133c0:	cmp	r2, r3
   133c4:	sub	sp, sp, #8
   133c8:	mov	r6, r0
   133cc:	bhi	13414 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   133d0:	ldr	r8, [r6, #108]	; 0x6c
   133d4:	adds	r5, r8, r7
   133d8:	beq	1343c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   133dc:	mov	r2, r4
   133e0:	mov	r1, #0
   133e4:	mov	r0, r5
   133e8:	bl	12050 <memset@plt>
   133ec:	ldr	r3, [r6, #224]	; 0xe0
   133f0:	add	r0, r5, #4
   133f4:	str	r3, [r8, r7]
   133f8:	ldr	r3, [r6, #228]	; 0xe4
   133fc:	add	r4, r4, r3
   13400:	add	r3, r3, #4
   13404:	str	r4, [r6, #228]	; 0xe4
   13408:	str	r3, [r6, #224]	; 0xe0
   1340c:	add	sp, sp, #8
   13410:	pop	{r4, r5, r6, r7, r8, pc}
   13414:	mov	r3, #7
   13418:	ldr	r0, [r0, #40]	; 0x28
   1341c:	add	r1, r6, #108	; 0x6c
   13420:	str	r3, [sp]
   13424:	mov	r3, #0
   13428:	ldr	r5, [r6, #48]	; 0x30
   1342c:	blx	r5
   13430:	cmp	r0, #0
   13434:	beq	133d0 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13438:	bl	1208c <__assert_fail@plt+0xc>
   1343c:	mov	r0, r5
   13440:	b	1340c <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00013444 <flatcc_builder_enter_user_frame@@Base>:
   13444:	push	{r4, r5, r6, r7, lr}
   13448:	add	r4, r1, #3
   1344c:	bic	r4, r4, #3
   13450:	ldr	r6, [r0, #228]	; 0xe4
   13454:	add	r4, r4, #4
   13458:	ldr	r3, [r0, #112]	; 0x70
   1345c:	add	r2, r4, r6
   13460:	cmp	r2, r3
   13464:	sub	sp, sp, #12
   13468:	mov	r5, r0
   1346c:	bhi	134ac <flatcc_builder_enter_user_frame@@Base+0x68>
   13470:	ldr	r7, [r5, #108]	; 0x6c
   13474:	adds	r0, r7, r6
   13478:	beq	134a4 <flatcc_builder_enter_user_frame@@Base+0x60>
   1347c:	mov	r2, r4
   13480:	mov	r1, #0
   13484:	bl	12050 <memset@plt>
   13488:	ldr	r3, [r5, #224]	; 0xe0
   1348c:	str	r3, [r7, r6]
   13490:	ldr	r0, [r5, #228]	; 0xe4
   13494:	add	r4, r4, r0
   13498:	add	r0, r0, #4
   1349c:	str	r4, [r5, #228]	; 0xe4
   134a0:	str	r0, [r5, #224]	; 0xe0
   134a4:	add	sp, sp, #12
   134a8:	pop	{r4, r5, r6, r7, pc}
   134ac:	mov	r3, #7
   134b0:	ldr	r0, [r0, #40]	; 0x28
   134b4:	add	r1, r5, #108	; 0x6c
   134b8:	str	r3, [sp]
   134bc:	mov	r3, #0
   134c0:	ldr	r7, [r5, #48]	; 0x30
   134c4:	blx	r7
   134c8:	cmp	r0, #0
   134cc:	beq	13470 <flatcc_builder_enter_user_frame@@Base+0x2c>
   134d0:	bl	1208c <__assert_fail@plt+0xc>

000134d4 <flatcc_builder_exit_user_frame@@Base>:
   134d4:	ldr	r3, [r0, #224]	; 0xe0
   134d8:	cmp	r3, #0
   134dc:	beq	13500 <flatcc_builder_exit_user_frame@@Base+0x2c>
   134e0:	ldr	r2, [r0, #108]	; 0x6c
   134e4:	sub	r1, r3, #4
   134e8:	add	r3, r2, r3
   134ec:	str	r1, [r0, #228]	; 0xe4
   134f0:	ldr	r3, [r3, #-4]
   134f4:	str	r3, [r0, #224]	; 0xe0
   134f8:	mov	r0, r3
   134fc:	bx	lr
   13500:	ldr	r3, [pc, #32]	; 13528 <flatcc_builder_exit_user_frame@@Base+0x54>
   13504:	ldr	r1, [pc, #32]	; 1352c <flatcc_builder_exit_user_frame@@Base+0x58>
   13508:	ldr	r0, [pc, #32]	; 13530 <flatcc_builder_exit_user_frame@@Base+0x5c>
   1350c:	add	r3, pc, r3
   13510:	push	{r4, lr}
   13514:	add	r3, r3, #136	; 0x88
   13518:	ldr	r2, [pc, #20]	; 13534 <flatcc_builder_exit_user_frame@@Base+0x60>
   1351c:	add	r1, pc, r1
   13520:	add	r0, pc, r0
   13524:	bl	12080 <__assert_fail@plt>
   13528:	andeq	r4, r0, r0, ror #3
   1352c:	andeq	r4, r0, r0, lsr #18
   13530:	andeq	r4, r0, ip, asr #19
   13534:	andeq	r0, r0, lr, lsl r2

00013538 <flatcc_builder_exit_user_frame_at@@Base>:
   13538:	ldr	r2, [r0, #224]	; 0xe0
   1353c:	cmp	r2, r1
   13540:	bcc	1354c <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13544:	str	r1, [r0, #224]	; 0xe0
   13548:	b	134d4 <flatcc_builder_exit_user_frame@@Base>
   1354c:	ldr	r3, [pc, #32]	; 13574 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13550:	ldr	r1, [pc, #32]	; 13578 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13554:	ldr	r0, [pc, #32]	; 1357c <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13558:	add	r3, pc, r3
   1355c:	push	{r4, lr}
   13560:	add	r3, r3, #168	; 0xa8
   13564:	ldr	r2, [pc, #20]	; 13580 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   13568:	add	r1, pc, r1
   1356c:	add	r0, pc, r0
   13570:	bl	12080 <__assert_fail@plt>
   13574:	muleq	r0, r4, r1
   13578:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1357c:	muleq	r0, ip, r9
   13580:	andeq	r0, r0, r7, lsr #4

00013584 <flatcc_builder_get_current_user_frame@@Base>:
   13584:	ldr	r0, [r0, #224]	; 0xe0
   13588:	bx	lr

0001358c <flatcc_builder_get_user_frame_ptr@@Base>:
   1358c:	ldr	r0, [r0, #108]	; 0x6c
   13590:	add	r0, r0, r1
   13594:	bx	lr

00013598 <flatcc_builder_embed_buffer@@Base>:
   13598:	ldr	ip, [r0, #152]	; 0x98
   1359c:	push	{r4, r5, r6, lr}
   135a0:	mov	r5, r3
   135a4:	sub	sp, sp, #88	; 0x58
   135a8:	adds	r3, ip, #0
   135ac:	movne	r3, #1
   135b0:	mov	r6, r2
   135b4:	mov	r2, r1
   135b8:	add	r1, sp, #104	; 0x68
   135bc:	mov	r4, r0
   135c0:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x10c>
   135c4:	ldr	ip, [pc, #324]	; 13710 <flatcc_builder_embed_buffer@@Base+0x178>
   135c8:	add	ip, pc, ip
   135cc:	cmp	r0, #0
   135d0:	bne	136d8 <flatcc_builder_embed_buffer@@Base+0x140>
   135d4:	ldr	r2, [sp, #108]	; 0x6c
   135d8:	ldr	r1, [r4, #136]	; 0x88
   135dc:	ldrh	r3, [sp, #104]	; 0x68
   135e0:	tst	r2, #2
   135e4:	moveq	lr, #0
   135e8:	movne	lr, #4
   135ec:	sub	r2, r1, r5
   135f0:	sub	r3, r3, #1
   135f4:	sub	r2, r2, lr
   135f8:	and	r2, r2, r3
   135fc:	ldr	r3, [r4, #152]	; 0x98
   13600:	str	r0, [sp, #16]
   13604:	str	r0, [sp, #20]
   13608:	cmp	r3, #0
   1360c:	add	r0, r5, r2
   13610:	str	r0, [sp, #12]
   13614:	beq	13634 <flatcc_builder_embed_buffer@@Base+0x9c>
   13618:	mov	r3, #4
   1361c:	mov	lr, #1
   13620:	add	r0, sp, #12
   13624:	str	r3, [sp, #16]
   13628:	str	r3, [sp, #28]
   1362c:	str	r0, [sp, #24]
   13630:	str	lr, [sp, #20]
   13634:	cmp	r5, #0
   13638:	beq	13660 <flatcc_builder_embed_buffer@@Base+0xc8>
   1363c:	ldr	r0, [sp, #20]
   13640:	add	lr, sp, #88	; 0x58
   13644:	add	r0, r0, #1
   13648:	add	r3, r3, r5
   1364c:	add	lr, lr, r0, lsl #3
   13650:	str	r3, [sp, #16]
   13654:	str	r0, [sp, #20]
   13658:	str	r6, [lr, #-72]	; 0xffffffb8
   1365c:	str	r5, [lr, #-68]	; 0xffffffbc
   13660:	cmp	r2, #0
   13664:	bne	136a8 <flatcc_builder_embed_buffer@@Base+0x110>
   13668:	sub	r5, r1, r3
   1366c:	cmp	r1, r5
   13670:	ble	1370c <flatcc_builder_embed_buffer@@Base+0x174>
   13674:	ldr	r0, [r4, #36]	; 0x24
   13678:	ldr	r2, [sp, #20]
   1367c:	str	r3, [sp]
   13680:	add	r1, sp, #24
   13684:	ldr	r6, [r4, #44]	; 0x2c
   13688:	mov	r3, r5
   1368c:	blx	r6
   13690:	cmp	r0, #0
   13694:	streq	r5, [r4, #136]	; 0x88
   13698:	bne	136e8 <flatcc_builder_embed_buffer@@Base+0x150>
   1369c:	mov	r0, r5
   136a0:	add	sp, sp, #88	; 0x58
   136a4:	pop	{r4, r5, r6, pc}
   136a8:	ldr	r0, [sp, #20]
   136ac:	ldr	lr, [pc, #96]	; 13714 <flatcc_builder_embed_buffer@@Base+0x17c>
   136b0:	add	r0, r0, #1
   136b4:	add	r3, r3, r2
   136b8:	str	r3, [sp, #16]
   136bc:	ldr	lr, [ip, lr]
   136c0:	add	ip, sp, #88	; 0x58
   136c4:	add	ip, ip, r0, lsl #3
   136c8:	str	r0, [sp, #20]
   136cc:	str	lr, [ip, #-72]	; 0xffffffb8
   136d0:	str	r2, [ip, #-68]	; 0xffffffbc
   136d4:	b	13668 <flatcc_builder_embed_buffer@@Base+0xd0>
   136d8:	mov	r5, #0
   136dc:	mov	r0, r5
   136e0:	add	sp, sp, #88	; 0x58
   136e4:	pop	{r4, r5, r6, pc}
   136e8:	ldr	r3, [pc, #40]	; 13718 <flatcc_builder_embed_buffer@@Base+0x180>
   136ec:	ldr	r1, [pc, #40]	; 1371c <flatcc_builder_embed_buffer@@Base+0x184>
   136f0:	ldr	r0, [pc, #40]	; 13720 <flatcc_builder_embed_buffer@@Base+0x188>
   136f4:	add	r3, pc, r3
   136f8:	ldr	r2, [pc, #36]	; 13724 <flatcc_builder_embed_buffer@@Base+0x18c>
   136fc:	add	r3, r3, #28
   13700:	add	r1, pc, r1
   13704:	add	r0, pc, r0
   13708:	bl	12080 <__assert_fail@plt>
   1370c:	bl	120f4 <__assert_fail@plt+0x74>
   13710:	andeq	r5, r1, r0, lsr sl
   13714:	andeq	r0, r0, r4, asr r0
   13718:	strdeq	r3, [r0], -r8
   1371c:	andeq	r4, r0, ip, lsr r7
   13720:	andeq	r4, r0, r0, asr #15
   13724:	andeq	r0, r0, fp, lsl #5

00013728 <flatcc_builder_create_buffer@@Base>:
   13728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1372c:	sub	sp, sp, #100	; 0x64
   13730:	mov	r5, #0
   13734:	ldr	r8, [sp, #140]	; 0x8c
   13738:	mov	r9, r1
   1373c:	and	r6, r8, #1
   13740:	mov	r7, r3
   13744:	add	r1, sp, #136	; 0x88
   13748:	mov	r3, r6
   1374c:	str	r5, [sp, #20]
   13750:	mov	r4, r0
   13754:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x10c>
   13758:	ldr	lr, [pc, #516]	; 13964 <flatcc_builder_create_buffer@@Base+0x23c>
   1375c:	add	lr, pc, lr
   13760:	cmp	r0, r5
   13764:	bne	138f8 <flatcc_builder_create_buffer@@Base+0x1d0>
   13768:	ldrh	r3, [r4, #128]	; 0x80
   1376c:	ldrh	r2, [sp, #136]	; 0x88
   13770:	uxtb	r5, r6
   13774:	cmp	r3, r2
   13778:	strhcc	r2, [r4, #128]	; 0x80
   1377c:	cmp	r9, #0
   13780:	sub	r2, r2, #1
   13784:	ldrne	r3, [r9]
   13788:	ldreq	r0, [sp, #20]
   1378c:	ldrne	r0, [r9]
   13790:	strne	r3, [sp, #20]
   13794:	cmp	r0, #0
   13798:	movne	r0, #4
   1379c:	moveq	r0, #0
   137a0:	ands	r3, r8, #2
   137a4:	ldr	r8, [r4, #136]	; 0x88
   137a8:	bne	138c8 <flatcc_builder_create_buffer@@Base+0x1a0>
   137ac:	sub	r1, r8, #4
   137b0:	cmp	r5, #0
   137b4:	sub	r1, r1, r0
   137b8:	and	r2, r2, r1
   137bc:	moveq	r9, #1
   137c0:	moveq	ip, #4
   137c4:	bne	138d4 <flatcc_builder_create_buffer@@Base+0x1ac>
   137c8:	add	r1, r3, #1
   137cc:	add	sl, sp, #96	; 0x60
   137d0:	add	r1, sl, r1, lsl #3
   137d4:	mov	fp, #4
   137d8:	add	sl, sp, #12
   137dc:	cmp	r0, #0
   137e0:	str	ip, [sp, #24]
   137e4:	str	r9, [sp, #28]
   137e8:	str	sl, [r1, #-72]	; 0xffffffb8
   137ec:	str	fp, [r1, #-68]	; 0xffffffbc
   137f0:	beq	1381c <flatcc_builder_create_buffer@@Base+0xf4>
   137f4:	add	r9, r9, #1
   137f8:	add	r1, sp, #96	; 0x60
   137fc:	add	r9, r1, r9, lsl #3
   13800:	add	r3, r3, #2
   13804:	add	ip, ip, r0
   13808:	str	r3, [sp, #28]
   1380c:	add	r3, sp, #20
   13810:	str	r0, [r9, #-68]	; 0xffffffbc
   13814:	str	ip, [sp, #24]
   13818:	str	r3, [r9, #-72]	; 0xffffffb8
   1381c:	cmp	r2, #0
   13820:	beq	13850 <flatcc_builder_create_buffer@@Base+0x128>
   13824:	ldr	r3, [sp, #28]
   13828:	ldr	r1, [pc, #312]	; 13968 <flatcc_builder_create_buffer@@Base+0x240>
   1382c:	add	r3, r3, #1
   13830:	add	ip, ip, r2
   13834:	str	ip, [sp, #24]
   13838:	ldr	r0, [lr, r1]
   1383c:	add	r1, sp, #96	; 0x60
   13840:	add	r1, r1, r3, lsl #3
   13844:	str	r3, [sp, #28]
   13848:	str	r0, [r1, #-72]	; 0xffffffb8
   1384c:	str	r2, [r1, #-68]	; 0xffffffbc
   13850:	cmp	r5, #0
   13854:	sub	r5, r8, ip
   13858:	mov	r3, r5
   1385c:	beq	13908 <flatcc_builder_create_buffer@@Base+0x1e0>
   13860:	cmp	r6, #0
   13864:	add	r3, r5, #4
   13868:	beq	13908 <flatcc_builder_create_buffer@@Base+0x1e0>
   1386c:	ldr	r2, [r4, #144]	; 0x90
   13870:	sub	r2, r2, r3
   13874:	str	r2, [sp, #16]
   13878:	sub	r7, r7, r3
   1387c:	cmp	r5, r8
   13880:	str	r7, [sp, #12]
   13884:	mov	r6, r5
   13888:	bge	13918 <flatcc_builder_create_buffer@@Base+0x1f0>
   1388c:	ldr	r0, [r4, #36]	; 0x24
   13890:	ldr	r2, [sp, #28]
   13894:	str	ip, [sp]
   13898:	mov	r3, r5
   1389c:	ldr	r7, [r4, #44]	; 0x2c
   138a0:	add	r1, sp, #32
   138a4:	blx	r7
   138a8:	cmp	r0, #0
   138ac:	bne	1391c <flatcc_builder_create_buffer@@Base+0x1f4>
   138b0:	cmp	r5, #0
   138b4:	str	r5, [r4, #136]	; 0x88
   138b8:	beq	13940 <flatcc_builder_create_buffer@@Base+0x218>
   138bc:	mov	r0, r6
   138c0:	add	sp, sp, #100	; 0x64
   138c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c8:	sub	r3, r8, #8
   138cc:	sub	r3, r3, r0
   138d0:	and	r2, r2, r3
   138d4:	mov	ip, #4
   138d8:	mov	r3, #1
   138dc:	add	r1, sp, #16
   138e0:	str	ip, [sp, #36]	; 0x24
   138e4:	str	r1, [sp, #32]
   138e8:	mov	r5, r3
   138ec:	mov	r9, #2
   138f0:	mov	ip, #8
   138f4:	b	137c8 <flatcc_builder_create_buffer@@Base+0xa0>
   138f8:	mov	r6, r5
   138fc:	mov	r0, r6
   13900:	add	sp, sp, #100	; 0x64
   13904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13908:	ldr	r2, [r4, #140]	; 0x8c
   1390c:	sub	r2, r2, r3
   13910:	str	r2, [sp, #16]
   13914:	b	13878 <flatcc_builder_create_buffer@@Base+0x150>
   13918:	bl	120f4 <__assert_fail@plt+0x74>
   1391c:	ldr	r3, [pc, #72]	; 1396c <flatcc_builder_create_buffer@@Base+0x244>
   13920:	ldr	r1, [pc, #72]	; 13970 <flatcc_builder_create_buffer@@Base+0x248>
   13924:	ldr	r0, [pc, #72]	; 13974 <flatcc_builder_create_buffer@@Base+0x24c>
   13928:	add	r3, pc, r3
   1392c:	ldr	r2, [pc, #68]	; 13978 <flatcc_builder_create_buffer@@Base+0x250>
   13930:	add	r3, r3, #28
   13934:	add	r1, pc, r1
   13938:	add	r0, pc, r0
   1393c:	bl	12080 <__assert_fail@plt>
   13940:	ldr	r3, [pc, #52]	; 1397c <flatcc_builder_create_buffer@@Base+0x254>
   13944:	ldr	r1, [pc, #52]	; 13980 <flatcc_builder_create_buffer@@Base+0x258>
   13948:	ldr	r0, [pc, #52]	; 13984 <flatcc_builder_create_buffer@@Base+0x25c>
   1394c:	add	r3, pc, r3
   13950:	mov	r2, #772	; 0x304
   13954:	add	r3, r3, #204	; 0xcc
   13958:	add	r1, pc, r1
   1395c:	add	r0, pc, r0
   13960:	bl	12080 <__assert_fail@plt>
   13964:	muleq	r1, ip, r8
   13968:	andeq	r0, r0, r4, asr r0
   1396c:	andeq	r3, r0, r4, asr #27
   13970:	andeq	r4, r0, r8, lsl #10
   13974:	andeq	r4, r0, ip, lsl #11
   13978:	andeq	r0, r0, fp, lsl #5
   1397c:	andeq	r3, r0, r0, lsr #27
   13980:	andeq	r4, r0, r4, ror #9
   13984:	andeq	r4, r0, r8, ror #10

00013988 <flatcc_builder_create_struct@@Base>:
   13988:	push	{r4, r5, r6, lr}
   1398c:	cmp	r3, #0
   13990:	ldr	lr, [pc, #300]	; 13ac4 <flatcc_builder_create_struct@@Base+0x13c>
   13994:	sub	sp, sp, #80	; 0x50
   13998:	add	lr, pc, lr
   1399c:	beq	13aa0 <flatcc_builder_create_struct@@Base+0x118>
   139a0:	mov	r5, r0
   139a4:	ldrh	r0, [r0, #128]	; 0x80
   139a8:	ldr	ip, [r5, #136]	; 0x88
   139ac:	cmp	r0, r3
   139b0:	strhcc	r3, [r5, #128]	; 0x80
   139b4:	mov	r0, #0
   139b8:	sub	r3, r3, #1
   139bc:	sub	r4, ip, r2
   139c0:	cmp	r2, #0
   139c4:	and	r3, r3, r4
   139c8:	str	r0, [sp, #8]
   139cc:	str	r0, [sp, #12]
   139d0:	bne	13a50 <flatcc_builder_create_struct@@Base+0xc8>
   139d4:	cmp	r3, #0
   139d8:	movne	r6, #1
   139dc:	movne	r1, r2
   139e0:	beq	13a78 <flatcc_builder_create_struct@@Base+0xf0>
   139e4:	ldr	r0, [pc, #220]	; 13ac8 <flatcc_builder_create_struct@@Base+0x140>
   139e8:	add	r1, r1, #1
   139ec:	add	r2, r2, r3
   139f0:	add	r4, sp, #80	; 0x50
   139f4:	add	r1, r4, r1, lsl #3
   139f8:	str	r2, [sp, #8]
   139fc:	sub	r4, ip, r2
   13a00:	ldr	r0, [lr, r0]
   13a04:	str	r3, [r1, #-68]	; 0xffffffbc
   13a08:	str	r0, [r1, #-72]	; 0xffffffb8
   13a0c:	str	r6, [sp, #12]
   13a10:	cmp	ip, r4
   13a14:	ble	13a78 <flatcc_builder_create_struct@@Base+0xf0>
   13a18:	ldr	r3, [sp, #12]
   13a1c:	ldr	r0, [r5, #36]	; 0x24
   13a20:	add	r1, sp, #16
   13a24:	str	r2, [sp]
   13a28:	mov	r2, r3
   13a2c:	ldr	r6, [r5, #44]	; 0x2c
   13a30:	mov	r3, r4
   13a34:	blx	r6
   13a38:	cmp	r0, #0
   13a3c:	bne	13a7c <flatcc_builder_create_struct@@Base+0xf4>
   13a40:	mov	r0, r4
   13a44:	str	r4, [r5, #136]	; 0x88
   13a48:	add	sp, sp, #80	; 0x50
   13a4c:	pop	{r4, r5, r6, pc}
   13a50:	cmp	r3, r0
   13a54:	mov	r0, #1
   13a58:	str	r1, [sp, #16]
   13a5c:	str	r2, [sp, #8]
   13a60:	str	r2, [sp, #20]
   13a64:	str	r0, [sp, #12]
   13a68:	movne	r1, r0
   13a6c:	movne	r6, #2
   13a70:	beq	13a10 <flatcc_builder_create_struct@@Base+0x88>
   13a74:	b	139e4 <flatcc_builder_create_struct@@Base+0x5c>
   13a78:	bl	120f4 <__assert_fail@plt+0x74>
   13a7c:	ldr	r3, [pc, #72]	; 13acc <flatcc_builder_create_struct@@Base+0x144>
   13a80:	ldr	r1, [pc, #72]	; 13ad0 <flatcc_builder_create_struct@@Base+0x148>
   13a84:	ldr	r0, [pc, #72]	; 13ad4 <flatcc_builder_create_struct@@Base+0x14c>
   13a88:	add	r3, pc, r3
   13a8c:	ldr	r2, [pc, #68]	; 13ad8 <flatcc_builder_create_struct@@Base+0x150>
   13a90:	add	r3, r3, #28
   13a94:	add	r1, pc, r1
   13a98:	add	r0, pc, r0
   13a9c:	bl	12080 <__assert_fail@plt>
   13aa0:	ldr	r3, [pc, #52]	; 13adc <flatcc_builder_create_struct@@Base+0x154>
   13aa4:	ldr	r1, [pc, #52]	; 13ae0 <flatcc_builder_create_struct@@Base+0x158>
   13aa8:	ldr	r0, [pc, #52]	; 13ae4 <flatcc_builder_create_struct@@Base+0x15c>
   13aac:	add	r3, pc, r3
   13ab0:	ldr	r2, [pc, #48]	; 13ae8 <flatcc_builder_create_struct@@Base+0x160>
   13ab4:	add	r3, r3, #236	; 0xec
   13ab8:	add	r1, pc, r1
   13abc:	add	r0, pc, r0
   13ac0:	bl	12080 <__assert_fail@plt>
   13ac4:	andeq	r5, r1, r0, ror #12
   13ac8:	andeq	r0, r0, r4, asr r0
   13acc:	andeq	r3, r0, r4, ror #24
   13ad0:	andeq	r4, r0, r8, lsr #7
   13ad4:	andeq	r4, r0, ip, lsr #8
   13ad8:	andeq	r0, r0, fp, lsl #5
   13adc:	andeq	r3, r0, r0, asr #24
   13ae0:	andeq	r4, r0, r4, lsl #7
   13ae4:	andeq	r4, r0, ip, ror #8
   13ae8:	andeq	r0, r0, pc, lsl #6

00013aec <flatcc_builder_start_buffer@@Base>:
   13aec:	push	{r4, r5, r6, r7, r8, lr}
   13af0:	mov	r5, r1
   13af4:	ldrh	r1, [r0, #128]	; 0x80
   13af8:	mov	r4, r0
   13afc:	mov	r7, r2
   13b00:	mov	r6, r3
   13b04:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   13b08:	ldr	r1, [pc, #140]	; 13b9c <flatcc_builder_start_buffer@@Base+0xb0>
   13b0c:	add	r1, pc, r1
   13b10:	cmp	r0, #0
   13b14:	bne	13b94 <flatcc_builder_start_buffer@@Base+0xa8>
   13b18:	ldrh	r3, [r4, #132]	; 0x84
   13b1c:	ldr	ip, [r4, #32]
   13b20:	mov	r2, #1
   13b24:	strh	r2, [r4, #128]	; 0x80
   13b28:	strh	r3, [ip, #34]	; 0x22
   13b2c:	ldrh	r3, [r4, #164]	; 0xa4
   13b30:	strh	r7, [r4, #132]	; 0x84
   13b34:	cmp	r5, #0
   13b38:	strh	r3, [ip, #32]
   13b3c:	ldr	r3, [r4, #144]	; 0x90
   13b40:	strh	r6, [r4, #164]	; 0xa4
   13b44:	str	r3, [ip, #20]
   13b48:	ldr	r3, [r4, #152]	; 0x98
   13b4c:	str	r3, [ip, #28]
   13b50:	ldr	r3, [r4, #148]	; 0x94
   13b54:	ldr	lr, [r4, #136]	; 0x88
   13b58:	ldr	r2, [r4, #168]	; 0xa8
   13b5c:	add	r6, r3, #1
   13b60:	str	r3, [r4, #152]	; 0x98
   13b64:	str	r6, [r4, #148]	; 0x94
   13b68:	str	lr, [r4, #144]	; 0x90
   13b6c:	str	r2, [ip, #16]
   13b70:	beq	13b88 <flatcc_builder_start_buffer@@Base+0x9c>
   13b74:	ldr	r2, [r5]
   13b78:	mov	r3, #1
   13b7c:	str	r2, [r4, #168]	; 0xa8
   13b80:	strh	r3, [ip, #14]
   13b84:	pop	{r4, r5, r6, r7, r8, pc}
   13b88:	ldr	r3, [pc, #16]	; 13ba0 <flatcc_builder_start_buffer@@Base+0xb4>
   13b8c:	ldr	r5, [r1, r3]
   13b90:	b	13b74 <flatcc_builder_start_buffer@@Base+0x88>
   13b94:	mvn	r0, #0
   13b98:	pop	{r4, r5, r6, r7, r8, pc}
   13b9c:	andeq	r5, r1, ip, ror #9
   13ba0:	andeq	r0, r0, r4, asr r0

00013ba4 <flatcc_builder_end_buffer@@Base>:
   13ba4:	ldr	ip, [r0, #32]
   13ba8:	ldrh	r2, [r0, #164]	; 0xa4
   13bac:	push	{r4, r5, r6, lr}
   13bb0:	mov	r4, r0
   13bb4:	ldrh	ip, [ip, #14]
   13bb8:	ldr	r0, [r0, #152]	; 0x98
   13bbc:	and	r2, r2, #2
   13bc0:	cmp	r0, #0
   13bc4:	moveq	r0, r2
   13bc8:	orrne	r0, r2, #1
   13bcc:	cmp	ip, #1
   13bd0:	sub	sp, sp, #8
   13bd4:	bne	13cb4 <flatcc_builder_end_buffer@@Base+0x110>
   13bd8:	ldrh	r2, [r4, #132]	; 0x84
   13bdc:	ldrh	ip, [r4, #128]	; 0x80
   13be0:	mov	r3, r1
   13be4:	add	r1, r4, #168	; 0xa8
   13be8:	cmp	r2, ip
   13bec:	movhi	ip, r2
   13bf0:	strhhi	r2, [r4, #128]	; 0x80
   13bf4:	str	r0, [sp, #4]
   13bf8:	str	ip, [sp]
   13bfc:	mov	r0, r4
   13c00:	bl	13728 <flatcc_builder_create_buffer@@Base>
   13c04:	subs	r5, r0, #0
   13c08:	beq	13ca8 <flatcc_builder_end_buffer@@Base+0x104>
   13c0c:	ldr	r3, [r4, #32]
   13c10:	ldr	r2, [r4, #20]
   13c14:	mov	r1, #0
   13c18:	ldr	ip, [r3, #20]
   13c1c:	ldr	r0, [r4, #16]
   13c20:	str	ip, [r4, #144]	; 0x90
   13c24:	ldr	ip, [r3, #28]
   13c28:	str	ip, [r4, #152]	; 0x98
   13c2c:	ldr	ip, [r3, #16]
   13c30:	str	ip, [r4, #168]	; 0xa8
   13c34:	ldrh	r3, [r3, #32]
   13c38:	strh	r3, [r4, #164]	; 0xa4
   13c3c:	bl	12050 <memset@plt>
   13c40:	ldr	r3, [r4, #32]
   13c44:	ldr	r2, [r4, #64]	; 0x40
   13c48:	ldrh	lr, [r4, #130]	; 0x82
   13c4c:	ldr	ip, [r3]
   13c50:	ldr	r1, [r3, #4]
   13c54:	ldrh	r0, [r4, #128]	; 0x80
   13c58:	sub	r2, r2, ip
   13c5c:	cmp	r2, r1
   13c60:	movcs	r2, r1
   13c64:	cmp	r0, lr
   13c68:	ldr	r0, [r4, #60]	; 0x3c
   13c6c:	ldr	r6, [r3, #8]
   13c70:	str	r2, [r4, #24]
   13c74:	add	r2, r0, ip
   13c78:	str	r2, [r4, #16]
   13c7c:	str	r6, [r4, #20]
   13c80:	ldr	r2, [r4, #156]	; 0x9c
   13c84:	str	ip, [r4, #28]
   13c88:	str	r1, [r3, #4]
   13c8c:	strhcc	lr, [r4, #128]	; 0x80
   13c90:	ldrh	r1, [r3, #12]
   13c94:	sub	r2, r2, #1
   13c98:	sub	r3, r3, #36	; 0x24
   13c9c:	str	r2, [r4, #156]	; 0x9c
   13ca0:	strh	r1, [r4, #130]	; 0x82
   13ca4:	str	r3, [r4, #32]
   13ca8:	mov	r0, r5
   13cac:	add	sp, sp, #8
   13cb0:	pop	{r4, r5, r6, pc}
   13cb4:	ldr	r3, [pc, #28]	; 13cd8 <flatcc_builder_end_buffer@@Base+0x134>
   13cb8:	ldr	r1, [pc, #28]	; 13cdc <flatcc_builder_end_buffer@@Base+0x138>
   13cbc:	ldr	r0, [pc, #28]	; 13ce0 <flatcc_builder_end_buffer@@Base+0x13c>
   13cc0:	add	r3, pc, r3
   13cc4:	ldr	r2, [pc, #24]	; 13ce4 <flatcc_builder_end_buffer@@Base+0x140>
   13cc8:	add	r3, r3, #268	; 0x10c
   13ccc:	add	r1, pc, r1
   13cd0:	add	r0, pc, r0
   13cd4:	bl	12080 <__assert_fail@plt>
   13cd8:	andeq	r3, r0, ip, lsr #20
   13cdc:	andeq	r4, r0, r0, ror r1
   13ce0:	andeq	r4, r0, r4, ror #4
   13ce4:	andeq	r0, r0, r6, asr #6

00013ce8 <flatcc_builder_start_struct@@Base>:
   13ce8:	push	{r4, r5, r6, lr}
   13cec:	mov	r5, r1
   13cf0:	mov	r1, r2
   13cf4:	mov	r4, r0
   13cf8:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   13cfc:	cmp	r0, #0
   13d00:	bne	13d80 <flatcc_builder_start_struct@@Base+0x98>
   13d04:	ldr	r2, [r4, #28]
   13d08:	ldr	r3, [r4, #64]	; 0x40
   13d0c:	ldr	r0, [r4, #60]	; 0x3c
   13d10:	ldr	ip, [r4, #32]
   13d14:	sub	r3, r3, r2
   13d18:	cmn	r3, #4
   13d1c:	ldr	r6, [r4, #20]
   13d20:	add	r0, r0, r2
   13d24:	mov	r2, #2
   13d28:	strh	r2, [ip, #14]
   13d2c:	mvnhi	r2, #3
   13d30:	movhi	r3, r2
   13d34:	add	r5, r5, r6
   13d38:	strhi	r2, [r4, #24]
   13d3c:	strls	r3, [r4, #24]
   13d40:	mvn	r2, #3
   13d44:	cmp	r5, r3
   13d48:	str	r0, [r4, #16]
   13d4c:	str	r2, [ip, #4]
   13d50:	str	r5, [r4, #20]
   13d54:	bcs	13d60 <flatcc_builder_start_struct@@Base+0x78>
   13d58:	add	r0, r0, r6
   13d5c:	pop	{r4, r5, r6, pc}
   13d60:	add	r1, r5, #1
   13d64:	mov	r0, r4
   13d68:	bl	12afc <emit_test@@Base+0x5f4>
   13d6c:	cmp	r0, #0
   13d70:	bne	13d80 <flatcc_builder_start_struct@@Base+0x98>
   13d74:	ldr	r0, [r4, #16]
   13d78:	add	r0, r0, r6
   13d7c:	pop	{r4, r5, r6, pc}
   13d80:	mov	r0, #0
   13d84:	pop	{r4, r5, r6, pc}

00013d88 <flatcc_builder_struct_edit@@Base>:
   13d88:	ldr	r0, [r0, #16]
   13d8c:	bx	lr

00013d90 <flatcc_builder_end_struct@@Base>:
   13d90:	ldr	r3, [r0, #32]
   13d94:	push	{r4, r5, r6, lr}
   13d98:	ldrh	r3, [r3, #14]
   13d9c:	cmp	r3, #2
   13da0:	bne	13e40 <flatcc_builder_end_struct@@Base+0xb0>
   13da4:	ldrh	r3, [r0, #130]	; 0x82
   13da8:	ldr	r2, [r0, #20]
   13dac:	ldr	r1, [r0, #16]
   13db0:	mov	r4, r0
   13db4:	bl	13988 <flatcc_builder_create_struct@@Base>
   13db8:	subs	r5, r0, #0
   13dbc:	beq	13e38 <flatcc_builder_end_struct@@Base+0xa8>
   13dc0:	ldr	r2, [r4, #20]
   13dc4:	mov	r1, #0
   13dc8:	ldr	r0, [r4, #16]
   13dcc:	bl	12050 <memset@plt>
   13dd0:	ldr	r3, [r4, #32]
   13dd4:	ldr	r2, [r4, #64]	; 0x40
   13dd8:	ldrh	lr, [r4, #130]	; 0x82
   13ddc:	ldr	ip, [r3]
   13de0:	ldr	r1, [r3, #4]
   13de4:	ldrh	r0, [r4, #128]	; 0x80
   13de8:	sub	r2, r2, ip
   13dec:	cmp	r2, r1
   13df0:	movcs	r2, r1
   13df4:	cmp	r0, lr
   13df8:	ldr	r0, [r4, #60]	; 0x3c
   13dfc:	ldr	r6, [r3, #8]
   13e00:	str	r2, [r4, #24]
   13e04:	add	r2, r0, ip
   13e08:	str	r2, [r4, #16]
   13e0c:	str	r6, [r4, #20]
   13e10:	ldr	r2, [r4, #156]	; 0x9c
   13e14:	str	ip, [r4, #28]
   13e18:	str	r1, [r3, #4]
   13e1c:	strhcc	lr, [r4, #128]	; 0x80
   13e20:	ldrh	r1, [r3, #12]
   13e24:	sub	r2, r2, #1
   13e28:	sub	r3, r3, #36	; 0x24
   13e2c:	str	r2, [r4, #156]	; 0x9c
   13e30:	strh	r1, [r4, #130]	; 0x82
   13e34:	str	r3, [r4, #32]
   13e38:	mov	r0, r5
   13e3c:	pop	{r4, r5, r6, pc}
   13e40:	ldr	r3, [pc, #28]	; 13e64 <flatcc_builder_end_struct@@Base+0xd4>
   13e44:	ldr	r1, [pc, #28]	; 13e68 <flatcc_builder_end_struct@@Base+0xd8>
   13e48:	ldr	r0, [pc, #28]	; 13e6c <flatcc_builder_end_struct@@Base+0xdc>
   13e4c:	add	r3, pc, r3
   13e50:	mov	r2, #872	; 0x368
   13e54:	add	r3, r3, #296	; 0x128
   13e58:	add	r1, pc, r1
   13e5c:	add	r0, pc, r0
   13e60:	bl	12080 <__assert_fail@plt>
   13e64:	andeq	r3, r0, r0, lsr #17
   13e68:	andeq	r3, r0, r4, ror #31
   13e6c:	andeq	r4, r0, r4, lsl #2

00013e70 <flatcc_builder_extend_vector@@Base>:
   13e70:	ldr	r2, [r0, #32]
   13e74:	push	{r4, r5, r6, lr}
   13e78:	ldr	r3, [r2, #20]
   13e7c:	ldr	r4, [r2, #24]
   13e80:	add	ip, r1, r3
   13e84:	cmp	r3, ip
   13e88:	movls	r3, #0
   13e8c:	movhi	r3, #1
   13e90:	cmp	r4, ip
   13e94:	movcs	r4, r3
   13e98:	orrcc	r4, r3, #1
   13e9c:	cmp	r4, #0
   13ea0:	bne	13ef0 <flatcc_builder_extend_vector@@Base+0x80>
   13ea4:	ldr	lr, [r2, #16]
   13ea8:	str	ip, [r2, #20]
   13eac:	ldr	r6, [r0, #20]
   13eb0:	ldr	r3, [r0, #24]
   13eb4:	mla	r1, lr, r1, r6
   13eb8:	mov	r5, r0
   13ebc:	cmp	r1, r3
   13ec0:	str	r1, [r0, #20]
   13ec4:	bcs	13ed4 <flatcc_builder_extend_vector@@Base+0x64>
   13ec8:	ldr	r0, [r5, #16]
   13ecc:	add	r0, r0, r6
   13ed0:	pop	{r4, r5, r6, pc}
   13ed4:	add	r1, r1, #1
   13ed8:	mvn	r2, #3
   13edc:	bl	12afc <emit_test@@Base+0x5f4>
   13ee0:	cmp	r0, #0
   13ee4:	beq	13ec8 <flatcc_builder_extend_vector@@Base+0x58>
   13ee8:	mov	r0, r4
   13eec:	pop	{r4, r5, r6, pc}
   13ef0:	bl	1212c <__assert_fail@plt+0xac>

00013ef4 <flatcc_builder_vector_push@@Base>:
   13ef4:	ldr	r3, [r0, #32]
   13ef8:	push	{r4, r5, r6, r7, r8, lr}
   13efc:	ldrh	r2, [r3, #14]
   13f00:	cmp	r2, #4
   13f04:	bne	13fac <flatcc_builder_vector_push@@Base+0xb8>
   13f08:	mov	r6, r1
   13f0c:	ldr	r2, [r3, #20]
   13f10:	ldr	r1, [r3, #24]
   13f14:	cmp	r2, r1
   13f18:	bhi	13f88 <flatcc_builder_vector_push@@Base+0x94>
   13f1c:	add	r2, r2, #1
   13f20:	str	r2, [r3, #20]
   13f24:	ldr	r7, [r3, #16]
   13f28:	ldr	r5, [r0, #20]
   13f2c:	ldr	r3, [r0, #24]
   13f30:	add	r1, r7, r5
   13f34:	cmp	r1, r3
   13f38:	mov	r4, r0
   13f3c:	str	r1, [r0, #20]
   13f40:	bcs	13f6c <flatcc_builder_vector_push@@Base+0x78>
   13f44:	ldr	r3, [r4, #16]
   13f48:	adds	r3, r3, r5
   13f4c:	beq	13f64 <flatcc_builder_vector_push@@Base+0x70>
   13f50:	mov	r0, r3
   13f54:	mov	r2, r7
   13f58:	mov	r1, r6
   13f5c:	bl	11fcc <memcpy@plt>
   13f60:	mov	r3, r0
   13f64:	mov	r0, r3
   13f68:	pop	{r4, r5, r6, r7, r8, pc}
   13f6c:	add	r1, r1, #1
   13f70:	mvn	r2, #3
   13f74:	bl	12afc <emit_test@@Base+0x5f4>
   13f78:	cmp	r0, #0
   13f7c:	beq	13f44 <flatcc_builder_vector_push@@Base+0x50>
   13f80:	mov	r3, #0
   13f84:	b	13f64 <flatcc_builder_vector_push@@Base+0x70>
   13f88:	ldr	r3, [pc, #64]	; 13fd0 <flatcc_builder_vector_push@@Base+0xdc>
   13f8c:	ldr	r1, [pc, #64]	; 13fd4 <flatcc_builder_vector_push@@Base+0xe0>
   13f90:	ldr	r0, [pc, #64]	; 13fd8 <flatcc_builder_vector_push@@Base+0xe4>
   13f94:	add	r3, pc, r3
   13f98:	mov	r2, #908	; 0x38c
   13f9c:	add	r3, r3, #324	; 0x144
   13fa0:	add	r1, pc, r1
   13fa4:	add	r0, pc, r0
   13fa8:	bl	12080 <__assert_fail@plt>
   13fac:	ldr	r3, [pc, #40]	; 13fdc <flatcc_builder_vector_push@@Base+0xe8>
   13fb0:	ldr	r1, [pc, #40]	; 13fe0 <flatcc_builder_vector_push@@Base+0xec>
   13fb4:	ldr	r0, [pc, #40]	; 13fe4 <flatcc_builder_vector_push@@Base+0xf0>
   13fb8:	add	r3, pc, r3
   13fbc:	ldr	r2, [pc, #36]	; 13fe8 <flatcc_builder_vector_push@@Base+0xf4>
   13fc0:	add	r3, r3, #324	; 0x144
   13fc4:	add	r1, pc, r1
   13fc8:	add	r0, pc, r0
   13fcc:	bl	12080 <__assert_fail@plt>
   13fd0:	andeq	r3, r0, r8, asr r7
   13fd4:	muleq	r0, ip, lr
   13fd8:	andeq	r4, r0, r4, lsl r0
   13fdc:	andeq	r3, r0, r4, lsr r7
   13fe0:	andeq	r3, r0, r8, ror lr
   13fe4:	andeq	r3, r0, r4, asr #31
   13fe8:	andeq	r0, r0, fp, lsl #7

00013fec <flatcc_builder_append_vector@@Base>:
   13fec:	push	{r4, r5, r6, r7, r8, lr}
   13ff0:	mov	r7, r1
   13ff4:	ldr	r1, [r0, #32]
   13ff8:	ldrh	r3, [r1, #14]
   13ffc:	cmp	r3, #4
   14000:	bne	140a0 <flatcc_builder_append_vector@@Base+0xb4>
   14004:	ldr	r3, [r1, #20]
   14008:	ldr	r4, [r1, #24]
   1400c:	add	ip, r2, r3
   14010:	cmp	r3, ip
   14014:	movls	r3, #0
   14018:	movhi	r3, #1
   1401c:	cmp	r4, ip
   14020:	movcs	r4, r3
   14024:	orrcc	r4, r3, #1
   14028:	cmp	r4, #0
   1402c:	bne	1409c <flatcc_builder_append_vector@@Base+0xb0>
   14030:	ldr	r6, [r1, #16]
   14034:	str	ip, [r1, #20]
   14038:	ldr	r8, [r0, #20]
   1403c:	mul	r6, r6, r2
   14040:	ldr	r3, [r0, #24]
   14044:	add	r1, r6, r8
   14048:	cmp	r1, r3
   1404c:	mov	r5, r0
   14050:	str	r1, [r0, #20]
   14054:	bcs	14080 <flatcc_builder_append_vector@@Base+0x94>
   14058:	ldr	r3, [r5, #16]
   1405c:	adds	r3, r3, r8
   14060:	beq	14078 <flatcc_builder_append_vector@@Base+0x8c>
   14064:	mov	r0, r3
   14068:	mov	r2, r6
   1406c:	mov	r1, r7
   14070:	bl	11fcc <memcpy@plt>
   14074:	mov	r3, r0
   14078:	mov	r0, r3
   1407c:	pop	{r4, r5, r6, r7, r8, pc}
   14080:	add	r1, r1, #1
   14084:	mvn	r2, #3
   14088:	bl	12afc <emit_test@@Base+0x5f4>
   1408c:	cmp	r0, #0
   14090:	beq	14058 <flatcc_builder_append_vector@@Base+0x6c>
   14094:	mov	r3, r4
   14098:	b	14078 <flatcc_builder_append_vector@@Base+0x8c>
   1409c:	bl	1212c <__assert_fail@plt+0xac>
   140a0:	ldr	r3, [pc, #28]	; 140c4 <flatcc_builder_append_vector@@Base+0xd8>
   140a4:	ldr	r1, [pc, #28]	; 140c8 <flatcc_builder_append_vector@@Base+0xdc>
   140a8:	ldr	r0, [pc, #28]	; 140cc <flatcc_builder_append_vector@@Base+0xe0>
   140ac:	add	r3, pc, r3
   140b0:	ldr	r2, [pc, #24]	; 140d0 <flatcc_builder_append_vector@@Base+0xe4>
   140b4:	add	r3, r3, #352	; 0x160
   140b8:	add	r1, pc, r1
   140bc:	add	r0, pc, r0
   140c0:	bl	12080 <__assert_fail@plt>
   140c4:	andeq	r3, r0, r0, asr #12
   140c8:	andeq	r3, r0, r4, lsl #27
   140cc:	ldrdeq	r3, [r0], -r0
   140d0:	muleq	r0, r3, r3

000140d4 <flatcc_builder_extend_offset_vector@@Base>:
   140d4:	ldr	ip, [r0, #32]
   140d8:	push	{r4, r5, r6, lr}
   140dc:	ldr	r3, [ip, #20]
   140e0:	adds	r2, r1, r3
   140e4:	movcs	r3, #1
   140e8:	movcc	r3, #0
   140ec:	cmn	r2, #-1073741823	; 0xc0000001
   140f0:	movls	r4, #0
   140f4:	movhi	r4, #1
   140f8:	orrs	r4, r3, r4
   140fc:	bne	14148 <flatcc_builder_extend_offset_vector@@Base+0x74>
   14100:	str	r2, [ip, #20]
   14104:	ldr	r6, [r0, #20]
   14108:	ldr	r3, [r0, #24]
   1410c:	add	r1, r6, r1, lsl #2
   14110:	cmp	r1, r3
   14114:	mov	r5, r0
   14118:	str	r1, [r0, #20]
   1411c:	bcs	1412c <flatcc_builder_extend_offset_vector@@Base+0x58>
   14120:	ldr	r0, [r5, #16]
   14124:	add	r0, r0, r6
   14128:	pop	{r4, r5, r6, pc}
   1412c:	add	r1, r1, #1
   14130:	mvn	r2, #3
   14134:	bl	12afc <emit_test@@Base+0x5f4>
   14138:	cmp	r0, #0
   1413c:	beq	14120 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   14140:	mov	r0, r4
   14144:	pop	{r4, r5, r6, pc}
   14148:	bl	1212c <__assert_fail@plt+0xac>

0001414c <flatcc_builder_offset_vector_push@@Base>:
   1414c:	ldr	r2, [r0, #32]
   14150:	push	{r4, r5, r6, lr}
   14154:	ldrh	r3, [r2, #14]
   14158:	cmp	r3, #5
   1415c:	bne	141c4 <flatcc_builder_offset_vector_push@@Base+0x78>
   14160:	ldr	r3, [r2, #20]
   14164:	cmn	r3, #-1073741823	; 0xc0000001
   14168:	beq	141bc <flatcc_builder_offset_vector_push@@Base+0x70>
   1416c:	add	r3, r3, #1
   14170:	str	r3, [r2, #20]
   14174:	ldr	r5, [r0, #20]
   14178:	ldr	r2, [r0, #24]
   1417c:	add	r3, r5, #4
   14180:	cmp	r3, r2
   14184:	mov	r4, r0
   14188:	mov	r6, r1
   1418c:	str	r3, [r0, #20]
   14190:	bcs	141a8 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14194:	ldr	r3, [r4, #16]
   14198:	adds	r0, r3, r5
   1419c:	beq	141e8 <flatcc_builder_offset_vector_push@@Base+0x9c>
   141a0:	str	r6, [r3, r5]
   141a4:	pop	{r4, r5, r6, pc}
   141a8:	mvn	r2, #3
   141ac:	add	r1, r5, #5
   141b0:	bl	12afc <emit_test@@Base+0x5f4>
   141b4:	cmp	r0, #0
   141b8:	beq	14194 <flatcc_builder_offset_vector_push@@Base+0x48>
   141bc:	mov	r0, #0
   141c0:	pop	{r4, r5, r6, pc}
   141c4:	ldr	r3, [pc, #32]	; 141ec <flatcc_builder_offset_vector_push@@Base+0xa0>
   141c8:	ldr	r1, [pc, #32]	; 141f0 <flatcc_builder_offset_vector_push@@Base+0xa4>
   141cc:	ldr	r0, [pc, #32]	; 141f4 <flatcc_builder_offset_vector_push@@Base+0xa8>
   141d0:	add	r3, pc, r3
   141d4:	ldr	r2, [pc, #28]	; 141f8 <flatcc_builder_offset_vector_push@@Base+0xac>
   141d8:	add	r3, r3, #384	; 0x180
   141dc:	add	r1, pc, r1
   141e0:	add	r0, pc, r0
   141e4:	bl	12080 <__assert_fail@plt>
   141e8:	pop	{r4, r5, r6, pc}
   141ec:	andeq	r3, r0, ip, lsl r5
   141f0:	andeq	r3, r0, r0, ror #24
   141f4:	andeq	r3, r0, r8, lsl lr
   141f8:	andeq	r0, r0, r6, lsr #7

000141fc <flatcc_builder_append_offset_vector@@Base>:
   141fc:	ldr	ip, [r0, #32]
   14200:	push	{r4, r5, r6, r7, r8, lr}
   14204:	ldrh	r3, [ip, #14]
   14208:	cmp	r3, #5
   1420c:	bne	142a4 <flatcc_builder_append_offset_vector@@Base+0xa8>
   14210:	mov	r6, r1
   14214:	ldr	r1, [ip, #20]
   14218:	adds	r1, r2, r1
   1421c:	movcs	lr, #1
   14220:	movcc	lr, #0
   14224:	cmn	r1, #-1073741823	; 0xc0000001
   14228:	movls	r3, #0
   1422c:	movhi	r3, #1
   14230:	orrs	r8, lr, r3
   14234:	bne	142a0 <flatcc_builder_append_offset_vector@@Base+0xa4>
   14238:	str	r1, [ip, #20]
   1423c:	ldr	r7, [r0, #20]
   14240:	lsl	r4, r2, #2
   14244:	ldr	r3, [r0, #24]
   14248:	add	r1, r4, r7
   1424c:	cmp	r1, r3
   14250:	mov	r5, r0
   14254:	str	r1, [r0, #20]
   14258:	bcs	14284 <flatcc_builder_append_offset_vector@@Base+0x88>
   1425c:	ldr	r3, [r5, #16]
   14260:	adds	r3, r3, r7
   14264:	beq	1427c <flatcc_builder_append_offset_vector@@Base+0x80>
   14268:	mov	r0, r3
   1426c:	mov	r2, r4
   14270:	mov	r1, r6
   14274:	bl	11fcc <memcpy@plt>
   14278:	mov	r3, r0
   1427c:	mov	r0, r3
   14280:	pop	{r4, r5, r6, r7, r8, pc}
   14284:	add	r1, r1, #1
   14288:	mvn	r2, #3
   1428c:	bl	12afc <emit_test@@Base+0x5f4>
   14290:	cmp	r0, #0
   14294:	beq	1425c <flatcc_builder_append_offset_vector@@Base+0x60>
   14298:	mov	r3, r8
   1429c:	b	1427c <flatcc_builder_append_offset_vector@@Base+0x80>
   142a0:	bl	1212c <__assert_fail@plt+0xac>
   142a4:	ldr	r3, [pc, #28]	; 142c8 <flatcc_builder_append_offset_vector@@Base+0xcc>
   142a8:	ldr	r1, [pc, #28]	; 142cc <flatcc_builder_append_offset_vector@@Base+0xd0>
   142ac:	ldr	r0, [pc, #28]	; 142d0 <flatcc_builder_append_offset_vector@@Base+0xd4>
   142b0:	add	r3, pc, r3
   142b4:	mov	r2, #948	; 0x3b4
   142b8:	add	r3, r3, #420	; 0x1a4
   142bc:	add	r1, pc, r1
   142c0:	add	r0, pc, r0
   142c4:	bl	12080 <__assert_fail@plt>
   142c8:	andeq	r3, r0, ip, lsr r4
   142cc:	andeq	r3, r0, r0, lsl #23
   142d0:	andeq	r3, r0, r8, lsr sp

000142d4 <flatcc_builder_extend_string@@Base>:
   142d4:	ldr	r2, [r0, #32]
   142d8:	push	{r4, r5, r6, lr}
   142dc:	ldrh	r3, [r2, #14]
   142e0:	cmp	r3, #6
   142e4:	bne	14340 <flatcc_builder_extend_string@@Base+0x6c>
   142e8:	ldr	r3, [r2, #20]
   142ec:	adds	r3, r1, r3
   142f0:	bcs	1433c <flatcc_builder_extend_string@@Base+0x68>
   142f4:	str	r3, [r2, #20]
   142f8:	ldr	r5, [r0, #20]
   142fc:	ldr	r3, [r0, #24]
   14300:	add	r1, r1, r5
   14304:	cmp	r1, r3
   14308:	mov	r4, r0
   1430c:	str	r1, [r0, #20]
   14310:	bcs	14320 <flatcc_builder_extend_string@@Base+0x4c>
   14314:	ldr	r0, [r4, #16]
   14318:	add	r0, r0, r5
   1431c:	pop	{r4, r5, r6, pc}
   14320:	add	r1, r1, #1
   14324:	mvn	r2, #3
   14328:	bl	12afc <emit_test@@Base+0x5f4>
   1432c:	cmp	r0, #0
   14330:	beq	14314 <flatcc_builder_extend_string@@Base+0x40>
   14334:	mov	r0, #0
   14338:	pop	{r4, r5, r6, pc}
   1433c:	bl	1212c <__assert_fail@plt+0xac>
   14340:	ldr	r3, [pc, #28]	; 14364 <flatcc_builder_extend_string@@Base+0x90>
   14344:	ldr	r1, [pc, #28]	; 14368 <flatcc_builder_extend_string@@Base+0x94>
   14348:	ldr	r0, [pc, #28]	; 1436c <flatcc_builder_extend_string@@Base+0x98>
   1434c:	add	r3, pc, r3
   14350:	ldr	r2, [pc, #24]	; 14370 <flatcc_builder_extend_string@@Base+0x9c>
   14354:	add	r3, r3, #456	; 0x1c8
   14358:	add	r1, pc, r1
   1435c:	add	r0, pc, r0
   14360:	bl	12080 <__assert_fail@plt>
   14364:	andeq	r3, r0, r0, lsr #7
   14368:	andeq	r3, r0, r4, ror #21
   1436c:	ldrdeq	r3, [r0], -r0
   14370:			; <UNDEFINED> instruction: 0x000003bd

00014374 <flatcc_builder_append_string@@Base>:
   14374:	push	{r4, r5, r6, r7, r8, lr}
   14378:	mov	r7, r1
   1437c:	ldr	r1, [r0, #32]
   14380:	ldrh	r3, [r1, #14]
   14384:	cmp	r3, #6
   14388:	bne	14404 <flatcc_builder_append_string@@Base+0x90>
   1438c:	ldr	r3, [r1, #20]
   14390:	mov	r5, r2
   14394:	adds	r3, r2, r3
   14398:	bcs	14400 <flatcc_builder_append_string@@Base+0x8c>
   1439c:	str	r3, [r1, #20]
   143a0:	ldr	r6, [r0, #20]
   143a4:	ldr	r3, [r0, #24]
   143a8:	add	r1, r2, r6
   143ac:	cmp	r1, r3
   143b0:	mov	r4, r0
   143b4:	str	r1, [r0, #20]
   143b8:	bcs	143e4 <flatcc_builder_append_string@@Base+0x70>
   143bc:	ldr	r3, [r4, #16]
   143c0:	adds	r3, r3, r6
   143c4:	beq	143dc <flatcc_builder_append_string@@Base+0x68>
   143c8:	mov	r0, r3
   143cc:	mov	r2, r5
   143d0:	mov	r1, r7
   143d4:	bl	11fcc <memcpy@plt>
   143d8:	mov	r3, r0
   143dc:	mov	r0, r3
   143e0:	pop	{r4, r5, r6, r7, r8, pc}
   143e4:	add	r1, r1, #1
   143e8:	mvn	r2, #3
   143ec:	bl	12afc <emit_test@@Base+0x5f4>
   143f0:	cmp	r0, #0
   143f4:	beq	143bc <flatcc_builder_append_string@@Base+0x48>
   143f8:	mov	r3, #0
   143fc:	b	143dc <flatcc_builder_append_string@@Base+0x68>
   14400:	bl	1212c <__assert_fail@plt+0xac>
   14404:	ldr	r3, [pc, #28]	; 14428 <flatcc_builder_append_string@@Base+0xb4>
   14408:	ldr	r1, [pc, #28]	; 1442c <flatcc_builder_append_string@@Base+0xb8>
   1440c:	ldr	r0, [pc, #28]	; 14430 <flatcc_builder_append_string@@Base+0xbc>
   14410:	add	r3, pc, r3
   14414:	ldr	r2, [pc, #24]	; 14434 <flatcc_builder_append_string@@Base+0xc0>
   14418:	add	r3, r3, #488	; 0x1e8
   1441c:	add	r1, pc, r1
   14420:	add	r0, pc, r0
   14424:	bl	12080 <__assert_fail@plt>
   14428:	ldrdeq	r3, [r0], -ip
   1442c:	andeq	r3, r0, r0, lsr #20
   14430:	andeq	r3, r0, ip, lsl #24
   14434:	andeq	r0, r0, r6, asr #7

00014438 <flatcc_builder_append_string_str@@Base>:
   14438:	push	{r4, r5, r6, lr}
   1443c:	mov	r5, r0
   14440:	mov	r0, r1
   14444:	mov	r4, r1
   14448:	bl	1202c <strlen@plt>
   1444c:	mov	r1, r4
   14450:	mov	r2, r0
   14454:	mov	r0, r5
   14458:	pop	{r4, r5, r6, lr}
   1445c:	b	14374 <flatcc_builder_append_string@@Base>

00014460 <flatcc_builder_append_string_strn@@Base>:
   14460:	push	{r4, r5, r6, lr}
   14464:	mov	r4, r1
   14468:	mov	r6, r0
   1446c:	mov	r1, #0
   14470:	mov	r0, r4
   14474:	mov	r5, r2
   14478:	bl	1205c <memchr@plt>
   1447c:	mov	r1, r4
   14480:	cmp	r0, #0
   14484:	subne	r5, r0, r4
   14488:	mov	r2, r5
   1448c:	mov	r0, r6
   14490:	pop	{r4, r5, r6, lr}
   14494:	b	14374 <flatcc_builder_append_string@@Base>

00014498 <flatcc_builder_truncate_vector@@Base>:
   14498:	ldr	r3, [r0, #32]
   1449c:	push	{r4, lr}
   144a0:	ldrh	r2, [r3, #14]
   144a4:	cmp	r2, #4
   144a8:	bne	144ec <flatcc_builder_truncate_vector@@Base+0x54>
   144ac:	ldr	ip, [r3, #20]
   144b0:	cmp	ip, r1
   144b4:	bcc	14510 <flatcc_builder_truncate_vector@@Base+0x78>
   144b8:	ldr	r2, [r3, #16]
   144bc:	sub	ip, ip, r1
   144c0:	str	ip, [r3, #20]
   144c4:	mul	r2, r2, r1
   144c8:	ldr	r3, [r0, #20]
   144cc:	ldr	r1, [r0, #16]
   144d0:	sub	r3, r3, r2
   144d4:	str	r3, [r0, #20]
   144d8:	add	r0, r1, r3
   144dc:	mov	r1, #0
   144e0:	bl	12050 <memset@plt>
   144e4:	mov	r0, #0
   144e8:	pop	{r4, pc}
   144ec:	ldr	r3, [pc, #64]	; 14534 <flatcc_builder_truncate_vector@@Base+0x9c>
   144f0:	ldr	r1, [pc, #64]	; 14538 <flatcc_builder_truncate_vector@@Base+0xa0>
   144f4:	ldr	r0, [pc, #64]	; 1453c <flatcc_builder_truncate_vector@@Base+0xa4>
   144f8:	add	r3, pc, r3
   144fc:	ldr	r2, [pc, #60]	; 14540 <flatcc_builder_truncate_vector@@Base+0xa8>
   14500:	add	r3, r3, #520	; 0x208
   14504:	add	r1, pc, r1
   14508:	add	r0, pc, r0
   1450c:	bl	12080 <__assert_fail@plt>
   14510:	ldr	r3, [pc, #44]	; 14544 <flatcc_builder_truncate_vector@@Base+0xac>
   14514:	ldr	r1, [pc, #44]	; 14548 <flatcc_builder_truncate_vector@@Base+0xb0>
   14518:	ldr	r0, [pc, #44]	; 1454c <flatcc_builder_truncate_vector@@Base+0xb4>
   1451c:	add	r3, pc, r3
   14520:	ldr	r2, [pc, #40]	; 14550 <flatcc_builder_truncate_vector@@Base+0xb8>
   14524:	add	r3, r3, #520	; 0x208
   14528:	add	r1, pc, r1
   1452c:	add	r0, pc, r0
   14530:	bl	12080 <__assert_fail@plt>
   14534:	strdeq	r3, [r0], -r4
   14538:	andeq	r3, r0, r8, lsr r9
   1453c:	andeq	r3, r0, r4, lsl #21
   14540:	ldrdeq	r0, [r0], -r9
   14544:	ldrdeq	r3, [r0], -r0
   14548:	andeq	r3, r0, r4, lsl r9
   1454c:	andeq	r3, r0, ip, lsr #22
   14550:	ldrdeq	r0, [r0], -sl

00014554 <flatcc_builder_truncate_offset_vector@@Base>:
   14554:	ldr	r3, [r0, #32]
   14558:	push	{r4, lr}
   1455c:	ldrh	r2, [r3, #14]
   14560:	cmp	r2, #5
   14564:	bne	145a8 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   14568:	ldr	ip, [r3, #20]
   1456c:	cmp	ip, r1
   14570:	bcc	145cc <flatcc_builder_truncate_offset_vector@@Base+0x78>
   14574:	ldr	r2, [r3, #16]
   14578:	sub	ip, ip, r1
   1457c:	str	ip, [r3, #20]
   14580:	mul	r2, r2, r1
   14584:	ldr	r3, [r0, #20]
   14588:	ldr	r1, [r0, #16]
   1458c:	sub	r3, r3, r2
   14590:	str	r3, [r0, #20]
   14594:	add	r0, r1, r3
   14598:	mov	r1, #0
   1459c:	bl	12050 <memset@plt>
   145a0:	mov	r0, #0
   145a4:	pop	{r4, pc}
   145a8:	ldr	r3, [pc, #64]	; 145f0 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   145ac:	ldr	r1, [pc, #64]	; 145f4 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   145b0:	ldr	r0, [pc, #64]	; 145f8 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   145b4:	add	r3, pc, r3
   145b8:	ldr	r2, [pc, #60]	; 145fc <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   145bc:	add	r3, r3, #552	; 0x228
   145c0:	add	r1, pc, r1
   145c4:	add	r0, pc, r0
   145c8:	bl	12080 <__assert_fail@plt>
   145cc:	ldr	r3, [pc, #44]	; 14600 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   145d0:	ldr	r1, [pc, #44]	; 14604 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   145d4:	ldr	r0, [pc, #44]	; 14608 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   145d8:	add	r3, pc, r3
   145dc:	ldr	r2, [pc, #40]	; 1460c <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   145e0:	add	r3, r3, #552	; 0x228
   145e4:	add	r1, pc, r1
   145e8:	add	r0, pc, r0
   145ec:	bl	12080 <__assert_fail@plt>
   145f0:	andeq	r3, r0, r8, lsr r1
   145f4:	andeq	r3, r0, ip, ror r8
   145f8:	andeq	r3, r0, r4, lsr sl
   145fc:	andeq	r0, r0, r2, ror #7
   14600:	andeq	r3, r0, r4, lsl r1
   14604:	andeq	r3, r0, r8, asr r8
   14608:	muleq	r0, r4, sl
   1460c:	andeq	r0, r0, r3, ror #7

00014610 <flatcc_builder_truncate_string@@Base>:
   14610:	ldr	r2, [r0, #32]
   14614:	push	{r4, lr}
   14618:	ldrh	r3, [r2, #14]
   1461c:	cmp	r3, #6
   14620:	bne	14660 <flatcc_builder_truncate_string@@Base+0x50>
   14624:	ldr	r3, [r2, #20]
   14628:	cmp	r3, r1
   1462c:	bcc	14684 <flatcc_builder_truncate_string@@Base+0x74>
   14630:	sub	r3, r3, r1
   14634:	str	r3, [r2, #20]
   14638:	ldr	r3, [r0, #20]
   1463c:	ldr	r2, [r0, #16]
   14640:	sub	r3, r3, r1
   14644:	str	r3, [r0, #20]
   14648:	add	r0, r2, r3
   1464c:	mov	r2, r1
   14650:	mov	r1, #0
   14654:	bl	12050 <memset@plt>
   14658:	mov	r0, #0
   1465c:	pop	{r4, pc}
   14660:	ldr	r3, [pc, #64]	; 146a8 <flatcc_builder_truncate_string@@Base+0x98>
   14664:	ldr	r1, [pc, #64]	; 146ac <flatcc_builder_truncate_string@@Base+0x9c>
   14668:	ldr	r0, [pc, #64]	; 146b0 <flatcc_builder_truncate_string@@Base+0xa0>
   1466c:	add	r3, pc, r3
   14670:	ldr	r2, [pc, #60]	; 146b4 <flatcc_builder_truncate_string@@Base+0xa4>
   14674:	add	r3, r3, #592	; 0x250
   14678:	add	r1, pc, r1
   1467c:	add	r0, pc, r0
   14680:	bl	12080 <__assert_fail@plt>
   14684:	ldr	r3, [pc, #44]	; 146b8 <flatcc_builder_truncate_string@@Base+0xa8>
   14688:	ldr	r1, [pc, #44]	; 146bc <flatcc_builder_truncate_string@@Base+0xac>
   1468c:	ldr	r0, [pc, #44]	; 146c0 <flatcc_builder_truncate_string@@Base+0xb0>
   14690:	add	r3, pc, r3
   14694:	mov	r2, #1004	; 0x3ec
   14698:	add	r3, r3, #592	; 0x250
   1469c:	add	r1, pc, r1
   146a0:	add	r0, pc, r0
   146a4:	bl	12080 <__assert_fail@plt>
   146a8:	andeq	r3, r0, r0, lsl #1
   146ac:	andeq	r3, r0, r4, asr #15
   146b0:			; <UNDEFINED> instruction: 0x000039b0
   146b4:	andeq	r0, r0, fp, ror #7
   146b8:	andeq	r3, r0, ip, asr r0
   146bc:	andeq	r3, r0, r0, lsr #15
   146c0:	andeq	r3, r0, r8, lsl sl

000146c4 <flatcc_builder_start_vector@@Base>:
   146c4:	cmp	r2, #4
   146c8:	push	{r4, r5, r6, lr}
   146cc:	mov	r6, r1
   146d0:	movcs	r1, r2
   146d4:	movcc	r1, #4
   146d8:	mov	r5, r3
   146dc:	mov	r4, r0
   146e0:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   146e4:	cmp	r0, #0
   146e8:	bne	14734 <flatcc_builder_start_vector@@Base+0x70>
   146ec:	ldr	r2, [r4, #32]
   146f0:	mov	lr, #4
   146f4:	str	r6, [r2, #16]
   146f8:	str	r0, [r2, #20]
   146fc:	str	r5, [r2, #24]
   14700:	ldr	ip, [r4, #28]
   14704:	ldr	r3, [r4, #64]	; 0x40
   14708:	ldr	r1, [r4, #60]	; 0x3c
   1470c:	sub	r3, r3, ip
   14710:	cmn	r3, #4
   14714:	mvnhi	r3, #3
   14718:	strh	lr, [r2, #14]
   1471c:	add	r1, r1, ip
   14720:	str	r3, [r4, #24]
   14724:	mvn	r3, #3
   14728:	str	r1, [r4, #16]
   1472c:	str	r3, [r2, #4]
   14730:	pop	{r4, r5, r6, pc}
   14734:	mvn	r0, #0
   14738:	pop	{r4, r5, r6, pc}

0001473c <flatcc_builder_start_offset_vector@@Base>:
   1473c:	push	{r4, lr}
   14740:	mov	r1, #4
   14744:	mov	r4, r0
   14748:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   1474c:	cmp	r0, #0
   14750:	bne	1479c <flatcc_builder_start_offset_vector@@Base+0x60>
   14754:	ldr	r3, [r4, #32]
   14758:	mov	r2, #4
   1475c:	mov	lr, #5
   14760:	str	r0, [r3, #20]
   14764:	str	r2, [r3, #16]
   14768:	ldr	ip, [r4, #28]
   1476c:	ldr	r2, [r4, #64]	; 0x40
   14770:	ldr	r1, [r4, #60]	; 0x3c
   14774:	sub	r2, r2, ip
   14778:	cmn	r2, #4
   1477c:	mvnhi	r2, #3
   14780:	strh	lr, [r3, #14]
   14784:	add	r1, r1, ip
   14788:	str	r2, [r4, #24]
   1478c:	mvn	r2, #3
   14790:	str	r1, [r4, #16]
   14794:	str	r2, [r3, #4]
   14798:	pop	{r4, pc}
   1479c:	mvn	r0, #0
   147a0:	pop	{r4, pc}

000147a4 <flatcc_builder_start_string@@Base>:
   147a4:	push	{r4, lr}
   147a8:	mov	r1, #1
   147ac:	mov	r4, r0
   147b0:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   147b4:	cmp	r0, #0
   147b8:	bne	14804 <flatcc_builder_start_string@@Base+0x60>
   147bc:	ldr	r3, [r4, #32]
   147c0:	mov	r2, #1
   147c4:	mov	lr, #6
   147c8:	str	r0, [r3, #20]
   147cc:	str	r2, [r3, #16]
   147d0:	ldr	ip, [r4, #28]
   147d4:	ldr	r2, [r4, #64]	; 0x40
   147d8:	ldr	r1, [r4, #60]	; 0x3c
   147dc:	sub	r2, r2, ip
   147e0:	cmn	r2, #4
   147e4:	mvnhi	r2, #3
   147e8:	strh	lr, [r3, #14]
   147ec:	add	r1, r1, ip
   147f0:	str	r2, [r4, #24]
   147f4:	mvn	r2, #3
   147f8:	str	r1, [r4, #16]
   147fc:	str	r2, [r3, #4]
   14800:	pop	{r4, pc}
   14804:	mvn	r0, #0
   14808:	pop	{r4, pc}

0001480c <flatcc_builder_reserve_table@@Base>:
   1480c:	cmp	r1, #0
   14810:	push	{r4, r5, r6, r7, lr}
   14814:	sub	sp, sp, #12
   14818:	blt	148f0 <flatcc_builder_reserve_table@@Base+0xe4>
   1481c:	ldr	r2, [r0, #32]
   14820:	add	r1, r1, #2
   14824:	mov	r5, r0
   14828:	ldrh	r6, [r2, #28]
   1482c:	ldr	r3, [r2, #16]
   14830:	ldr	r0, [r0, #56]	; 0x38
   14834:	lsl	r4, r1, #1
   14838:	add	r6, r3, r6, lsl #1
   1483c:	add	r2, r6, r4
   14840:	cmp	r2, r0
   14844:	bhi	148a0 <flatcc_builder_reserve_table@@Base+0x94>
   14848:	ldr	r3, [r5, #52]	; 0x34
   1484c:	adds	r3, r3, r6
   14850:	streq	r3, [r5, #4]
   14854:	mvneq	r0, #0
   14858:	beq	14898 <flatcc_builder_reserve_table@@Base+0x8c>
   1485c:	ldr	r2, [r5, #32]
   14860:	add	r3, r3, #4
   14864:	str	r3, [r5, #4]
   14868:	ldr	r6, [r2, #20]
   1486c:	ldr	r3, [r5, #80]	; 0x50
   14870:	add	r2, r4, r6
   14874:	sub	r2, r2, #3
   14878:	cmp	r2, r3
   1487c:	bhi	148c8 <flatcc_builder_reserve_table@@Base+0xbc>
   14880:	ldr	r3, [r5, #76]	; 0x4c
   14884:	add	r3, r3, r6
   14888:	cmp	r3, #0
   1488c:	movne	r0, #0
   14890:	mvneq	r0, #0
   14894:	str	r3, [r5]
   14898:	add	sp, sp, #12
   1489c:	pop	{r4, r5, r6, r7, pc}
   148a0:	mov	r3, #0
   148a4:	ldr	r0, [r5, #40]	; 0x28
   148a8:	add	r1, r5, #52	; 0x34
   148ac:	str	r3, [sp]
   148b0:	mov	r3, #1
   148b4:	ldr	r7, [r5, #48]	; 0x30
   148b8:	blx	r7
   148bc:	cmp	r0, #0
   148c0:	beq	14848 <flatcc_builder_reserve_table@@Base+0x3c>
   148c4:	bl	1208c <__assert_fail@plt+0xc>
   148c8:	mov	r3, #3
   148cc:	ldr	r0, [r5, #40]	; 0x28
   148d0:	add	r1, r5, #76	; 0x4c
   148d4:	str	r3, [sp]
   148d8:	mov	r3, #0
   148dc:	ldr	r4, [r5, #48]	; 0x30
   148e0:	blx	r4
   148e4:	cmp	r0, #0
   148e8:	beq	14880 <flatcc_builder_reserve_table@@Base+0x74>
   148ec:	b	148c4 <flatcc_builder_reserve_table@@Base+0xb8>
   148f0:	ldr	r3, [pc, #28]	; 14914 <flatcc_builder_reserve_table@@Base+0x108>
   148f4:	ldr	r1, [pc, #28]	; 14918 <flatcc_builder_reserve_table@@Base+0x10c>
   148f8:	ldr	r0, [pc, #28]	; 1491c <flatcc_builder_reserve_table@@Base+0x110>
   148fc:	add	r3, pc, r3
   14900:	ldr	r2, [pc, #24]	; 14920 <flatcc_builder_reserve_table@@Base+0x114>
   14904:	add	r3, r3, #624	; 0x270
   14908:	add	r1, pc, r1
   1490c:	add	r0, pc, r0
   14910:	bl	12080 <__assert_fail@plt>
   14914:	strdeq	r2, [r0], -r0
   14918:	andeq	r3, r0, r4, lsr r5
   1491c:	ldrdeq	r3, [r0], -r0
   14920:	andeq	r0, r0, r9, lsr #8

00014924 <flatcc_builder_start_table@@Base>:
   14924:	push	{r4, r5, r6, r7, r8, lr}
   14928:	mov	r5, r1
   1492c:	sub	sp, sp, #8
   14930:	mov	r1, #4
   14934:	mov	r4, r0
   14938:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   1493c:	subs	r7, r0, #0
   14940:	bne	14a78 <flatcc_builder_start_table@@Base+0x154>
   14944:	ldr	r3, [r4, #52]	; 0x34
   14948:	ldr	r6, [r4, #4]
   1494c:	ldr	r0, [r4, #32]
   14950:	sub	r6, r6, r3
   14954:	add	r5, r5, #2
   14958:	str	r6, [r0, #16]
   1495c:	ldr	r1, [r4, #76]	; 0x4c
   14960:	ldr	r2, [r4]
   14964:	lsl	r5, r5, #1
   14968:	sub	r2, r2, r1
   1496c:	str	r2, [r0, #20]
   14970:	ldr	r2, [r4, #12]
   14974:	ldr	lr, [pc, #268]	; 14a88 <flatcc_builder_start_table@@Base+0x164>
   14978:	str	r2, [r0, #24]
   1497c:	ldrh	r2, [r4, #8]
   14980:	mov	r1, #3
   14984:	strh	r2, [r0, #28]
   14988:	add	r6, r6, r2, lsl #1
   1498c:	ldr	ip, [r4, #56]	; 0x38
   14990:	add	r2, r6, r5
   14994:	cmp	r2, ip
   14998:	strh	r7, [r4, #8]
   1499c:	str	lr, [r4, #12]
   149a0:	strh	r1, [r0, #14]
   149a4:	bhi	14a28 <flatcc_builder_start_table@@Base+0x104>
   149a8:	adds	r6, r3, r6
   149ac:	streq	r6, [r4, #4]
   149b0:	beq	14a78 <flatcc_builder_start_table@@Base+0x154>
   149b4:	ldr	r3, [r4, #32]
   149b8:	add	r6, r6, #4
   149bc:	str	r6, [r4, #4]
   149c0:	ldr	r6, [r3, #20]
   149c4:	sub	r2, r5, #3
   149c8:	ldr	r3, [r4, #80]	; 0x50
   149cc:	add	r2, r2, r6
   149d0:	cmp	r2, r3
   149d4:	bhi	14a50 <flatcc_builder_start_table@@Base+0x12c>
   149d8:	ldr	r3, [r4, #76]	; 0x4c
   149dc:	add	r3, r3, r6
   149e0:	cmp	r3, #0
   149e4:	str	r3, [r4]
   149e8:	beq	14a78 <flatcc_builder_start_table@@Base+0x154>
   149ec:	ldr	r0, [r4, #28]
   149f0:	ldr	r3, [r4, #64]	; 0x40
   149f4:	ldr	r2, [pc, #144]	; 14a8c <flatcc_builder_start_table@@Base+0x168>
   149f8:	sub	r3, r3, r0
   149fc:	ldr	r1, [r4, #60]	; 0x3c
   14a00:	ldr	ip, [r4, #32]
   14a04:	cmp	r3, r2
   14a08:	add	r1, r1, r0
   14a0c:	movcs	r3, r2
   14a10:	str	r1, [r4, #16]
   14a14:	str	r3, [r4, #24]
   14a18:	mov	r0, r7
   14a1c:	str	r2, [ip, #4]
   14a20:	add	sp, sp, #8
   14a24:	pop	{r4, r5, r6, r7, r8, pc}
   14a28:	ldr	r0, [r4, #40]	; 0x28
   14a2c:	mov	r3, #1
   14a30:	str	r7, [sp]
   14a34:	add	r1, r4, #52	; 0x34
   14a38:	ldr	r8, [r4, #48]	; 0x30
   14a3c:	blx	r8
   14a40:	cmp	r0, #0
   14a44:	bne	14a74 <flatcc_builder_start_table@@Base+0x150>
   14a48:	ldr	r3, [r4, #52]	; 0x34
   14a4c:	b	149a8 <flatcc_builder_start_table@@Base+0x84>
   14a50:	mov	r3, #3
   14a54:	ldr	r0, [r4, #40]	; 0x28
   14a58:	add	r1, r4, #76	; 0x4c
   14a5c:	str	r3, [sp]
   14a60:	mov	r3, #0
   14a64:	ldr	r5, [r4, #48]	; 0x30
   14a68:	blx	r5
   14a6c:	cmp	r0, #0
   14a70:	beq	149d8 <flatcc_builder_start_table@@Base+0xb4>
   14a74:	bl	1208c <__assert_fail@plt+0xc>
   14a78:	mvn	r7, #0
   14a7c:	mov	r0, r7
   14a80:	add	sp, sp, #8
   14a84:	pop	{r4, r5, r6, r7, r8, pc}
   14a88:	svccs	0x00693b52
   14a8c:	strdeq	pc, [r0], -ip

00014a90 <flatcc_builder_create_vtable@@Base>:
   14a90:	push	{r4, r5, r6, lr}
   14a94:	sub	sp, sp, #80	; 0x50
   14a98:	subs	r3, r2, #0
   14a9c:	mov	r2, #0
   14aa0:	mov	r4, r0
   14aa4:	str	r2, [sp, #8]
   14aa8:	str	r2, [sp, #12]
   14aac:	beq	14b24 <flatcc_builder_create_vtable@@Base+0x94>
   14ab0:	ldr	r0, [r0, #152]	; 0x98
   14ab4:	mov	r2, #1
   14ab8:	cmp	r0, #0
   14abc:	str	r1, [sp, #16]
   14ac0:	str	r3, [sp, #8]
   14ac4:	str	r3, [sp, #20]
   14ac8:	str	r2, [sp, #12]
   14acc:	mov	r1, r3
   14ad0:	beq	14b40 <flatcc_builder_create_vtable@@Base+0xb0>
   14ad4:	ldr	r2, [r4, #136]	; 0x88
   14ad8:	sub	r5, r2, r3
   14adc:	cmp	r2, r5
   14ae0:	ble	14b3c <flatcc_builder_create_vtable@@Base+0xac>
   14ae4:	ldr	r0, [r4, #36]	; 0x24
   14ae8:	ldr	r2, [sp, #12]
   14aec:	str	r3, [sp]
   14af0:	add	r1, sp, #16
   14af4:	ldr	r6, [r4, #44]	; 0x2c
   14af8:	mov	r3, r5
   14afc:	blx	r6
   14b00:	cmp	r0, #0
   14b04:	bne	14bb4 <flatcc_builder_create_vtable@@Base+0x124>
   14b08:	cmp	r5, #0
   14b0c:	str	r5, [r4, #136]	; 0x88
   14b10:	beq	14b18 <flatcc_builder_create_vtable@@Base+0x88>
   14b14:	add	r5, r5, #1
   14b18:	mov	r0, r5
   14b1c:	add	sp, sp, #80	; 0x50
   14b20:	pop	{r4, r5, r6, pc}
   14b24:	ldr	r3, [r0, #152]	; 0x98
   14b28:	cmp	r3, #0
   14b2c:	bne	14b3c <flatcc_builder_create_vtable@@Base+0xac>
   14b30:	ldr	r3, [r0, #180]	; 0xb4
   14b34:	cmp	r3, #0
   14b38:	beq	14ba8 <flatcc_builder_create_vtable@@Base+0x118>
   14b3c:	bl	120f4 <__assert_fail@plt+0x74>
   14b40:	ldr	r2, [r4, #180]	; 0xb4
   14b44:	cmp	r2, #0
   14b48:	bne	14ad4 <flatcc_builder_create_vtable@@Base+0x44>
   14b4c:	ldr	r5, [r4, #140]	; 0x8c
   14b50:	add	r3, r5, r3
   14b54:	cmp	r5, r3
   14b58:	str	r3, [r4, #140]	; 0x8c
   14b5c:	bgt	14bd8 <flatcc_builder_create_vtable@@Base+0x148>
   14b60:	ldr	r0, [r4, #36]	; 0x24
   14b64:	ldr	r2, [sp, #12]
   14b68:	str	r1, [sp]
   14b6c:	mov	r3, r5
   14b70:	ldr	r4, [r4, #44]	; 0x2c
   14b74:	add	r1, sp, #16
   14b78:	blx	r4
   14b7c:	cmp	r0, #0
   14b80:	beq	14b14 <flatcc_builder_create_vtable@@Base+0x84>
   14b84:	ldr	r3, [pc, #80]	; 14bdc <flatcc_builder_create_vtable@@Base+0x14c>
   14b88:	ldr	r1, [pc, #80]	; 14be0 <flatcc_builder_create_vtable@@Base+0x150>
   14b8c:	ldr	r0, [pc, #80]	; 14be4 <flatcc_builder_create_vtable@@Base+0x154>
   14b90:	add	r3, pc, r3
   14b94:	ldr	r2, [pc, #76]	; 14be8 <flatcc_builder_create_vtable@@Base+0x158>
   14b98:	add	r3, r3, #16
   14b9c:	add	r1, pc, r1
   14ba0:	add	r0, pc, r0
   14ba4:	bl	12080 <__assert_fail@plt>
   14ba8:	ldr	r5, [r4, #140]	; 0x8c
   14bac:	mov	r1, r3
   14bb0:	b	14b60 <flatcc_builder_create_vtable@@Base+0xd0>
   14bb4:	ldr	r3, [pc, #48]	; 14bec <flatcc_builder_create_vtable@@Base+0x15c>
   14bb8:	ldr	r1, [pc, #48]	; 14bf0 <flatcc_builder_create_vtable@@Base+0x160>
   14bbc:	ldr	r0, [pc, #48]	; 14bf4 <flatcc_builder_create_vtable@@Base+0x164>
   14bc0:	add	r3, pc, r3
   14bc4:	ldr	r2, [pc, #44]	; 14bf8 <flatcc_builder_create_vtable@@Base+0x168>
   14bc8:	add	r3, r3, #28
   14bcc:	add	r1, pc, r1
   14bd0:	add	r0, pc, r0
   14bd4:	bl	12080 <__assert_fail@plt>
   14bd8:	bl	120bc <__assert_fail@plt+0x3c>
   14bdc:	andeq	r2, r0, ip, asr fp
   14be0:	andeq	r3, r0, r0, lsr #5
   14be4:	andeq	r3, r0, r4, lsr #6
   14be8:	andeq	r0, r0, r5, lsr #5
   14bec:	andeq	r2, r0, ip, lsr #22
   14bf0:	andeq	r3, r0, r0, ror r2
   14bf4:	strdeq	r3, [r0], -r4
   14bf8:	andeq	r0, r0, fp, lsl #5

00014bfc <flatcc_builder_create_cached_vtable@@Base>:
   14bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c00:	sub	sp, sp, #28
   14c04:	ldr	r4, [r0, #116]	; 0x74
   14c08:	mov	sl, r3
   14c0c:	cmp	r4, #0
   14c10:	mov	r8, r0
   14c14:	str	r1, [sp, #8]
   14c18:	mov	r7, r2
   14c1c:	rsbne	r3, r4, #32
   14c20:	beq	14d78 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   14c24:	lsr	sl, sl, r3
   14c28:	ldr	r3, [r8, #92]	; 0x5c
   14c2c:	adds	r2, r3, sl, lsl #2
   14c30:	str	r3, [sp, #16]
   14c34:	str	r2, [sp, #20]
   14c38:	beq	14d6c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14c3c:	ldr	r5, [r3, sl, lsl #2]
   14c40:	cmp	r5, #0
   14c44:	beq	14e68 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   14c48:	mov	r3, #0
   14c4c:	ldr	fp, [r8, #100]	; 0x64
   14c50:	ldr	r6, [r8, #68]	; 0x44
   14c54:	mov	r9, r2
   14c58:	str	r3, [sp, #12]
   14c5c:	b	14c70 <flatcc_builder_create_cached_vtable@@Base+0x74>
   14c60:	ldr	r5, [r4, #12]
   14c64:	add	r9, r4, #12
   14c68:	cmp	r5, #0
   14c6c:	beq	14cc0 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14c70:	add	r4, fp, r5
   14c74:	ldr	r2, [r4, #8]
   14c78:	add	r1, r6, r2
   14c7c:	ldrh	r2, [r6, r2]
   14c80:	cmp	r2, r7
   14c84:	bne	14c60 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14c88:	mov	r2, r7
   14c8c:	ldr	r0, [sp, #8]
   14c90:	bl	11fd8 <memcmp@plt>
   14c94:	cmp	r0, #0
   14c98:	bne	14c60 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14c9c:	ldr	r1, [r4, #4]
   14ca0:	ldr	r2, [r8, #152]	; 0x98
   14ca4:	cmp	r1, r2
   14ca8:	beq	14d3c <flatcc_builder_create_cached_vtable@@Base+0x140>
   14cac:	ldr	r5, [r4, #12]
   14cb0:	add	r9, r4, #12
   14cb4:	cmp	r5, #0
   14cb8:	str	r4, [sp, #12]
   14cbc:	bne	14c70 <flatcc_builder_create_cached_vtable@@Base+0x74>
   14cc0:	ldr	r4, [r8, #124]	; 0x7c
   14cc4:	ldr	r3, [r8, #104]	; 0x68
   14cc8:	add	r2, r4, #16
   14ccc:	cmp	r2, r3
   14cd0:	bhi	14e40 <flatcc_builder_create_cached_vtable@@Base+0x244>
   14cd4:	ldr	r5, [r8, #100]	; 0x64
   14cd8:	adds	r6, r5, r4
   14cdc:	beq	14d6c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14ce0:	ldr	r3, [r8, #124]	; 0x7c
   14ce4:	ldr	r0, [sp, #16]
   14ce8:	ldr	r2, [r8, #152]	; 0x98
   14cec:	add	r1, r3, #16
   14cf0:	str	r1, [r8, #124]	; 0x7c
   14cf4:	str	r2, [r6, #4]
   14cf8:	ldr	r1, [r0, sl, lsl #2]
   14cfc:	mov	r2, r7
   14d00:	str	r1, [r6, #12]
   14d04:	str	r3, [r0, sl, lsl #2]
   14d08:	ldr	r1, [sp, #8]
   14d0c:	mov	r0, r8
   14d10:	bl	14a90 <flatcc_builder_create_vtable@@Base>
   14d14:	cmp	r0, #0
   14d18:	str	r0, [r5, r4]
   14d1c:	beq	14d6c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14d20:	ldr	r3, [sp, #12]
   14d24:	cmp	r3, #0
   14d28:	beq	14e70 <flatcc_builder_create_cached_vtable@@Base+0x274>
   14d2c:	ldr	r3, [r3, #8]
   14d30:	str	r3, [r6, #8]
   14d34:	add	sp, sp, #28
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d3c:	ldr	r3, [sp, #20]
   14d40:	cmp	r3, r9
   14d44:	beq	14d60 <flatcc_builder_create_cached_vtable@@Base+0x164>
   14d48:	ldr	r2, [sp, #16]
   14d4c:	ldr	r3, [r4, #12]
   14d50:	str	r3, [r9]
   14d54:	ldr	r3, [r2, sl, lsl #2]
   14d58:	str	r3, [r4, #12]
   14d5c:	str	r5, [r2, sl, lsl #2]
   14d60:	ldr	r0, [r4]
   14d64:	add	sp, sp, #28
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	mov	r0, #0
   14d70:	add	sp, sp, #28
   14d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d78:	ldr	r3, [r0, #124]	; 0x7c
   14d7c:	add	r5, r0, #92	; 0x5c
   14d80:	cmp	r3, #0
   14d84:	bne	14f08 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   14d88:	ldr	r3, [r0, #104]	; 0x68
   14d8c:	cmp	r3, #15
   14d90:	bls	14e14 <flatcc_builder_create_cached_vtable@@Base+0x218>
   14d94:	ldr	r3, [r8, #100]	; 0x64
   14d98:	cmp	r3, #0
   14d9c:	beq	14d6c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14da0:	mov	r2, #16
   14da4:	mov	r3, #5
   14da8:	str	r2, [r8, #124]	; 0x7c
   14dac:	ldr	r0, [r8, #40]	; 0x28
   14db0:	mov	r1, r5
   14db4:	str	r3, [sp]
   14db8:	mov	r2, #256	; 0x100
   14dbc:	ldr	r5, [r8, #48]	; 0x30
   14dc0:	mov	r3, #1
   14dc4:	blx	r5
   14dc8:	cmp	r0, #0
   14dcc:	bne	14d6c <flatcc_builder_create_cached_vtable@@Base+0x170>
   14dd0:	ldr	r1, [r8, #96]	; 0x60
   14dd4:	mov	r3, #256	; 0x100
   14dd8:	b	14de0 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   14ddc:	mov	r3, r2
   14de0:	lsl	r2, r3, #1
   14de4:	cmp	r2, r1
   14de8:	bls	14ddc <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14dec:	lsr	r3, r3, #2
   14df0:	cmp	r3, #1
   14df4:	bls	14ec8 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   14df8:	mov	r2, #1
   14dfc:	add	r4, r4, #1
   14e00:	cmp	r3, r2, lsl r4
   14e04:	bhi	14dfc <flatcc_builder_create_cached_vtable@@Base+0x200>
   14e08:	rsb	r3, r4, #32
   14e0c:	str	r4, [r8, #116]	; 0x74
   14e10:	b	14c24 <flatcc_builder_create_cached_vtable@@Base+0x28>
   14e14:	mov	r3, #6
   14e18:	ldr	r0, [r0, #40]	; 0x28
   14e1c:	mov	r2, #16
   14e20:	str	r3, [sp]
   14e24:	add	r1, r8, #100	; 0x64
   14e28:	ldr	r6, [r8, #48]	; 0x30
   14e2c:	mov	r3, r4
   14e30:	blx	r6
   14e34:	cmp	r0, #0
   14e38:	beq	14d94 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14e3c:	b	14ef4 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14e40:	mov	r3, #6
   14e44:	ldr	r0, [r8, #40]	; 0x28
   14e48:	add	r1, r8, #100	; 0x64
   14e4c:	str	r3, [sp]
   14e50:	mov	r3, #0
   14e54:	ldr	r5, [r8, #48]	; 0x30
   14e58:	blx	r5
   14e5c:	cmp	r0, #0
   14e60:	beq	14cd4 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   14e64:	b	14ef4 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14e68:	str	r5, [sp, #12]
   14e6c:	b	14cc0 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14e70:	ldr	r3, [r8, #172]	; 0xac
   14e74:	ldr	r9, [r8, #120]	; 0x78
   14e78:	cmp	r3, #0
   14e7c:	add	r2, r9, r7
   14e80:	beq	14e8c <flatcc_builder_create_cached_vtable@@Base+0x290>
   14e84:	cmp	r3, r2
   14e88:	bcc	14ef8 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   14e8c:	ldr	r3, [r8, #72]	; 0x48
   14e90:	cmp	r3, r2
   14e94:	bcc	14ed0 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   14e98:	ldr	r3, [r8, #68]	; 0x44
   14e9c:	adds	r0, r3, r9
   14ea0:	beq	14f2c <flatcc_builder_create_cached_vtable@@Base+0x330>
   14ea4:	ldr	r3, [r8, #120]	; 0x78
   14ea8:	ldr	r1, [sp, #8]
   14eac:	add	ip, r3, r7
   14eb0:	str	r3, [r6, #8]
   14eb4:	mov	r2, r7
   14eb8:	str	ip, [r8, #120]	; 0x78
   14ebc:	bl	11fcc <memcpy@plt>
   14ec0:	ldr	r0, [r5, r4]
   14ec4:	b	14d34 <flatcc_builder_create_cached_vtable@@Base+0x138>
   14ec8:	mov	r3, #32
   14ecc:	b	14e0c <flatcc_builder_create_cached_vtable@@Base+0x210>
   14ed0:	mov	r3, #2
   14ed4:	ldr	r0, [r8, #40]	; 0x28
   14ed8:	add	r1, r8, #68	; 0x44
   14edc:	str	r3, [sp]
   14ee0:	mov	r3, #0
   14ee4:	ldr	sl, [r8, #48]	; 0x30
   14ee8:	blx	sl
   14eec:	cmp	r0, #0
   14ef0:	beq	14e98 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   14ef4:	bl	1208c <__assert_fail@plt+0xc>
   14ef8:	mov	r0, r8
   14efc:	bl	130f0 <flatcc_builder_flush_vtable_cache@@Base>
   14f00:	ldr	r0, [r5, r4]
   14f04:	b	14d34 <flatcc_builder_create_cached_vtable@@Base+0x138>
   14f08:	ldr	r3, [pc, #36]	; 14f34 <flatcc_builder_create_cached_vtable@@Base+0x338>
   14f0c:	ldr	r1, [pc, #36]	; 14f38 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   14f10:	ldr	r0, [pc, #36]	; 14f3c <flatcc_builder_create_cached_vtable@@Base+0x340>
   14f14:	add	r3, pc, r3
   14f18:	ldr	r2, [pc, #32]	; 14f40 <flatcc_builder_create_cached_vtable@@Base+0x344>
   14f1c:	add	r3, r3, #656	; 0x290
   14f20:	add	r1, pc, r1
   14f24:	add	r0, pc, r0
   14f28:	bl	12080 <__assert_fail@plt>
   14f2c:	mvn	r0, #0
   14f30:	b	14d34 <flatcc_builder_create_cached_vtable@@Base+0x138>
   14f34:	ldrdeq	r2, [r0], -r8
   14f38:	andeq	r2, r0, ip, lsl pc
   14f3c:	andeq	r3, r0, r4, asr #3
   14f40:	andeq	r0, r0, r6, asr r1

00014f44 <flatcc_builder_create_table@@Base>:
   14f44:	push	{r4, r5, r6, r7, r8, lr}
   14f48:	sub	sp, sp, #88	; 0x58
   14f4c:	ldr	r8, [pc, #436]	; 15108 <flatcc_builder_create_table@@Base+0x1c4>
   14f50:	ldr	r4, [sp, #116]	; 0x74
   14f54:	add	r8, pc, r8
   14f58:	cmp	r4, #0
   14f5c:	ldr	lr, [sp, #120]	; 0x78
   14f60:	blt	15098 <flatcc_builder_create_table@@Base+0x154>
   14f64:	tst	lr, #1
   14f68:	beq	150e4 <flatcc_builder_create_table@@Base+0x1a0>
   14f6c:	mov	r5, r0
   14f70:	ldrh	r0, [r0, #128]	; 0x80
   14f74:	cmp	r3, #4
   14f78:	movcc	r3, #4
   14f7c:	ldr	ip, [r5, #136]	; 0x88
   14f80:	cmp	r0, r3
   14f84:	mvn	r0, #3
   14f88:	strhcc	r3, [r5, #128]	; 0x80
   14f8c:	sub	r7, ip, r2
   14f90:	sub	r3, r3, #1
   14f94:	sub	r0, r0, r2
   14f98:	and	r7, r7, r3
   14f9c:	add	r0, r0, ip
   14fa0:	sub	r3, lr, #1
   14fa4:	sub	r0, r0, r7
   14fa8:	sub	r3, r0, r3
   14fac:	cmp	r4, #0
   14fb0:	str	r3, [sp, #12]
   14fb4:	beq	14fe8 <flatcc_builder_create_table@@Base+0xa4>
   14fb8:	ldr	ip, [sp, #112]	; 0x70
   14fbc:	mvn	r6, #3
   14fc0:	add	r4, ip, r4, lsl #1
   14fc4:	sub	r6, r6, r0
   14fc8:	ldrh	r3, [ip], #2
   14fcc:	sub	lr, r6, r3
   14fd0:	ldr	r0, [r1, r3]
   14fd4:	cmp	r4, ip
   14fd8:	add	r0, r0, lr
   14fdc:	str	r0, [r1, r3]
   14fe0:	bne	14fc8 <flatcc_builder_create_table@@Base+0x84>
   14fe4:	ldr	ip, [r5, #136]	; 0x88
   14fe8:	mov	r3, #4
   14fec:	mov	lr, #1
   14ff0:	add	r0, sp, #12
   14ff4:	cmp	r2, #0
   14ff8:	str	r3, [sp, #16]
   14ffc:	str	r3, [sp, #28]
   15000:	str	r0, [sp, #24]
   15004:	str	lr, [sp, #20]
   15008:	beq	15024 <flatcc_builder_create_table@@Base+0xe0>
   1500c:	add	r3, r2, r3
   15010:	mov	r0, #2
   15014:	str	r1, [sp, #32]
   15018:	str	r2, [sp, #36]	; 0x24
   1501c:	str	r3, [sp, #16]
   15020:	str	r0, [sp, #20]
   15024:	cmp	r7, #0
   15028:	beq	15058 <flatcc_builder_create_table@@Base+0x114>
   1502c:	ldr	r2, [sp, #20]
   15030:	ldr	r1, [pc, #212]	; 1510c <flatcc_builder_create_table@@Base+0x1c8>
   15034:	add	r2, r2, #1
   15038:	add	r3, r3, r7
   1503c:	str	r3, [sp, #16]
   15040:	ldr	r0, [r8, r1]
   15044:	add	r1, sp, #88	; 0x58
   15048:	add	r1, r1, r2, lsl #3
   1504c:	str	r2, [sp, #20]
   15050:	str	r0, [r1, #-72]	; 0xffffffb8
   15054:	str	r7, [r1, #-68]	; 0xffffffbc
   15058:	sub	r4, ip, r3
   1505c:	cmp	r4, ip
   15060:	bge	150e0 <flatcc_builder_create_table@@Base+0x19c>
   15064:	ldr	r0, [r5, #36]	; 0x24
   15068:	ldr	r2, [sp, #20]
   1506c:	str	r3, [sp]
   15070:	add	r1, sp, #24
   15074:	ldr	r6, [r5, #44]	; 0x2c
   15078:	mov	r3, r4
   1507c:	blx	r6
   15080:	cmp	r0, #0
   15084:	bne	150bc <flatcc_builder_create_table@@Base+0x178>
   15088:	mov	r0, r4
   1508c:	str	r4, [r5, #136]	; 0x88
   15090:	add	sp, sp, #88	; 0x58
   15094:	pop	{r4, r5, r6, r7, r8, pc}
   15098:	ldr	r3, [pc, #112]	; 15110 <flatcc_builder_create_table@@Base+0x1cc>
   1509c:	ldr	r1, [pc, #112]	; 15114 <flatcc_builder_create_table@@Base+0x1d0>
   150a0:	ldr	r0, [pc, #112]	; 15118 <flatcc_builder_create_table@@Base+0x1d4>
   150a4:	add	r3, pc, r3
   150a8:	ldr	r2, [pc, #108]	; 1511c <flatcc_builder_create_table@@Base+0x1d8>
   150ac:	add	r3, r3, #668	; 0x29c
   150b0:	add	r1, pc, r1
   150b4:	add	r0, pc, r0
   150b8:	bl	12080 <__assert_fail@plt>
   150bc:	ldr	r3, [pc, #92]	; 15120 <flatcc_builder_create_table@@Base+0x1dc>
   150c0:	ldr	r1, [pc, #92]	; 15124 <flatcc_builder_create_table@@Base+0x1e0>
   150c4:	ldr	r0, [pc, #92]	; 15128 <flatcc_builder_create_table@@Base+0x1e4>
   150c8:	add	r3, pc, r3
   150cc:	ldr	r2, [pc, #88]	; 1512c <flatcc_builder_create_table@@Base+0x1e8>
   150d0:	add	r3, r3, #28
   150d4:	add	r1, pc, r1
   150d8:	add	r0, pc, r0
   150dc:	bl	12080 <__assert_fail@plt>
   150e0:	bl	120f4 <__assert_fail@plt+0x74>
   150e4:	ldr	r3, [pc, #68]	; 15130 <flatcc_builder_create_table@@Base+0x1ec>
   150e8:	ldr	r1, [pc, #68]	; 15134 <flatcc_builder_create_table@@Base+0x1f0>
   150ec:	ldr	r0, [pc, #68]	; 15138 <flatcc_builder_create_table@@Base+0x1f4>
   150f0:	add	r3, pc, r3
   150f4:	ldr	r2, [pc, #64]	; 1513c <flatcc_builder_create_table@@Base+0x1f8>
   150f8:	add	r3, r3, #668	; 0x29c
   150fc:	add	r1, pc, r1
   15100:	add	r0, pc, r0
   15104:	bl	12080 <__assert_fail@plt>
   15108:	andeq	r4, r1, r4, lsr #1
   1510c:	andeq	r0, r0, r4, asr r0
   15110:	andeq	r2, r0, r8, asr #12
   15114:	andeq	r2, r0, ip, lsl #27
   15118:	andeq	r3, r0, r4, asr #32
   1511c:	ldrdeq	r0, [r0], -r5
   15120:	andeq	r2, r0, r4, lsr #12
   15124:	andeq	r2, r0, r8, ror #26
   15128:	andeq	r2, r0, ip, ror #27
   1512c:	andeq	r0, r0, fp, lsl #5
   15130:	strdeq	r2, [r0], -ip
   15134:	andeq	r2, r0, r0, asr #26
   15138:	andeq	r3, r0, ip
   1513c:	ldrdeq	r0, [r0], -fp

00015140 <flatcc_builder_check_required_field@@Base>:
   15140:	ldr	r3, [r0, #32]
   15144:	ldrh	r3, [r3, #14]
   15148:	cmp	r3, #3
   1514c:	bne	15178 <flatcc_builder_check_required_field@@Base+0x38>
   15150:	ldrh	r3, [r0, #8]
   15154:	cmp	r3, r1
   15158:	movls	r0, #0
   1515c:	bls	15174 <flatcc_builder_check_required_field@@Base+0x34>
   15160:	ldr	r3, [r0, #4]
   15164:	lsl	r1, r1, #1
   15168:	ldrh	r0, [r3, r1]
   1516c:	adds	r0, r0, #0
   15170:	movne	r0, #1
   15174:	bx	lr
   15178:	ldr	r3, [pc, #32]	; 151a0 <flatcc_builder_check_required_field@@Base+0x60>
   1517c:	ldr	r1, [pc, #32]	; 151a4 <flatcc_builder_check_required_field@@Base+0x64>
   15180:	ldr	r0, [pc, #32]	; 151a8 <flatcc_builder_check_required_field@@Base+0x68>
   15184:	add	r3, pc, r3
   15188:	push	{r4, lr}
   1518c:	add	r3, r3, #696	; 0x2b8
   15190:	ldr	r2, [pc, #20]	; 151ac <flatcc_builder_check_required_field@@Base+0x6c>
   15194:	add	r1, pc, r1
   15198:	add	r0, pc, r0
   1519c:	bl	12080 <__assert_fail@plt>
   151a0:	andeq	r2, r0, r8, ror #10
   151a4:	andeq	r2, r0, r8, lsr #25
   151a8:	andeq	r2, r0, r0, lsl #31
   151ac:	strdeq	r0, [r0], -r8

000151b0 <flatcc_builder_check_union_field@@Base>:
   151b0:	ldr	r3, [r0, #32]
   151b4:	ldrh	r3, [r3, #14]
   151b8:	cmp	r3, #3
   151bc:	bne	15238 <flatcc_builder_check_union_field@@Base+0x88>
   151c0:	cmp	r1, #0
   151c4:	beq	15210 <flatcc_builder_check_union_field@@Base+0x60>
   151c8:	ldrh	r3, [r0, #8]
   151cc:	cmp	r3, r1
   151d0:	bls	15210 <flatcc_builder_check_union_field@@Base+0x60>
   151d4:	sub	r1, r1, #-2147483647	; 0x80000001
   151d8:	ldr	r3, [r0, #4]
   151dc:	lsl	r1, r1, #1
   151e0:	ldrh	r2, [r3, r1]
   151e4:	cmp	r2, #0
   151e8:	beq	15224 <flatcc_builder_check_union_field@@Base+0x74>
   151ec:	ldr	r0, [r0, #16]
   151f0:	add	r1, r3, r1
   151f4:	ldrb	r2, [r0, r2]
   151f8:	ldrh	r1, [r1, #2]
   151fc:	cmp	r2, #0
   15200:	bne	15218 <flatcc_builder_check_union_field@@Base+0x68>
   15204:	clz	r0, r1
   15208:	lsr	r0, r0, #5
   1520c:	bx	lr
   15210:	mov	r0, #0
   15214:	bx	lr
   15218:	adds	r0, r1, #0
   1521c:	movne	r0, #1
   15220:	b	15214 <flatcc_builder_check_union_field@@Base+0x64>
   15224:	add	r1, r3, r1
   15228:	ldrh	r1, [r1, #2]
   1522c:	clz	r0, r1
   15230:	lsr	r0, r0, #5
   15234:	bx	lr
   15238:	ldr	r3, [pc, #32]	; 15260 <flatcc_builder_check_union_field@@Base+0xb0>
   1523c:	ldr	r1, [pc, #32]	; 15264 <flatcc_builder_check_union_field@@Base+0xb4>
   15240:	ldr	r0, [pc, #32]	; 15268 <flatcc_builder_check_union_field@@Base+0xb8>
   15244:	add	r3, pc, r3
   15248:	push	{r4, lr}
   1524c:	add	r3, r3, #732	; 0x2dc
   15250:	ldr	r2, [pc, #20]	; 1526c <flatcc_builder_check_union_field@@Base+0xbc>
   15254:	add	r1, pc, r1
   15258:	add	r0, pc, r0
   1525c:	bl	12080 <__assert_fail@plt>
   15260:	andeq	r2, r0, r8, lsr #9
   15264:	andeq	r2, r0, r8, ror #23
   15268:	andeq	r2, r0, r0, asr #29
   1526c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00015270 <flatcc_builder_check_required@@Base>:
   15270:	ldr	r3, [r0, #32]
   15274:	ldrh	r3, [r3, #14]
   15278:	cmp	r3, #3
   1527c:	bne	152e0 <flatcc_builder_check_required@@Base+0x70>
   15280:	ldrh	r3, [r0, #8]
   15284:	cmp	r3, r2
   15288:	movlt	r0, #0
   1528c:	blt	152dc <flatcc_builder_check_required@@Base+0x6c>
   15290:	cmp	r2, #0
   15294:	ble	152d8 <flatcc_builder_check_required@@Base+0x68>
   15298:	ldrh	r3, [r1]
   1529c:	ldr	ip, [r0, #4]
   152a0:	lsl	r3, r3, #1
   152a4:	ldrh	r0, [ip, r3]
   152a8:	cmp	r0, #0
   152ac:	beq	152dc <flatcc_builder_check_required@@Base+0x6c>
   152b0:	add	r2, r1, r2, lsl #1
   152b4:	add	r1, r1, #2
   152b8:	b	152d0 <flatcc_builder_check_required@@Base+0x60>
   152bc:	ldrh	r3, [r1], #2
   152c0:	lsl	r3, r3, #1
   152c4:	ldrh	r0, [ip, r3]
   152c8:	cmp	r0, #0
   152cc:	beq	152dc <flatcc_builder_check_required@@Base+0x6c>
   152d0:	cmp	r1, r2
   152d4:	bne	152bc <flatcc_builder_check_required@@Base+0x4c>
   152d8:	mov	r0, #1
   152dc:	bx	lr
   152e0:	ldr	r3, [pc, #32]	; 15308 <flatcc_builder_check_required@@Base+0x98>
   152e4:	ldr	r1, [pc, #32]	; 1530c <flatcc_builder_check_required@@Base+0x9c>
   152e8:	ldr	r0, [pc, #32]	; 15310 <flatcc_builder_check_required@@Base+0xa0>
   152ec:	add	r3, pc, r3
   152f0:	push	{r4, lr}
   152f4:	add	r3, r3, #768	; 0x300
   152f8:	ldr	r2, [pc, #20]	; 15314 <flatcc_builder_check_required@@Base+0xa4>
   152fc:	add	r1, pc, r1
   15300:	add	r0, pc, r0
   15304:	bl	12080 <__assert_fail@plt>
   15308:	andeq	r2, r0, r0, lsl #8
   1530c:	andeq	r2, r0, r0, asr #22
   15310:	andeq	r2, r0, r8, lsl lr
   15314:	andeq	r0, r0, r1, lsl r5

00015318 <flatcc_builder_end_table@@Base>:
   15318:	ldr	r3, [r0, #32]
   1531c:	push	{r4, r5, r6, r7, lr}
   15320:	sub	sp, sp, #20
   15324:	ldrh	r3, [r3, #14]
   15328:	cmp	r3, #3
   1532c:	bne	154b0 <flatcc_builder_end_table@@Base+0x198>
   15330:	ldrh	r5, [r0, #8]
   15334:	ldr	r3, [r0, #12]
   15338:	ldr	r1, [pc, #404]	; 154d4 <flatcc_builder_end_table@@Base+0x1bc>
   1533c:	add	r5, r5, #2
   15340:	ldr	r2, [r0, #20]
   15344:	lsl	r5, r5, #1
   15348:	add	r2, r2, #4
   1534c:	uxth	r5, r5
   15350:	eor	r3, r3, r5
   15354:	uxth	r2, r2
   15358:	mul	r3, r1, r3
   1535c:	ldr	ip, [r0, #4]
   15360:	eor	r3, r3, r2
   15364:	sub	r6, ip, #4
   15368:	mul	r1, r1, r3
   1536c:	strh	r2, [ip, #-2]
   15370:	strh	r5, [ip, #-4]
   15374:	mov	r3, r1
   15378:	str	r1, [r0, #12]
   1537c:	mov	r2, r5
   15380:	mov	r1, r6
   15384:	mov	r4, r0
   15388:	bl	14bfc <flatcc_builder_create_cached_vtable@@Base>
   1538c:	subs	r7, r0, #0
   15390:	bne	153a4 <flatcc_builder_end_table@@Base+0x8c>
   15394:	mov	r5, #0
   15398:	mov	r0, r5
   1539c:	add	sp, sp, #20
   153a0:	pop	{r4, r5, r6, r7, pc}
   153a4:	mov	r2, r5
   153a8:	mov	r1, #0
   153ac:	mov	r0, r6
   153b0:	bl	12050 <memset@plt>
   153b4:	ldr	r3, [r4, #32]
   153b8:	ldr	ip, [r4, #76]	; 0x4c
   153bc:	ldr	r0, [r4]
   153c0:	ldr	r2, [r3, #20]
   153c4:	ldr	r1, [r4, #16]
   153c8:	add	ip, ip, r2
   153cc:	sub	r0, r0, ip
   153d0:	ldrh	r3, [r4, #130]	; 0x82
   153d4:	asr	r0, r0, #1
   153d8:	ldr	r2, [r4, #20]
   153dc:	str	r0, [sp, #4]
   153e0:	str	r7, [sp, #8]
   153e4:	str	ip, [sp]
   153e8:	mov	r0, r4
   153ec:	bl	14f44 <flatcc_builder_create_table@@Base>
   153f0:	subs	r5, r0, #0
   153f4:	beq	15394 <flatcc_builder_end_table@@Base+0x7c>
   153f8:	ldr	r3, [r4, #32]
   153fc:	ldr	r0, [r4, #52]	; 0x34
   15400:	ldr	ip, [r4, #76]	; 0x4c
   15404:	ldr	r1, [r3, #24]
   15408:	ldr	r2, [r4, #20]
   1540c:	str	r1, [r4, #12]
   15410:	ldrh	lr, [r3, #28]
   15414:	mov	r1, #0
   15418:	strh	lr, [r4, #8]
   1541c:	ldr	lr, [r3, #16]
   15420:	add	r0, r0, lr
   15424:	str	r0, [r4, #4]
   15428:	ldr	r3, [r3, #20]
   1542c:	ldr	r0, [r4, #16]
   15430:	add	r3, ip, r3
   15434:	str	r3, [r4]
   15438:	bl	12050 <memset@plt>
   1543c:	ldr	r3, [r4, #32]
   15440:	ldr	r2, [r4, #64]	; 0x40
   15444:	ldrh	lr, [r4, #130]	; 0x82
   15448:	ldr	ip, [r3]
   1544c:	ldr	r1, [r3, #4]
   15450:	ldrh	r0, [r4, #128]	; 0x80
   15454:	sub	r2, r2, ip
   15458:	cmp	r2, r1
   1545c:	movcs	r2, r1
   15460:	cmp	r0, lr
   15464:	ldr	r0, [r4, #60]	; 0x3c
   15468:	ldr	r6, [r3, #8]
   1546c:	str	r2, [r4, #24]
   15470:	add	r2, r0, ip
   15474:	str	r2, [r4, #16]
   15478:	str	r6, [r4, #20]
   1547c:	ldr	r2, [r4, #156]	; 0x9c
   15480:	str	ip, [r4, #28]
   15484:	str	r1, [r3, #4]
   15488:	strhcc	lr, [r4, #128]	; 0x80
   1548c:	ldrh	r1, [r3, #12]
   15490:	sub	r2, r2, #1
   15494:	sub	r3, r3, #36	; 0x24
   15498:	mov	r0, r5
   1549c:	str	r2, [r4, #156]	; 0x9c
   154a0:	strh	r1, [r4, #130]	; 0x82
   154a4:	str	r3, [r4, #32]
   154a8:	add	sp, sp, #20
   154ac:	pop	{r4, r5, r6, r7, pc}
   154b0:	ldr	r3, [pc, #32]	; 154d8 <flatcc_builder_end_table@@Base+0x1c0>
   154b4:	ldr	r1, [pc, #32]	; 154dc <flatcc_builder_end_table@@Base+0x1c4>
   154b8:	ldr	r0, [pc, #32]	; 154e0 <flatcc_builder_end_table@@Base+0x1c8>
   154bc:	add	r3, pc, r3
   154c0:	ldr	r2, [pc, #28]	; 154e4 <flatcc_builder_end_table@@Base+0x1cc>
   154c4:	add	r3, r3, #800	; 0x320
   154c8:	add	r1, pc, r1
   154cc:	add	r0, pc, r0
   154d0:	bl	12080 <__assert_fail@plt>
   154d4:			; <UNDEFINED> instruction: 0x9e3779b1
   154d8:	andeq	r2, r0, r0, lsr r2
   154dc:	andeq	r2, r0, r4, ror r9
   154e0:	andeq	r2, r0, ip, asr #24
   154e4:	andeq	r0, r0, r5, lsr #10

000154e8 <flatcc_builder_create_vector@@Base>:
   154e8:	push	{r4, r5, r6, lr}
   154ec:	sub	sp, sp, #88	; 0x58
   154f0:	ldr	lr, [pc, #320]	; 15638 <flatcc_builder_create_vector@@Base+0x150>
   154f4:	ldr	ip, [sp, #108]	; 0x6c
   154f8:	mov	r4, r0
   154fc:	cmp	r2, ip
   15500:	add	lr, pc, lr
   15504:	ldrh	r0, [sp, #104]	; 0x68
   15508:	bhi	155ec <flatcc_builder_create_vector@@Base+0x104>
   1550c:	ldrh	ip, [r4, #128]	; 0x80
   15510:	cmp	r0, #4
   15514:	mul	r3, r3, r2
   15518:	movcc	r0, #4
   1551c:	ldr	r6, [r4, #136]	; 0x88
   15520:	cmp	ip, r0
   15524:	strhcc	r0, [r4, #128]	; 0x80
   15528:	sub	r5, r6, r3
   1552c:	sub	r0, r0, #1
   15530:	mov	ip, #4
   15534:	str	r2, [sp, #12]
   15538:	and	r0, r0, r5
   1553c:	add	r2, sp, #12
   15540:	mov	r5, #1
   15544:	cmp	r3, #0
   15548:	str	ip, [sp, #16]
   1554c:	str	ip, [sp, #28]
   15550:	str	r2, [sp, #24]
   15554:	str	r5, [sp, #20]
   15558:	bne	155d0 <flatcc_builder_create_vector@@Base+0xe8>
   1555c:	cmp	r0, #0
   15560:	beq	15590 <flatcc_builder_create_vector@@Base+0xa8>
   15564:	ldr	r3, [sp, #20]
   15568:	ldr	r2, [pc, #204]	; 1563c <flatcc_builder_create_vector@@Base+0x154>
   1556c:	add	r3, r3, #1
   15570:	add	ip, ip, r0
   15574:	str	ip, [sp, #16]
   15578:	ldr	r1, [lr, r2]
   1557c:	add	r2, sp, #88	; 0x58
   15580:	add	r2, r2, r3, lsl #3
   15584:	str	r3, [sp, #20]
   15588:	str	r1, [r2, #-72]	; 0xffffffb8
   1558c:	str	r0, [r2, #-68]	; 0xffffffbc
   15590:	sub	r5, r6, ip
   15594:	cmp	r6, r5
   15598:	ble	15634 <flatcc_builder_create_vector@@Base+0x14c>
   1559c:	ldr	r0, [r4, #36]	; 0x24
   155a0:	ldr	r2, [sp, #20]
   155a4:	str	ip, [sp]
   155a8:	mov	r3, r5
   155ac:	ldr	r6, [r4, #44]	; 0x2c
   155b0:	add	r1, sp, #24
   155b4:	blx	r6
   155b8:	cmp	r0, #0
   155bc:	bne	15610 <flatcc_builder_create_vector@@Base+0x128>
   155c0:	mov	r0, r5
   155c4:	str	r5, [r4, #136]	; 0x88
   155c8:	add	sp, sp, #88	; 0x58
   155cc:	pop	{r4, r5, r6, pc}
   155d0:	add	ip, r3, ip
   155d4:	mov	r2, #2
   155d8:	str	r1, [sp, #32]
   155dc:	str	r3, [sp, #36]	; 0x24
   155e0:	str	ip, [sp, #16]
   155e4:	str	r2, [sp, #20]
   155e8:	b	1555c <flatcc_builder_create_vector@@Base+0x74>
   155ec:	ldr	r3, [pc, #76]	; 15640 <flatcc_builder_create_vector@@Base+0x158>
   155f0:	ldr	r1, [pc, #76]	; 15644 <flatcc_builder_create_vector@@Base+0x15c>
   155f4:	ldr	r0, [pc, #76]	; 15648 <flatcc_builder_create_vector@@Base+0x160>
   155f8:	add	r3, pc, r3
   155fc:	ldr	r2, [pc, #72]	; 1564c <flatcc_builder_create_vector@@Base+0x164>
   15600:	add	r3, r3, #828	; 0x33c
   15604:	add	r1, pc, r1
   15608:	add	r0, pc, r0
   1560c:	bl	12080 <__assert_fail@plt>
   15610:	ldr	r3, [pc, #56]	; 15650 <flatcc_builder_create_vector@@Base+0x168>
   15614:	ldr	r1, [pc, #56]	; 15654 <flatcc_builder_create_vector@@Base+0x16c>
   15618:	ldr	r0, [pc, #56]	; 15658 <flatcc_builder_create_vector@@Base+0x170>
   1561c:	add	r3, pc, r3
   15620:	ldr	r2, [pc, #52]	; 1565c <flatcc_builder_create_vector@@Base+0x174>
   15624:	add	r3, r3, #28
   15628:	add	r1, pc, r1
   1562c:	add	r0, pc, r0
   15630:	bl	12080 <__assert_fail@plt>
   15634:	bl	120f4 <__assert_fail@plt+0x74>
   15638:	strdeq	r3, [r1], -r8
   1563c:	andeq	r0, r0, r4, asr r0
   15640:	strdeq	r2, [r0], -r4
   15644:	andeq	r2, r0, r8, lsr r8
   15648:	andeq	r2, r0, ip, lsr fp
   1564c:	andeq	r0, r0, r5, asr r5
   15650:	ldrdeq	r2, [r0], -r0
   15654:	andeq	r2, r0, r4, lsl r8
   15658:	muleq	r0, r8, r8
   1565c:	andeq	r0, r0, fp, lsl #5

00015660 <flatcc_builder_end_vector@@Base>:
   15660:	ldr	r1, [r0, #32]
   15664:	push	{r4, r5, r6, lr}
   15668:	sub	sp, sp, #8
   1566c:	ldrh	r3, [r1, #14]
   15670:	cmp	r3, #4
   15674:	bne	15728 <flatcc_builder_end_vector@@Base+0xc8>
   15678:	ldrh	lr, [r0, #130]	; 0x82
   1567c:	ldr	ip, [r1, #24]
   15680:	ldr	r3, [r1, #16]
   15684:	ldr	r2, [r1, #20]
   15688:	ldr	r1, [r0, #16]
   1568c:	str	lr, [sp]
   15690:	str	ip, [sp, #4]
   15694:	mov	r4, r0
   15698:	bl	154e8 <flatcc_builder_create_vector@@Base>
   1569c:	subs	r5, r0, #0
   156a0:	beq	1571c <flatcc_builder_end_vector@@Base+0xbc>
   156a4:	ldr	r2, [r4, #20]
   156a8:	mov	r1, #0
   156ac:	ldr	r0, [r4, #16]
   156b0:	bl	12050 <memset@plt>
   156b4:	ldr	r3, [r4, #32]
   156b8:	ldr	r2, [r4, #64]	; 0x40
   156bc:	ldrh	lr, [r4, #130]	; 0x82
   156c0:	ldr	ip, [r3]
   156c4:	ldr	r1, [r3, #4]
   156c8:	ldrh	r0, [r4, #128]	; 0x80
   156cc:	sub	r2, r2, ip
   156d0:	cmp	r2, r1
   156d4:	movcs	r2, r1
   156d8:	cmp	r0, lr
   156dc:	ldr	r0, [r4, #60]	; 0x3c
   156e0:	ldr	r6, [r3, #8]
   156e4:	str	r2, [r4, #24]
   156e8:	add	r2, r0, ip
   156ec:	str	r2, [r4, #16]
   156f0:	str	r6, [r4, #20]
   156f4:	ldr	r2, [r4, #156]	; 0x9c
   156f8:	str	ip, [r4, #28]
   156fc:	str	r1, [r3, #4]
   15700:	strhcc	lr, [r4, #128]	; 0x80
   15704:	ldrh	r1, [r3, #12]
   15708:	sub	r2, r2, #1
   1570c:	sub	r3, r3, #36	; 0x24
   15710:	str	r2, [r4, #156]	; 0x9c
   15714:	strh	r1, [r4, #130]	; 0x82
   15718:	str	r3, [r4, #32]
   1571c:	mov	r0, r5
   15720:	add	sp, sp, #8
   15724:	pop	{r4, r5, r6, pc}
   15728:	ldr	r3, [pc, #28]	; 1574c <flatcc_builder_end_vector@@Base+0xec>
   1572c:	ldr	r1, [pc, #28]	; 15750 <flatcc_builder_end_vector@@Base+0xf0>
   15730:	ldr	r0, [pc, #28]	; 15754 <flatcc_builder_end_vector@@Base+0xf4>
   15734:	add	r3, pc, r3
   15738:	ldr	r2, [pc, #24]	; 15758 <flatcc_builder_end_vector@@Base+0xf8>
   1573c:	add	r3, r3, #860	; 0x35c
   15740:	add	r1, pc, r1
   15744:	add	r0, pc, r0
   15748:	bl	12080 <__assert_fail@plt>
   1574c:			; <UNDEFINED> instruction: 0x00001fb8
   15750:	strdeq	r2, [r0], -ip
   15754:	andeq	r2, r0, r8, asr #16
   15758:	andeq	r0, r0, r8, ror r5

0001575c <flatcc_builder_vector_count@@Base>:
   1575c:	ldr	r3, [r0, #32]
   15760:	ldr	r0, [r3, #20]
   15764:	bx	lr

00015768 <flatcc_builder_vector_edit@@Base>:
   15768:	ldr	r0, [r0, #16]
   1576c:	bx	lr

00015770 <flatcc_builder_create_offset_vector_direct@@Base>:
   15770:	cmn	r2, #-1073741823	; 0xc0000001
   15774:	bls	15780 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   15778:	mov	r0, #0
   1577c:	bx	lr
   15780:	mov	r3, #0
   15784:	b	12ec0 <flatcc_builder_default_alloc@@Base+0x350>

00015788 <flatcc_builder_end_offset_vector@@Base>:
   15788:	ldr	r3, [r0, #32]
   1578c:	push	{r4, r5, r6, lr}
   15790:	ldrh	r2, [r3, #14]
   15794:	cmp	r2, #5
   15798:	bne	15834 <flatcc_builder_end_offset_vector@@Base+0xac>
   1579c:	ldr	r2, [r3, #20]
   157a0:	ldr	r1, [r0, #16]
   157a4:	mov	r4, r0
   157a8:	bl	15770 <flatcc_builder_create_offset_vector_direct@@Base>
   157ac:	subs	r5, r0, #0
   157b0:	beq	1582c <flatcc_builder_end_offset_vector@@Base+0xa4>
   157b4:	ldr	r2, [r4, #20]
   157b8:	mov	r1, #0
   157bc:	ldr	r0, [r4, #16]
   157c0:	bl	12050 <memset@plt>
   157c4:	ldr	r3, [r4, #32]
   157c8:	ldr	r2, [r4, #64]	; 0x40
   157cc:	ldrh	lr, [r4, #130]	; 0x82
   157d0:	ldr	ip, [r3]
   157d4:	ldr	r1, [r3, #4]
   157d8:	ldrh	r0, [r4, #128]	; 0x80
   157dc:	sub	r2, r2, ip
   157e0:	cmp	r2, r1
   157e4:	movcs	r2, r1
   157e8:	cmp	r0, lr
   157ec:	ldr	r0, [r4, #60]	; 0x3c
   157f0:	ldr	r6, [r3, #8]
   157f4:	str	r2, [r4, #24]
   157f8:	add	r2, r0, ip
   157fc:	str	r2, [r4, #16]
   15800:	str	r6, [r4, #20]
   15804:	ldr	r2, [r4, #156]	; 0x9c
   15808:	str	ip, [r4, #28]
   1580c:	str	r1, [r3, #4]
   15810:	strhcc	lr, [r4, #128]	; 0x80
   15814:	ldrh	r1, [r3, #12]
   15818:	sub	r2, r2, #1
   1581c:	sub	r3, r3, #36	; 0x24
   15820:	str	r2, [r4, #156]	; 0x9c
   15824:	strh	r1, [r4, #130]	; 0x82
   15828:	str	r3, [r4, #32]
   1582c:	mov	r0, r5
   15830:	pop	{r4, r5, r6, pc}
   15834:	ldr	r3, [pc, #28]	; 15858 <flatcc_builder_end_offset_vector@@Base+0xd0>
   15838:	ldr	r1, [pc, #28]	; 1585c <flatcc_builder_end_offset_vector@@Base+0xd4>
   1583c:	ldr	r0, [pc, #28]	; 15860 <flatcc_builder_end_offset_vector@@Base+0xd8>
   15840:	add	r3, pc, r3
   15844:	ldr	r2, [pc, #24]	; 15864 <flatcc_builder_end_offset_vector@@Base+0xdc>
   15848:	add	r3, r3, #888	; 0x378
   1584c:	add	r1, pc, r1
   15850:	add	r0, pc, r0
   15854:	bl	12080 <__assert_fail@plt>
   15858:	andeq	r1, r0, ip, lsr #29
   1585c:	strdeq	r2, [r0], -r0
   15860:	andeq	r2, r0, r8, lsr #15
   15864:	andeq	r0, r0, r8, asr #11

00015868 <flatcc_builder_create_offset_vector@@Base>:
   15868:	push	{r4, r5, r6, lr}
   1586c:	mov	r6, r1
   15870:	mov	r5, r2
   15874:	mov	r4, r0
   15878:	bl	1473c <flatcc_builder_start_offset_vector@@Base>
   1587c:	cmp	r0, #0
   15880:	beq	1588c <flatcc_builder_create_offset_vector@@Base+0x24>
   15884:	mov	r0, #0
   15888:	pop	{r4, r5, r6, pc}
   1588c:	mov	r1, r5
   15890:	mov	r0, r4
   15894:	bl	140d4 <flatcc_builder_extend_offset_vector@@Base>
   15898:	cmp	r0, #0
   1589c:	beq	15884 <flatcc_builder_create_offset_vector@@Base+0x1c>
   158a0:	lsl	r2, r5, #2
   158a4:	mov	r1, r6
   158a8:	bl	11fcc <memcpy@plt>
   158ac:	mov	r0, r4
   158b0:	pop	{r4, r5, r6, lr}
   158b4:	b	15788 <flatcc_builder_end_offset_vector@@Base>

000158b8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   158b8:	ldr	r2, [r0, #32]
   158bc:	push	{r4, r5, r6, lr}
   158c0:	ldrh	ip, [r2, #14]
   158c4:	cmp	ip, #5
   158c8:	bne	1597c <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   158cc:	ldr	r2, [r2, #20]
   158d0:	cmn	r2, #-1073741823	; 0xc0000001
   158d4:	bls	158e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   158d8:	mov	r5, #0
   158dc:	mov	r0, r5
   158e0:	pop	{r4, r5, r6, pc}
   158e4:	mov	r3, r1
   158e8:	ldr	r1, [r0, #16]
   158ec:	mov	r4, r0
   158f0:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x350>
   158f4:	subs	r5, r0, #0
   158f8:	beq	158d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   158fc:	ldr	r2, [r4, #20]
   15900:	mov	r1, #0
   15904:	ldr	r0, [r4, #16]
   15908:	bl	12050 <memset@plt>
   1590c:	ldr	r3, [r4, #32]
   15910:	ldr	r2, [r4, #64]	; 0x40
   15914:	ldrh	lr, [r4, #130]	; 0x82
   15918:	ldr	ip, [r3]
   1591c:	ldr	r1, [r3, #4]
   15920:	ldrh	r0, [r4, #128]	; 0x80
   15924:	sub	r2, r2, ip
   15928:	cmp	r2, r1
   1592c:	movcs	r2, r1
   15930:	cmp	r0, lr
   15934:	ldr	r0, [r4, #60]	; 0x3c
   15938:	ldr	r6, [r3, #8]
   1593c:	str	r2, [r4, #24]
   15940:	add	r2, r0, ip
   15944:	str	r2, [r4, #16]
   15948:	str	r6, [r4, #20]
   1594c:	ldr	r2, [r4, #156]	; 0x9c
   15950:	str	ip, [r4, #28]
   15954:	str	r1, [r3, #4]
   15958:	strhcc	lr, [r4, #128]	; 0x80
   1595c:	ldrh	r1, [r3, #12]
   15960:	sub	r2, r2, #1
   15964:	sub	r3, r3, #36	; 0x24
   15968:	str	r2, [r4, #156]	; 0x9c
   1596c:	strh	r1, [r4, #130]	; 0x82
   15970:	str	r3, [r4, #32]
   15974:	mov	r0, r5
   15978:	pop	{r4, r5, r6, pc}
   1597c:	ldr	r3, [pc, #28]	; 159a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   15980:	ldr	r1, [pc, #28]	; 159a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   15984:	ldr	r0, [pc, #28]	; 159a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   15988:	add	r3, pc, r3
   1598c:	ldr	r2, [pc, #24]	; 159ac <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   15990:	add	r3, r3, #924	; 0x39c
   15994:	add	r1, pc, r1
   15998:	add	r0, pc, r0
   1599c:	bl	12080 <__assert_fail@plt>
   159a0:	andeq	r1, r0, r4, ror #26
   159a4:	andeq	r2, r0, r8, lsr #9
   159a8:	andeq	r2, r0, r0, ror #12
   159ac:	ldrdeq	r0, [r0], -r5

000159b0 <flatcc_builder_offset_vector_edit@@Base>:
   159b0:	ldr	r0, [r0, #16]
   159b4:	bx	lr

000159b8 <flatcc_builder_offset_vector_count@@Base>:
   159b8:	ldr	r3, [r0, #32]
   159bc:	ldr	r0, [r3, #20]
   159c0:	bx	lr

000159c4 <flatcc_builder_create_union_vector_direct@@Base>:
   159c4:	push	{r4, r5, r6, r7, r8, lr}
   159c8:	sub	sp, sp, #8
   159cc:	mov	r4, r0
   159d0:	ldr	r5, [sp, #32]
   159d4:	cmn	r5, #-1073741823	; 0xc0000001
   159d8:	bls	159f4 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   159dc:	mov	r3, #0
   159e0:	mov	r0, r4
   159e4:	str	r3, [r4]
   159e8:	str	r3, [r4, #4]
   159ec:	add	sp, sp, #8
   159f0:	pop	{r4, r5, r6, r7, r8, pc}
   159f4:	mov	r6, r1
   159f8:	mov	r7, r2
   159fc:	mov	r1, r3
   15a00:	mov	r0, r6
   15a04:	mov	r3, r2
   15a08:	mov	r2, r5
   15a0c:	bl	12ec0 <flatcc_builder_default_alloc@@Base+0x350>
   15a10:	subs	r8, r0, #0
   15a14:	beq	159dc <flatcc_builder_create_union_vector_direct@@Base+0x18>
   15a18:	mvn	ip, #0
   15a1c:	mov	r3, #1
   15a20:	mov	r2, r5
   15a24:	mov	r1, r7
   15a28:	mov	r0, r6
   15a2c:	stm	sp, {r3, ip}
   15a30:	bl	154e8 <flatcc_builder_create_vector@@Base>
   15a34:	stm	r4, {r0, r8}
   15a38:	mov	r0, r4
   15a3c:	add	sp, sp, #8
   15a40:	pop	{r4, r5, r6, r7, r8, pc}

00015a44 <flatcc_builder_create_union_vector@@Base>:
   15a44:	push	{r4, r5, r6, r7, r8, lr}
   15a48:	mov	r6, r0
   15a4c:	sub	sp, sp, #16
   15a50:	mov	r0, r1
   15a54:	mov	r5, r1
   15a58:	mov	r4, r2
   15a5c:	mov	r7, r3
   15a60:	bl	1473c <flatcc_builder_start_offset_vector@@Base>
   15a64:	cmp	r0, #0
   15a68:	beq	15a84 <flatcc_builder_create_union_vector@@Base+0x40>
   15a6c:	mov	r3, #0
   15a70:	mov	r0, r6
   15a74:	str	r3, [r6]
   15a78:	str	r3, [r6, #4]
   15a7c:	add	sp, sp, #16
   15a80:	pop	{r4, r5, r6, r7, r8, pc}
   15a84:	mov	r1, r7
   15a88:	mov	r0, r5
   15a8c:	bl	140d4 <flatcc_builder_extend_offset_vector@@Base>
   15a90:	cmp	r0, #0
   15a94:	beq	15a6c <flatcc_builder_create_union_vector@@Base+0x28>
   15a98:	ldr	r8, [r5, #20]
   15a9c:	ldr	r3, [r5, #24]
   15aa0:	add	r1, r7, r8
   15aa4:	cmp	r1, r3
   15aa8:	str	r1, [r5, #20]
   15aac:	bcs	15ba4 <flatcc_builder_create_union_vector@@Base+0x160>
   15ab0:	ldr	r2, [r5, #16]
   15ab4:	adds	r8, r2, r8
   15ab8:	beq	15a6c <flatcc_builder_create_union_vector@@Base+0x28>
   15abc:	mov	r0, r5
   15ac0:	bl	159b0 <flatcc_builder_offset_vector_edit@@Base>
   15ac4:	cmp	r7, #0
   15ac8:	movne	r1, r4
   15acc:	subne	lr, r8, #1
   15ad0:	mov	r3, r0
   15ad4:	addne	r2, r1, r7, lsl #3
   15ad8:	subne	ip, r0, #4
   15adc:	beq	15afc <flatcc_builder_create_union_vector@@Base+0xb8>
   15ae0:	ldrb	r4, [r1]
   15ae4:	add	r1, r1, #8
   15ae8:	strb	r4, [lr, #1]!
   15aec:	ldr	r4, [r1, #-4]
   15af0:	cmp	r2, r1
   15af4:	str	r4, [ip, #4]!
   15af8:	bne	15ae0 <flatcc_builder_create_union_vector@@Base+0x9c>
   15afc:	str	r7, [sp]
   15b00:	mov	r2, r8
   15b04:	mov	r1, r5
   15b08:	add	r0, sp, #8
   15b0c:	bl	159c4 <flatcc_builder_create_union_vector_direct@@Base>
   15b10:	ldr	r2, [r5, #20]
   15b14:	mov	r1, #0
   15b18:	ldr	r0, [r5, #16]
   15b1c:	ldr	r7, [sp, #8]
   15b20:	ldr	r4, [sp, #12]
   15b24:	bl	12050 <memset@plt>
   15b28:	ldr	r3, [r5, #32]
   15b2c:	ldr	r2, [r5, #64]	; 0x40
   15b30:	ldrh	lr, [r5, #130]	; 0x82
   15b34:	ldr	ip, [r3]
   15b38:	ldr	r1, [r3, #4]
   15b3c:	ldrh	r0, [r5, #128]	; 0x80
   15b40:	sub	r2, r2, ip
   15b44:	cmp	r2, r1
   15b48:	movcs	r2, r1
   15b4c:	cmp	r0, lr
   15b50:	ldr	r0, [r5, #60]	; 0x3c
   15b54:	ldr	r8, [r3, #8]
   15b58:	str	r2, [r5, #24]
   15b5c:	add	r2, r0, ip
   15b60:	str	r2, [r5, #16]
   15b64:	str	r8, [r5, #20]
   15b68:	ldr	r2, [r5, #156]	; 0x9c
   15b6c:	str	ip, [r5, #28]
   15b70:	str	r1, [r3, #4]
   15b74:	strhcc	lr, [r5, #128]	; 0x80
   15b78:	ldrh	r1, [r3, #12]
   15b7c:	sub	r2, r2, #1
   15b80:	sub	r3, r3, #36	; 0x24
   15b84:	mov	r0, r6
   15b88:	str	r7, [r6]
   15b8c:	str	r4, [r6, #4]
   15b90:	str	r2, [r5, #156]	; 0x9c
   15b94:	strh	r1, [r5, #130]	; 0x82
   15b98:	str	r3, [r5, #32]
   15b9c:	add	sp, sp, #16
   15ba0:	pop	{r4, r5, r6, r7, r8, pc}
   15ba4:	add	r1, r1, #1
   15ba8:	mvn	r2, #3
   15bac:	mov	r0, r5
   15bb0:	bl	12afc <emit_test@@Base+0x5f4>
   15bb4:	cmp	r0, #0
   15bb8:	beq	15ab0 <flatcc_builder_create_union_vector@@Base+0x6c>
   15bbc:	b	15a6c <flatcc_builder_create_union_vector@@Base+0x28>

00015bc0 <flatcc_builder_start_union_vector@@Base>:
   15bc0:	push	{r4, lr}
   15bc4:	mov	r1, #4
   15bc8:	mov	r4, r0
   15bcc:	bl	12dac <flatcc_builder_default_alloc@@Base+0x23c>
   15bd0:	cmp	r0, #0
   15bd4:	bne	15c20 <flatcc_builder_start_union_vector@@Base+0x60>
   15bd8:	ldr	r3, [r4, #32]
   15bdc:	mov	r2, #8
   15be0:	mov	lr, #7
   15be4:	str	r0, [r3, #20]
   15be8:	str	r2, [r3, #16]
   15bec:	ldr	ip, [r4, #28]
   15bf0:	ldr	r2, [r4, #64]	; 0x40
   15bf4:	ldr	r1, [r4, #60]	; 0x3c
   15bf8:	sub	r2, r2, ip
   15bfc:	cmn	r2, #4
   15c00:	mvnhi	r2, #3
   15c04:	strh	lr, [r3, #14]
   15c08:	add	r1, r1, ip
   15c0c:	str	r2, [r4, #24]
   15c10:	mvn	r2, #3
   15c14:	str	r1, [r4, #16]
   15c18:	str	r2, [r3, #4]
   15c1c:	pop	{r4, pc}
   15c20:	mvn	r0, #0
   15c24:	pop	{r4, pc}

00015c28 <flatcc_builder_union_vector_edit@@Base>:
   15c28:	ldr	r0, [r0, #16]
   15c2c:	bx	lr

00015c30 <flatcc_builder_union_vector_count@@Base>:
   15c30:	ldr	r3, [r0, #32]
   15c34:	ldr	r0, [r3, #20]
   15c38:	bx	lr

00015c3c <flatcc_builder_end_union_vector@@Base>:
   15c3c:	ldr	r3, [r1, #32]
   15c40:	push	{r4, r5, r6, r7, r8, lr}
   15c44:	sub	sp, sp, #16
   15c48:	ldrh	r3, [r3, #14]
   15c4c:	cmp	r3, #7
   15c50:	bne	15da8 <flatcc_builder_end_union_vector@@Base+0x16c>
   15c54:	mov	r5, r0
   15c58:	mov	r0, r1
   15c5c:	mov	r4, r1
   15c60:	bl	15c30 <flatcc_builder_union_vector_count@@Base>
   15c64:	ldr	r8, [r4, #20]
   15c68:	ldr	r3, [r4, #24]
   15c6c:	lsl	r7, r0, #2
   15c70:	add	r1, r7, r0
   15c74:	add	r1, r1, r8
   15c78:	cmp	r1, r3
   15c7c:	mov	r6, r0
   15c80:	str	r1, [r4, #20]
   15c84:	bcs	15d78 <flatcc_builder_end_union_vector@@Base+0x13c>
   15c88:	ldr	r3, [r4, #16]
   15c8c:	adds	r8, r3, r8
   15c90:	beq	15d90 <flatcc_builder_end_union_vector@@Base+0x154>
   15c94:	mov	r0, r4
   15c98:	bl	15c28 <flatcc_builder_union_vector_edit@@Base>
   15c9c:	cmp	r6, #0
   15ca0:	add	r2, r8, r7
   15ca4:	subne	ip, r2, #1
   15ca8:	subne	r1, r8, #4
   15cac:	addne	r7, r0, r6, lsl #3
   15cb0:	beq	15cd0 <flatcc_builder_end_union_vector@@Base+0x94>
   15cb4:	ldrb	lr, [r0]
   15cb8:	add	r0, r0, #8
   15cbc:	strb	lr, [ip, #1]!
   15cc0:	ldr	lr, [r0, #-4]
   15cc4:	cmp	r0, r7
   15cc8:	str	lr, [r1, #4]!
   15ccc:	bne	15cb4 <flatcc_builder_end_union_vector@@Base+0x78>
   15cd0:	mov	r3, r8
   15cd4:	str	r6, [sp]
   15cd8:	mov	r1, r4
   15cdc:	add	r0, sp, #8
   15ce0:	bl	159c4 <flatcc_builder_create_union_vector_direct@@Base>
   15ce4:	ldr	r2, [r4, #20]
   15ce8:	mov	r1, #0
   15cec:	ldr	r0, [r4, #16]
   15cf0:	ldr	r7, [sp, #8]
   15cf4:	ldr	r6, [sp, #12]
   15cf8:	bl	12050 <memset@plt>
   15cfc:	ldr	r3, [r4, #32]
   15d00:	ldr	r2, [r4, #64]	; 0x40
   15d04:	ldrh	lr, [r4, #130]	; 0x82
   15d08:	ldr	ip, [r3]
   15d0c:	ldr	r1, [r3, #4]
   15d10:	ldrh	r0, [r4, #128]	; 0x80
   15d14:	sub	r2, r2, ip
   15d18:	cmp	r2, r1
   15d1c:	movcs	r2, r1
   15d20:	cmp	r0, lr
   15d24:	ldr	r0, [r4, #60]	; 0x3c
   15d28:	ldr	r8, [r3, #8]
   15d2c:	str	r2, [r4, #24]
   15d30:	add	r2, r0, ip
   15d34:	str	r2, [r4, #16]
   15d38:	str	r8, [r4, #20]
   15d3c:	ldr	r2, [r4, #156]	; 0x9c
   15d40:	str	ip, [r4, #28]
   15d44:	str	r1, [r3, #4]
   15d48:	strhcc	lr, [r4, #128]	; 0x80
   15d4c:	ldrh	r1, [r3, #12]
   15d50:	sub	r2, r2, #1
   15d54:	sub	r3, r3, #36	; 0x24
   15d58:	mov	r0, r5
   15d5c:	str	r7, [r5]
   15d60:	str	r6, [r5, #4]
   15d64:	str	r2, [r4, #156]	; 0x9c
   15d68:	strh	r1, [r4, #130]	; 0x82
   15d6c:	str	r3, [r4, #32]
   15d70:	add	sp, sp, #16
   15d74:	pop	{r4, r5, r6, r7, r8, pc}
   15d78:	add	r1, r1, #1
   15d7c:	mvn	r2, #3
   15d80:	mov	r0, r4
   15d84:	bl	12afc <emit_test@@Base+0x5f4>
   15d88:	cmp	r0, #0
   15d8c:	beq	15c88 <flatcc_builder_end_union_vector@@Base+0x4c>
   15d90:	mov	r3, #0
   15d94:	mov	r0, r5
   15d98:	str	r3, [r5]
   15d9c:	str	r3, [r5, #4]
   15da0:	add	sp, sp, #16
   15da4:	pop	{r4, r5, r6, r7, r8, pc}
   15da8:	ldr	r3, [pc, #28]	; 15dcc <flatcc_builder_end_union_vector@@Base+0x190>
   15dac:	ldr	r1, [pc, #28]	; 15dd0 <flatcc_builder_end_union_vector@@Base+0x194>
   15db0:	ldr	r0, [pc, #28]	; 15dd4 <flatcc_builder_end_union_vector@@Base+0x198>
   15db4:	add	r3, pc, r3
   15db8:	ldr	r2, [pc, #24]	; 15dd8 <flatcc_builder_end_union_vector@@Base+0x19c>
   15dbc:	add	r3, r3, #968	; 0x3c8
   15dc0:	add	r1, pc, r1
   15dc4:	add	r0, pc, r0
   15dc8:	bl	12080 <__assert_fail@plt>
   15dcc:	andeq	r1, r0, r8, lsr r9
   15dd0:	andeq	r2, r0, ip, ror r0
   15dd4:	muleq	r0, r4, r3
   15dd8:	andeq	r0, r0, r1, asr r6

00015ddc <flatcc_builder_extend_union_vector@@Base>:
   15ddc:	ldr	ip, [r0, #32]
   15de0:	push	{r4, r5, r6, lr}
   15de4:	ldr	r3, [ip, #20]
   15de8:	adds	r2, r1, r3
   15dec:	movcs	r3, #1
   15df0:	movcc	r3, #0
   15df4:	cmn	r2, #-536870911	; 0xe0000001
   15df8:	movls	r4, #0
   15dfc:	movhi	r4, #1
   15e00:	orrs	r4, r3, r4
   15e04:	bne	15e50 <flatcc_builder_extend_union_vector@@Base+0x74>
   15e08:	str	r2, [ip, #20]
   15e0c:	ldr	r6, [r0, #20]
   15e10:	ldr	r3, [r0, #24]
   15e14:	add	r1, r6, r1, lsl #3
   15e18:	cmp	r1, r3
   15e1c:	mov	r5, r0
   15e20:	str	r1, [r0, #20]
   15e24:	bcs	15e34 <flatcc_builder_extend_union_vector@@Base+0x58>
   15e28:	ldr	r0, [r5, #16]
   15e2c:	add	r0, r0, r6
   15e30:	pop	{r4, r5, r6, pc}
   15e34:	add	r1, r1, #1
   15e38:	mvn	r2, #3
   15e3c:	bl	12afc <emit_test@@Base+0x5f4>
   15e40:	cmp	r0, #0
   15e44:	beq	15e28 <flatcc_builder_extend_union_vector@@Base+0x4c>
   15e48:	mov	r0, r4
   15e4c:	pop	{r4, r5, r6, pc}
   15e50:	bl	1212c <__assert_fail@plt+0xac>

00015e54 <flatcc_builder_truncate_union_vector@@Base>:
   15e54:	ldr	r3, [r0, #32]
   15e58:	push	{r4, lr}
   15e5c:	ldrh	r2, [r3, #14]
   15e60:	cmp	r2, #7
   15e64:	bne	15ea8 <flatcc_builder_truncate_union_vector@@Base+0x54>
   15e68:	ldr	ip, [r3, #20]
   15e6c:	cmp	ip, r1
   15e70:	bcc	15ecc <flatcc_builder_truncate_union_vector@@Base+0x78>
   15e74:	ldr	r2, [r3, #16]
   15e78:	sub	ip, ip, r1
   15e7c:	str	ip, [r3, #20]
   15e80:	mul	r2, r2, r1
   15e84:	ldr	r3, [r0, #20]
   15e88:	ldr	r1, [r0, #16]
   15e8c:	sub	r3, r3, r2
   15e90:	str	r3, [r0, #20]
   15e94:	add	r0, r1, r3
   15e98:	mov	r1, #0
   15e9c:	bl	12050 <memset@plt>
   15ea0:	mov	r0, #0
   15ea4:	pop	{r4, pc}
   15ea8:	ldr	r3, [pc, #64]	; 15ef0 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   15eac:	ldr	r1, [pc, #64]	; 15ef4 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   15eb0:	ldr	r0, [pc, #64]	; 15ef8 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   15eb4:	add	r3, pc, r3
   15eb8:	ldr	r2, [pc, #60]	; 15efc <flatcc_builder_truncate_union_vector@@Base+0xa8>
   15ebc:	add	r3, r3, #1000	; 0x3e8
   15ec0:	add	r1, pc, r1
   15ec4:	add	r0, pc, r0
   15ec8:	bl	12080 <__assert_fail@plt>
   15ecc:	ldr	r3, [pc, #44]	; 15f00 <flatcc_builder_truncate_union_vector@@Base+0xac>
   15ed0:	ldr	r1, [pc, #44]	; 15f04 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   15ed4:	ldr	r0, [pc, #44]	; 15f08 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   15ed8:	add	r3, pc, r3
   15edc:	ldr	r2, [pc, #40]	; 15f0c <flatcc_builder_truncate_union_vector@@Base+0xb8>
   15ee0:	add	r3, r3, #1000	; 0x3e8
   15ee4:	add	r1, pc, r1
   15ee8:	add	r0, pc, r0
   15eec:	bl	12080 <__assert_fail@plt>
   15ef0:	andeq	r1, r0, r8, lsr r8
   15ef4:	andeq	r1, r0, ip, ror pc
   15ef8:	muleq	r0, r4, r2
   15efc:	andeq	r0, r0, r1, lsl #13
   15f00:	andeq	r1, r0, r4, lsl r8
   15f04:	andeq	r1, r0, r8, asr pc
   15f08:	muleq	r0, r4, r1
   15f0c:	andeq	r0, r0, r2, lsl #13

00015f10 <flatcc_builder_union_vector_push@@Base>:
   15f10:	ldr	ip, [r0, #32]
   15f14:	push	{r4, r5, r6, lr}
   15f18:	sub	sp, sp, #8
   15f1c:	ldrh	r3, [ip, #14]
   15f20:	stm	sp, {r1, r2}
   15f24:	cmp	r3, #7
   15f28:	bne	15fa8 <flatcc_builder_union_vector_push@@Base+0x98>
   15f2c:	ldr	r3, [ip, #20]
   15f30:	cmn	r3, #-536870911	; 0xe0000001
   15f34:	beq	15f98 <flatcc_builder_union_vector_push@@Base+0x88>
   15f38:	add	r3, r3, #1
   15f3c:	str	r3, [ip, #20]
   15f40:	ldr	r6, [r0, #20]
   15f44:	ldr	r2, [r0, #24]
   15f48:	add	r3, r6, #8
   15f4c:	cmp	r3, r2
   15f50:	mov	r4, r0
   15f54:	mov	r5, sp
   15f58:	str	r3, [r0, #20]
   15f5c:	bcs	15f84 <flatcc_builder_union_vector_push@@Base+0x74>
   15f60:	ldr	r3, [r4, #16]
   15f64:	adds	r3, r3, r6
   15f68:	beq	15fcc <flatcc_builder_union_vector_push@@Base+0xbc>
   15f6c:	ldm	r5, {r0, r1}
   15f70:	mov	r2, r3
   15f74:	stm	r3, {r0, r1}
   15f78:	mov	r0, r2
   15f7c:	add	sp, sp, #8
   15f80:	pop	{r4, r5, r6, pc}
   15f84:	mvn	r2, #3
   15f88:	add	r1, r6, #9
   15f8c:	bl	12afc <emit_test@@Base+0x5f4>
   15f90:	cmp	r0, #0
   15f94:	beq	15f60 <flatcc_builder_union_vector_push@@Base+0x50>
   15f98:	mov	r2, #0
   15f9c:	mov	r0, r2
   15fa0:	add	sp, sp, #8
   15fa4:	pop	{r4, r5, r6, pc}
   15fa8:	ldr	r3, [pc, #36]	; 15fd4 <flatcc_builder_union_vector_push@@Base+0xc4>
   15fac:	ldr	r1, [pc, #36]	; 15fd8 <flatcc_builder_union_vector_push@@Base+0xc8>
   15fb0:	ldr	r0, [pc, #36]	; 15fdc <flatcc_builder_union_vector_push@@Base+0xcc>
   15fb4:	add	r3, pc, r3
   15fb8:	ldr	r2, [pc, #32]	; 15fe0 <flatcc_builder_union_vector_push@@Base+0xd0>
   15fbc:	add	r3, r3, #1040	; 0x410
   15fc0:	add	r1, pc, r1
   15fc4:	add	r0, pc, r0
   15fc8:	bl	12080 <__assert_fail@plt>
   15fcc:	mov	r2, r3
   15fd0:	b	15f78 <flatcc_builder_union_vector_push@@Base+0x68>
   15fd4:	andeq	r1, r0, r8, lsr r7
   15fd8:	andeq	r1, r0, ip, ror lr
   15fdc:	muleq	r0, r4, r1
   15fe0:	andeq	r0, r0, sp, lsl #13

00015fe4 <flatcc_builder_append_union_vector@@Base>:
   15fe4:	ldr	ip, [r0, #32]
   15fe8:	push	{r4, r5, r6, r7, r8, lr}
   15fec:	ldrh	r3, [ip, #14]
   15ff0:	cmp	r3, #7
   15ff4:	bne	1608c <flatcc_builder_append_union_vector@@Base+0xa8>
   15ff8:	mov	r6, r1
   15ffc:	ldr	r1, [ip, #20]
   16000:	adds	r1, r2, r1
   16004:	movcs	lr, #1
   16008:	movcc	lr, #0
   1600c:	cmn	r1, #-536870911	; 0xe0000001
   16010:	movls	r3, #0
   16014:	movhi	r3, #1
   16018:	orrs	r8, lr, r3
   1601c:	bne	16088 <flatcc_builder_append_union_vector@@Base+0xa4>
   16020:	str	r1, [ip, #20]
   16024:	ldr	r7, [r0, #20]
   16028:	lsl	r4, r2, #3
   1602c:	ldr	r3, [r0, #24]
   16030:	add	r1, r4, r7
   16034:	cmp	r1, r3
   16038:	mov	r5, r0
   1603c:	str	r1, [r0, #20]
   16040:	bcs	1606c <flatcc_builder_append_union_vector@@Base+0x88>
   16044:	ldr	r3, [r5, #16]
   16048:	adds	r3, r3, r7
   1604c:	beq	16064 <flatcc_builder_append_union_vector@@Base+0x80>
   16050:	mov	r0, r3
   16054:	mov	r2, r4
   16058:	mov	r1, r6
   1605c:	bl	11fcc <memcpy@plt>
   16060:	mov	r3, r0
   16064:	mov	r0, r3
   16068:	pop	{r4, r5, r6, r7, r8, pc}
   1606c:	add	r1, r1, #1
   16070:	mvn	r2, #3
   16074:	bl	12afc <emit_test@@Base+0x5f4>
   16078:	cmp	r0, #0
   1607c:	beq	16044 <flatcc_builder_append_union_vector@@Base+0x60>
   16080:	mov	r3, r8
   16084:	b	16064 <flatcc_builder_append_union_vector@@Base+0x80>
   16088:	bl	1212c <__assert_fail@plt+0xac>
   1608c:	ldr	r3, [pc, #32]	; 160b4 <flatcc_builder_append_union_vector@@Base+0xd0>
   16090:	ldr	r1, [pc, #32]	; 160b8 <flatcc_builder_append_union_vector@@Base+0xd4>
   16094:	add	r3, pc, r3
   16098:	ldr	r0, [pc, #28]	; 160bc <flatcc_builder_append_union_vector@@Base+0xd8>
   1609c:	add	r3, r3, #1072	; 0x430
   160a0:	ldr	r2, [pc, #24]	; 160c0 <flatcc_builder_append_union_vector@@Base+0xdc>
   160a4:	add	r3, r3, #4
   160a8:	add	r1, pc, r1
   160ac:	add	r0, pc, r0
   160b0:	bl	12080 <__assert_fail@plt>
   160b4:	andeq	r1, r0, r8, asr r6
   160b8:	muleq	r0, r4, sp
   160bc:	andeq	r2, r0, ip, lsr #1
   160c0:	muleq	r0, ip, r6

000160c4 <flatcc_builder_create_string@@Base>:
   160c4:	push	{r4, r5, r6, lr}
   160c8:	sub	sp, sp, #88	; 0x58
   160cc:	ldr	lr, [r0, #136]	; 0x88
   160d0:	mov	r4, r0
   160d4:	add	r0, sp, #88	; 0x58
   160d8:	cmp	r2, #0
   160dc:	sub	r3, lr, r2
   160e0:	str	r2, [r0, #-76]!	; 0xffffffb4
   160e4:	sub	r3, r3, #1
   160e8:	str	r0, [sp, #24]
   160ec:	ldr	r5, [pc, #188]	; 161b0 <flatcc_builder_create_string@@Base+0xec>
   160f0:	moveq	r0, #1
   160f4:	strne	r1, [sp, #32]
   160f8:	mov	ip, #4
   160fc:	moveq	r1, r0
   16100:	movne	r1, #2
   16104:	and	r3, r3, #3
   16108:	ldr	r0, [pc, #164]	; 161b4 <flatcc_builder_create_string@@Base+0xf0>
   1610c:	str	ip, [sp, #28]
   16110:	add	r5, pc, r5
   16114:	addne	ip, r2, ip
   16118:	add	r3, r3, #1
   1611c:	add	r1, r1, #1
   16120:	add	ip, ip, r3
   16124:	add	r6, sp, #88	; 0x58
   16128:	strne	r2, [sp, #36]	; 0x24
   1612c:	add	r1, r6, r1, lsl #3
   16130:	str	ip, [sp, #16]
   16134:	ldr	r0, [r5, r0]
   16138:	sub	r5, lr, ip
   1613c:	movne	r2, #3
   16140:	moveq	r2, #2
   16144:	cmp	lr, r5
   16148:	str	r0, [r1, #-72]	; 0xffffffb8
   1614c:	str	r3, [r1, #-68]	; 0xffffffbc
   16150:	str	r2, [sp, #20]
   16154:	ble	16188 <flatcc_builder_create_string@@Base+0xc4>
   16158:	ldr	r0, [r4, #36]	; 0x24
   1615c:	mov	r3, r5
   16160:	str	ip, [sp]
   16164:	add	r1, sp, #24
   16168:	ldr	r6, [r4, #44]	; 0x2c
   1616c:	blx	r6
   16170:	cmp	r0, #0
   16174:	bne	1618c <flatcc_builder_create_string@@Base+0xc8>
   16178:	mov	r0, r5
   1617c:	str	r5, [r4, #136]	; 0x88
   16180:	add	sp, sp, #88	; 0x58
   16184:	pop	{r4, r5, r6, pc}
   16188:	bl	120f4 <__assert_fail@plt+0x74>
   1618c:	ldr	r3, [pc, #36]	; 161b8 <flatcc_builder_create_string@@Base+0xf4>
   16190:	ldr	r1, [pc, #36]	; 161bc <flatcc_builder_create_string@@Base+0xf8>
   16194:	ldr	r0, [pc, #36]	; 161c0 <flatcc_builder_create_string@@Base+0xfc>
   16198:	add	r3, pc, r3
   1619c:	ldr	r2, [pc, #32]	; 161c4 <flatcc_builder_create_string@@Base+0x100>
   161a0:	add	r3, r3, #28
   161a4:	add	r1, pc, r1
   161a8:	add	r0, pc, r0
   161ac:	bl	12080 <__assert_fail@plt>
   161b0:	andeq	r2, r1, r8, ror #29
   161b4:	andeq	r0, r0, r4, asr r0
   161b8:	andeq	r1, r0, r4, asr r5
   161bc:	muleq	r0, r8, ip
   161c0:	andeq	r1, r0, ip, lsl sp
   161c4:	andeq	r0, r0, fp, lsl #5

000161c8 <flatcc_builder_create_string_str@@Base>:
   161c8:	push	{r4, r5, r6, lr}
   161cc:	mov	r5, r0
   161d0:	mov	r0, r1
   161d4:	mov	r4, r1
   161d8:	bl	1202c <strlen@plt>
   161dc:	mov	r1, r4
   161e0:	mov	r2, r0
   161e4:	mov	r0, r5
   161e8:	pop	{r4, r5, r6, lr}
   161ec:	b	160c4 <flatcc_builder_create_string@@Base>

000161f0 <flatcc_builder_create_string_strn@@Base>:
   161f0:	push	{r4, r5, r6, lr}
   161f4:	mov	r4, r1
   161f8:	mov	r6, r0
   161fc:	mov	r1, #0
   16200:	mov	r0, r4
   16204:	mov	r5, r2
   16208:	bl	1205c <memchr@plt>
   1620c:	mov	r1, r4
   16210:	cmp	r0, #0
   16214:	subne	r5, r0, r4
   16218:	mov	r2, r5
   1621c:	mov	r0, r6
   16220:	pop	{r4, r5, r6, lr}
   16224:	b	160c4 <flatcc_builder_create_string@@Base>

00016228 <flatcc_builder_end_string@@Base>:
   16228:	ldr	r3, [r0, #32]
   1622c:	push	{r4, r5, r6, lr}
   16230:	ldrh	r2, [r3, #14]
   16234:	cmp	r2, #6
   16238:	bne	16308 <flatcc_builder_end_string@@Base+0xe0>
   1623c:	ldr	r2, [r3, #20]
   16240:	ldr	r3, [r0, #20]
   16244:	mov	r4, r0
   16248:	cmp	r2, r3
   1624c:	bne	162e0 <flatcc_builder_end_string@@Base+0xb8>
   16250:	ldr	r1, [r0, #16]
   16254:	bl	160c4 <flatcc_builder_create_string@@Base>
   16258:	subs	r5, r0, #0
   1625c:	beq	162d8 <flatcc_builder_end_string@@Base+0xb0>
   16260:	ldr	r2, [r4, #20]
   16264:	mov	r1, #0
   16268:	ldr	r0, [r4, #16]
   1626c:	bl	12050 <memset@plt>
   16270:	ldr	r3, [r4, #32]
   16274:	ldr	r2, [r4, #64]	; 0x40
   16278:	ldrh	lr, [r4, #130]	; 0x82
   1627c:	ldr	ip, [r3]
   16280:	ldr	r1, [r3, #4]
   16284:	ldrh	r0, [r4, #128]	; 0x80
   16288:	sub	r2, r2, ip
   1628c:	cmp	r2, r1
   16290:	movcs	r2, r1
   16294:	cmp	r0, lr
   16298:	ldr	r0, [r4, #60]	; 0x3c
   1629c:	ldr	r6, [r3, #8]
   162a0:	str	r2, [r4, #24]
   162a4:	add	r2, r0, ip
   162a8:	str	r2, [r4, #16]
   162ac:	str	r6, [r4, #20]
   162b0:	ldr	r2, [r4, #156]	; 0x9c
   162b4:	str	ip, [r4, #28]
   162b8:	str	r1, [r3, #4]
   162bc:	strhcc	lr, [r4, #128]	; 0x80
   162c0:	ldrh	r1, [r3, #12]
   162c4:	sub	r2, r2, #1
   162c8:	sub	r3, r3, #36	; 0x24
   162cc:	str	r2, [r4, #156]	; 0x9c
   162d0:	strh	r1, [r4, #130]	; 0x82
   162d4:	str	r3, [r4, #32]
   162d8:	mov	r0, r5
   162dc:	pop	{r4, r5, r6, pc}
   162e0:	ldr	r3, [pc, #72]	; 16330 <flatcc_builder_end_string@@Base+0x108>
   162e4:	ldr	r1, [pc, #72]	; 16334 <flatcc_builder_end_string@@Base+0x10c>
   162e8:	add	r3, pc, r3
   162ec:	ldr	r0, [pc, #68]	; 16338 <flatcc_builder_end_string@@Base+0x110>
   162f0:	add	r3, r3, #1104	; 0x450
   162f4:	ldr	r2, [pc, #64]	; 1633c <flatcc_builder_end_string@@Base+0x114>
   162f8:	add	r3, r3, #8
   162fc:	add	r1, pc, r1
   16300:	add	r0, pc, r0
   16304:	bl	12080 <__assert_fail@plt>
   16308:	ldr	r3, [pc, #48]	; 16340 <flatcc_builder_end_string@@Base+0x118>
   1630c:	ldr	r1, [pc, #48]	; 16344 <flatcc_builder_end_string@@Base+0x11c>
   16310:	add	r3, pc, r3
   16314:	ldr	r0, [pc, #44]	; 16348 <flatcc_builder_end_string@@Base+0x120>
   16318:	add	r3, r3, #1104	; 0x450
   1631c:	ldr	r2, [pc, #40]	; 1634c <flatcc_builder_end_string@@Base+0x124>
   16320:	add	r3, r3, #8
   16324:	add	r1, pc, r1
   16328:	add	r0, pc, r0
   1632c:	bl	12080 <__assert_fail@plt>
   16330:	andeq	r1, r0, r4, lsl #8
   16334:	andeq	r1, r0, r0, asr #22
   16338:	andeq	r1, r0, ip, lsl #29
   1633c:	andeq	r0, r0, r5, asr #13
   16340:	ldrdeq	r1, [r0], -ip
   16344:	andeq	r1, r0, r8, lsl fp
   16348:	andeq	r1, r0, r4, lsl #26
   1634c:	andeq	r0, r0, r4, asr #13

00016350 <flatcc_builder_string_edit@@Base>:
   16350:	ldr	r0, [r0, #16]
   16354:	bx	lr

00016358 <flatcc_builder_string_len@@Base>:
   16358:	ldr	r3, [r0, #32]
   1635c:	ldr	r0, [r3, #20]
   16360:	bx	lr

00016364 <flatcc_builder_table_add@@Base>:
   16364:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16368:	mov	r4, r0
   1636c:	ldr	r0, [r0, #32]
   16370:	ldrh	r0, [r0, #14]
   16374:	cmp	r0, #3
   16378:	bne	16490 <flatcc_builder_table_add@@Base+0x12c>
   1637c:	ldr	r0, [pc, #308]	; 164b8 <flatcc_builder_table_add@@Base+0x154>
   16380:	cmp	r1, r0
   16384:	bhi	16468 <flatcc_builder_table_add@@Base+0x104>
   16388:	ldrh	r0, [r4, #130]	; 0x82
   1638c:	lsl	r8, r1, #1
   16390:	cmp	r0, r3
   16394:	ldr	r0, [r4, #4]
   16398:	strhcc	r3, [r4, #130]	; 0x82
   1639c:	add	lr, r0, r8
   163a0:	ldrh	r7, [r0, r8]
   163a4:	cmp	r7, #0
   163a8:	bne	16440 <flatcc_builder_table_add@@Base+0xdc>
   163ac:	ldr	ip, [r4, #12]
   163b0:	ldr	r9, [pc, #260]	; 164bc <flatcc_builder_table_add@@Base+0x158>
   163b4:	eor	ip, ip, r1
   163b8:	ldr	r0, [r4, #20]
   163bc:	mul	ip, r9, ip
   163c0:	sub	r6, r3, #1
   163c4:	eor	ip, ip, r2
   163c8:	rsb	r3, r3, #0
   163cc:	add	r6, r6, r0
   163d0:	and	r6, r6, r3
   163d4:	mul	ip, r9, ip
   163d8:	ldr	r3, [r4, #24]
   163dc:	add	r2, r2, r6
   163e0:	cmp	r2, r3
   163e4:	uxth	r5, r1
   163e8:	str	ip, [r4, #12]
   163ec:	str	r2, [r4, #20]
   163f0:	bcs	16418 <flatcc_builder_table_add@@Base+0xb4>
   163f4:	add	r3, r6, #4
   163f8:	strh	r3, [lr]
   163fc:	ldrh	r3, [r4, #8]
   16400:	ldr	r0, [r4, #16]
   16404:	cmp	r3, r5
   16408:	addls	r5, r5, #1
   1640c:	strhls	r5, [r4, #8]
   16410:	add	r0, r0, r6
   16414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16418:	add	r1, r2, #1
   1641c:	mov	r0, r4
   16420:	ldr	r2, [pc, #152]	; 164c0 <flatcc_builder_table_add@@Base+0x15c>
   16424:	bl	12afc <emit_test@@Base+0x5f4>
   16428:	cmp	r0, #0
   1642c:	ldreq	lr, [r4, #4]
   16430:	addeq	lr, lr, r8
   16434:	beq	163f4 <flatcc_builder_table_add@@Base+0x90>
   16438:	mov	r0, r7
   1643c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16440:	ldr	r3, [pc, #124]	; 164c4 <flatcc_builder_table_add@@Base+0x160>
   16444:	ldr	r1, [pc, #124]	; 164c8 <flatcc_builder_table_add@@Base+0x164>
   16448:	add	r3, pc, r3
   1644c:	ldr	r0, [pc, #120]	; 164cc <flatcc_builder_table_add@@Base+0x168>
   16450:	add	r3, r3, #1136	; 0x470
   16454:	ldr	r2, [pc, #116]	; 164d0 <flatcc_builder_table_add@@Base+0x16c>
   16458:	add	r3, r3, #4
   1645c:	add	r1, pc, r1
   16460:	add	r0, pc, r0
   16464:	bl	12080 <__assert_fail@plt>
   16468:	ldr	r3, [pc, #100]	; 164d4 <flatcc_builder_table_add@@Base+0x170>
   1646c:	ldr	r1, [pc, #100]	; 164d8 <flatcc_builder_table_add@@Base+0x174>
   16470:	add	r3, pc, r3
   16474:	ldr	r0, [pc, #96]	; 164dc <flatcc_builder_table_add@@Base+0x178>
   16478:	add	r3, r3, #1136	; 0x470
   1647c:	ldr	r2, [pc, #92]	; 164e0 <flatcc_builder_table_add@@Base+0x17c>
   16480:	add	r3, r3, #4
   16484:	add	r1, pc, r1
   16488:	add	r0, pc, r0
   1648c:	bl	12080 <__assert_fail@plt>
   16490:	ldr	r3, [pc, #76]	; 164e4 <flatcc_builder_table_add@@Base+0x180>
   16494:	ldr	r1, [pc, #76]	; 164e8 <flatcc_builder_table_add@@Base+0x184>
   16498:	add	r3, pc, r3
   1649c:	ldr	r0, [pc, #72]	; 164ec <flatcc_builder_table_add@@Base+0x188>
   164a0:	add	r3, r3, #1136	; 0x470
   164a4:	ldr	r2, [pc, #68]	; 164f0 <flatcc_builder_table_add@@Base+0x18c>
   164a8:	add	r3, r3, #4
   164ac:	add	r1, pc, r1
   164b0:	add	r0, pc, r0
   164b4:	bl	12080 <__assert_fail@plt>
   164b8:	strdeq	r7, [r0], -ip
   164bc:			; <UNDEFINED> instruction: 0x9e3779b1
   164c0:	strdeq	pc, [r0], -ip
   164c4:	andeq	r1, r0, r4, lsr #5
   164c8:	andeq	r1, r0, r0, ror #19
   164cc:	andeq	r1, r0, r4, ror #20
   164d0:	strdeq	r0, [r0], -r8
   164d4:	andeq	r1, r0, ip, ror r2
   164d8:			; <UNDEFINED> instruction: 0x000019b8
   164dc:	andeq	r1, r0, r8, lsr #26
   164e0:	andeq	r0, r0, lr, ror #13
   164e4:	andeq	r1, r0, r4, asr r2
   164e8:	muleq	r0, r0, r9
   164ec:	andeq	r1, r0, r8, ror #24
   164f0:	andeq	r0, r0, sp, ror #13

000164f4 <flatcc_builder_table_edit@@Base>:
   164f4:	ldr	r3, [r0, #32]
   164f8:	ldrh	r3, [r3, #14]
   164fc:	cmp	r3, #3
   16500:	bne	16518 <flatcc_builder_table_edit@@Base+0x24>
   16504:	ldr	r3, [r0, #20]
   16508:	ldr	r0, [r0, #16]
   1650c:	sub	r1, r3, r1
   16510:	add	r0, r0, r1
   16514:	bx	lr
   16518:	ldr	r3, [pc, #32]	; 16540 <flatcc_builder_table_edit@@Base+0x4c>
   1651c:	ldr	r1, [pc, #32]	; 16544 <flatcc_builder_table_edit@@Base+0x50>
   16520:	ldr	r0, [pc, #32]	; 16548 <flatcc_builder_table_edit@@Base+0x54>
   16524:	add	r3, pc, r3
   16528:	push	{r4, lr}
   1652c:	add	r3, r3, #1168	; 0x490
   16530:	ldr	r2, [pc, #20]	; 1654c <flatcc_builder_table_edit@@Base+0x58>
   16534:	add	r1, pc, r1
   16538:	add	r0, pc, r0
   1653c:	bl	12080 <__assert_fail@plt>
   16540:	andeq	r1, r0, r8, asr #3
   16544:	andeq	r1, r0, r8, lsl #18
   16548:	andeq	r1, r0, r0, ror #23
   1654c:	andeq	r0, r0, r2, lsl #14

00016550 <flatcc_builder_table_add_copy@@Base>:
   16550:	push	{r4, r5, r6, lr}
   16554:	mov	r4, r3
   16558:	mov	r6, r2
   1655c:	ldrh	r3, [sp, #16]
   16560:	mov	r2, r4
   16564:	bl	16364 <flatcc_builder_table_add@@Base>
   16568:	subs	r5, r0, #0
   1656c:	beq	1657c <flatcc_builder_table_add_copy@@Base+0x2c>
   16570:	mov	r2, r4
   16574:	mov	r1, r6
   16578:	bl	11fcc <memcpy@plt>
   1657c:	mov	r0, r5
   16580:	pop	{r4, r5, r6, pc}

00016584 <flatcc_builder_table_add_offset@@Base>:
   16584:	ldr	r3, [r0, #32]
   16588:	push	{r4, r5, r6, r7, r8, lr}
   1658c:	ldrh	r3, [r3, #14]
   16590:	cmp	r3, #3
   16594:	bne	166ac <flatcc_builder_table_add_offset@@Base+0x128>
   16598:	ldr	r3, [pc, #308]	; 166d4 <flatcc_builder_table_add_offset@@Base+0x150>
   1659c:	cmp	r1, r3
   165a0:	bhi	16684 <flatcc_builder_table_add_offset@@Base+0x100>
   165a4:	ldr	r3, [r0, #4]
   165a8:	lsl	r7, r1, #1
   165ac:	mov	r4, r0
   165b0:	ldrh	r6, [r3, r7]
   165b4:	add	ip, r3, r7
   165b8:	cmp	r6, #0
   165bc:	bne	1665c <flatcc_builder_table_add_offset@@Base+0xd8>
   165c0:	ldr	r3, [r0, #12]
   165c4:	ldr	r2, [pc, #268]	; 166d8 <flatcc_builder_table_add_offset@@Base+0x154>
   165c8:	eor	r3, r3, r1
   165cc:	ldr	r5, [r0, #20]
   165d0:	mul	r3, r2, r3
   165d4:	add	r5, r5, #3
   165d8:	eor	r3, r3, #4
   165dc:	bic	r5, r5, #3
   165e0:	mul	r3, r2, r3
   165e4:	ldr	lr, [r0, #24]
   165e8:	add	r2, r5, #4
   165ec:	cmp	r2, lr
   165f0:	uxth	r8, r1
   165f4:	str	r3, [r0, #12]
   165f8:	str	r2, [r0, #20]
   165fc:	bhi	16638 <flatcc_builder_table_add_offset@@Base+0xb4>
   16600:	uxth	r2, r5
   16604:	add	r3, r2, #4
   16608:	strh	r3, [ip]
   1660c:	ldrh	r3, [r4, #8]
   16610:	ldr	r0, [r4, #16]
   16614:	cmp	r3, r8
   16618:	ldr	r3, [r4]
   1661c:	addls	r1, r8, #1
   16620:	strhls	r1, [r4, #8]
   16624:	add	r1, r3, #2
   16628:	str	r1, [r4]
   1662c:	add	r0, r0, r5
   16630:	strh	r2, [r3]
   16634:	pop	{r4, r5, r6, r7, r8, pc}
   16638:	mov	r1, r2
   1663c:	ldr	r2, [pc, #152]	; 166dc <flatcc_builder_table_add_offset@@Base+0x158>
   16640:	bl	12afc <emit_test@@Base+0x5f4>
   16644:	cmp	r0, #0
   16648:	ldreq	ip, [r4, #4]
   1664c:	addeq	ip, ip, r7
   16650:	beq	16600 <flatcc_builder_table_add_offset@@Base+0x7c>
   16654:	mov	r0, r6
   16658:	pop	{r4, r5, r6, r7, r8, pc}
   1665c:	ldr	r3, [pc, #124]	; 166e0 <flatcc_builder_table_add_offset@@Base+0x15c>
   16660:	ldr	r1, [pc, #124]	; 166e4 <flatcc_builder_table_add_offset@@Base+0x160>
   16664:	add	r3, pc, r3
   16668:	ldr	r0, [pc, #120]	; 166e8 <flatcc_builder_table_add_offset@@Base+0x164>
   1666c:	add	r3, r3, #1184	; 0x4a0
   16670:	ldr	r2, [pc, #116]	; 166ec <flatcc_builder_table_add_offset@@Base+0x168>
   16674:	add	r3, r3, #12
   16678:	add	r1, pc, r1
   1667c:	add	r0, pc, r0
   16680:	bl	12080 <__assert_fail@plt>
   16684:	ldr	r3, [pc, #100]	; 166f0 <flatcc_builder_table_add_offset@@Base+0x16c>
   16688:	ldr	r1, [pc, #100]	; 166f4 <flatcc_builder_table_add_offset@@Base+0x170>
   1668c:	add	r3, pc, r3
   16690:	ldr	r0, [pc, #96]	; 166f8 <flatcc_builder_table_add_offset@@Base+0x174>
   16694:	add	r3, r3, #1184	; 0x4a0
   16698:	ldr	r2, [pc, #92]	; 166fc <flatcc_builder_table_add_offset@@Base+0x178>
   1669c:	add	r3, r3, #12
   166a0:	add	r1, pc, r1
   166a4:	add	r0, pc, r0
   166a8:	bl	12080 <__assert_fail@plt>
   166ac:	ldr	r3, [pc, #76]	; 16700 <flatcc_builder_table_add_offset@@Base+0x17c>
   166b0:	ldr	r1, [pc, #76]	; 16704 <flatcc_builder_table_add_offset@@Base+0x180>
   166b4:	add	r3, pc, r3
   166b8:	ldr	r0, [pc, #72]	; 16708 <flatcc_builder_table_add_offset@@Base+0x184>
   166bc:	add	r3, r3, #1184	; 0x4a0
   166c0:	ldr	r2, [pc, #68]	; 1670c <flatcc_builder_table_add_offset@@Base+0x188>
   166c4:	add	r3, r3, #12
   166c8:	add	r1, pc, r1
   166cc:	add	r0, pc, r0
   166d0:	bl	12080 <__assert_fail@plt>
   166d4:	strdeq	r7, [r0], -ip
   166d8:			; <UNDEFINED> instruction: 0x9e3779b1
   166dc:	strdeq	pc, [r0], -ip
   166e0:	andeq	r1, r0, r8, lsl #1
   166e4:	andeq	r1, r0, r4, asr #15
   166e8:	andeq	r1, r0, r8, asr #16
   166ec:	andeq	r0, r0, fp, lsl r7
   166f0:	andeq	r1, r0, r0, rrx
   166f4:	muleq	r0, ip, r7
   166f8:	andeq	r1, r0, ip, lsl #22
   166fc:	andeq	r0, r0, r4, lsl r7
   16700:	andeq	r1, r0, r8, lsr r0
   16704:	andeq	r1, r0, r4, ror r7
   16708:	andeq	r1, r0, ip, asr #20
   1670c:	andeq	r0, r0, r3, lsl r7

00016710 <flatcc_builder_table_add_union@@Base>:
   16710:	push	{r4, r5, r6, r7, lr}
   16714:	sub	sp, sp, #12
   16718:	add	ip, sp, #8
   1671c:	stmdb	ip, {r2, r3}
   16720:	ldr	r3, [r0, #32]
   16724:	ldrb	r5, [sp]
   16728:	ldr	r6, [sp, #4]
   1672c:	ldrh	r3, [r3, #14]
   16730:	cmp	r3, #3
   16734:	bne	167bc <flatcc_builder_table_add_union@@Base+0xac>
   16738:	cmp	r5, #0
   1673c:	mov	r4, r0
   16740:	mov	r7, r1
   16744:	beq	1678c <flatcc_builder_table_add_union@@Base+0x7c>
   16748:	cmp	r6, #0
   1674c:	beq	16760 <flatcc_builder_table_add_union@@Base+0x50>
   16750:	bl	16584 <flatcc_builder_table_add_offset@@Base>
   16754:	cmp	r0, #0
   16758:	strne	r6, [r0]
   1675c:	beq	1680c <flatcc_builder_table_add_union@@Base+0xfc>
   16760:	mov	r3, #1
   16764:	sub	r1, r7, #1
   16768:	mov	r0, r4
   1676c:	mov	r2, r3
   16770:	bl	16364 <flatcc_builder_table_add@@Base>
   16774:	cmp	r0, #0
   16778:	beq	167e4 <flatcc_builder_table_add_union@@Base+0xd4>
   1677c:	strb	r5, [r0]
   16780:	mov	r0, #0
   16784:	add	sp, sp, #12
   16788:	pop	{r4, r5, r6, r7, pc}
   1678c:	cmp	r6, #0
   16790:	beq	16760 <flatcc_builder_table_add_union@@Base+0x50>
   16794:	ldr	r3, [pc, #152]	; 16834 <flatcc_builder_table_add_union@@Base+0x124>
   16798:	ldr	r1, [pc, #152]	; 16838 <flatcc_builder_table_add_union@@Base+0x128>
   1679c:	add	r3, pc, r3
   167a0:	ldr	r0, [pc, #148]	; 1683c <flatcc_builder_table_add_union@@Base+0x12c>
   167a4:	add	r3, r3, #1216	; 0x4c0
   167a8:	ldr	r2, [pc, #144]	; 16840 <flatcc_builder_table_add_union@@Base+0x130>
   167ac:	add	r3, r3, #12
   167b0:	add	r1, pc, r1
   167b4:	add	r0, pc, r0
   167b8:	bl	12080 <__assert_fail@plt>
   167bc:	ldr	r3, [pc, #128]	; 16844 <flatcc_builder_table_add_union@@Base+0x134>
   167c0:	ldr	r1, [pc, #128]	; 16848 <flatcc_builder_table_add_union@@Base+0x138>
   167c4:	add	r3, pc, r3
   167c8:	ldr	r0, [pc, #124]	; 1684c <flatcc_builder_table_add_union@@Base+0x13c>
   167cc:	add	r3, r3, #1216	; 0x4c0
   167d0:	ldr	r2, [pc, #120]	; 16850 <flatcc_builder_table_add_union@@Base+0x140>
   167d4:	add	r3, r3, #12
   167d8:	add	r1, pc, r1
   167dc:	add	r0, pc, r0
   167e0:	bl	12080 <__assert_fail@plt>
   167e4:	ldr	r3, [pc, #104]	; 16854 <flatcc_builder_table_add_union@@Base+0x144>
   167e8:	ldr	r1, [pc, #104]	; 16858 <flatcc_builder_table_add_union@@Base+0x148>
   167ec:	add	r3, pc, r3
   167f0:	ldr	r0, [pc, #100]	; 1685c <flatcc_builder_table_add_union@@Base+0x14c>
   167f4:	add	r3, r3, #1216	; 0x4c0
   167f8:	ldr	r2, [pc, #96]	; 16860 <flatcc_builder_table_add_union@@Base+0x150>
   167fc:	add	r3, r3, #12
   16800:	add	r1, pc, r1
   16804:	add	r0, pc, r0
   16808:	bl	12080 <__assert_fail@plt>
   1680c:	ldr	r3, [pc, #80]	; 16864 <flatcc_builder_table_add_union@@Base+0x154>
   16810:	ldr	r1, [pc, #80]	; 16868 <flatcc_builder_table_add_union@@Base+0x158>
   16814:	add	r3, pc, r3
   16818:	ldr	r0, [pc, #76]	; 1686c <flatcc_builder_table_add_union@@Base+0x15c>
   1681c:	add	r3, r3, #1216	; 0x4c0
   16820:	ldr	r2, [pc, #72]	; 16870 <flatcc_builder_table_add_union@@Base+0x160>
   16824:	add	r3, r3, #12
   16828:	add	r1, pc, r1
   1682c:	add	r0, pc, r0
   16830:	bl	12080 <__assert_fail@plt>
   16834:	andeq	r0, r0, r0, asr pc
   16838:	andeq	r1, r0, ip, lsl #13
   1683c:	andeq	r1, r0, r0, asr #20
   16840:	andeq	r0, r0, pc, ror #11
   16844:	andeq	r0, r0, r8, lsr #30
   16848:	andeq	r1, r0, r4, ror #12
   1684c:	andeq	r1, r0, ip, lsr r9
   16850:	andeq	r0, r0, lr, ror #11
   16854:	andeq	r0, r0, r0, lsl #30
   16858:	andeq	r1, r0, ip, lsr r6
   1685c:	andeq	r1, r0, r0, lsr #20
   16860:	strdeq	r0, [r0], -r6
   16864:	ldrdeq	r0, [r0], -r8
   16868:	andeq	r1, r0, r4, lsl r6
   1686c:	andeq	r1, r0, ip, ror #19
   16870:	strdeq	r0, [r0], -r2

00016874 <flatcc_builder_table_add_union_vector@@Base>:
   16874:	push	{r4, r5, r6, r7, lr}
   16878:	sub	sp, sp, #12
   1687c:	add	ip, sp, #8
   16880:	stmdb	ip, {r2, r3}
   16884:	ldr	r3, [r0, #32]
   16888:	ldr	r4, [sp]
   1688c:	ldr	r6, [sp, #4]
   16890:	ldrh	r3, [r3, #14]
   16894:	cmp	r3, #3
   16898:	bne	1693c <flatcc_builder_table_add_union_vector@@Base+0xc8>
   1689c:	clz	r3, r6
   168a0:	clz	r2, r4
   168a4:	lsr	r3, r3, #5
   168a8:	lsr	r2, r2, #5
   168ac:	cmp	r2, r3
   168b0:	beq	168d0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   168b4:	adds	r4, r4, #0
   168b8:	movne	r4, #1
   168bc:	cmp	r4, r3
   168c0:	mvnne	r0, #0
   168c4:	beq	16964 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   168c8:	add	sp, sp, #12
   168cc:	pop	{r4, r5, r6, r7, pc}
   168d0:	cmp	r4, #0
   168d4:	moveq	r0, r4
   168d8:	beq	168c8 <flatcc_builder_table_add_union_vector@@Base+0x54>
   168dc:	mov	r7, r1
   168e0:	sub	r1, r1, #1
   168e4:	mov	r5, r0
   168e8:	bl	16584 <flatcc_builder_table_add_offset@@Base>
   168ec:	cmp	r0, #0
   168f0:	beq	1698c <flatcc_builder_table_add_union_vector@@Base+0x118>
   168f4:	str	r4, [r0]
   168f8:	mov	r1, r7
   168fc:	mov	r0, r5
   16900:	bl	16584 <flatcc_builder_table_add_offset@@Base>
   16904:	cmp	r0, #0
   16908:	strne	r6, [r0]
   1690c:	movne	r0, #0
   16910:	bne	168c8 <flatcc_builder_table_add_union_vector@@Base+0x54>
   16914:	ldr	r3, [pc, #152]	; 169b4 <flatcc_builder_table_add_union_vector@@Base+0x140>
   16918:	ldr	r1, [pc, #152]	; 169b8 <flatcc_builder_table_add_union_vector@@Base+0x144>
   1691c:	add	r3, pc, r3
   16920:	ldr	r0, [pc, #148]	; 169bc <flatcc_builder_table_add_union_vector@@Base+0x148>
   16924:	add	r3, r3, #1248	; 0x4e0
   16928:	ldr	r2, [pc, #144]	; 169c0 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   1692c:	add	r3, r3, #12
   16930:	add	r1, pc, r1
   16934:	add	r0, pc, r0
   16938:	bl	12080 <__assert_fail@plt>
   1693c:	ldr	r3, [pc, #128]	; 169c4 <flatcc_builder_table_add_union_vector@@Base+0x150>
   16940:	ldr	r1, [pc, #128]	; 169c8 <flatcc_builder_table_add_union_vector@@Base+0x154>
   16944:	add	r3, pc, r3
   16948:	ldr	r0, [pc, #124]	; 169cc <flatcc_builder_table_add_union_vector@@Base+0x158>
   1694c:	add	r3, r3, #1248	; 0x4e0
   16950:	mov	r2, #1536	; 0x600
   16954:	add	r3, r3, #12
   16958:	add	r1, pc, r1
   1695c:	add	r0, pc, r0
   16960:	bl	12080 <__assert_fail@plt>
   16964:	ldr	r3, [pc, #100]	; 169d0 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   16968:	ldr	r1, [pc, #100]	; 169d4 <flatcc_builder_table_add_union_vector@@Base+0x160>
   1696c:	add	r3, pc, r3
   16970:	ldr	r0, [pc, #96]	; 169d8 <flatcc_builder_table_add_union_vector@@Base+0x164>
   16974:	add	r3, r3, #1248	; 0x4e0
   16978:	ldr	r2, [pc, #92]	; 169dc <flatcc_builder_table_add_union_vector@@Base+0x168>
   1697c:	add	r3, r3, #12
   16980:	add	r1, pc, r1
   16984:	add	r0, pc, r0
   16988:	bl	12080 <__assert_fail@plt>
   1698c:	ldr	r3, [pc, #76]	; 169e0 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   16990:	ldr	r1, [pc, #76]	; 169e4 <flatcc_builder_table_add_union_vector@@Base+0x170>
   16994:	add	r3, pc, r3
   16998:	ldr	r0, [pc, #72]	; 169e8 <flatcc_builder_table_add_union_vector@@Base+0x174>
   1699c:	add	r3, r3, #1248	; 0x4e0
   169a0:	ldr	r2, [pc, #68]	; 169ec <flatcc_builder_table_add_union_vector@@Base+0x178>
   169a4:	add	r3, r3, #12
   169a8:	add	r1, pc, r1
   169ac:	add	r0, pc, r0
   169b0:	bl	12080 <__assert_fail@plt>
   169b4:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   169b8:	andeq	r1, r0, ip, lsl #10
   169bc:	andeq	r1, r0, r4, ror #17
   169c0:	andeq	r0, r0, r8, lsl #12
   169c4:	andeq	r0, r0, r8, lsr #27
   169c8:	andeq	r1, r0, r4, ror #9
   169cc:			; <UNDEFINED> instruction: 0x000017bc
   169d0:	andeq	r0, r0, r0, lsl #27
   169d4:			; <UNDEFINED> instruction: 0x000014bc
   169d8:	andeq	r1, r0, ip, lsr #17
   169dc:	andeq	r0, r0, r1, lsl #12
   169e0:	andeq	r0, r0, r8, asr sp
   169e4:	muleq	r0, r4, r4
   169e8:	andeq	r1, r0, ip, ror #16
   169ec:	andeq	r0, r0, r4, lsl #12

000169f0 <flatcc_builder_push_buffer_alignment@@Base>:
   169f0:	mov	r3, r0
   169f4:	mov	r2, #4
   169f8:	ldrh	r0, [r0, #128]	; 0x80
   169fc:	strh	r2, [r3, #128]	; 0x80
   16a00:	bx	lr

00016a04 <flatcc_builder_pop_buffer_alignment@@Base>:
   16a04:	ldrh	r3, [r0, #128]	; 0x80
   16a08:	cmp	r3, r1
   16a0c:	strhcc	r1, [r0, #128]	; 0x80
   16a10:	bx	lr

00016a14 <flatcc_builder_get_buffer_alignment@@Base>:
   16a14:	ldrh	r0, [r0, #128]	; 0x80
   16a18:	bx	lr

00016a1c <flatcc_builder_set_vtable_clustering@@Base>:
   16a1c:	clz	r1, r1
   16a20:	lsr	r1, r1, #5
   16a24:	str	r1, [r0, #180]	; 0xb4
   16a28:	bx	lr

00016a2c <flatcc_builder_set_block_align@@Base>:
   16a2c:	strh	r1, [r0, #132]	; 0x84
   16a30:	bx	lr

00016a34 <flatcc_builder_get_level@@Base>:
   16a34:	ldr	r0, [r0, #156]	; 0x9c
   16a38:	bx	lr

00016a3c <flatcc_builder_set_max_level@@Base>:
   16a3c:	ldr	r3, [r0, #160]	; 0xa0
   16a40:	str	r1, [r0, #176]	; 0xb0
   16a44:	cmp	r1, r3
   16a48:	strgt	r1, [r0, #160]	; 0xa0
   16a4c:	bx	lr

00016a50 <flatcc_builder_get_buffer_size@@Base>:
   16a50:	ldr	r2, [r0, #140]	; 0x8c
   16a54:	ldr	r0, [r0, #136]	; 0x88
   16a58:	sub	r0, r2, r0
   16a5c:	bx	lr

00016a60 <flatcc_builder_get_buffer_start@@Base>:
   16a60:	ldr	r0, [r0, #136]	; 0x88
   16a64:	bx	lr

00016a68 <flatcc_builder_get_buffer_end@@Base>:
   16a68:	ldr	r0, [r0, #140]	; 0x8c
   16a6c:	bx	lr

00016a70 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16a70:	str	r1, [r0, #172]	; 0xac
   16a74:	bx	lr

00016a78 <flatcc_builder_set_identifier@@Base>:
   16a78:	ldr	r3, [pc, #32]	; 16aa0 <flatcc_builder_set_identifier@@Base+0x28>
   16a7c:	cmp	r1, #0
   16a80:	add	r3, pc, r3
   16a84:	beq	16a94 <flatcc_builder_set_identifier@@Base+0x1c>
   16a88:	ldr	r3, [r1]
   16a8c:	str	r3, [r0, #168]	; 0xa8
   16a90:	bx	lr
   16a94:	ldr	r2, [pc, #8]	; 16aa4 <flatcc_builder_set_identifier@@Base+0x2c>
   16a98:	ldr	r1, [r3, r2]
   16a9c:	b	16a88 <flatcc_builder_set_identifier@@Base+0x10>
   16aa0:	andeq	r2, r1, r8, ror r5
   16aa4:	andeq	r0, r0, r4, asr r0

00016aa8 <flatcc_builder_get_type@@Base>:
   16aa8:	ldr	r0, [r0, #32]
   16aac:	cmp	r0, #0
   16ab0:	ldrhne	r0, [r0, #14]
   16ab4:	bx	lr

00016ab8 <flatcc_builder_get_type_at@@Base>:
   16ab8:	cmp	r1, #0
   16abc:	ble	16ae4 <flatcc_builder_get_type_at@@Base+0x2c>
   16ac0:	ldr	r3, [r0, #156]	; 0x9c
   16ac4:	cmp	r1, r3
   16ac8:	bgt	16ae4 <flatcc_builder_get_type_at@@Base+0x2c>
   16acc:	sub	r1, r1, r3
   16ad0:	ldr	r3, [r0, #32]
   16ad4:	add	r1, r1, r1, lsl #3
   16ad8:	add	r1, r3, r1, lsl #2
   16adc:	ldrh	r0, [r1, #14]
   16ae0:	bx	lr
   16ae4:	mov	r0, #0
   16ae8:	bx	lr

00016aec <flatcc_builder_get_direct_buffer@@Base>:
   16aec:	ldr	r3, [r0, #184]	; 0xb8
   16af0:	cmp	r3, #0
   16af4:	beq	16b08 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16af8:	ldr	r2, [r0, #188]	; 0xbc
   16afc:	ldr	r3, [r0, #192]	; 0xc0
   16b00:	cmp	r2, r3
   16b04:	beq	16b1c <flatcc_builder_get_direct_buffer@@Base+0x30>
   16b08:	cmp	r1, #0
   16b0c:	movne	r0, #0
   16b10:	strne	r0, [r1]
   16b14:	moveq	r0, r1
   16b18:	bx	lr
   16b1c:	cmp	r1, #0
   16b20:	ldrne	r3, [r0, #212]	; 0xd4
   16b24:	ldr	r0, [r0, #196]	; 0xc4
   16b28:	strne	r3, [r1]
   16b2c:	bx	lr

00016b30 <flatcc_builder_copy_buffer@@Base>:
   16b30:	ldr	r3, [r0, #184]	; 0xb8
   16b34:	cmp	r3, #0
   16b38:	beq	16b78 <flatcc_builder_copy_buffer@@Base+0x48>
   16b3c:	push	{r4, lr}
   16b40:	add	r0, r0, #188	; 0xbc
   16b44:	bl	17248 <flatcc_emitter_copy_buffer@@Base>
   16b48:	cmp	r0, #0
   16b4c:	popne	{r4, pc}
   16b50:	ldr	r3, [pc, #40]	; 16b80 <flatcc_builder_copy_buffer@@Base+0x50>
   16b54:	ldr	r1, [pc, #40]	; 16b84 <flatcc_builder_copy_buffer@@Base+0x54>
   16b58:	add	r3, pc, r3
   16b5c:	ldr	r0, [pc, #36]	; 16b88 <flatcc_builder_copy_buffer@@Base+0x58>
   16b60:	add	r3, r3, #1296	; 0x510
   16b64:	ldr	r2, [pc, #32]	; 16b8c <flatcc_builder_copy_buffer@@Base+0x5c>
   16b68:	add	r3, r3, #4
   16b6c:	add	r1, pc, r1
   16b70:	add	r0, pc, r0
   16b74:	bl	12080 <__assert_fail@plt>
   16b78:	mov	r0, r3
   16b7c:	bx	lr
   16b80:	muleq	r0, r4, fp
   16b84:	ldrdeq	r1, [r0], -r0
   16b88:	andeq	r1, r0, r8, ror #13
   16b8c:	andeq	r0, r0, r6, lsl #15

00016b90 <flatcc_builder_finalize_buffer@@Base>:
   16b90:	push	{r4, r5, r6, lr}
   16b94:	mov	r5, r1
   16b98:	mov	r6, r0
   16b9c:	bl	16a50 <flatcc_builder_get_buffer_size@@Base>
   16ba0:	cmp	r5, #0
   16ba4:	strne	r0, [r5]
   16ba8:	mov	r4, r0
   16bac:	bl	12008 <malloc@plt>
   16bb0:	subs	r5, r0, #0
   16bb4:	beq	16bd8 <flatcc_builder_finalize_buffer@@Base+0x48>
   16bb8:	mov	r2, r4
   16bbc:	mov	r0, r6
   16bc0:	mov	r1, r5
   16bc4:	bl	16b30 <flatcc_builder_copy_buffer@@Base>
   16bc8:	cmp	r0, #0
   16bcc:	beq	16bfc <flatcc_builder_finalize_buffer@@Base+0x6c>
   16bd0:	mov	r0, r5
   16bd4:	pop	{r4, r5, r6, pc}
   16bd8:	ldr	r3, [pc, #64]	; 16c20 <flatcc_builder_finalize_buffer@@Base+0x90>
   16bdc:	ldr	r1, [pc, #64]	; 16c24 <flatcc_builder_finalize_buffer@@Base+0x94>
   16be0:	ldr	r0, [pc, #64]	; 16c28 <flatcc_builder_finalize_buffer@@Base+0x98>
   16be4:	add	r3, pc, r3
   16be8:	ldr	r2, [pc, #60]	; 16c2c <flatcc_builder_finalize_buffer@@Base+0x9c>
   16bec:	add	r3, r3, #1328	; 0x530
   16bf0:	add	r1, pc, r1
   16bf4:	add	r0, pc, r0
   16bf8:	bl	12080 <__assert_fail@plt>
   16bfc:	ldr	r3, [pc, #44]	; 16c30 <flatcc_builder_finalize_buffer@@Base+0xa0>
   16c00:	ldr	r1, [pc, #44]	; 16c34 <flatcc_builder_finalize_buffer@@Base+0xa4>
   16c04:	ldr	r0, [pc, #44]	; 16c38 <flatcc_builder_finalize_buffer@@Base+0xa8>
   16c08:	add	r3, pc, r3
   16c0c:	ldr	r2, [pc, #40]	; 16c3c <flatcc_builder_finalize_buffer@@Base+0xac>
   16c10:	add	r3, r3, #1328	; 0x530
   16c14:	add	r1, pc, r1
   16c18:	add	r0, pc, r0
   16c1c:	bl	12080 <__assert_fail@plt>
   16c20:	andeq	r0, r0, r8, lsl #22
   16c24:	andeq	r1, r0, ip, asr #4
   16c28:	ldrdeq	r1, [r0], -r0
   16c2c:	muleq	r0, r8, r7
   16c30:	andeq	r0, r0, r4, ror #21
   16c34:	andeq	r1, r0, r8, lsr #4
   16c38:	andeq	r1, r0, ip, lsr #5
   16c3c:	muleq	r0, ip, r7

00016c40 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16c40:	push	{r4, r5, r6, r7, lr}
   16c44:	sub	sp, sp, #12
   16c48:	mov	r6, r1
   16c4c:	mov	r7, r0
   16c50:	bl	16a50 <flatcc_builder_get_buffer_size@@Base>
   16c54:	cmp	r6, #0
   16c58:	strne	r0, [r6]
   16c5c:	mov	r4, r0
   16c60:	mov	r0, r7
   16c64:	bl	16a14 <flatcc_builder_get_buffer_alignment@@Base>
   16c68:	sub	r4, r4, #1
   16c6c:	mov	r1, r0
   16c70:	rsb	r3, r0, #0
   16c74:	add	r4, r4, r0
   16c78:	add	r0, sp, #8
   16c7c:	cmp	r1, #4
   16c80:	and	r4, r4, r3
   16c84:	mov	r3, #0
   16c88:	movcc	r1, #4
   16c8c:	mov	r2, r4
   16c90:	str	r3, [r0, #-4]!
   16c94:	bl	12044 <posix_memalign@plt>
   16c98:	cmp	r0, #0
   16c9c:	beq	16ccc <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   16ca0:	ldr	r0, [sp, #4]
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cb0 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16cac:	bl	11fc0 <free@plt>
   16cb0:	cmp	r6, #0
   16cb4:	moveq	r5, r6
   16cb8:	movne	r5, #0
   16cbc:	strne	r5, [r6]
   16cc0:	mov	r0, r5
   16cc4:	add	sp, sp, #12
   16cc8:	pop	{r4, r5, r6, r7, pc}
   16ccc:	ldr	r5, [sp, #4]
   16cd0:	cmp	r5, #0
   16cd4:	beq	16cb0 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16cd8:	mov	r2, r4
   16cdc:	mov	r0, r7
   16ce0:	mov	r1, r5
   16ce4:	bl	16b30 <flatcc_builder_copy_buffer@@Base>
   16ce8:	cmp	r0, #0
   16cec:	bne	16cc0 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   16cf0:	mov	r0, r5
   16cf4:	b	16cac <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00016cf8 <flatcc_builder_aligned_alloc@@Base>:
   16cf8:	push	{r4, lr}
   16cfc:	sub	sp, sp, #8
   16d00:	add	r3, sp, #8
   16d04:	cmp	r0, #4
   16d08:	mov	r4, #0
   16d0c:	mov	r2, r1
   16d10:	str	r4, [r3, #-4]!
   16d14:	movcs	r1, r0
   16d18:	movcc	r1, #4
   16d1c:	mov	r0, r3
   16d20:	bl	12044 <posix_memalign@plt>
   16d24:	cmp	r0, r4
   16d28:	ldr	r0, [sp, #4]
   16d2c:	beq	16d40 <flatcc_builder_aligned_alloc@@Base+0x48>
   16d30:	cmp	r0, #0
   16d34:	beq	16d40 <flatcc_builder_aligned_alloc@@Base+0x48>
   16d38:	bl	11fc0 <free@plt>
   16d3c:	mov	r0, r4
   16d40:	add	sp, sp, #8
   16d44:	pop	{r4, pc}

00016d48 <flatcc_builder_aligned_free@@Base>:
   16d48:	b	11fc0 <free@plt>

00016d4c <flatcc_builder_get_emit_context@@Base>:
   16d4c:	ldr	r0, [r0, #36]	; 0x24
   16d50:	bx	lr

00016d54 <flatcc_emitter_recycle_page@@Base>:
   16d54:	ldr	r3, [r0]
   16d58:	cmp	r3, r1
   16d5c:	beq	16da4 <flatcc_emitter_recycle_page@@Base+0x50>
   16d60:	ldr	r2, [r0, #4]
   16d64:	cmp	r1, r2
   16d68:	beq	16da4 <flatcc_emitter_recycle_page@@Base+0x50>
   16d6c:	ldr	ip, [r1, #2944]	; 0xb80
   16d70:	ldr	r2, [r1, #2948]	; 0xb84
   16d74:	push	{lr}		; (str lr, [sp, #-4]!)
   16d78:	mov	r0, #0
   16d7c:	str	r2, [ip, #2948]	; 0xb84
   16d80:	ldr	r2, [r3, #2948]	; 0xb84
   16d84:	ldr	lr, [r1, #2948]	; 0xb84
   16d88:	str	ip, [lr, #2944]	; 0xb80
   16d8c:	str	r3, [r1, #2944]	; 0xb80
   16d90:	str	r2, [r1, #2948]	; 0xb84
   16d94:	str	r1, [r2, #2944]	; 0xb80
   16d98:	ldr	r3, [r1, #2944]	; 0xb80
   16d9c:	str	r1, [r3, #2948]	; 0xb84
   16da0:	pop	{pc}		; (ldr pc, [sp], #4)
   16da4:	mvn	r0, #0
   16da8:	bx	lr

00016dac <flatcc_emitter_reset@@Base>:
   16dac:	ldr	r2, [r0]
   16db0:	cmp	r2, #0
   16db4:	bxeq	lr
   16db8:	ldr	r3, [r0, #32]
   16dbc:	mov	r1, #1472	; 0x5c0
   16dc0:	push	{r4, lr}
   16dc4:	cmp	r3, #0
   16dc8:	str	r1, [r0, #12]
   16dcc:	str	r1, [r0, #20]
   16dd0:	ldr	r1, [r0, #24]
   16dd4:	add	ip, r2, #1472	; 0x5c0
   16dd8:	moveq	r3, r1
   16ddc:	stmib	r0, {r2, ip}
   16de0:	str	ip, [r0, #16]
   16de4:	add	ip, r3, r3, lsl #1
   16de8:	lsr	r3, r1, #2
   16dec:	add	r3, r3, ip, lsr #2
   16df0:	ldr	ip, [r0, #28]
   16df4:	ldr	lr, [pc, #104]	; 16e64 <flatcc_emitter_reset@@Base+0xb8>
   16df8:	cmp	ip, r3, lsl #1
   16dfc:	mov	r1, #0
   16e00:	str	lr, [r2, #2952]	; 0xb88
   16e04:	str	r3, [r0, #32]
   16e08:	str	r1, [r0, #24]
   16e0c:	popls	{r4, pc}
   16e10:	ldr	r3, [r2, #2944]	; 0xb80
   16e14:	mov	r4, r0
   16e18:	cmp	r2, r3
   16e1c:	popeq	{r4, pc}
   16e20:	ldr	r1, [r3, #2944]	; 0xb80
   16e24:	mov	r0, r3
   16e28:	str	r1, [r2, #2944]	; 0xb80
   16e2c:	ldr	r3, [r3, #2944]	; 0xb80
   16e30:	str	r2, [r3, #2948]	; 0xb84
   16e34:	bl	11fc0 <free@plt>
   16e38:	ldr	r3, [r4, #28]
   16e3c:	ldr	r2, [r4, #32]
   16e40:	sub	r3, r3, #2944	; 0xb80
   16e44:	str	r3, [r4, #28]
   16e48:	cmp	r3, r2, lsl #1
   16e4c:	popls	{r4, pc}
   16e50:	ldm	r4, {r1, r2}
   16e54:	ldr	r3, [r2, #2944]	; 0xb80
   16e58:	cmp	r3, r1
   16e5c:	bne	16e20 <flatcc_emitter_reset@@Base+0x74>
   16e60:	pop	{r4, pc}
   16e64:			; <UNDEFINED> instruction: 0xfffffa40

00016e68 <flatcc_emitter_clear@@Base>:
   16e68:	ldr	r3, [r0]
   16e6c:	cmp	r3, #0
   16e70:	bxeq	lr
   16e74:	ldr	r2, [r3, #2948]	; 0xb84
   16e78:	mov	r1, #0
   16e7c:	push	{r4, r5, r6, lr}
   16e80:	mov	r5, r0
   16e84:	str	r1, [r2, #2944]	; 0xb80
   16e88:	ldr	r4, [r3, #2944]	; 0xb80
   16e8c:	cmp	r4, r1
   16e90:	bne	16e9c <flatcc_emitter_clear@@Base+0x34>
   16e94:	b	16ecc <flatcc_emitter_clear@@Base+0x64>
   16e98:	mov	r4, r3
   16e9c:	ldr	r0, [r4, #2948]	; 0xb84
   16ea0:	bl	11fc0 <free@plt>
   16ea4:	ldr	r3, [r4, #2944]	; 0xb80
   16ea8:	cmp	r3, #0
   16eac:	bne	16e98 <flatcc_emitter_clear@@Base+0x30>
   16eb0:	mov	r0, r4
   16eb4:	bl	11fc0 <free@plt>
   16eb8:	mov	r0, r5
   16ebc:	mov	r2, #36	; 0x24
   16ec0:	mov	r1, #0
   16ec4:	pop	{r4, r5, r6, lr}
   16ec8:	b	12050 <memset@plt>
   16ecc:	mov	r4, r3
   16ed0:	b	16eb0 <flatcc_emitter_clear@@Base+0x48>

00016ed4 <flatcc_emitter@@Base>:
   16ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ed8:	sub	sp, sp, #12
   16edc:	mov	r4, r0
   16ee0:	ldr	ip, [sp, #48]	; 0x30
   16ee4:	ldr	r0, [r0, #24]
   16ee8:	cmp	r3, #0
   16eec:	add	r0, r0, ip
   16ef0:	str	r0, [r4, #24]
   16ef4:	blt	170b8 <flatcc_emitter@@Base+0x1e4>
   16ef8:	ldr	r0, [r4, #20]
   16efc:	cmp	ip, r0
   16f00:	bls	16f8c <flatcc_emitter@@Base+0xb8>
   16f04:	cmp	r2, #0
   16f08:	addne	r7, r1, #8
   16f0c:	movne	r8, r2
   16f10:	movne	r9, #2944	; 0xb80
   16f14:	beq	16f80 <flatcc_emitter@@Base+0xac>
   16f18:	ldr	r6, [r7, #-4]
   16f1c:	ldr	sl, [r7, #-8]
   16f20:	cmp	r6, #0
   16f24:	beq	16f74 <flatcc_emitter@@Base+0xa0>
   16f28:	cmp	r0, r6
   16f2c:	mov	r5, r0
   16f30:	bcs	16fd4 <flatcc_emitter@@Base+0x100>
   16f34:	cmp	r0, #0
   16f38:	beq	16fe0 <flatcc_emitter@@Base+0x10c>
   16f3c:	sub	r6, r6, r0
   16f40:	mov	r1, sl
   16f44:	mov	r2, r5
   16f48:	ldr	r0, [r4, #16]
   16f4c:	bl	11fcc <memcpy@plt>
   16f50:	ldr	r3, [r4, #16]
   16f54:	ldr	r0, [r4, #20]
   16f58:	add	r3, r3, r5
   16f5c:	sub	r0, r0, r5
   16f60:	cmp	r6, #0
   16f64:	add	sl, sl, r5
   16f68:	str	r3, [r4, #16]
   16f6c:	str	r0, [r4, #20]
   16f70:	bne	16f28 <flatcc_emitter@@Base+0x54>
   16f74:	subs	r8, r8, #1
   16f78:	add	r7, r7, #8
   16f7c:	bne	16f18 <flatcc_emitter@@Base+0x44>
   16f80:	mov	r0, #0
   16f84:	add	sp, sp, #12
   16f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f8c:	ldr	r3, [r4, #16]
   16f90:	sub	r0, r0, ip
   16f94:	add	ip, r3, ip
   16f98:	str	r0, [r4, #20]
   16f9c:	str	ip, [r4, #16]
   16fa0:	cmp	r2, #0
   16fa4:	addne	r4, r1, #8
   16fa8:	movne	r7, r2
   16fac:	beq	16f80 <flatcc_emitter@@Base+0xac>
   16fb0:	ldmdb	r4, {r1, r2}
   16fb4:	mov	r0, r3
   16fb8:	bl	11fcc <memcpy@plt>
   16fbc:	ldr	r2, [r4, #-4]
   16fc0:	subs	r7, r7, #1
   16fc4:	add	r4, r4, #8
   16fc8:	add	r3, r0, r2
   16fcc:	bne	16fb0 <flatcc_emitter@@Base+0xdc>
   16fd0:	b	16f80 <flatcc_emitter@@Base+0xac>
   16fd4:	mov	r5, r6
   16fd8:	mov	r6, #0
   16fdc:	b	16f40 <flatcc_emitter@@Base+0x6c>
   16fe0:	ldr	fp, [r4, #4]
   16fe4:	cmp	fp, #0
   16fe8:	beq	17058 <flatcc_emitter@@Base+0x184>
   16fec:	ldr	r5, [fp, #2944]	; 0xb80
   16ff0:	ldr	r3, [r4]
   16ff4:	cmp	r5, r3
   16ff8:	beq	17020 <flatcc_emitter@@Base+0x14c>
   16ffc:	str	r5, [r4, #4]
   17000:	ldr	r3, [r5, #2948]	; 0xb84
   17004:	mov	r0, r9
   17008:	str	r5, [r4, #16]
   1700c:	ldr	r3, [r3, #2952]	; 0xb88
   17010:	str	r9, [r4, #20]
   17014:	add	r3, r3, #2944	; 0xb80
   17018:	str	r3, [r5, #2952]	; 0xb88
   1701c:	b	16f28 <flatcc_emitter@@Base+0x54>
   17020:	ldr	r0, [pc, #540]	; 17244 <flatcc_emitter@@Base+0x370>
   17024:	bl	12008 <malloc@plt>
   17028:	cmp	r0, #0
   1702c:	beq	17068 <flatcc_emitter@@Base+0x194>
   17030:	ldr	r3, [r4, #28]
   17034:	str	r5, [r0, #2944]	; 0xb80
   17038:	add	r3, r3, #2944	; 0xb80
   1703c:	str	fp, [r0, #2948]	; 0xb84
   17040:	str	r3, [r4, #28]
   17044:	str	r0, [r5, #2948]	; 0xb84
   17048:	str	r0, [fp, #2944]	; 0xb80
   1704c:	mov	r5, r0
   17050:	str	r0, [r4, #4]
   17054:	b	17000 <flatcc_emitter@@Base+0x12c>
   17058:	ldr	r0, [pc, #484]	; 17244 <flatcc_emitter@@Base+0x370>
   1705c:	bl	12008 <malloc@plt>
   17060:	cmp	r0, #0
   17064:	bne	17074 <flatcc_emitter@@Base+0x1a0>
   17068:	mvn	r0, #0
   1706c:	add	sp, sp, #12
   17070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17074:	mov	r2, #1472	; 0x5c0
   17078:	ldr	r3, [r4, #28]
   1707c:	str	r2, [r4, #12]
   17080:	str	r2, [r4, #20]
   17084:	sub	r2, r2, #2944	; 0xb80
   17088:	str	r2, [r0, #2952]	; 0xb88
   1708c:	str	r0, [r4]
   17090:	add	r3, r3, #2944	; 0xb80
   17094:	str	r0, [r4, #4]
   17098:	str	r0, [r0, #2944]	; 0xb80
   1709c:	str	r0, [r0, #2948]	; 0xb84
   170a0:	add	r0, r0, #1472	; 0x5c0
   170a4:	str	r0, [r4, #8]
   170a8:	str	r0, [r4, #16]
   170ac:	str	r3, [r4, #28]
   170b0:	mov	r0, #1472	; 0x5c0
   170b4:	b	16f28 <flatcc_emitter@@Base+0x54>
   170b8:	ldr	r0, [r4, #12]
   170bc:	cmp	ip, r0
   170c0:	bls	17140 <flatcc_emitter@@Base+0x26c>
   170c4:	add	r6, r1, r2, lsl #3
   170c8:	mov	r7, r2
   170cc:	mov	r9, #2944	; 0xb80
   170d0:	mov	r8, #0
   170d4:	cmp	r7, #0
   170d8:	beq	16f80 <flatcc_emitter@@Base+0xac>
   170dc:	ldr	r5, [r6, #-4]
   170e0:	ldr	sl, [r6, #-8]
   170e4:	cmp	r5, #0
   170e8:	add	sl, sl, r5
   170ec:	beq	17134 <flatcc_emitter@@Base+0x260>
   170f0:	ldr	r2, [r4, #12]
   170f4:	cmp	r2, r5
   170f8:	bcs	17158 <flatcc_emitter@@Base+0x284>
   170fc:	cmp	r2, #0
   17100:	beq	17168 <flatcc_emitter@@Base+0x294>
   17104:	sub	r5, r5, r2
   17108:	mov	r1, r8
   1710c:	ldr	r0, [r4, #8]
   17110:	rsb	r3, r2, #0
   17114:	add	r0, r0, r3
   17118:	add	sl, sl, r3
   1711c:	str	r1, [r4, #12]
   17120:	str	r0, [r4, #8]
   17124:	mov	r1, sl
   17128:	bl	11fcc <memcpy@plt>
   1712c:	cmp	r5, #0
   17130:	bne	170f0 <flatcc_emitter@@Base+0x21c>
   17134:	sub	r6, r6, #8
   17138:	sub	r7, r7, #1
   1713c:	b	170d4 <flatcc_emitter@@Base+0x200>
   17140:	ldr	r3, [r4, #8]
   17144:	sub	r0, r0, ip
   17148:	sub	r3, r3, ip
   1714c:	str	r0, [r4, #12]
   17150:	str	r3, [r4, #8]
   17154:	b	16fa0 <flatcc_emitter@@Base+0xcc>
   17158:	sub	r1, r2, r5
   1715c:	mov	r2, r5
   17160:	mov	r5, #0
   17164:	b	1710c <flatcc_emitter@@Base+0x238>
   17168:	ldr	r3, [r4]
   1716c:	cmp	r3, #0
   17170:	beq	171f4 <flatcc_emitter@@Base+0x320>
   17174:	ldr	fp, [r3, #2948]	; 0xb84
   17178:	ldr	r2, [r4, #4]
   1717c:	cmp	fp, r2
   17180:	beq	171b4 <flatcc_emitter@@Base+0x2e0>
   17184:	ldr	r3, [r3, #2952]	; 0xb88
   17188:	sub	r3, r3, #2944	; 0xb80
   1718c:	str	r3, [fp, #2952]	; 0xb88
   17190:	str	fp, [r4]
   17194:	ldr	r3, [fp, #2944]	; 0xb80
   17198:	add	r2, fp, #2944	; 0xb80
   1719c:	str	r9, [r4, #12]
   171a0:	ldr	r3, [r3, #2952]	; 0xb88
   171a4:	str	r2, [r4, #8]
   171a8:	sub	r3, r3, #2944	; 0xb80
   171ac:	str	r3, [fp, #2952]	; 0xb88
   171b0:	b	170f0 <flatcc_emitter@@Base+0x21c>
   171b4:	ldr	r0, [pc, #136]	; 17244 <flatcc_emitter@@Base+0x370>
   171b8:	str	r3, [sp, #4]
   171bc:	bl	12008 <malloc@plt>
   171c0:	ldr	r3, [sp, #4]
   171c4:	cmp	r0, #0
   171c8:	beq	17068 <flatcc_emitter@@Base+0x194>
   171cc:	ldr	r2, [r4, #28]
   171d0:	str	fp, [r0, #2948]	; 0xb84
   171d4:	add	r2, r2, #2944	; 0xb80
   171d8:	str	r3, [r0, #2944]	; 0xb80
   171dc:	str	r2, [r4, #28]
   171e0:	str	r0, [r3, #2948]	; 0xb84
   171e4:	str	r0, [fp, #2944]	; 0xb80
   171e8:	str	r0, [r4]
   171ec:	mov	fp, r0
   171f0:	b	17194 <flatcc_emitter@@Base+0x2c0>
   171f4:	ldr	r0, [pc, #72]	; 17244 <flatcc_emitter@@Base+0x370>
   171f8:	bl	12008 <malloc@plt>
   171fc:	cmp	r0, #0
   17200:	beq	17068 <flatcc_emitter@@Base+0x194>
   17204:	mov	r2, #1472	; 0x5c0
   17208:	ldr	r3, [r4, #28]
   1720c:	str	r2, [r4, #12]
   17210:	str	r2, [r4, #20]
   17214:	sub	r2, r2, #2944	; 0xb80
   17218:	str	r2, [r0, #2952]	; 0xb88
   1721c:	str	r0, [r4]
   17220:	add	r3, r3, #2944	; 0xb80
   17224:	str	r0, [r4, #4]
   17228:	str	r0, [r0, #2944]	; 0xb80
   1722c:	str	r0, [r0, #2948]	; 0xb84
   17230:	add	r0, r0, #1472	; 0x5c0
   17234:	str	r0, [r4, #8]
   17238:	str	r0, [r4, #16]
   1723c:	str	r3, [r4, #28]
   17240:	b	170f0 <flatcc_emitter@@Base+0x21c>
   17244:	andeq	r0, r0, ip, lsl #23

00017248 <flatcc_emitter_copy_buffer@@Base>:
   17248:	ldr	ip, [r0, #24]
   1724c:	cmp	ip, r2
   17250:	bhi	172ec <flatcc_emitter_copy_buffer@@Base+0xa4>
   17254:	ldr	r2, [r0]
   17258:	cmp	r2, #0
   1725c:	beq	172ec <flatcc_emitter_copy_buffer@@Base+0xa4>
   17260:	mov	r3, r1
   17264:	ldr	r1, [r0, #4]
   17268:	push	{r4, r5, r6, lr}
   1726c:	cmp	r2, r1
   17270:	mov	r5, r0
   17274:	beq	172f8 <flatcc_emitter_copy_buffer@@Base+0xb0>
   17278:	ldr	r4, [r0, #12]
   1727c:	ldr	r1, [r5, #8]
   17280:	rsb	r4, r4, #2944	; 0xb80
   17284:	mov	r2, r4
   17288:	mov	r0, r3
   1728c:	bl	11fcc <memcpy@plt>
   17290:	ldr	r2, [r5]
   17294:	ldr	r1, [r5, #4]
   17298:	add	r3, r0, r4
   1729c:	ldr	r4, [r2, #2944]	; 0xb80
   172a0:	cmp	r4, r1
   172a4:	beq	172d0 <flatcc_emitter_copy_buffer@@Base+0x88>
   172a8:	mov	r6, #2944	; 0xb80
   172ac:	mov	r1, r4
   172b0:	mov	r0, r3
   172b4:	mov	r2, r6
   172b8:	bl	11fcc <memcpy@plt>
   172bc:	ldr	r4, [r4, #2944]	; 0xb80
   172c0:	ldr	r1, [r5, #4]
   172c4:	cmp	r1, r4
   172c8:	add	r3, r0, #2944	; 0xb80
   172cc:	bne	172ac <flatcc_emitter_copy_buffer@@Base+0x64>
   172d0:	ldr	r2, [r5, #20]
   172d4:	mov	r0, r3
   172d8:	rsb	r2, r2, #2944	; 0xb80
   172dc:	bl	11fcc <memcpy@plt>
   172e0:	mov	r3, r0
   172e4:	mov	r0, r3
   172e8:	pop	{r4, r5, r6, pc}
   172ec:	mov	r3, #0
   172f0:	mov	r0, r3
   172f4:	bx	lr
   172f8:	ldr	r1, [r0, #8]
   172fc:	mov	r2, ip
   17300:	mov	r0, r3
   17304:	bl	11fcc <memcpy@plt>
   17308:	mov	r3, r0
   1730c:	b	172e4 <flatcc_emitter_copy_buffer@@Base+0x9c>

00017310 <__libc_csu_init@@Base>:
   17310:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17314:	mov	r7, r0
   17318:	ldr	r6, [pc, #72]	; 17368 <__libc_csu_init@@Base+0x58>
   1731c:	ldr	r5, [pc, #72]	; 1736c <__libc_csu_init@@Base+0x5c>
   17320:	add	r6, pc, r6
   17324:	add	r5, pc, r5
   17328:	sub	r6, r6, r5
   1732c:	mov	r8, r1
   17330:	mov	r9, r2
   17334:	bl	11f94 <printf@plt-0x20>
   17338:	asrs	r6, r6, #2
   1733c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17340:	mov	r4, #0
   17344:	add	r4, r4, #1
   17348:	ldr	r3, [r5], #4
   1734c:	mov	r2, r9
   17350:	mov	r1, r8
   17354:	mov	r0, r7
   17358:	blx	r3
   1735c:	cmp	r6, r4
   17360:	bne	17344 <__libc_csu_init@@Base+0x34>
   17364:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17368:	andeq	r1, r1, r8, ror #23
   1736c:	andeq	r1, r1, r0, ror #23

00017370 <__libc_csu_fini@@Base>:
   17370:	bx	lr

Disassembly of section .fini:

00017374 <.fini>:
   17374:	push	{r3, lr}
   17378:	pop	{r3, pc}
