
../repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

0001064c <.init>:
   1064c:	push	{r3, lr}
   10650:	bl	106fc <_start@@Base+0x3c>
   10654:	pop	{r3, pc}

Disassembly of section .plt:

00010658 <printf@plt-0x14>:
   10658:	push	{lr}		; (str lr, [sp, #-4]!)
   1065c:	ldr	lr, [pc, #4]	; 10668 <printf@plt-0x4>
   10660:	add	lr, pc, lr
   10664:	ldr	pc, [lr, #8]!
   10668:	muleq	r1, r8, r9

0001066c <printf@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2456]!	; 0x998

00010678 <puts@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2448]!	; 0x990

00010684 <__libc_start_main@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2440]!	; 0x988

00010690 <__gmon_start__@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2432]!	; 0x980

0001069c <putchar@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2424]!	; 0x978

000106a8 <__isoc99_scanf@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2416]!	; 0x970

000106b4 <abort@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2408]!	; 0x968

Disassembly of section .text:

000106c0 <_start@@Base>:
   106c0:	mov	fp, #0
   106c4:	mov	lr, #0
   106c8:	pop	{r1}		; (ldr r1, [sp], #4)
   106cc:	mov	r2, sp
   106d0:	push	{r2}		; (str r2, [sp, #-4]!)
   106d4:	push	{r0}		; (str r0, [sp, #-4]!)
   106d8:	ldr	ip, [pc, #16]	; 106f0 <_start@@Base+0x30>
   106dc:	push	{ip}		; (str ip, [sp, #-4]!)
   106e0:	ldr	r0, [pc, #12]	; 106f4 <_start@@Base+0x34>
   106e4:	ldr	r3, [pc, #12]	; 106f8 <_start@@Base+0x38>
   106e8:	bl	10684 <__libc_start_main@plt>
   106ec:	bl	106b4 <abort@plt>
   106f0:	andeq	r0, r1, r8, lsr sl
   106f4:			; <UNDEFINED> instruction: 0x000107b0
   106f8:	ldrdeq	r0, [r1], -r8
   106fc:	ldr	r3, [pc, #20]	; 10718 <_start@@Base+0x58>
   10700:	ldr	r2, [pc, #20]	; 1071c <_start@@Base+0x5c>
   10704:	add	r3, pc, r3
   10708:	ldr	r2, [r3, r2]
   1070c:	cmp	r2, #0
   10710:	bxeq	lr
   10714:	b	10690 <__gmon_start__@plt>
   10718:	strdeq	r0, [r1], -r4
   1071c:	andeq	r0, r0, r8, lsr #32
   10720:	ldr	r0, [pc, #24]	; 10740 <_start@@Base+0x80>
   10724:	ldr	r3, [pc, #24]	; 10744 <_start@@Base+0x84>
   10728:	cmp	r3, r0
   1072c:	bxeq	lr
   10730:	ldr	r3, [pc, #16]	; 10748 <_start@@Base+0x88>
   10734:	cmp	r3, #0
   10738:	bxeq	lr
   1073c:	bx	r3
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r1, r2, r4, lsr r0
   10748:	andeq	r0, r0, r0
   1074c:	ldr	r0, [pc, #36]	; 10778 <_start@@Base+0xb8>
   10750:	ldr	r1, [pc, #36]	; 1077c <_start@@Base+0xbc>
   10754:	sub	r1, r1, r0
   10758:	asr	r1, r1, #2
   1075c:	add	r1, r1, r1, lsr #31
   10760:	asrs	r1, r1, #1
   10764:	bxeq	lr
   10768:	ldr	r3, [pc, #16]	; 10780 <_start@@Base+0xc0>
   1076c:	cmp	r3, #0
   10770:	bxeq	lr
   10774:	bx	r3
   10778:	andeq	r1, r2, r4, lsr r0
   1077c:	andeq	r1, r2, r4, lsr r0
   10780:	andeq	r0, r0, r0
   10784:	push	{r4, lr}
   10788:	ldr	r4, [pc, #24]	; 107a8 <_start@@Base+0xe8>
   1078c:	ldrb	r3, [r4]
   10790:	cmp	r3, #0
   10794:	popne	{r4, pc}
   10798:	bl	10720 <_start@@Base+0x60>
   1079c:	mov	r3, #1
   107a0:	strb	r3, [r4]
   107a4:	pop	{r4, pc}
   107a8:	andeq	r1, r2, r4, lsr r0
   107ac:	b	1074c <_start@@Base+0x8c>

000107b0 <main@@Base>:
   107b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107b4:	add	fp, sp, #28
   107b8:	sub	sp, sp, #44	; 0x2c
   107bc:	vmov.i32	q8, #0	; 0x00000000
   107c0:	add	r4, sp, #24
   107c4:	mov	r8, sp
   107c8:	mov	r7, #0
   107cc:	mov	r0, #12
   107d0:	mov	r6, r4
   107d4:	mov	r9, r8
   107d8:	str	r7, [sp, #40]	; 0x28
   107dc:	str	r7, [sp, #16]
   107e0:	vst1.64	{d16-d17}, [r6], r0
   107e4:	vst1.64	{d16-d17}, [r9], r0
   107e8:	ldr	r0, [pc, #464]	; 109c0 <main@@Base+0x210>
   107ec:	add	r0, pc, r0
   107f0:	bl	10678 <puts@plt>
   107f4:	ldr	sl, [pc, #456]	; 109c4 <main@@Base+0x214>
   107f8:	mov	r1, #1
   107fc:	add	sl, pc, sl
   10800:	mov	r0, sl
   10804:	bl	1066c <printf@plt>
   10808:	ldr	r5, [pc, #440]	; 109c8 <main@@Base+0x218>
   1080c:	mov	r1, r4
   10810:	add	r5, pc, r5
   10814:	mov	r0, r5
   10818:	bl	106a8 <__isoc99_scanf@plt>
   1081c:	mov	r0, sl
   10820:	mov	r1, #2
   10824:	bl	1066c <printf@plt>
   10828:	orr	r1, r4, #4
   1082c:	mov	r0, r5
   10830:	bl	106a8 <__isoc99_scanf@plt>
   10834:	mov	r0, sl
   10838:	mov	r1, #3
   1083c:	bl	1066c <printf@plt>
   10840:	add	r1, r4, #8
   10844:	mov	r0, r5
   10848:	bl	106a8 <__isoc99_scanf@plt>
   1084c:	mov	r0, sl
   10850:	mov	r1, #4
   10854:	bl	1066c <printf@plt>
   10858:	mov	r0, r5
   1085c:	mov	r1, r6
   10860:	bl	106a8 <__isoc99_scanf@plt>
   10864:	mov	r0, sl
   10868:	mov	r1, #5
   1086c:	bl	1066c <printf@plt>
   10870:	add	r1, r4, #16
   10874:	mov	r0, r5
   10878:	bl	106a8 <__isoc99_scanf@plt>
   1087c:	ldr	r0, [pc, #328]	; 109cc <main@@Base+0x21c>
   10880:	add	r0, pc, r0
   10884:	bl	10678 <puts@plt>
   10888:	mov	r0, sl
   1088c:	mov	r1, #1
   10890:	bl	1066c <printf@plt>
   10894:	mov	r0, r5
   10898:	mov	r1, r8
   1089c:	bl	106a8 <__isoc99_scanf@plt>
   108a0:	mov	r0, sl
   108a4:	mov	r1, #2
   108a8:	bl	1066c <printf@plt>
   108ac:	orr	r1, r8, #4
   108b0:	mov	r0, r5
   108b4:	bl	106a8 <__isoc99_scanf@plt>
   108b8:	mov	r0, sl
   108bc:	mov	r1, #3
   108c0:	bl	1066c <printf@plt>
   108c4:	add	r1, r8, #8
   108c8:	mov	r0, r5
   108cc:	bl	106a8 <__isoc99_scanf@plt>
   108d0:	mov	r0, sl
   108d4:	mov	r1, #4
   108d8:	bl	1066c <printf@plt>
   108dc:	mov	r0, r5
   108e0:	mov	r1, r9
   108e4:	bl	106a8 <__isoc99_scanf@plt>
   108e8:	mov	r0, sl
   108ec:	mov	r1, #5
   108f0:	bl	1066c <printf@plt>
   108f4:	add	r1, r8, #16
   108f8:	mov	r0, r5
   108fc:	bl	106a8 <__isoc99_scanf@plt>
   10900:	mov	r0, #10
   10904:	bl	1069c <putchar@plt>
   10908:	ldr	r0, [pc, #192]	; 109d0 <main@@Base+0x220>
   1090c:	add	r0, pc, r0
   10910:	bl	1066c <printf@plt>
   10914:	ldr	r5, [pc, #184]	; 109d4 <main@@Base+0x224>
   10918:	add	r5, pc, r5
   1091c:	b	1092c <main@@Base+0x17c>
   10920:	sub	r7, r7, #1
   10924:	cmn	r7, #5
   10928:	beq	109ac <main@@Base+0x1fc>
   1092c:	ldr	r1, [r4, -r7, lsl #2]
   10930:	ldr	r0, [sp]
   10934:	rsb	r6, r7, #0
   10938:	cmp	r1, r0
   1093c:	bne	1094c <main@@Base+0x19c>
   10940:	mov	r0, r5
   10944:	bl	1066c <printf@plt>
   10948:	ldr	r1, [r4, r6, lsl #2]
   1094c:	ldr	r0, [sp, #4]
   10950:	cmp	r1, r0
   10954:	bne	10964 <main@@Base+0x1b4>
   10958:	mov	r0, r5
   1095c:	bl	1066c <printf@plt>
   10960:	ldr	r1, [r4, r6, lsl #2]
   10964:	ldr	r0, [sp, #8]
   10968:	cmp	r1, r0
   1096c:	bne	1097c <main@@Base+0x1cc>
   10970:	mov	r0, r5
   10974:	bl	1066c <printf@plt>
   10978:	ldr	r1, [r4, r6, lsl #2]
   1097c:	ldr	r0, [sp, #12]
   10980:	cmp	r1, r0
   10984:	bne	10994 <main@@Base+0x1e4>
   10988:	mov	r0, r5
   1098c:	bl	1066c <printf@plt>
   10990:	ldr	r1, [r4, r6, lsl #2]
   10994:	ldr	r0, [sp, #16]
   10998:	cmp	r1, r0
   1099c:	bne	10920 <main@@Base+0x170>
   109a0:	mov	r0, r5
   109a4:	bl	1066c <printf@plt>
   109a8:	b	10920 <main@@Base+0x170>
   109ac:	mov	r0, #10
   109b0:	bl	1069c <putchar@plt>
   109b4:	mov	r0, #0
   109b8:	sub	sp, fp, #28
   109bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109c0:	andeq	r0, r0, r6, ror r2
   109c4:	andeq	r0, r0, r4, asr #4
   109c8:	andeq	r0, r0, pc, asr #4
   109cc:	andeq	r0, r0, fp, ror #3
   109d0:	andeq	r0, r0, sl, asr #2
   109d4:	andeq	r0, r0, r6, asr #2

000109d8 <__libc_csu_init@@Base>:
   109d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109dc:	mov	r7, r0
   109e0:	ldr	r6, [pc, #72]	; 10a30 <__libc_csu_init@@Base+0x58>
   109e4:	ldr	r5, [pc, #72]	; 10a34 <__libc_csu_init@@Base+0x5c>
   109e8:	add	r6, pc, r6
   109ec:	add	r5, pc, r5
   109f0:	sub	r6, r6, r5
   109f4:	mov	r8, r1
   109f8:	mov	r9, r2
   109fc:	bl	1064c <printf@plt-0x20>
   10a00:	asrs	r6, r6, #2
   10a04:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a08:	mov	r4, #0
   10a0c:	add	r4, r4, #1
   10a10:	ldr	r3, [r5], #4
   10a14:	mov	r2, r9
   10a18:	mov	r1, r8
   10a1c:	mov	r0, r7
   10a20:	blx	r3
   10a24:	cmp	r6, r4
   10a28:	bne	10a0c <__libc_csu_init@@Base+0x34>
   10a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a30:	andeq	r0, r1, ip, lsl r5
   10a34:	andeq	r0, r1, r4, lsl r5

00010a38 <__libc_csu_fini@@Base>:
   10a38:	bx	lr

Disassembly of section .fini:

00010a3c <.fini>:
   10a3c:	push	{r3, lr}
   10a40:	pop	{r3, pc}
