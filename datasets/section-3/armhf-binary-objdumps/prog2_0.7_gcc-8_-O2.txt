
../repos/prog2/0.7:     file format elf32-littlearm


Disassembly of section .init:

000105b4 <.init>:
   105b4:	push	{r3, lr}
   105b8:	bl	106bc <_start@@Base+0x3c>
   105bc:	pop	{r3, pc}

Disassembly of section .plt:

000105c0 <printf@plt-0x14>:
   105c0:	push	{lr}		; (str lr, [sp, #-4]!)
   105c4:	ldr	lr, [pc, #4]	; 105d0 <printf@plt-0x4>
   105c8:	add	lr, pc, lr
   105cc:	ldr	pc, [lr, #8]!
   105d0:	andeq	r0, r1, r0, lsr sl

000105d4 <printf@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #16, 20	; 0x10000
   105dc:	ldr	pc, [ip, #2608]!	; 0xa30

000105e0 <__libc_start_main@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2600]!	; 0xa28

000105ec <__gmon_start__@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2592]!	; 0xa20

000105f8 <memset@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2584]!	; 0xa18

00010604 <__isoc99_scanf@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2576]!	; 0xa10

00010610 <abort@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2568]!	; 0xa08

Disassembly of section .text:

00010620 <main@@Base>:
   10620:	str	r4, [sp, #-8]!
   10624:	mov	r2, #400	; 0x190
   10628:	mov	r1, #0
   1062c:	str	lr, [sp, #4]
   10630:	sub	sp, sp, #400	; 0x190
   10634:	mov	r4, sp
   10638:	mov	r0, r4
   1063c:	bl	105f8 <memset@plt>
   10640:	mov	r0, r4
   10644:	bl	107d8 <lernotas@@Base>
   10648:	mov	r1, r0
   1064c:	mov	r0, r4
   10650:	bl	10770 <media@@Base>
   10654:	vcvt.f64.f32	d7, s0
   10658:	ldr	r0, [pc, #28]	; 1067c <main@@Base+0x5c>
   1065c:	add	r0, pc, r0
   10660:	vmov	r2, r3, d7
   10664:	bl	105d4 <printf@plt>
   10668:	mov	r0, #0
   1066c:	add	sp, sp, #400	; 0x190
   10670:	ldr	r4, [sp]
   10674:	add	sp, sp, #4
   10678:	pop	{pc}		; (ldr pc, [sp], #4)
   1067c:	muleq	r0, r8, r2

00010680 <_start@@Base>:
   10680:	mov	fp, #0
   10684:	mov	lr, #0
   10688:	pop	{r1}		; (ldr r1, [sp], #4)
   1068c:	mov	r2, sp
   10690:	push	{r2}		; (str r2, [sp, #-4]!)
   10694:	push	{r0}		; (str r0, [sp, #-4]!)
   10698:	ldr	ip, [pc, #16]	; 106b0 <_start@@Base+0x30>
   1069c:	push	{ip}		; (str ip, [sp, #-4]!)
   106a0:	ldr	r0, [pc, #12]	; 106b4 <_start@@Base+0x34>
   106a4:	ldr	r3, [pc, #12]	; 106b8 <_start@@Base+0x38>
   106a8:	bl	105e0 <__libc_start_main@plt>
   106ac:	bl	10610 <abort@plt>
   106b0:	andeq	r0, r1, r4, ror #17
   106b4:	andeq	r0, r1, r0, lsr #12
   106b8:	andeq	r0, r1, r4, lsl #17
   106bc:	ldr	r3, [pc, #20]	; 106d8 <_start@@Base+0x58>
   106c0:	ldr	r2, [pc, #20]	; 106dc <_start@@Base+0x5c>
   106c4:	add	r3, pc, r3
   106c8:	ldr	r2, [r3, r2]
   106cc:	cmp	r2, #0
   106d0:	bxeq	lr
   106d4:	b	105ec <__gmon_start__@plt>
   106d8:	andeq	r0, r1, r4, lsr r9
   106dc:	andeq	r0, r0, r4, lsr #32
   106e0:	ldr	r0, [pc, #24]	; 10700 <_start@@Base+0x80>
   106e4:	ldr	r3, [pc, #24]	; 10704 <_start@@Base+0x84>
   106e8:	cmp	r3, r0
   106ec:	bxeq	lr
   106f0:	ldr	r3, [pc, #16]	; 10708 <_start@@Base+0x88>
   106f4:	cmp	r3, #0
   106f8:	bxeq	lr
   106fc:	bx	r3
   10700:	andeq	r1, r2, r0, lsr r0
   10704:	andeq	r1, r2, r0, lsr r0
   10708:	andeq	r0, r0, r0
   1070c:	ldr	r0, [pc, #36]	; 10738 <_start@@Base+0xb8>
   10710:	ldr	r1, [pc, #36]	; 1073c <_start@@Base+0xbc>
   10714:	sub	r1, r1, r0
   10718:	asr	r1, r1, #2
   1071c:	add	r1, r1, r1, lsr #31
   10720:	asrs	r1, r1, #1
   10724:	bxeq	lr
   10728:	ldr	r3, [pc, #16]	; 10740 <_start@@Base+0xc0>
   1072c:	cmp	r3, #0
   10730:	bxeq	lr
   10734:	bx	r3
   10738:	andeq	r1, r2, r0, lsr r0
   1073c:	andeq	r1, r2, r0, lsr r0
   10740:	andeq	r0, r0, r0
   10744:	push	{r4, lr}
   10748:	ldr	r4, [pc, #24]	; 10768 <_start@@Base+0xe8>
   1074c:	ldrb	r3, [r4]
   10750:	cmp	r3, #0
   10754:	popne	{r4, pc}
   10758:	bl	106e0 <_start@@Base+0x60>
   1075c:	mov	r3, #1
   10760:	strb	r3, [r4]
   10764:	pop	{r4, pc}
   10768:	andeq	r1, r2, r0, lsr r0
   1076c:	b	1070c <_start@@Base+0x8c>

00010770 <media@@Base>:
   10770:	cmp	r1, #0
   10774:	vldr	s14, [pc, #84]	; 107d0 <media@@Base+0x60>
   10778:	ble	107b8 <media@@Base+0x48>
   1077c:	vldr	d5, [pc, #68]	; 107c8 <media@@Base+0x58>
   10780:	add	r3, r0, r1, lsl #2
   10784:	vldr	s9, [pc, #72]	; 107d4 <media@@Base+0x64>
   10788:	vldmia	r0!, {s15}
   1078c:	vcvt.f64.f32	d6, s15
   10790:	vcmpe.f64	d6, d5
   10794:	vmrs	APSR_nzcv, fpscr
   10798:	blt	107ac <media@@Base+0x3c>
   1079c:	vcmpe.f32	s15, s9
   107a0:	vmrs	APSR_nzcv, fpscr
   107a4:	vaddmi.f32	s14, s14, s9
   107a8:	bmi	107b0 <media@@Base+0x40>
   107ac:	vadd.f32	s14, s14, s15
   107b0:	cmp	r0, r3
   107b4:	bne	10788 <media@@Base+0x18>
   107b8:	vmov	s15, r1
   107bc:	vcvt.f32.s32	s0, s15
   107c0:	vdiv.f32	s0, s14, s0
   107c4:	bx	lr
   107c8:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   107cc:	mlami	r2, r9, r9, r9
   107d0:	andeq	r0, r0, r0
   107d4:	tstmi	r8, r0

000107d8 <lernotas@@Base>:
   107d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   107dc:	mov	r5, r0
   107e0:	mov	r4, #0
   107e4:	strd	r6, [sp, #8]
   107e8:	str	r8, [sp, #16]
   107ec:	ldr	r8, [pc, #140]	; 10880 <lernotas@@Base+0xa8>
   107f0:	str	lr, [sp, #20]
   107f4:	vpush	{d8-d9}
   107f8:	sub	sp, sp, #8
   107fc:	add	r7, sp, #4
   10800:	mov	r6, sp
   10804:	vldr	d9, [pc, #100]	; 10870 <lernotas@@Base+0x98>
   10808:	add	r8, pc, r8
   1080c:	vldr	d8, [pc, #100]	; 10878 <lernotas@@Base+0xa0>
   10810:	b	10838 <lernotas@@Base+0x60>
   10814:	vldr	s12, [sp]
   10818:	add	r4, r4, #1
   1081c:	vldr	s14, [sp, #4]
   10820:	vcvt.f64.f32	d6, s12
   10824:	vcvt.f64.f32	d7, s14
   10828:	vmul.f64	d7, d7, d8
   1082c:	vmla.f64	d7, d6, d9
   10830:	vcvt.f32.f64	s14, d7
   10834:	vstmia	r5!, {s14}
   10838:	mov	r2, r7
   1083c:	mov	r1, r6
   10840:	mov	r0, r8
   10844:	bl	10604 <__isoc99_scanf@plt>
   10848:	cmp	r0, #2
   1084c:	beq	10814 <lernotas@@Base+0x3c>
   10850:	mov	r0, r4
   10854:	add	sp, sp, #8
   10858:	vpop	{d8-d9}
   1085c:	ldrd	r4, [sp]
   10860:	ldrd	r6, [sp, #8]
   10864:	ldr	r8, [sp, #16]
   10868:	add	sp, sp, #20
   1086c:	pop	{pc}		; (ldr pc, [sp], #4)
   10870:	teqcc	r3, #-872415232	; 0xcc000000
   10874:	svccc	0x00e33333
   10878:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1087c:	svccc	0x00d99999
   10880:	andeq	r0, r0, r4, ror #1

00010884 <__libc_csu_init@@Base>:
   10884:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10888:	mov	r7, r0
   1088c:	ldr	r6, [pc, #72]	; 108dc <__libc_csu_init@@Base+0x58>
   10890:	ldr	r5, [pc, #72]	; 108e0 <__libc_csu_init@@Base+0x5c>
   10894:	add	r6, pc, r6
   10898:	add	r5, pc, r5
   1089c:	sub	r6, r6, r5
   108a0:	mov	r8, r1
   108a4:	mov	r9, r2
   108a8:	bl	105b4 <printf@plt-0x20>
   108ac:	asrs	r6, r6, #2
   108b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b4:	mov	r4, #0
   108b8:	add	r4, r4, #1
   108bc:	ldr	r3, [r5], #4
   108c0:	mov	r2, r9
   108c4:	mov	r1, r8
   108c8:	mov	r0, r7
   108cc:	blx	r3
   108d0:	cmp	r6, r4
   108d4:	bne	108b8 <__libc_csu_init@@Base+0x34>
   108d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108dc:	andeq	r0, r1, r8, ror r6
   108e0:	andeq	r0, r1, r0, ror r6

000108e4 <__libc_csu_fini@@Base>:
   108e4:	bx	lr

Disassembly of section .fini:

000108e8 <.fini>:
   108e8:	push	{r3, lr}
   108ec:	pop	{r3, pc}
