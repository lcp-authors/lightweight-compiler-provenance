
../repos/prog2/0.7:     file format elf32-littlearm


Disassembly of section .init:

000105dc <.init>:
   105dc:	push	{r3, lr}
   105e0:	bl	10684 <_start@@Base+0x3c>
   105e4:	pop	{r3, pc}

Disassembly of section .plt:

000105e8 <printf@plt-0x14>:
   105e8:	push	{lr}		; (str lr, [sp, #-4]!)
   105ec:	ldr	lr, [pc, #4]	; 105f8 <printf@plt-0x4>
   105f0:	add	lr, pc, lr
   105f4:	ldr	pc, [lr, #8]!
   105f8:	andeq	r0, r1, r8, lsl #20

000105fc <printf@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2568]!	; 0xa08

00010608 <__libc_start_main@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2560]!	; 0xa00

00010614 <__gmon_start__@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2552]!	; 0x9f8

00010620 <memset@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2544]!	; 0x9f0

0001062c <__isoc99_scanf@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2536]!	; 0x9e8

00010638 <abort@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2528]!	; 0x9e0

Disassembly of section .text:

00010648 <_start@@Base>:
   10648:	mov	fp, #0
   1064c:	mov	lr, #0
   10650:	pop	{r1}		; (ldr r1, [sp], #4)
   10654:	mov	r2, sp
   10658:	push	{r2}		; (str r2, [sp, #-4]!)
   1065c:	push	{r0}		; (str r0, [sp, #-4]!)
   10660:	ldr	ip, [pc, #16]	; 10678 <_start@@Base+0x30>
   10664:	push	{ip}		; (str ip, [sp, #-4]!)
   10668:	ldr	r0, [pc, #12]	; 1067c <_start@@Base+0x34>
   1066c:	ldr	r3, [pc, #12]	; 10680 <_start@@Base+0x38>
   10670:	bl	10608 <__libc_start_main@plt>
   10674:	bl	10638 <abort@plt>
   10678:	andeq	r0, r1, ip, ror #19
   1067c:	andeq	r0, r1, ip, lsl r9
   10680:	andeq	r0, r1, ip, lsl #19
   10684:	ldr	r3, [pc, #20]	; 106a0 <_start@@Base+0x58>
   10688:	ldr	r2, [pc, #20]	; 106a4 <_start@@Base+0x5c>
   1068c:	add	r3, pc, r3
   10690:	ldr	r2, [r3, r2]
   10694:	cmp	r2, #0
   10698:	bxeq	lr
   1069c:	b	10614 <__gmon_start__@plt>
   106a0:	andeq	r0, r1, ip, ror #18
   106a4:	andeq	r0, r0, r4, lsr #32
   106a8:	ldr	r3, [pc, #28]	; 106cc <_start@@Base+0x84>
   106ac:	ldr	r0, [pc, #28]	; 106d0 <_start@@Base+0x88>
   106b0:	sub	r3, r3, r0
   106b4:	cmp	r3, #6
   106b8:	bxls	lr
   106bc:	ldr	r3, [pc, #16]	; 106d4 <_start@@Base+0x8c>
   106c0:	cmp	r3, #0
   106c4:	bxeq	lr
   106c8:	bx	r3
   106cc:	andeq	r1, r2, r3, lsr r0
   106d0:	andeq	r1, r2, r0, lsr r0
   106d4:	andeq	r0, r0, r0
   106d8:	ldr	r1, [pc, #36]	; 10704 <_start@@Base+0xbc>
   106dc:	ldr	r0, [pc, #36]	; 10708 <_start@@Base+0xc0>
   106e0:	sub	r1, r1, r0
   106e4:	asr	r1, r1, #2
   106e8:	add	r1, r1, r1, lsr #31
   106ec:	asrs	r1, r1, #1
   106f0:	bxeq	lr
   106f4:	ldr	r3, [pc, #16]	; 1070c <_start@@Base+0xc4>
   106f8:	cmp	r3, #0
   106fc:	bxeq	lr
   10700:	bx	r3
   10704:	andeq	r1, r2, r0, lsr r0
   10708:	andeq	r1, r2, r0, lsr r0
   1070c:	andeq	r0, r0, r0
   10710:	push	{r4, lr}
   10714:	ldr	r4, [pc, #24]	; 10734 <_start@@Base+0xec>
   10718:	ldrb	r3, [r4]
   1071c:	cmp	r3, #0
   10720:	popne	{r4, pc}
   10724:	bl	106a8 <_start@@Base+0x60>
   10728:	mov	r3, #1
   1072c:	strb	r3, [r4]
   10730:	pop	{r4, pc}
   10734:	andeq	r1, r2, r0, lsr r0
   10738:	ldr	r0, [pc, #40]	; 10768 <_start@@Base+0x120>
   1073c:	ldr	r3, [r0]
   10740:	cmp	r3, #0
   10744:	bne	1074c <_start@@Base+0x104>
   10748:	b	106d8 <_start@@Base+0x90>
   1074c:	ldr	r3, [pc, #24]	; 1076c <_start@@Base+0x124>
   10750:	cmp	r3, #0
   10754:	beq	10748 <_start@@Base+0x100>
   10758:	push	{r4, lr}
   1075c:	blx	r3
   10760:	pop	{r4, lr}
   10764:	b	106d8 <_start@@Base+0x90>
   10768:	andeq	r0, r2, r4, lsl pc
   1076c:	andeq	r0, r0, r0

00010770 <media@@Base>:
   10770:	push	{fp}		; (str fp, [sp, #-4]!)
   10774:	add	fp, sp, #0
   10778:	sub	sp, sp, #20
   1077c:	str	r0, [fp, #-16]
   10780:	str	r1, [fp, #-20]	; 0xffffffec
   10784:	mov	r3, #0
   10788:	str	r3, [fp, #-12]
   1078c:	mov	r3, #0
   10790:	str	r3, [fp, #-8]
   10794:	b	10824 <media@@Base+0xb4>
   10798:	ldr	r3, [fp, #-8]
   1079c:	lsl	r3, r3, #2
   107a0:	ldr	r2, [fp, #-16]
   107a4:	add	r3, r2, r3
   107a8:	vldr	s15, [r3]
   107ac:	vcvt.f64.f32	d7, s15
   107b0:	vldr	d6, [pc, #168]	; 10860 <media@@Base+0xf0>
   107b4:	vcmpe.f64	d7, d6
   107b8:	vmrs	APSR_nzcv, fpscr
   107bc:	blt	107f8 <media@@Base+0x88>
   107c0:	ldr	r3, [fp, #-8]
   107c4:	lsl	r3, r3, #2
   107c8:	ldr	r2, [fp, #-16]
   107cc:	add	r3, r2, r3
   107d0:	vldr	s15, [r3]
   107d4:	vldr	s14, [pc, #140]	; 10868 <media@@Base+0xf8>
   107d8:	vcmpe.f32	s15, s14
   107dc:	vmrs	APSR_nzcv, fpscr
   107e0:	bpl	107f8 <media@@Base+0x88>
   107e4:	vldr	s15, [fp, #-12]
   107e8:	vldr	s14, [pc, #120]	; 10868 <media@@Base+0xf8>
   107ec:	vadd.f32	s15, s15, s14
   107f0:	vstr	s15, [fp, #-12]
   107f4:	b	10818 <media@@Base+0xa8>
   107f8:	ldr	r3, [fp, #-8]
   107fc:	lsl	r3, r3, #2
   10800:	ldr	r2, [fp, #-16]
   10804:	add	r3, r2, r3
   10808:	vldr	s15, [r3]
   1080c:	vldr	s14, [fp, #-12]
   10810:	vadd.f32	s15, s14, s15
   10814:	vstr	s15, [fp, #-12]
   10818:	ldr	r3, [fp, #-8]
   1081c:	add	r3, r3, #1
   10820:	str	r3, [fp, #-8]
   10824:	ldr	r2, [fp, #-8]
   10828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1082c:	cmp	r2, r3
   10830:	blt	10798 <media@@Base+0x28>
   10834:	ldr	r3, [fp, #-20]	; 0xffffffec
   10838:	vmov	s15, r3
   1083c:	vcvt.f32.s32	s15, s15
   10840:	vldr	s14, [fp, #-12]
   10844:	vdiv.f32	s13, s14, s15
   10848:	vmov.f32	s15, s13
   1084c:	vmov.f32	s0, s15
   10850:	add	sp, fp, #0
   10854:	pop	{fp}		; (ldr fp, [sp], #4)
   10858:	bx	lr
   1085c:	nop			; (mov r0, r0)
   10860:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   10864:	mlami	r2, r9, r9, r9
   10868:	tstmi	r8, r0

0001086c <lernotas@@Base>:
   1086c:	push	{fp, lr}
   10870:	add	fp, sp, #4
   10874:	sub	sp, sp, #24
   10878:	str	r0, [fp, #-24]	; 0xffffffe8
   1087c:	mov	r3, #0
   10880:	str	r3, [fp, #-8]
   10884:	b	108d0 <lernotas@@Base+0x64>
   10888:	ldr	r3, [fp, #-8]
   1088c:	lsl	r3, r3, #2
   10890:	ldr	r2, [fp, #-24]	; 0xffffffe8
   10894:	add	r3, r2, r3
   10898:	vldr	s15, [fp, #-12]
   1089c:	vcvt.f64.f32	d7, s15
   108a0:	vldr	d6, [pc, #96]	; 10908 <lernotas@@Base+0x9c>
   108a4:	vmul.f64	d6, d7, d6
   108a8:	vldr	s15, [fp, #-16]
   108ac:	vcvt.f64.f32	d7, s15
   108b0:	vldr	d5, [pc, #88]	; 10910 <lernotas@@Base+0xa4>
   108b4:	vmul.f64	d7, d7, d5
   108b8:	vadd.f64	d7, d6, d7
   108bc:	vcvt.f32.f64	s15, d7
   108c0:	vstr	s15, [r3]
   108c4:	ldr	r3, [fp, #-8]
   108c8:	add	r3, r3, #1
   108cc:	str	r3, [fp, #-8]
   108d0:	sub	r2, fp, #16
   108d4:	sub	r3, fp, #12
   108d8:	mov	r1, r3
   108dc:	ldr	r3, [pc, #52]	; 10918 <lernotas@@Base+0xac>
   108e0:	add	r3, pc, r3
   108e4:	mov	r0, r3
   108e8:	bl	1062c <__isoc99_scanf@plt>
   108ec:	mov	r3, r0
   108f0:	cmp	r3, #2
   108f4:	beq	10888 <lernotas@@Base+0x1c>
   108f8:	ldr	r3, [fp, #-8]
   108fc:	mov	r0, r3
   10900:	sub	sp, fp, #4
   10904:	pop	{fp, pc}
   10908:	teqcc	r3, #-872415232	; 0xcc000000
   1090c:	svccc	0x00e33333
   10910:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   10914:	svccc	0x00d99999
   10918:	andeq	r0, r0, r4, lsl r1

0001091c <main@@Base>:
   1091c:	push	{fp, lr}
   10920:	add	fp, sp, #4
   10924:	sub	sp, sp, #408	; 0x198
   10928:	sub	r3, fp, #408	; 0x198
   1092c:	mov	r2, #400	; 0x190
   10930:	mov	r1, #0
   10934:	mov	r0, r3
   10938:	bl	10620 <memset@plt>
   1093c:	sub	r3, fp, #408	; 0x198
   10940:	mov	r0, r3
   10944:	bl	1086c <lernotas@@Base>
   10948:	str	r0, [fp, #-8]
   1094c:	sub	r3, fp, #408	; 0x198
   10950:	ldr	r1, [fp, #-8]
   10954:	mov	r0, r3
   10958:	bl	10770 <media@@Base>
   1095c:	vmov.f32	s15, s0
   10960:	vcvt.f64.f32	d7, s15
   10964:	vmov	r2, r3, d7
   10968:	ldr	r1, [pc, #24]	; 10988 <main@@Base+0x6c>
   1096c:	add	r1, pc, r1
   10970:	mov	r0, r1
   10974:	bl	105fc <printf@plt>
   10978:	mov	r3, #0
   1097c:	mov	r0, r3
   10980:	sub	sp, fp, #4
   10984:	pop	{fp, pc}
   10988:	muleq	r0, r0, r0

0001098c <__libc_csu_init@@Base>:
   1098c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10990:	mov	r7, r0
   10994:	ldr	r6, [pc, #72]	; 109e4 <__libc_csu_init@@Base+0x58>
   10998:	ldr	r5, [pc, #72]	; 109e8 <__libc_csu_init@@Base+0x5c>
   1099c:	add	r6, pc, r6
   109a0:	add	r5, pc, r5
   109a4:	sub	r6, r6, r5
   109a8:	mov	r8, r1
   109ac:	mov	r9, r2
   109b0:	bl	105dc <printf@plt-0x20>
   109b4:	asrs	r6, r6, #2
   109b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109bc:	mov	r4, #0
   109c0:	add	r4, r4, #1
   109c4:	ldr	r3, [r5], #4
   109c8:	mov	r2, r9
   109cc:	mov	r1, r8
   109d0:	mov	r0, r7
   109d4:	blx	r3
   109d8:	cmp	r6, r4
   109dc:	bne	109c0 <__libc_csu_init@@Base+0x34>
   109e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e4:	andeq	r0, r1, ip, ror #10
   109e8:	andeq	r0, r1, r4, ror #10

000109ec <__libc_csu_fini@@Base>:
   109ec:	bx	lr

Disassembly of section .fini:

000109f0 <.fini>:
   109f0:	push	{r3, lr}
   109f4:	pop	{r3, pc}
