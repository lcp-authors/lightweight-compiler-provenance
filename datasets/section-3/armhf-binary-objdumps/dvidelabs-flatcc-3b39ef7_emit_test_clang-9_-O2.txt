
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c0 <.init>:
   123c0:	push	{r3, lr}
   123c4:	bl	124f4 <_start@@Base+0x3c>
   123c8:	pop	{r3, pc}

Disassembly of section .plt:

000123cc <printf@plt-0x14>:
   123cc:	push	{lr}		; (str lr, [sp, #-4]!)
   123d0:	ldr	lr, [pc, #4]	; 123dc <printf@plt-0x4>
   123d4:	add	lr, pc, lr
   123d8:	ldr	pc, [lr, #8]!
   123dc:	andeq	r7, r1, r4, lsr #24

000123e0 <printf@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #94208	; 0x17000
   123e8:	ldr	pc, [ip, #3108]!	; 0xc24

000123ec <free@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #94208	; 0x17000
   123f4:	ldr	pc, [ip, #3100]!	; 0xc1c

000123f8 <memcpy@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #94208	; 0x17000
   12400:	ldr	pc, [ip, #3092]!	; 0xc14

00012404 <realloc@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #94208	; 0x17000
   1240c:	ldr	pc, [ip, #3084]!	; 0xc0c

00012410 <fwrite@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #94208	; 0x17000
   12418:	ldr	pc, [ip, #3076]!	; 0xc04

0001241c <puts@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #94208	; 0x17000
   12424:	ldr	pc, [ip, #3068]!	; 0xbfc

00012428 <malloc@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #94208	; 0x17000
   12430:	ldr	pc, [ip, #3060]!	; 0xbf4

00012434 <__libc_start_main@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #94208	; 0x17000
   1243c:	ldr	pc, [ip, #3052]!	; 0xbec

00012440 <__gmon_start__@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #94208	; 0x17000
   12448:	ldr	pc, [ip, #3044]!	; 0xbe4

0001244c <bcmp@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #94208	; 0x17000
   12454:	ldr	pc, [ip, #3036]!	; 0xbdc

00012458 <strlen@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #94208	; 0x17000
   12460:	ldr	pc, [ip, #3028]!	; 0xbd4

00012464 <fprintf@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #94208	; 0x17000
   1246c:	ldr	pc, [ip, #3020]!	; 0xbcc

00012470 <posix_memalign@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #94208	; 0x17000
   12478:	ldr	pc, [ip, #3012]!	; 0xbc4

0001247c <memset@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #94208	; 0x17000
   12484:	ldr	pc, [ip, #3004]!	; 0xbbc

00012488 <memchr@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #94208	; 0x17000
   12490:	ldr	pc, [ip, #2996]!	; 0xbb4

00012494 <fputc@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #94208	; 0x17000
   1249c:	ldr	pc, [ip, #2988]!	; 0xbac

000124a0 <abort@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #94208	; 0x17000
   124a8:	ldr	pc, [ip, #2980]!	; 0xba4

000124ac <__assert_fail@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #94208	; 0x17000
   124b4:	ldr	pc, [ip, #2972]!	; 0xb9c

Disassembly of section .text:

000124b8 <_start@@Base>:
   124b8:	mov	fp, #0
   124bc:	mov	lr, #0
   124c0:	pop	{r1}		; (ldr r1, [sp], #4)
   124c4:	mov	r2, sp
   124c8:	push	{r2}		; (str r2, [sp, #-4]!)
   124cc:	push	{r0}		; (str r0, [sp, #-4]!)
   124d0:	ldr	ip, [pc, #16]	; 124e8 <_start@@Base+0x30>
   124d4:	push	{ip}		; (str ip, [sp, #-4]!)
   124d8:	ldr	r0, [pc, #12]	; 124ec <_start@@Base+0x34>
   124dc:	ldr	r3, [pc, #12]	; 124f0 <_start@@Base+0x38>
   124e0:	bl	12434 <__libc_start_main@plt>
   124e4:	bl	124a0 <abort@plt>
   124e8:	andeq	r8, r1, r8, lsr r1
   124ec:	andeq	r2, r1, r8, lsr ip
   124f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   124f4:	ldr	r3, [pc, #20]	; 12510 <_start@@Base+0x58>
   124f8:	ldr	r2, [pc, #20]	; 12514 <_start@@Base+0x5c>
   124fc:	add	r3, pc, r3
   12500:	ldr	r2, [r3, r2]
   12504:	cmp	r2, #0
   12508:	bxeq	lr
   1250c:	b	12440 <__gmon_start__@plt>
   12510:	strdeq	r7, [r1], -ip
   12514:	andeq	r0, r0, r0, rrx
   12518:	ldr	r0, [pc, #24]	; 12538 <_start@@Base+0x80>
   1251c:	ldr	r3, [pc, #24]	; 1253c <_start@@Base+0x84>
   12520:	cmp	r3, r0
   12524:	bxeq	lr
   12528:	ldr	r3, [pc, #16]	; 12540 <_start@@Base+0x88>
   1252c:	cmp	r3, #0
   12530:	bxeq	lr
   12534:	bx	r3
   12538:	andeq	sl, r2, r4, ror r0
   1253c:	andeq	sl, r2, r4, ror r0
   12540:	andeq	r0, r0, r0
   12544:	ldr	r0, [pc, #36]	; 12570 <_start@@Base+0xb8>
   12548:	ldr	r1, [pc, #36]	; 12574 <_start@@Base+0xbc>
   1254c:	sub	r1, r1, r0
   12550:	asr	r1, r1, #2
   12554:	add	r1, r1, r1, lsr #31
   12558:	asrs	r1, r1, #1
   1255c:	bxeq	lr
   12560:	ldr	r3, [pc, #16]	; 12578 <_start@@Base+0xc0>
   12564:	cmp	r3, #0
   12568:	bxeq	lr
   1256c:	bx	r3
   12570:	andeq	sl, r2, r4, ror r0
   12574:	andeq	sl, r2, r4, ror r0
   12578:	andeq	r0, r0, r0
   1257c:	push	{r4, lr}
   12580:	ldr	r4, [pc, #24]	; 125a0 <_start@@Base+0xe8>
   12584:	ldrb	r3, [r4]
   12588:	cmp	r3, #0
   1258c:	popne	{r4, pc}
   12590:	bl	12518 <_start@@Base+0x60>
   12594:	mov	r3, #1
   12598:	strb	r3, [r4]
   1259c:	pop	{r4, pc}
   125a0:	andeq	sl, r2, r4, ror r0
   125a4:	b	12544 <_start@@Base+0x8c>

000125a8 <dbg_emitter@@Base>:
   125a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125ac:	add	fp, sp, #24
   125b0:	ldr	r0, [pc, #164]	; 1265c <dbg_emitter@@Base+0xb4>
   125b4:	mov	r4, r3
   125b8:	ldr	r3, [fp, #8]
   125bc:	mov	r6, r1
   125c0:	mov	r5, r2
   125c4:	mov	r1, r2
   125c8:	mov	r2, r4
   125cc:	add	r0, pc, r0
   125d0:	bl	123e0 <printf@plt>
   125d4:	cmp	r5, #1
   125d8:	blt	12654 <dbg_emitter@@Base+0xac>
   125dc:	ldr	r7, [pc, #124]	; 12660 <dbg_emitter@@Base+0xb8>
   125e0:	add	r6, r6, #4
   125e4:	ldr	r7, [pc, r7]
   125e8:	ldr	r8, [pc, #116]	; 12664 <dbg_emitter@@Base+0xbc>
   125ec:	ldr	r9, [pc, #116]	; 12668 <dbg_emitter@@Base+0xc0>
   125f0:	add	r8, pc, r8
   125f4:	add	r9, pc, r9
   125f8:	b	1260c <dbg_emitter@@Base+0x64>
   125fc:	ldr	r0, [r6], #8
   12600:	subs	r5, r5, #1
   12604:	add	r4, r0, r4
   12608:	beq	12654 <dbg_emitter@@Base+0xac>
   1260c:	ldr	r0, [r6, #-4]
   12610:	cmp	r0, r7
   12614:	beq	12624 <dbg_emitter@@Base+0x7c>
   12618:	cmp	r0, #0
   1261c:	bne	125fc <dbg_emitter@@Base+0x54>
   12620:	b	12640 <dbg_emitter@@Base+0x98>
   12624:	ldr	r2, [r6]
   12628:	mov	r0, r8
   1262c:	mov	r1, r4
   12630:	bl	123e0 <printf@plt>
   12634:	ldr	r0, [r6, #-4]
   12638:	cmp	r0, #0
   1263c:	bne	125fc <dbg_emitter@@Base+0x54>
   12640:	ldr	r2, [r6]
   12644:	mov	r0, r9
   12648:	mov	r1, r4
   1264c:	bl	123e0 <printf@plt>
   12650:	b	125fc <dbg_emitter@@Base+0x54>
   12654:	mov	r0, #0
   12658:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1265c:	andeq	r5, r0, r8, ror fp
   12660:	andeq	r7, r1, r8, ror #20
   12664:	andeq	r5, r0, r5, lsl #23
   12668:	andeq	r5, r0, r2, lsr #23

0001266c <debug_test@@Base>:
   1266c:	push	{r4, r5, r6, r7, fp, lr}
   12670:	add	fp, sp, #16
   12674:	sub	sp, sp, #280	; 0x118
   12678:	vmov.i32	q8, #0	; 0x00000000
   1267c:	add	r4, sp, #8
   12680:	mov	r5, #0
   12684:	add	r0, r4, #16
   12688:	mov	r1, r4
   1268c:	str	r5, [sp, #40]	; 0x28
   12690:	vst1.64	{d16-d17}, [r0]
   12694:	mov	r0, #36	; 0x24
   12698:	vst1.64	{d16-d17}, [r1], r0
   1269c:	str	r5, [r1]
   126a0:	ldr	r0, [pc, #104]	; 12710 <debug_test@@Base+0xa4>
   126a4:	add	r0, pc, r0
   126a8:	bl	1241c <puts@plt>
   126ac:	str	r5, [sp]
   126b0:	add	r5, sp, #48	; 0x30
   126b4:	mov	r2, #0
   126b8:	mov	r3, #0
   126bc:	ldr	r1, [pc, #80]	; 12714 <debug_test@@Base+0xa8>
   126c0:	mov	r0, r5
   126c4:	ldr	r1, [pc, r1]
   126c8:	bl	12e3c <flatcc_builder_custom_init@@Base>
   126cc:	mvn	r0, #-1073741824	; 0xc0000000
   126d0:	mov	r1, #4
   126d4:	mov	r2, #10
   126d8:	mov	r3, #4
   126dc:	str	r1, [sp]
   126e0:	str	r0, [sp, #4]
   126e4:	mov	r0, r5
   126e8:	mov	r1, r4
   126ec:	bl	15e20 <flatcc_builder_create_vector@@Base>
   126f0:	mov	r1, r0
   126f4:	mov	r0, r5
   126f8:	bl	12718 <debug_test@@Base+0xac>
   126fc:	mov	r0, r5
   12700:	bl	13220 <flatcc_builder_clear@@Base>
   12704:	mov	r0, #0
   12708:	sub	sp, fp, #16
   1270c:	pop	{r4, r5, r6, r7, fp, pc}
   12710:	ldrdeq	r5, [r0], -r7
   12714:	andeq	r7, r1, ip, lsl #19
   12718:	push	{r4, r5, r6, r7, fp, lr}
   1271c:	add	fp, sp, #16
   12720:	mov	r5, r1
   12724:	mov	r1, #0
   12728:	mov	r2, #0
   1272c:	mov	r3, #0
   12730:	mov	r4, r0
   12734:	mov	r7, #0
   12738:	bl	13c58 <flatcc_builder_start_buffer@@Base>
   1273c:	cmp	r0, #0
   12740:	popne	{r4, r5, r6, r7, fp, pc}
   12744:	mov	r0, r4
   12748:	mov	r1, #3
   1274c:	bl	15234 <flatcc_builder_start_table@@Base>
   12750:	cmp	r0, #0
   12754:	bne	12788 <debug_test@@Base+0x11c>
   12758:	mov	r0, r4
   1275c:	mov	r1, #0
   12760:	mov	r2, #8
   12764:	mov	r3, #8
   12768:	mov	r7, #0
   1276c:	bl	166d0 <flatcc_builder_table_add@@Base>
   12770:	cmp	r0, #0
   12774:	movne	r7, #0
   12778:	movne	r6, #42	; 0x2a
   1277c:	strdne	r6, [r0]
   12780:	cmpne	r5, #0
   12784:	bne	12798 <debug_test@@Base+0x12c>
   12788:	mov	r0, r4
   1278c:	mov	r1, r7
   12790:	pop	{r4, r5, r6, r7, fp, lr}
   12794:	b	13e58 <flatcc_builder_end_buffer@@Base>
   12798:	mov	r0, r4
   1279c:	mov	r1, #2
   127a0:	bl	1651c <flatcc_builder_table_add_offset@@Base>
   127a4:	cmp	r0, #0
   127a8:	beq	12788 <debug_test@@Base+0x11c>
   127ac:	str	r5, [r0]
   127b0:	mov	r0, r4
   127b4:	mov	r1, #1
   127b8:	mov	r2, #1
   127bc:	mov	r3, #1
   127c0:	mov	r5, #1
   127c4:	bl	166d0 <flatcc_builder_table_add@@Base>
   127c8:	cmp	r0, #0
   127cc:	beq	12788 <debug_test@@Base+0x11c>
   127d0:	strb	r5, [r0]
   127d4:	mov	r0, r4
   127d8:	mov	r2, #0
   127dc:	ldr	r1, [pc, #60]	; 12820 <debug_test@@Base+0x1b4>
   127e0:	add	r1, pc, r1
   127e4:	bl	15bd0 <flatcc_builder_check_required@@Base>
   127e8:	cmp	r0, #0
   127ec:	beq	12800 <debug_test@@Base+0x194>
   127f0:	mov	r0, r4
   127f4:	bl	15c5c <flatcc_builder_end_table@@Base>
   127f8:	mov	r7, r0
   127fc:	b	12788 <debug_test@@Base+0x11c>
   12800:	ldr	r0, [pc, #28]	; 12824 <debug_test@@Base+0x1b8>
   12804:	ldr	r1, [pc, #28]	; 12828 <debug_test@@Base+0x1bc>
   12808:	ldr	r3, [pc, #28]	; 1282c <debug_test@@Base+0x1c0>
   1280c:	mov	r2, #21
   12810:	add	r0, pc, r0
   12814:	add	r1, pc, r1
   12818:	add	r3, pc, r3
   1281c:	bl	124ac <__assert_fail@plt>
   12820:	andeq	r5, r0, sl, lsr #24
   12824:	andeq	r5, r0, r1, asr #20
   12828:	andeq	r5, r0, r9, lsr #21
   1282c:	andeq	r5, r0, r9, lsl fp

00012830 <emit_test@@Base>:
   12830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12834:	add	fp, sp, #28
   12838:	sub	sp, sp, #284	; 0x11c
   1283c:	ldr	r0, [pc, #884]	; 12bb8 <emit_test@@Base+0x388>
   12840:	add	r6, sp, #28
   12844:	add	r4, sp, #8
   12848:	add	r0, pc, r0
   1284c:	vld1.64	{d16-d17}, [r0]
   12850:	mov	r0, r6
   12854:	vst1.64	{d16-d17}, [r4]
   12858:	bl	12eb0 <flatcc_builder_init@@Base>
   1285c:	mov	r0, r6
   12860:	bl	17b48 <flatcc_builder_get_emit_context@@Base>
   12864:	mov	r5, r0
   12868:	mvn	r0, #-1073741824	; 0xc0000000
   1286c:	mov	r1, #4
   12870:	mov	r2, #4
   12874:	mov	r3, #4
   12878:	str	r1, [sp]
   1287c:	str	r0, [sp, #4]
   12880:	mov	r0, r6
   12884:	mov	r1, r4
   12888:	bl	15e20 <flatcc_builder_create_vector@@Base>
   1288c:	mov	r1, r0
   12890:	mov	r0, r6
   12894:	bl	12718 <debug_test@@Base+0xac>
   12898:	ldm	r5, {r1, r2}
   1289c:	mvn	r0, #0
   128a0:	cmp	r1, r2
   128a4:	bne	12acc <emit_test@@Base+0x29c>
   128a8:	ldr	r4, [r5, #8]
   128ac:	cmp	r4, #0
   128b0:	beq	12acc <emit_test@@Base+0x29c>
   128b4:	ldr	r5, [r5, #24]
   128b8:	add	r0, sp, #28
   128bc:	bl	177f4 <flatcc_builder_get_buffer_size@@Base>
   128c0:	cmp	r5, r0
   128c4:	bne	12b34 <emit_test@@Base+0x304>
   128c8:	ldr	r6, [pc, #748]	; 12bbc <emit_test@@Base+0x38c>
   128cc:	mov	r2, r5
   128d0:	ldr	r6, [pc, r6]
   128d4:	ldr	r0, [r6]
   128d8:	ldr	r1, [pc, #736]	; 12bc0 <emit_test@@Base+0x390>
   128dc:	add	r1, pc, r1
   128e0:	bl	12464 <fprintf@plt>
   128e4:	ldr	r6, [r6]
   128e8:	ldr	r1, [pc, #724]	; 12bc4 <emit_test@@Base+0x394>
   128ec:	ldr	r2, [pc, #724]	; 12bc8 <emit_test@@Base+0x398>
   128f0:	add	r1, pc, r1
   128f4:	add	r2, pc, r2
   128f8:	mov	r0, r6
   128fc:	bl	12464 <fprintf@plt>
   12900:	cmp	r5, #0
   12904:	beq	129f0 <emit_test@@Base+0x1c0>
   12908:	ldr	sl, [pc, #700]	; 12bcc <emit_test@@Base+0x39c>
   1290c:	sub	r7, fp, #49	; 0x31
   12910:	mov	r8, #0
   12914:	add	sl, pc, sl
   12918:	ands	r9, r8, #15
   1291c:	bne	129a0 <emit_test@@Base+0x170>
   12920:	b	12980 <emit_test@@Base+0x150>
   12924:	ldr	r1, [pc, #680]	; 12bd4 <emit_test@@Base+0x3a4>
   12928:	mov	r0, r6
   1292c:	mov	r2, r8
   12930:	add	r1, pc, r1
   12934:	bl	12464 <fprintf@plt>
   12938:	ldrb	r2, [r4, r8]
   1293c:	mov	r0, r6
   12940:	mov	r1, sl
   12944:	bl	12464 <fprintf@plt>
   12948:	ldrb	r0, [r4, r8]
   1294c:	add	r8, r8, #1
   12950:	sub	r1, r0, #32
   12954:	uxtb	r1, r1
   12958:	cmp	r1, #94	; 0x5e
   1295c:	mov	r1, #0
   12960:	movwhi	r0, #46	; 0x2e
   12964:	cmp	r5, r8
   12968:	strb	r0, [r7, r9]
   1296c:	add	r0, r7, r9
   12970:	strb	r1, [r0, #1]
   12974:	beq	129b8 <emit_test@@Base+0x188>
   12978:	ands	r9, r8, #15
   1297c:	bne	129a0 <emit_test@@Base+0x170>
   12980:	cmp	r8, #0
   12984:	beq	12924 <emit_test@@Base+0xf4>
   12988:	ldr	r1, [pc, #576]	; 12bd0 <emit_test@@Base+0x3a0>
   1298c:	mov	r0, r6
   12990:	mov	r2, r7
   12994:	add	r1, pc, r1
   12998:	bl	12464 <fprintf@plt>
   1299c:	b	12924 <emit_test@@Base+0xf4>
   129a0:	tst	r8, #7
   129a4:	bne	12938 <emit_test@@Base+0x108>
   129a8:	mov	r0, #32
   129ac:	mov	r1, r6
   129b0:	bl	12494 <fputc@plt>
   129b4:	b	12938 <emit_test@@Base+0x108>
   129b8:	tst	r5, #15
   129bc:	beq	129f0 <emit_test@@Base+0x1c0>
   129c0:	ldr	r8, [pc, #528]	; 12bd8 <emit_test@@Base+0x3a8>
   129c4:	add	r7, r5, #1
   129c8:	add	r8, pc, r8
   129cc:	mov	r0, r8
   129d0:	mov	r1, #3
   129d4:	mov	r2, #1
   129d8:	mov	r3, r6
   129dc:	bl	12410 <fwrite@plt>
   129e0:	add	r0, r7, #1
   129e4:	tst	r7, #15
   129e8:	mov	r7, r0
   129ec:	bne	129cc <emit_test@@Base+0x19c>
   129f0:	ldr	r1, [pc, #484]	; 12bdc <emit_test@@Base+0x3ac>
   129f4:	sub	r2, fp, #49	; 0x31
   129f8:	mov	r0, r6
   129fc:	add	r1, pc, r1
   12a00:	bl	12464 <fprintf@plt>
   12a04:	cmp	r5, #58	; 0x3a
   12a08:	bne	12b54 <emit_test@@Base+0x324>
   12a0c:	ldr	r1, [pc, #460]	; 12be0 <emit_test@@Base+0x3b0>
   12a10:	mov	r0, r4
   12a14:	mov	r2, #58	; 0x3a
   12a18:	add	r1, pc, r1
   12a1c:	bl	1244c <bcmp@plt>
   12a20:	cmp	r0, #0
   12a24:	bne	12b74 <emit_test@@Base+0x344>
   12a28:	ldr	r0, [r4]
   12a2c:	ldr	r1, [r4, r0]!
   12a30:	mov	r0, r4
   12a34:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   12a38:	cmp	r1, #6
   12a3c:	bcc	12ad4 <emit_test@@Base+0x2a4>
   12a40:	ldrh	r2, [r0, #4]
   12a44:	cmp	r2, #0
   12a48:	beq	12ad4 <emit_test@@Base+0x2a4>
   12a4c:	mov	r3, r4
   12a50:	ldr	r2, [r3, r2]!
   12a54:	ldr	r3, [r3, #4]
   12a58:	eor	r2, r2, #42	; 0x2a
   12a5c:	orrs	r2, r2, r3
   12a60:	bne	12ad4 <emit_test@@Base+0x2a4>
   12a64:	cmp	r1, #8
   12a68:	bcc	12af4 <emit_test@@Base+0x2c4>
   12a6c:	ldrh	r2, [r0, #6]
   12a70:	cmp	r2, #0
   12a74:	beq	12af4 <emit_test@@Base+0x2c4>
   12a78:	ldrb	r2, [r4, r2]
   12a7c:	cmp	r2, #1
   12a80:	bne	12af4 <emit_test@@Base+0x2c4>
   12a84:	cmp	r1, #10
   12a88:	bcc	12b14 <emit_test@@Base+0x2e4>
   12a8c:	ldrh	r0, [r0, #8]
   12a90:	cmp	r0, #0
   12a94:	beq	12b14 <emit_test@@Base+0x2e4>
   12a98:	ldr	r0, [r4, r0]!
   12a9c:	ldr	r0, [r4, r0]!
   12aa0:	cmp	r0, #4
   12aa4:	bne	12b14 <emit_test@@Base+0x2e4>
   12aa8:	add	r0, r4, #4
   12aac:	vldr	s0, [pc, #256]	; 12bb4 <emit_test@@Base+0x384>
   12ab0:	vldr	s2, [r0, #8]
   12ab4:	vcmp.f32	s2, s0
   12ab8:	vmrs	APSR_nzcv, fpscr
   12abc:	bne	12b94 <emit_test@@Base+0x364>
   12ac0:	add	r0, sp, #28
   12ac4:	bl	13220 <flatcc_builder_clear@@Base>
   12ac8:	mov	r0, #0
   12acc:	sub	sp, fp, #28
   12ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad4:	ldr	r0, [pc, #300]	; 12c08 <emit_test@@Base+0x3d8>
   12ad8:	ldr	r1, [pc, #300]	; 12c0c <emit_test@@Base+0x3dc>
   12adc:	ldr	r3, [pc, #300]	; 12c10 <emit_test@@Base+0x3e0>
   12ae0:	mov	r2, #112	; 0x70
   12ae4:	add	r0, pc, r0
   12ae8:	add	r1, pc, r1
   12aec:	add	r3, pc, r3
   12af0:	bl	124ac <__assert_fail@plt>
   12af4:	ldr	r0, [pc, #280]	; 12c14 <emit_test@@Base+0x3e4>
   12af8:	ldr	r1, [pc, #280]	; 12c18 <emit_test@@Base+0x3e8>
   12afc:	ldr	r3, [pc, #280]	; 12c1c <emit_test@@Base+0x3ec>
   12b00:	mov	r2, #113	; 0x71
   12b04:	add	r0, pc, r0
   12b08:	add	r1, pc, r1
   12b0c:	add	r3, pc, r3
   12b10:	bl	124ac <__assert_fail@plt>
   12b14:	ldr	r0, [pc, #260]	; 12c20 <emit_test@@Base+0x3f0>
   12b18:	ldr	r1, [pc, #260]	; 12c24 <emit_test@@Base+0x3f4>
   12b1c:	ldr	r3, [pc, #260]	; 12c28 <emit_test@@Base+0x3f8>
   12b20:	mov	r2, #114	; 0x72
   12b24:	add	r0, pc, r0
   12b28:	add	r1, pc, r1
   12b2c:	add	r3, pc, r3
   12b30:	bl	124ac <__assert_fail@plt>
   12b34:	ldr	r0, [pc, #168]	; 12be4 <emit_test@@Base+0x3b4>
   12b38:	ldr	r1, [pc, #168]	; 12be8 <emit_test@@Base+0x3b8>
   12b3c:	ldr	r3, [pc, #168]	; 12bec <emit_test@@Base+0x3bc>
   12b40:	mov	r2, #101	; 0x65
   12b44:	add	r0, pc, r0
   12b48:	add	r1, pc, r1
   12b4c:	add	r3, pc, r3
   12b50:	bl	124ac <__assert_fail@plt>
   12b54:	ldr	r0, [pc, #148]	; 12bf0 <emit_test@@Base+0x3c0>
   12b58:	ldr	r1, [pc, #148]	; 12bf4 <emit_test@@Base+0x3c4>
   12b5c:	ldr	r3, [pc, #148]	; 12bf8 <emit_test@@Base+0x3c8>
   12b60:	mov	r2, #106	; 0x6a
   12b64:	add	r0, pc, r0
   12b68:	add	r1, pc, r1
   12b6c:	add	r3, pc, r3
   12b70:	bl	124ac <__assert_fail@plt>
   12b74:	ldr	r0, [pc, #128]	; 12bfc <emit_test@@Base+0x3cc>
   12b78:	ldr	r1, [pc, #128]	; 12c00 <emit_test@@Base+0x3d0>
   12b7c:	ldr	r3, [pc, #128]	; 12c04 <emit_test@@Base+0x3d4>
   12b80:	mov	r2, #108	; 0x6c
   12b84:	add	r0, pc, r0
   12b88:	add	r1, pc, r1
   12b8c:	add	r3, pc, r3
   12b90:	bl	124ac <__assert_fail@plt>
   12b94:	ldr	r0, [pc, #144]	; 12c2c <emit_test@@Base+0x3fc>
   12b98:	ldr	r1, [pc, #144]	; 12c30 <emit_test@@Base+0x400>
   12b9c:	ldr	r3, [pc, #144]	; 12c34 <emit_test@@Base+0x404>
   12ba0:	mov	r2, #115	; 0x73
   12ba4:	add	r0, pc, r0
   12ba8:	add	r1, pc, r1
   12bac:	add	r3, pc, r3
   12bb0:	bl	124ac <__assert_fail@plt>
   12bb4:	svccc	0x0099999a
   12bb8:	andeq	r5, r0, r8, asr #23
   12bbc:	andeq	r7, r1, r4, lsl #15
   12bc0:	andeq	r5, r0, sl, asr r9
   12bc4:	andeq	r5, r0, lr, ror #20
   12bc8:	andeq	r5, r0, r3, asr r9
   12bcc:	andeq	r5, r0, sp, asr sl
   12bd0:	andeq	r5, r0, pc, asr #19
   12bd4:	andeq	r5, r0, r9, lsr sl
   12bd8:	andeq	r5, r0, pc, lsr #19
   12bdc:	andeq	r5, r0, r7, ror #18
   12be0:			; <UNDEFINED> instruction: 0x000059b6
   12be4:	andeq	r6, r0, fp, lsr #25
   12be8:	andeq	r5, r0, ip, ror r6
   12bec:	ldrdeq	r5, [r0], -sl
   12bf0:	andeq	r6, r0, fp, lsl #25
   12bf4:	andeq	r5, r0, ip, asr r6
   12bf8:			; <UNDEFINED> instruction: 0x000056ba
   12bfc:	andeq	r6, r0, fp, ror #24
   12c00:	andeq	r5, r0, ip, lsr r6
   12c04:	muleq	r0, sl, r6
   12c08:	andeq	r6, r0, fp, lsl #26
   12c0c:	ldrdeq	r5, [r0], -ip
   12c10:	andeq	r5, r0, sl, lsr r7
   12c14:	andeq	r6, r0, fp, ror #25
   12c18:			; <UNDEFINED> instruction: 0x000056bc
   12c1c:	andeq	r5, r0, sl, lsl r7
   12c20:	andeq	r6, r0, fp, asr #25
   12c24:	muleq	r0, ip, r6
   12c28:	strdeq	r5, [r0], -sl
   12c2c:	andeq	r6, r0, fp, asr #24
   12c30:	andeq	r5, r0, ip, lsl r6
   12c34:	andeq	r5, r0, sl, ror r6

00012c38 <main@@Base>:
   12c38:	push	{r4, r5, r6, r7, fp, lr}
   12c3c:	add	fp, sp, #16
   12c40:	sub	sp, sp, #280	; 0x118
   12c44:	vmov.i32	q8, #0	; 0x00000000
   12c48:	add	r4, sp, #8
   12c4c:	mov	r5, #0
   12c50:	add	r0, r4, #16
   12c54:	mov	r1, r4
   12c58:	str	r5, [sp, #40]	; 0x28
   12c5c:	vst1.64	{d16-d17}, [r0]
   12c60:	mov	r0, #36	; 0x24
   12c64:	vst1.64	{d16-d17}, [r1], r0
   12c68:	str	r5, [r1]
   12c6c:	ldr	r0, [pc, #104]	; 12cdc <main@@Base+0xa4>
   12c70:	add	r0, pc, r0
   12c74:	bl	1241c <puts@plt>
   12c78:	str	r5, [sp]
   12c7c:	add	r5, sp, #48	; 0x30
   12c80:	mov	r2, #0
   12c84:	mov	r3, #0
   12c88:	ldr	r1, [pc, #80]	; 12ce0 <main@@Base+0xa8>
   12c8c:	mov	r0, r5
   12c90:	ldr	r1, [pc, r1]
   12c94:	bl	12e3c <flatcc_builder_custom_init@@Base>
   12c98:	mvn	r0, #-1073741824	; 0xc0000000
   12c9c:	mov	r1, #4
   12ca0:	mov	r2, #10
   12ca4:	mov	r3, #4
   12ca8:	str	r1, [sp]
   12cac:	str	r0, [sp, #4]
   12cb0:	mov	r0, r5
   12cb4:	mov	r1, r4
   12cb8:	bl	15e20 <flatcc_builder_create_vector@@Base>
   12cbc:	mov	r1, r0
   12cc0:	mov	r0, r5
   12cc4:	bl	12718 <debug_test@@Base+0xac>
   12cc8:	mov	r0, r5
   12ccc:	bl	13220 <flatcc_builder_clear@@Base>
   12cd0:	bl	12830 <emit_test@@Base>
   12cd4:	sub	sp, fp, #16
   12cd8:	pop	{r4, r5, r6, r7, fp, pc}
   12cdc:	andeq	r5, r0, fp, lsl #14
   12ce0:	andeq	r7, r1, r0, asr #7

00012ce4 <flatcc_builder_default_alloc@@Base>:
   12ce4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ce8:	add	fp, sp, #24
   12cec:	mov	r4, r1
   12cf0:	cmp	r2, #0
   12cf4:	beq	12d40 <flatcc_builder_default_alloc@@Base+0x5c>
   12cf8:	ldr	r0, [fp, #8]
   12cfc:	mov	r8, r3
   12d00:	sub	r1, r0, #1
   12d04:	cmp	r1, #6
   12d08:	bhi	12d70 <flatcc_builder_default_alloc@@Base+0x8c>
   12d0c:	add	r3, pc, #8
   12d10:	mov	r0, #256	; 0x100
   12d14:	ldr	r1, [r3, r1, lsl #2]
   12d18:	add	pc, r3, r1
   12d1c:	andeq	r0, r0, r8, rrx
   12d20:	andeq	r0, r0, r4, asr r0
   12d24:	andeq	r0, r0, r4, asr r0
   12d28:	andeq	r0, r0, ip, lsl r0
   12d2c:	andeq	r0, r0, ip, asr r0
   12d30:	andeq	r0, r0, r4, asr r0
   12d34:	andeq	r0, r0, r4, rrx
   12d38:	mov	r0, #288	; 0x120
   12d3c:	b	12d84 <flatcc_builder_default_alloc@@Base+0xa0>
   12d40:	ldr	r0, [r4]
   12d44:	cmp	r0, #0
   12d48:	beq	12d64 <flatcc_builder_default_alloc@@Base+0x80>
   12d4c:	bl	123ec <free@plt>
   12d50:	mov	r6, #0
   12d54:	mov	r0, r6
   12d58:	str	r6, [r4]
   12d5c:	str	r6, [r4, #4]
   12d60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d64:	mov	r6, #0
   12d68:	mov	r0, r6
   12d6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d70:	mov	r0, #32
   12d74:	b	12d84 <flatcc_builder_default_alloc@@Base+0xa0>
   12d78:	mov	r0, r2
   12d7c:	b	12d84 <flatcc_builder_default_alloc@@Base+0xa0>
   12d80:	mov	r0, #64	; 0x40
   12d84:	mov	r7, r0
   12d88:	lsl	r0, r0, #1
   12d8c:	cmp	r7, r2
   12d90:	bcc	12d84 <flatcc_builder_default_alloc@@Base+0xa0>
   12d94:	ldr	r0, [r4, #4]
   12d98:	mov	r6, #0
   12d9c:	cmp	r0, r2
   12da0:	lsrcs	r0, r0, #1
   12da4:	cmpcs	r0, r7
   12da8:	bcs	12dec <flatcc_builder_default_alloc@@Base+0x108>
   12dac:	ldr	r0, [r4]
   12db0:	mov	r1, r7
   12db4:	bl	12404 <realloc@plt>
   12db8:	cmp	r0, #0
   12dbc:	beq	12df4 <flatcc_builder_default_alloc@@Base+0x110>
   12dc0:	mov	r5, r0
   12dc4:	cmp	r8, #0
   12dc8:	beq	12de8 <flatcc_builder_default_alloc@@Base+0x104>
   12dcc:	ldr	r1, [r4, #4]
   12dd0:	cmp	r7, r1
   12dd4:	bls	12de8 <flatcc_builder_default_alloc@@Base+0x104>
   12dd8:	add	r0, r5, r1
   12ddc:	sub	r2, r7, r1
   12de0:	mov	r1, #0
   12de4:	bl	1247c <memset@plt>
   12de8:	stm	r4, {r5, r7}
   12dec:	mov	r0, r6
   12df0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12df4:	mvn	r6, #0
   12df8:	mov	r0, r6
   12dfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012e00 <flatcc_builder_flush_vtable_cache@@Base>:
   12e00:	push	{r4, r5, fp, lr}
   12e04:	add	fp, sp, #8
   12e08:	mov	r4, r0
   12e0c:	ldr	r0, [r0, #116]	; 0x74
   12e10:	cmp	r0, #0
   12e14:	popeq	{r4, r5, fp, pc}
   12e18:	ldr	r0, [r4, #92]	; 0x5c
   12e1c:	ldr	r2, [r4, #96]	; 0x60
   12e20:	mov	r1, #0
   12e24:	mov	r5, #0
   12e28:	bl	1247c <memset@plt>
   12e2c:	mov	r0, #16
   12e30:	str	r5, [r4, #120]	; 0x78
   12e34:	str	r0, [r4, #124]	; 0x7c
   12e38:	pop	{r4, r5, fp, pc}

00012e3c <flatcc_builder_custom_init@@Base>:
   12e3c:	push	{r4, r5, r6, r7, fp, lr}
   12e40:	add	fp, sp, #16
   12e44:	mov	r6, r2
   12e48:	mov	r7, r1
   12e4c:	mov	r1, #0
   12e50:	mov	r2, #232	; 0xe8
   12e54:	mov	r5, r3
   12e58:	mov	r4, r0
   12e5c:	bl	1247c <memset@plt>
   12e60:	ldr	r0, [fp, #8]
   12e64:	cmp	r7, #0
   12e68:	bne	12e80 <flatcc_builder_custom_init@@Base+0x44>
   12e6c:	mov	r1, #1
   12e70:	add	r6, r4, #188	; 0xbc
   12e74:	str	r1, [r4, #184]	; 0xb8
   12e78:	ldr	r7, [pc, #40]	; 12ea8 <flatcc_builder_custom_init@@Base+0x6c>
   12e7c:	ldr	r7, [pc, r7]
   12e80:	ldr	r1, [pc, #36]	; 12eac <flatcc_builder_custom_init@@Base+0x70>
   12e84:	cmp	r5, #0
   12e88:	ldr	r1, [pc, r1]
   12e8c:	str	r6, [r4, #36]	; 0x24
   12e90:	str	r0, [r4, #40]	; 0x28
   12e94:	mov	r0, #0
   12e98:	movne	r1, r5
   12e9c:	str	r7, [r4, #44]	; 0x2c
   12ea0:	str	r1, [r4, #48]	; 0x30
   12ea4:	pop	{r4, r5, r6, r7, fp, pc}
   12ea8:	andeq	r7, r1, r4, ror #3
   12eac:	ldrdeq	r7, [r1], -r4

00012eb0 <flatcc_builder_init@@Base>:
   12eb0:	push	{r4, r5, fp, lr}
   12eb4:	add	fp, sp, #8
   12eb8:	mov	r1, #0
   12ebc:	mov	r2, #232	; 0xe8
   12ec0:	mov	r4, r0
   12ec4:	mov	r5, #0
   12ec8:	bl	1247c <memset@plt>
   12ecc:	mov	r0, #1
   12ed0:	str	r0, [r4, #184]	; 0xb8
   12ed4:	add	r0, r4, #188	; 0xbc
   12ed8:	ldr	r1, [pc, #32]	; 12f00 <flatcc_builder_init@@Base+0x50>
   12edc:	ldr	r1, [pc, r1]
   12ee0:	ldr	r2, [pc, #28]	; 12f04 <flatcc_builder_init@@Base+0x54>
   12ee4:	ldr	r2, [pc, r2]
   12ee8:	str	r0, [r4, #36]	; 0x24
   12eec:	mov	r0, #0
   12ef0:	str	r5, [r4, #40]	; 0x28
   12ef4:	str	r2, [r4, #44]	; 0x2c
   12ef8:	str	r1, [r4, #48]	; 0x30
   12efc:	pop	{r4, r5, fp, pc}
   12f00:	andeq	r7, r1, r0, lsl #3
   12f04:	andeq	r7, r1, ip, ror r1

00012f08 <flatcc_builder_custom_reset@@Base>:
   12f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f0c:	add	fp, sp, #28
   12f10:	sub	sp, sp, #4
   12f14:	mov	r9, r2
   12f18:	mov	r8, r1
   12f1c:	mov	sl, r0
   12f20:	add	r7, r0, #52	; 0x34
   12f24:	mov	r5, #0
   12f28:	b	12f48 <flatcc_builder_custom_reset@@Base+0x40>
   12f2c:	ldr	r0, [r6, #56]	; 0x38
   12f30:	cmp	r0, #0
   12f34:	bne	13030 <flatcc_builder_custom_reset@@Base+0x128>
   12f38:	add	r5, r5, #1
   12f3c:	add	r7, r7, #8
   12f40:	cmp	r5, #8
   12f44:	beq	12f9c <flatcc_builder_custom_reset@@Base+0x94>
   12f48:	add	r6, sl, r5, lsl #3
   12f4c:	ldr	r0, [r6, #52]	; 0x34
   12f50:	cmp	r0, #0
   12f54:	beq	12f2c <flatcc_builder_custom_reset@@Base+0x24>
   12f58:	cmp	r9, #0
   12f5c:	cmpne	r5, #5
   12f60:	beq	12f8c <flatcc_builder_custom_reset@@Base+0x84>
   12f64:	ldr	r0, [sl, #40]	; 0x28
   12f68:	ldr	r4, [sl, #48]	; 0x30
   12f6c:	mov	r1, r7
   12f70:	mov	r2, #1
   12f74:	mov	r3, #1
   12f78:	str	r5, [sp]
   12f7c:	blx	r4
   12f80:	cmp	r0, #0
   12f84:	bne	13020 <flatcc_builder_custom_reset@@Base+0x118>
   12f88:	ldr	r0, [r6, #52]	; 0x34
   12f8c:	ldr	r2, [r6, #56]	; 0x38
   12f90:	mov	r1, #0
   12f94:	bl	1247c <memset@plt>
   12f98:	b	12f38 <flatcc_builder_custom_reset@@Base+0x30>
   12f9c:	mov	r0, #0
   12fa0:	vmov.i32	q8, #0	; 0x00000000
   12fa4:	mov	r5, #0
   12fa8:	str	r0, [sl, #120]	; 0x78
   12fac:	ldr	r1, [sl, #124]	; 0x7c
   12fb0:	cmp	r1, #0
   12fb4:	movne	r1, #16
   12fb8:	strne	r1, [sl, #124]	; 0x7c
   12fbc:	add	r1, sl, #148	; 0x94
   12fc0:	str	r0, [sl, #136]	; 0x88
   12fc4:	str	r0, [sl, #140]	; 0x8c
   12fc8:	strh	r0, [sl, #128]	; 0x80
   12fcc:	str	r0, [sl, #32]
   12fd0:	cmp	r8, #0
   12fd4:	vst1.32	{d16-d17}, [r1]
   12fd8:	ldr	r2, [sl, #60]	; 0x3c
   12fdc:	ldr	r1, [sl, #52]	; 0x34
   12fe0:	ldr	r3, [sl, #76]	; 0x4c
   12fe4:	str	r2, [sl, #16]
   12fe8:	str	r0, [sl, #20]
   12fec:	str	r0, [sl, #24]
   12ff0:	movne	r0, #0
   12ff4:	str	r3, [sl]
   12ff8:	str	r1, [sl, #4]
   12ffc:	strne	r0, [sl, #172]	; 0xac
   13000:	strne	r0, [sl, #176]	; 0xb0
   13004:	strne	r0, [sl, #180]	; 0xb4
   13008:	ldr	r0, [sl, #184]	; 0xb8
   1300c:	cmp	r0, #0
   13010:	beq	13024 <flatcc_builder_custom_reset@@Base+0x11c>
   13014:	add	r0, sl, #188	; 0xbc
   13018:	bl	17ba4 <flatcc_emitter_reset@@Base>
   1301c:	b	13024 <flatcc_builder_custom_reset@@Base+0x11c>
   13020:	mvn	r5, #0
   13024:	mov	r0, r5
   13028:	sub	sp, fp, #28
   1302c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13030:	ldr	r0, [pc, #24]	; 13050 <flatcc_builder_custom_reset@@Base+0x148>
   13034:	ldr	r1, [pc, #24]	; 13054 <flatcc_builder_custom_reset@@Base+0x14c>
   13038:	ldr	r3, [pc, #24]	; 13058 <flatcc_builder_custom_reset@@Base+0x150>
   1303c:	movw	r2, #434	; 0x1b2
   13040:	add	r0, pc, r0
   13044:	add	r1, pc, r1
   13048:	add	r3, pc, r3
   1304c:	bl	124ac <__assert_fail@plt>
   13050:	andeq	r5, r0, r0, ror #11
   13054:	andeq	r5, r0, lr, ror #11
   13058:	andeq	r5, r0, r7, asr #12

0001305c <flatcc_builder_reset@@Base>:
   1305c:	push	{r4, sl, fp, lr}
   13060:	add	fp, sp, #8
   13064:	mov	r4, r0
   13068:	ldr	r0, [r0, #52]	; 0x34
   1306c:	ldr	r2, [r4, #56]	; 0x38
   13070:	cmp	r0, #0
   13074:	beq	13084 <flatcc_builder_reset@@Base+0x28>
   13078:	mov	r1, #0
   1307c:	bl	1247c <memset@plt>
   13080:	b	1308c <flatcc_builder_reset@@Base+0x30>
   13084:	cmp	r2, #0
   13088:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   1308c:	ldr	r0, [r4, #60]	; 0x3c
   13090:	ldr	r2, [r4, #64]	; 0x40
   13094:	cmp	r0, #0
   13098:	beq	130a8 <flatcc_builder_reset@@Base+0x4c>
   1309c:	mov	r1, #0
   130a0:	bl	1247c <memset@plt>
   130a4:	b	130b0 <flatcc_builder_reset@@Base+0x54>
   130a8:	cmp	r2, #0
   130ac:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   130b0:	ldr	r0, [r4, #68]	; 0x44
   130b4:	ldr	r2, [r4, #72]	; 0x48
   130b8:	cmp	r0, #0
   130bc:	beq	130cc <flatcc_builder_reset@@Base+0x70>
   130c0:	mov	r1, #0
   130c4:	bl	1247c <memset@plt>
   130c8:	b	130d4 <flatcc_builder_reset@@Base+0x78>
   130cc:	cmp	r2, #0
   130d0:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   130d4:	ldr	r0, [r4, #76]	; 0x4c
   130d8:	ldr	r2, [r4, #80]	; 0x50
   130dc:	cmp	r0, #0
   130e0:	beq	130f0 <flatcc_builder_reset@@Base+0x94>
   130e4:	mov	r1, #0
   130e8:	bl	1247c <memset@plt>
   130ec:	b	130f8 <flatcc_builder_reset@@Base+0x9c>
   130f0:	cmp	r2, #0
   130f4:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   130f8:	ldr	r0, [r4, #84]	; 0x54
   130fc:	ldr	r2, [r4, #88]	; 0x58
   13100:	cmp	r0, #0
   13104:	beq	13114 <flatcc_builder_reset@@Base+0xb8>
   13108:	mov	r1, #0
   1310c:	bl	1247c <memset@plt>
   13110:	b	1311c <flatcc_builder_reset@@Base+0xc0>
   13114:	cmp	r2, #0
   13118:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   1311c:	ldr	r0, [r4, #92]	; 0x5c
   13120:	ldr	r2, [r4, #96]	; 0x60
   13124:	cmp	r0, #0
   13128:	beq	13138 <flatcc_builder_reset@@Base+0xdc>
   1312c:	mov	r1, #0
   13130:	bl	1247c <memset@plt>
   13134:	b	13140 <flatcc_builder_reset@@Base+0xe4>
   13138:	cmp	r2, #0
   1313c:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   13140:	ldr	r0, [r4, #100]	; 0x64
   13144:	ldr	r2, [r4, #104]	; 0x68
   13148:	cmp	r0, #0
   1314c:	beq	1315c <flatcc_builder_reset@@Base+0x100>
   13150:	mov	r1, #0
   13154:	bl	1247c <memset@plt>
   13158:	b	13164 <flatcc_builder_reset@@Base+0x108>
   1315c:	cmp	r2, #0
   13160:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   13164:	ldr	r0, [r4, #108]	; 0x6c
   13168:	ldr	r2, [r4, #112]	; 0x70
   1316c:	cmp	r0, #0
   13170:	beq	13180 <flatcc_builder_reset@@Base+0x124>
   13174:	mov	r1, #0
   13178:	bl	1247c <memset@plt>
   1317c:	b	13188 <flatcc_builder_reset@@Base+0x12c>
   13180:	cmp	r2, #0
   13184:	bne	131f4 <flatcc_builder_reset@@Base+0x198>
   13188:	mov	r0, #0
   1318c:	str	r0, [r4, #120]	; 0x78
   13190:	ldr	r1, [r4, #124]	; 0x7c
   13194:	cmp	r1, #0
   13198:	movne	r1, #16
   1319c:	strne	r1, [r4, #124]	; 0x7c
   131a0:	vmov.i32	q8, #0	; 0x00000000
   131a4:	add	r1, r4, #148	; 0x94
   131a8:	str	r0, [r4, #136]	; 0x88
   131ac:	str	r0, [r4, #140]	; 0x8c
   131b0:	strh	r0, [r4, #128]	; 0x80
   131b4:	str	r0, [r4, #32]
   131b8:	vst1.32	{d16-d17}, [r1]
   131bc:	ldr	r1, [r4, #184]	; 0xb8
   131c0:	ldr	r2, [r4, #60]	; 0x3c
   131c4:	ldr	r3, [r4, #76]	; 0x4c
   131c8:	ldr	ip, [r4, #52]	; 0x34
   131cc:	cmp	r1, #0
   131d0:	str	r2, [r4, #16]
   131d4:	str	r0, [r4, #20]
   131d8:	str	r0, [r4, #24]
   131dc:	stm	r4, {r3, ip}
   131e0:	beq	131ec <flatcc_builder_reset@@Base+0x190>
   131e4:	add	r0, r4, #188	; 0xbc
   131e8:	bl	17ba4 <flatcc_emitter_reset@@Base>
   131ec:	mov	r0, #0
   131f0:	pop	{r4, sl, fp, pc}
   131f4:	ldr	r0, [pc, #24]	; 13214 <flatcc_builder_reset@@Base+0x1b8>
   131f8:	ldr	r1, [pc, #24]	; 13218 <flatcc_builder_reset@@Base+0x1bc>
   131fc:	ldr	r3, [pc, #24]	; 1321c <flatcc_builder_reset@@Base+0x1c0>
   13200:	movw	r2, #434	; 0x1b2
   13204:	add	r0, pc, r0
   13208:	add	r1, pc, r1
   1320c:	add	r3, pc, r3
   13210:	bl	124ac <__assert_fail@plt>
   13214:	andeq	r5, r0, ip, lsl r4
   13218:	andeq	r5, r0, sl, lsr #8
   1321c:	andeq	r5, r0, r3, lsl #9

00013220 <flatcc_builder_clear@@Base>:
   13220:	push	{r4, sl, fp, lr}
   13224:	add	fp, sp, #8
   13228:	sub	sp, sp, #8
   1322c:	mov	r4, r0
   13230:	ldr	r0, [r0, #40]	; 0x28
   13234:	mov	r1, #0
   13238:	mov	r2, #0
   1323c:	mov	r3, #0
   13240:	ldr	ip, [r4, #48]	; 0x30
   13244:	str	r1, [sp]
   13248:	add	r1, r4, #52	; 0x34
   1324c:	blx	ip
   13250:	ldr	r0, [r4, #40]	; 0x28
   13254:	ldr	ip, [r4, #48]	; 0x30
   13258:	mov	r1, #1
   1325c:	mov	r2, #0
   13260:	mov	r3, #0
   13264:	str	r1, [sp]
   13268:	add	r1, r4, #60	; 0x3c
   1326c:	blx	ip
   13270:	ldr	r0, [r4, #40]	; 0x28
   13274:	ldr	ip, [r4, #48]	; 0x30
   13278:	mov	r1, #2
   1327c:	mov	r2, #0
   13280:	mov	r3, #0
   13284:	str	r1, [sp]
   13288:	add	r1, r4, #68	; 0x44
   1328c:	blx	ip
   13290:	ldr	r0, [r4, #40]	; 0x28
   13294:	ldr	ip, [r4, #48]	; 0x30
   13298:	mov	r1, #3
   1329c:	mov	r2, #0
   132a0:	mov	r3, #0
   132a4:	str	r1, [sp]
   132a8:	add	r1, r4, #76	; 0x4c
   132ac:	blx	ip
   132b0:	ldr	r0, [r4, #40]	; 0x28
   132b4:	ldr	ip, [r4, #48]	; 0x30
   132b8:	mov	r1, #4
   132bc:	mov	r2, #0
   132c0:	mov	r3, #0
   132c4:	str	r1, [sp]
   132c8:	add	r1, r4, #84	; 0x54
   132cc:	blx	ip
   132d0:	ldr	r0, [r4, #40]	; 0x28
   132d4:	ldr	ip, [r4, #48]	; 0x30
   132d8:	mov	r1, #5
   132dc:	mov	r2, #0
   132e0:	mov	r3, #0
   132e4:	str	r1, [sp]
   132e8:	add	r1, r4, #92	; 0x5c
   132ec:	blx	ip
   132f0:	ldr	r0, [r4, #40]	; 0x28
   132f4:	ldr	ip, [r4, #48]	; 0x30
   132f8:	mov	r1, #6
   132fc:	mov	r2, #0
   13300:	mov	r3, #0
   13304:	str	r1, [sp]
   13308:	add	r1, r4, #100	; 0x64
   1330c:	blx	ip
   13310:	ldr	r0, [r4, #40]	; 0x28
   13314:	ldr	ip, [r4, #48]	; 0x30
   13318:	mov	r1, #7
   1331c:	mov	r2, #0
   13320:	mov	r3, #0
   13324:	str	r1, [sp]
   13328:	add	r1, r4, #108	; 0x6c
   1332c:	blx	ip
   13330:	ldr	r0, [r4, #184]	; 0xb8
   13334:	cmp	r0, #0
   13338:	beq	13344 <flatcc_builder_clear@@Base+0x124>
   1333c:	add	r0, r4, #188	; 0xbc
   13340:	bl	17c70 <flatcc_emitter_clear@@Base>
   13344:	mov	r0, r4
   13348:	mov	r1, #0
   1334c:	mov	r2, #232	; 0xe8
   13350:	sub	sp, fp, #8
   13354:	pop	{r4, sl, fp, lr}
   13358:	b	1247c <memset@plt>

0001335c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1335c:	push	{r4, r5, r6, r7, fp, lr}
   13360:	add	fp, sp, #16
   13364:	sub	sp, sp, #8
   13368:	mov	r4, r0
   1336c:	ldr	r0, [r0, #112]	; 0x70
   13370:	add	r1, r1, #7
   13374:	ldr	r7, [r4, #228]	; 0xe4
   13378:	bic	r5, r1, #3
   1337c:	add	r6, r4, #108	; 0x6c
   13380:	add	r2, r7, r5
   13384:	cmp	r2, r0
   13388:	bls	133b0 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1338c:	ldr	r0, [r4, #40]	; 0x28
   13390:	ldr	ip, [r4, #48]	; 0x30
   13394:	mov	r1, #7
   13398:	mov	r3, #0
   1339c:	str	r1, [sp]
   133a0:	mov	r1, r6
   133a4:	blx	ip
   133a8:	cmp	r0, #0
   133ac:	bne	133fc <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   133b0:	ldr	r0, [r6]
   133b4:	adds	r6, r0, r7
   133b8:	beq	133ec <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   133bc:	mov	r0, r6
   133c0:	mov	r1, #0
   133c4:	mov	r2, r5
   133c8:	bl	1247c <memset@plt>
   133cc:	ldr	r0, [r4, #224]	; 0xe0
   133d0:	str	r0, [r6], #4
   133d4:	ldr	r0, [r4, #228]	; 0xe4
   133d8:	add	r1, r0, #4
   133dc:	add	r0, r0, r5
   133e0:	str	r1, [r4, #224]	; 0xe0
   133e4:	str	r0, [r4, #228]	; 0xe4
   133e8:	b	133f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   133ec:	mov	r6, #0
   133f0:	mov	r0, r6
   133f4:	sub	sp, fp, #16
   133f8:	pop	{r4, r5, r6, r7, fp, pc}
   133fc:	ldr	r0, [pc, #24]	; 1341c <flatcc_builder_enter_user_frame_ptr@@Base+0xc0>
   13400:	ldr	r1, [pc, #24]	; 13420 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13404:	ldr	r3, [pc, #24]	; 13424 <flatcc_builder_enter_user_frame_ptr@@Base+0xc8>
   13408:	mov	r2, #308	; 0x134
   1340c:	add	r0, pc, r0
   13410:	add	r1, pc, r1
   13414:	add	r3, pc, r3
   13418:	bl	124ac <__assert_fail@plt>
   1341c:	andeq	r6, r0, r3, ror #7
   13420:	andeq	r5, r0, r2, lsr #4
   13424:	andeq	r6, r0, r5, lsl r2

00013428 <flatcc_builder_enter_user_frame@@Base>:
   13428:	push	{r4, r5, r6, r7, fp, lr}
   1342c:	add	fp, sp, #16
   13430:	sub	sp, sp, #8
   13434:	mov	r4, r0
   13438:	ldr	r0, [r0, #112]	; 0x70
   1343c:	add	r1, r1, #7
   13440:	ldr	r7, [r4, #228]	; 0xe4
   13444:	bic	r5, r1, #3
   13448:	add	r6, r4, #108	; 0x6c
   1344c:	add	r2, r7, r5
   13450:	cmp	r2, r0
   13454:	bls	1347c <flatcc_builder_enter_user_frame@@Base+0x54>
   13458:	ldr	r0, [r4, #40]	; 0x28
   1345c:	ldr	ip, [r4, #48]	; 0x30
   13460:	mov	r1, #7
   13464:	mov	r3, #0
   13468:	str	r1, [sp]
   1346c:	mov	r1, r6
   13470:	blx	ip
   13474:	cmp	r0, #0
   13478:	bne	134c8 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1347c:	ldr	r0, [r6]
   13480:	adds	r6, r0, r7
   13484:	beq	134bc <flatcc_builder_enter_user_frame@@Base+0x94>
   13488:	mov	r0, r6
   1348c:	mov	r1, #0
   13490:	mov	r2, r5
   13494:	bl	1247c <memset@plt>
   13498:	ldr	r0, [r4, #224]	; 0xe0
   1349c:	str	r0, [r6]
   134a0:	ldr	r1, [r4, #228]	; 0xe4
   134a4:	add	r0, r1, #4
   134a8:	add	r1, r1, r5
   134ac:	str	r0, [r4, #224]	; 0xe0
   134b0:	str	r1, [r4, #228]	; 0xe4
   134b4:	sub	sp, fp, #16
   134b8:	pop	{r4, r5, r6, r7, fp, pc}
   134bc:	mov	r0, #0
   134c0:	sub	sp, fp, #16
   134c4:	pop	{r4, r5, r6, r7, fp, pc}
   134c8:	ldr	r0, [pc, #24]	; 134e8 <flatcc_builder_enter_user_frame@@Base+0xc0>
   134cc:	ldr	r1, [pc, #24]	; 134ec <flatcc_builder_enter_user_frame@@Base+0xc4>
   134d0:	ldr	r3, [pc, #24]	; 134f0 <flatcc_builder_enter_user_frame@@Base+0xc8>
   134d4:	mov	r2, #308	; 0x134
   134d8:	add	r0, pc, r0
   134dc:	add	r1, pc, r1
   134e0:	add	r3, pc, r3
   134e4:	bl	124ac <__assert_fail@plt>
   134e8:	andeq	r6, r0, r7, lsl r3
   134ec:	andeq	r5, r0, r6, asr r1
   134f0:	andeq	r6, r0, r9, asr #2

000134f4 <flatcc_builder_exit_user_frame@@Base>:
   134f4:	push	{fp, lr}
   134f8:	mov	fp, sp
   134fc:	ldr	r1, [r0, #224]	; 0xe0
   13500:	cmp	r1, #0
   13504:	subne	r2, r1, #4
   13508:	strne	r2, [r0, #228]	; 0xe4
   1350c:	ldrne	r2, [r0, #108]	; 0x6c
   13510:	addne	r1, r2, r1
   13514:	ldrne	r1, [r1, #-4]
   13518:	strne	r1, [r0, #224]	; 0xe0
   1351c:	movne	r0, r1
   13520:	popne	{fp, pc}
   13524:	ldr	r0, [pc, #24]	; 13544 <flatcc_builder_exit_user_frame@@Base+0x50>
   13528:	ldr	r1, [pc, #24]	; 13548 <flatcc_builder_exit_user_frame@@Base+0x54>
   1352c:	ldr	r3, [pc, #24]	; 1354c <flatcc_builder_exit_user_frame@@Base+0x58>
   13530:	movw	r2, #542	; 0x21e
   13534:	add	r0, pc, r0
   13538:	add	r1, pc, r1
   1353c:	add	r3, pc, r3
   13540:	bl	124ac <__assert_fail@plt>
   13544:	muleq	r0, r9, r1
   13548:	strdeq	r5, [r0], -sl
   1354c:	andeq	r5, r0, sl, lsr #3

00013550 <flatcc_builder_exit_user_frame_at@@Base>:
   13550:	push	{fp, lr}
   13554:	mov	fp, sp
   13558:	ldr	r2, [r0, #224]	; 0xe0
   1355c:	cmp	r2, r1
   13560:	bcc	135ac <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13564:	cmp	r1, #0
   13568:	str	r1, [r0, #224]	; 0xe0
   1356c:	subne	r2, r1, #4
   13570:	strne	r2, [r0, #228]	; 0xe4
   13574:	ldrne	r2, [r0, #108]	; 0x6c
   13578:	addne	r1, r2, r1
   1357c:	ldrne	r1, [r1, #-4]
   13580:	strne	r1, [r0, #224]	; 0xe0
   13584:	movne	r0, r1
   13588:	popne	{fp, pc}
   1358c:	ldr	r0, [pc, #68]	; 135d8 <flatcc_builder_exit_user_frame_at@@Base+0x88>
   13590:	ldr	r1, [pc, #68]	; 135dc <flatcc_builder_exit_user_frame_at@@Base+0x8c>
   13594:	ldr	r3, [pc, #68]	; 135e0 <flatcc_builder_exit_user_frame_at@@Base+0x90>
   13598:	movw	r2, #542	; 0x21e
   1359c:	add	r0, pc, r0
   135a0:	add	r1, pc, r1
   135a4:	add	r3, pc, r3
   135a8:	bl	124ac <__assert_fail@plt>
   135ac:	ldr	r0, [pc, #24]	; 135cc <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   135b0:	ldr	r1, [pc, #24]	; 135d0 <flatcc_builder_exit_user_frame_at@@Base+0x80>
   135b4:	ldr	r3, [pc, #24]	; 135d4 <flatcc_builder_exit_user_frame_at@@Base+0x84>
   135b8:	movw	r2, #551	; 0x227
   135bc:	add	r0, pc, r0
   135c0:	add	r1, pc, r1
   135c4:	add	r3, pc, r3
   135c8:	bl	124ac <__assert_fail@plt>
   135cc:	andeq	r5, r0, r4, ror #2
   135d0:	andeq	r5, r0, r2, ror r0
   135d4:	andeq	r5, r0, fp, ror r1
   135d8:	andeq	r5, r0, r1, lsr r1
   135dc:	muleq	r0, r2, r0
   135e0:	andeq	r5, r0, r2, asr #2

000135e4 <flatcc_builder_get_current_user_frame@@Base>:
   135e4:	ldr	r0, [r0, #224]	; 0xe0
   135e8:	bx	lr

000135ec <flatcc_builder_get_user_frame_ptr@@Base>:
   135ec:	ldr	r0, [r0, #108]	; 0x6c
   135f0:	add	r0, r0, r1
   135f4:	bx	lr

000135f8 <flatcc_builder_embed_buffer@@Base>:
   135f8:	push	{r4, r5, r6, r7, fp, lr}
   135fc:	add	fp, sp, #16
   13600:	sub	sp, sp, #88	; 0x58
   13604:	mov	r4, r0
   13608:	ldr	r0, [fp, #8]
   1360c:	mov	r5, r3
   13610:	mov	r7, r2
   13614:	mov	r2, r1
   13618:	sub	r1, fp, #18
   1361c:	strh	r0, [fp, #-18]	; 0xffffffee
   13620:	mov	r0, r4
   13624:	ldr	r3, [r4, #152]	; 0x98
   13628:	cmp	r3, #0
   1362c:	movwne	r3, #1
   13630:	bl	13784 <flatcc_builder_embed_buffer@@Base+0x18c>
   13634:	ldr	r1, [fp, #12]
   13638:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1363c:	ldr	r0, [r4, #136]	; 0x88
   13640:	mov	r2, #0
   13644:	str	r2, [sp, #12]
   13648:	str	r2, [sp, #8]
   1364c:	and	r1, r1, #2
   13650:	sub	r3, r3, #1
   13654:	add	r1, r5, r1, lsl #1
   13658:	sub	r1, r0, r1
   1365c:	and	r3, r1, r3
   13660:	add	r1, r3, r5
   13664:	str	r1, [fp, #-24]	; 0xffffffe8
   13668:	ldr	r1, [r4, #152]	; 0x98
   1366c:	cmp	r1, #0
   13670:	mov	r1, #0
   13674:	beq	13694 <flatcc_builder_embed_buffer@@Base+0x9c>
   13678:	mov	r1, #4
   1367c:	sub	r2, fp, #24
   13680:	str	r1, [sp, #20]
   13684:	str	r2, [sp, #16]
   13688:	mov	r2, #1
   1368c:	str	r1, [sp, #8]
   13690:	str	r2, [sp, #12]
   13694:	cmp	r5, #0
   13698:	beq	136bc <flatcc_builder_embed_buffer@@Base+0xc4>
   1369c:	add	r6, sp, #8
   136a0:	add	r1, r1, r5
   136a4:	add	r6, r6, r2, lsl #3
   136a8:	add	r2, r2, #1
   136ac:	str	r1, [sp, #8]
   136b0:	str	r7, [r6, #8]
   136b4:	str	r5, [r6, #12]
   136b8:	str	r2, [sp, #12]
   136bc:	cmp	r3, #0
   136c0:	beq	136ec <flatcc_builder_embed_buffer@@Base+0xf4>
   136c4:	add	r1, r1, r3
   136c8:	add	r7, sp, #8
   136cc:	str	r1, [sp, #8]
   136d0:	add	r7, r7, r2, lsl #3
   136d4:	add	r2, r2, #1
   136d8:	ldr	r6, [pc, #136]	; 13768 <flatcc_builder_embed_buffer@@Base+0x170>
   136dc:	ldr	r6, [pc, r6]
   136e0:	str	r6, [r7, #8]
   136e4:	str	r3, [r7, #12]
   136e8:	str	r2, [sp, #12]
   136ec:	cmp	r1, #0
   136f0:	ble	13748 <flatcc_builder_embed_buffer@@Base+0x150>
   136f4:	sub	r5, r0, r1
   136f8:	ldr	r0, [r4, #36]	; 0x24
   136fc:	ldr	r7, [r4, #44]	; 0x2c
   13700:	str	r1, [sp]
   13704:	add	r1, sp, #8
   13708:	add	r1, r1, #8
   1370c:	mov	r3, r5
   13710:	blx	r7
   13714:	cmp	r0, #0
   13718:	streq	r5, [r4, #136]	; 0x88
   1371c:	moveq	r0, r5
   13720:	subeq	sp, fp, #16
   13724:	popeq	{r4, r5, r6, r7, fp, pc}
   13728:	ldr	r0, [pc, #72]	; 13778 <flatcc_builder_embed_buffer@@Base+0x180>
   1372c:	ldr	r1, [pc, #72]	; 1377c <flatcc_builder_embed_buffer@@Base+0x184>
   13730:	ldr	r3, [pc, #72]	; 13780 <flatcc_builder_embed_buffer@@Base+0x188>
   13734:	movw	r2, #651	; 0x28b
   13738:	add	r0, pc, r0
   1373c:	add	r1, pc, r1
   13740:	add	r3, pc, r3
   13744:	bl	124ac <__assert_fail@plt>
   13748:	ldr	r0, [pc, #28]	; 1376c <flatcc_builder_embed_buffer@@Base+0x174>
   1374c:	ldr	r1, [pc, #28]	; 13770 <flatcc_builder_embed_buffer@@Base+0x178>
   13750:	ldr	r3, [pc, #28]	; 13774 <flatcc_builder_embed_buffer@@Base+0x17c>
   13754:	movw	r2, #647	; 0x287
   13758:	add	r0, pc, r0
   1375c:	add	r1, pc, r1
   13760:	add	r3, pc, r3
   13764:	bl	124ac <__assert_fail@plt>
   13768:	andeq	r6, r1, r0, ror r9
   1376c:	muleq	r0, r7, r0
   13770:	ldrdeq	r4, [r0], -r6
   13774:	andeq	r5, r0, lr, asr #30
   13778:	strheq	r6, [r0], -r7
   1377c:	strdeq	r4, [r0], -r6
   13780:	andeq	r5, r0, lr, ror #30
   13784:	push	{r4, sl, fp, lr}
   13788:	add	fp, sp, #8
   1378c:	sub	sp, sp, #80	; 0x50
   13790:	cmp	r2, #0
   13794:	bne	137a4 <flatcc_builder_embed_buffer@@Base+0x1ac>
   13798:	ldrh	r2, [r0, #132]	; 0x84
   1379c:	cmp	r2, #0
   137a0:	movweq	r2, #1
   137a4:	ldrh	r4, [r1]
   137a8:	cmp	r4, #4
   137ac:	movwcc	r4, #4
   137b0:	cmpcs	r4, r2
   137b4:	bcs	137c4 <flatcc_builder_embed_buffer@@Base+0x1cc>
   137b8:	cmp	r4, r2
   137bc:	movcc	r4, r2
   137c0:	strh	r4, [r1]
   137c4:	cmp	r3, #0
   137c8:	bne	1383c <flatcc_builder_embed_buffer@@Base+0x244>
   137cc:	ldr	r4, [r0, #140]	; 0x8c
   137d0:	sub	r1, r2, #1
   137d4:	ands	r1, r4, r1
   137d8:	beq	1383c <flatcc_builder_embed_buffer@@Base+0x244>
   137dc:	mov	r2, #1
   137e0:	str	r1, [sp, #20]
   137e4:	str	r1, [sp, #8]
   137e8:	cmn	r1, #1
   137ec:	str	r2, [sp, #12]
   137f0:	ldr	r2, [pc, #172]	; 138a4 <flatcc_builder_embed_buffer@@Base+0x2ac>
   137f4:	ldr	r2, [pc, r2]
   137f8:	str	r2, [sp, #16]
   137fc:	add	r2, r1, r4
   13800:	str	r2, [r0, #140]	; 0x8c
   13804:	ble	13844 <flatcc_builder_embed_buffer@@Base+0x24c>
   13808:	ldr	r2, [r0, #36]	; 0x24
   1380c:	ldr	ip, [r0, #44]	; 0x2c
   13810:	add	r0, sp, #8
   13814:	str	r1, [sp]
   13818:	mov	r3, r4
   1381c:	add	r1, r0, #8
   13820:	mov	r0, r2
   13824:	mov	r2, #1
   13828:	blx	ip
   1382c:	cmp	r0, #0
   13830:	bne	13864 <flatcc_builder_embed_buffer@@Base+0x26c>
   13834:	cmn	r4, #1
   13838:	beq	13884 <flatcc_builder_embed_buffer@@Base+0x28c>
   1383c:	sub	sp, fp, #8
   13840:	pop	{r4, sl, fp, pc}
   13844:	ldr	r0, [pc, #92]	; 138a8 <flatcc_builder_embed_buffer@@Base+0x2b0>
   13848:	ldr	r1, [pc, #92]	; 138ac <flatcc_builder_embed_buffer@@Base+0x2b4>
   1384c:	ldr	r3, [pc, #92]	; 138b0 <flatcc_builder_embed_buffer@@Base+0x2b8>
   13850:	movw	r2, #673	; 0x2a1
   13854:	add	r0, pc, r0
   13858:	add	r1, pc, r1
   1385c:	add	r3, pc, r3
   13860:	bl	124ac <__assert_fail@plt>
   13864:	ldr	r0, [pc, #72]	; 138b4 <flatcc_builder_embed_buffer@@Base+0x2bc>
   13868:	ldr	r1, [pc, #72]	; 138b8 <flatcc_builder_embed_buffer@@Base+0x2c0>
   1386c:	ldr	r3, [pc, #72]	; 138bc <flatcc_builder_embed_buffer@@Base+0x2c4>
   13870:	movw	r2, #677	; 0x2a5
   13874:	add	r0, pc, r0
   13878:	add	r1, pc, r1
   1387c:	add	r3, pc, r3
   13880:	bl	124ac <__assert_fail@plt>
   13884:	ldr	r0, [pc, #52]	; 138c0 <flatcc_builder_embed_buffer@@Base+0x2c8>
   13888:	ldr	r1, [pc, #52]	; 138c4 <flatcc_builder_embed_buffer@@Base+0x2cc>
   1388c:	ldr	r3, [pc, #52]	; 138c8 <flatcc_builder_embed_buffer@@Base+0x2d0>
   13890:	movw	r2, #702	; 0x2be
   13894:	add	r0, pc, r0
   13898:	add	r1, pc, r1
   1389c:	add	r3, pc, r3
   138a0:	bl	124ac <__assert_fail@plt>
   138a4:	andeq	r6, r1, r8, asr r8
   138a8:	muleq	r0, fp, pc	; <UNPREDICTABLE>
   138ac:	ldrdeq	r4, [r0], -sl
   138b0:	andeq	r5, r0, lr, lsl #30
   138b4:	andeq	r5, r0, fp, ror pc
   138b8:			; <UNDEFINED> instruction: 0x00004dba
   138bc:	andeq	r5, r0, lr, ror #29
   138c0:	andeq	r5, r0, fp, asr pc
   138c4:	muleq	r0, sl, sp
   138c8:	ldrdeq	r5, [r0], -r0

000138cc <flatcc_builder_create_buffer@@Base>:
   138cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d0:	add	fp, sp, #28
   138d4:	sub	sp, sp, #100	; 0x64
   138d8:	ldr	sl, [fp, #12]
   138dc:	mov	r4, r0
   138e0:	ldr	r0, [fp, #8]
   138e4:	mov	r7, r1
   138e8:	mov	r5, #0
   138ec:	mov	r6, r3
   138f0:	sub	r1, fp, #30
   138f4:	str	r5, [sp, #12]
   138f8:	and	r9, sl, #1
   138fc:	strh	r0, [fp, #-30]	; 0xffffffe2
   13900:	mov	r0, r4
   13904:	mov	r3, r9
   13908:	bl	13784 <flatcc_builder_embed_buffer@@Base+0x18c>
   1390c:	ldrh	r0, [r4, #128]	; 0x80
   13910:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13914:	str	r6, [sp, #8]
   13918:	cmp	r0, r1
   1391c:	strhcc	r1, [r4, #128]	; 0x80
   13920:	cmp	r7, #0
   13924:	beq	13940 <flatcc_builder_create_buffer@@Base+0x74>
   13928:	ldr	r5, [r7]
   1392c:	cmp	r5, #0
   13930:	str	r5, [sp, #12]
   13934:	movwne	r5, #1
   13938:	lsl	r7, r5, #2
   1393c:	b	13944 <flatcc_builder_create_buffer@@Base+0x78>
   13940:	mov	r7, #0
   13944:	ldr	r0, [r4, #136]	; 0x88
   13948:	and	r2, sl, #2
   1394c:	mov	r3, #0
   13950:	sub	r6, r1, #1
   13954:	ands	ip, sl, #3
   13958:	mov	sl, #4
   1395c:	mov	r1, #4
   13960:	str	r3, [sp, #20]
   13964:	str	r3, [sp, #16]
   13968:	sub	r2, r0, r2, lsl #1
   1396c:	sub	r2, r2, r7
   13970:	sub	r2, r2, #4
   13974:	beq	13998 <flatcc_builder_create_buffer@@Base+0xcc>
   13978:	mov	r1, #4
   1397c:	sub	r3, fp, #40	; 0x28
   13980:	str	r1, [sp, #28]
   13984:	str	r3, [sp, #24]
   13988:	str	r1, [sp, #16]
   1398c:	mov	r3, #1
   13990:	mov	r1, #8
   13994:	str	r3, [sp, #20]
   13998:	add	lr, sp, #16
   1399c:	and	r6, r2, r6
   139a0:	sub	r8, fp, #36	; 0x24
   139a4:	str	r1, [sp, #16]
   139a8:	cmp	r5, #0
   139ac:	add	r2, lr, r3, lsl #3
   139b0:	str	r8, [r2, #8]
   139b4:	str	sl, [r2, #12]
   139b8:	add	r2, r3, #1
   139bc:	str	r2, [sp, #20]
   139c0:	beq	139e4 <flatcc_builder_create_buffer@@Base+0x118>
   139c4:	add	r2, lr, r2, lsl #3
   139c8:	add	r1, r1, r7
   139cc:	add	r5, sp, #12
   139d0:	str	r1, [sp, #16]
   139d4:	str	r5, [r2, #8]
   139d8:	str	r7, [r2, #12]
   139dc:	orr	r2, r3, #2
   139e0:	str	r2, [sp, #20]
   139e4:	cmp	r6, #0
   139e8:	beq	13a10 <flatcc_builder_create_buffer@@Base+0x144>
   139ec:	add	r1, r1, r6
   139f0:	add	r3, lr, r2, lsl #3
   139f4:	add	r2, r2, #1
   139f8:	str	r1, [sp, #16]
   139fc:	ldr	r5, [pc, #220]	; 13ae0 <flatcc_builder_create_buffer@@Base+0x214>
   13a00:	ldr	r5, [pc, r5]
   13a04:	str	r5, [r3, #8]
   13a08:	str	r6, [r3, #12]
   13a0c:	str	r2, [sp, #20]
   13a10:	sub	r7, r0, r1
   13a14:	cmp	ip, #0
   13a18:	mov	r6, #144	; 0x90
   13a1c:	ldr	r3, [sp, #8]
   13a20:	mov	r0, r7
   13a24:	addne	r0, r0, #4
   13a28:	cmp	r9, #0
   13a2c:	movweq	r6, #140	; 0x8c
   13a30:	cmp	r1, #0
   13a34:	ldr	r6, [r4, r6]
   13a38:	sub	r3, r3, r0
   13a3c:	str	r3, [fp, #-36]	; 0xffffffdc
   13a40:	sub	r0, r6, r0
   13a44:	str	r0, [fp, #-40]	; 0xffffffd8
   13a48:	ble	13aa0 <flatcc_builder_create_buffer@@Base+0x1d4>
   13a4c:	ldr	r0, [r4, #36]	; 0x24
   13a50:	ldr	r6, [r4, #44]	; 0x2c
   13a54:	str	r1, [sp]
   13a58:	add	r1, lr, #8
   13a5c:	mov	r3, r7
   13a60:	blx	r6
   13a64:	cmp	r0, #0
   13a68:	bne	13ac0 <flatcc_builder_create_buffer@@Base+0x1f4>
   13a6c:	cmp	r7, #0
   13a70:	str	r7, [r4, #136]	; 0x88
   13a74:	movne	r0, r7
   13a78:	subne	sp, fp, #28
   13a7c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a80:	ldr	r0, [pc, #116]	; 13afc <flatcc_builder_create_buffer@@Base+0x230>
   13a84:	ldr	r1, [pc, #116]	; 13b00 <flatcc_builder_create_buffer@@Base+0x234>
   13a88:	ldr	r3, [pc, #116]	; 13b04 <flatcc_builder_create_buffer@@Base+0x238>
   13a8c:	mov	r2, #772	; 0x304
   13a90:	add	r0, pc, r0
   13a94:	add	r1, pc, r1
   13a98:	add	r3, pc, r3
   13a9c:	bl	124ac <__assert_fail@plt>
   13aa0:	ldr	r0, [pc, #60]	; 13ae4 <flatcc_builder_create_buffer@@Base+0x218>
   13aa4:	ldr	r1, [pc, #60]	; 13ae8 <flatcc_builder_create_buffer@@Base+0x21c>
   13aa8:	ldr	r3, [pc, #60]	; 13aec <flatcc_builder_create_buffer@@Base+0x220>
   13aac:	movw	r2, #647	; 0x287
   13ab0:	add	r0, pc, r0
   13ab4:	add	r1, pc, r1
   13ab8:	add	r3, pc, r3
   13abc:	bl	124ac <__assert_fail@plt>
   13ac0:	ldr	r0, [pc, #40]	; 13af0 <flatcc_builder_create_buffer@@Base+0x224>
   13ac4:	ldr	r1, [pc, #40]	; 13af4 <flatcc_builder_create_buffer@@Base+0x228>
   13ac8:	ldr	r3, [pc, #40]	; 13af8 <flatcc_builder_create_buffer@@Base+0x22c>
   13acc:	movw	r2, #651	; 0x28b
   13ad0:	add	r0, pc, r0
   13ad4:	add	r1, pc, r1
   13ad8:	add	r3, pc, r3
   13adc:	bl	124ac <__assert_fail@plt>
   13ae0:	andeq	r6, r1, ip, asr #12
   13ae4:	andeq	r5, r0, pc, lsr sp
   13ae8:	andeq	r4, r0, lr, ror fp
   13aec:	strdeq	r5, [r0], -r6
   13af0:	andeq	r5, r0, pc, lsl sp
   13af4:	andeq	r4, r0, lr, asr fp
   13af8:	ldrdeq	r5, [r0], -r6
   13afc:	andeq	r5, r0, pc, asr sp
   13b00:	muleq	r0, lr, fp
   13b04:	andeq	r4, r0, ip, ror #25

00013b08 <flatcc_builder_create_struct@@Base>:
   13b08:	push	{r4, r5, r6, sl, fp, lr}
   13b0c:	add	fp, sp, #16
   13b10:	sub	sp, sp, #80	; 0x50
   13b14:	cmp	r3, #0
   13b18:	beq	13bf0 <flatcc_builder_create_struct@@Base+0xe8>
   13b1c:	mov	r5, r0
   13b20:	ldrh	r0, [r0, #128]	; 0x80
   13b24:	mov	r4, #0
   13b28:	cmp	r0, r3
   13b2c:	strhcc	r3, [r5, #128]	; 0x80
   13b30:	sub	r3, r3, #1
   13b34:	cmp	r2, #0
   13b38:	ldr	r0, [r5, #136]	; 0x88
   13b3c:	str	r4, [sp, #12]
   13b40:	str	r4, [sp, #8]
   13b44:	movne	r4, #1
   13b48:	strne	r2, [sp, #20]
   13b4c:	strne	r1, [sp, #16]
   13b50:	strne	r2, [sp, #8]
   13b54:	strne	r4, [sp, #12]
   13b58:	sub	r6, r0, r2
   13b5c:	and	r3, r6, r3
   13b60:	cmp	r3, #0
   13b64:	beq	13b90 <flatcc_builder_create_struct@@Base+0x88>
   13b68:	add	r2, r3, r2
   13b6c:	add	r1, sp, #8
   13b70:	str	r2, [sp, #8]
   13b74:	add	r1, r1, r4, lsl #3
   13b78:	add	r4, r4, #1
   13b7c:	ldr	r6, [pc, #172]	; 13c30 <flatcc_builder_create_struct@@Base+0x128>
   13b80:	ldr	r6, [pc, r6]
   13b84:	str	r6, [r1, #8]
   13b88:	str	r3, [r1, #12]
   13b8c:	str	r4, [sp, #12]
   13b90:	cmp	r2, #0
   13b94:	ble	13c10 <flatcc_builder_create_struct@@Base+0x108>
   13b98:	sub	r6, r0, r2
   13b9c:	ldr	r0, [r5, #36]	; 0x24
   13ba0:	ldr	ip, [r5, #44]	; 0x2c
   13ba4:	add	r1, sp, #8
   13ba8:	str	r2, [sp]
   13bac:	mov	r2, r4
   13bb0:	add	r1, r1, #8
   13bb4:	mov	r3, r6
   13bb8:	blx	ip
   13bbc:	cmp	r0, #0
   13bc0:	streq	r6, [r5, #136]	; 0x88
   13bc4:	moveq	r0, r6
   13bc8:	subeq	sp, fp, #16
   13bcc:	popeq	{r4, r5, r6, sl, fp, pc}
   13bd0:	ldr	r0, [pc, #116]	; 13c4c <flatcc_builder_create_struct@@Base+0x144>
   13bd4:	ldr	r1, [pc, #116]	; 13c50 <flatcc_builder_create_struct@@Base+0x148>
   13bd8:	ldr	r3, [pc, #116]	; 13c54 <flatcc_builder_create_struct@@Base+0x14c>
   13bdc:	movw	r2, #651	; 0x28b
   13be0:	add	r0, pc, r0
   13be4:	add	r1, pc, r1
   13be8:	add	r3, pc, r3
   13bec:	bl	124ac <__assert_fail@plt>
   13bf0:	ldr	r0, [pc, #60]	; 13c34 <flatcc_builder_create_struct@@Base+0x12c>
   13bf4:	ldr	r1, [pc, #60]	; 13c38 <flatcc_builder_create_struct@@Base+0x130>
   13bf8:	ldr	r3, [pc, #60]	; 13c3c <flatcc_builder_create_struct@@Base+0x134>
   13bfc:	movw	r2, #783	; 0x30f
   13c00:	add	r0, pc, r0
   13c04:	add	r1, pc, r1
   13c08:	add	r3, pc, r3
   13c0c:	bl	124ac <__assert_fail@plt>
   13c10:	ldr	r0, [pc, #40]	; 13c40 <flatcc_builder_create_struct@@Base+0x138>
   13c14:	ldr	r1, [pc, #40]	; 13c44 <flatcc_builder_create_struct@@Base+0x13c>
   13c18:	ldr	r3, [pc, #40]	; 13c48 <flatcc_builder_create_struct@@Base+0x140>
   13c1c:	movw	r2, #647	; 0x287
   13c20:	add	r0, pc, r0
   13c24:	add	r1, pc, r1
   13c28:	add	r3, pc, r3
   13c2c:	bl	124ac <__assert_fail@plt>
   13c30:	andeq	r6, r1, ip, asr #9
   13c34:	andeq	r4, r0, r7, lsl #24
   13c38:	andeq	r4, r0, lr, lsr #20
   13c3c:	andeq	r4, r0, sl, lsl #24
   13c40:	andeq	r5, r0, pc, asr #23
   13c44:	andeq	r4, r0, lr, lsl #20
   13c48:	andeq	r5, r0, r6, lsl #21
   13c4c:	andeq	r5, r0, pc, lsl #24
   13c50:	andeq	r4, r0, lr, asr #20
   13c54:	andeq	r5, r0, r6, asr #21

00013c58 <flatcc_builder_start_buffer@@Base>:
   13c58:	push	{r4, r5, r6, r7, fp, lr}
   13c5c:	add	fp, sp, #16
   13c60:	mov	r5, r1
   13c64:	ldrh	r1, [r0, #128]	; 0x80
   13c68:	mov	r6, r3
   13c6c:	mov	r7, r2
   13c70:	mov	r4, r0
   13c74:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   13c78:	mov	r1, r0
   13c7c:	mvn	r0, #0
   13c80:	cmp	r1, #0
   13c84:	popne	{r4, r5, r6, r7, fp, pc}
   13c88:	mov	r0, #1
   13c8c:	cmp	r5, #0
   13c90:	strh	r0, [r4, #128]	; 0x80
   13c94:	ldrh	r1, [r4, #132]	; 0x84
   13c98:	ldr	r2, [r4, #32]
   13c9c:	strh	r1, [r2, #34]	; 0x22
   13ca0:	strh	r7, [r4, #132]	; 0x84
   13ca4:	ldrh	r1, [r4, #164]	; 0xa4
   13ca8:	ldr	r2, [r4, #32]
   13cac:	strh	r1, [r2, #32]
   13cb0:	strh	r6, [r4, #164]	; 0xa4
   13cb4:	ldr	r1, [r4, #32]
   13cb8:	ldr	r2, [r4, #144]	; 0x90
   13cbc:	str	r2, [r1, #20]
   13cc0:	ldr	r1, [r4, #32]
   13cc4:	ldr	r2, [r4, #152]	; 0x98
   13cc8:	str	r2, [r1, #28]
   13ccc:	ldr	r3, [r4, #148]	; 0x94
   13cd0:	ldr	r1, [r4, #32]
   13cd4:	ldr	r2, [r4, #136]	; 0x88
   13cd8:	ldr	r7, [r4, #168]	; 0xa8
   13cdc:	add	r6, r3, #1
   13ce0:	str	r2, [r4, #144]	; 0x90
   13ce4:	str	r6, [r4, #148]	; 0x94
   13ce8:	str	r3, [r4, #152]	; 0x98
   13cec:	str	r7, [r1, #16]
   13cf0:	ldr	r1, [pc, #28]	; 13d14 <flatcc_builder_start_buffer@@Base+0xbc>
   13cf4:	ldr	r1, [pc, r1]
   13cf8:	movne	r1, r5
   13cfc:	ldr	r1, [r1]
   13d00:	str	r1, [r4, #168]	; 0xa8
   13d04:	ldr	r1, [r4, #32]
   13d08:	strh	r0, [r1, #14]
   13d0c:	mov	r0, #0
   13d10:	pop	{r4, r5, r6, r7, fp, pc}
   13d14:	andeq	r6, r1, r8, asr r3
   13d18:	push	{r4, r5, r6, r7, fp, lr}
   13d1c:	add	fp, sp, #16
   13d20:	sub	sp, sp, #8
   13d24:	mov	r5, r1
   13d28:	ldr	r1, [r0, #156]	; 0x9c
   13d2c:	ldr	r2, [r0, #160]	; 0xa0
   13d30:	mov	r4, r0
   13d34:	add	r0, r1, #1
   13d38:	cmp	r1, r2
   13d3c:	str	r0, [r4, #156]	; 0x9c
   13d40:	bge	13d54 <flatcc_builder_start_buffer@@Base+0xfc>
   13d44:	ldr	r0, [r4, #32]
   13d48:	add	r0, r0, #36	; 0x24
   13d4c:	str	r0, [r4, #32]
   13d50:	b	13de8 <flatcc_builder_start_buffer@@Base+0x190>
   13d54:	ldr	r2, [r4, #176]	; 0xb0
   13d58:	mvn	r6, #0
   13d5c:	cmp	r2, #1
   13d60:	cmpge	r1, r2
   13d64:	bge	13e20 <flatcc_builder_start_buffer@@Base+0x1c8>
   13d68:	add	r7, r0, r0, lsl #3
   13d6c:	ldr	r0, [r4, #88]	; 0x58
   13d70:	lsl	r2, r7, #2
   13d74:	cmp	r2, r0
   13d78:	bls	13da0 <flatcc_builder_start_buffer@@Base+0x148>
   13d7c:	ldr	r0, [r4, #40]	; 0x28
   13d80:	ldr	ip, [r4, #48]	; 0x30
   13d84:	mov	r3, #4
   13d88:	add	r1, r4, #84	; 0x54
   13d8c:	str	r3, [sp]
   13d90:	mov	r3, #0
   13d94:	blx	ip
   13d98:	cmp	r0, #0
   13d9c:	bne	13e2c <flatcc_builder_start_buffer@@Base+0x1d4>
   13da0:	ldr	r1, [r4, #84]	; 0x54
   13da4:	mvn	r0, #35	; 0x23
   13da8:	add	r0, r0, r7, lsl #2
   13dac:	adds	r0, r0, r1
   13db0:	str	r0, [r4, #32]
   13db4:	beq	13e20 <flatcc_builder_start_buffer@@Base+0x1c8>
   13db8:	ldr	r1, [r4, #88]	; 0x58
   13dbc:	movw	r3, #36409	; 0x8e39
   13dc0:	ldr	r2, [r4, #176]	; 0xb0
   13dc4:	movt	r3, #14563	; 0x38e3
   13dc8:	umull	r1, r3, r1, r3
   13dcc:	cmp	r2, r3, lsr #3
   13dd0:	lsr	r1, r3, #3
   13dd4:	mov	r3, r1
   13dd8:	movlt	r3, r2
   13ddc:	cmp	r2, #0
   13de0:	movle	r3, r1
   13de4:	str	r3, [r4, #160]	; 0xa0
   13de8:	ldr	r1, [r4, #20]
   13dec:	mvn	r3, #3
   13df0:	mov	r6, #0
   13df4:	str	r1, [r0, #8]
   13df8:	ldrh	r2, [r4, #130]	; 0x82
   13dfc:	strh	r2, [r0, #12]
   13e00:	strh	r5, [r4, #130]	; 0x82
   13e04:	ldr	r2, [r4, #28]
   13e08:	stm	r0, {r2, r3}
   13e0c:	add	r0, r1, r2
   13e10:	str	r6, [r4, #20]
   13e14:	add	r0, r0, #7
   13e18:	bic	r0, r0, #7
   13e1c:	str	r0, [r4, #28]
   13e20:	mov	r0, r6
   13e24:	sub	sp, fp, #16
   13e28:	pop	{r4, r5, r6, r7, fp, pc}
   13e2c:	ldr	r0, [pc, #24]	; 13e4c <flatcc_builder_start_buffer@@Base+0x1f4>
   13e30:	ldr	r1, [pc, #24]	; 13e50 <flatcc_builder_start_buffer@@Base+0x1f8>
   13e34:	ldr	r3, [pc, #24]	; 13e54 <flatcc_builder_start_buffer@@Base+0x1fc>
   13e38:	mov	r2, #308	; 0x134
   13e3c:	add	r0, pc, r0
   13e40:	add	r1, pc, r1
   13e44:	add	r3, pc, r3
   13e48:	bl	124ac <__assert_fail@plt>
   13e4c:			; <UNDEFINED> instruction: 0x000059b3
   13e50:	strdeq	r4, [r0], -r2
   13e54:	andeq	r5, r0, r5, ror #15

00013e58 <flatcc_builder_end_buffer@@Base>:
   13e58:	push	{r4, r5, r6, sl, fp, lr}
   13e5c:	add	fp, sp, #16
   13e60:	sub	sp, sp, #8
   13e64:	mov	r4, r0
   13e68:	ldr	r0, [r0, #32]
   13e6c:	ldrh	r0, [r0, #14]
   13e70:	cmp	r0, #1
   13e74:	bne	13f68 <flatcc_builder_end_buffer@@Base+0x110>
   13e78:	mov	r3, r1
   13e7c:	ldr	r1, [r4, #152]	; 0x98
   13e80:	ldrh	r0, [r4, #164]	; 0xa4
   13e84:	ldrh	r2, [r4, #132]	; 0x84
   13e88:	cmp	r1, #0
   13e8c:	ldrh	r1, [r4, #128]	; 0x80
   13e90:	and	r0, r0, #2
   13e94:	orrne	r0, r0, #1
   13e98:	cmp	r1, r2
   13e9c:	movcc	r1, r2
   13ea0:	strhcc	r2, [r4, #128]	; 0x80
   13ea4:	str	r0, [sp, #4]
   13ea8:	mov	r0, r4
   13eac:	str	r1, [sp]
   13eb0:	add	r1, r4, #168	; 0xa8
   13eb4:	bl	138cc <flatcc_builder_create_buffer@@Base>
   13eb8:	mov	r6, r0
   13ebc:	cmp	r0, #0
   13ec0:	beq	13f5c <flatcc_builder_end_buffer@@Base+0x104>
   13ec4:	ldr	r1, [r4, #32]
   13ec8:	ldr	r0, [r4, #16]
   13ecc:	ldr	r2, [r4, #20]
   13ed0:	ldr	r3, [r1, #20]
   13ed4:	str	r3, [r4, #144]	; 0x90
   13ed8:	ldr	r3, [r1, #28]
   13edc:	str	r3, [r4, #152]	; 0x98
   13ee0:	ldr	r3, [r1, #16]
   13ee4:	str	r3, [r4, #168]	; 0xa8
   13ee8:	ldrh	r1, [r1, #32]
   13eec:	strh	r1, [r4, #164]	; 0xa4
   13ef0:	mov	r1, #0
   13ef4:	bl	1247c <memset@plt>
   13ef8:	ldr	r0, [r4, #32]
   13efc:	ldr	r1, [r4, #60]	; 0x3c
   13f00:	ldr	r2, [r4, #64]	; 0x40
   13f04:	ldr	r3, [r0, #8]
   13f08:	str	r3, [r4, #20]
   13f0c:	ldr	r3, [r0]
   13f10:	str	r3, [r4, #28]
   13f14:	add	r1, r1, r3
   13f18:	ldr	r5, [r0, #4]
   13f1c:	str	r1, [r4, #16]
   13f20:	sub	r1, r2, r3
   13f24:	cmp	r1, r5
   13f28:	movhi	r1, r5
   13f2c:	str	r1, [r4, #24]
   13f30:	ldrh	r1, [r4, #130]	; 0x82
   13f34:	ldrh	r2, [r4, #128]	; 0x80
   13f38:	cmp	r2, r1
   13f3c:	strhcc	r1, [r4, #128]	; 0x80
   13f40:	ldrh	r1, [r0, #12]
   13f44:	sub	r0, r0, #36	; 0x24
   13f48:	str	r0, [r4, #32]
   13f4c:	strh	r1, [r4, #130]	; 0x82
   13f50:	ldr	r0, [r4, #156]	; 0x9c
   13f54:	sub	r0, r0, #1
   13f58:	str	r0, [r4, #156]	; 0x9c
   13f5c:	mov	r0, r6
   13f60:	sub	sp, fp, #16
   13f64:	pop	{r4, r5, r6, sl, fp, pc}
   13f68:	ldr	r0, [pc, #24]	; 13f88 <flatcc_builder_end_buffer@@Base+0x130>
   13f6c:	ldr	r1, [pc, #24]	; 13f8c <flatcc_builder_end_buffer@@Base+0x134>
   13f70:	ldr	r3, [pc, #24]	; 13f90 <flatcc_builder_end_buffer@@Base+0x138>
   13f74:	movw	r2, #838	; 0x346
   13f78:	add	r0, pc, r0
   13f7c:	add	r1, pc, r1
   13f80:	add	r3, pc, r3
   13f84:	bl	124ac <__assert_fail@plt>
   13f88:	andeq	r4, r0, r0, lsl #18
   13f8c:			; <UNDEFINED> instruction: 0x000046b6
   13f90:	andeq	r4, r0, r4, lsr #18

00013f94 <flatcc_builder_start_struct@@Base>:
   13f94:	push	{r4, r5, r6, r7, fp, lr}
   13f98:	add	fp, sp, #16
   13f9c:	sub	sp, sp, #8
   13fa0:	mov	r6, r1
   13fa4:	mov	r1, r2
   13fa8:	mov	r4, r0
   13fac:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   13fb0:	mov	r5, #0
   13fb4:	cmp	r0, #0
   13fb8:	bne	14068 <flatcc_builder_start_struct@@Base+0xd4>
   13fbc:	ldr	r2, [r4, #32]
   13fc0:	mov	r0, #2
   13fc4:	mvn	r7, #3
   13fc8:	strh	r0, [r2, #14]
   13fcc:	ldr	r1, [r4, #28]
   13fd0:	ldr	r3, [r4, #64]	; 0x40
   13fd4:	ldr	r0, [r4, #60]	; 0x3c
   13fd8:	sub	r3, r3, r1
   13fdc:	add	r0, r0, r1
   13fe0:	cmn	r3, #4
   13fe4:	str	r0, [r4, #16]
   13fe8:	movcs	r3, r7
   13fec:	str	r3, [r4, #24]
   13ff0:	str	r7, [r2, #4]
   13ff4:	ldr	r7, [r4, #20]
   13ff8:	add	r2, r7, r6
   13ffc:	cmp	r2, r3
   14000:	str	r2, [r4, #20]
   14004:	bcc	14064 <flatcc_builder_start_struct@@Base+0xd0>
   14008:	ldr	r0, [r4, #40]	; 0x28
   1400c:	ldr	r6, [r4, #48]	; 0x30
   14010:	add	r1, r1, r2
   14014:	mov	r3, #1
   14018:	str	r3, [sp]
   1401c:	add	r2, r1, #1
   14020:	add	r1, r4, #60	; 0x3c
   14024:	mov	r3, #1
   14028:	blx	r6
   1402c:	cmp	r0, #0
   14030:	bne	14068 <flatcc_builder_start_struct@@Base+0xd4>
   14034:	ldr	r1, [r4, #28]
   14038:	ldr	r0, [r4, #60]	; 0x3c
   1403c:	ldr	r3, [r4, #64]	; 0x40
   14040:	ldr	r2, [r4, #32]
   14044:	add	r0, r0, r1
   14048:	sub	r1, r3, r1
   1404c:	mvn	r3, #3
   14050:	cmn	r1, #4
   14054:	str	r0, [r4, #16]
   14058:	movcs	r1, r3
   1405c:	str	r1, [r4, #24]
   14060:	str	r3, [r2, #4]
   14064:	add	r5, r0, r7
   14068:	mov	r0, r5
   1406c:	sub	sp, fp, #16
   14070:	pop	{r4, r5, r6, r7, fp, pc}

00014074 <flatcc_builder_struct_edit@@Base>:
   14074:	ldr	r0, [r0, #16]
   14078:	bx	lr

0001407c <flatcc_builder_end_struct@@Base>:
   1407c:	push	{r4, r5, fp, lr}
   14080:	add	fp, sp, #8
   14084:	mov	r4, r0
   14088:	ldr	r0, [r0, #32]
   1408c:	ldrh	r0, [r0, #14]
   14090:	cmp	r0, #2
   14094:	bne	14134 <flatcc_builder_end_struct@@Base+0xb8>
   14098:	ldrh	r3, [r4, #130]	; 0x82
   1409c:	ldr	r1, [r4, #16]
   140a0:	ldr	r2, [r4, #20]
   140a4:	mov	r0, r4
   140a8:	bl	13b08 <flatcc_builder_create_struct@@Base>
   140ac:	mov	r5, r0
   140b0:	cmp	r0, #0
   140b4:	beq	1412c <flatcc_builder_end_struct@@Base+0xb0>
   140b8:	ldr	r0, [r4, #16]
   140bc:	ldr	r2, [r4, #20]
   140c0:	mov	r1, #0
   140c4:	bl	1247c <memset@plt>
   140c8:	ldr	r0, [r4, #32]
   140cc:	ldr	r1, [r4, #60]	; 0x3c
   140d0:	ldr	ip, [r4, #64]	; 0x40
   140d4:	ldr	r3, [r0, #8]
   140d8:	str	r3, [r4, #20]
   140dc:	ldr	r3, [r0]
   140e0:	str	r3, [r4, #28]
   140e4:	add	r1, r1, r3
   140e8:	ldr	r2, [r0, #4]
   140ec:	str	r1, [r4, #16]
   140f0:	sub	r1, ip, r3
   140f4:	cmp	r1, r2
   140f8:	movhi	r1, r2
   140fc:	str	r1, [r4, #24]
   14100:	ldrh	r1, [r4, #130]	; 0x82
   14104:	ldrh	r2, [r4, #128]	; 0x80
   14108:	cmp	r2, r1
   1410c:	strhcc	r1, [r4, #128]	; 0x80
   14110:	ldrh	r1, [r0, #12]
   14114:	sub	r0, r0, #36	; 0x24
   14118:	str	r0, [r4, #32]
   1411c:	strh	r1, [r4, #130]	; 0x82
   14120:	ldr	r0, [r4, #156]	; 0x9c
   14124:	sub	r0, r0, #1
   14128:	str	r0, [r4, #156]	; 0x9c
   1412c:	mov	r0, r5
   14130:	pop	{r4, r5, fp, pc}
   14134:	ldr	r0, [pc, #24]	; 14154 <flatcc_builder_end_struct@@Base+0xd8>
   14138:	ldr	r1, [pc, #24]	; 14158 <flatcc_builder_end_struct@@Base+0xdc>
   1413c:	ldr	r3, [pc, #24]	; 1415c <flatcc_builder_end_struct@@Base+0xe0>
   14140:	mov	r2, #872	; 0x368
   14144:	add	r0, pc, r0
   14148:	add	r1, pc, r1
   1414c:	add	r3, pc, r3
   14150:	bl	124ac <__assert_fail@plt>
   14154:			; <UNDEFINED> instruction: 0x000047b9
   14158:	andeq	r4, r0, sl, ror #9
   1415c:	ldrdeq	r4, [r0], -sp

00014160 <flatcc_builder_extend_vector@@Base>:
   14160:	push	{r4, r5, fp, lr}
   14164:	add	fp, sp, #8
   14168:	sub	sp, sp, #8
   1416c:	mov	r4, r0
   14170:	ldr	r0, [r0, #32]
   14174:	ldr	r2, [r0, #20]
   14178:	adds	r2, r2, r1
   1417c:	bcs	14234 <flatcc_builder_extend_vector@@Base+0xd4>
   14180:	ldr	r3, [r0, #24]
   14184:	cmp	r2, r3
   14188:	bhi	14234 <flatcc_builder_extend_vector@@Base+0xd4>
   1418c:	str	r2, [r0, #20]
   14190:	ldr	r2, [r4, #32]
   14194:	ldr	r5, [r4, #20]
   14198:	ldr	r0, [r4, #24]
   1419c:	ldr	r2, [r2, #16]
   141a0:	mla	r1, r2, r1, r5
   141a4:	cmp	r1, r0
   141a8:	str	r1, [r4, #20]
   141ac:	bcs	141b8 <flatcc_builder_extend_vector@@Base+0x58>
   141b0:	ldr	r0, [r4, #16]
   141b4:	b	14228 <flatcc_builder_extend_vector@@Base+0xc8>
   141b8:	ldr	r2, [r4, #28]
   141bc:	ldr	r0, [r4, #40]	; 0x28
   141c0:	ldr	ip, [r4, #48]	; 0x30
   141c4:	mov	r3, #1
   141c8:	str	r3, [sp]
   141cc:	mov	r3, #1
   141d0:	add	r1, r1, r2
   141d4:	add	r2, r1, #1
   141d8:	add	r1, r4, #60	; 0x3c
   141dc:	blx	ip
   141e0:	mov	r1, r0
   141e4:	mov	r0, #0
   141e8:	cmp	r1, #0
   141ec:	beq	141f8 <flatcc_builder_extend_vector@@Base+0x98>
   141f0:	sub	sp, fp, #8
   141f4:	pop	{r4, r5, fp, pc}
   141f8:	ldr	r1, [r4, #28]
   141fc:	ldr	r0, [r4, #60]	; 0x3c
   14200:	ldr	r3, [r4, #64]	; 0x40
   14204:	ldr	r2, [r4, #32]
   14208:	add	r0, r0, r1
   1420c:	sub	r1, r3, r1
   14210:	mvn	r3, #3
   14214:	cmn	r1, #4
   14218:	str	r0, [r4, #16]
   1421c:	movcs	r1, r3
   14220:	str	r1, [r4, #24]
   14224:	str	r3, [r2, #4]
   14228:	add	r0, r0, r5
   1422c:	sub	sp, fp, #8
   14230:	pop	{r4, r5, fp, pc}
   14234:	ldr	r0, [pc, #24]	; 14254 <flatcc_builder_extend_vector@@Base+0xf4>
   14238:	ldr	r1, [pc, #24]	; 14258 <flatcc_builder_extend_vector@@Base+0xf8>
   1423c:	ldr	r3, [pc, #24]	; 1425c <flatcc_builder_extend_vector@@Base+0xfc>
   14240:	mov	r2, #892	; 0x37c
   14244:	add	r0, pc, r0
   14248:	add	r1, pc, r1
   1424c:	add	r3, pc, r3
   14250:	bl	124ac <__assert_fail@plt>
   14254:			; <UNDEFINED> instruction: 0x000054b4
   14258:	andeq	r4, r0, sl, ror #7
   1425c:	andeq	r5, r0, r7, asr #9

00014260 <flatcc_builder_vector_push@@Base>:
   14260:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14264:	add	fp, sp, #24
   14268:	sub	sp, sp, #8
   1426c:	mov	r5, r0
   14270:	ldr	r0, [r0, #32]
   14274:	mov	r8, r1
   14278:	ldrh	r1, [r0, #14]
   1427c:	cmp	r1, #4
   14280:	bne	14358 <flatcc_builder_vector_push@@Base+0xf8>
   14284:	ldr	r1, [r0, #20]
   14288:	ldr	r2, [r0, #24]
   1428c:	cmp	r1, r2
   14290:	bhi	14378 <flatcc_builder_vector_push@@Base+0x118>
   14294:	add	r1, r1, #1
   14298:	str	r1, [r0, #20]
   1429c:	ldr	r1, [r5, #32]
   142a0:	ldr	r4, [r5, #20]
   142a4:	ldr	r0, [r5, #24]
   142a8:	ldr	r6, [r1, #16]
   142ac:	add	r1, r4, r6
   142b0:	cmp	r1, r0
   142b4:	str	r1, [r5, #20]
   142b8:	bcs	142dc <flatcc_builder_vector_push@@Base+0x7c>
   142bc:	ldr	r0, [r5, #16]
   142c0:	adds	r7, r0, r4
   142c4:	beq	14348 <flatcc_builder_vector_push@@Base+0xe8>
   142c8:	mov	r0, r7
   142cc:	mov	r1, r8
   142d0:	mov	r2, r6
   142d4:	bl	123f8 <memcpy@plt>
   142d8:	b	1434c <flatcc_builder_vector_push@@Base+0xec>
   142dc:	ldr	r2, [r5, #28]
   142e0:	ldr	r0, [r5, #40]	; 0x28
   142e4:	ldr	r7, [r5, #48]	; 0x30
   142e8:	mov	r3, #1
   142ec:	str	r3, [sp]
   142f0:	mov	r3, #1
   142f4:	add	r1, r1, r2
   142f8:	add	r2, r1, #1
   142fc:	add	r1, r5, #60	; 0x3c
   14300:	blx	r7
   14304:	mov	r7, #0
   14308:	cmp	r0, #0
   1430c:	bne	1434c <flatcc_builder_vector_push@@Base+0xec>
   14310:	ldr	r1, [r5, #28]
   14314:	ldr	r0, [r5, #60]	; 0x3c
   14318:	ldr	r3, [r5, #64]	; 0x40
   1431c:	ldr	r2, [r5, #32]
   14320:	add	r0, r0, r1
   14324:	sub	r1, r3, r1
   14328:	mvn	r3, #3
   1432c:	cmn	r1, #4
   14330:	str	r0, [r5, #16]
   14334:	movcs	r1, r3
   14338:	str	r1, [r5, #24]
   1433c:	str	r3, [r2, #4]
   14340:	adds	r7, r0, r4
   14344:	bne	142c8 <flatcc_builder_vector_push@@Base+0x68>
   14348:	mov	r7, #0
   1434c:	mov	r0, r7
   14350:	sub	sp, fp, #24
   14354:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14358:	ldr	r0, [pc, #56]	; 14398 <flatcc_builder_vector_push@@Base+0x138>
   1435c:	ldr	r1, [pc, #56]	; 1439c <flatcc_builder_vector_push@@Base+0x13c>
   14360:	ldr	r3, [pc, #56]	; 143a0 <flatcc_builder_vector_push@@Base+0x140>
   14364:	movw	r2, #907	; 0x38b
   14368:	add	r0, pc, r0
   1436c:	add	r1, pc, r1
   14370:	add	r3, pc, r3
   14374:	bl	124ac <__assert_fail@plt>
   14378:	ldr	r0, [pc, #36]	; 143a4 <flatcc_builder_vector_push@@Base+0x144>
   1437c:	ldr	r1, [pc, #36]	; 143a8 <flatcc_builder_vector_push@@Base+0x148>
   14380:	ldr	r3, [pc, #36]	; 143ac <flatcc_builder_vector_push@@Base+0x14c>
   14384:	mov	r2, #908	; 0x38c
   14388:	add	r0, pc, r0
   1438c:	add	r1, pc, r1
   14390:	add	r3, pc, r3
   14394:	bl	124ac <__assert_fail@plt>
   14398:	andeq	r4, r0, r4, lsl #12
   1439c:	andeq	r4, r0, r6, asr #5
   143a0:	andeq	r4, r0, r8, lsr #12
   143a4:	andeq	r4, r0, r3, asr r6
   143a8:	andeq	r4, r0, r6, lsr #5
   143ac:	andeq	r4, r0, r8, lsl #12

000143b0 <flatcc_builder_append_vector@@Base>:
   143b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   143b4:	add	fp, sp, #24
   143b8:	sub	sp, sp, #8
   143bc:	mov	r6, r0
   143c0:	ldr	r0, [r0, #32]
   143c4:	mov	r8, r1
   143c8:	ldrh	r1, [r0, #14]
   143cc:	cmp	r1, #4
   143d0:	bne	144d0 <flatcc_builder_append_vector@@Base+0x120>
   143d4:	ldr	r1, [r0, #20]
   143d8:	mov	r5, r2
   143dc:	adds	r1, r1, r2
   143e0:	bcs	144b0 <flatcc_builder_append_vector@@Base+0x100>
   143e4:	ldr	r2, [r0, #24]
   143e8:	cmp	r1, r2
   143ec:	bhi	144b0 <flatcc_builder_append_vector@@Base+0x100>
   143f0:	str	r1, [r0, #20]
   143f4:	ldr	r1, [r6, #32]
   143f8:	ldr	r4, [r6, #20]
   143fc:	ldr	r0, [r6, #24]
   14400:	ldr	r9, [r1, #16]
   14404:	mla	r1, r9, r5, r4
   14408:	cmp	r1, r0
   1440c:	str	r1, [r6, #20]
   14410:	bcs	14434 <flatcc_builder_append_vector@@Base+0x84>
   14414:	ldr	r0, [r6, #16]
   14418:	adds	r7, r0, r4
   1441c:	beq	144a0 <flatcc_builder_append_vector@@Base+0xf0>
   14420:	mul	r2, r9, r5
   14424:	mov	r0, r7
   14428:	mov	r1, r8
   1442c:	bl	123f8 <memcpy@plt>
   14430:	b	144a4 <flatcc_builder_append_vector@@Base+0xf4>
   14434:	ldr	r2, [r6, #28]
   14438:	ldr	r0, [r6, #40]	; 0x28
   1443c:	ldr	r7, [r6, #48]	; 0x30
   14440:	mov	r3, #1
   14444:	str	r3, [sp]
   14448:	mov	r3, #1
   1444c:	add	r1, r1, r2
   14450:	add	r2, r1, #1
   14454:	add	r1, r6, #60	; 0x3c
   14458:	blx	r7
   1445c:	mov	r7, #0
   14460:	cmp	r0, #0
   14464:	bne	144a4 <flatcc_builder_append_vector@@Base+0xf4>
   14468:	ldr	r1, [r6, #28]
   1446c:	ldr	r0, [r6, #60]	; 0x3c
   14470:	ldr	r3, [r6, #64]	; 0x40
   14474:	ldr	r2, [r6, #32]
   14478:	add	r0, r0, r1
   1447c:	sub	r1, r3, r1
   14480:	mvn	r3, #3
   14484:	cmn	r1, #4
   14488:	str	r0, [r6, #16]
   1448c:	movcs	r1, r3
   14490:	str	r1, [r6, #24]
   14494:	str	r3, [r2, #4]
   14498:	adds	r7, r0, r4
   1449c:	bne	14420 <flatcc_builder_append_vector@@Base+0x70>
   144a0:	mov	r7, #0
   144a4:	mov	r0, r7
   144a8:	sub	sp, fp, #24
   144ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144b0:	ldr	r0, [pc, #68]	; 144fc <flatcc_builder_append_vector@@Base+0x14c>
   144b4:	ldr	r1, [pc, #68]	; 14500 <flatcc_builder_append_vector@@Base+0x150>
   144b8:	ldr	r3, [pc, #68]	; 14504 <flatcc_builder_append_vector@@Base+0x154>
   144bc:	mov	r2, #892	; 0x37c
   144c0:	add	r0, pc, r0
   144c4:	add	r1, pc, r1
   144c8:	add	r3, pc, r3
   144cc:	bl	124ac <__assert_fail@plt>
   144d0:	ldr	r0, [pc, #24]	; 144f0 <flatcc_builder_append_vector@@Base+0x140>
   144d4:	ldr	r1, [pc, #24]	; 144f4 <flatcc_builder_append_vector@@Base+0x144>
   144d8:	ldr	r3, [pc, #24]	; 144f8 <flatcc_builder_append_vector@@Base+0x148>
   144dc:	movw	r2, #915	; 0x393
   144e0:	add	r0, pc, r0
   144e4:	add	r1, pc, r1
   144e8:	add	r3, pc, r3
   144ec:	bl	124ac <__assert_fail@plt>
   144f0:	andeq	r4, r0, ip, lsl #9
   144f4:	andeq	r4, r0, lr, asr #2
   144f8:	andeq	r4, r0, r0, lsr r5
   144fc:	andeq	r5, r0, r8, lsr r2
   14500:	andeq	r4, r0, lr, ror #2
   14504:	andeq	r5, r0, fp, asr #4

00014508 <flatcc_builder_extend_offset_vector@@Base>:
   14508:	push	{r4, r5, fp, lr}
   1450c:	add	fp, sp, #8
   14510:	sub	sp, sp, #8
   14514:	mov	r4, r0
   14518:	ldr	r0, [r0, #32]
   1451c:	ldr	r2, [r0, #20]
   14520:	adds	r2, r2, r1
   14524:	cmpcc	r2, #1073741824	; 0x40000000
   14528:	bcc	1454c <flatcc_builder_extend_offset_vector@@Base+0x44>
   1452c:	ldr	r0, [pc, #184]	; 145ec <flatcc_builder_extend_offset_vector@@Base+0xe4>
   14530:	ldr	r1, [pc, #184]	; 145f0 <flatcc_builder_extend_offset_vector@@Base+0xe8>
   14534:	ldr	r3, [pc, #184]	; 145f4 <flatcc_builder_extend_offset_vector@@Base+0xec>
   14538:	mov	r2, #892	; 0x37c
   1453c:	add	r0, pc, r0
   14540:	add	r1, pc, r1
   14544:	add	r3, pc, r3
   14548:	bl	124ac <__assert_fail@plt>
   1454c:	str	r2, [r0, #20]
   14550:	ldr	r5, [r4, #20]
   14554:	ldr	r0, [r4, #24]
   14558:	add	r1, r5, r1, lsl #2
   1455c:	cmp	r1, r0
   14560:	str	r1, [r4, #20]
   14564:	bcs	14570 <flatcc_builder_extend_offset_vector@@Base+0x68>
   14568:	ldr	r0, [r4, #16]
   1456c:	b	145e0 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   14570:	ldr	r2, [r4, #28]
   14574:	ldr	r0, [r4, #40]	; 0x28
   14578:	ldr	ip, [r4, #48]	; 0x30
   1457c:	mov	r3, #1
   14580:	str	r3, [sp]
   14584:	mov	r3, #1
   14588:	add	r1, r1, r2
   1458c:	add	r2, r1, #1
   14590:	add	r1, r4, #60	; 0x3c
   14594:	blx	ip
   14598:	mov	r1, r0
   1459c:	mov	r0, #0
   145a0:	cmp	r1, #0
   145a4:	beq	145b0 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   145a8:	sub	sp, fp, #8
   145ac:	pop	{r4, r5, fp, pc}
   145b0:	ldr	r1, [r4, #28]
   145b4:	ldr	r0, [r4, #60]	; 0x3c
   145b8:	ldr	r3, [r4, #64]	; 0x40
   145bc:	ldr	r2, [r4, #32]
   145c0:	add	r0, r0, r1
   145c4:	sub	r1, r3, r1
   145c8:	mvn	r3, #3
   145cc:	cmn	r1, #4
   145d0:	str	r0, [r4, #16]
   145d4:	movcs	r1, r3
   145d8:	str	r1, [r4, #24]
   145dc:	str	r3, [r2, #4]
   145e0:	add	r0, r0, r5
   145e4:	sub	sp, fp, #8
   145e8:	pop	{r4, r5, fp, pc}
   145ec:			; <UNDEFINED> instruction: 0x000051bc
   145f0:	strdeq	r4, [r0], -r2
   145f4:	andeq	r5, r0, pc, asr #3

000145f8 <flatcc_builder_offset_vector_push@@Base>:
   145f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145fc:	add	fp, sp, #24
   14600:	sub	sp, sp, #8
   14604:	mov	r6, r0
   14608:	ldr	r0, [r0, #32]
   1460c:	mov	r8, r1
   14610:	ldrh	r1, [r0, #14]
   14614:	cmp	r1, #5
   14618:	bne	146cc <flatcc_builder_offset_vector_push@@Base+0xd4>
   1461c:	ldr	r1, [r0, #20]
   14620:	mov	r5, #0
   14624:	cmn	r1, #-1073741823	; 0xc0000001
   14628:	beq	146c0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   1462c:	add	r1, r1, #1
   14630:	str	r1, [r0, #20]
   14634:	ldr	r7, [r6, #20]
   14638:	ldr	r0, [r6, #24]
   1463c:	add	r1, r7, #4
   14640:	cmp	r1, r0
   14644:	str	r1, [r6, #20]
   14648:	bcs	14654 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1464c:	ldr	r0, [r6, #16]
   14650:	b	146b4 <flatcc_builder_offset_vector_push@@Base+0xbc>
   14654:	ldr	r1, [r6, #28]
   14658:	ldr	r0, [r6, #40]	; 0x28
   1465c:	ldr	r4, [r6, #48]	; 0x30
   14660:	mov	r2, #1
   14664:	mov	r3, #1
   14668:	str	r2, [sp]
   1466c:	add	r1, r7, r1
   14670:	add	r2, r1, #5
   14674:	add	r1, r6, #60	; 0x3c
   14678:	blx	r4
   1467c:	cmp	r0, #0
   14680:	bne	146c0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14684:	ldr	r1, [r6, #28]
   14688:	ldr	r0, [r6, #60]	; 0x3c
   1468c:	ldr	r3, [r6, #64]	; 0x40
   14690:	ldr	r2, [r6, #32]
   14694:	add	r0, r0, r1
   14698:	sub	r1, r3, r1
   1469c:	mvn	r3, #3
   146a0:	cmn	r1, #4
   146a4:	str	r0, [r6, #16]
   146a8:	movcs	r1, r3
   146ac:	str	r1, [r6, #24]
   146b0:	str	r3, [r2, #4]
   146b4:	adds	r0, r0, r7
   146b8:	movne	r5, r0
   146bc:	strne	r8, [r0]
   146c0:	mov	r0, r5
   146c4:	sub	sp, fp, #24
   146c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146cc:	ldr	r0, [pc, #24]	; 146ec <flatcc_builder_offset_vector_push@@Base+0xf4>
   146d0:	ldr	r1, [pc, #24]	; 146f0 <flatcc_builder_offset_vector_push@@Base+0xf8>
   146d4:	ldr	r3, [pc, #24]	; 146f4 <flatcc_builder_offset_vector_push@@Base+0xfc>
   146d8:	movw	r2, #934	; 0x3a6
   146dc:	add	r0, pc, r0
   146e0:	add	r1, pc, r1
   146e4:	add	r3, pc, r3
   146e8:	bl	124ac <__assert_fail@plt>
   146ec:	andeq	r4, r0, r9, lsl #7
   146f0:	andeq	r3, r0, r2, asr pc
   146f4:			; <UNDEFINED> instruction: 0x000043b4

000146f8 <flatcc_builder_append_offset_vector@@Base>:
   146f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146fc:	add	fp, sp, #24
   14700:	sub	sp, sp, #8
   14704:	mov	r6, r0
   14708:	ldr	r0, [r0, #32]
   1470c:	mov	r8, r1
   14710:	ldrh	r1, [r0, #14]
   14714:	cmp	r1, #5
   14718:	bne	14808 <flatcc_builder_append_offset_vector@@Base+0x110>
   1471c:	ldr	r1, [r0, #20]
   14720:	mov	r5, r2
   14724:	adds	r1, r1, r2
   14728:	cmpcc	r1, #1073741824	; 0x40000000
   1472c:	bcc	14750 <flatcc_builder_append_offset_vector@@Base+0x58>
   14730:	ldr	r0, [pc, #252]	; 14834 <flatcc_builder_append_offset_vector@@Base+0x13c>
   14734:	ldr	r1, [pc, #252]	; 14838 <flatcc_builder_append_offset_vector@@Base+0x140>
   14738:	ldr	r3, [pc, #252]	; 1483c <flatcc_builder_append_offset_vector@@Base+0x144>
   1473c:	mov	r2, #892	; 0x37c
   14740:	add	r0, pc, r0
   14744:	add	r1, pc, r1
   14748:	add	r3, pc, r3
   1474c:	bl	124ac <__assert_fail@plt>
   14750:	str	r1, [r0, #20]
   14754:	ldr	r4, [r6, #20]
   14758:	ldr	r0, [r6, #24]
   1475c:	add	r1, r4, r5, lsl #2
   14760:	cmp	r1, r0
   14764:	str	r1, [r6, #20]
   14768:	bcs	1478c <flatcc_builder_append_offset_vector@@Base+0x94>
   1476c:	ldr	r0, [r6, #16]
   14770:	adds	r7, r0, r4
   14774:	beq	147f8 <flatcc_builder_append_offset_vector@@Base+0x100>
   14778:	lsl	r2, r5, #2
   1477c:	mov	r0, r7
   14780:	mov	r1, r8
   14784:	bl	123f8 <memcpy@plt>
   14788:	b	147fc <flatcc_builder_append_offset_vector@@Base+0x104>
   1478c:	ldr	r2, [r6, #28]
   14790:	ldr	r0, [r6, #40]	; 0x28
   14794:	ldr	r7, [r6, #48]	; 0x30
   14798:	mov	r3, #1
   1479c:	str	r3, [sp]
   147a0:	mov	r3, #1
   147a4:	add	r1, r1, r2
   147a8:	add	r2, r1, #1
   147ac:	add	r1, r6, #60	; 0x3c
   147b0:	blx	r7
   147b4:	mov	r7, #0
   147b8:	cmp	r0, #0
   147bc:	bne	147fc <flatcc_builder_append_offset_vector@@Base+0x104>
   147c0:	ldr	r1, [r6, #28]
   147c4:	ldr	r0, [r6, #60]	; 0x3c
   147c8:	ldr	r3, [r6, #64]	; 0x40
   147cc:	ldr	r2, [r6, #32]
   147d0:	add	r0, r0, r1
   147d4:	sub	r1, r3, r1
   147d8:	mvn	r3, #3
   147dc:	cmn	r1, #4
   147e0:	str	r0, [r6, #16]
   147e4:	movcs	r1, r3
   147e8:	str	r1, [r6, #24]
   147ec:	str	r3, [r2, #4]
   147f0:	adds	r7, r0, r4
   147f4:	bne	14778 <flatcc_builder_append_offset_vector@@Base+0x80>
   147f8:	mov	r7, #0
   147fc:	mov	r0, r7
   14800:	sub	sp, fp, #24
   14804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14808:	ldr	r0, [pc, #24]	; 14828 <flatcc_builder_append_offset_vector@@Base+0x130>
   1480c:	ldr	r1, [pc, #24]	; 1482c <flatcc_builder_append_offset_vector@@Base+0x134>
   14810:	ldr	r3, [pc, #24]	; 14830 <flatcc_builder_append_offset_vector@@Base+0x138>
   14814:	mov	r2, #948	; 0x3b4
   14818:	add	r0, pc, r0
   1481c:	add	r1, pc, r1
   14820:	add	r3, pc, r3
   14824:	bl	124ac <__assert_fail@plt>
   14828:	andeq	r4, r0, sp, asr #4
   1482c:	andeq	r3, r0, r6, lsl lr
   14830:	ldrdeq	r4, [r0], -sl
   14834:			; <UNDEFINED> instruction: 0x00004fb8
   14838:	andeq	r3, r0, lr, ror #29
   1483c:	andeq	r4, r0, fp, asr #31

00014840 <flatcc_builder_extend_string@@Base>:
   14840:	push	{r4, r5, fp, lr}
   14844:	add	fp, sp, #8
   14848:	sub	sp, sp, #8
   1484c:	mov	r4, r0
   14850:	ldr	r0, [r0, #32]
   14854:	ldrh	r2, [r0, #14]
   14858:	cmp	r2, #6
   1485c:	bne	1490c <flatcc_builder_extend_string@@Base+0xcc>
   14860:	ldr	r2, [r0, #20]
   14864:	adds	r2, r2, r1
   14868:	bcs	1492c <flatcc_builder_extend_string@@Base+0xec>
   1486c:	str	r2, [r0, #20]
   14870:	ldr	r5, [r4, #20]
   14874:	ldr	r0, [r4, #24]
   14878:	add	r1, r5, r1
   1487c:	cmp	r1, r0
   14880:	str	r1, [r4, #20]
   14884:	bcs	14890 <flatcc_builder_extend_string@@Base+0x50>
   14888:	ldr	r0, [r4, #16]
   1488c:	b	14900 <flatcc_builder_extend_string@@Base+0xc0>
   14890:	ldr	r2, [r4, #28]
   14894:	ldr	r0, [r4, #40]	; 0x28
   14898:	ldr	ip, [r4, #48]	; 0x30
   1489c:	mov	r3, #1
   148a0:	str	r3, [sp]
   148a4:	mov	r3, #1
   148a8:	add	r1, r1, r2
   148ac:	add	r2, r1, #1
   148b0:	add	r1, r4, #60	; 0x3c
   148b4:	blx	ip
   148b8:	mov	r1, r0
   148bc:	mov	r0, #0
   148c0:	cmp	r1, #0
   148c4:	beq	148d0 <flatcc_builder_extend_string@@Base+0x90>
   148c8:	sub	sp, fp, #8
   148cc:	pop	{r4, r5, fp, pc}
   148d0:	ldr	r1, [r4, #28]
   148d4:	ldr	r0, [r4, #60]	; 0x3c
   148d8:	ldr	r3, [r4, #64]	; 0x40
   148dc:	ldr	r2, [r4, #32]
   148e0:	add	r0, r0, r1
   148e4:	sub	r1, r3, r1
   148e8:	mvn	r3, #3
   148ec:	cmn	r1, #4
   148f0:	str	r0, [r4, #16]
   148f4:	movcs	r1, r3
   148f8:	str	r1, [r4, #24]
   148fc:	str	r3, [r2, #4]
   14900:	add	r0, r0, r5
   14904:	sub	sp, fp, #8
   14908:	pop	{r4, r5, fp, pc}
   1490c:	ldr	r0, [pc, #56]	; 1494c <flatcc_builder_extend_string@@Base+0x10c>
   14910:	ldr	r1, [pc, #56]	; 14950 <flatcc_builder_extend_string@@Base+0x110>
   14914:	ldr	r3, [pc, #56]	; 14954 <flatcc_builder_extend_string@@Base+0x114>
   14918:	movw	r2, #957	; 0x3bd
   1491c:	add	r0, pc, r0
   14920:	add	r1, pc, r1
   14924:	add	r3, pc, r3
   14928:	bl	124ac <__assert_fail@plt>
   1492c:	ldr	r0, [pc, #36]	; 14958 <flatcc_builder_extend_string@@Base+0x118>
   14930:	ldr	r1, [pc, #36]	; 1495c <flatcc_builder_extend_string@@Base+0x11c>
   14934:	ldr	r3, [pc, #36]	; 14960 <flatcc_builder_extend_string@@Base+0x120>
   14938:	mov	r2, #892	; 0x37c
   1493c:	add	r0, pc, r0
   14940:	add	r1, pc, r1
   14944:	add	r3, pc, r3
   14948:	bl	124ac <__assert_fail@plt>
   1494c:	andeq	r4, r0, r2, asr r2
   14950:	andeq	r3, r0, r2, lsl sp
   14954:	andeq	r4, r0, r6, ror r2
   14958:			; <UNDEFINED> instruction: 0x00004dbc
   1495c:	strdeq	r3, [r0], -r2
   14960:	andeq	r4, r0, pc, asr #27

00014964 <flatcc_builder_append_string@@Base>:
   14964:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14968:	add	fp, sp, #24
   1496c:	sub	sp, sp, #8
   14970:	mov	r6, r0
   14974:	ldr	r0, [r0, #32]
   14978:	mov	r8, r1
   1497c:	ldrh	r1, [r0, #14]
   14980:	cmp	r1, #6
   14984:	bne	14a50 <flatcc_builder_append_string@@Base+0xec>
   14988:	ldr	r1, [r0, #20]
   1498c:	mov	r4, r2
   14990:	adds	r1, r1, r2
   14994:	bcs	14a70 <flatcc_builder_append_string@@Base+0x10c>
   14998:	str	r1, [r0, #20]
   1499c:	ldr	r5, [r6, #20]
   149a0:	ldr	r0, [r6, #24]
   149a4:	add	r1, r5, r4
   149a8:	cmp	r1, r0
   149ac:	str	r1, [r6, #20]
   149b0:	bcs	149d4 <flatcc_builder_append_string@@Base+0x70>
   149b4:	ldr	r0, [r6, #16]
   149b8:	adds	r7, r0, r5
   149bc:	beq	14a40 <flatcc_builder_append_string@@Base+0xdc>
   149c0:	mov	r0, r7
   149c4:	mov	r1, r8
   149c8:	mov	r2, r4
   149cc:	bl	123f8 <memcpy@plt>
   149d0:	b	14a44 <flatcc_builder_append_string@@Base+0xe0>
   149d4:	ldr	r2, [r6, #28]
   149d8:	ldr	r0, [r6, #40]	; 0x28
   149dc:	ldr	r7, [r6, #48]	; 0x30
   149e0:	mov	r3, #1
   149e4:	str	r3, [sp]
   149e8:	mov	r3, #1
   149ec:	add	r1, r1, r2
   149f0:	add	r2, r1, #1
   149f4:	add	r1, r6, #60	; 0x3c
   149f8:	blx	r7
   149fc:	mov	r7, #0
   14a00:	cmp	r0, #0
   14a04:	bne	14a44 <flatcc_builder_append_string@@Base+0xe0>
   14a08:	ldr	r1, [r6, #28]
   14a0c:	ldr	r0, [r6, #60]	; 0x3c
   14a10:	ldr	r3, [r6, #64]	; 0x40
   14a14:	ldr	r2, [r6, #32]
   14a18:	add	r0, r0, r1
   14a1c:	sub	r1, r3, r1
   14a20:	mvn	r3, #3
   14a24:	cmn	r1, #4
   14a28:	str	r0, [r6, #16]
   14a2c:	movcs	r1, r3
   14a30:	str	r1, [r6, #24]
   14a34:	str	r3, [r2, #4]
   14a38:	adds	r7, r0, r5
   14a3c:	bne	149c0 <flatcc_builder_append_string@@Base+0x5c>
   14a40:	mov	r7, #0
   14a44:	mov	r0, r7
   14a48:	sub	sp, fp, #24
   14a4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a50:	ldr	r0, [pc, #56]	; 14a90 <flatcc_builder_append_string@@Base+0x12c>
   14a54:	ldr	r1, [pc, #56]	; 14a94 <flatcc_builder_append_string@@Base+0x130>
   14a58:	ldr	r3, [pc, #56]	; 14a98 <flatcc_builder_append_string@@Base+0x134>
   14a5c:	movw	r2, #966	; 0x3c6
   14a60:	add	r0, pc, r0
   14a64:	add	r1, pc, r1
   14a68:	add	r3, pc, r3
   14a6c:	bl	124ac <__assert_fail@plt>
   14a70:	ldr	r0, [pc, #36]	; 14a9c <flatcc_builder_append_string@@Base+0x138>
   14a74:	ldr	r1, [pc, #36]	; 14aa0 <flatcc_builder_append_string@@Base+0x13c>
   14a78:	ldr	r3, [pc, #36]	; 14aa4 <flatcc_builder_append_string@@Base+0x140>
   14a7c:	mov	r2, #892	; 0x37c
   14a80:	add	r0, pc, r0
   14a84:	add	r1, pc, r1
   14a88:	add	r3, pc, r3
   14a8c:	bl	124ac <__assert_fail@plt>
   14a90:	andeq	r4, r0, lr, lsl #2
   14a94:	andeq	r3, r0, lr, asr #23
   14a98:	andeq	r4, r0, r1, ror r1
   14a9c:	andeq	r4, r0, r8, ror ip
   14aa0:	andeq	r3, r0, lr, lsr #23
   14aa4:	andeq	r4, r0, fp, lsl #25

00014aa8 <flatcc_builder_append_string_str@@Base>:
   14aa8:	push	{r4, r5, fp, lr}
   14aac:	add	fp, sp, #8
   14ab0:	mov	r5, r0
   14ab4:	mov	r0, r1
   14ab8:	mov	r4, r1
   14abc:	bl	12458 <strlen@plt>
   14ac0:	mov	r2, r0
   14ac4:	mov	r0, r5
   14ac8:	mov	r1, r4
   14acc:	pop	{r4, r5, fp, lr}
   14ad0:	b	14964 <flatcc_builder_append_string@@Base>

00014ad4 <flatcc_builder_append_string_strn@@Base>:
   14ad4:	push	{r4, r5, r6, sl, fp, lr}
   14ad8:	add	fp, sp, #16
   14adc:	mov	r6, r0
   14ae0:	mov	r5, r1
   14ae4:	mov	r0, r1
   14ae8:	mov	r1, #0
   14aec:	mov	r4, r2
   14af0:	bl	12488 <memchr@plt>
   14af4:	cmp	r0, #0
   14af8:	mov	r1, r5
   14afc:	subne	r4, r0, r5
   14b00:	mov	r0, r6
   14b04:	mov	r2, r4
   14b08:	pop	{r4, r5, r6, sl, fp, lr}
   14b0c:	b	14964 <flatcc_builder_append_string@@Base>

00014b10 <flatcc_builder_truncate_vector@@Base>:
   14b10:	push	{fp, lr}
   14b14:	mov	fp, sp
   14b18:	ldr	r2, [r0, #32]
   14b1c:	ldrh	r3, [r2, #14]
   14b20:	cmp	r3, #4
   14b24:	bne	14b6c <flatcc_builder_truncate_vector@@Base+0x5c>
   14b28:	ldr	r3, [r2, #20]
   14b2c:	cmp	r3, r1
   14b30:	bcc	14b8c <flatcc_builder_truncate_vector@@Base+0x7c>
   14b34:	sub	r3, r3, r1
   14b38:	str	r3, [r2, #20]
   14b3c:	ldr	r2, [r0, #32]
   14b40:	ldr	r3, [r0, #20]
   14b44:	ldr	ip, [r0, #16]
   14b48:	ldr	r2, [r2, #16]
   14b4c:	mls	r3, r2, r1, r3
   14b50:	mul	r2, r2, r1
   14b54:	mov	r1, #0
   14b58:	str	r3, [r0, #20]
   14b5c:	add	r0, ip, r3
   14b60:	bl	1247c <memset@plt>
   14b64:	mov	r0, #0
   14b68:	pop	{fp, pc}
   14b6c:	ldr	r0, [pc, #56]	; 14bac <flatcc_builder_truncate_vector@@Base+0x9c>
   14b70:	ldr	r1, [pc, #56]	; 14bb0 <flatcc_builder_truncate_vector@@Base+0xa0>
   14b74:	ldr	r3, [pc, #56]	; 14bb4 <flatcc_builder_truncate_vector@@Base+0xa4>
   14b78:	movw	r2, #985	; 0x3d9
   14b7c:	add	r0, pc, r0
   14b80:	add	r1, pc, r1
   14b84:	add	r3, pc, r3
   14b88:	bl	124ac <__assert_fail@plt>
   14b8c:	ldr	r0, [pc, #36]	; 14bb8 <flatcc_builder_truncate_vector@@Base+0xa8>
   14b90:	ldr	r1, [pc, #36]	; 14bbc <flatcc_builder_truncate_vector@@Base+0xac>
   14b94:	ldr	r3, [pc, #36]	; 14bc0 <flatcc_builder_truncate_vector@@Base+0xb0>
   14b98:	movw	r2, #986	; 0x3da
   14b9c:	add	r0, pc, r0
   14ba0:	add	r1, pc, r1
   14ba4:	add	r3, pc, r3
   14ba8:	bl	124ac <__assert_fail@plt>
   14bac:	strdeq	r3, [r0], -r0
   14bb0:			; <UNDEFINED> instruction: 0x00003ab2
   14bb4:	andeq	r4, r0, r2, lsr #1
   14bb8:	andeq	r4, r0, r9, asr #1
   14bbc:	muleq	r0, r2, sl
   14bc0:	andeq	r4, r0, r2, lsl #1

00014bc4 <flatcc_builder_truncate_offset_vector@@Base>:
   14bc4:	push	{fp, lr}
   14bc8:	mov	fp, sp
   14bcc:	ldr	r2, [r0, #32]
   14bd0:	ldrh	r3, [r2, #14]
   14bd4:	cmp	r3, #5
   14bd8:	bne	14c20 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14bdc:	ldr	r3, [r2, #20]
   14be0:	cmp	r3, r1
   14be4:	bcc	14c40 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14be8:	sub	r3, r3, r1
   14bec:	str	r3, [r2, #20]
   14bf0:	ldr	r2, [r0, #32]
   14bf4:	ldr	r3, [r0, #20]
   14bf8:	ldr	ip, [r0, #16]
   14bfc:	ldr	r2, [r2, #16]
   14c00:	mls	r3, r2, r1, r3
   14c04:	mul	r2, r2, r1
   14c08:	mov	r1, #0
   14c0c:	str	r3, [r0, #20]
   14c10:	add	r0, ip, r3
   14c14:	bl	1247c <memset@plt>
   14c18:	mov	r0, #0
   14c1c:	pop	{fp, pc}
   14c20:	ldr	r0, [pc, #56]	; 14c60 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14c24:	ldr	r1, [pc, #56]	; 14c64 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14c28:	ldr	r3, [pc, #56]	; 14c68 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   14c2c:	movw	r2, #994	; 0x3e2
   14c30:	add	r0, pc, r0
   14c34:	add	r1, pc, r1
   14c38:	add	r3, pc, r3
   14c3c:	bl	124ac <__assert_fail@plt>
   14c40:	ldr	r0, [pc, #36]	; 14c6c <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   14c44:	ldr	r1, [pc, #36]	; 14c70 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   14c48:	ldr	r3, [pc, #36]	; 14c74 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14c4c:	movw	r2, #995	; 0x3e3
   14c50:	add	r0, pc, r0
   14c54:	add	r1, pc, r1
   14c58:	add	r3, pc, r3
   14c5c:	bl	124ac <__assert_fail@plt>
   14c60:	andeq	r3, r0, r5, lsr lr
   14c64:	strdeq	r3, [r0], -lr
   14c68:	andeq	r4, r0, r1, asr r0
   14c6c:	andeq	r4, r0, pc, ror r0
   14c70:	ldrdeq	r3, [r0], -lr
   14c74:	andeq	r4, r0, r1, lsr r0

00014c78 <flatcc_builder_truncate_string@@Base>:
   14c78:	push	{fp, lr}
   14c7c:	mov	fp, sp
   14c80:	mov	r2, r1
   14c84:	ldr	r1, [r0, #32]
   14c88:	ldrh	r3, [r1, #14]
   14c8c:	cmp	r3, #6
   14c90:	bne	14ccc <flatcc_builder_truncate_string@@Base+0x54>
   14c94:	ldr	r3, [r1, #20]
   14c98:	cmp	r3, r2
   14c9c:	bcc	14cec <flatcc_builder_truncate_string@@Base+0x74>
   14ca0:	sub	r3, r3, r2
   14ca4:	str	r3, [r1, #20]
   14ca8:	ldr	r3, [r0, #20]
   14cac:	ldr	r1, [r0, #16]
   14cb0:	sub	r3, r3, r2
   14cb4:	str	r3, [r0, #20]
   14cb8:	add	r0, r1, r3
   14cbc:	mov	r1, #0
   14cc0:	bl	1247c <memset@plt>
   14cc4:	mov	r0, #0
   14cc8:	pop	{fp, pc}
   14ccc:	ldr	r0, [pc, #56]	; 14d0c <flatcc_builder_truncate_string@@Base+0x94>
   14cd0:	ldr	r1, [pc, #56]	; 14d10 <flatcc_builder_truncate_string@@Base+0x98>
   14cd4:	ldr	r3, [pc, #56]	; 14d14 <flatcc_builder_truncate_string@@Base+0x9c>
   14cd8:	movw	r2, #1003	; 0x3eb
   14cdc:	add	r0, pc, r0
   14ce0:	add	r1, pc, r1
   14ce4:	add	r3, pc, r3
   14ce8:	bl	124ac <__assert_fail@plt>
   14cec:	ldr	r0, [pc, #36]	; 14d18 <flatcc_builder_truncate_string@@Base+0xa0>
   14cf0:	ldr	r1, [pc, #36]	; 14d1c <flatcc_builder_truncate_string@@Base+0xa4>
   14cf4:	ldr	r3, [pc, #36]	; 14d20 <flatcc_builder_truncate_string@@Base+0xa8>
   14cf8:	mov	r2, #1004	; 0x3ec
   14cfc:	add	r0, pc, r0
   14d00:	add	r1, pc, r1
   14d04:	add	r3, pc, r3
   14d08:	bl	124ac <__assert_fail@plt>
   14d0c:	muleq	r0, r2, lr
   14d10:	andeq	r3, r0, r2, asr r9
   14d14:	andeq	r4, r0, r6, lsr #32
   14d18:	andeq	r4, r0, sp, asr #32
   14d1c:	andeq	r3, r0, r2, lsr r9
   14d20:	andeq	r4, r0, r6

00014d24 <flatcc_builder_start_vector@@Base>:
   14d24:	push	{r4, r5, r6, r7, fp, lr}
   14d28:	add	fp, sp, #16
   14d2c:	mov	r7, #4
   14d30:	cmp	r2, #4
   14d34:	mov	r6, r1
   14d38:	mov	r5, r3
   14d3c:	mov	r4, r0
   14d40:	movls	r2, r7
   14d44:	mov	r1, r2
   14d48:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   14d4c:	mov	r1, r0
   14d50:	mvn	r0, #0
   14d54:	cmp	r1, #0
   14d58:	popne	{r4, r5, r6, r7, fp, pc}
   14d5c:	ldr	r0, [r4, #32]
   14d60:	str	r6, [r0, #16]
   14d64:	mov	r0, #0
   14d68:	ldr	r1, [r4, #32]
   14d6c:	str	r0, [r1, #20]
   14d70:	ldr	r1, [r4, #32]
   14d74:	str	r5, [r1, #24]
   14d78:	ldr	r1, [r4, #32]
   14d7c:	strh	r7, [r1, #14]
   14d80:	ldr	r2, [r4, #28]
   14d84:	ldr	r3, [r4, #60]	; 0x3c
   14d88:	ldr	r7, [r4, #64]	; 0x40
   14d8c:	add	r3, r3, r2
   14d90:	sub	r2, r7, r2
   14d94:	str	r3, [r4, #16]
   14d98:	mvn	r3, #3
   14d9c:	cmn	r2, #4
   14da0:	movcs	r2, r3
   14da4:	str	r2, [r4, #24]
   14da8:	str	r3, [r1, #4]
   14dac:	pop	{r4, r5, r6, r7, fp, pc}

00014db0 <flatcc_builder_start_offset_vector@@Base>:
   14db0:	push	{r4, r5, fp, lr}
   14db4:	add	fp, sp, #8
   14db8:	mov	r1, #4
   14dbc:	mov	r4, r0
   14dc0:	mov	r5, #4
   14dc4:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   14dc8:	mov	r1, r0
   14dcc:	mvn	r0, #0
   14dd0:	cmp	r1, #0
   14dd4:	popne	{r4, r5, fp, pc}
   14dd8:	ldr	r0, [r4, #32]
   14ddc:	mov	r2, #5
   14de0:	str	r5, [r0, #16]
   14de4:	mov	r0, #0
   14de8:	ldr	r1, [r4, #32]
   14dec:	str	r0, [r1, #20]
   14df0:	ldr	r1, [r4, #32]
   14df4:	strh	r2, [r1, #14]
   14df8:	ldr	r2, [r4, #28]
   14dfc:	ldr	r3, [r4, #60]	; 0x3c
   14e00:	ldr	r5, [r4, #64]	; 0x40
   14e04:	add	r3, r3, r2
   14e08:	sub	r2, r5, r2
   14e0c:	str	r3, [r4, #16]
   14e10:	mvn	r3, #3
   14e14:	cmn	r2, #4
   14e18:	movcs	r2, r3
   14e1c:	str	r2, [r4, #24]
   14e20:	str	r3, [r1, #4]
   14e24:	pop	{r4, r5, fp, pc}

00014e28 <flatcc_builder_create_offset_vector@@Base>:
   14e28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e2c:	add	fp, sp, #24
   14e30:	sub	sp, sp, #8
   14e34:	mov	r8, r1
   14e38:	mov	r1, #4
   14e3c:	mov	r6, r2
   14e40:	mov	r4, r0
   14e44:	mov	r7, #4
   14e48:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   14e4c:	cmp	r0, #0
   14e50:	beq	14e60 <flatcc_builder_create_offset_vector@@Base+0x38>
   14e54:	mov	r0, #0
   14e58:	sub	sp, fp, #24
   14e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e60:	ldr	r0, [r4, #32]
   14e64:	mov	r1, #0
   14e68:	str	r7, [r0, #16]
   14e6c:	ldr	r0, [r4, #32]
   14e70:	str	r1, [r0, #20]
   14e74:	mov	r1, #5
   14e78:	ldr	r0, [r4, #32]
   14e7c:	strh	r1, [r0, #14]
   14e80:	ldr	r1, [r4, #28]
   14e84:	ldr	r2, [r4, #60]	; 0x3c
   14e88:	ldr	r3, [r4, #64]	; 0x40
   14e8c:	add	r2, r2, r1
   14e90:	sub	r1, r3, r1
   14e94:	str	r2, [r4, #16]
   14e98:	mvn	r2, #3
   14e9c:	cmn	r1, #4
   14ea0:	movcs	r1, r2
   14ea4:	str	r1, [r4, #24]
   14ea8:	str	r2, [r0, #4]
   14eac:	ldr	r1, [r0, #20]
   14eb0:	adds	r1, r1, r6
   14eb4:	cmpcc	r1, #1073741824	; 0x40000000
   14eb8:	bcc	14edc <flatcc_builder_create_offset_vector@@Base+0xb4>
   14ebc:	ldr	r0, [pc, #200]	; 14f8c <flatcc_builder_create_offset_vector@@Base+0x164>
   14ec0:	ldr	r1, [pc, #200]	; 14f90 <flatcc_builder_create_offset_vector@@Base+0x168>
   14ec4:	ldr	r3, [pc, #200]	; 14f94 <flatcc_builder_create_offset_vector@@Base+0x16c>
   14ec8:	mov	r2, #892	; 0x37c
   14ecc:	add	r0, pc, r0
   14ed0:	add	r1, pc, r1
   14ed4:	add	r3, pc, r3
   14ed8:	bl	124ac <__assert_fail@plt>
   14edc:	str	r1, [r0, #20]
   14ee0:	ldr	r7, [r4, #20]
   14ee4:	ldr	r0, [r4, #24]
   14ee8:	add	r1, r7, r6, lsl #2
   14eec:	cmp	r1, r0
   14ef0:	str	r1, [r4, #20]
   14ef4:	bcs	14f08 <flatcc_builder_create_offset_vector@@Base+0xe0>
   14ef8:	ldr	r0, [r4, #16]
   14efc:	adds	r0, r0, r7
   14f00:	bne	14f70 <flatcc_builder_create_offset_vector@@Base+0x148>
   14f04:	b	14e54 <flatcc_builder_create_offset_vector@@Base+0x2c>
   14f08:	ldr	r2, [r4, #28]
   14f0c:	ldr	r0, [r4, #40]	; 0x28
   14f10:	ldr	r5, [r4, #48]	; 0x30
   14f14:	mov	r3, #1
   14f18:	str	r3, [sp]
   14f1c:	mov	r3, #1
   14f20:	add	r1, r1, r2
   14f24:	add	r2, r1, #1
   14f28:	add	r1, r4, #60	; 0x3c
   14f2c:	blx	r5
   14f30:	cmp	r0, #0
   14f34:	bne	14e54 <flatcc_builder_create_offset_vector@@Base+0x2c>
   14f38:	ldr	r1, [r4, #28]
   14f3c:	ldr	r0, [r4, #60]	; 0x3c
   14f40:	ldr	r3, [r4, #64]	; 0x40
   14f44:	ldr	r2, [r4, #32]
   14f48:	add	r0, r0, r1
   14f4c:	sub	r1, r3, r1
   14f50:	mvn	r3, #3
   14f54:	cmn	r1, #4
   14f58:	str	r0, [r4, #16]
   14f5c:	movcs	r1, r3
   14f60:	str	r1, [r4, #24]
   14f64:	str	r3, [r2, #4]
   14f68:	adds	r0, r0, r7
   14f6c:	beq	14e54 <flatcc_builder_create_offset_vector@@Base+0x2c>
   14f70:	lsl	r2, r6, #2
   14f74:	mov	r1, r8
   14f78:	bl	123f8 <memcpy@plt>
   14f7c:	mov	r0, r4
   14f80:	sub	sp, fp, #24
   14f84:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f88:	b	14f98 <flatcc_builder_end_offset_vector@@Base>
   14f8c:	andeq	r4, r0, ip, lsr #16
   14f90:	andeq	r3, r0, r2, ror #14
   14f94:	andeq	r4, r0, pc, lsr r8

00014f98 <flatcc_builder_end_offset_vector@@Base>:
   14f98:	push	{r4, r5, fp, lr}
   14f9c:	add	fp, sp, #8
   14fa0:	mov	r4, r0
   14fa4:	ldr	r0, [r0, #32]
   14fa8:	ldrh	r1, [r0, #14]
   14fac:	cmp	r1, #5
   14fb0:	bne	15050 <flatcc_builder_end_offset_vector@@Base+0xb8>
   14fb4:	ldr	r2, [r0, #20]
   14fb8:	ldr	r1, [r4, #16]
   14fbc:	mov	r0, r4
   14fc0:	mov	r3, #0
   14fc4:	bl	160b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14fc8:	mov	r5, r0
   14fcc:	cmp	r0, #0
   14fd0:	beq	15048 <flatcc_builder_end_offset_vector@@Base+0xb0>
   14fd4:	ldr	r0, [r4, #16]
   14fd8:	ldr	r2, [r4, #20]
   14fdc:	mov	r1, #0
   14fe0:	bl	1247c <memset@plt>
   14fe4:	ldr	r0, [r4, #32]
   14fe8:	ldr	r1, [r4, #60]	; 0x3c
   14fec:	ldr	ip, [r4, #64]	; 0x40
   14ff0:	ldr	r3, [r0, #8]
   14ff4:	str	r3, [r4, #20]
   14ff8:	ldr	r3, [r0]
   14ffc:	str	r3, [r4, #28]
   15000:	add	r1, r1, r3
   15004:	ldr	r2, [r0, #4]
   15008:	str	r1, [r4, #16]
   1500c:	sub	r1, ip, r3
   15010:	cmp	r1, r2
   15014:	movhi	r1, r2
   15018:	str	r1, [r4, #24]
   1501c:	ldrh	r1, [r4, #130]	; 0x82
   15020:	ldrh	r2, [r4, #128]	; 0x80
   15024:	cmp	r2, r1
   15028:	strhcc	r1, [r4, #128]	; 0x80
   1502c:	ldrh	r1, [r0, #12]
   15030:	sub	r0, r0, #36	; 0x24
   15034:	str	r0, [r4, #32]
   15038:	strh	r1, [r4, #130]	; 0x82
   1503c:	ldr	r0, [r4, #156]	; 0x9c
   15040:	sub	r0, r0, #1
   15044:	str	r0, [r4, #156]	; 0x9c
   15048:	mov	r0, r5
   1504c:	pop	{r4, r5, fp, pc}
   15050:	ldr	r0, [pc, #24]	; 15070 <flatcc_builder_end_offset_vector@@Base+0xd8>
   15054:	ldr	r1, [pc, #24]	; 15074 <flatcc_builder_end_offset_vector@@Base+0xdc>
   15058:	ldr	r3, [pc, #24]	; 15078 <flatcc_builder_end_offset_vector@@Base+0xe0>
   1505c:	movw	r2, #1480	; 0x5c8
   15060:	add	r0, pc, r0
   15064:	add	r1, pc, r1
   15068:	add	r3, pc, r3
   1506c:	bl	124ac <__assert_fail@plt>
   15070:	andeq	r3, r0, r5, lsl #20
   15074:	andeq	r3, r0, lr, asr #11
   15078:	andeq	r4, r0, ip, lsr #32

0001507c <flatcc_builder_start_string@@Base>:
   1507c:	push	{r4, r5, fp, lr}
   15080:	add	fp, sp, #8
   15084:	mov	r1, #1
   15088:	mov	r4, r0
   1508c:	mov	r5, #1
   15090:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   15094:	mov	r1, r0
   15098:	mvn	r0, #0
   1509c:	cmp	r1, #0
   150a0:	popne	{r4, r5, fp, pc}
   150a4:	ldr	r0, [r4, #32]
   150a8:	mov	r2, #6
   150ac:	str	r5, [r0, #16]
   150b0:	mov	r0, #0
   150b4:	ldr	r1, [r4, #32]
   150b8:	str	r0, [r1, #20]
   150bc:	ldr	r1, [r4, #32]
   150c0:	strh	r2, [r1, #14]
   150c4:	ldr	r2, [r4, #28]
   150c8:	ldr	r3, [r4, #60]	; 0x3c
   150cc:	ldr	r5, [r4, #64]	; 0x40
   150d0:	add	r3, r3, r2
   150d4:	sub	r2, r5, r2
   150d8:	str	r3, [r4, #16]
   150dc:	mvn	r3, #3
   150e0:	cmn	r2, #4
   150e4:	movcs	r2, r3
   150e8:	str	r2, [r4, #24]
   150ec:	str	r3, [r1, #4]
   150f0:	pop	{r4, r5, fp, pc}

000150f4 <flatcc_builder_reserve_table@@Base>:
   150f4:	push	{r4, r5, r6, sl, fp, lr}
   150f8:	add	fp, sp, #16
   150fc:	sub	sp, sp, #8
   15100:	cmn	r1, #1
   15104:	ble	151dc <flatcc_builder_reserve_table@@Base+0xe8>
   15108:	mov	r4, r0
   1510c:	ldr	r0, [r0, #32]
   15110:	mov	r5, r1
   15114:	ldr	r1, [r4, #56]	; 0x38
   15118:	ldrh	r2, [r0, #28]
   1511c:	ldr	r0, [r0, #16]
   15120:	add	r6, r0, r2, lsl #1
   15124:	add	r0, r6, r5, lsl #1
   15128:	add	r2, r0, #4
   1512c:	cmp	r2, r1
   15130:	bls	15158 <flatcc_builder_reserve_table@@Base+0x64>
   15134:	ldr	r0, [r4, #40]	; 0x28
   15138:	ldr	ip, [r4, #48]	; 0x30
   1513c:	mov	r3, #0
   15140:	add	r1, r4, #52	; 0x34
   15144:	str	r3, [sp]
   15148:	mov	r3, #1
   1514c:	blx	ip
   15150:	cmp	r0, #0
   15154:	bne	151fc <flatcc_builder_reserve_table@@Base+0x108>
   15158:	ldr	r0, [r4, #52]	; 0x34
   1515c:	adds	r0, r0, r6
   15160:	str	r0, [r4, #4]
   15164:	beq	151d0 <flatcc_builder_reserve_table@@Base+0xdc>
   15168:	add	r0, r0, #4
   1516c:	lsl	r1, r5, #1
   15170:	str	r0, [r4, #4]
   15174:	ldr	r0, [r4, #32]
   15178:	ldr	r3, [r4, #80]	; 0x50
   1517c:	ldr	r5, [r0, #20]
   15180:	orr	r0, r1, #1
   15184:	add	r2, r5, r0
   15188:	cmp	r2, r3
   1518c:	bls	151b4 <flatcc_builder_reserve_table@@Base+0xc0>
   15190:	ldr	r0, [r4, #40]	; 0x28
   15194:	ldr	r6, [r4, #48]	; 0x30
   15198:	mov	r3, #3
   1519c:	add	r1, r4, #76	; 0x4c
   151a0:	str	r3, [sp]
   151a4:	mov	r3, #0
   151a8:	blx	r6
   151ac:	cmp	r0, #0
   151b0:	bne	151fc <flatcc_builder_reserve_table@@Base+0x108>
   151b4:	ldr	r0, [r4, #76]	; 0x4c
   151b8:	adds	r0, r0, r5
   151bc:	str	r0, [r4]
   151c0:	mov	r0, #0
   151c4:	mvneq	r0, #0
   151c8:	sub	sp, fp, #16
   151cc:	pop	{r4, r5, r6, sl, fp, pc}
   151d0:	mvn	r0, #0
   151d4:	sub	sp, fp, #16
   151d8:	pop	{r4, r5, r6, sl, fp, pc}
   151dc:	ldr	r0, [pc, #56]	; 1521c <flatcc_builder_reserve_table@@Base+0x128>
   151e0:	ldr	r1, [pc, #56]	; 15220 <flatcc_builder_reserve_table@@Base+0x12c>
   151e4:	ldr	r3, [pc, #56]	; 15224 <flatcc_builder_reserve_table@@Base+0x130>
   151e8:	movw	r2, #1065	; 0x429
   151ec:	add	r0, pc, r0
   151f0:	add	r1, pc, r1
   151f4:	add	r3, pc, r3
   151f8:	bl	124ac <__assert_fail@plt>
   151fc:	ldr	r0, [pc, #36]	; 15228 <flatcc_builder_reserve_table@@Base+0x134>
   15200:	ldr	r1, [pc, #36]	; 1522c <flatcc_builder_reserve_table@@Base+0x138>
   15204:	ldr	r3, [pc, #36]	; 15230 <flatcc_builder_reserve_table@@Base+0x13c>
   15208:	mov	r2, #308	; 0x134
   1520c:	add	r0, pc, r0
   15210:	add	r1, pc, r1
   15214:	add	r3, pc, r3
   15218:	bl	124ac <__assert_fail@plt>
   1521c:	andeq	r3, r0, r0, asr #23
   15220:	andeq	r3, r0, r2, asr #8
   15224:	andeq	r3, r0, r7, ror fp
   15228:	andeq	r4, r0, r3, ror #11
   1522c:	andeq	r3, r0, r2, lsr #8
   15230:	andeq	r4, r0, r5, lsl r4

00015234 <flatcc_builder_start_table@@Base>:
   15234:	push	{r4, r5, r6, r7, fp, lr}
   15238:	add	fp, sp, #16
   1523c:	sub	sp, sp, #8
   15240:	mov	r6, r1
   15244:	mov	r1, #4
   15248:	mov	r4, r0
   1524c:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   15250:	mvn	r5, #0
   15254:	cmp	r0, #0
   15258:	beq	15268 <flatcc_builder_start_table@@Base+0x34>
   1525c:	mov	r0, r5
   15260:	sub	sp, fp, #16
   15264:	pop	{r4, r5, r6, r7, fp, pc}
   15268:	mov	r1, r4
   1526c:	ldr	r2, [r4, #4]
   15270:	ldr	r3, [r4, #32]
   15274:	ldr	r0, [r1, #52]!	; 0x34
   15278:	sub	r0, r2, r0
   1527c:	str	r0, [r3, #16]
   15280:	ldr	r0, [r4]
   15284:	ldr	r3, [r4, #76]	; 0x4c
   15288:	ldr	r2, [r4, #32]
   1528c:	sub	r0, r0, r3
   15290:	mov	r3, #0
   15294:	str	r0, [r2, #20]
   15298:	ldr	r0, [r4, #12]
   1529c:	ldr	r2, [r4, #32]
   152a0:	str	r0, [r2, #24]
   152a4:	ldr	r0, [r4, #32]
   152a8:	ldrh	r2, [r4, #8]
   152ac:	strh	r2, [r0, #28]
   152b0:	movw	r0, #15186	; 0x3b52
   152b4:	strh	r3, [r4, #8]
   152b8:	mov	r2, #3
   152bc:	movt	r0, #12137	; 0x2f69
   152c0:	str	r0, [r4, #12]
   152c4:	ldr	r0, [r4, #32]
   152c8:	strh	r2, [r0, #14]
   152cc:	ldrh	r2, [r0, #28]
   152d0:	ldr	r0, [r0, #16]
   152d4:	add	r7, r0, r2, lsl #1
   152d8:	add	r0, r7, r6, lsl #1
   152dc:	add	r2, r0, #4
   152e0:	ldr	r0, [r4, #56]	; 0x38
   152e4:	cmp	r2, r0
   152e8:	bls	15308 <flatcc_builder_start_table@@Base+0xd4>
   152ec:	ldr	r0, [r4, #40]	; 0x28
   152f0:	ldr	ip, [r4, #48]	; 0x30
   152f4:	str	r3, [sp]
   152f8:	mov	r3, #1
   152fc:	blx	ip
   15300:	cmp	r0, #0
   15304:	bne	153ac <flatcc_builder_start_table@@Base+0x178>
   15308:	ldr	r0, [r4, #52]	; 0x34
   1530c:	adds	r0, r0, r7
   15310:	str	r0, [r4, #4]
   15314:	beq	1525c <flatcc_builder_start_table@@Base+0x28>
   15318:	add	r0, r0, #4
   1531c:	lsl	r1, r6, #1
   15320:	str	r0, [r4, #4]
   15324:	ldr	r0, [r4, #32]
   15328:	ldr	r3, [r4, #80]	; 0x50
   1532c:	ldr	r6, [r0, #20]
   15330:	orr	r0, r1, #1
   15334:	add	r2, r6, r0
   15338:	cmp	r2, r3
   1533c:	bls	15364 <flatcc_builder_start_table@@Base+0x130>
   15340:	ldr	r0, [r4, #40]	; 0x28
   15344:	ldr	r7, [r4, #48]	; 0x30
   15348:	mov	r3, #3
   1534c:	add	r1, r4, #76	; 0x4c
   15350:	str	r3, [sp]
   15354:	mov	r3, #0
   15358:	blx	r7
   1535c:	cmp	r0, #0
   15360:	bne	153ac <flatcc_builder_start_table@@Base+0x178>
   15364:	ldr	r0, [r4, #76]	; 0x4c
   15368:	adds	r0, r0, r6
   1536c:	str	r0, [r4]
   15370:	beq	1525c <flatcc_builder_start_table@@Base+0x28>
   15374:	ldr	r0, [r4, #28]
   15378:	ldr	r2, [r4, #60]	; 0x3c
   1537c:	ldr	r3, [r4, #64]	; 0x40
   15380:	ldr	r1, [r4, #32]
   15384:	mov	r5, #0
   15388:	add	r2, r2, r0
   1538c:	sub	r0, r3, r0
   15390:	str	r2, [r4, #16]
   15394:	movw	r2, #65532	; 0xfffc
   15398:	cmp	r0, r2
   1539c:	movcs	r0, r2
   153a0:	str	r0, [r4, #24]
   153a4:	str	r2, [r1, #4]
   153a8:	b	1525c <flatcc_builder_start_table@@Base+0x28>
   153ac:	ldr	r0, [pc, #24]	; 153cc <flatcc_builder_start_table@@Base+0x198>
   153b0:	ldr	r1, [pc, #24]	; 153d0 <flatcc_builder_start_table@@Base+0x19c>
   153b4:	ldr	r3, [pc, #24]	; 153d4 <flatcc_builder_start_table@@Base+0x1a0>
   153b8:	mov	r2, #308	; 0x134
   153bc:	add	r0, pc, r0
   153c0:	add	r1, pc, r1
   153c4:	add	r3, pc, r3
   153c8:	bl	124ac <__assert_fail@plt>
   153cc:	andeq	r4, r0, r3, lsr r4
   153d0:	andeq	r3, r0, r2, ror r2
   153d4:	andeq	r4, r0, r5, ror #4

000153d8 <flatcc_builder_create_vtable@@Base>:
   153d8:	push	{r4, r5, fp, lr}
   153dc:	add	fp, sp, #8
   153e0:	sub	sp, sp, #80	; 0x50
   153e4:	mov	r3, r2
   153e8:	mov	r2, #0
   153ec:	mov	r4, r0
   153f0:	cmp	r3, #0
   153f4:	str	r2, [sp, #12]
   153f8:	str	r2, [sp, #8]
   153fc:	movne	r2, #1
   15400:	strne	r3, [sp, #20]
   15404:	strne	r1, [sp, #16]
   15408:	strne	r3, [sp, #8]
   1540c:	strne	r2, [sp, #12]
   15410:	ldr	r0, [r4, #152]	; 0x98
   15414:	cmp	r0, #0
   15418:	bne	15428 <flatcc_builder_create_vtable@@Base+0x50>
   1541c:	ldr	r0, [r4, #180]	; 0xb4
   15420:	cmp	r0, #0
   15424:	beq	15484 <flatcc_builder_create_vtable@@Base+0xac>
   15428:	cmp	r3, #0
   1542c:	beq	154c8 <flatcc_builder_create_vtable@@Base+0xf0>
   15430:	ldr	r0, [r4, #136]	; 0x88
   15434:	ldr	ip, [r4, #44]	; 0x2c
   15438:	add	r1, sp, #8
   1543c:	add	r1, r1, #8
   15440:	sub	r5, r0, r3
   15444:	ldr	r0, [r4, #36]	; 0x24
   15448:	str	r3, [sp]
   1544c:	mov	r3, r5
   15450:	blx	ip
   15454:	cmp	r0, #0
   15458:	bne	154e8 <flatcc_builder_create_vtable@@Base+0x110>
   1545c:	cmp	r5, #0
   15460:	str	r5, [r4, #136]	; 0x88
   15464:	beq	15478 <flatcc_builder_create_vtable@@Base+0xa0>
   15468:	add	r1, r5, #1
   1546c:	mov	r0, r1
   15470:	sub	sp, fp, #8
   15474:	pop	{r4, r5, fp, pc}
   15478:	mov	r0, #0
   1547c:	sub	sp, fp, #8
   15480:	pop	{r4, r5, fp, pc}
   15484:	ldr	r5, [r4, #140]	; 0x8c
   15488:	ldr	r0, [r4, #36]	; 0x24
   1548c:	ldr	ip, [r4, #44]	; 0x2c
   15490:	add	r1, r5, r3
   15494:	str	r1, [r4, #140]	; 0x8c
   15498:	add	r1, sp, #8
   1549c:	str	r3, [sp]
   154a0:	mov	r3, r5
   154a4:	add	r1, r1, #8
   154a8:	blx	ip
   154ac:	cmp	r0, #0
   154b0:	bne	15508 <flatcc_builder_create_vtable@@Base+0x130>
   154b4:	adds	r1, r5, #1
   154b8:	mov	r0, #0
   154bc:	movcc	r0, r1
   154c0:	sub	sp, fp, #8
   154c4:	pop	{r4, r5, fp, pc}
   154c8:	ldr	r0, [pc, #100]	; 15534 <flatcc_builder_create_vtable@@Base+0x15c>
   154cc:	ldr	r1, [pc, #100]	; 15538 <flatcc_builder_create_vtable@@Base+0x160>
   154d0:	ldr	r3, [pc, #100]	; 1553c <flatcc_builder_create_vtable@@Base+0x164>
   154d4:	movw	r2, #647	; 0x287
   154d8:	add	r0, pc, r0
   154dc:	add	r1, pc, r1
   154e0:	add	r3, pc, r3
   154e4:	bl	124ac <__assert_fail@plt>
   154e8:	ldr	r0, [pc, #80]	; 15540 <flatcc_builder_create_vtable@@Base+0x168>
   154ec:	ldr	r1, [pc, #80]	; 15544 <flatcc_builder_create_vtable@@Base+0x16c>
   154f0:	ldr	r3, [pc, #80]	; 15548 <flatcc_builder_create_vtable@@Base+0x170>
   154f4:	movw	r2, #651	; 0x28b
   154f8:	add	r0, pc, r0
   154fc:	add	r1, pc, r1
   15500:	add	r3, pc, r3
   15504:	bl	124ac <__assert_fail@plt>
   15508:	ldr	r0, [pc, #24]	; 15528 <flatcc_builder_create_vtable@@Base+0x150>
   1550c:	ldr	r1, [pc, #24]	; 1552c <flatcc_builder_create_vtable@@Base+0x154>
   15510:	ldr	r3, [pc, #24]	; 15530 <flatcc_builder_create_vtable@@Base+0x158>
   15514:	movw	r2, #677	; 0x2a5
   15518:	add	r0, pc, r0
   1551c:	add	r1, pc, r1
   15520:	add	r3, pc, r3
   15524:	bl	124ac <__assert_fail@plt>
   15528:	ldrdeq	r4, [r0], -r7
   1552c:	andeq	r3, r0, r6, lsl r1
   15530:	andeq	r4, r0, sl, asr #4
   15534:	andeq	r4, r0, r7, lsl r3
   15538:	andeq	r3, r0, r6, asr r1
   1553c:	andeq	r4, r0, lr, asr #3
   15540:	strdeq	r4, [r0], -r7
   15544:	andeq	r3, r0, r6, lsr r1
   15548:	andeq	r4, r0, lr, lsr #3

0001554c <flatcc_builder_create_cached_vtable@@Base>:
   1554c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15550:	add	fp, sp, #28
   15554:	sub	sp, sp, #20
   15558:	mov	sl, r0
   1555c:	ldr	r0, [r0, #116]	; 0x74
   15560:	mov	r8, r3
   15564:	mov	r5, r2
   15568:	str	r1, [sp, #16]
   1556c:	cmp	r0, #0
   15570:	beq	15614 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15574:	ldr	r1, [sl, #92]	; 0x5c
   15578:	rsb	r0, r0, #32
   1557c:	lsr	r0, r8, r0
   15580:	add	r6, r1, r0, lsl #2
   15584:	cmp	r6, #0
   15588:	beq	156d8 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   1558c:	ldr	r7, [r6]
   15590:	str	r6, [sp, #12]
   15594:	cmp	r7, #0
   15598:	beq	156e0 <flatcc_builder_create_cached_vtable@@Base+0x194>
   1559c:	ldr	r4, [sl, #68]	; 0x44
   155a0:	ldr	r8, [sl, #100]	; 0x64
   155a4:	mov	r0, #0
   155a8:	str	r0, [sp, #8]
   155ac:	b	155c0 <flatcc_builder_create_cached_vtable@@Base+0x74>
   155b0:	ldr	r7, [r9, #12]!
   155b4:	mov	r6, r9
   155b8:	cmp	r7, #0
   155bc:	beq	156d0 <flatcc_builder_create_cached_vtable@@Base+0x184>
   155c0:	add	r9, r8, r7
   155c4:	mov	r1, r4
   155c8:	ldr	r0, [r9, #8]
   155cc:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   155d0:	cmp	r0, r5
   155d4:	bne	155b0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   155d8:	ldr	r0, [sp, #16]
   155dc:	mov	r2, r5
   155e0:	bl	1244c <bcmp@plt>
   155e4:	cmp	r0, #0
   155e8:	bne	155b0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   155ec:	ldr	r0, [sl, #152]	; 0x98
   155f0:	ldr	r1, [r9, #4]
   155f4:	cmp	r1, r0
   155f8:	beq	15844 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   155fc:	mov	r6, r9
   15600:	mov	r0, r9
   15604:	ldr	r7, [r6, #12]!
   15608:	cmp	r7, #0
   1560c:	bne	155a8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15610:	b	156e4 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15614:	ldr	r0, [sl, #124]	; 0x7c
   15618:	cmp	r0, #0
   1561c:	bne	15890 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15620:	ldr	r0, [sl, #104]	; 0x68
   15624:	add	r7, sl, #100	; 0x64
   15628:	cmp	r0, #15
   1562c:	bhi	15658 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15630:	ldr	r0, [sl, #40]	; 0x28
   15634:	ldr	r6, [sl, #48]	; 0x30
   15638:	mov	r1, #6
   1563c:	mov	r2, #16
   15640:	mov	r3, #0
   15644:	str	r1, [sp]
   15648:	mov	r1, r7
   1564c:	blx	r6
   15650:	cmp	r0, #0
   15654:	bne	15870 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15658:	ldr	r0, [r7]
   1565c:	mov	r7, #0
   15660:	cmp	r0, #0
   15664:	beq	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15668:	mov	r0, #16
   1566c:	mov	r2, #5
   15670:	add	r1, sl, #92	; 0x5c
   15674:	mov	r3, #1
   15678:	mov	r4, #256	; 0x100
   1567c:	str	r0, [sl, #124]	; 0x7c
   15680:	ldr	r0, [sl, #40]	; 0x28
   15684:	ldr	r6, [sl, #48]	; 0x30
   15688:	str	r2, [sp]
   1568c:	mov	r2, #256	; 0x100
   15690:	blx	r6
   15694:	cmp	r0, #0
   15698:	bne	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1569c:	ldr	r0, [sl, #96]	; 0x60
   156a0:	mov	r1, r4
   156a4:	lsl	r4, r4, #1
   156a8:	cmp	r0, r1, lsl #1
   156ac:	bcs	156a0 <flatcc_builder_create_cached_vtable@@Base+0x154>
   156b0:	lsr	r1, r1, #2
   156b4:	mvn	r0, #0
   156b8:	mov	r2, #1
   156bc:	add	r0, r0, #1
   156c0:	cmp	r1, r2, lsl r0
   156c4:	bhi	156bc <flatcc_builder_create_cached_vtable@@Base+0x170>
   156c8:	str	r0, [sl, #116]	; 0x74
   156cc:	b	15574 <flatcc_builder_create_cached_vtable@@Base+0x28>
   156d0:	ldr	r9, [sp, #8]
   156d4:	b	156e4 <flatcc_builder_create_cached_vtable@@Base+0x198>
   156d8:	mov	r7, #0
   156dc:	b	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   156e0:	mov	r9, #0
   156e4:	ldr	r4, [sl, #124]	; 0x7c
   156e8:	ldr	r0, [sl, #104]	; 0x68
   156ec:	add	r7, sl, #100	; 0x64
   156f0:	add	r2, r4, #16
   156f4:	cmp	r2, r0
   156f8:	bls	15720 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   156fc:	ldr	r0, [sl, #40]	; 0x28
   15700:	ldr	r6, [sl, #48]	; 0x30
   15704:	mov	r1, #6
   15708:	mov	r3, #0
   1570c:	str	r1, [sp]
   15710:	mov	r1, r7
   15714:	blx	r6
   15718:	cmp	r0, #0
   1571c:	bne	15870 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15720:	ldr	r0, [r7]
   15724:	mov	r7, #0
   15728:	adds	r4, r0, r4
   1572c:	beq	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15730:	ldr	r0, [sl, #124]	; 0x7c
   15734:	ldr	r1, [sl, #152]	; 0x98
   15738:	add	r2, r0, #16
   1573c:	str	r2, [sl, #124]	; 0x7c
   15740:	ldr	r2, [sp, #12]
   15744:	str	r1, [r4, #4]
   15748:	ldr	r1, [r2]
   1574c:	str	r1, [r4, #12]
   15750:	ldr	r1, [sp, #16]
   15754:	str	r0, [r2]
   15758:	mov	r0, sl
   1575c:	mov	r2, r5
   15760:	bl	153d8 <flatcc_builder_create_vtable@@Base>
   15764:	cmp	r0, #0
   15768:	str	r0, [r4]
   1576c:	beq	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15770:	cmp	r9, #0
   15774:	beq	15790 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15778:	ldr	r0, [r9, #8]
   1577c:	str	r0, [r4, #8]
   15780:	ldr	r7, [r4]
   15784:	mov	r0, r7
   15788:	sub	sp, fp, #28
   1578c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15790:	ldr	r6, [sl, #120]	; 0x78
   15794:	ldr	r0, [sl, #172]	; 0xac
   15798:	add	r2, r6, r5
   1579c:	cmp	r0, #0
   157a0:	beq	157dc <flatcc_builder_create_cached_vtable@@Base+0x290>
   157a4:	cmp	r0, r2
   157a8:	bcs	157dc <flatcc_builder_create_cached_vtable@@Base+0x290>
   157ac:	ldr	r0, [sl, #116]	; 0x74
   157b0:	cmp	r0, #0
   157b4:	beq	15780 <flatcc_builder_create_cached_vtable@@Base+0x234>
   157b8:	ldr	r0, [sl, #92]	; 0x5c
   157bc:	ldr	r2, [sl, #96]	; 0x60
   157c0:	mov	r1, #0
   157c4:	mov	r5, #0
   157c8:	bl	1247c <memset@plt>
   157cc:	mov	r0, #16
   157d0:	str	r5, [sl, #120]	; 0x78
   157d4:	str	r0, [sl, #124]	; 0x7c
   157d8:	b	15780 <flatcc_builder_create_cached_vtable@@Base+0x234>
   157dc:	ldr	r0, [sl, #72]	; 0x48
   157e0:	add	r7, sl, #68	; 0x44
   157e4:	cmp	r2, r0
   157e8:	bls	15810 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   157ec:	ldr	r0, [sl, #40]	; 0x28
   157f0:	ldr	ip, [sl, #48]	; 0x30
   157f4:	mov	r1, #2
   157f8:	mov	r3, #0
   157fc:	str	r1, [sp]
   15800:	mov	r1, r7
   15804:	blx	ip
   15808:	cmp	r0, #0
   1580c:	bne	15870 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15810:	ldr	r0, [r7]
   15814:	adds	r0, r0, r6
   15818:	beq	1583c <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   1581c:	ldr	r1, [sl, #120]	; 0x78
   15820:	mov	r2, r5
   15824:	str	r1, [r4, #8]
   15828:	add	r1, r1, r5
   1582c:	str	r1, [sl, #120]	; 0x78
   15830:	ldr	r1, [sp, #16]
   15834:	bl	123f8 <memcpy@plt>
   15838:	b	15780 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1583c:	mvn	r7, #0
   15840:	b	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15844:	ldr	r0, [sp, #12]
   15848:	cmp	r6, r0
   1584c:	beq	15868 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   15850:	mov	r1, r0
   15854:	ldr	r0, [r9, #12]
   15858:	str	r0, [r6]
   1585c:	ldr	r0, [r1]
   15860:	str	r0, [r9, #12]
   15864:	str	r7, [r1]
   15868:	ldr	r7, [r9]
   1586c:	b	15784 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15870:	ldr	r0, [pc, #68]	; 158bc <flatcc_builder_create_cached_vtable@@Base+0x370>
   15874:	ldr	r1, [pc, #68]	; 158c0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   15878:	ldr	r3, [pc, #68]	; 158c4 <flatcc_builder_create_cached_vtable@@Base+0x378>
   1587c:	mov	r2, #308	; 0x134
   15880:	add	r0, pc, r0
   15884:	add	r1, pc, r1
   15888:	add	r3, pc, r3
   1588c:	bl	124ac <__assert_fail@plt>
   15890:	ldr	r0, [pc, #24]	; 158b0 <flatcc_builder_create_cached_vtable@@Base+0x364>
   15894:	ldr	r1, [pc, #24]	; 158b4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15898:	ldr	r3, [pc, #24]	; 158b8 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   1589c:	movw	r2, #342	; 0x156
   158a0:	add	r0, pc, r0
   158a4:	add	r1, pc, r1
   158a8:	add	r3, pc, r3
   158ac:	bl	124ac <__assert_fail@plt>
   158b0:	andeq	r3, r0, r3, lsl pc
   158b4:	andeq	r2, r0, lr, lsl #27
   158b8:	andeq	r3, r0, sl, lsl pc
   158bc:	andeq	r3, r0, pc, ror #30
   158c0:	andeq	r2, r0, lr, lsr #27
   158c4:	andeq	r3, r0, r1, lsr #27

000158c8 <flatcc_builder_create_table@@Base>:
   158c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158cc:	add	fp, sp, #24
   158d0:	sub	sp, sp, #80	; 0x50
   158d4:	ldr	r5, [fp, #12]
   158d8:	cmn	r5, #1
   158dc:	ble	15a28 <flatcc_builder_create_table@@Base+0x160>
   158e0:	ldr	ip, [fp, #16]
   158e4:	tst	ip, #1
   158e8:	beq	15a48 <flatcc_builder_create_table@@Base+0x180>
   158ec:	mov	r8, r0
   158f0:	ldrh	r0, [r0, #128]	; 0x80
   158f4:	cmp	r3, #4
   158f8:	movls	r3, #4
   158fc:	cmp	r0, r3
   15900:	strhcc	r3, [r8, #128]	; 0x80
   15904:	cmp	r5, #1
   15908:	ldr	r0, [r8, #136]	; 0x88
   1590c:	sub	r4, r0, r2
   15910:	sub	r0, r3, #1
   15914:	and	r0, r4, r0
   15918:	sub	r4, r4, #4
   1591c:	add	r3, ip, r0
   15920:	sub	r3, r4, r3
   15924:	add	r3, r3, #1
   15928:	str	r3, [fp, #-28]	; 0xffffffe4
   1592c:	blt	1595c <flatcc_builder_create_table@@Base+0x94>
   15930:	ldr	r3, [fp, #8]
   15934:	sub	ip, r4, r0
   15938:	mvn	r4, #3
   1593c:	sub	r4, r4, ip
   15940:	ldrh	r6, [r3], #2
   15944:	subs	r5, r5, #1
   15948:	ldr	r7, [r6, r1]
   1594c:	add	r7, r4, r7
   15950:	sub	r7, r7, r6
   15954:	str	r7, [r6, r1]
   15958:	bne	15940 <flatcc_builder_create_table@@Base+0x78>
   1595c:	mov	r4, #4
   15960:	sub	r3, fp, #28
   15964:	cmp	r2, #0
   15968:	str	r4, [sp, #16]
   1596c:	str	r3, [sp, #12]
   15970:	mov	r3, #1
   15974:	str	r4, [sp, #4]
   15978:	addne	r4, r2, #4
   1597c:	str	r3, [sp, #8]
   15980:	movne	r3, #2
   15984:	strne	r2, [sp, #24]
   15988:	strne	r1, [sp, #20]
   1598c:	strne	r3, [sp, #8]
   15990:	strne	r4, [sp, #4]
   15994:	cmp	r0, #0
   15998:	beq	159c4 <flatcc_builder_create_table@@Base+0xfc>
   1599c:	add	r4, r4, r0
   159a0:	add	r1, sp, #4
   159a4:	str	r4, [sp, #4]
   159a8:	add	r1, r1, r3, lsl #3
   159ac:	add	r3, r3, #1
   159b0:	ldr	r2, [pc, #208]	; 15a88 <flatcc_builder_create_table@@Base+0x1c0>
   159b4:	ldr	r2, [pc, r2]
   159b8:	str	r2, [r1, #8]
   159bc:	str	r0, [r1, #12]
   159c0:	str	r3, [sp, #8]
   159c4:	cmp	r4, #0
   159c8:	ble	15a68 <flatcc_builder_create_table@@Base+0x1a0>
   159cc:	ldr	r0, [r8, #136]	; 0x88
   159d0:	ldr	r7, [r8, #44]	; 0x2c
   159d4:	add	r1, sp, #4
   159d8:	mov	r2, r3
   159dc:	add	r1, r1, #8
   159e0:	sub	r5, r0, r4
   159e4:	ldr	r0, [r8, #36]	; 0x24
   159e8:	str	r4, [sp]
   159ec:	mov	r3, r5
   159f0:	blx	r7
   159f4:	cmp	r0, #0
   159f8:	streq	r5, [r8, #136]	; 0x88
   159fc:	moveq	r0, r5
   15a00:	subeq	sp, fp, #24
   15a04:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a08:	ldr	r0, [pc, #160]	; 15ab0 <flatcc_builder_create_table@@Base+0x1e8>
   15a0c:	ldr	r1, [pc, #160]	; 15ab4 <flatcc_builder_create_table@@Base+0x1ec>
   15a10:	ldr	r3, [pc, #160]	; 15ab8 <flatcc_builder_create_table@@Base+0x1f0>
   15a14:	movw	r2, #651	; 0x28b
   15a18:	add	r0, pc, r0
   15a1c:	add	r1, pc, r1
   15a20:	add	r3, pc, r3
   15a24:	bl	124ac <__assert_fail@plt>
   15a28:	ldr	r0, [pc, #92]	; 15a8c <flatcc_builder_create_table@@Base+0x1c4>
   15a2c:	ldr	r1, [pc, #92]	; 15a90 <flatcc_builder_create_table@@Base+0x1c8>
   15a30:	ldr	r3, [pc, #92]	; 15a94 <flatcc_builder_create_table@@Base+0x1cc>
   15a34:	movw	r2, #1237	; 0x4d5
   15a38:	add	r0, pc, r0
   15a3c:	add	r1, pc, r1
   15a40:	add	r3, pc, r3
   15a44:	bl	124ac <__assert_fail@plt>
   15a48:	ldr	r0, [pc, #72]	; 15a98 <flatcc_builder_create_table@@Base+0x1d0>
   15a4c:	ldr	r1, [pc, #72]	; 15a9c <flatcc_builder_create_table@@Base+0x1d4>
   15a50:	ldr	r3, [pc, #72]	; 15aa0 <flatcc_builder_create_table@@Base+0x1d8>
   15a54:	movw	r2, #1243	; 0x4db
   15a58:	add	r0, pc, r0
   15a5c:	add	r1, pc, r1
   15a60:	add	r3, pc, r3
   15a64:	bl	124ac <__assert_fail@plt>
   15a68:	ldr	r0, [pc, #52]	; 15aa4 <flatcc_builder_create_table@@Base+0x1dc>
   15a6c:	ldr	r1, [pc, #52]	; 15aa8 <flatcc_builder_create_table@@Base+0x1e0>
   15a70:	ldr	r3, [pc, #52]	; 15aac <flatcc_builder_create_table@@Base+0x1e4>
   15a74:	movw	r2, #647	; 0x287
   15a78:	add	r0, pc, r0
   15a7c:	add	r1, pc, r1
   15a80:	add	r3, pc, r3
   15a84:	bl	124ac <__assert_fail@plt>
   15a88:	muleq	r1, r8, r6
   15a8c:	andeq	r3, r0, sp, ror #6
   15a90:	strdeq	r2, [r0], -r6
   15a94:	andeq	r3, r0, r7, ror r3
   15a98:	strdeq	r3, [r0], -fp
   15a9c:	ldrdeq	r2, [r0], -r6
   15aa0:	andeq	r3, r0, r7, asr r3
   15aa4:	andeq	r3, r0, r7, ror sp
   15aa8:			; <UNDEFINED> instruction: 0x00002bb6
   15aac:	andeq	r3, r0, lr, lsr #24
   15ab0:	ldrdeq	r3, [r0], -r7
   15ab4:	andeq	r2, r0, r6, lsl ip
   15ab8:	andeq	r3, r0, lr, lsl #25

00015abc <flatcc_builder_check_required_field@@Base>:
   15abc:	push	{fp, lr}
   15ac0:	mov	fp, sp
   15ac4:	ldr	r2, [r0, #32]
   15ac8:	ldrh	r2, [r2, #14]
   15acc:	cmp	r2, #3
   15ad0:	bne	15b00 <flatcc_builder_check_required_field@@Base+0x44>
   15ad4:	ldrh	r3, [r0, #8]
   15ad8:	mov	r2, #0
   15adc:	cmp	r3, r1
   15ae0:	bls	15af8 <flatcc_builder_check_required_field@@Base+0x3c>
   15ae4:	ldr	r0, [r0, #4]
   15ae8:	add	r0, r0, r1, lsl #1
   15aec:	ldrh	r2, [r0]
   15af0:	cmp	r2, #0
   15af4:	movwne	r2, #1
   15af8:	mov	r0, r2
   15afc:	pop	{fp, pc}
   15b00:	ldr	r0, [pc, #24]	; 15b20 <flatcc_builder_check_required_field@@Base+0x64>
   15b04:	ldr	r1, [pc, #24]	; 15b24 <flatcc_builder_check_required_field@@Base+0x68>
   15b08:	ldr	r3, [pc, #24]	; 15b28 <flatcc_builder_check_required_field@@Base+0x6c>
   15b0c:	movw	r2, #1272	; 0x4f8
   15b10:	add	r0, pc, r0
   15b14:	add	r1, pc, r1
   15b18:	add	r3, pc, r3
   15b1c:	bl	124ac <__assert_fail@plt>
   15b20:	andeq	r3, r0, lr, asr #6
   15b24:	andeq	r2, r0, lr, lsl fp
   15b28:	andeq	r3, r0, r1, ror r3

00015b2c <flatcc_builder_check_union_field@@Base>:
   15b2c:	push	{fp, lr}
   15b30:	mov	fp, sp
   15b34:	mov	r2, r0
   15b38:	ldr	r0, [r0, #32]
   15b3c:	ldrh	r0, [r0, #14]
   15b40:	cmp	r0, #3
   15b44:	bne	15ba4 <flatcc_builder_check_union_field@@Base+0x78>
   15b48:	mov	r0, #0
   15b4c:	cmp	r1, #0
   15b50:	beq	15b90 <flatcc_builder_check_union_field@@Base+0x64>
   15b54:	ldrh	r3, [r2, #8]
   15b58:	cmp	r3, r1
   15b5c:	popls	{fp, pc}
   15b60:	ldr	r0, [r2, #4]
   15b64:	add	r0, r0, r1, lsl #1
   15b68:	ldrh	r1, [r0, #-2]
   15b6c:	cmp	r1, #0
   15b70:	beq	15b94 <flatcc_builder_check_union_field@@Base+0x68>
   15b74:	ldr	r2, [r2, #16]
   15b78:	ldrh	r0, [r0]
   15b7c:	ldrb	r1, [r2, r1]
   15b80:	cmp	r1, #0
   15b84:	beq	15b98 <flatcc_builder_check_union_field@@Base+0x6c>
   15b88:	cmp	r0, #0
   15b8c:	movwne	r0, #1
   15b90:	pop	{fp, pc}
   15b94:	ldrh	r0, [r0]
   15b98:	clz	r0, r0
   15b9c:	lsr	r0, r0, #5
   15ba0:	pop	{fp, pc}
   15ba4:	ldr	r0, [pc, #24]	; 15bc4 <flatcc_builder_check_union_field@@Base+0x98>
   15ba8:	ldr	r1, [pc, #24]	; 15bc8 <flatcc_builder_check_union_field@@Base+0x9c>
   15bac:	ldr	r3, [pc, #24]	; 15bcc <flatcc_builder_check_union_field@@Base+0xa0>
   15bb0:	movw	r2, #1279	; 0x4ff
   15bb4:	add	r0, pc, r0
   15bb8:	add	r1, pc, r1
   15bbc:	add	r3, pc, r3
   15bc0:	bl	124ac <__assert_fail@plt>
   15bc4:	andeq	r3, r0, sl, lsr #5
   15bc8:	andeq	r2, r0, sl, ror sl
   15bcc:	andeq	r3, r0, r0, lsr #6

00015bd0 <flatcc_builder_check_required@@Base>:
   15bd0:	push	{fp, lr}
   15bd4:	mov	fp, sp
   15bd8:	mov	r3, r0
   15bdc:	ldr	r0, [r0, #32]
   15be0:	ldrh	r0, [r0, #14]
   15be4:	cmp	r0, #3
   15be8:	bne	15c30 <flatcc_builder_check_required@@Base+0x60>
   15bec:	ldrh	ip, [r3, #8]
   15bf0:	mov	r0, #0
   15bf4:	cmp	ip, r2
   15bf8:	poplt	{fp, pc}
   15bfc:	cmp	r2, #1
   15c00:	blt	15c28 <flatcc_builder_check_required@@Base+0x58>
   15c04:	ldr	ip, [r3, #4]
   15c08:	ldrh	r3, [r1]
   15c0c:	add	r3, ip, r3, lsl #1
   15c10:	ldrh	r3, [r3]
   15c14:	cmp	r3, #0
   15c18:	beq	15c2c <flatcc_builder_check_required@@Base+0x5c>
   15c1c:	add	r1, r1, #2
   15c20:	subs	r2, r2, #1
   15c24:	bne	15c08 <flatcc_builder_check_required@@Base+0x38>
   15c28:	mov	r0, #1
   15c2c:	pop	{fp, pc}
   15c30:	ldr	r0, [pc, #24]	; 15c50 <flatcc_builder_check_required@@Base+0x80>
   15c34:	ldr	r1, [pc, #24]	; 15c54 <flatcc_builder_check_required@@Base+0x84>
   15c38:	ldr	r3, [pc, #24]	; 15c58 <flatcc_builder_check_required@@Base+0x88>
   15c3c:	movw	r2, #1297	; 0x511
   15c40:	add	r0, pc, r0
   15c44:	add	r1, pc, r1
   15c48:	add	r3, pc, r3
   15c4c:	bl	124ac <__assert_fail@plt>
   15c50:	andeq	r3, r0, lr, lsl r2
   15c54:	andeq	r2, r0, lr, ror #19
   15c58:	andeq	r3, r0, r4, ror #5

00015c5c <flatcc_builder_end_table@@Base>:
   15c5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c60:	add	fp, sp, #24
   15c64:	sub	sp, sp, #16
   15c68:	mov	r4, r0
   15c6c:	ldr	r0, [r0, #32]
   15c70:	ldrh	r0, [r0, #14]
   15c74:	cmp	r0, #3
   15c78:	bne	15df4 <flatcc_builder_end_table@@Base+0x198>
   15c7c:	ldrh	r0, [r4, #8]
   15c80:	ldr	r5, [r4, #4]
   15c84:	mov	r1, #4
   15c88:	movw	r2, #31153	; 0x79b1
   15c8c:	movt	r2, #40503	; 0x9e37
   15c90:	add	r0, r1, r0, lsl #1
   15c94:	strh	r0, [r5, #-4]!
   15c98:	ldrh	r1, [r4, #20]
   15c9c:	uxth	r6, r0
   15ca0:	add	r1, r1, #4
   15ca4:	strh	r1, [r5, #2]
   15ca8:	uxth	r1, r1
   15cac:	ldr	r0, [r4, #12]
   15cb0:	eor	r0, r0, r6
   15cb4:	mul	r0, r0, r2
   15cb8:	eor	r0, r0, r1
   15cbc:	mov	r1, r5
   15cc0:	mul	r3, r0, r2
   15cc4:	mov	r0, r4
   15cc8:	mov	r2, r6
   15ccc:	str	r3, [r4, #12]
   15cd0:	bl	1554c <flatcc_builder_create_cached_vtable@@Base>
   15cd4:	cmp	r0, #0
   15cd8:	beq	15de4 <flatcc_builder_end_table@@Base+0x188>
   15cdc:	mov	r7, r0
   15ce0:	mov	r0, r5
   15ce4:	mov	r1, #0
   15ce8:	mov	r2, r6
   15cec:	mov	r8, #0
   15cf0:	bl	1247c <memset@plt>
   15cf4:	ldr	r5, [r4, #32]
   15cf8:	ldr	r0, [r4, #76]	; 0x4c
   15cfc:	ldr	r6, [r4]
   15d00:	ldrh	r3, [r4, #130]	; 0x82
   15d04:	ldr	r1, [r4, #16]
   15d08:	ldr	r2, [r4, #20]
   15d0c:	ldr	r5, [r5, #20]
   15d10:	add	r0, r0, r5
   15d14:	sub	r6, r6, r0
   15d18:	asr	r6, r6, #1
   15d1c:	stm	sp, {r0, r6, r7}
   15d20:	mov	r0, r4
   15d24:	bl	158c8 <flatcc_builder_create_table@@Base>
   15d28:	cmp	r0, #0
   15d2c:	beq	15de8 <flatcc_builder_end_table@@Base+0x18c>
   15d30:	ldr	r1, [r4, #32]
   15d34:	mov	r5, r0
   15d38:	ldr	r0, [r4, #16]
   15d3c:	ldr	r2, [r4, #20]
   15d40:	ldr	r3, [r4, #52]	; 0x34
   15d44:	ldr	r7, [r1, #24]
   15d48:	str	r7, [r4, #12]
   15d4c:	ldrh	r7, [r1, #28]
   15d50:	strh	r7, [r4, #8]
   15d54:	ldr	r7, [r1, #16]
   15d58:	add	r3, r3, r7
   15d5c:	str	r3, [r4, #4]
   15d60:	ldr	r3, [r4, #76]	; 0x4c
   15d64:	ldr	r1, [r1, #20]
   15d68:	add	r1, r3, r1
   15d6c:	str	r1, [r4]
   15d70:	mov	r1, #0
   15d74:	bl	1247c <memset@plt>
   15d78:	ldr	r0, [r4, #32]
   15d7c:	ldr	r1, [r4, #60]	; 0x3c
   15d80:	ldr	r2, [r4, #64]	; 0x40
   15d84:	mov	r8, r5
   15d88:	ldr	r3, [r0, #8]
   15d8c:	str	r3, [r4, #20]
   15d90:	ldr	r3, [r0]
   15d94:	str	r3, [r4, #28]
   15d98:	add	r1, r1, r3
   15d9c:	ldr	r7, [r0, #4]
   15da0:	str	r1, [r4, #16]
   15da4:	sub	r1, r2, r3
   15da8:	cmp	r1, r7
   15dac:	movhi	r1, r7
   15db0:	str	r1, [r4, #24]
   15db4:	ldrh	r1, [r4, #130]	; 0x82
   15db8:	ldrh	r2, [r4, #128]	; 0x80
   15dbc:	cmp	r2, r1
   15dc0:	strhcc	r1, [r4, #128]	; 0x80
   15dc4:	ldrh	r1, [r0, #12]
   15dc8:	sub	r0, r0, #36	; 0x24
   15dcc:	str	r0, [r4, #32]
   15dd0:	strh	r1, [r4, #130]	; 0x82
   15dd4:	ldr	r0, [r4, #156]	; 0x9c
   15dd8:	sub	r0, r0, #1
   15ddc:	str	r0, [r4, #156]	; 0x9c
   15de0:	b	15de8 <flatcc_builder_end_table@@Base+0x18c>
   15de4:	mov	r8, #0
   15de8:	mov	r0, r8
   15dec:	sub	sp, fp, #24
   15df0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15df4:	ldr	r0, [pc, #24]	; 15e14 <flatcc_builder_end_table@@Base+0x1b8>
   15df8:	ldr	r1, [pc, #24]	; 15e18 <flatcc_builder_end_table@@Base+0x1bc>
   15dfc:	ldr	r3, [pc, #24]	; 15e1c <flatcc_builder_end_table@@Base+0x1c0>
   15e00:	movw	r2, #1317	; 0x525
   15e04:	add	r0, pc, r0
   15e08:	add	r1, pc, r1
   15e0c:	add	r3, pc, r3
   15e10:	bl	124ac <__assert_fail@plt>
   15e14:	andeq	r3, r0, sl, asr r0
   15e18:	andeq	r2, r0, sl, lsr #16
   15e1c:	andeq	r3, r0, sl, ror r1

00015e20 <flatcc_builder_create_vector@@Base>:
   15e20:	push	{r4, r5, r6, r7, fp, lr}
   15e24:	add	fp, sp, #16
   15e28:	sub	sp, sp, #80	; 0x50
   15e2c:	mov	r7, r0
   15e30:	ldr	r0, [fp, #12]
   15e34:	cmp	r2, r0
   15e38:	bhi	15f34 <flatcc_builder_create_vector@@Base+0x114>
   15e3c:	ldr	r0, [fp, #8]
   15e40:	mov	r4, r2
   15e44:	ldrh	r2, [r7, #128]	; 0x80
   15e48:	mov	r5, #4
   15e4c:	cmp	r0, #4
   15e50:	movls	r0, r5
   15e54:	cmp	r2, r0
   15e58:	sub	r2, fp, #20
   15e5c:	strhcc	r0, [r7, #128]	; 0x80
   15e60:	str	r4, [fp, #-20]	; 0xffffffec
   15e64:	sub	r0, r0, #1
   15e68:	ldr	ip, [r7, #136]	; 0x88
   15e6c:	str	r5, [sp, #16]
   15e70:	str	r2, [sp, #12]
   15e74:	mov	r2, #1
   15e78:	str	r5, [sp, #4]
   15e7c:	str	r2, [sp, #8]
   15e80:	mls	r6, r3, r4, ip
   15e84:	mul	r3, r3, r4
   15e88:	cmp	r3, #0
   15e8c:	and	r0, r6, r0
   15e90:	movne	r2, #2
   15e94:	addne	r5, r3, #4
   15e98:	strne	r3, [sp, #24]
   15e9c:	strne	r1, [sp, #20]
   15ea0:	strne	r2, [sp, #8]
   15ea4:	strne	r5, [sp, #4]
   15ea8:	cmp	r0, #0
   15eac:	beq	15ed8 <flatcc_builder_create_vector@@Base+0xb8>
   15eb0:	add	r5, r5, r0
   15eb4:	add	r1, sp, #4
   15eb8:	str	r5, [sp, #4]
   15ebc:	add	r1, r1, r2, lsl #3
   15ec0:	add	r2, r2, #1
   15ec4:	ldr	r3, [pc, #168]	; 15f74 <flatcc_builder_create_vector@@Base+0x154>
   15ec8:	ldr	r3, [pc, r3]
   15ecc:	str	r3, [r1, #8]
   15ed0:	str	r0, [r1, #12]
   15ed4:	str	r2, [sp, #8]
   15ed8:	cmp	r5, #0
   15edc:	ble	15f54 <flatcc_builder_create_vector@@Base+0x134>
   15ee0:	ldr	r0, [r7, #36]	; 0x24
   15ee4:	ldr	r6, [r7, #44]	; 0x2c
   15ee8:	add	r1, sp, #4
   15eec:	sub	r4, ip, r5
   15ef0:	str	r5, [sp]
   15ef4:	add	r1, r1, #8
   15ef8:	mov	r3, r4
   15efc:	blx	r6
   15f00:	cmp	r0, #0
   15f04:	streq	r4, [r7, #136]	; 0x88
   15f08:	moveq	r0, r4
   15f0c:	subeq	sp, fp, #16
   15f10:	popeq	{r4, r5, r6, r7, fp, pc}
   15f14:	ldr	r0, [pc, #116]	; 15f90 <flatcc_builder_create_vector@@Base+0x170>
   15f18:	ldr	r1, [pc, #116]	; 15f94 <flatcc_builder_create_vector@@Base+0x174>
   15f1c:	ldr	r3, [pc, #116]	; 15f98 <flatcc_builder_create_vector@@Base+0x178>
   15f20:	movw	r2, #651	; 0x28b
   15f24:	add	r0, pc, r0
   15f28:	add	r1, pc, r1
   15f2c:	add	r3, pc, r3
   15f30:	bl	124ac <__assert_fail@plt>
   15f34:	ldr	r0, [pc, #60]	; 15f78 <flatcc_builder_create_vector@@Base+0x158>
   15f38:	ldr	r1, [pc, #60]	; 15f7c <flatcc_builder_create_vector@@Base+0x15c>
   15f3c:	ldr	r3, [pc, #60]	; 15f80 <flatcc_builder_create_vector@@Base+0x160>
   15f40:	movw	r2, #1365	; 0x555
   15f44:	add	r0, pc, r0
   15f48:	add	r1, pc, r1
   15f4c:	add	r3, pc, r3
   15f50:	bl	124ac <__assert_fail@plt>
   15f54:	ldr	r0, [pc, #40]	; 15f84 <flatcc_builder_create_vector@@Base+0x164>
   15f58:	ldr	r1, [pc, #40]	; 15f88 <flatcc_builder_create_vector@@Base+0x168>
   15f5c:	ldr	r3, [pc, #40]	; 15f8c <flatcc_builder_create_vector@@Base+0x16c>
   15f60:	movw	r2, #647	; 0x287
   15f64:	add	r0, pc, r0
   15f68:	add	r1, pc, r1
   15f6c:	add	r3, pc, r3
   15f70:	bl	124ac <__assert_fail@plt>
   15f74:	andeq	r4, r1, r4, lsl #3
   15f78:	andeq	r3, r0, r4, lsl #1
   15f7c:	andeq	r2, r0, sl, ror #13
   15f80:	andeq	r3, r0, pc, lsl #1
   15f84:	andeq	r3, r0, fp, lsl #17
   15f88:	andeq	r2, r0, sl, asr #13
   15f8c:	andeq	r3, r0, r2, asr #14
   15f90:	andeq	r3, r0, fp, asr #17
   15f94:	andeq	r2, r0, sl, lsl #14
   15f98:	andeq	r3, r0, r2, lsl #15

00015f9c <flatcc_builder_end_vector@@Base>:
   15f9c:	push	{r4, r5, fp, lr}
   15fa0:	add	fp, sp, #8
   15fa4:	sub	sp, sp, #8
   15fa8:	mov	r4, r0
   15fac:	ldr	r0, [r0, #32]
   15fb0:	ldrh	r1, [r0, #14]
   15fb4:	cmp	r1, #4
   15fb8:	bne	1606c <flatcc_builder_end_vector@@Base+0xd0>
   15fbc:	ldr	r3, [r0, #16]
   15fc0:	ldr	r2, [r0, #20]
   15fc4:	ldr	r0, [r0, #24]
   15fc8:	ldr	r1, [r4, #16]
   15fcc:	ldrh	r5, [r4, #130]	; 0x82
   15fd0:	str	r0, [sp, #4]
   15fd4:	mov	r0, r4
   15fd8:	str	r5, [sp]
   15fdc:	bl	15e20 <flatcc_builder_create_vector@@Base>
   15fe0:	mov	r5, r0
   15fe4:	cmp	r0, #0
   15fe8:	beq	16060 <flatcc_builder_end_vector@@Base+0xc4>
   15fec:	ldr	r0, [r4, #16]
   15ff0:	ldr	r2, [r4, #20]
   15ff4:	mov	r1, #0
   15ff8:	bl	1247c <memset@plt>
   15ffc:	ldr	r0, [r4, #32]
   16000:	ldr	r1, [r4, #60]	; 0x3c
   16004:	ldr	ip, [r4, #64]	; 0x40
   16008:	ldr	r3, [r0, #8]
   1600c:	str	r3, [r4, #20]
   16010:	ldr	r3, [r0]
   16014:	str	r3, [r4, #28]
   16018:	add	r1, r1, r3
   1601c:	ldr	r2, [r0, #4]
   16020:	str	r1, [r4, #16]
   16024:	sub	r1, ip, r3
   16028:	cmp	r1, r2
   1602c:	movhi	r1, r2
   16030:	str	r1, [r4, #24]
   16034:	ldrh	r1, [r4, #130]	; 0x82
   16038:	ldrh	r2, [r4, #128]	; 0x80
   1603c:	cmp	r2, r1
   16040:	strhcc	r1, [r4, #128]	; 0x80
   16044:	ldrh	r1, [r0, #12]
   16048:	sub	r0, r0, #36	; 0x24
   1604c:	str	r0, [r4, #32]
   16050:	strh	r1, [r4, #130]	; 0x82
   16054:	ldr	r0, [r4, #156]	; 0x9c
   16058:	sub	r0, r0, #1
   1605c:	str	r0, [r4, #156]	; 0x9c
   16060:	mov	r0, r5
   16064:	sub	sp, fp, #8
   16068:	pop	{r4, r5, fp, pc}
   1606c:	ldr	r0, [pc, #24]	; 1608c <flatcc_builder_end_vector@@Base+0xf0>
   16070:	ldr	r1, [pc, #24]	; 16090 <flatcc_builder_end_vector@@Base+0xf4>
   16074:	ldr	r3, [pc, #24]	; 16094 <flatcc_builder_end_vector@@Base+0xf8>
   16078:	movw	r2, #1400	; 0x578
   1607c:	add	r0, pc, r0
   16080:	add	r1, pc, r1
   16084:	add	r3, pc, r3
   16088:	bl	124ac <__assert_fail@plt>
   1608c:	strdeq	r2, [r0], -r0
   16090:			; <UNDEFINED> instruction: 0x000025b2
   16094:	andeq	r2, r0, sp, asr #31

00016098 <flatcc_builder_vector_count@@Base>:
   16098:	ldr	r0, [r0, #32]
   1609c:	ldr	r0, [r0, #20]
   160a0:	bx	lr

000160a4 <flatcc_builder_vector_edit@@Base>:
   160a4:	ldr	r0, [r0, #16]
   160a8:	bx	lr

000160ac <flatcc_builder_create_offset_vector_direct@@Base>:
   160ac:	mov	r3, #0
   160b0:	b	160b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   160b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160b8:	add	fp, sp, #24
   160bc:	sub	sp, sp, #80	; 0x50
   160c0:	mov	r6, #0
   160c4:	cmn	r2, #-1073741823	; 0xc0000001
   160c8:	bhi	16228 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   160cc:	mov	r8, r0
   160d0:	ldrh	r0, [r0, #128]	; 0x80
   160d4:	mov	r5, #4
   160d8:	sub	r7, fp, #28
   160dc:	mov	r4, #1
   160e0:	cmp	r0, #3
   160e4:	movls	r0, #4
   160e8:	strhls	r0, [r8, #128]	; 0x80
   160ec:	str	r2, [fp, #-28]	; 0xffffffe4
   160f0:	ldr	ip, [r8, #136]	; 0x88
   160f4:	str	r5, [sp, #16]
   160f8:	str	r7, [sp, #12]
   160fc:	mov	r7, #0
   16100:	str	r5, [sp, #4]
   16104:	str	r4, [sp, #8]
   16108:	cmp	r7, r2, lsl #2
   1610c:	and	r6, ip, #3
   16110:	beq	16130 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16114:	lsl	r7, r2, #2
   16118:	mov	r4, #2
   1611c:	add	r5, r7, #4
   16120:	str	r7, [sp, #24]
   16124:	str	r1, [sp, #20]
   16128:	str	r4, [sp, #8]
   1612c:	str	r5, [sp, #4]
   16130:	cmp	r6, #0
   16134:	beq	16160 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16138:	add	r5, r5, r6
   1613c:	add	r7, sp, #4
   16140:	str	r5, [sp, #4]
   16144:	add	r7, r7, r4, lsl #3
   16148:	add	r4, r4, #1
   1614c:	ldr	r0, [pc, #352]	; 162b4 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   16150:	ldr	r0, [pc, r0]
   16154:	str	r0, [r7, #8]
   16158:	str	r6, [r7, #12]
   1615c:	str	r4, [sp, #8]
   16160:	cmp	r2, #0
   16164:	beq	161f0 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   16168:	sub	r0, r5, ip
   1616c:	mov	r6, r3
   16170:	sub	r0, r0, #4
   16174:	b	1618c <flatcc_builder_create_offset_vector_direct@@Base+0xe0>
   16178:	sub	r0, r0, #4
   1617c:	add	r1, r1, #4
   16180:	add	r6, r6, #1
   16184:	subs	r2, r2, #1
   16188:	beq	161ec <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   1618c:	ldr	r7, [r1]
   16190:	cmp	r7, #0
   16194:	beq	161b8 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   16198:	add	r7, r0, r7
   1619c:	cmp	r3, #0
   161a0:	str	r7, [r1]
   161a4:	beq	16178 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   161a8:	ldrb	r7, [r6]
   161ac:	cmp	r7, #0
   161b0:	bne	16178 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   161b4:	b	16234 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   161b8:	cmp	r3, #0
   161bc:	beq	16254 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   161c0:	ldrb	r7, [r6]
   161c4:	cmp	r7, #0
   161c8:	beq	16178 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   161cc:	ldr	r0, [pc, #240]	; 162c4 <flatcc_builder_create_offset_vector_direct@@Base+0x218>
   161d0:	ldr	r1, [pc, #240]	; 162c8 <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
   161d4:	ldr	r3, [pc, #240]	; 162cc <flatcc_builder_create_offset_vector_direct@@Base+0x220>
   161d8:	movw	r2, #1461	; 0x5b5
   161dc:	add	r0, pc, r0
   161e0:	add	r1, pc, r1
   161e4:	add	r3, pc, r3
   161e8:	bl	124ac <__assert_fail@plt>
   161ec:	ldr	ip, [r8, #136]	; 0x88
   161f0:	cmp	r5, #0
   161f4:	ble	16274 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   161f8:	ldr	r0, [r8, #36]	; 0x24
   161fc:	ldr	r7, [r8, #44]	; 0x2c
   16200:	add	r1, sp, #4
   16204:	sub	r6, ip, r5
   16208:	mov	r2, r4
   1620c:	str	r5, [sp]
   16210:	add	r1, r1, #8
   16214:	mov	r3, r6
   16218:	blx	r7
   1621c:	cmp	r0, #0
   16220:	bne	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   16224:	str	r6, [r8, #136]	; 0x88
   16228:	mov	r0, r6
   1622c:	sub	sp, fp, #24
   16230:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16234:	ldr	r0, [pc, #124]	; 162b8 <flatcc_builder_create_offset_vector_direct@@Base+0x20c>
   16238:	ldr	r1, [pc, #124]	; 162bc <flatcc_builder_create_offset_vector_direct@@Base+0x210>
   1623c:	ldr	r3, [pc, #124]	; 162c0 <flatcc_builder_create_offset_vector_direct@@Base+0x214>
   16240:	movw	r2, #1457	; 0x5b1
   16244:	add	r0, pc, r0
   16248:	add	r1, pc, r1
   1624c:	add	r3, pc, r3
   16250:	bl	124ac <__assert_fail@plt>
   16254:	ldr	r0, [pc, #116]	; 162d0 <flatcc_builder_create_offset_vector_direct@@Base+0x224>
   16258:	ldr	r1, [pc, #116]	; 162d4 <flatcc_builder_create_offset_vector_direct@@Base+0x228>
   1625c:	ldr	r3, [pc, #116]	; 162d8 <flatcc_builder_create_offset_vector_direct@@Base+0x22c>
   16260:	movw	r2, #1463	; 0x5b7
   16264:	add	r0, pc, r0
   16268:	add	r1, pc, r1
   1626c:	add	r3, pc, r3
   16270:	bl	124ac <__assert_fail@plt>
   16274:	ldr	r0, [pc, #96]	; 162dc <flatcc_builder_create_offset_vector_direct@@Base+0x230>
   16278:	ldr	r1, [pc, #96]	; 162e0 <flatcc_builder_create_offset_vector_direct@@Base+0x234>
   1627c:	ldr	r3, [pc, #96]	; 162e4 <flatcc_builder_create_offset_vector_direct@@Base+0x238>
   16280:	movw	r2, #647	; 0x287
   16284:	add	r0, pc, r0
   16288:	add	r1, pc, r1
   1628c:	add	r3, pc, r3
   16290:	bl	124ac <__assert_fail@plt>
   16294:	ldr	r0, [pc, #76]	; 162e8 <flatcc_builder_create_offset_vector_direct@@Base+0x23c>
   16298:	ldr	r1, [pc, #76]	; 162ec <flatcc_builder_create_offset_vector_direct@@Base+0x240>
   1629c:	ldr	r3, [pc, #76]	; 162f0 <flatcc_builder_create_offset_vector_direct@@Base+0x244>
   162a0:	movw	r2, #651	; 0x28b
   162a4:	add	r0, pc, r0
   162a8:	add	r1, pc, r1
   162ac:	add	r3, pc, r3
   162b0:	bl	124ac <__assert_fail@plt>
   162b4:	strdeq	r3, [r1], -ip
   162b8:	muleq	r0, pc, r5	; <UNPREDICTABLE>
   162bc:	andeq	r2, r0, sl, ror #7
   162c0:	andeq	r3, r0, r5, lsr #11
   162c4:	muleq	r0, r8, r6
   162c8:	andeq	r2, r0, r2, asr r4
   162cc:	andeq	r3, r0, sp, lsl #12
   162d0:	andeq	r3, r0, fp, lsl #11
   162d4:	andeq	r2, r0, sl, asr #7
   162d8:	andeq	r3, r0, r5, lsl #11
   162dc:	andeq	r3, r0, fp, ror #10
   162e0:	andeq	r2, r0, sl, lsr #7
   162e4:	andeq	r3, r0, r2, lsr #8
   162e8:	andeq	r3, r0, fp, asr #10
   162ec:	andeq	r2, r0, sl, lsl #7
   162f0:	andeq	r3, r0, r2, lsl #8

000162f4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   162f4:	push	{r4, r5, fp, lr}
   162f8:	add	fp, sp, #8
   162fc:	mov	r4, r0
   16300:	ldr	r0, [r0, #32]
   16304:	mov	r3, r1
   16308:	ldrh	r1, [r0, #14]
   1630c:	cmp	r1, #5
   16310:	bne	163ac <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16314:	ldr	r2, [r0, #20]
   16318:	ldr	r1, [r4, #16]
   1631c:	mov	r0, r4
   16320:	bl	160b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16324:	mov	r5, r0
   16328:	cmp	r0, #0
   1632c:	beq	163a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16330:	ldr	r0, [r4, #16]
   16334:	ldr	r2, [r4, #20]
   16338:	mov	r1, #0
   1633c:	bl	1247c <memset@plt>
   16340:	ldr	r0, [r4, #32]
   16344:	ldr	r1, [r4, #60]	; 0x3c
   16348:	ldr	ip, [r4, #64]	; 0x40
   1634c:	ldr	r3, [r0, #8]
   16350:	str	r3, [r4, #20]
   16354:	ldr	r3, [r0]
   16358:	str	r3, [r4, #28]
   1635c:	add	r1, r1, r3
   16360:	ldr	r2, [r0, #4]
   16364:	str	r1, [r4, #16]
   16368:	sub	r1, ip, r3
   1636c:	cmp	r1, r2
   16370:	movhi	r1, r2
   16374:	str	r1, [r4, #24]
   16378:	ldrh	r1, [r4, #130]	; 0x82
   1637c:	ldrh	r2, [r4, #128]	; 0x80
   16380:	cmp	r2, r1
   16384:	strhcc	r1, [r4, #128]	; 0x80
   16388:	ldrh	r1, [r0, #12]
   1638c:	sub	r0, r0, #36	; 0x24
   16390:	str	r0, [r4, #32]
   16394:	strh	r1, [r4, #130]	; 0x82
   16398:	ldr	r0, [r4, #156]	; 0x9c
   1639c:	sub	r0, r0, #1
   163a0:	str	r0, [r4, #156]	; 0x9c
   163a4:	mov	r0, r5
   163a8:	pop	{r4, r5, fp, pc}
   163ac:	ldr	r0, [pc, #24]	; 163cc <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   163b0:	ldr	r1, [pc, #24]	; 163d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   163b4:	ldr	r3, [pc, #24]	; 163d4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   163b8:	movw	r2, #1493	; 0x5d5
   163bc:	add	r0, pc, r0
   163c0:	add	r1, pc, r1
   163c4:	add	r3, pc, r3
   163c8:	bl	124ac <__assert_fail@plt>
   163cc:	andeq	r2, r0, r9, lsr #13
   163d0:	andeq	r2, r0, r2, ror r2
   163d4:	andeq	r2, r0, sl, lsl sp

000163d8 <flatcc_builder_offset_vector_edit@@Base>:
   163d8:	ldr	r0, [r0, #16]
   163dc:	bx	lr

000163e0 <flatcc_builder_offset_vector_count@@Base>:
   163e0:	ldr	r0, [r0, #32]
   163e4:	ldr	r0, [r0, #20]
   163e8:	bx	lr

000163ec <flatcc_builder_table_add_union@@Base>:
   163ec:	push	{r4, r5, r6, r7, fp, lr}
   163f0:	add	fp, sp, #16
   163f4:	mov	r5, r0
   163f8:	ldr	r0, [r0, #32]
   163fc:	ldrh	r0, [r0, #14]
   16400:	cmp	r0, #3
   16404:	bne	1648c <flatcc_builder_table_add_union@@Base+0xa0>
   16408:	mov	r7, r3
   1640c:	mov	r4, r2
   16410:	mov	r6, r1
   16414:	cmp	r3, #0
   16418:	beq	16428 <flatcc_builder_table_add_union@@Base+0x3c>
   1641c:	uxtb	r0, r4
   16420:	cmp	r0, #0
   16424:	beq	164ac <flatcc_builder_table_add_union@@Base+0xc0>
   16428:	cmp	r7, #0
   1642c:	beq	16448 <flatcc_builder_table_add_union@@Base+0x5c>
   16430:	mov	r0, r5
   16434:	mov	r1, r6
   16438:	bl	1651c <flatcc_builder_table_add_offset@@Base>
   1643c:	cmp	r0, #0
   16440:	beq	164cc <flatcc_builder_table_add_union@@Base+0xe0>
   16444:	str	r7, [r0]
   16448:	sub	r1, r6, #1
   1644c:	mov	r0, r5
   16450:	mov	r2, #1
   16454:	mov	r3, #1
   16458:	bl	166d0 <flatcc_builder_table_add@@Base>
   1645c:	cmp	r0, #0
   16460:	strbne	r4, [r0]
   16464:	movne	r0, #0
   16468:	popne	{r4, r5, r6, r7, fp, pc}
   1646c:	ldr	r0, [pc, #156]	; 16510 <flatcc_builder_table_add_union@@Base+0x124>
   16470:	ldr	r1, [pc, #156]	; 16514 <flatcc_builder_table_add_union@@Base+0x128>
   16474:	ldr	r3, [pc, #156]	; 16518 <flatcc_builder_table_add_union@@Base+0x12c>
   16478:	movw	r2, #1526	; 0x5f6
   1647c:	add	r0, pc, r0
   16480:	add	r1, pc, r1
   16484:	add	r3, pc, r3
   16488:	bl	124ac <__assert_fail@plt>
   1648c:	ldr	r0, [pc, #88]	; 164ec <flatcc_builder_table_add_union@@Base+0x100>
   16490:	ldr	r1, [pc, #88]	; 164f0 <flatcc_builder_table_add_union@@Base+0x104>
   16494:	ldr	r3, [pc, #88]	; 164f4 <flatcc_builder_table_add_union@@Base+0x108>
   16498:	movw	r2, #1518	; 0x5ee
   1649c:	add	r0, pc, r0
   164a0:	add	r1, pc, r1
   164a4:	add	r3, pc, r3
   164a8:	bl	124ac <__assert_fail@plt>
   164ac:	ldr	r0, [pc, #68]	; 164f8 <flatcc_builder_table_add_union@@Base+0x10c>
   164b0:	ldr	r1, [pc, #68]	; 164fc <flatcc_builder_table_add_union@@Base+0x110>
   164b4:	ldr	r3, [pc, #68]	; 16500 <flatcc_builder_table_add_union@@Base+0x114>
   164b8:	movw	r2, #1519	; 0x5ef
   164bc:	add	r0, pc, r0
   164c0:	add	r1, pc, r1
   164c4:	add	r3, pc, r3
   164c8:	bl	124ac <__assert_fail@plt>
   164cc:	ldr	r0, [pc, #48]	; 16504 <flatcc_builder_table_add_union@@Base+0x118>
   164d0:	ldr	r1, [pc, #48]	; 16508 <flatcc_builder_table_add_union@@Base+0x11c>
   164d4:	ldr	r3, [pc, #48]	; 1650c <flatcc_builder_table_add_union@@Base+0x120>
   164d8:	movw	r2, #1522	; 0x5f2
   164dc:	add	r0, pc, r0
   164e0:	add	r1, pc, r1
   164e4:	add	r3, pc, r3
   164e8:	bl	124ac <__assert_fail@plt>
   164ec:	andeq	r2, r0, r2, asr #19
   164f0:	muleq	r0, r2, r1
   164f4:	andeq	r2, r0, ip, lsr #25
   164f8:	andeq	r2, r0, ip, ror #25
   164fc:	andeq	r2, r0, r2, ror r1
   16500:	andeq	r2, r0, ip, lsl #25
   16504:	andeq	r2, r0, lr, ror #25
   16508:	andeq	r2, r0, r2, asr r1
   1650c:	andeq	r2, r0, ip, ror #24
   16510:	andeq	r2, r0, r8, asr sp
   16514:			; <UNDEFINED> instruction: 0x000021b2
   16518:	andeq	r2, r0, ip, asr #25

0001651c <flatcc_builder_table_add_offset@@Base>:
   1651c:	push	{r4, r5, r6, r7, fp, lr}
   16520:	add	fp, sp, #16
   16524:	sub	sp, sp, #8
   16528:	mov	r4, r0
   1652c:	ldr	r0, [r0, #32]
   16530:	ldrh	r0, [r0, #14]
   16534:	cmp	r0, #3
   16538:	bne	1664c <flatcc_builder_table_add_offset@@Base+0x130>
   1653c:	movw	r0, #32765	; 0x7ffd
   16540:	mov	r5, r1
   16544:	cmp	r1, r0
   16548:	bcs	1666c <flatcc_builder_table_add_offset@@Base+0x150>
   1654c:	ldr	r0, [r4, #4]
   16550:	add	r1, r0, r5, lsl #1
   16554:	ldrh	r1, [r1]
   16558:	cmp	r1, #0
   1655c:	bne	1668c <flatcc_builder_table_add_offset@@Base+0x170>
   16560:	ldr	r2, [r4, #20]
   16564:	ldr	r1, [r4, #12]
   16568:	ldr	r3, [r4, #24]
   1656c:	add	r2, r2, #3
   16570:	eor	r1, r1, r5
   16574:	bic	r6, r2, #3
   16578:	movw	r2, #31153	; 0x79b1
   1657c:	movt	r2, #40503	; 0x9e37
   16580:	add	r7, r6, #4
   16584:	cmp	r7, r3
   16588:	str	r7, [r4, #20]
   1658c:	mul	r1, r1, r2
   16590:	eor	r1, r1, #4
   16594:	mul	r1, r1, r2
   16598:	str	r1, [r4, #12]
   1659c:	bls	16610 <flatcc_builder_table_add_offset@@Base+0xf4>
   165a0:	ldr	r1, [r4, #28]
   165a4:	ldr	r0, [r4, #40]	; 0x28
   165a8:	ldr	ip, [r4, #48]	; 0x30
   165ac:	mov	r2, #1
   165b0:	mov	r3, #1
   165b4:	str	r2, [sp]
   165b8:	add	r2, r1, r7
   165bc:	add	r1, r4, #60	; 0x3c
   165c0:	blx	ip
   165c4:	mov	r1, r0
   165c8:	mov	r0, #0
   165cc:	cmp	r1, #0
   165d0:	beq	165dc <flatcc_builder_table_add_offset@@Base+0xc0>
   165d4:	sub	sp, fp, #16
   165d8:	pop	{r4, r5, r6, r7, fp, pc}
   165dc:	ldr	r0, [r4, #28]
   165e0:	ldr	r2, [r4, #60]	; 0x3c
   165e4:	ldr	r3, [r4, #64]	; 0x40
   165e8:	ldr	r1, [r4, #32]
   165ec:	add	r2, r2, r0
   165f0:	sub	r0, r3, r0
   165f4:	str	r2, [r4, #16]
   165f8:	movw	r2, #65532	; 0xfffc
   165fc:	cmp	r0, r2
   16600:	movcs	r0, r2
   16604:	str	r0, [r4, #24]
   16608:	str	r2, [r1, #4]
   1660c:	ldr	r0, [r4, #4]
   16610:	uxth	r1, r5
   16614:	add	r0, r0, r1, lsl #1
   16618:	strh	r7, [r0]
   1661c:	ldrh	r0, [r4, #8]
   16620:	cmp	r0, r1
   16624:	addls	r0, r5, #1
   16628:	strhls	r0, [r4, #8]
   1662c:	ldr	r0, [r4]
   16630:	add	r1, r0, #2
   16634:	str	r1, [r4]
   16638:	strh	r6, [r0]
   1663c:	ldr	r0, [r4, #16]
   16640:	add	r0, r0, r6
   16644:	sub	sp, fp, #16
   16648:	pop	{r4, r5, r6, r7, fp, pc}
   1664c:	ldr	r0, [pc, #88]	; 166ac <flatcc_builder_table_add_offset@@Base+0x190>
   16650:	ldr	r1, [pc, #88]	; 166b0 <flatcc_builder_table_add_offset@@Base+0x194>
   16654:	ldr	r3, [pc, #88]	; 166b4 <flatcc_builder_table_add_offset@@Base+0x198>
   16658:	movw	r2, #1811	; 0x713
   1665c:	add	r0, pc, r0
   16660:	add	r1, pc, r1
   16664:	add	r3, pc, r3
   16668:	bl	124ac <__assert_fail@plt>
   1666c:	ldr	r0, [pc, #68]	; 166b8 <flatcc_builder_table_add_offset@@Base+0x19c>
   16670:	ldr	r1, [pc, #68]	; 166bc <flatcc_builder_table_add_offset@@Base+0x1a0>
   16674:	ldr	r3, [pc, #68]	; 166c0 <flatcc_builder_table_add_offset@@Base+0x1a4>
   16678:	movw	r2, #1812	; 0x714
   1667c:	add	r0, pc, r0
   16680:	add	r1, pc, r1
   16684:	add	r3, pc, r3
   16688:	bl	124ac <__assert_fail@plt>
   1668c:	ldr	r0, [pc, #48]	; 166c4 <flatcc_builder_table_add_offset@@Base+0x1a8>
   16690:	ldr	r1, [pc, #48]	; 166c8 <flatcc_builder_table_add_offset@@Base+0x1ac>
   16694:	ldr	r3, [pc, #48]	; 166cc <flatcc_builder_table_add_offset@@Base+0x1b0>
   16698:	movw	r2, #1819	; 0x71b
   1669c:	add	r0, pc, r0
   166a0:	add	r1, pc, r1
   166a4:	add	r3, pc, r3
   166a8:	bl	124ac <__assert_fail@plt>
   166ac:	andeq	r2, r0, r2, lsl #16
   166b0:	ldrdeq	r1, [r0], -r2
   166b4:	andeq	r2, r0, lr, ror #29
   166b8:	andeq	r2, r0, r6, asr lr
   166bc:			; <UNDEFINED> instruction: 0x00001fb2
   166c0:	andeq	r2, r0, lr, asr #29
   166c4:	andeq	r3, r0, r3, asr r1
   166c8:	muleq	r0, r2, pc	; <UNPREDICTABLE>
   166cc:	andeq	r2, r0, lr, lsr #29

000166d0 <flatcc_builder_table_add@@Base>:
   166d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166d4:	add	fp, sp, #24
   166d8:	sub	sp, sp, #8
   166dc:	mov	r4, r0
   166e0:	ldr	r0, [r0, #32]
   166e4:	ldrh	r0, [r0, #14]
   166e8:	cmp	r0, #3
   166ec:	bne	1680c <flatcc_builder_table_add@@Base+0x13c>
   166f0:	movw	r0, #32765	; 0x7ffd
   166f4:	mov	r8, r1
   166f8:	cmp	r1, r0
   166fc:	bcs	1682c <flatcc_builder_table_add@@Base+0x15c>
   16700:	ldrh	r0, [r4, #130]	; 0x82
   16704:	cmp	r0, r3
   16708:	strhcc	r3, [r4, #130]	; 0x82
   1670c:	ldr	r0, [r4, #4]
   16710:	add	r1, r0, r8, lsl #1
   16714:	ldrh	r1, [r1]
   16718:	cmp	r1, #0
   1671c:	bne	1684c <flatcc_builder_table_add@@Base+0x17c>
   16720:	ldr	r1, [r4, #12]
   16724:	movw	r7, #31153	; 0x79b1
   16728:	ldr	r6, [r4, #20]
   1672c:	ldr	r5, [r4, #24]
   16730:	movt	r7, #40503	; 0x9e37
   16734:	eor	r1, r1, r8
   16738:	mul	r1, r1, r7
   1673c:	eor	r1, r1, r2
   16740:	mul	r1, r1, r7
   16744:	str	r1, [r4, #12]
   16748:	add	r1, r3, r6
   1674c:	rsb	r3, r3, #0
   16750:	sub	r1, r1, #1
   16754:	and	r6, r1, r3
   16758:	add	r1, r6, r2
   1675c:	cmp	r1, r5
   16760:	str	r1, [r4, #20]
   16764:	bcc	167dc <flatcc_builder_table_add@@Base+0x10c>
   16768:	ldr	r2, [r4, #28]
   1676c:	ldr	r0, [r4, #40]	; 0x28
   16770:	ldr	r7, [r4, #48]	; 0x30
   16774:	mov	r3, #1
   16778:	str	r3, [sp]
   1677c:	mov	r3, #1
   16780:	add	r1, r1, r2
   16784:	add	r2, r1, #1
   16788:	add	r1, r4, #60	; 0x3c
   1678c:	blx	r7
   16790:	mov	r1, r0
   16794:	mov	r0, #0
   16798:	cmp	r1, #0
   1679c:	beq	167a8 <flatcc_builder_table_add@@Base+0xd8>
   167a0:	sub	sp, fp, #24
   167a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167a8:	ldr	r0, [r4, #28]
   167ac:	ldr	r2, [r4, #60]	; 0x3c
   167b0:	ldr	r3, [r4, #64]	; 0x40
   167b4:	ldr	r1, [r4, #32]
   167b8:	add	r2, r2, r0
   167bc:	sub	r0, r3, r0
   167c0:	str	r2, [r4, #16]
   167c4:	movw	r2, #65532	; 0xfffc
   167c8:	cmp	r0, r2
   167cc:	movcs	r0, r2
   167d0:	str	r0, [r4, #24]
   167d4:	str	r2, [r1, #4]
   167d8:	ldr	r0, [r4, #4]
   167dc:	uxth	r1, r8
   167e0:	add	r2, r6, #4
   167e4:	add	r0, r0, r1, lsl #1
   167e8:	strh	r2, [r0]
   167ec:	ldrh	r0, [r4, #8]
   167f0:	cmp	r0, r1
   167f4:	addls	r0, r8, #1
   167f8:	strhls	r0, [r4, #8]
   167fc:	ldr	r0, [r4, #16]
   16800:	add	r0, r0, r6
   16804:	sub	sp, fp, #24
   16808:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1680c:	ldr	r0, [pc, #88]	; 1686c <flatcc_builder_table_add@@Base+0x19c>
   16810:	ldr	r1, [pc, #88]	; 16870 <flatcc_builder_table_add@@Base+0x1a0>
   16814:	ldr	r3, [pc, #88]	; 16874 <flatcc_builder_table_add@@Base+0x1a4>
   16818:	movw	r2, #1773	; 0x6ed
   1681c:	add	r0, pc, r0
   16820:	add	r1, pc, r1
   16824:	add	r3, pc, r3
   16828:	bl	124ac <__assert_fail@plt>
   1682c:	ldr	r0, [pc, #68]	; 16878 <flatcc_builder_table_add@@Base+0x1a8>
   16830:	ldr	r1, [pc, #68]	; 1687c <flatcc_builder_table_add@@Base+0x1ac>
   16834:	ldr	r3, [pc, #68]	; 16880 <flatcc_builder_table_add@@Base+0x1b0>
   16838:	movw	r2, #1774	; 0x6ee
   1683c:	add	r0, pc, r0
   16840:	add	r1, pc, r1
   16844:	add	r3, pc, r3
   16848:	bl	124ac <__assert_fail@plt>
   1684c:	ldr	r0, [pc, #48]	; 16884 <flatcc_builder_table_add@@Base+0x1b4>
   16850:	ldr	r1, [pc, #48]	; 16888 <flatcc_builder_table_add@@Base+0x1b8>
   16854:	ldr	r3, [pc, #48]	; 1688c <flatcc_builder_table_add@@Base+0x1bc>
   16858:	movw	r2, #1784	; 0x6f8
   1685c:	add	r0, pc, r0
   16860:	add	r1, pc, r1
   16864:	add	r3, pc, r3
   16868:	bl	124ac <__assert_fail@plt>
   1686c:	andeq	r2, r0, r2, asr #12
   16870:	andeq	r1, r0, r2, lsl lr
   16874:	andeq	r2, r0, r4, ror #24
   16878:	muleq	r0, r6, ip
   1687c:	strdeq	r1, [r0], -r2
   16880:	andeq	r2, r0, r4, asr #24
   16884:	muleq	r0, r3, pc	; <UNPREDICTABLE>
   16888:	ldrdeq	r1, [r0], -r2
   1688c:	andeq	r2, r0, r4, lsr #24

00016890 <flatcc_builder_table_add_union_vector@@Base>:
   16890:	push	{r4, r5, r6, r7, fp, lr}
   16894:	add	fp, sp, #16
   16898:	mov	r6, r0
   1689c:	ldr	r0, [r0, #32]
   168a0:	ldrh	r0, [r0, #14]
   168a4:	cmp	r0, #3
   168a8:	bne	16914 <flatcc_builder_table_add_union_vector@@Base+0x84>
   168ac:	mov	r5, r1
   168b0:	clz	r1, r3
   168b4:	cmp	r2, #0
   168b8:	mov	r0, r2
   168bc:	mov	r4, r3
   168c0:	mov	r7, r2
   168c4:	movwne	r0, #1
   168c8:	lsr	r1, r1, #5
   168cc:	teq	r1, r0
   168d0:	beq	16934 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   168d4:	cmp	r7, #0
   168d8:	beq	1690c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   168dc:	sub	r1, r5, #1
   168e0:	mov	r0, r6
   168e4:	bl	1651c <flatcc_builder_table_add_offset@@Base>
   168e8:	cmp	r0, #0
   168ec:	beq	16954 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   168f0:	str	r7, [r0]
   168f4:	mov	r0, r6
   168f8:	mov	r1, r5
   168fc:	bl	1651c <flatcc_builder_table_add_offset@@Base>
   16900:	cmp	r0, #0
   16904:	beq	16974 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   16908:	str	r4, [r0]
   1690c:	mov	r0, #0
   16910:	pop	{r4, r5, r6, r7, fp, pc}
   16914:	ldr	r0, [pc, #120]	; 16994 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16918:	ldr	r1, [pc, #120]	; 16998 <flatcc_builder_table_add_union_vector@@Base+0x108>
   1691c:	ldr	r3, [pc, #120]	; 1699c <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16920:	mov	r2, #1536	; 0x600
   16924:	add	r0, pc, r0
   16928:	add	r1, pc, r1
   1692c:	add	r3, pc, r3
   16930:	bl	124ac <__assert_fail@plt>
   16934:	ldr	r0, [pc, #100]	; 169a0 <flatcc_builder_table_add_union_vector@@Base+0x110>
   16938:	ldr	r1, [pc, #100]	; 169a4 <flatcc_builder_table_add_union_vector@@Base+0x114>
   1693c:	ldr	r3, [pc, #100]	; 169a8 <flatcc_builder_table_add_union_vector@@Base+0x118>
   16940:	movw	r2, #1537	; 0x601
   16944:	add	r0, pc, r0
   16948:	add	r1, pc, r1
   1694c:	add	r3, pc, r3
   16950:	bl	124ac <__assert_fail@plt>
   16954:	ldr	r0, [pc, #80]	; 169ac <flatcc_builder_table_add_union_vector@@Base+0x11c>
   16958:	ldr	r1, [pc, #80]	; 169b0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   1695c:	ldr	r3, [pc, #80]	; 169b4 <flatcc_builder_table_add_union_vector@@Base+0x124>
   16960:	movw	r2, #1540	; 0x604
   16964:	add	r0, pc, r0
   16968:	add	r1, pc, r1
   1696c:	add	r3, pc, r3
   16970:	bl	124ac <__assert_fail@plt>
   16974:	ldr	r0, [pc, #60]	; 169b8 <flatcc_builder_table_add_union_vector@@Base+0x128>
   16978:	ldr	r1, [pc, #60]	; 169bc <flatcc_builder_table_add_union_vector@@Base+0x12c>
   1697c:	ldr	r3, [pc, #60]	; 169c0 <flatcc_builder_table_add_union_vector@@Base+0x130>
   16980:	movw	r2, #1544	; 0x608
   16984:	add	r0, pc, r0
   16988:	add	r1, pc, r1
   1698c:	add	r3, pc, r3
   16990:	bl	124ac <__assert_fail@plt>
   16994:	andeq	r2, r0, sl, lsr r5
   16998:	andeq	r1, r0, sl, lsl #26
   1699c:			; <UNDEFINED> instruction: 0x000028b4
   169a0:	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   169a4:	andeq	r1, r0, sl, ror #25
   169a8:	muleq	r0, r4, r8
   169ac:	andeq	r2, r0, r6, ror #16
   169b0:	andeq	r1, r0, sl, asr #25
   169b4:	andeq	r2, r0, r4, ror r8
   169b8:	andeq	r2, r0, r6, asr #16
   169bc:	andeq	r1, r0, sl, lsr #25
   169c0:	andeq	r2, r0, r4, asr r8

000169c4 <flatcc_builder_create_union_vector@@Base>:
   169c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169c8:	add	fp, sp, #28
   169cc:	sub	sp, sp, #12
   169d0:	mov	r6, #0
   169d4:	mov	r4, r1
   169d8:	mov	r8, r0
   169dc:	mov	sl, r3
   169e0:	mov	r9, r2
   169e4:	mov	r7, #4
   169e8:	str	r6, [r0]
   169ec:	str	r6, [r0, #4]
   169f0:	mov	r0, r1
   169f4:	mov	r1, #4
   169f8:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   169fc:	cmp	r0, #0
   16a00:	beq	16a0c <flatcc_builder_create_union_vector@@Base+0x48>
   16a04:	sub	sp, fp, #28
   16a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a0c:	ldr	r0, [r4, #32]
   16a10:	mov	r1, #5
   16a14:	str	r7, [r0, #16]
   16a18:	ldr	r0, [r4, #32]
   16a1c:	str	r6, [r0, #20]
   16a20:	ldr	r0, [r4, #32]
   16a24:	strh	r1, [r0, #14]
   16a28:	ldr	r1, [r4, #28]
   16a2c:	ldr	r2, [r4, #60]	; 0x3c
   16a30:	ldr	r3, [r4, #64]	; 0x40
   16a34:	add	r2, r2, r1
   16a38:	sub	r1, r3, r1
   16a3c:	str	r2, [r4, #16]
   16a40:	mvn	r2, #3
   16a44:	cmn	r1, #4
   16a48:	movcs	r1, r2
   16a4c:	str	r1, [r4, #24]
   16a50:	str	r2, [r0, #4]
   16a54:	ldr	r1, [r0, #20]
   16a58:	adds	r1, r1, sl
   16a5c:	cmpcc	r1, #1073741824	; 0x40000000
   16a60:	bcc	16a84 <flatcc_builder_create_union_vector@@Base+0xc0>
   16a64:	ldr	r0, [pc, #644]	; 16cf0 <flatcc_builder_create_union_vector@@Base+0x32c>
   16a68:	ldr	r1, [pc, #644]	; 16cf4 <flatcc_builder_create_union_vector@@Base+0x330>
   16a6c:	ldr	r3, [pc, #644]	; 16cf8 <flatcc_builder_create_union_vector@@Base+0x334>
   16a70:	mov	r2, #892	; 0x37c
   16a74:	add	r0, pc, r0
   16a78:	add	r1, pc, r1
   16a7c:	add	r3, pc, r3
   16a80:	bl	124ac <__assert_fail@plt>
   16a84:	str	r1, [r0, #20]
   16a88:	ldr	r7, [r4, #20]
   16a8c:	ldr	r0, [r4, #24]
   16a90:	add	r1, r7, sl, lsl #2
   16a94:	cmp	r1, r0
   16a98:	str	r1, [r4, #20]
   16a9c:	bcs	16ab0 <flatcc_builder_create_union_vector@@Base+0xec>
   16aa0:	ldr	r1, [r4, #16]
   16aa4:	adds	r2, r1, r7
   16aa8:	bne	16b18 <flatcc_builder_create_union_vector@@Base+0x154>
   16aac:	b	16a04 <flatcc_builder_create_union_vector@@Base+0x40>
   16ab0:	ldr	r2, [r4, #28]
   16ab4:	ldr	r0, [r4, #40]	; 0x28
   16ab8:	ldr	r6, [r4, #48]	; 0x30
   16abc:	mov	r3, #1
   16ac0:	str	r3, [sp]
   16ac4:	mov	r3, #1
   16ac8:	add	r1, r1, r2
   16acc:	add	r2, r1, #1
   16ad0:	add	r1, r4, #60	; 0x3c
   16ad4:	blx	r6
   16ad8:	cmp	r0, #0
   16adc:	bne	16a04 <flatcc_builder_create_union_vector@@Base+0x40>
   16ae0:	ldr	r0, [r4, #28]
   16ae4:	ldr	r1, [r4, #60]	; 0x3c
   16ae8:	ldr	r3, [r4, #64]	; 0x40
   16aec:	ldr	r2, [r4, #32]
   16af0:	add	r1, r1, r0
   16af4:	sub	r0, r3, r0
   16af8:	mvn	r3, #3
   16afc:	cmn	r0, #4
   16b00:	str	r1, [r4, #16]
   16b04:	movcs	r0, r3
   16b08:	str	r0, [r4, #24]
   16b0c:	str	r3, [r2, #4]
   16b10:	adds	r2, r1, r7
   16b14:	beq	16a04 <flatcc_builder_create_union_vector@@Base+0x40>
   16b18:	ldr	r7, [r4, #20]
   16b1c:	add	r2, r7, sl
   16b20:	cmp	r2, r0
   16b24:	str	r2, [r4, #20]
   16b28:	bcc	16b8c <flatcc_builder_create_union_vector@@Base+0x1c8>
   16b2c:	ldr	r1, [r4, #28]
   16b30:	ldr	r0, [r4, #40]	; 0x28
   16b34:	ldr	r6, [r4, #48]	; 0x30
   16b38:	mov	r3, #1
   16b3c:	str	r3, [sp]
   16b40:	mov	r3, #1
   16b44:	add	r1, r2, r1
   16b48:	add	r2, r1, #1
   16b4c:	add	r1, r4, #60	; 0x3c
   16b50:	blx	r6
   16b54:	cmp	r0, #0
   16b58:	bne	16a04 <flatcc_builder_create_union_vector@@Base+0x40>
   16b5c:	ldr	r0, [r4, #28]
   16b60:	ldr	r1, [r4, #60]	; 0x3c
   16b64:	ldr	r3, [r4, #64]	; 0x40
   16b68:	ldr	r2, [r4, #32]
   16b6c:	add	r1, r1, r0
   16b70:	sub	r0, r3, r0
   16b74:	mvn	r3, #3
   16b78:	cmn	r0, #4
   16b7c:	str	r1, [r4, #16]
   16b80:	movcs	r0, r3
   16b84:	str	r0, [r4, #24]
   16b88:	str	r3, [r2, #4]
   16b8c:	adds	r5, r1, r7
   16b90:	beq	16a04 <flatcc_builder_create_union_vector@@Base+0x40>
   16b94:	cmp	sl, #0
   16b98:	beq	16c20 <flatcc_builder_create_union_vector@@Base+0x25c>
   16b9c:	and	ip, sl, #1
   16ba0:	mov	r0, #0
   16ba4:	cmp	sl, #1
   16ba8:	str	r5, [sp, #8]
   16bac:	beq	16c04 <flatcc_builder_create_union_vector@@Base+0x240>
   16bb0:	ldr	r0, [sp, #8]
   16bb4:	sub	lr, sl, ip
   16bb8:	add	r2, r1, #4
   16bbc:	add	r6, r9, #8
   16bc0:	add	r7, r0, #1
   16bc4:	mov	r0, #0
   16bc8:	ldrb	r3, [r6, #-8]
   16bcc:	add	r5, r7, r0
   16bd0:	strb	r3, [r5, #-1]
   16bd4:	add	r3, r9, r0, lsl #3
   16bd8:	ldr	r5, [r3, #4]
   16bdc:	str	r5, [r2, #-4]
   16be0:	ldrb	r5, [r6]
   16be4:	add	r6, r6, #16
   16be8:	strb	r5, [r7, r0]
   16bec:	add	r0, r0, #2
   16bf0:	ldr	r3, [r3, #12]
   16bf4:	cmp	lr, r0
   16bf8:	str	r3, [r2]
   16bfc:	add	r2, r2, #8
   16c00:	bne	16bc8 <flatcc_builder_create_union_vector@@Base+0x204>
   16c04:	ldr	r5, [sp, #8]
   16c08:	cmp	ip, #0
   16c0c:	beq	16c20 <flatcc_builder_create_union_vector@@Base+0x25c>
   16c10:	ldrb	r2, [r9, r0, lsl #3]!
   16c14:	strb	r2, [r5, r0]
   16c18:	ldr	r2, [r9, #4]
   16c1c:	str	r2, [r1, r0, lsl #2]
   16c20:	mov	r0, r4
   16c24:	mov	r2, sl
   16c28:	mov	r3, r5
   16c2c:	bl	160b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16c30:	mov	r7, r0
   16c34:	mov	r6, #0
   16c38:	cmp	r0, #0
   16c3c:	beq	16c68 <flatcc_builder_create_union_vector@@Base+0x2a4>
   16c40:	mvn	r0, #0
   16c44:	mov	r1, #1
   16c48:	mov	r2, sl
   16c4c:	mov	r3, #1
   16c50:	str	r1, [sp]
   16c54:	str	r0, [sp, #4]
   16c58:	mov	r0, r4
   16c5c:	mov	r1, r5
   16c60:	bl	15e20 <flatcc_builder_create_vector@@Base>
   16c64:	b	16c6c <flatcc_builder_create_union_vector@@Base+0x2a8>
   16c68:	mov	r0, #0
   16c6c:	orr	r1, r6, r7
   16c70:	stm	r8, {r0, r1}
   16c74:	mov	r1, #0
   16c78:	ldr	r0, [r4, #16]
   16c7c:	ldr	r2, [r4, #20]
   16c80:	bl	1247c <memset@plt>
   16c84:	ldr	r0, [r4, #32]
   16c88:	ldr	r1, [r4, #60]	; 0x3c
   16c8c:	ldr	r2, [r4, #64]	; 0x40
   16c90:	ldr	r3, [r0, #8]
   16c94:	str	r3, [r4, #20]
   16c98:	ldr	r3, [r0]
   16c9c:	str	r3, [r4, #28]
   16ca0:	add	r1, r1, r3
   16ca4:	ldr	r7, [r0, #4]
   16ca8:	str	r1, [r4, #16]
   16cac:	sub	r1, r2, r3
   16cb0:	cmp	r1, r7
   16cb4:	movhi	r1, r7
   16cb8:	str	r1, [r4, #24]
   16cbc:	ldrh	r1, [r4, #130]	; 0x82
   16cc0:	ldrh	r2, [r4, #128]	; 0x80
   16cc4:	cmp	r2, r1
   16cc8:	strhcc	r1, [r4, #128]	; 0x80
   16ccc:	ldrh	r1, [r0, #12]
   16cd0:	sub	r0, r0, #36	; 0x24
   16cd4:	str	r0, [r4, #32]
   16cd8:	strh	r1, [r4, #130]	; 0x82
   16cdc:	ldr	r0, [r4, #156]	; 0x9c
   16ce0:	sub	r0, r0, #1
   16ce4:	str	r0, [r4, #156]	; 0x9c
   16ce8:	sub	sp, fp, #28
   16cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cf0:	andeq	r2, r0, r4, lsl #25
   16cf4:			; <UNDEFINED> instruction: 0x00001bba
   16cf8:	muleq	r0, r7, ip

00016cfc <flatcc_builder_create_union_vector_direct@@Base>:
   16cfc:	push	{r4, r5, r6, r7, fp, lr}
   16d00:	add	fp, sp, #16
   16d04:	sub	sp, sp, #8
   16d08:	ldr	r7, [fp, #8]
   16d0c:	mov	r5, r2
   16d10:	mov	r4, r0
   16d14:	mov	r0, #0
   16d18:	mov	r6, r1
   16d1c:	str	r0, [r4]
   16d20:	str	r0, [r4, #4]
   16d24:	mov	r0, r1
   16d28:	mov	r1, r3
   16d2c:	mov	r3, r5
   16d30:	mov	r2, r7
   16d34:	bl	160b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16d38:	cmp	r0, #0
   16d3c:	str	r0, [r4, #4]
   16d40:	beq	16d6c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16d44:	mvn	r0, #0
   16d48:	mov	r1, #1
   16d4c:	mov	r2, r7
   16d50:	mov	r3, #1
   16d54:	str	r1, [sp]
   16d58:	str	r0, [sp, #4]
   16d5c:	mov	r0, r6
   16d60:	mov	r1, r5
   16d64:	bl	15e20 <flatcc_builder_create_vector@@Base>
   16d68:	str	r0, [r4]
   16d6c:	sub	sp, fp, #16
   16d70:	pop	{r4, r5, r6, r7, fp, pc}

00016d74 <flatcc_builder_start_union_vector@@Base>:
   16d74:	push	{r4, sl, fp, lr}
   16d78:	add	fp, sp, #8
   16d7c:	mov	r1, #4
   16d80:	mov	r4, r0
   16d84:	bl	13d18 <flatcc_builder_start_buffer@@Base+0xc0>
   16d88:	mov	r1, r0
   16d8c:	mvn	r0, #0
   16d90:	cmp	r1, #0
   16d94:	popne	{r4, sl, fp, pc}
   16d98:	ldr	r0, [r4, #32]
   16d9c:	mov	r1, #8
   16da0:	mov	r2, #7
   16da4:	str	r1, [r0, #16]
   16da8:	mov	r0, #0
   16dac:	ldr	r1, [r4, #32]
   16db0:	str	r0, [r1, #20]
   16db4:	ldr	r1, [r4, #32]
   16db8:	strh	r2, [r1, #14]
   16dbc:	ldr	r2, [r4, #28]
   16dc0:	ldr	r3, [r4, #60]	; 0x3c
   16dc4:	ldr	ip, [r4, #64]	; 0x40
   16dc8:	add	r3, r3, r2
   16dcc:	sub	r2, ip, r2
   16dd0:	str	r3, [r4, #16]
   16dd4:	mvn	r3, #3
   16dd8:	cmn	r2, #4
   16ddc:	movcs	r2, r3
   16de0:	str	r2, [r4, #24]
   16de4:	str	r3, [r1, #4]
   16de8:	pop	{r4, sl, fp, pc}

00016dec <flatcc_builder_end_union_vector@@Base>:
   16dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16df0:	add	fp, sp, #28
   16df4:	sub	sp, sp, #20
   16df8:	mov	r4, r0
   16dfc:	mov	r0, #0
   16e00:	mov	r8, r1
   16e04:	str	r0, [r4]
   16e08:	str	r0, [r4, #4]
   16e0c:	ldr	r0, [r1, #32]
   16e10:	ldrh	r1, [r0, #14]
   16e14:	cmp	r1, #7
   16e18:	bne	1701c <flatcc_builder_end_union_vector@@Base+0x230>
   16e1c:	ldr	r9, [r0, #20]
   16e20:	ldr	r5, [r8, #20]
   16e24:	ldr	r2, [r8, #24]
   16e28:	add	r0, r9, r9, lsl #2
   16e2c:	add	r1, r5, r0
   16e30:	cmp	r1, r2
   16e34:	str	r1, [r8, #20]
   16e38:	bcs	16e4c <flatcc_builder_end_union_vector@@Base+0x60>
   16e3c:	ldr	r0, [r8, #16]
   16e40:	adds	r1, r0, r5
   16e44:	bne	16eb4 <flatcc_builder_end_union_vector@@Base+0xc8>
   16e48:	b	17014 <flatcc_builder_end_union_vector@@Base+0x228>
   16e4c:	ldr	r2, [r8, #28]
   16e50:	ldr	r0, [r8, #40]	; 0x28
   16e54:	ldr	r7, [r8, #48]	; 0x30
   16e58:	mov	r3, #1
   16e5c:	str	r3, [sp]
   16e60:	mov	r3, #1
   16e64:	add	r1, r1, r2
   16e68:	add	r2, r1, #1
   16e6c:	add	r1, r8, #60	; 0x3c
   16e70:	blx	r7
   16e74:	cmp	r0, #0
   16e78:	bne	17014 <flatcc_builder_end_union_vector@@Base+0x228>
   16e7c:	ldr	r1, [r8, #28]
   16e80:	ldr	r0, [r8, #60]	; 0x3c
   16e84:	ldr	r3, [r8, #64]	; 0x40
   16e88:	ldr	r2, [r8, #32]
   16e8c:	add	r0, r0, r1
   16e90:	sub	r1, r3, r1
   16e94:	mvn	r3, #3
   16e98:	cmn	r1, #4
   16e9c:	str	r0, [r8, #16]
   16ea0:	movcs	r1, r3
   16ea4:	str	r1, [r8, #24]
   16ea8:	str	r3, [r2, #4]
   16eac:	adds	r1, r0, r5
   16eb0:	beq	17014 <flatcc_builder_end_union_vector@@Base+0x228>
   16eb4:	add	sl, r1, r9, lsl #2
   16eb8:	cmp	r9, #0
   16ebc:	beq	16f4c <flatcc_builder_end_union_vector@@Base+0x160>
   16ec0:	and	r2, r9, #1
   16ec4:	cmp	r9, #1
   16ec8:	str	r4, [sp, #12]
   16ecc:	str	r2, [sp, #16]
   16ed0:	mov	r2, #0
   16ed4:	beq	16f2c <flatcc_builder_end_union_vector@@Base+0x140>
   16ed8:	ldr	r2, [sp, #16]
   16edc:	add	r5, r5, #4
   16ee0:	add	r6, r0, #8
   16ee4:	sub	lr, r9, r2
   16ee8:	mov	r2, #0
   16eec:	ldrb	r7, [r6, #-8]
   16ef0:	mov	r4, sl
   16ef4:	add	r3, r0, r2, lsl #3
   16ef8:	strb	r7, [r4, r2]!
   16efc:	add	r7, r0, r5
   16f00:	add	r2, r2, #2
   16f04:	ldr	ip, [r3, #4]
   16f08:	cmp	lr, r2
   16f0c:	str	ip, [r7, #-4]
   16f10:	ldrb	r7, [r6]
   16f14:	add	r6, r6, #16
   16f18:	strb	r7, [r4, #1]
   16f1c:	ldr	r3, [r3, #12]
   16f20:	str	r3, [r0, r5]
   16f24:	add	r5, r5, #8
   16f28:	bne	16eec <flatcc_builder_end_union_vector@@Base+0x100>
   16f2c:	ldr	r3, [sp, #16]
   16f30:	ldr	r4, [sp, #12]
   16f34:	cmp	r3, #0
   16f38:	beq	16f4c <flatcc_builder_end_union_vector@@Base+0x160>
   16f3c:	ldrb	r3, [r0, r2, lsl #3]!
   16f40:	strb	r3, [sl, r2]
   16f44:	ldr	r0, [r0, #4]
   16f48:	str	r0, [r1, r2, lsl #2]
   16f4c:	mov	r0, r8
   16f50:	mov	r2, r9
   16f54:	mov	r3, sl
   16f58:	bl	160b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16f5c:	mov	r5, r0
   16f60:	mov	r6, #0
   16f64:	cmp	r0, #0
   16f68:	beq	16f94 <flatcc_builder_end_union_vector@@Base+0x1a8>
   16f6c:	mvn	r0, #0
   16f70:	mov	r1, #1
   16f74:	mov	r2, r9
   16f78:	mov	r3, #1
   16f7c:	str	r1, [sp]
   16f80:	str	r0, [sp, #4]
   16f84:	mov	r0, r8
   16f88:	mov	r1, sl
   16f8c:	bl	15e20 <flatcc_builder_create_vector@@Base>
   16f90:	b	16f98 <flatcc_builder_end_union_vector@@Base+0x1ac>
   16f94:	mov	r0, #0
   16f98:	orr	r1, r6, r5
   16f9c:	stm	r4, {r0, r1}
   16fa0:	mov	r1, #0
   16fa4:	ldr	r0, [r8, #16]
   16fa8:	ldr	r2, [r8, #20]
   16fac:	bl	1247c <memset@plt>
   16fb0:	ldr	r0, [r8, #32]
   16fb4:	ldr	r1, [r8, #60]	; 0x3c
   16fb8:	ldr	r2, [r8, #64]	; 0x40
   16fbc:	ldr	r3, [r0, #8]
   16fc0:	str	r3, [r8, #20]
   16fc4:	ldr	r3, [r0]
   16fc8:	str	r3, [r8, #28]
   16fcc:	add	r1, r1, r3
   16fd0:	ldr	r7, [r0, #4]
   16fd4:	str	r1, [r8, #16]
   16fd8:	sub	r1, r2, r3
   16fdc:	cmp	r1, r7
   16fe0:	movhi	r1, r7
   16fe4:	str	r1, [r8, #24]
   16fe8:	ldrh	r1, [r8, #130]	; 0x82
   16fec:	ldrh	r2, [r8, #128]	; 0x80
   16ff0:	cmp	r2, r1
   16ff4:	strhcc	r1, [r8, #128]	; 0x80
   16ff8:	ldrh	r1, [r0, #12]
   16ffc:	sub	r0, r0, #36	; 0x24
   17000:	str	r0, [r8, #32]
   17004:	strh	r1, [r8, #130]	; 0x82
   17008:	ldr	r0, [r8, #156]	; 0x9c
   1700c:	sub	r0, r0, #1
   17010:	str	r0, [r8, #156]	; 0x9c
   17014:	sub	sp, fp, #28
   17018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1701c:	ldr	r0, [pc, #24]	; 1703c <flatcc_builder_end_union_vector@@Base+0x250>
   17020:	ldr	r1, [pc, #24]	; 17040 <flatcc_builder_end_union_vector@@Base+0x254>
   17024:	ldr	r3, [pc, #24]	; 17044 <flatcc_builder_end_union_vector@@Base+0x258>
   17028:	movw	r2, #1617	; 0x651
   1702c:	add	r0, pc, r0
   17030:	add	r1, pc, r1
   17034:	add	r3, pc, r3
   17038:	bl	124ac <__assert_fail@plt>
   1703c:	andeq	r2, r0, pc, lsr r2
   17040:	andeq	r1, r0, r2, lsl #12
   17044:	andeq	r2, r0, r9, ror #4

00017048 <flatcc_builder_union_vector_count@@Base>:
   17048:	ldr	r0, [r0, #32]
   1704c:	ldr	r0, [r0, #20]
   17050:	bx	lr

00017054 <flatcc_builder_union_vector_edit@@Base>:
   17054:	ldr	r0, [r0, #16]
   17058:	bx	lr

0001705c <flatcc_builder_extend_union_vector@@Base>:
   1705c:	push	{r4, r5, fp, lr}
   17060:	add	fp, sp, #8
   17064:	sub	sp, sp, #8
   17068:	mov	r4, r0
   1706c:	ldr	r0, [r0, #32]
   17070:	ldr	r2, [r0, #20]
   17074:	adds	r2, r2, r1
   17078:	cmpcc	r2, #536870912	; 0x20000000
   1707c:	bcc	170a0 <flatcc_builder_extend_union_vector@@Base+0x44>
   17080:	ldr	r0, [pc, #184]	; 17140 <flatcc_builder_extend_union_vector@@Base+0xe4>
   17084:	ldr	r1, [pc, #184]	; 17144 <flatcc_builder_extend_union_vector@@Base+0xe8>
   17088:	ldr	r3, [pc, #184]	; 17148 <flatcc_builder_extend_union_vector@@Base+0xec>
   1708c:	mov	r2, #892	; 0x37c
   17090:	add	r0, pc, r0
   17094:	add	r1, pc, r1
   17098:	add	r3, pc, r3
   1709c:	bl	124ac <__assert_fail@plt>
   170a0:	str	r2, [r0, #20]
   170a4:	ldr	r5, [r4, #20]
   170a8:	ldr	r0, [r4, #24]
   170ac:	add	r1, r5, r1, lsl #3
   170b0:	cmp	r1, r0
   170b4:	str	r1, [r4, #20]
   170b8:	bcs	170c4 <flatcc_builder_extend_union_vector@@Base+0x68>
   170bc:	ldr	r0, [r4, #16]
   170c0:	b	17134 <flatcc_builder_extend_union_vector@@Base+0xd8>
   170c4:	ldr	r2, [r4, #28]
   170c8:	ldr	r0, [r4, #40]	; 0x28
   170cc:	ldr	ip, [r4, #48]	; 0x30
   170d0:	mov	r3, #1
   170d4:	str	r3, [sp]
   170d8:	mov	r3, #1
   170dc:	add	r1, r1, r2
   170e0:	add	r2, r1, #1
   170e4:	add	r1, r4, #60	; 0x3c
   170e8:	blx	ip
   170ec:	mov	r1, r0
   170f0:	mov	r0, #0
   170f4:	cmp	r1, #0
   170f8:	beq	17104 <flatcc_builder_extend_union_vector@@Base+0xa8>
   170fc:	sub	sp, fp, #8
   17100:	pop	{r4, r5, fp, pc}
   17104:	ldr	r1, [r4, #28]
   17108:	ldr	r0, [r4, #60]	; 0x3c
   1710c:	ldr	r3, [r4, #64]	; 0x40
   17110:	ldr	r2, [r4, #32]
   17114:	add	r0, r0, r1
   17118:	sub	r1, r3, r1
   1711c:	mvn	r3, #3
   17120:	cmn	r1, #4
   17124:	str	r0, [r4, #16]
   17128:	movcs	r1, r3
   1712c:	str	r1, [r4, #24]
   17130:	str	r3, [r2, #4]
   17134:	add	r0, r0, r5
   17138:	sub	sp, fp, #8
   1713c:	pop	{r4, r5, fp, pc}
   17140:	andeq	r2, r0, r8, ror #12
   17144:	muleq	r0, lr, r5
   17148:	andeq	r2, r0, fp, ror r6

0001714c <flatcc_builder_truncate_union_vector@@Base>:
   1714c:	push	{fp, lr}
   17150:	mov	fp, sp
   17154:	ldr	r2, [r0, #32]
   17158:	ldrh	r3, [r2, #14]
   1715c:	cmp	r3, #7
   17160:	bne	171a8 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17164:	ldr	r3, [r2, #20]
   17168:	cmp	r3, r1
   1716c:	bcc	171c8 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17170:	sub	r3, r3, r1
   17174:	str	r3, [r2, #20]
   17178:	ldr	r2, [r0, #32]
   1717c:	ldr	r3, [r0, #20]
   17180:	ldr	ip, [r0, #16]
   17184:	ldr	r2, [r2, #16]
   17188:	mls	r3, r2, r1, r3
   1718c:	mul	r2, r2, r1
   17190:	mov	r1, #0
   17194:	str	r3, [r0, #20]
   17198:	add	r0, ip, r3
   1719c:	bl	1247c <memset@plt>
   171a0:	mov	r0, #0
   171a4:	pop	{fp, pc}
   171a8:	ldr	r0, [pc, #56]	; 171e8 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   171ac:	ldr	r1, [pc, #56]	; 171ec <flatcc_builder_truncate_union_vector@@Base+0xa0>
   171b0:	ldr	r3, [pc, #56]	; 171f0 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   171b4:	movw	r2, #1665	; 0x681
   171b8:	add	r0, pc, r0
   171bc:	add	r1, pc, r1
   171c0:	add	r3, pc, r3
   171c4:	bl	124ac <__assert_fail@plt>
   171c8:	ldr	r0, [pc, #36]	; 171f4 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   171cc:	ldr	r1, [pc, #36]	; 171f8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   171d0:	ldr	r3, [pc, #36]	; 171fc <flatcc_builder_truncate_union_vector@@Base+0xb0>
   171d4:	movw	r2, #1666	; 0x682
   171d8:	add	r0, pc, r0
   171dc:	add	r1, pc, r1
   171e0:	add	r3, pc, r3
   171e4:	bl	124ac <__assert_fail@plt>
   171e8:	strheq	r2, [r0], -r3
   171ec:	andeq	r1, r0, r6, ror r4
   171f0:	andeq	r2, r0, r0, lsr r1
   171f4:	strdeq	r1, [r0], -r7
   171f8:	andeq	r1, r0, r6, asr r4
   171fc:	andeq	r2, r0, r0, lsl r1

00017200 <flatcc_builder_union_vector_push@@Base>:
   17200:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17204:	add	fp, sp, #24
   17208:	sub	sp, sp, #8
   1720c:	mov	r7, r0
   17210:	ldr	r0, [r0, #32]
   17214:	mov	r9, r1
   17218:	ldrh	r1, [r0, #14]
   1721c:	cmp	r1, #7
   17220:	bne	172dc <flatcc_builder_union_vector_push@@Base+0xdc>
   17224:	ldr	r1, [r0, #20]
   17228:	mov	r6, #0
   1722c:	cmn	r1, #-536870911	; 0xe0000001
   17230:	beq	172d0 <flatcc_builder_union_vector_push@@Base+0xd0>
   17234:	add	r1, r1, #1
   17238:	mov	r8, r2
   1723c:	str	r1, [r0, #20]
   17240:	ldr	r4, [r7, #20]
   17244:	ldr	r0, [r7, #24]
   17248:	add	r1, r4, #8
   1724c:	cmp	r1, r0
   17250:	str	r1, [r7, #20]
   17254:	bcs	17260 <flatcc_builder_union_vector_push@@Base+0x60>
   17258:	ldr	r0, [r7, #16]
   1725c:	b	172c0 <flatcc_builder_union_vector_push@@Base+0xc0>
   17260:	ldr	r1, [r7, #28]
   17264:	ldr	r0, [r7, #40]	; 0x28
   17268:	ldr	r5, [r7, #48]	; 0x30
   1726c:	mov	r2, #1
   17270:	mov	r3, #1
   17274:	str	r2, [sp]
   17278:	add	r1, r4, r1
   1727c:	add	r2, r1, #9
   17280:	add	r1, r7, #60	; 0x3c
   17284:	blx	r5
   17288:	cmp	r0, #0
   1728c:	bne	172d0 <flatcc_builder_union_vector_push@@Base+0xd0>
   17290:	ldr	r1, [r7, #28]
   17294:	ldr	r0, [r7, #60]	; 0x3c
   17298:	ldr	r3, [r7, #64]	; 0x40
   1729c:	ldr	r2, [r7, #32]
   172a0:	add	r0, r0, r1
   172a4:	sub	r1, r3, r1
   172a8:	mvn	r3, #3
   172ac:	cmn	r1, #4
   172b0:	str	r0, [r7, #16]
   172b4:	movcs	r1, r3
   172b8:	str	r1, [r7, #24]
   172bc:	str	r3, [r2, #4]
   172c0:	adds	r0, r0, r4
   172c4:	movne	r6, r0
   172c8:	strne	r9, [r0]
   172cc:	strne	r8, [r0, #4]
   172d0:	mov	r0, r6
   172d4:	sub	sp, fp, #24
   172d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172dc:	ldr	r0, [pc, #24]	; 172fc <flatcc_builder_union_vector_push@@Base+0xfc>
   172e0:	ldr	r1, [pc, #24]	; 17300 <flatcc_builder_union_vector_push@@Base+0x100>
   172e4:	ldr	r3, [pc, #24]	; 17304 <flatcc_builder_union_vector_push@@Base+0x104>
   172e8:	movw	r2, #1677	; 0x68d
   172ec:	add	r0, pc, r0
   172f0:	add	r1, pc, r1
   172f4:	add	r3, pc, r3
   172f8:	bl	124ac <__assert_fail@plt>
   172fc:	andeq	r1, r0, pc, ror pc
   17300:	andeq	r1, r0, r2, asr #6
   17304:	andeq	r2, r0, r1, asr #32

00017308 <flatcc_builder_append_union_vector@@Base>:
   17308:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1730c:	add	fp, sp, #24
   17310:	sub	sp, sp, #8
   17314:	mov	r6, r0
   17318:	ldr	r0, [r0, #32]
   1731c:	mov	r8, r1
   17320:	ldrh	r1, [r0, #14]
   17324:	cmp	r1, #7
   17328:	bne	17418 <flatcc_builder_append_union_vector@@Base+0x110>
   1732c:	ldr	r1, [r0, #20]
   17330:	mov	r5, r2
   17334:	adds	r1, r1, r2
   17338:	cmpcc	r1, #536870912	; 0x20000000
   1733c:	bcc	17360 <flatcc_builder_append_union_vector@@Base+0x58>
   17340:	ldr	r0, [pc, #252]	; 17444 <flatcc_builder_append_union_vector@@Base+0x13c>
   17344:	ldr	r1, [pc, #252]	; 17448 <flatcc_builder_append_union_vector@@Base+0x140>
   17348:	ldr	r3, [pc, #252]	; 1744c <flatcc_builder_append_union_vector@@Base+0x144>
   1734c:	mov	r2, #892	; 0x37c
   17350:	add	r0, pc, r0
   17354:	add	r1, pc, r1
   17358:	add	r3, pc, r3
   1735c:	bl	124ac <__assert_fail@plt>
   17360:	str	r1, [r0, #20]
   17364:	ldr	r4, [r6, #20]
   17368:	ldr	r0, [r6, #24]
   1736c:	add	r1, r4, r5, lsl #3
   17370:	cmp	r1, r0
   17374:	str	r1, [r6, #20]
   17378:	bcs	1739c <flatcc_builder_append_union_vector@@Base+0x94>
   1737c:	ldr	r0, [r6, #16]
   17380:	adds	r7, r0, r4
   17384:	beq	17408 <flatcc_builder_append_union_vector@@Base+0x100>
   17388:	lsl	r2, r5, #3
   1738c:	mov	r0, r7
   17390:	mov	r1, r8
   17394:	bl	123f8 <memcpy@plt>
   17398:	b	1740c <flatcc_builder_append_union_vector@@Base+0x104>
   1739c:	ldr	r2, [r6, #28]
   173a0:	ldr	r0, [r6, #40]	; 0x28
   173a4:	ldr	r7, [r6, #48]	; 0x30
   173a8:	mov	r3, #1
   173ac:	str	r3, [sp]
   173b0:	mov	r3, #1
   173b4:	add	r1, r1, r2
   173b8:	add	r2, r1, #1
   173bc:	add	r1, r6, #60	; 0x3c
   173c0:	blx	r7
   173c4:	mov	r7, #0
   173c8:	cmp	r0, #0
   173cc:	bne	1740c <flatcc_builder_append_union_vector@@Base+0x104>
   173d0:	ldr	r1, [r6, #28]
   173d4:	ldr	r0, [r6, #60]	; 0x3c
   173d8:	ldr	r3, [r6, #64]	; 0x40
   173dc:	ldr	r2, [r6, #32]
   173e0:	add	r0, r0, r1
   173e4:	sub	r1, r3, r1
   173e8:	mvn	r3, #3
   173ec:	cmn	r1, #4
   173f0:	str	r0, [r6, #16]
   173f4:	movcs	r1, r3
   173f8:	str	r1, [r6, #24]
   173fc:	str	r3, [r2, #4]
   17400:	adds	r7, r0, r4
   17404:	bne	17388 <flatcc_builder_append_union_vector@@Base+0x80>
   17408:	mov	r7, #0
   1740c:	mov	r0, r7
   17410:	sub	sp, fp, #24
   17414:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17418:	ldr	r0, [pc, #24]	; 17438 <flatcc_builder_append_union_vector@@Base+0x130>
   1741c:	ldr	r1, [pc, #24]	; 1743c <flatcc_builder_append_union_vector@@Base+0x134>
   17420:	ldr	r3, [pc, #24]	; 17440 <flatcc_builder_append_union_vector@@Base+0x138>
   17424:	movw	r2, #1692	; 0x69c
   17428:	add	r0, pc, r0
   1742c:	add	r1, pc, r1
   17430:	add	r3, pc, r3
   17434:	bl	124ac <__assert_fail@plt>
   17438:	andeq	r1, r0, r3, asr #28
   1743c:	andeq	r1, r0, r6, lsl #4
   17440:	andeq	r1, r0, r2, ror pc
   17444:	andeq	r2, r0, r8, lsr #7
   17448:	ldrdeq	r1, [r0], -lr
   1744c:			; <UNDEFINED> instruction: 0x000023bb

00017450 <flatcc_builder_create_string@@Base>:
   17450:	push	{r4, r5, r6, sl, fp, lr}
   17454:	add	fp, sp, #16
   17458:	sub	sp, sp, #80	; 0x50
   1745c:	str	r2, [fp, #-20]	; 0xffffffec
   17460:	mvn	r5, r2
   17464:	mov	r6, r0
   17468:	sub	r3, fp, #20
   1746c:	cmp	r2, #0
   17470:	add	lr, sp, #4
   17474:	ldr	ip, [r0, #136]	; 0x88
   17478:	mov	r0, #4
   1747c:	str	r0, [sp, #16]
   17480:	str	r3, [sp, #12]
   17484:	str	r0, [sp, #4]
   17488:	mov	r3, #1
   1748c:	addne	r0, r2, #4
   17490:	str	r3, [sp, #8]
   17494:	strne	r2, [sp, #24]
   17498:	strne	r1, [sp, #20]
   1749c:	movne	r3, #2
   174a0:	strne	r3, [sp, #8]
   174a4:	strne	r0, [sp, #4]
   174a8:	add	r5, ip, r5
   174ac:	and	r5, r5, #3
   174b0:	add	r5, r5, #1
   174b4:	add	r1, r0, r5
   174b8:	add	r0, lr, r3, lsl #3
   174bc:	str	r1, [sp, #4]
   174c0:	cmp	r1, #0
   174c4:	ldr	r2, [pc, #132]	; 17550 <flatcc_builder_create_string@@Base+0x100>
   174c8:	ldr	r2, [pc, r2]
   174cc:	str	r2, [r0, #8]
   174d0:	add	r2, r3, #1
   174d4:	str	r5, [r0, #12]
   174d8:	str	r2, [sp, #8]
   174dc:	ble	17530 <flatcc_builder_create_string@@Base+0xe0>
   174e0:	ldr	r0, [r6, #36]	; 0x24
   174e4:	ldr	r4, [r6, #44]	; 0x2c
   174e8:	sub	r5, ip, r1
   174ec:	str	r1, [sp]
   174f0:	add	r1, lr, #8
   174f4:	mov	r3, r5
   174f8:	blx	r4
   174fc:	cmp	r0, #0
   17500:	streq	r5, [r6, #136]	; 0x88
   17504:	moveq	r0, r5
   17508:	subeq	sp, fp, #16
   1750c:	popeq	{r4, r5, r6, sl, fp, pc}
   17510:	ldr	r0, [pc, #72]	; 17560 <flatcc_builder_create_string@@Base+0x110>
   17514:	ldr	r1, [pc, #72]	; 17564 <flatcc_builder_create_string@@Base+0x114>
   17518:	ldr	r3, [pc, #72]	; 17568 <flatcc_builder_create_string@@Base+0x118>
   1751c:	movw	r2, #651	; 0x28b
   17520:	add	r0, pc, r0
   17524:	add	r1, pc, r1
   17528:	add	r3, pc, r3
   1752c:	bl	124ac <__assert_fail@plt>
   17530:	ldr	r0, [pc, #28]	; 17554 <flatcc_builder_create_string@@Base+0x104>
   17534:	ldr	r1, [pc, #28]	; 17558 <flatcc_builder_create_string@@Base+0x108>
   17538:	ldr	r3, [pc, #28]	; 1755c <flatcc_builder_create_string@@Base+0x10c>
   1753c:	movw	r2, #647	; 0x287
   17540:	add	r0, pc, r0
   17544:	add	r1, pc, r1
   17548:	add	r3, pc, r3
   1754c:	bl	124ac <__assert_fail@plt>
   17550:	andeq	r2, r1, r4, lsl #23
   17554:	andeq	r2, r0, pc, lsr #5
   17558:	andeq	r1, r0, lr, ror #1
   1755c:	andeq	r2, r0, r6, ror #2
   17560:	andeq	r2, r0, pc, asr #5
   17564:	andeq	r1, r0, lr, lsl #2
   17568:	andeq	r2, r0, r6, lsl #3

0001756c <flatcc_builder_create_string_str@@Base>:
   1756c:	push	{r4, r5, fp, lr}
   17570:	add	fp, sp, #8
   17574:	mov	r5, r0
   17578:	mov	r0, r1
   1757c:	mov	r4, r1
   17580:	bl	12458 <strlen@plt>
   17584:	mov	r2, r0
   17588:	mov	r0, r5
   1758c:	mov	r1, r4
   17590:	pop	{r4, r5, fp, lr}
   17594:	b	17450 <flatcc_builder_create_string@@Base>

00017598 <flatcc_builder_create_string_strn@@Base>:
   17598:	push	{r4, r5, r6, sl, fp, lr}
   1759c:	add	fp, sp, #16
   175a0:	mov	r6, r0
   175a4:	mov	r5, r1
   175a8:	mov	r0, r1
   175ac:	mov	r1, #0
   175b0:	mov	r4, r2
   175b4:	bl	12488 <memchr@plt>
   175b8:	cmp	r0, #0
   175bc:	mov	r1, r5
   175c0:	subne	r4, r0, r5
   175c4:	mov	r0, r6
   175c8:	mov	r2, r4
   175cc:	pop	{r4, r5, r6, sl, fp, lr}
   175d0:	b	17450 <flatcc_builder_create_string@@Base>

000175d4 <flatcc_builder_end_string@@Base>:
   175d4:	push	{r4, r5, fp, lr}
   175d8:	add	fp, sp, #8
   175dc:	mov	r4, r0
   175e0:	ldr	r0, [r0, #32]
   175e4:	ldrh	r1, [r0, #14]
   175e8:	cmp	r1, #6
   175ec:	bne	17694 <flatcc_builder_end_string@@Base+0xc0>
   175f0:	ldr	r2, [r0, #20]
   175f4:	ldr	r0, [r4, #20]
   175f8:	cmp	r2, r0
   175fc:	bne	176b4 <flatcc_builder_end_string@@Base+0xe0>
   17600:	ldr	r1, [r4, #16]
   17604:	mov	r0, r4
   17608:	bl	17450 <flatcc_builder_create_string@@Base>
   1760c:	mov	r5, r0
   17610:	cmp	r0, #0
   17614:	beq	1768c <flatcc_builder_end_string@@Base+0xb8>
   17618:	ldr	r0, [r4, #16]
   1761c:	ldr	r2, [r4, #20]
   17620:	mov	r1, #0
   17624:	bl	1247c <memset@plt>
   17628:	ldr	r0, [r4, #32]
   1762c:	ldr	r1, [r4, #60]	; 0x3c
   17630:	ldr	ip, [r4, #64]	; 0x40
   17634:	ldr	r3, [r0, #8]
   17638:	str	r3, [r4, #20]
   1763c:	ldr	r3, [r0]
   17640:	str	r3, [r4, #28]
   17644:	add	r1, r1, r3
   17648:	ldr	r2, [r0, #4]
   1764c:	str	r1, [r4, #16]
   17650:	sub	r1, ip, r3
   17654:	cmp	r1, r2
   17658:	movhi	r1, r2
   1765c:	str	r1, [r4, #24]
   17660:	ldrh	r1, [r4, #130]	; 0x82
   17664:	ldrh	r2, [r4, #128]	; 0x80
   17668:	cmp	r2, r1
   1766c:	strhcc	r1, [r4, #128]	; 0x80
   17670:	ldrh	r1, [r0, #12]
   17674:	sub	r0, r0, #36	; 0x24
   17678:	str	r0, [r4, #32]
   1767c:	strh	r1, [r4, #130]	; 0x82
   17680:	ldr	r0, [r4, #156]	; 0x9c
   17684:	sub	r0, r0, #1
   17688:	str	r0, [r4, #156]	; 0x9c
   1768c:	mov	r0, r5
   17690:	pop	{r4, r5, fp, pc}
   17694:	ldr	r0, [pc, #56]	; 176d4 <flatcc_builder_end_string@@Base+0x100>
   17698:	ldr	r1, [pc, #56]	; 176d8 <flatcc_builder_end_string@@Base+0x104>
   1769c:	ldr	r3, [pc, #56]	; 176dc <flatcc_builder_end_string@@Base+0x108>
   176a0:	movw	r2, #1732	; 0x6c4
   176a4:	add	r0, pc, r0
   176a8:	add	r1, pc, r1
   176ac:	add	r3, pc, r3
   176b0:	bl	124ac <__assert_fail@plt>
   176b4:	ldr	r0, [pc, #36]	; 176e0 <flatcc_builder_end_string@@Base+0x10c>
   176b8:	ldr	r1, [pc, #36]	; 176e4 <flatcc_builder_end_string@@Base+0x110>
   176bc:	ldr	r3, [pc, #36]	; 176e8 <flatcc_builder_end_string@@Base+0x114>
   176c0:	movw	r2, #1733	; 0x6c5
   176c4:	add	r0, pc, r0
   176c8:	add	r1, pc, r1
   176cc:	add	r3, pc, r3
   176d0:	bl	124ac <__assert_fail@plt>
   176d4:	andeq	r1, r0, sl, asr #9
   176d8:	andeq	r0, r0, sl, lsl #31
   176dc:	andeq	r1, r0, r5, ror sp
   176e0:	andeq	r1, r0, r0, lsr #27
   176e4:	andeq	r0, r0, sl, ror #30
   176e8:	andeq	r1, r0, r5, asr sp

000176ec <flatcc_builder_string_edit@@Base>:
   176ec:	ldr	r0, [r0, #16]
   176f0:	bx	lr

000176f4 <flatcc_builder_string_len@@Base>:
   176f4:	ldr	r0, [r0, #32]
   176f8:	ldr	r0, [r0, #20]
   176fc:	bx	lr

00017700 <flatcc_builder_table_edit@@Base>:
   17700:	push	{fp, lr}
   17704:	mov	fp, sp
   17708:	ldr	r2, [r0, #32]
   1770c:	ldrh	r2, [r2, #14]
   17710:	cmp	r2, #3
   17714:	ldreq	r2, [r0, #16]
   17718:	ldreq	r0, [r0, #20]
   1771c:	addeq	r0, r2, r0
   17720:	subeq	r0, r0, r1
   17724:	popeq	{fp, pc}
   17728:	ldr	r0, [pc, #24]	; 17748 <flatcc_builder_table_edit@@Base+0x48>
   1772c:	ldr	r1, [pc, #24]	; 1774c <flatcc_builder_table_edit@@Base+0x4c>
   17730:	ldr	r3, [pc, #24]	; 17750 <flatcc_builder_table_edit@@Base+0x50>
   17734:	movw	r2, #1794	; 0x702
   17738:	add	r0, pc, r0
   1773c:	add	r1, pc, r1
   17740:	add	r3, pc, r3
   17744:	bl	124ac <__assert_fail@plt>
   17748:	andeq	r1, r0, r6, lsr #14
   1774c:	strdeq	r0, [r0], -r6
   17750:	ldrdeq	r1, [r0], -r6

00017754 <flatcc_builder_table_add_copy@@Base>:
   17754:	push	{r4, r5, r6, sl, fp, lr}
   17758:	add	fp, sp, #16
   1775c:	mov	r4, r3
   17760:	ldr	r3, [fp, #8]
   17764:	mov	r5, r2
   17768:	mov	r2, r4
   1776c:	bl	166d0 <flatcc_builder_table_add@@Base>
   17770:	mov	r6, r0
   17774:	cmp	r0, #0
   17778:	beq	1778c <flatcc_builder_table_add_copy@@Base+0x38>
   1777c:	mov	r0, r6
   17780:	mov	r1, r5
   17784:	mov	r2, r4
   17788:	bl	123f8 <memcpy@plt>
   1778c:	mov	r0, r6
   17790:	pop	{r4, r5, r6, sl, fp, pc}

00017794 <flatcc_builder_push_buffer_alignment@@Base>:
   17794:	ldrh	r1, [r0, #128]	; 0x80
   17798:	mov	r2, #4
   1779c:	strh	r2, [r0, #128]	; 0x80
   177a0:	mov	r0, r1
   177a4:	bx	lr

000177a8 <flatcc_builder_pop_buffer_alignment@@Base>:
   177a8:	ldrh	r2, [r0, #128]	; 0x80
   177ac:	cmp	r2, r1
   177b0:	strhcc	r1, [r0, #128]	; 0x80
   177b4:	bx	lr

000177b8 <flatcc_builder_get_buffer_alignment@@Base>:
   177b8:	ldrh	r0, [r0, #128]	; 0x80
   177bc:	bx	lr

000177c0 <flatcc_builder_set_vtable_clustering@@Base>:
   177c0:	clz	r1, r1
   177c4:	lsr	r1, r1, #5
   177c8:	str	r1, [r0, #180]	; 0xb4
   177cc:	bx	lr

000177d0 <flatcc_builder_set_block_align@@Base>:
   177d0:	strh	r1, [r0, #132]	; 0x84
   177d4:	bx	lr

000177d8 <flatcc_builder_get_level@@Base>:
   177d8:	ldr	r0, [r0, #156]	; 0x9c
   177dc:	bx	lr

000177e0 <flatcc_builder_set_max_level@@Base>:
   177e0:	str	r1, [r0, #176]	; 0xb0
   177e4:	ldr	r2, [r0, #160]	; 0xa0
   177e8:	cmp	r2, r1
   177ec:	strlt	r1, [r0, #160]	; 0xa0
   177f0:	bx	lr

000177f4 <flatcc_builder_get_buffer_size@@Base>:
   177f4:	ldr	r1, [r0, #136]	; 0x88
   177f8:	ldr	r0, [r0, #140]	; 0x8c
   177fc:	sub	r0, r0, r1
   17800:	bx	lr

00017804 <flatcc_builder_get_buffer_start@@Base>:
   17804:	ldr	r0, [r0, #136]	; 0x88
   17808:	bx	lr

0001780c <flatcc_builder_get_buffer_end@@Base>:
   1780c:	ldr	r0, [r0, #140]	; 0x8c
   17810:	bx	lr

00017814 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17814:	str	r1, [r0, #172]	; 0xac
   17818:	bx	lr

0001781c <flatcc_builder_set_identifier@@Base>:
   1781c:	ldr	r2, [pc, #20]	; 17838 <flatcc_builder_set_identifier@@Base+0x1c>
   17820:	cmp	r1, #0
   17824:	ldr	r2, [pc, r2]
   17828:	movne	r2, r1
   1782c:	ldr	r1, [r2]
   17830:	str	r1, [r0, #168]	; 0xa8
   17834:	bx	lr
   17838:	andeq	r2, r1, r8, lsr #16

0001783c <flatcc_builder_get_type@@Base>:
   1783c:	ldr	r0, [r0, #32]
   17840:	cmp	r0, #0
   17844:	ldrhne	r0, [r0, #14]
   17848:	moveq	r0, #0
   1784c:	bx	lr

00017850 <flatcc_builder_get_type_at@@Base>:
   17850:	mov	r2, r0
   17854:	mov	r0, #0
   17858:	cmp	r1, #1
   1785c:	blt	17880 <flatcc_builder_get_type_at@@Base+0x30>
   17860:	ldr	r3, [r2, #156]	; 0x9c
   17864:	cmp	r3, r1
   17868:	bxlt	lr
   1786c:	sub	r0, r1, r3
   17870:	ldr	r1, [r2, #32]
   17874:	add	r0, r0, r0, lsl #3
   17878:	add	r0, r1, r0, lsl #2
   1787c:	ldrh	r0, [r0, #14]
   17880:	bx	lr

00017884 <flatcc_builder_get_direct_buffer@@Base>:
   17884:	ldr	r2, [r0, #184]	; 0xb8
   17888:	cmp	r2, #0
   1788c:	beq	178a0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17890:	ldr	r2, [r0, #188]	; 0xbc
   17894:	ldr	r3, [r0, #192]	; 0xc0
   17898:	cmp	r2, r3
   1789c:	beq	178b8 <flatcc_builder_get_direct_buffer@@Base+0x34>
   178a0:	cmp	r1, #0
   178a4:	moveq	r0, #0
   178a8:	bxeq	lr
   178ac:	mov	r0, #0
   178b0:	str	r0, [r1]
   178b4:	bx	lr
   178b8:	cmp	r1, #0
   178bc:	ldrne	r2, [r0, #212]	; 0xd4
   178c0:	strne	r2, [r1]
   178c4:	ldr	r0, [r0, #196]	; 0xc4
   178c8:	bx	lr

000178cc <flatcc_builder_copy_buffer@@Base>:
   178cc:	push	{fp, lr}
   178d0:	mov	fp, sp
   178d4:	ldr	r3, [r0, #184]	; 0xb8
   178d8:	cmp	r3, #0
   178dc:	beq	17910 <flatcc_builder_copy_buffer@@Base+0x44>
   178e0:	add	r0, r0, #188	; 0xbc
   178e4:	bl	1801c <flatcc_emitter_copy_buffer@@Base>
   178e8:	cmp	r0, #0
   178ec:	popne	{fp, pc}
   178f0:	ldr	r0, [pc, #32]	; 17918 <flatcc_builder_copy_buffer@@Base+0x4c>
   178f4:	ldr	r1, [pc, #32]	; 1791c <flatcc_builder_copy_buffer@@Base+0x50>
   178f8:	ldr	r3, [pc, #32]	; 17920 <flatcc_builder_copy_buffer@@Base+0x54>
   178fc:	movw	r2, #1926	; 0x786
   17900:	add	r0, pc, r0
   17904:	add	r1, pc, r1
   17908:	add	r3, pc, r3
   1790c:	bl	124ac <__assert_fail@plt>
   17910:	mov	r0, #0
   17914:	pop	{fp, pc}
   17918:	andeq	r0, r0, r6, asr #21
   1791c:	andeq	r0, r0, lr, lsr #26
   17920:	muleq	r0, r9, ip

00017924 <flatcc_builder_finalize_buffer@@Base>:
   17924:	push	{r4, r5, r6, sl, fp, lr}
   17928:	add	fp, sp, #16
   1792c:	mov	r5, r0
   17930:	ldr	r0, [r0, #136]	; 0x88
   17934:	cmp	r1, #0
   17938:	ldr	r2, [r5, #140]	; 0x8c
   1793c:	sub	r4, r2, r0
   17940:	mov	r0, r4
   17944:	strne	r4, [r1]
   17948:	bl	12428 <malloc@plt>
   1794c:	cmp	r0, #0
   17950:	beq	179a0 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17954:	mov	r6, r0
   17958:	ldr	r0, [r5, #184]	; 0xb8
   1795c:	cmp	r0, #0
   17960:	beq	179c0 <flatcc_builder_finalize_buffer@@Base+0x9c>
   17964:	add	r0, r5, #188	; 0xbc
   17968:	mov	r1, r6
   1796c:	mov	r2, r4
   17970:	bl	1801c <flatcc_emitter_copy_buffer@@Base>
   17974:	cmp	r0, #0
   17978:	movne	r0, r6
   1797c:	popne	{r4, r5, r6, sl, fp, pc}
   17980:	ldr	r0, [pc, #88]	; 179e0 <flatcc_builder_finalize_buffer@@Base+0xbc>
   17984:	ldr	r1, [pc, #88]	; 179e4 <flatcc_builder_finalize_buffer@@Base+0xc0>
   17988:	ldr	r3, [pc, #88]	; 179e8 <flatcc_builder_finalize_buffer@@Base+0xc4>
   1798c:	movw	r2, #1926	; 0x786
   17990:	add	r0, pc, r0
   17994:	add	r1, pc, r1
   17998:	add	r3, pc, r3
   1799c:	bl	124ac <__assert_fail@plt>
   179a0:	ldr	r0, [pc, #80]	; 179f8 <flatcc_builder_finalize_buffer@@Base+0xd4>
   179a4:	ldr	r1, [pc, #80]	; 179fc <flatcc_builder_finalize_buffer@@Base+0xd8>
   179a8:	ldr	r3, [pc, #80]	; 17a00 <flatcc_builder_finalize_buffer@@Base+0xdc>
   179ac:	movw	r2, #1944	; 0x798
   179b0:	add	r0, pc, r0
   179b4:	add	r1, pc, r1
   179b8:	add	r3, pc, r3
   179bc:	bl	124ac <__assert_fail@plt>
   179c0:	ldr	r0, [pc, #36]	; 179ec <flatcc_builder_finalize_buffer@@Base+0xc8>
   179c4:	ldr	r1, [pc, #36]	; 179f0 <flatcc_builder_finalize_buffer@@Base+0xcc>
   179c8:	ldr	r3, [pc, #36]	; 179f4 <flatcc_builder_finalize_buffer@@Base+0xd0>
   179cc:	movw	r2, #1948	; 0x79c
   179d0:	add	r0, pc, r0
   179d4:	add	r1, pc, r1
   179d8:	add	r3, pc, r3
   179dc:	bl	124ac <__assert_fail@plt>
   179e0:	andeq	r0, r0, r6, lsr sl
   179e4:	muleq	r0, lr, ip
   179e8:	andeq	r1, r0, r9, lsl #24
   179ec:	andeq	r1, r0, pc, lsl lr
   179f0:	andeq	r0, r0, lr, asr ip
   179f4:	andeq	r1, r0, lr, lsl #24
   179f8:	andeq	r1, r0, pc, lsr lr
   179fc:	andeq	r0, r0, lr, ror ip
   17a00:	andeq	r1, r0, lr, lsr #24

00017a04 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17a04:	push	{r4, r5, r6, r7, fp, lr}
   17a08:	add	fp, sp, #16
   17a0c:	sub	sp, sp, #8
   17a10:	mov	r5, r0
   17a14:	mov	r4, r1
   17a18:	ldr	r0, [r0, #136]	; 0x88
   17a1c:	ldr	r1, [r5, #140]	; 0x8c
   17a20:	cmp	r4, #0
   17a24:	sub	r0, r1, r0
   17a28:	mov	r1, #0
   17a2c:	strne	r0, [r4]
   17a30:	ldrh	r2, [r5, #128]	; 0x80
   17a34:	str	r1, [sp, #4]
   17a38:	add	r0, r0, r2
   17a3c:	cmp	r2, #4
   17a40:	mov	r1, r2
   17a44:	rsb	r2, r2, #0
   17a48:	sub	r0, r0, #1
   17a4c:	movls	r1, #4
   17a50:	and	r7, r0, r2
   17a54:	add	r0, sp, #4
   17a58:	mov	r2, r7
   17a5c:	bl	12470 <posix_memalign@plt>
   17a60:	ldr	r6, [sp, #4]
   17a64:	cmp	r0, #0
   17a68:	cmpne	r6, #0
   17a6c:	bne	17abc <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   17a70:	cmp	r6, #0
   17a74:	beq	17ac4 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   17a78:	ldr	r0, [r5, #184]	; 0xb8
   17a7c:	cmp	r0, #0
   17a80:	beq	17abc <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   17a84:	add	r0, r5, #188	; 0xbc
   17a88:	mov	r1, r6
   17a8c:	mov	r2, r7
   17a90:	bl	1801c <flatcc_emitter_copy_buffer@@Base>
   17a94:	cmp	r0, #0
   17a98:	bne	17ad0 <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   17a9c:	ldr	r0, [pc, #56]	; 17adc <flatcc_builder_finalize_aligned_buffer@@Base+0xd8>
   17aa0:	ldr	r1, [pc, #56]	; 17ae0 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   17aa4:	ldr	r3, [pc, #56]	; 17ae4 <flatcc_builder_finalize_aligned_buffer@@Base+0xe0>
   17aa8:	movw	r2, #1926	; 0x786
   17aac:	add	r0, pc, r0
   17ab0:	add	r1, pc, r1
   17ab4:	add	r3, pc, r3
   17ab8:	bl	124ac <__assert_fail@plt>
   17abc:	mov	r0, r6
   17ac0:	bl	123ec <free@plt>
   17ac4:	mov	r6, #0
   17ac8:	cmp	r4, #0
   17acc:	strne	r6, [r4]
   17ad0:	mov	r0, r6
   17ad4:	sub	sp, fp, #16
   17ad8:	pop	{r4, r5, r6, r7, fp, pc}
   17adc:	andeq	r0, r0, sl, lsl r9
   17ae0:	andeq	r0, r0, r2, lsl #23
   17ae4:	andeq	r1, r0, sp, ror #21

00017ae8 <flatcc_builder_aligned_alloc@@Base>:
   17ae8:	push	{fp, lr}
   17aec:	mov	fp, sp
   17af0:	sub	sp, sp, #8
   17af4:	mov	r2, r1
   17af8:	mov	r1, r0
   17afc:	mov	r0, #0
   17b00:	cmp	r1, #4
   17b04:	str	r0, [sp, #4]
   17b08:	add	r0, sp, #4
   17b0c:	movls	r1, #4
   17b10:	bl	12470 <posix_memalign@plt>
   17b14:	mov	r1, r0
   17b18:	ldr	r0, [sp, #4]
   17b1c:	cmp	r1, #0
   17b20:	cmpne	r0, #0
   17b24:	bne	17b30 <flatcc_builder_aligned_alloc@@Base+0x48>
   17b28:	mov	sp, fp
   17b2c:	pop	{fp, pc}
   17b30:	bl	123ec <free@plt>
   17b34:	mov	r0, #0
   17b38:	str	r0, [sp, #4]
   17b3c:	mov	sp, fp
   17b40:	pop	{fp, pc}

00017b44 <flatcc_builder_aligned_free@@Base>:
   17b44:	b	123ec <free@plt>

00017b48 <flatcc_builder_get_emit_context@@Base>:
   17b48:	ldr	r0, [r0, #36]	; 0x24
   17b4c:	bx	lr

00017b50 <flatcc_emitter_recycle_page@@Base>:
   17b50:	ldr	r3, [r0]
   17b54:	mov	r2, r0
   17b58:	mvn	r0, #0
   17b5c:	cmp	r3, r1
   17b60:	beq	17ba0 <flatcc_emitter_recycle_page@@Base+0x50>
   17b64:	ldr	r2, [r2, #4]
   17b68:	cmp	r2, r1
   17b6c:	bxeq	lr
   17b70:	ldr	r0, [r1, #2944]	; 0xb80
   17b74:	ldr	r2, [r1, #2948]	; 0xb84
   17b78:	str	r2, [r0, #2948]	; 0xb84
   17b7c:	ldr	r2, [r1, #2948]	; 0xb84
   17b80:	str	r0, [r2, #2944]	; 0xb80
   17b84:	ldr	r0, [r3, #2948]	; 0xb84
   17b88:	str	r3, [r1, #2944]	; 0xb80
   17b8c:	str	r0, [r1, #2948]	; 0xb84
   17b90:	str	r1, [r0, #2944]	; 0xb80
   17b94:	ldr	r0, [r1, #2944]	; 0xb80
   17b98:	str	r1, [r0, #2948]	; 0xb84
   17b9c:	mov	r0, #0
   17ba0:	bx	lr

00017ba4 <flatcc_emitter_reset@@Base>:
   17ba4:	push	{r4, sl, fp, lr}
   17ba8:	add	fp, sp, #8
   17bac:	ldr	r1, [r0]
   17bb0:	cmp	r1, #0
   17bb4:	beq	17c6c <flatcc_emitter_reset@@Base+0xc8>
   17bb8:	mov	r4, r0
   17bbc:	add	r2, r1, #1472	; 0x5c0
   17bc0:	mov	r0, #1472	; 0x5c0
   17bc4:	mov	r3, #0
   17bc8:	stmib	r4, {r1, r2}
   17bcc:	str	r0, [r4, #12]
   17bd0:	str	r2, [r4, #16]
   17bd4:	str	r0, [r4, #20]
   17bd8:	movw	r0, #64064	; 0xfa40
   17bdc:	movt	r0, #65535	; 0xffff
   17be0:	str	r0, [r1, #2952]	; 0xb88
   17be4:	ldr	r2, [r4, #32]
   17be8:	ldr	r0, [r4, #24]
   17bec:	cmp	r2, #0
   17bf0:	moveq	r2, r0
   17bf4:	streq	r0, [r4, #32]
   17bf8:	str	r3, [r4, #24]
   17bfc:	add	r2, r2, r2, lsl #1
   17c00:	lsr	r2, r2, #2
   17c04:	add	r0, r2, r0, lsr #2
   17c08:	str	r0, [r4, #32]
   17c0c:	ldr	r2, [r4, #28]
   17c10:	cmp	r2, r0, lsl #1
   17c14:	bls	17c6c <flatcc_emitter_reset@@Base+0xc8>
   17c18:	mov	r2, r1
   17c1c:	ldr	r0, [r2, #2944]!	; 0xb80
   17c20:	cmp	r0, r1
   17c24:	popeq	{r4, sl, fp, pc}
   17c28:	ldr	r3, [r0, #2944]	; 0xb80
   17c2c:	str	r3, [r2]
   17c30:	ldr	r2, [r0, #2944]	; 0xb80
   17c34:	str	r1, [r2, #2948]	; 0xb84
   17c38:	bl	123ec <free@plt>
   17c3c:	ldr	r0, [r4, #28]
   17c40:	ldr	r1, [r4, #32]
   17c44:	sub	r0, r0, #2944	; 0xb80
   17c48:	cmp	r0, r1, lsl #1
   17c4c:	str	r0, [r4, #28]
   17c50:	bls	17c6c <flatcc_emitter_reset@@Base+0xc8>
   17c54:	ldr	r1, [r4, #4]
   17c58:	ldr	r3, [r4]
   17c5c:	mov	r2, r1
   17c60:	ldr	r0, [r2, #2944]!	; 0xb80
   17c64:	cmp	r0, r3
   17c68:	bne	17c28 <flatcc_emitter_reset@@Base+0x84>
   17c6c:	pop	{r4, sl, fp, pc}

00017c70 <flatcc_emitter_clear@@Base>:
   17c70:	push	{r4, r5, r6, sl, fp, lr}
   17c74:	add	fp, sp, #16
   17c78:	ldr	r5, [r0]
   17c7c:	cmp	r5, #0
   17c80:	beq	17cd0 <flatcc_emitter_clear@@Base+0x60>
   17c84:	mov	r4, r0
   17c88:	ldr	r0, [r5, #2948]	; 0xb84
   17c8c:	mov	r6, #0
   17c90:	str	r6, [r0, #2944]	; 0xb80
   17c94:	ldr	r0, [r5, #2944]	; 0xb80
   17c98:	cmp	r0, #0
   17c9c:	beq	17cb0 <flatcc_emitter_clear@@Base+0x40>
   17ca0:	mov	r5, r0
   17ca4:	ldr	r0, [r0, #2948]	; 0xb84
   17ca8:	bl	123ec <free@plt>
   17cac:	b	17c94 <flatcc_emitter_clear@@Base+0x24>
   17cb0:	mov	r0, r5
   17cb4:	bl	123ec <free@plt>
   17cb8:	vmov.i32	q8, #0	; 0x00000000
   17cbc:	add	r0, r4, #16
   17cc0:	vst1.32	{d16-d17}, [r0]
   17cc4:	mov	r0, #32
   17cc8:	vst1.32	{d16-d17}, [r4], r0
   17ccc:	str	r6, [r4]
   17cd0:	pop	{r4, r5, r6, sl, fp, pc}

00017cd4 <flatcc_emitter@@Base>:
   17cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd8:	add	fp, sp, #28
   17cdc:	sub	sp, sp, #4
   17ce0:	mov	r6, r0
   17ce4:	mov	r7, r1
   17ce8:	ldr	r0, [r0, #24]
   17cec:	ldr	r1, [fp, #8]
   17cf0:	mov	r4, r2
   17cf4:	cmn	r3, #1
   17cf8:	mov	r9, r6
   17cfc:	add	r0, r0, r1
   17d00:	str	r0, [r6, #24]
   17d04:	ble	17e58 <flatcc_emitter@@Base+0x184>
   17d08:	ldr	r0, [r9, #20]!
   17d0c:	cmp	r0, r1
   17d10:	bcs	17fb8 <flatcc_emitter@@Base+0x2e4>
   17d14:	mov	r8, #0
   17d18:	cmp	r4, #0
   17d1c:	beq	18010 <flatcc_emitter@@Base+0x33c>
   17d20:	movw	sl, #64064	; 0xfa40
   17d24:	movt	sl, #65535	; 0xffff
   17d28:	ldr	r8, [r7, #4]
   17d2c:	cmp	r8, #0
   17d30:	beq	17e44 <flatcc_emitter@@Base+0x170>
   17d34:	ldr	r9, [r7]
   17d38:	b	17d74 <flatcc_emitter@@Base+0xa0>
   17d3c:	mov	r5, r8
   17d40:	ldr	r0, [r6, #16]
   17d44:	mov	r1, r9
   17d48:	mov	r2, r5
   17d4c:	bl	123f8 <memcpy@plt>
   17d50:	ldr	r0, [r6, #16]
   17d54:	ldr	r1, [r6, #20]
   17d58:	add	r9, r9, r5
   17d5c:	subs	r8, r8, r5
   17d60:	add	r2, r0, r5
   17d64:	sub	r0, r1, r5
   17d68:	str	r2, [r6, #16]
   17d6c:	str	r0, [r6, #20]
   17d70:	beq	17e44 <flatcc_emitter@@Base+0x170>
   17d74:	cmp	r8, r0
   17d78:	mov	r5, r8
   17d7c:	bls	17d40 <flatcc_emitter@@Base+0x6c>
   17d80:	mov	r5, r0
   17d84:	cmp	r5, #0
   17d88:	beq	17dd4 <flatcc_emitter@@Base+0x100>
   17d8c:	b	17d40 <flatcc_emitter@@Base+0x6c>
   17d90:	ldr	r1, [r6]
   17d94:	str	r1, [r0, #2944]	; 0xb80
   17d98:	str	r5, [r0, #2948]	; 0xb84
   17d9c:	str	r0, [r1, #2948]	; 0xb84
   17da0:	str	r0, [r5, #2944]	; 0xb80
   17da4:	mov	r5, #2944	; 0xb80
   17da8:	str	r0, [r6, #4]
   17dac:	str	r0, [r6, #16]
   17db0:	str	r5, [r6, #20]
   17db4:	ldr	r1, [r0, #2948]	; 0xb84
   17db8:	ldr	r1, [r1, #2952]	; 0xb88
   17dbc:	add	r1, r1, #2944	; 0xb80
   17dc0:	str	r1, [r0, #2952]	; 0xb88
   17dc4:	cmp	r8, r5
   17dc8:	bls	17d3c <flatcc_emitter@@Base+0x68>
   17dcc:	cmp	r5, #0
   17dd0:	bne	17d40 <flatcc_emitter@@Base+0x6c>
   17dd4:	ldr	r5, [r6, #4]
   17dd8:	cmp	r5, #0
   17ddc:	beq	17df0 <flatcc_emitter@@Base+0x11c>
   17de0:	ldr	r0, [r5, #2944]	; 0xb80
   17de4:	ldr	r1, [r6]
   17de8:	cmp	r0, r1
   17dec:	bne	17da4 <flatcc_emitter@@Base+0xd0>
   17df0:	movw	r0, #2956	; 0xb8c
   17df4:	bl	12428 <malloc@plt>
   17df8:	cmp	r0, #0
   17dfc:	beq	17fc8 <flatcc_emitter@@Base+0x2f4>
   17e00:	ldr	r1, [r6, #28]
   17e04:	cmp	r5, #0
   17e08:	add	r1, r1, #2944	; 0xb80
   17e0c:	str	r1, [r6, #28]
   17e10:	bne	17d90 <flatcc_emitter@@Base+0xbc>
   17e14:	add	r1, r0, #1472	; 0x5c0
   17e18:	mov	r5, #1472	; 0x5c0
   17e1c:	str	r0, [r6]
   17e20:	stmib	r6, {r0, r1, r5}
   17e24:	str	r1, [r6, #16]
   17e28:	str	r5, [r6, #20]
   17e2c:	str	r0, [r0, #2944]	; 0xb80
   17e30:	str	r0, [r0, #2948]	; 0xb84
   17e34:	str	sl, [r0, #2952]	; 0xb88
   17e38:	cmp	r8, r5
   17e3c:	bhi	17dcc <flatcc_emitter@@Base+0xf8>
   17e40:	b	17d3c <flatcc_emitter@@Base+0x68>
   17e44:	subs	r4, r4, #1
   17e48:	add	r7, r7, #8
   17e4c:	bne	17d28 <flatcc_emitter@@Base+0x54>
   17e50:	mov	r8, #0
   17e54:	b	18010 <flatcc_emitter@@Base+0x33c>
   17e58:	ldr	r0, [r9, #12]!
   17e5c:	cmp	r0, r1
   17e60:	bcs	17fd0 <flatcc_emitter@@Base+0x2fc>
   17e64:	mov	r8, #0
   17e68:	cmp	r4, #0
   17e6c:	beq	18010 <flatcc_emitter@@Base+0x33c>
   17e70:	add	r0, r7, r4, lsl #3
   17e74:	ldr	sl, [r0, #-4]
   17e78:	sub	r1, r0, #8
   17e7c:	str	r1, [sp]
   17e80:	cmp	sl, #0
   17e84:	beq	17fa8 <flatcc_emitter@@Base+0x2d4>
   17e88:	ldr	r0, [sp]
   17e8c:	ldr	r0, [r0]
   17e90:	add	r7, r0, sl
   17e94:	ldr	r1, [r9]
   17e98:	cmp	sl, r1
   17e9c:	bhi	17edc <flatcc_emitter@@Base+0x208>
   17ea0:	b	17f78 <flatcc_emitter@@Base+0x2a4>
   17ea4:	ldr	r1, [r5, #2952]	; 0xb88
   17ea8:	sub	r1, r1, #2944	; 0xb80
   17eac:	str	r1, [r0, #2952]	; 0xb88
   17eb0:	mov	r1, #2944	; 0xb80
   17eb4:	add	r2, r0, #2944	; 0xb80
   17eb8:	str	r0, [r6]
   17ebc:	str	r2, [r6, #8]
   17ec0:	str	r1, [r6, #12]
   17ec4:	ldr	r2, [r0, #2944]	; 0xb80
   17ec8:	ldr	r2, [r2, #2952]	; 0xb88
   17ecc:	sub	r2, r2, #2944	; 0xb80
   17ed0:	str	r2, [r0, #2952]	; 0xb88
   17ed4:	cmp	sl, r1
   17ed8:	bls	17f78 <flatcc_emitter@@Base+0x2a4>
   17edc:	cmp	r1, #0
   17ee0:	mov	r5, r1
   17ee4:	bne	17f7c <flatcc_emitter@@Base+0x2a8>
   17ee8:	ldr	r5, [r6]
   17eec:	cmp	r5, #0
   17ef0:	beq	17f04 <flatcc_emitter@@Base+0x230>
   17ef4:	ldr	r0, [r5, #2948]	; 0xb84
   17ef8:	ldr	r1, [r6, #4]
   17efc:	cmp	r0, r1
   17f00:	bne	17ea4 <flatcc_emitter@@Base+0x1d0>
   17f04:	movw	r0, #2956	; 0xb8c
   17f08:	bl	12428 <malloc@plt>
   17f0c:	cmp	r0, #0
   17f10:	beq	17fc8 <flatcc_emitter@@Base+0x2f4>
   17f14:	ldr	r1, [r6, #28]
   17f18:	cmp	r5, #0
   17f1c:	add	r1, r1, #2944	; 0xb80
   17f20:	str	r1, [r6, #28]
   17f24:	beq	17f40 <flatcc_emitter@@Base+0x26c>
   17f28:	ldr	r1, [r6, #4]
   17f2c:	str	r5, [r0, #2944]	; 0xb80
   17f30:	str	r1, [r0, #2948]	; 0xb84
   17f34:	str	r0, [r5, #2948]	; 0xb84
   17f38:	str	r0, [r1, #2944]	; 0xb80
   17f3c:	b	17eb0 <flatcc_emitter@@Base+0x1dc>
   17f40:	add	r2, r0, #1472	; 0x5c0
   17f44:	mov	r1, #1472	; 0x5c0
   17f48:	str	r0, [r6]
   17f4c:	stmib	r6, {r0, r2}
   17f50:	str	r1, [r6, #12]
   17f54:	str	r2, [r6, #16]
   17f58:	movw	r2, #64064	; 0xfa40
   17f5c:	str	r1, [r6, #20]
   17f60:	str	r0, [r0, #2944]	; 0xb80
   17f64:	str	r0, [r0, #2948]	; 0xb84
   17f68:	movt	r2, #65535	; 0xffff
   17f6c:	str	r2, [r0, #2952]	; 0xb88
   17f70:	cmp	sl, r1
   17f74:	bhi	17edc <flatcc_emitter@@Base+0x208>
   17f78:	mov	r5, sl
   17f7c:	sub	r0, r1, r5
   17f80:	sub	r7, r7, r5
   17f84:	mov	r2, r5
   17f88:	str	r0, [r6, #12]
   17f8c:	mov	r1, r7
   17f90:	ldr	r0, [r6, #8]
   17f94:	sub	r0, r0, r5
   17f98:	str	r0, [r6, #8]
   17f9c:	bl	123f8 <memcpy@plt>
   17fa0:	subs	sl, sl, r5
   17fa4:	bne	17e94 <flatcc_emitter@@Base+0x1c0>
   17fa8:	ldr	r0, [sp]
   17fac:	subs	r4, r4, #1
   17fb0:	bne	17e74 <flatcc_emitter@@Base+0x1a0>
   17fb4:	b	18010 <flatcc_emitter@@Base+0x33c>
   17fb8:	ldr	r5, [r6, #16]
   17fbc:	add	r2, r5, r1
   17fc0:	str	r2, [r6, #16]
   17fc4:	b	17fdc <flatcc_emitter@@Base+0x308>
   17fc8:	mvn	r8, #0
   17fcc:	b	18010 <flatcc_emitter@@Base+0x33c>
   17fd0:	ldr	r2, [r6, #8]
   17fd4:	sub	r5, r2, r1
   17fd8:	str	r5, [r6, #8]
   17fdc:	sub	r0, r0, r1
   17fe0:	mov	r8, #0
   17fe4:	cmp	r4, #0
   17fe8:	str	r0, [r9]
   17fec:	beq	18010 <flatcc_emitter@@Base+0x33c>
   17ff0:	ldm	r7, {r1, r2}
   17ff4:	mov	r0, r5
   17ff8:	bl	123f8 <memcpy@plt>
   17ffc:	ldr	r0, [r7, #4]
   18000:	add	r7, r7, #8
   18004:	subs	r4, r4, #1
   18008:	add	r5, r5, r0
   1800c:	bne	17ff0 <flatcc_emitter@@Base+0x31c>
   18010:	mov	r0, r8
   18014:	sub	sp, fp, #28
   18018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001801c <flatcc_emitter_copy_buffer@@Base>:
   1801c:	push	{r4, r5, r6, sl, fp, lr}
   18020:	add	fp, sp, #16
   18024:	mov	r3, r2
   18028:	ldr	r2, [r0, #24]
   1802c:	mov	r5, #0
   18030:	cmp	r2, r3
   18034:	bhi	180bc <flatcc_emitter_copy_buffer@@Base+0xa0>
   18038:	mov	r4, r0
   1803c:	ldr	r0, [r0]
   18040:	cmp	r0, #0
   18044:	beq	180bc <flatcc_emitter_copy_buffer@@Base+0xa0>
   18048:	mov	r6, r1
   1804c:	ldr	r1, [r4, #4]
   18050:	cmp	r0, r1
   18054:	beq	180c4 <flatcc_emitter_copy_buffer@@Base+0xa8>
   18058:	ldr	r0, [r4, #12]
   1805c:	ldr	r1, [r4, #8]
   18060:	rsb	r5, r0, #2944	; 0xb80
   18064:	mov	r0, r6
   18068:	mov	r2, r5
   1806c:	bl	123f8 <memcpy@plt>
   18070:	ldm	r4, {r0, r1}
   18074:	add	r5, r6, r5
   18078:	ldr	r6, [r0, #2944]	; 0xb80
   1807c:	cmp	r6, r1
   18080:	beq	180a8 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18084:	mov	r0, r5
   18088:	mov	r1, r6
   1808c:	mov	r2, #2944	; 0xb80
   18090:	bl	123f8 <memcpy@plt>
   18094:	ldr	r6, [r6, #2944]	; 0xb80
   18098:	ldr	r0, [r4, #4]
   1809c:	add	r5, r5, #2944	; 0xb80
   180a0:	cmp	r6, r0
   180a4:	bne	18084 <flatcc_emitter_copy_buffer@@Base+0x68>
   180a8:	ldr	r0, [r4, #20]
   180ac:	mov	r1, r6
   180b0:	rsb	r2, r0, #2944	; 0xb80
   180b4:	mov	r0, r5
   180b8:	bl	123f8 <memcpy@plt>
   180bc:	mov	r0, r5
   180c0:	pop	{r4, r5, r6, sl, fp, pc}
   180c4:	ldr	r1, [r4, #8]
   180c8:	mov	r0, r6
   180cc:	bl	123f8 <memcpy@plt>
   180d0:	mov	r0, r6
   180d4:	pop	{r4, r5, r6, sl, fp, pc}

000180d8 <__libc_csu_init@@Base>:
   180d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   180dc:	mov	r7, r0
   180e0:	ldr	r6, [pc, #72]	; 18130 <__libc_csu_init@@Base+0x58>
   180e4:	ldr	r5, [pc, #72]	; 18134 <__libc_csu_init@@Base+0x5c>
   180e8:	add	r6, pc, r6
   180ec:	add	r5, pc, r5
   180f0:	sub	r6, r6, r5
   180f4:	mov	r8, r1
   180f8:	mov	r9, r2
   180fc:	bl	123c0 <printf@plt-0x20>
   18100:	asrs	r6, r6, #2
   18104:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18108:	mov	r4, #0
   1810c:	add	r4, r4, #1
   18110:	ldr	r3, [r5], #4
   18114:	mov	r2, r9
   18118:	mov	r1, r8
   1811c:	mov	r0, r7
   18120:	blx	r3
   18124:	cmp	r6, r4
   18128:	bne	1810c <__libc_csu_init@@Base+0x34>
   1812c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18130:	andeq	r1, r1, ip, lsl lr
   18134:	andeq	r1, r1, r4, lsl lr

00018138 <__libc_csu_fini@@Base>:
   18138:	bx	lr

Disassembly of section .fini:

0001813c <.fini>:
   1813c:	push	{r3, lr}
   18140:	pop	{r3, pc}
