
../repos/dvidelabs-flatcc-3b39ef7/test/reflection_test/reflection_test:     file format elf32-littlearm


Disassembly of section .init:

00010848 <.init>:
   10848:	push	{r3, lr}
   1084c:	bl	10970 <_start@@Base+0x3c>
   10850:	pop	{r3, pc}

Disassembly of section .plt:

00010854 <strcmp@plt-0x14>:
   10854:	push	{lr}		; (str lr, [sp, #-4]!)
   10858:	ldr	lr, [pc, #4]	; 10864 <strcmp@plt-0x4>
   1085c:	add	lr, pc, lr
   10860:	ldr	pc, [lr, #8]!
   10864:	muleq	r1, ip, r7

00010868 <strcmp@plt>:
   10868:	add	ip, pc, #0, 12
   1086c:	add	ip, ip, #69632	; 0x11000
   10870:	ldr	pc, [ip, #1948]!	; 0x79c

00010874 <printf@plt>:
   10874:	add	ip, pc, #0, 12
   10878:	add	ip, ip, #69632	; 0x11000
   1087c:	ldr	pc, [ip, #1940]!	; 0x794

00010880 <fopen@plt>:
   10880:	add	ip, pc, #0, 12
   10884:	add	ip, ip, #69632	; 0x11000
   10888:	ldr	pc, [ip, #1932]!	; 0x78c

0001088c <free@plt>:
   1088c:	add	ip, pc, #0, 12
   10890:	add	ip, ip, #69632	; 0x11000
   10894:	ldr	pc, [ip, #1924]!	; 0x784

00010898 <ftell@plt>:
   10898:	add	ip, pc, #0, 12
   1089c:	add	ip, ip, #69632	; 0x11000
   108a0:	ldr	pc, [ip, #1916]!	; 0x77c

000108a4 <rewind@plt>:
   108a4:	add	ip, pc, #0, 12
   108a8:	add	ip, ip, #69632	; 0x11000
   108ac:	ldr	pc, [ip, #1908]!	; 0x774

000108b0 <fwrite@plt>:
   108b0:	add	ip, pc, #0, 12
   108b4:	add	ip, ip, #69632	; 0x11000
   108b8:	ldr	pc, [ip, #1900]!	; 0x76c

000108bc <puts@plt>:
   108bc:	add	ip, pc, #0, 12
   108c0:	add	ip, ip, #69632	; 0x11000
   108c4:	ldr	pc, [ip, #1892]!	; 0x764

000108c8 <malloc@plt>:
   108c8:	add	ip, pc, #0, 12
   108cc:	add	ip, ip, #69632	; 0x11000
   108d0:	ldr	pc, [ip, #1884]!	; 0x75c

000108d4 <__libc_start_main@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #69632	; 0x11000
   108dc:	ldr	pc, [ip, #1876]!	; 0x754

000108e0 <__gmon_start__@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #69632	; 0x11000
   108e8:	ldr	pc, [ip, #1868]!	; 0x74c

000108ec <exit@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #69632	; 0x11000
   108f4:	ldr	pc, [ip, #1860]!	; 0x744

000108f8 <fclose@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #69632	; 0x11000
   10900:	ldr	pc, [ip, #1852]!	; 0x73c

00010904 <fread_unlocked@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #69632	; 0x11000
   1090c:	ldr	pc, [ip, #1844]!	; 0x734

00010910 <fseek@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #69632	; 0x11000
   10918:	ldr	pc, [ip, #1836]!	; 0x72c

0001091c <abort@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #69632	; 0x11000
   10924:	ldr	pc, [ip, #1828]!	; 0x724

00010928 <__assert_fail@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #69632	; 0x11000
   10930:	ldr	pc, [ip, #1820]!	; 0x71c

Disassembly of section .text:

00010934 <_start@@Base>:
   10934:	mov	fp, #0
   10938:	mov	lr, #0
   1093c:	pop	{r1}		; (ldr r1, [sp], #4)
   10940:	mov	r2, sp
   10944:	push	{r2}		; (str r2, [sp, #-4]!)
   10948:	push	{r0}		; (str r0, [sp, #-4]!)
   1094c:	ldr	ip, [pc, #16]	; 10964 <_start@@Base+0x30>
   10950:	push	{ip}		; (str ip, [sp, #-4]!)
   10954:	ldr	r0, [pc, #12]	; 10968 <_start@@Base+0x34>
   10958:	ldr	r3, [pc, #12]	; 1096c <_start@@Base+0x38>
   1095c:	bl	108d4 <__libc_start_main@plt>
   10960:	bl	1091c <abort@plt>
   10964:	andeq	r1, r1, ip, asr #7
   10968:	andeq	r1, r1, ip, ror #5
   1096c:	andeq	r1, r1, ip, ror #6
   10970:	ldr	r3, [pc, #20]	; 1098c <_start@@Base+0x58>
   10974:	ldr	r2, [pc, #20]	; 10990 <_start@@Base+0x5c>
   10978:	add	r3, pc, r3
   1097c:	ldr	r2, [r3, r2]
   10980:	cmp	r2, #0
   10984:	bxeq	lr
   10988:	b	108e0 <__gmon_start__@plt>
   1098c:	andeq	r1, r1, r0, lsl #13
   10990:	andeq	r0, r0, r4, asr r0
   10994:	ldr	r0, [pc, #24]	; 109b4 <_start@@Base+0x80>
   10998:	ldr	r3, [pc, #24]	; 109b8 <_start@@Base+0x84>
   1099c:	cmp	r3, r0
   109a0:	bxeq	lr
   109a4:	ldr	r3, [pc, #16]	; 109bc <_start@@Base+0x88>
   109a8:	cmp	r3, #0
   109ac:	bxeq	lr
   109b0:	bx	r3
   109b4:	andeq	r2, r2, r8, rrx
   109b8:	andeq	r2, r2, r8, rrx
   109bc:	andeq	r0, r0, r0
   109c0:	ldr	r0, [pc, #36]	; 109ec <_start@@Base+0xb8>
   109c4:	ldr	r1, [pc, #36]	; 109f0 <_start@@Base+0xbc>
   109c8:	sub	r1, r1, r0
   109cc:	asr	r1, r1, #2
   109d0:	add	r1, r1, r1, lsr #31
   109d4:	asrs	r1, r1, #1
   109d8:	bxeq	lr
   109dc:	ldr	r3, [pc, #16]	; 109f4 <_start@@Base+0xc0>
   109e0:	cmp	r3, #0
   109e4:	bxeq	lr
   109e8:	bx	r3
   109ec:	andeq	r2, r2, r8, rrx
   109f0:	andeq	r2, r2, r8, rrx
   109f4:	andeq	r0, r0, r0
   109f8:	push	{r4, lr}
   109fc:	ldr	r4, [pc, #24]	; 10a1c <_start@@Base+0xe8>
   10a00:	ldrb	r3, [r4]
   10a04:	cmp	r3, #0
   10a08:	popne	{r4, pc}
   10a0c:	bl	10994 <_start@@Base+0x60>
   10a10:	mov	r3, #1
   10a14:	strb	r3, [r4]
   10a18:	pop	{r4, pc}
   10a1c:	andeq	r2, r2, r8, rrx
   10a20:	b	109c0 <_start@@Base+0x8c>

00010a24 <test_schema@@Base>:
   10a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a28:	add	fp, sp, #28
   10a2c:	sub	sp, sp, #4
   10a30:	ldr	r1, [pc, #1712]	; 110e8 <test_schema@@Base+0x6c4>
   10a34:	add	r1, pc, r1
   10a38:	bl	10880 <fopen@plt>
   10a3c:	cmp	r0, #0
   10a40:	beq	10c7c <test_schema@@Base+0x258>
   10a44:	mov	r1, #0
   10a48:	mov	r2, #2
   10a4c:	mov	r5, r0
   10a50:	bl	10910 <fseek@plt>
   10a54:	mov	r0, r5
   10a58:	bl	10898 <ftell@plt>
   10a5c:	mov	r6, r0
   10a60:	movw	r0, #10000	; 0x2710
   10a64:	cmp	r6, r0
   10a68:	bhi	10c74 <test_schema@@Base+0x250>
   10a6c:	mov	r0, r5
   10a70:	bl	108a4 <rewind@plt>
   10a74:	cmp	r6, #0
   10a78:	mov	r0, r6
   10a7c:	movweq	r0, #1
   10a80:	bl	108c8 <malloc@plt>
   10a84:	cmp	r0, #0
   10a88:	beq	10c74 <test_schema@@Base+0x250>
   10a8c:	mov	r8, r0
   10a90:	mov	r1, #0
   10a94:	mov	r4, r1
   10a98:	add	r0, r8, r1
   10a9c:	sub	r2, r6, r1
   10aa0:	mov	r1, #1
   10aa4:	mov	r3, r5
   10aa8:	bl	10904 <fread_unlocked@plt>
   10aac:	add	r1, r0, r4
   10ab0:	cmp	r0, #0
   10ab4:	bne	10a94 <test_schema@@Base+0x70>
   10ab8:	mov	r0, r5
   10abc:	bl	108f8 <fclose@plt>
   10ac0:	cmp	r6, r4
   10ac4:	bne	10c98 <test_schema@@Base+0x274>
   10ac8:	ldr	r0, [r8, #4]
   10acc:	movw	r1, #17986	; 0x4642
   10ad0:	movt	r1, #21314	; 0x5342
   10ad4:	cmp	r0, r1
   10ad8:	bne	11028 <test_schema@@Base+0x604>
   10adc:	ldr	r1, [r8]
   10ae0:	mov	r0, r8
   10ae4:	ldr	r2, [r0, r1]!
   10ae8:	mov	r1, r0
   10aec:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   10af0:	cmp	r2, #5
   10af4:	bls	1101c <test_schema@@Base+0x5f8>
   10af8:	ldrh	r1, [r1, #4]
   10afc:	cmp	r1, #0
   10b00:	beq	1101c <test_schema@@Base+0x5f8>
   10b04:	ldr	r1, [r0, r1]!
   10b08:	ldr	r1, [r0, r1]!
   10b0c:	cmp	r1, #0
   10b10:	beq	10c58 <test_schema@@Base+0x234>
   10b14:	ldr	r6, [pc, #1508]	; 11100 <test_schema@@Base+0x6dc>
   10b18:	add	sl, r0, #4
   10b1c:	mov	r5, #0
   10b20:	mov	r7, sl
   10b24:	add	r6, pc, r6
   10b28:	ldr	r0, [r7]
   10b2c:	ldr	r1, [r7, r0]
   10b30:	sub	r1, r0, r1
   10b34:	add	r1, r7, r1
   10b38:	ldrh	r2, [r1]
   10b3c:	cmp	r2, #6
   10b40:	bcc	10fdc <test_schema@@Base+0x5b8>
   10b44:	ldrh	r1, [r1, #4]
   10b48:	cmp	r1, #0
   10b4c:	beq	10fdc <test_schema@@Base+0x5b8>
   10b50:	add	r2, r0, r1
   10b54:	ldr	r2, [r7, r2]
   10b58:	add	r0, r2, r0
   10b5c:	add	r0, r0, r1
   10b60:	mov	r1, r5
   10b64:	add	r0, r7, r0
   10b68:	add	r2, r0, #4
   10b6c:	mov	r0, r6
   10b70:	bl	10874 <printf@plt>
   10b74:	ldr	r4, [sl, #-4]
   10b78:	add	r5, r5, #1
   10b7c:	add	r7, r7, #4
   10b80:	cmp	r5, r4
   10b84:	bcc	10b28 <test_schema@@Base+0x104>
   10b88:	cmp	r4, #0
   10b8c:	beq	10c58 <test_schema@@Base+0x234>
   10b90:	mov	r6, #0
   10b94:	subs	r5, r4, #1
   10b98:	beq	10c10 <test_schema@@Base+0x1ec>
   10b9c:	ldr	r9, [pc, #1376]	; 11104 <test_schema@@Base+0x6e0>
   10ba0:	add	r9, pc, r9
   10ba4:	sub	r0, r5, r6
   10ba8:	add	r7, r6, r0, lsr #1
   10bac:	cmp	r4, r7
   10bb0:	bls	10ffc <test_schema@@Base+0x5d8>
   10bb4:	mov	r0, sl
   10bb8:	ldr	r1, [r0, r7, lsl #2]!
   10bbc:	ldr	r2, [r0, r1]!
   10bc0:	mov	r1, r0
   10bc4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   10bc8:	cmp	r2, #6
   10bcc:	bcc	10fdc <test_schema@@Base+0x5b8>
   10bd0:	ldrh	r1, [r1, #4]
   10bd4:	cmp	r1, #0
   10bd8:	beq	10fdc <test_schema@@Base+0x5b8>
   10bdc:	ldr	r1, [r0, r1]!
   10be0:	add	r0, r0, r1
   10be4:	mov	r1, r9
   10be8:	add	r0, r0, #4
   10bec:	bl	10868 <strcmp@plt>
   10bf0:	cmp	r0, #0
   10bf4:	movpl	r5, r7
   10bf8:	addmi	r6, r7, #1
   10bfc:	cmp	r5, r6
   10c00:	bhi	10ba4 <test_schema@@Base+0x180>
   10c04:	bne	10c58 <test_schema@@Base+0x234>
   10c08:	cmp	r4, r6
   10c0c:	bls	10ffc <test_schema@@Base+0x5d8>
   10c10:	ldr	r0, [sl, r6, lsl #2]!
   10c14:	ldr	r0, [sl, r0]!
   10c18:	mov	r5, sl
   10c1c:	ldrh	r7, [r5, -r0]!
   10c20:	cmp	r7, #6
   10c24:	bcc	10fdc <test_schema@@Base+0x5b8>
   10c28:	ldrh	r0, [r5, #4]
   10c2c:	cmp	r0, #0
   10c30:	beq	10fdc <test_schema@@Base+0x5b8>
   10c34:	mov	r1, sl
   10c38:	ldr	r0, [r1, r0]!
   10c3c:	add	r0, r1, r0
   10c40:	ldr	r1, [pc, #1216]	; 11108 <test_schema@@Base+0x6e4>
   10c44:	add	r0, r0, #4
   10c48:	add	r1, pc, r1
   10c4c:	bl	10868 <strcmp@plt>
   10c50:	cmp	r0, #0
   10c54:	beq	10ca4 <test_schema@@Base+0x280>
   10c58:	ldr	r0, [pc, #1196]	; 1110c <test_schema@@Base+0x6e8>
   10c5c:	add	r0, pc, r0
   10c60:	bl	108bc <puts@plt>
   10c64:	mvn	r5, #0
   10c68:	mov	r0, r8
   10c6c:	bl	1088c <free@plt>
   10c70:	b	10c8c <test_schema@@Base+0x268>
   10c74:	mov	r0, r5
   10c78:	bl	108f8 <fclose@plt>
   10c7c:	ldr	r0, [pc, #1128]	; 110ec <test_schema@@Base+0x6c8>
   10c80:	add	r0, pc, r0
   10c84:	bl	108bc <puts@plt>
   10c88:	mvn	r5, #0
   10c8c:	mov	r0, r5
   10c90:	sub	sp, fp, #28
   10c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c98:	mov	r0, r8
   10c9c:	bl	1088c <free@plt>
   10ca0:	b	10c7c <test_schema@@Base+0x258>
   10ca4:	cmp	r4, r6
   10ca8:	bls	10ffc <test_schema@@Base+0x5d8>
   10cac:	cmp	r7, #8
   10cb0:	bcc	11048 <test_schema@@Base+0x624>
   10cb4:	ldrh	r0, [r5, #6]
   10cb8:	cmp	r0, #0
   10cbc:	beq	11048 <test_schema@@Base+0x624>
   10cc0:	ldr	r0, [sl, r0]!
   10cc4:	ldr	r1, [pc, #1092]	; 11110 <test_schema@@Base+0x6ec>
   10cc8:	add	r0, sl, r0
   10ccc:	add	r1, pc, r1
   10cd0:	add	r5, r0, #4
   10cd4:	mov	r0, r5
   10cd8:	bl	111a0 <test_schema@@Base+0x77c>
   10cdc:	cmn	r0, #1
   10ce0:	beq	10f64 <test_schema@@Base+0x540>
   10ce4:	ldr	r1, [r5, #-4]
   10ce8:	cmp	r1, r0
   10cec:	bls	11088 <test_schema@@Base+0x664>
   10cf0:	mov	r4, r5
   10cf4:	ldr	r0, [r4, r0, lsl #2]!
   10cf8:	ldr	r1, [r4, r0]!
   10cfc:	mov	r0, r4
   10d00:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10d04:	cmp	r1, #14
   10d08:	bcc	10ee8 <test_schema@@Base+0x4c4>
   10d0c:	ldrh	r1, [r0, #12]
   10d10:	cmp	r1, #0
   10d14:	beq	10ee8 <test_schema@@Base+0x4c4>
   10d18:	mov	r2, r4
   10d1c:	ldr	r1, [r2, r1]!
   10d20:	ldr	r2, [r2, #4]
   10d24:	eor	r1, r1, #150	; 0x96
   10d28:	orrs	r1, r1, r2
   10d2c:	bne	10ee8 <test_schema@@Base+0x4c4>
   10d30:	ldrh	r0, [r0, #6]
   10d34:	cmp	r0, #0
   10d38:	beq	110a8 <test_schema@@Base+0x684>
   10d3c:	ldr	r0, [r4, r0]!
   10d40:	adds	r0, r4, r0
   10d44:	beq	110c8 <test_schema@@Base+0x6a4>
   10d48:	ldr	r2, [r0]
   10d4c:	mov	r1, r0
   10d50:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   10d54:	cmp	r2, #6
   10d58:	bcc	10f88 <test_schema@@Base+0x564>
   10d5c:	ldrh	r1, [r1, #4]
   10d60:	cmp	r1, #0
   10d64:	beq	10f88 <test_schema@@Base+0x564>
   10d68:	ldrb	r0, [r0, r1]
   10d6c:	cmp	r0, #5
   10d70:	bne	10f88 <test_schema@@Base+0x564>
   10d74:	ldr	r1, [pc, #940]	; 11128 <test_schema@@Base+0x704>
   10d78:	mov	r0, r5
   10d7c:	add	r1, pc, r1
   10d80:	bl	111a0 <test_schema@@Base+0x77c>
   10d84:	cmn	r0, #1
   10d88:	beq	10fa0 <test_schema@@Base+0x57c>
   10d8c:	ldr	r1, [r5, #-4]
   10d90:	cmp	r1, r0
   10d94:	bls	11088 <test_schema@@Base+0x664>
   10d98:	mov	r1, r5
   10d9c:	ldr	r0, [r1, r0, lsl #2]!
   10da0:	ldr	r2, [r1, r0]!
   10da4:	mov	r0, r1
   10da8:	ldrh	r2, [r0, -r2]!	; <UNPREDICTABLE>
   10dac:	cmp	r2, #8
   10db0:	bcc	110a8 <test_schema@@Base+0x684>
   10db4:	ldrh	r0, [r0, #6]
   10db8:	cmp	r0, #0
   10dbc:	beq	110a8 <test_schema@@Base+0x684>
   10dc0:	ldr	r0, [r1, r0]!
   10dc4:	adds	r0, r1, r0
   10dc8:	beq	110c8 <test_schema@@Base+0x6a4>
   10dcc:	ldr	r2, [r0]
   10dd0:	mov	r1, r0
   10dd4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   10dd8:	cmp	r2, #6
   10ddc:	bcc	10f94 <test_schema@@Base+0x570>
   10de0:	ldrh	r3, [r1, #4]
   10de4:	cmp	r3, #0
   10de8:	beq	10f94 <test_schema@@Base+0x570>
   10dec:	ldrb	r3, [r0, r3]
   10df0:	cmp	r3, #15
   10df4:	bne	10f94 <test_schema@@Base+0x570>
   10df8:	mvn	r3, #0
   10dfc:	cmp	r2, #10
   10e00:	bcc	10e10 <test_schema@@Base+0x3ec>
   10e04:	ldrh	r1, [r1, #8]
   10e08:	cmp	r1, #0
   10e0c:	ldrne	r3, [r0, r1]
   10e10:	cmp	r3, r6
   10e14:	bne	10fac <test_schema@@Base+0x588>
   10e18:	ldr	r1, [pc, #792]	; 11138 <test_schema@@Base+0x714>
   10e1c:	mov	r0, r5
   10e20:	add	r1, pc, r1
   10e24:	bl	111a0 <test_schema@@Base+0x77c>
   10e28:	cmn	r0, #1
   10e2c:	beq	10fc4 <test_schema@@Base+0x5a0>
   10e30:	ldr	r1, [r5, #-4]
   10e34:	cmp	r1, r0
   10e38:	bls	11088 <test_schema@@Base+0x664>
   10e3c:	ldr	r0, [r5, r0, lsl #2]!
   10e40:	ldr	r1, [r5, r0]!
   10e44:	mov	r0, r5
   10e48:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10e4c:	cmp	r1, #8
   10e50:	bcc	110a8 <test_schema@@Base+0x684>
   10e54:	ldrh	r0, [r0, #6]
   10e58:	cmp	r0, #0
   10e5c:	beq	110a8 <test_schema@@Base+0x684>
   10e60:	ldr	r0, [r5, r0]!
   10e64:	adds	r0, r5, r0
   10e68:	beq	110c8 <test_schema@@Base+0x6a4>
   10e6c:	ldr	r2, [r0]
   10e70:	mov	r1, r0
   10e74:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   10e78:	cmp	r2, #6
   10e7c:	bcc	10fb8 <test_schema@@Base+0x594>
   10e80:	ldrh	r3, [r1, #4]
   10e84:	cmp	r3, #0
   10e88:	beq	10fb8 <test_schema@@Base+0x594>
   10e8c:	ldrb	r3, [r0, r3]
   10e90:	cmp	r3, #14
   10e94:	bne	10fb8 <test_schema@@Base+0x594>
   10e98:	cmp	r2, #8
   10e9c:	bcc	10fd0 <test_schema@@Base+0x5ac>
   10ea0:	ldrh	r3, [r1, #6]
   10ea4:	cmp	r3, #0
   10ea8:	beq	10fd0 <test_schema@@Base+0x5ac>
   10eac:	ldrb	r3, [r0, r3]
   10eb0:	cmp	r3, #15
   10eb4:	bne	10fd0 <test_schema@@Base+0x5ac>
   10eb8:	mvn	r3, #0
   10ebc:	cmp	r2, #10
   10ec0:	bcc	10ed0 <test_schema@@Base+0x4ac>
   10ec4:	ldrh	r1, [r1, #8]
   10ec8:	cmp	r1, #0
   10ecc:	ldrne	r3, [r0, r1]
   10ed0:	mov	r5, #0
   10ed4:	cmp	r3, r6
   10ed8:	beq	10c68 <test_schema@@Base+0x244>
   10edc:	ldr	r0, [pc, #612]	; 11148 <test_schema@@Base+0x724>
   10ee0:	add	r0, pc, r0
   10ee4:	b	10c60 <test_schema@@Base+0x23c>
   10ee8:	ldr	r0, [pc, #552]	; 11118 <test_schema@@Base+0x6f4>
   10eec:	add	r0, pc, r0
   10ef0:	bl	108bc <puts@plt>
   10ef4:	ldr	r1, [r4]
   10ef8:	mov	r0, r4
   10efc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10f00:	cmp	r1, #6
   10f04:	bcc	11068 <test_schema@@Base+0x644>
   10f08:	ldrh	r0, [r0, #4]
   10f0c:	cmp	r0, #0
   10f10:	beq	11068 <test_schema@@Base+0x644>
   10f14:	mov	r1, r4
   10f18:	ldr	r0, [r1, r0]!
   10f1c:	add	r0, r1, r0
   10f20:	add	r1, r0, #4
   10f24:	ldr	r0, [pc, #496]	; 1111c <test_schema@@Base+0x6f8>
   10f28:	add	r0, pc, r0
   10f2c:	bl	10874 <printf@plt>
   10f30:	ldr	r1, [r4]
   10f34:	mov	r0, r4
   10f38:	mov	r2, #0
   10f3c:	mov	r3, #0
   10f40:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   10f44:	cmp	r1, #14
   10f48:	bcc	10f78 <test_schema@@Base+0x554>
   10f4c:	ldrh	r0, [r0, #12]
   10f50:	cmp	r0, #0
   10f54:	beq	10f70 <test_schema@@Base+0x54c>
   10f58:	ldr	r2, [r4, r0]!
   10f5c:	ldr	r3, [r4, #4]
   10f60:	b	10f78 <test_schema@@Base+0x554>
   10f64:	ldr	r0, [pc, #424]	; 11114 <test_schema@@Base+0x6f0>
   10f68:	add	r0, pc, r0
   10f6c:	b	10c60 <test_schema@@Base+0x23c>
   10f70:	mov	r2, #0
   10f74:	mov	r3, #0
   10f78:	ldr	r0, [pc, #416]	; 11120 <test_schema@@Base+0x6fc>
   10f7c:	add	r0, pc, r0
   10f80:	bl	10874 <printf@plt>
   10f84:	b	10c64 <test_schema@@Base+0x240>
   10f88:	ldr	r0, [pc, #404]	; 11124 <test_schema@@Base+0x700>
   10f8c:	add	r0, pc, r0
   10f90:	b	10c60 <test_schema@@Base+0x23c>
   10f94:	ldr	r0, [pc, #404]	; 11130 <test_schema@@Base+0x70c>
   10f98:	add	r0, pc, r0
   10f9c:	b	10c60 <test_schema@@Base+0x23c>
   10fa0:	ldr	r0, [pc, #388]	; 1112c <test_schema@@Base+0x708>
   10fa4:	add	r0, pc, r0
   10fa8:	b	10c60 <test_schema@@Base+0x23c>
   10fac:	ldr	r0, [pc, #384]	; 11134 <test_schema@@Base+0x710>
   10fb0:	add	r0, pc, r0
   10fb4:	b	10c60 <test_schema@@Base+0x23c>
   10fb8:	ldr	r0, [pc, #384]	; 11140 <test_schema@@Base+0x71c>
   10fbc:	add	r0, pc, r0
   10fc0:	b	10c60 <test_schema@@Base+0x23c>
   10fc4:	ldr	r0, [pc, #368]	; 1113c <test_schema@@Base+0x718>
   10fc8:	add	r0, pc, r0
   10fcc:	b	10c60 <test_schema@@Base+0x23c>
   10fd0:	ldr	r0, [pc, #364]	; 11144 <test_schema@@Base+0x720>
   10fd4:	add	r0, pc, r0
   10fd8:	b	10c60 <test_schema@@Base+0x23c>
   10fdc:	ldr	r0, [pc, #360]	; 1114c <test_schema@@Base+0x728>
   10fe0:	ldr	r1, [pc, #360]	; 11150 <test_schema@@Base+0x72c>
   10fe4:	ldr	r3, [pc, #360]	; 11154 <test_schema@@Base+0x730>
   10fe8:	mov	r2, #218	; 0xda
   10fec:	add	r0, pc, r0
   10ff0:	add	r1, pc, r1
   10ff4:	add	r3, pc, r3
   10ff8:	bl	10928 <__assert_fail@plt>
   10ffc:	ldr	r0, [pc, #340]	; 11158 <test_schema@@Base+0x734>
   11000:	ldr	r1, [pc, #340]	; 1115c <test_schema@@Base+0x738>
   11004:	ldr	r3, [pc, #340]	; 11160 <test_schema@@Base+0x73c>
   11008:	mov	r2, #215	; 0xd7
   1100c:	add	r0, pc, r0
   11010:	add	r1, pc, r1
   11014:	add	r3, pc, r3
   11018:	bl	10928 <__assert_fail@plt>
   1101c:	ldr	r0, [pc, #204]	; 110f0 <test_schema@@Base+0x6cc>
   11020:	add	r0, pc, r0
   11024:	b	11030 <test_schema@@Base+0x60c>
   11028:	ldr	r0, [pc, #196]	; 110f4 <test_schema@@Base+0x6d0>
   1102c:	add	r0, pc, r0
   11030:	ldr	r1, [pc, #192]	; 110f8 <test_schema@@Base+0x6d4>
   11034:	ldr	r3, [pc, #192]	; 110fc <test_schema@@Base+0x6d8>
   11038:	mov	r2, #237	; 0xed
   1103c:	add	r1, pc, r1
   11040:	add	r3, pc, r3
   11044:	bl	10928 <__assert_fail@plt>
   11048:	ldr	r0, [pc, #276]	; 11164 <test_schema@@Base+0x740>
   1104c:	ldr	r1, [pc, #276]	; 11168 <test_schema@@Base+0x744>
   11050:	ldr	r3, [pc, #276]	; 1116c <test_schema@@Base+0x748>
   11054:	mov	r2, #224	; 0xe0
   11058:	add	r0, pc, r0
   1105c:	add	r1, pc, r1
   11060:	add	r3, pc, r3
   11064:	bl	10928 <__assert_fail@plt>
   11068:	ldr	r0, [pc, #268]	; 1117c <test_schema@@Base+0x758>
   1106c:	ldr	r1, [pc, #268]	; 11180 <test_schema@@Base+0x75c>
   11070:	ldr	r3, [pc, #268]	; 11184 <test_schema@@Base+0x760>
   11074:	mov	r2, #195	; 0xc3
   11078:	add	r0, pc, r0
   1107c:	add	r1, pc, r1
   11080:	add	r3, pc, r3
   11084:	bl	10928 <__assert_fail@plt>
   11088:	ldr	r0, [pc, #224]	; 11170 <test_schema@@Base+0x74c>
   1108c:	ldr	r1, [pc, #224]	; 11174 <test_schema@@Base+0x750>
   11090:	ldr	r3, [pc, #224]	; 11178 <test_schema@@Base+0x754>
   11094:	mov	r2, #192	; 0xc0
   11098:	add	r0, pc, r0
   1109c:	add	r1, pc, r1
   110a0:	add	r3, pc, r3
   110a4:	bl	10928 <__assert_fail@plt>
   110a8:	ldr	r0, [pc, #216]	; 11188 <test_schema@@Base+0x764>
   110ac:	ldr	r1, [pc, #216]	; 1118c <test_schema@@Base+0x768>
   110b0:	ldr	r3, [pc, #216]	; 11190 <test_schema@@Base+0x76c>
   110b4:	mov	r2, #201	; 0xc9
   110b8:	add	r0, pc, r0
   110bc:	add	r1, pc, r1
   110c0:	add	r3, pc, r3
   110c4:	bl	10928 <__assert_fail@plt>
   110c8:	ldr	r0, [pc, #196]	; 11194 <test_schema@@Base+0x770>
   110cc:	ldr	r1, [pc, #196]	; 11198 <test_schema@@Base+0x774>
   110d0:	ldr	r3, [pc, #196]	; 1119c <test_schema@@Base+0x778>
   110d4:	mov	r2, #147	; 0x93
   110d8:	add	r0, pc, r0
   110dc:	add	r1, pc, r1
   110e0:	add	r3, pc, r3
   110e4:	bl	10928 <__assert_fail@plt>
   110e8:	andeq	r0, r0, sl, asr sl
   110ec:	andeq	r0, r0, r3, ror #22
   110f0:	andeq	r0, r0, r9, asr r5
   110f4:	andeq	r0, r0, r5, ror #8
   110f8:	andeq	r0, r0, fp, ror r4
   110fc:	andeq	r0, r0, ip, ror #9
   11100:			; <UNDEFINED> instruction: 0x000008b0
   11104:	andeq	r0, r0, r7, asr #16
   11108:	muleq	r0, pc, r7	; <UNPREDICTABLE>
   1110c:	andeq	r0, r0, r5, ror #25
   11110:	andeq	r0, r0, r2, lsr r7
   11114:	andeq	r0, r0, pc, lsr #19
   11118:	andeq	r0, r0, r8, lsl #20
   1111c:	ldrdeq	r0, [r0], -fp
   11120:	muleq	r0, r7, r4
   11124:	andeq	r0, r0, lr, asr #18
   11128:	muleq	r0, sp, r6
   1112c:	andeq	r0, r0, r0, lsr #18
   11130:	andeq	r0, r0, r5, lsl r9
   11134:	andeq	r0, r0, r6, ror #17
   11138:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1113c:			; <UNDEFINED> instruction: 0x000008b4
   11140:	muleq	r0, sl, r8
   11144:	andeq	r0, r0, r4, asr r8
   11148:	andeq	r0, r0, r0, lsr #18
   1114c:	andeq	r0, r0, sp, lsl #11
   11150:	andeq	r0, r0, r7, asr #9
   11154:	andeq	r0, r0, r6, lsr #11
   11158:	ldrdeq	r0, [r0], -r5
   1115c:	andeq	r0, r0, r7, lsr #9
   11160:	andeq	r0, r0, r4, lsl #12
   11164:	andeq	r0, r0, r1, lsr #10
   11168:	andeq	r0, r0, fp, asr r4
   1116c:	andeq	r0, r0, ip, lsl #12
   11170:	andeq	r0, r0, r9, asr #10
   11174:	andeq	r0, r0, fp, lsl r4
   11178:	andeq	r0, r0, r7, lsl r6
   1117c:	andeq	r0, r0, r1, lsl #10
   11180:	andeq	r0, r0, fp, lsr r4
   11184:	andeq	r0, r0, r8, lsl #13
   11188:	andeq	r0, r0, r1, asr #9
   1118c:	strdeq	r0, [r0], -fp
   11190:	andeq	r0, r0, sp, lsl #13
   11194:			; <UNDEFINED> instruction: 0x000003b9
   11198:	ldrdeq	r0, [r0], -fp
   1119c:			; <UNDEFINED> instruction: 0x000006b5
   111a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   111a4:	add	fp, sp, #24
   111a8:	mvn	r4, #0
   111ac:	cmp	r0, #0
   111b0:	beq	11280 <test_schema@@Base+0x85c>
   111b4:	ldr	r7, [r0, #-4]
   111b8:	mov	r9, r0
   111bc:	cmp	r7, #0
   111c0:	beq	11280 <test_schema@@Base+0x85c>
   111c4:	mov	r8, r1
   111c8:	mov	r4, #0
   111cc:	subs	r5, r7, #1
   111d0:	beq	11240 <test_schema@@Base+0x81c>
   111d4:	sub	r0, r5, r4
   111d8:	add	r6, r4, r0, lsr #1
   111dc:	cmp	r7, r6
   111e0:	bls	112b4 <test_schema@@Base+0x890>
   111e4:	mov	r0, r9
   111e8:	ldr	r1, [r0, r6, lsl #2]!
   111ec:	ldr	r2, [r0, r1]!
   111f0:	mov	r1, r0
   111f4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   111f8:	cmp	r2, #6
   111fc:	bcc	11294 <test_schema@@Base+0x870>
   11200:	ldrh	r1, [r1, #4]
   11204:	cmp	r1, #0
   11208:	beq	11294 <test_schema@@Base+0x870>
   1120c:	ldr	r1, [r0, r1]!
   11210:	add	r0, r0, r1
   11214:	mov	r1, r8
   11218:	add	r0, r0, #4
   1121c:	bl	10868 <strcmp@plt>
   11220:	cmp	r0, #0
   11224:	movpl	r5, r6
   11228:	addmi	r4, r6, #1
   1122c:	cmp	r5, r4
   11230:	bhi	111d4 <test_schema@@Base+0x7b0>
   11234:	bne	11288 <test_schema@@Base+0x864>
   11238:	cmp	r7, r4
   1123c:	bls	112b4 <test_schema@@Base+0x890>
   11240:	ldr	r0, [r9, r4, lsl #2]!
   11244:	ldr	r1, [r9, r0]!
   11248:	mov	r0, r9
   1124c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11250:	cmp	r1, #6
   11254:	bcc	11294 <test_schema@@Base+0x870>
   11258:	ldrh	r0, [r0, #4]
   1125c:	cmp	r0, #0
   11260:	beq	11294 <test_schema@@Base+0x870>
   11264:	ldr	r0, [r9, r0]!
   11268:	mov	r1, r8
   1126c:	add	r0, r9, r0
   11270:	add	r0, r0, #4
   11274:	bl	10868 <strcmp@plt>
   11278:	cmp	r0, #0
   1127c:	mvnne	r4, #0
   11280:	mov	r0, r4
   11284:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11288:	mvn	r4, #0
   1128c:	mov	r0, r4
   11290:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11294:	ldr	r0, [pc, #68]	; 112e0 <test_schema@@Base+0x8bc>
   11298:	ldr	r1, [pc, #68]	; 112e4 <test_schema@@Base+0x8c0>
   1129c:	ldr	r3, [pc, #68]	; 112e8 <test_schema@@Base+0x8c4>
   112a0:	mov	r2, #195	; 0xc3
   112a4:	add	r0, pc, r0
   112a8:	add	r1, pc, r1
   112ac:	add	r3, pc, r3
   112b0:	bl	10928 <__assert_fail@plt>
   112b4:	ldr	r0, [pc, #24]	; 112d4 <test_schema@@Base+0x8b0>
   112b8:	ldr	r1, [pc, #24]	; 112d8 <test_schema@@Base+0x8b4>
   112bc:	ldr	r3, [pc, #24]	; 112dc <test_schema@@Base+0x8b8>
   112c0:	mov	r2, #192	; 0xc0
   112c4:	add	r0, pc, r0
   112c8:	add	r1, pc, r1
   112cc:	add	r3, pc, r3
   112d0:	bl	10928 <__assert_fail@plt>
   112d4:	andeq	r0, r0, sp, lsl r3
   112d8:	andeq	r0, r0, pc, ror #3
   112dc:	andeq	r0, r0, fp, ror #7
   112e0:	ldrdeq	r0, [r0], -r5
   112e4:	andeq	r0, r0, pc, lsl #4
   112e8:	andeq	r0, r0, ip, asr r4

000112ec <main@@Base>:
   112ec:	push	{fp, lr}
   112f0:	mov	fp, sp
   112f4:	sub	r2, r0, #1
   112f8:	cmp	r2, #2
   112fc:	bcs	11334 <main@@Base+0x48>
   11300:	cmp	r0, #2
   11304:	bne	11320 <main@@Base+0x34>
   11308:	ldr	r0, [r1, #4]
   1130c:	ldr	r1, [pc, #76]	; 11360 <main@@Base+0x74>
   11310:	ldr	r1, [pc, r1]
   11314:	str	r0, [r1]
   11318:	pop	{fp, lr}
   1131c:	b	10a24 <test_schema@@Base>
   11320:	ldr	r0, [pc, #52]	; 1135c <main@@Base+0x70>
   11324:	ldr	r0, [pc, r0]
   11328:	ldr	r0, [r0]
   1132c:	pop	{fp, lr}
   11330:	b	10a24 <test_schema@@Base>
   11334:	ldr	r0, [pc, #40]	; 11364 <main@@Base+0x78>
   11338:	mov	r1, #64	; 0x40
   1133c:	mov	r2, #1
   11340:	ldr	r0, [pc, r0]
   11344:	ldr	r3, [r0]
   11348:	ldr	r0, [pc, #24]	; 11368 <main@@Base+0x7c>
   1134c:	add	r0, pc, r0
   11350:	bl	108b0 <fwrite@plt>
   11354:	mov	r0, #1
   11358:	bl	108ec <exit@plt>
   1135c:	andeq	r0, r1, ip, lsr #26
   11360:	andeq	r0, r1, r0, asr #26
   11364:	andeq	r0, r1, r8, lsl #26
   11368:	andeq	r0, r0, r1, lsl #2

0001136c <__libc_csu_init@@Base>:
   1136c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11370:	mov	r7, r0
   11374:	ldr	r6, [pc, #72]	; 113c4 <__libc_csu_init@@Base+0x58>
   11378:	ldr	r5, [pc, #72]	; 113c8 <__libc_csu_init@@Base+0x5c>
   1137c:	add	r6, pc, r6
   11380:	add	r5, pc, r5
   11384:	sub	r6, r6, r5
   11388:	mov	r8, r1
   1138c:	mov	r9, r2
   11390:	bl	10848 <strcmp@plt-0x20>
   11394:	asrs	r6, r6, #2
   11398:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1139c:	mov	r4, #0
   113a0:	add	r4, r4, #1
   113a4:	ldr	r3, [r5], #4
   113a8:	mov	r2, r9
   113ac:	mov	r1, r8
   113b0:	mov	r0, r7
   113b4:	blx	r3
   113b8:	cmp	r6, r4
   113bc:	bne	113a0 <__libc_csu_init@@Base+0x34>
   113c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   113c4:	andeq	r0, r1, r8, lsl #23
   113c8:	andeq	r0, r1, r0, lsl #23

000113cc <__libc_csu_fini@@Base>:
   113cc:	bx	lr

Disassembly of section .fini:

000113d0 <.fini>:
   113d0:	push	{r3, lr}
   113d4:	pop	{r3, pc}
